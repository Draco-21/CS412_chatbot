import streamlit as st
import os
import google.generativeai as genai # Import the Google Gemini SDK


# --- THIS SHOULD BE THE FIRST STREAMLIT COMMAND ---
st.set_page_config(page_title="Coding Assistant Bot (Gemini)", layout="wide")

# --- Gemini API Integration ---
def call_external_api(user_message, conversation_history, year_level): # Added year_level
    """
    Calls the Google Gemini API to get a chatbot response.

    Args:
        user_message (str): The latest message from the user.
        conversation_history (list): List of previous messages.
        year_level (str): The selected academic year level of the student.
    Returns:
        str: The chatbot's response generated by the Gemini API.
    """
    print(f"Calling Gemini API for: {user_message} with year level: {year_level}")

    # --- Configure Your Gemini API Key ---
    api_key = os.environ.get("GOOGLE_API_KEY") # Changed to GOOGLE_API_KEY
    if not api_key:
        st.error("Error: GOOGLE_API_KEY environment variable not set. Please set it before running.")
        return "API key not configured. Please contact the administrator."

    try:
        genai.configure(api_key=api_key)

        # --- Model Configuration ---
        # Choose the Gemini model. For chat, 'gemini-pro' was common,
        # but check for the latest recommended model (e.g., gemini-1.5-flash or gemini-1.5-pro if available and suitable)
        # For this example, we'll use a common chat model.
        # Your PDF mentions "Gemini" generally. Let's assume 'gemini-1.5-pro-latest' or 'gemini-pro'.
        # For a project, 'gemini-1.5-flash' is often a good balance of capability and cost.
        model = genai.GenerativeModel(model_name="gemini-1.5-flash") # Or "gemini-pro", "gemini-1.0-pro" etc.

        # --- Construct Year-Level Specific Instruction ---
        # This logic remains the same as it's about tailoring the input
        instruction_prefix = ""
        if year_level == "Year 1 Certificate":
            instruction_prefix = """You are helping a Year 1 (Certificate) student. Keep explanations very simple.
                                    Use basic C++.
                                    if-else conditions, Loops such as While-Loop, For-Loop, and Do-While Loop.
                                    File input and output.
                                    Data Structures such as Arrays, Structs, Classes, Linked Lists, Heap, Stack, Queue, Hash Tables and Binary Trees.
                                    Pointers.
                                    Algorithms such as Sorting algorithms(Bubble Sort, Quick Sort, Big O Notation) and Searching algorithms (Linear Search, Binary Search and Recursive Binary Search).
                                    Recursions.
                                    Object Oriented Programming such as Inheritance, Polymorphism, Encapsulation, Abstraction, Constructors, Destructors, Friend Functions, Private Attributes, Public Attributes and Protected Attributes, Friend Functions, Overloading and Overriding.
                                    Standard Template Library (STL) such as Vectors, Maps, Sets, Iterators and Algorithms.
                                    Student's question: """ # [cite: 13]
        elif year_level == "Year 2 Diploma":
            instruction_prefix = """You are helping a Year 2 (Diploma) student. Provide clear, practical examples. Try to use Java.
                                    Keep the instructions from Year 1 Certificate.
                                    Wombat Machine Learning, coding in binary numbers (0's and 1's)
                                    Assembly Language Programming.
                                    Stack and Queue, Push, Pop.
                                    Java with Basic Syntax, Dynamic Arrays, Priority Queue, Traveling Sales Person Problem, Deterministic and Non-Deterministic Algorithms, Empirical Testing, Sequential Search, Binary Search, Merge Sort, Quick Sort, Bubble Sort, Recursive vs Iterative Fibonacci, Greedy Algorithms.
                                    Insertion Sort, Multithreading.
                                    Android Studio Setup and Programming in Java and Kotlin.
                                    Ubuntu Setup and Wordpress programming.
                                    Java with Springboot framework, Maven and Gradle.
                                    ASP.net Coding with HTML, CSS and JavaScript.
                                    SQL with MySQL and SQLite.
                                    Student's question: """ # [cite: 51]
        elif year_level == "Year 3 Degree":
            instruction_prefix = """You are helping a Year 3 (Degree) student. Be detailed, discuss concepts like efficiency if relevant. Answer in Any Programming Language Requested by User.
                                    Keep the instructions from Year 2 Diploma.
                                    Socket Programming in Python.
                                    Assigning Network Addresses, TCP/IP, UDP, Sockets, Ports, Client-Server Model.
                                    Topology Setup in CISCO Packet Tracer.
                                    gRPC implementation in Java with maven and gradle.
                                    Student's question: """ # [cite: 52]
        elif year_level == "Year 4 Postgraduate Diploma":
            instruction_prefix = """You are helping a Year 4 (Postgraduate Diploma) student. Offer in-depth analysis, advanced concepts, and consider edge cases.
                                    Keep the instructions from Year 3 Degree.
                                    Perceptron Learning Algorithm.
                                    Neural Networks.
                                    Stochastic Gradient Descent.
                                    Logistic Regression.
                                    Linear Regression for Classification.
                                    Backward Propagation.
                                    Forward Propagation.
                                    Clustering and Optimization Algorithms.
                                    Student's question: """ # [cite: 16]
        else:
            instruction_prefix = "You are a helpful coding assistant. Student's question: "

        final_user_message_for_api = f"{instruction_prefix}{user_message}" # [cite: 54]

        # --- Prepare history for Gemini API ---
        # The Gemini API expects history in a specific format.
        # It's slightly different from the OpenAI format.
        # Roles are 'user' and 'model'.
        gemini_history = []
        for msg in conversation_history:
            role = 'user' if msg['role'] == 'user' else 'model'
            gemini_history.append({'role': role, 'parts': [msg['content']]}) # [cite: 53]

        # --- Start chat with history and send the message ---
        chat = model.start_chat(history=gemini_history) # [cite: 53]
        response = chat.send_message(final_user_message_for_api) # [cite: 54]
        
        bot_response = response.text # For Gemini, the text response is often in response.text

    except Exception as e:
        print(f"Error calling Gemini API: {e}") # Log the full error
        st.error(f"Sorry, I encountered an error trying to respond. Please check the terminal logs. Error: {e}")
        bot_response = "Apologies, I couldn't process your request due to an internal error."

    return bot_response
# --- End of Gemini API Integration ---


# --- Defining the year for the dropdown menu ---
YEAR_LEVELS = [
    "Year 1 Certificate",
    "Year 2 Diploma",
    "Year 3 Degree",
    "Year 4 Postgraduate Diploma" # Ensure this matches your PDF examples
]

# --- Initialize session state for selected_year if it doesn't exist ---
if "selected_year" not in st.session_state:
    st.session_state.selected_year = YEAR_LEVELS[0]  # Default to the first option

# --- Function to display and manage year level selection ---
def display_year_level_selector(): # Renamed for clarity
    """Displays the year level selectbox and manages its state."""
    st.sidebar.header("Student Year Level")
    selected_year_from_widget = st.sidebar.selectbox(
        "Select your current year of study:",
        options=YEAR_LEVELS,
        index=YEAR_LEVELS.index(st.session_state.selected_year)
    )

    if selected_year_from_widget != st.session_state.selected_year:
        st.session_state.selected_year = selected_year_from_widget
        st.rerun()

# --- Streamlit UI Code (Standard Text) ---

st.title("Coding Assistant Chatbot âœ¨") # Standard title
st.caption("Powered by Streamlit and DeepSeek") # Standard caption

# Display the year level selector
display_year_level_selector()

# You can display the selected year level for confirmation (optional)
# Moved this to be AFTER the selector is displayed, which makes more sense.
st.sidebar.write(f"Current level: {st.session_state.selected_year}")


# Initialize chat history in session state if it doesn't exist
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Hello! How can I help you with your coding questions today?"}
    ]

# Display existing chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input using the chat input widget at the bottom
if prompt := st.chat_input("Ask your coding question..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ðŸ§  Thinking..."):
            api_history = [msg for msg in st.session_state.messages if msg["role"] != "system"]
            # Remember to update this call for Task 1.2 to pass the year level
            current_year = st.session_state.selected_year
            bot_response = call_external_api(prompt, api_history, current_year)
            st.markdown(bot_response)

    st.session_state.messages.append({"role": "assistant", "content": bot_response})