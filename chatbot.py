# professional_chatbot_deepseek.py

import streamlit as st
import os

# --- DeepSeek API Integration ---
def call_external_api(user_message, conversation_history):
    """
    Calls the DeepSeek API to get a chatbot response using the OpenAI library structure.

    Args:
        user_message (str): The latest message from the user.
        conversation_history (list): List of previous messages [{'role': 'user'/'assistant', 'content': '...'}, ...]

    Returns:
        str: The chatbot's response generated by the DeepSeek API.
    """
    print(f"Calling DeepSeek API for: {user_message}") # For debugging in terminal

    # --- Configure Your DeepSeek API Key ---
    # Reads the API key from the environment variable
    api_key = os.environ.get("DEEPSEEK_API_KEY")
    if not api_key:
        # If the key is not found, return an error message to the UI
        st.error("Error: DEEPSEEK_API_KEY environment variable not set. Please set it before running.")
        return "API key not configured. Please contact the administrator." # Return error message

    try:
        # *** Key Change: Initialize client pointing to DeepSeek API ***
        client = OpenAI(
            api_key=api_key,
            base_url="https://api.deepseek.com/v1" # Point to DeepSeek endpoint
            )

        # --- Prepare messages for the API (same format as OpenAI) ---
        messages = [{"role": "system", "content": "You are a helpful coding assistant."}]
        messages.extend(conversation_history)
        messages.append({"role": "user", "content": user_message})

        # --- Make the API call ---
        response = client.chat.completions.create(
            model="deepseek-chat",  # *** Key Change: Use a DeepSeek model name ***
            messages=messages,
            temperature=0.7,
            max_tokens=150,
            stream=False # Keep stream=False for simplicity, or adapt UI if True
        )
        bot_response = response.choices[0].message.content.strip()

    except Exception as e:
        print(f"Error calling DeepSeek API: {e}") # Log the full error to the terminal
        st.error(f"Sorry, I encountered an error trying to respond. Please check the terminal logs for details. Error: {e}")
        bot_response = "Apologies, I couldn't process your request due to an internal error."

    return bot_response
# --- End of DeepSeek API Integration ---


# --- Streamlit UI Code (Remains the same) ---

st.set_page_config(page_title="Chatbot for hopeless peopl", layout="wide") # Configure page

st.title("Chatbot for hopeless people with no life âœ¨")
st.caption("By Jayshil Singh (S11208397)")

# Initialize chat history in session state if it doesn't exist
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Hello! How can I help you with your FuckingðŸ‘‰ðŸ‘ŒðŸ’¦ðŸ’¦ðŸ’¦coding questions today? "}
    ]

# Display existing chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input using the chat input widget at the bottom
if prompt := st.chat_input("Ask your lazy question you Bitch!!!..."):
    # Add user message to chat history and display it immediately
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Generate bot response using the API function
    with st.chat_message("assistant"):
        with st.spinner("ðŸ§  Thinking about your useless request..."):
            api_history = [msg for msg in st.session_state.messages if msg["role"] != "system"]
            bot_response = call_external_api(prompt, api_history)
            st.markdown(bot_response)

    # Add bot response to chat history
    st.session_state.messages.append({"role": "assistant", "content": bot_response})