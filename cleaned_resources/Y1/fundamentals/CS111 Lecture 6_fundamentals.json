{
  "title": "CS111 Lecture 6",
  "language": "cpp",
  "topics": [
    "database",
    "fundamentals"
  ],
  "purpose": "C++ for Everyone by Cay Horstmann Copyright \u00a9 2012 by John Wiley & Sons.",
  "code": "int main()\n{\ndouble sum = 0;\nint count = 0;\ndouble salary = 0;\ncout << \"Enter salaries, -1 to finish: \";\ncin >> salary;\nwhile (salary != -1)\n{\nsum = sum + salary;\ncount++;\ncin >> salary;\n}\ncout << \u201cThe average is: \" << sum/count << endl;\nreturn 0;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nUsing Failed Input for Processing\n\uf0a7 Sometimes it is easier and a bit more intuitive to ask the\nuser to \u201cHit Q to Quit\u201d instead or requiring the input of a\nsentinel value.\n\uf0a7 Sometimes picking a sentinel value is simply impossible\n\u2013 if any valid number is allowed, which number could be\nchosen?\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nUsing Failed Input for Processing\n\uf0a7 Your program will fail if you for example enter a\ncharacter \u2018x\u2019, when the program wants to read an\ninteger.\nint number;\ncout << \"Enter a number\";\ncin >> number;\n\uf0a7 If you enter a character \u2018x\u2019 or a string \u201cfive\u201d the input will\nfail.\n\uf0a7 You can use cin.fail() to test if the most recent\ninput failed.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nUsing Failed Input for Processing\nint number;\ncout << \"Enter a number\";\ncin >> number;\nwhile(cin.fail()){\n\u2026// Reenter number;\n}\n\uf0a7 If input fails (cin.fail() is true) you have to first clear\nit with cin.clear();\nUsing Failed Input for Processing\nint number;\ncout << \"Enter a number\";\ncin >> number;\nwhile(cin.fail()){\nDeclare a string\ncin.clear();\nvariable, and read\n\u2026// Reenter number;\ninto it. String can read\n} any input.\nRemember, the\nprogram failed to read\n\u2018x\u2019 or \u201cfive\u201d\n\uf0a7 The offending input however is still in the input stream.\n\uf0a7 To deal with this you have to read (and remove the offending input).\nUsing Failed Input for Processing\nint number;\ncout << \"Enter a number\";\ncin >> number;\nwhile(cin.fail()){\ncin.clear(); Declare a string\nstring not_an_int; variable, and read\ninto it. String can read\ncin >> not_an_int;\nany input.\ncout << \"Try again:\";\ncin >> number;\nNow the offending\n}\nAnother attempt to input is removed.\nread number.\n\uf0a7 The offending input however is still in the input stream.\n\uf0a7 To deal with this you have to read (and remove the offending input).\nUsing Failed Input for Processing\n\uf0a7 You can combine cin.fail() with other requirements\nint number;\ncout << \"Enter a positive number\";\ncin >> number;\nwhile(cin.fail() || number<0){\nif(cin.fail()){\ncin.clear();\nstring not_an_int;\ncin >> not_an_int;\n}\ncout << \"Try again:\";\ncin >> number;\n}\nUsing Failed Input for Processing\n\uf0a7 How to use cin.fail() as sentinel.\nint value;\ncout << \"Enter values, Q to quit: \";\ncin >> value;\nwhile (!cin.fail())\n{\n// process value here\ncout << \"Enter values, Q to quit: \";\ncin >> value;\n}\ncin.clear();\nstring not_an_int;\ncin >> not_an_int;\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nUsing Failed Input for Processing\n\uf0a7 How to use cin >> value itself as sentinel.\nint value;\ncin >> value\ncout << \"Enter values, Q to quit: \";\nreturns true if it\nwhile (cin >> value)\nsucceeds to\n{\nread, and false\n// process value here\notherwise.\ncout << \"Enter values, Q to quit: \";\n}\ncin.clear();\nstring not_an_int;\ncin >> not_an_int;\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Loops\nFor each hour, 60 minutes are processed \u2013 a nested loop.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Loops\n\uf0a7 Nested loops are used mostly for data in tables as rows\nand columns.\n\uf0a7 The processing across the columns is a loop, as you\nhave seen before, \u201cnested\u201d inside a loop for going down\nthe rows.\n\uf0a7 Each row is processed similarly so design begins at that\nlevel. After writing a loop to process a generalized row,\nthat loop, called the \u201cinner loop,\u201d is placed inside an\n\u201couter loop.\u201d\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Loops\nWrite a program to produce a table of powers.\nThe output should be something like this:\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Loops\n\uf0a7 The first step is to solve the \u201cnested\u201d loop.\n\uf0a7 There are four columns and in each column we display\nthe power. Using x to be the number of the row we are\nprocessing, we have (in pseudo-code):\n\u2022 You would test that this works in your code before\ncontinuing. If you can\u2019t correctly print one row, why try\nprinting lots of them?\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Loops\n\uf0a7 As a for loop it would look like this:\nsetw(10) is\nfor (int n = 1; n <= NMAX; n++)\nfor layout.\n{\nWe cover this\ncout << setw(10) << pow(x, n);\nnext week.\n}\n\uf0a7 Similarly you can print the first row, the header\nfor (int n = 1; n <= NMAX; n++)\n{\ncout << setw(10) << n;\n}\nNested Loops\nNow, putting the inner loop\ninto the whole process we have:\n(don\u2019t forget to indent, nestedly)\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Loops\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Complete Program for Table of Powers\nint main()\n{\nconst int NMAX = 4;\nconst double XMAX = 10;\n// Print table header\nfor (int n = 1; n <= NMAX; n++)\n{\ncout << setw(10) << n;\n}\ncout << endl;\nfor (int n = 1; n <= NMAX; n++)\n{\ncout << setw(10) << \"x \";\n}\ncout << endl << endl;\n\u2026\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Complete Program for Table of Powers\n// Print table body\nfor (double x = 1; x <= XMAX; x++)\n{\n// Print table row\nfor (int n = 1; n <= NMAX; n++)\n{\ncout << setw(10) << pow(x, n);\n}\ncout << endl;\n}\nreturn 0;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Solutions\n\uf0a7 Program to find the sum of Positive numbers\n\uf0a7 Let us assume that all numbers we are interested in are >=0 but\nwe don\u2019t know how many numbers there are and whether in any\nparticular sequence.\n\uf0a7 We can type in the numbers one after the other and when we get\nto the end we can type in a negative number which will stop the\nloop.\nCommon Solutions\n\uf0a7 Program to find the sum of Positive numbers\n\uf0a7 What are the inputs?\n\uf0a7 The input are numbers (int)\n\uf0a7 Are there any constants?\n\uf0a7 No\n\uf0a7 What other variables do we need?\n\uf0a7 The sum (int)\n\uf0a7 What is the output?\n\uf0a7 The sum\nCommon Solutions\n\uf0a7 Pseudo-code\n\uf0a7 Ask for a number\n\uf0a7 While number positive\n\uf0a7 add number to the total sum\n\uf0a7 ask for a number\n\uf0a7 Print the sum\nCommon Solutions\n#include <iostream>\n#include <stdlib.h>\nint main()\n{\nint sum = 0, num;\ncout << \"Enter Number: \";\ncin >> num;\nwhile (num >= 0){\nsum = sum + num;\ncout << \"\\nEnter Number: \";\ncin >> num;\n}\ncout << \"\\nSum is: \" << sum << endl;\nsystem(\"PAUSE\");\nreturn 0;\n}\nCommon Solutions\n\uf0a7 Program to find the average of Positive numbers\n\uf0a7 Let us assume that all numbers we are interested in are >=0 but\nwe don\u2019t know how many numbers there are and whether in any\nparticular sequence.\n\uf0a7 We can type in the numbers one after the other and when we get\nto the end we can type in a negative number which will stop the\nloop.\nCommon Solutions\n\uf0a7 Program to find the sum of Positive numbers\n\uf0a7 What are the inputs?\n\uf0a7 The input are numbers (double)\n\uf0a7 Are there any constants?\n\uf0a7 No\n\uf0a7 What other variables do we need?\n\uf0a7 The sum (double)\n\uf0a7 A counter (double)\n\uf0a7 What is the output?\n\uf0a7 The sum/counter\nCommon Solutions\n\uf0a7 Pseudo-code\n\uf0a7 Ask for a number\n\uf0a7 While number positive\n\uf0a7 add number to the total sum\n\uf0a7 increase the counter\n\uf0a7 ask for a number\n\uf0a7 Print the sum/counter\nCommon Solutions\n#include <iostream>\n#include <stdlib.h>\nint main()\n{\ndouble sum = 0, num, counter = 0;\ncout << \"Enter Number: \";\ncin >> num;\nwhile (num >= 0){\nsum = sum + num;\ncounter++;\ncout << \"\\nEnter Number: \";\ncin >> num;\n}\ncout << \"\\nAverage is: \" << sum/counter << endl;\nsystem(\"PAUSE\");\nreturn 0;\n}\nCommon Solutions\n\uf0a7 Program to find the maximum of Positive numbers\n\uf0a7 Let us assume that all numbers we are interested in are >=0 but\nwe don\u2019t know how many numbers there are and whether in any\nparticular sequence.\n\uf0a7 We can type in the numbers one after the other and when we get\nto the end we can type in a negative number which will stop the\nloop.\nCommon Solutions\n\uf0a7 Program to find the sum of Positive numbers\n\uf0a7 What are the inputs?\n\uf0a7 The input are numbers\n\uf0a7 Are there any constants?\n\uf0a7 No\n\uf0a7 What other variables do we need?\n\uf0a7 The cuurent maximum\n\uf0a7 What is the output?\n\uf0a7 The maximum\nCommon Solutions\n\uf0a7 Pseudo-code\n\uf0a7 Ask for a number\n\uf0a7 While number positive\n\uf0a7 if the number if larger than current maximum\n\uf0a7 the number becomes the new maximum\n\uf0a7 ask for a number\n\uf0a7 Print the maximum\nCommon Solutions\n#include <iostream>\n#include <stdlib.h>\nint main()\n{\ndouble maximum = 0, num;\ncout << \"Enter Number: \";\ncin >> num;\nwhile (num >= 0){\nif(num>maximum){\nmaximum=num;\n}\ncout << \"\\nEnter Number: \";\ncin >> num;\n}\ncout << \"\\nMaximum is: \" << maximum << endl;\nsystem(\"PAUSE\");\nreturn 0;\n}\nExercise: Sum of Digits\n\uf0a7 The sum of digits of a natural number is just the sum of\nthe digits.\n\uf0a7 The sum of digits of 274 is 2+7+4=13\n\uf0a7 How to compute the sum of digits?\n\uf0a7 How to compute the digits one by one?\nExercise: Sum of Digits\n\uf0a7 How to compute the digits one by one?\n\uf0a7 The last digit of a number x is the number x mod 10\n\uf0a7 In C++ this would be x % 10.\n\uf0a7 Example: 274 % 10 = 4\n\uf0a7 The second last digit becomes the last digit by integer division\nwith 10.\n\uf0a7 In C++ this would be x / 10. (x and 10 are ints)\n\uf0a7 Example 274 / 10 = 27\n\uf0a7 The digit sum of an inter between 0 and 9 is the number itself.\nExercise: Sum of Digits\n\uf0a7 Program to find the sum of digits\n\uf0a7 What are the inputs?\n\uf0a7 The input is a positive integer (natural number).\n\uf0a7 Are there any constants?\n\uf0a7 No\n\uf0a7 What other variables do we need?\n\uf0a7 The current sum of digits\n\uf0a7 What is the output?\n\uf0a7 The sum of digits\nExercise: Sum of Digits\n\uf0a7 Pseudo-code\n\uf0a7 Ask for a number\n\uf0a7 While number larger than 10\n\uf0a7 add the last digit to the sum\n\uf0a7 remove the last digit from the number by division.\n\uf0a7 Print the sum\nExercise: Sum of Digits\n\uf0a7 Pseudo-code\n\uf0a7 Ask for a number\n\uf0a7 While number larger than 10\n\uf0a7 add the last digit to the sum\n\uf0a7 remove the last digit from the number by division.\n\uf0a7 Print the sum\n",
  "context": "C++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Complete Salary Average Program",
  "source_file": "resources\\Year 1\\CS111 Lectures\\CS111 Lecture 6.pdf",
  "line_numbers": [
    49,
    442
  ]
}