{
  "title": "CS111 Lecture 4.1",
  "language": "cpp",
  "topics": [
    "networking",
    "fundamentals"
  ],
  "purpose": "Copyright \u00a9 2012 by John Wiley & Sons.",
  "code": "{\ncout << \"Most structures fall\";\n}\nelse if (richter >= 7.0)\n{\ncout << \"Many buildings destroyed\";\n}\nelse if (richter >= 6.0)\n{\ncout << \"Many buildings considerably damaged, some collapse\";\n}\nelse if (richter >= 4.5)\n{\ncout << \"Damage to poorly constructed buildings\";\n}\nelse\n{\ncout << \"No destruction of buildings\";\n}\n. . . C++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nMultiple Alternatives\nIIIfff aaa ttteeesssttt iiisss fffaaalllssseee,,,\ntthhaatt bblloocckk iiss sskkiippppeedd and\nif (richter >= 8.0)\n{\nthe next test is made.\ncout << \"Most structures fall\";\n}\nelse if (richter >= 7.0)\n{\ncout << \"Many buildings destroyed\";\n}\nelse if (richter >= 6.0)\n{\ncout << \"Many buildings considerably damaged, some collapse\";\n}\nelse if (richter >= 4.5)\n{\ncout << \"Damage to poorly constructed buildings\";\n}\nelse\n{\ncout << \"No destruction of buildings\";\n}\n. . . C++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nMultiple Alternatives\nAAss ssoooonn aass oonnee ooff tthhee\nffoouurr tteessttss ssuucccceeeeddss,,\nif (richter >= 8.0)\n{\ntthhaatt bblloocckk iiss eexxeeccuutteedd,,\ncout << \"Most structures fall\"; ddiissppllaayyiinngg tthhee rreessuulltt,,\n}\nelse if (richter > = 7.0)\nand no further tests\n{\nare attempted.\ncout << \"Many buildings destroyed\";\n}\nelse if (richter >= 6.0)\n{\ncout << \"Many buildings considerably damaged, some collapse\";\n}\nelse if (richter >= 4.5)\n{\ncout << \"Damage to poorly constructed buildings\";\n}\nelse\n{\ncout << \"No destruction of buildings\";\n}\n. . . C++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nMultiple Alternatives \u2013 Wrong Order of Tests\nBecause of this execution order,\nwhen using multiple if statements,\npay attention to the order of the conditions.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe switch Statement\nThis is a bit of a mess to read.\nint digit;\n...\nif (digit == 1) { digit_name = \"one\"; }\nelse if (digit == 2) { digit_name = \"two\"; }\nelse if (digit == 3) { digit_name = \"three\"; }\nelse if (digit == 4) { digit_name = \"four\"; }\nelse if (digit == 5) { digit_name = \"five\"; }\nelse if (digit == 6) { digit_name = \"six\"; }\nelse if (digit == 7) { digit_name = \"seven\"; }\nelse if (digit == 8) { digit_name = \"eight\"; }\nelse if (digit == 9) { digit_name = \"nine\"; }\nelse { digit_name = \"\"; }\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe switch Statement\nC++ has a statement that helps a bit with the readability of\ns itu a tions like this:\nThe switch statement.\nONLY a sequence of if statements that compares a single\nvalue against several constant alternatives can be\nimplemented as a switch statement.\nUse only with integer or characters.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe switch Statement\nint digit;\nswitch (digit)\n{\ncase 1: digit_name = \"one\"; break;\ncase 2: digit_name = \"two\"; break;\ncase 3: digit_name = \"three\"; break;\ncase 4: digit_name = \"four\"; break;\ncase 5: digit_name = \"five\"; break;\ncase 6: digit_name = \"six\"; break;\ncase 7: digit_name = \"seven\"; break;\ncase 8: digit_name = \"eight\"; break;\ncase 9: digit_name = \"nine\"; break;\ndefault: digit_name = \"\"; break;\n}\nThe default branch is chosen if none of the cases matches.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe switch Statement\nint digit;\n\u2018break\u2019 means\nswitch (digit) to leave the\nswitch\n{\nimmediately.\ncase 1: digit_name = \"one\"; break;\ncase 2: digit_name = \"two\"; break;\ncase 3: digit_name = \"three\"; break;\ncase 4: digit_name = \"four\"; break;\ncase 5: digit_name = \"five\"; break;\ncase 6: digit_name = \"six\"; break;\ncase 7: digit_name = \"seven\"; break;\ncase 8: digit_name = \"eight\"; break;\ncase 9: digit_name = \"nine\"; break;\ndefault: digit_name = \"\"; break;\n}\ncontinue here!\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe switch Statement\nBreak\n\uf0a7 Every branch of the switch must be terminated by a break\nstatement.\n\uf0a7 If the break is missing, execution falls through to the next branch,\nand so on, until finally a break or the end of the switch is\nreached.\n\uf0a7 In practice, this fall-through behavior is rarely useful, and it is a\ncommon cause of errors.\n\uf0a7 If you accidentally forget the break statement, your program\ncompiles but executes unwanted code.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013 Forgotten break\nint digit;\nA forgottten\n\u2018break\u2019 means\nswitch (digit)\nyou stay in the\n{\nswitch.\ncase 1: digit_name = \"one\"; break;\nYou\u2019ll go to the\ncase 2: digit_name = \"two\";\nnext test. It is\ncase 3: digit_name = \"three\"; break;\nfalse.\ncase 4: digit_name = \"four\"; break;\nYou\u2019ll go to the\ncase 5: digit_name = \"five\"; break;\nnext test. It is\ncase 6: digit_name = \"six\"; break; false again.\ncase 7: digit_name = \"seven\"; break;\nEtcetera.\ncase 8: digit_name = \"eight\"; break;\ncase 9: digit_name = \"nine\"; break; You\u2019ll end up at\nthe default. It\ndefault: digit_name = \"\"; break;\nis always true.\n} And you execute\nalso this block.\nOh, no!\nHave a break in every case.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013 Forgotten break\nMany programmers consider the switch statement\nsomewhat dangerous and prefer the if statement.\nIf your aren\u2019t sure about a switch, use an if-statement.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nExercise\nNormally at USP, grade for a course is determined as\nfollows\nRange Grade\n85-100 A+\n78-84 A\n71-77 B+\n64-70 B\n57-63 C+\n50-56 C\n40-49 D\n0-39 E\nExercise\nWrite a variable declaration to hold the score.\nWhat data type could it be?\nExercise\nWrite a cout statement to ask the user to enter\nscore and a cin statement to read in the value?\nExercise\nWrite an if statement to test whether score is\ngreater than or equal to 85 and if true display \u201cYou\ngot A+\u201d\nExercise\nWrite an else if part to test whether the score\nis greater than or equal to 78 and if so display\n\u201cYou got A\u201d.\nExercise\nAfter you have tested all the conditions, how will\nthe last part of the if\u2026else if look like?\n",
  "context": "Copyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nMultiple Alternatives\nif (richter >= 8.0)",
  "source_file": "resources\\Year 1\\CS111 Lectures\\CS111 Lecture 4.1.pdf",
  "line_numbers": [
    39,
    265
  ]
}