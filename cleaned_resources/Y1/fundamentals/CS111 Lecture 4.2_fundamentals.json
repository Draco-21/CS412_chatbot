{
  "title": "CS111 Lecture 4.2",
  "language": "cpp",
  "topics": [
    "database",
    "networking",
    "algorithms",
    "fundamentals"
  ],
  "purpose": "use 6400 + 25% marginal tax Display tax Nested Branches \u2013 Taxes",
  "code": "int main()\n{\nconst double RATE1 = 0.10;\nconst double RATE2 = 0.25;\nconst double SINGLE_LIMIT = 32000;\nconst double MARRIED_LIMIT = 64000;\nconst double SINGLE_BASE = 3200;\nconst double MARRIED_BASE = 6400; First, we ask\nfor income\ndouble tax = 0; and marital\ndouble income; status.\nstring marital_status;\ncout << \"Please enter your income: \";\ncin >> income;\ncout << \"Please enter s for single, m for married: \";\ncin >> marital_status;\nC++ for Everyone by Cay Horstmann\n(to be continued)\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Branches \u2013 Taxes\nif (marital_status == \"s\")\nThis \u2018if\u2019 is nested,\n{ //the true-branch (single)\nbecause it is between\nif (income <= SINGLE_LIMIT)\nthe beginning\n{ and the end\ntax = RATE1 * income; of this branch.\n}\nelse\n{\ntax = SINGLE_BASE + RATE2 * (income - SINGLE_LIMIT);\n}\n}\nelse\n(to be continued)\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Branches \u2013 Taxes\n{ //the false-branch (married \u2013 not single)\nif (income <= MARRIED_LIMIT)\n{\ntax = RATE1 * income;\n}\nelse\n{\ntax = MARRIED_BASE + RATE2 * (income - MARRIED_LIMIT);\n}\n}\ncout << \"The tax is $\" << tax << endl;\nreturn 0;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Branches \u2013 Taxes\nIn theory you can have even deeper levels of nesting.\nConsider:\nfirst by state\nthen by filing status\nthen by income level\nThis situation requires three levels of nesting.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Branches \u2013 Taxes\nIn practice two levels of nesting should be enough.\nBeyond that you should be calling your own functions.\nBut, you don\u2019t know to write functions\u2026\n\u2026yet\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Dangling else Problem\nWhen an if statement is nested inside another\nif statement, the following error may occur.\nCan you find the problem with the following?\ndouble entrance_fee = 5.00; // Movies are usually $5\nif ( part_of_week == \"weekday\")\nif ( format == \"3D\")\nentrance_fee = 7.00; // 3D movies are $7 during the week\nelse\nentrance_fee = 9.00; // All movies are $9 in the weekend\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Dangling else Problem\n\uf0a7 Indentation level seems to suggest that the else belongs to the test\npart_of_week == \"weekday\"\n\uf0a7 Unfortunately, that is not the case.\n\uf0a7 The compiler ignores all indentation and matches the else with the\npreceding if\nif ( format == \"3D\")\ndouble entrance_fee = 5.00; // Movies are usually $5\nif ( part_of_week == \"weekday\")\nif ( format == \"3D\")\nentrance_fee = 7.00; // 3D movies are $7 during the week\nelse\nentrance_fee = 9.00; // All movies are $9 in the weekend\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Dangling else Problem\n\uf0a7 This is what the code actually is.\n\uf0a7 And this is not what you want.\ndouble entrance_fee = 5.00; // Movies are usually $5\nif ( part_of_week == \"weekday\")\nif ( format == \"3D\")\nentrance_fee = 7.00; // 3D movies are $7 during the week\nelse\nentrance_fee = 9.00; // All movies are $9 in the weekend\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Dangling else Problem\n\uf0a7 This is what the code actually is.\n\uf0a7 And this is not what you want.\nThis problem has a name: \u201cthe dangling else problem\u201d\ndouble entrance_fee = 5.00; // Movies are usually $5\nif ( part_of_week == \"weekday\")\nif ( format == \"3D\")\nentrance_fee = 7.00; // 3D movies are $7 during the week\nelse\nentrance_fee = 9.00; // All movies are $9 in the weekend\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Dangling else Problem\nThere a solution to the dangling else problem.\nUse braces.\ndouble entrance_fee = 5.00; // Movies are usually $5\nif ( part_of_week == \"weekday\"){\nif ( format == \"3D\"){\nentrance_fee = 7.00; // 3D movies are $7 during the week\n}\n}\nelse\n{\nentrance_fee = 9.00; // All movies are $9 in the weekend\n}\nReview and Testing\n\uf0a7 Previously we told you how to write code.\n\uf0a7 Complicated code.\n\uf0a7 We told you how to find compile time errors.\n\uf0a7 And how to fix them.\n\uf0a7 We told you to look for warning messages.\n\uf0a7 And take them serious.\n\uf0a7 But how do you make sure your code is correct?\nHand-Tracing\n\uf0a7 A very useful technique for understanding whether a program\nworks correctly is called hand-tracing.\n\uf0a7 You simulate the program\u2019s activity on a sheet of paper.\n\uf0a7 You can use this method with pseudo code or C++ code.\n\uf0a7 This is a paper exercise.\n\uf0a7 You\u2019ll need paper.\n\uf0a7 Lot\u2019s of paper.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHand-Tracing\nYou need to keep track of\n\uf0a7 Where in the program you are\n\uf0a7 The values of all variables\nAfter each step you update\n\uf0a7 Where in the program you are\n\uf0a7 The values of all variables\nHand-Tracing\nLet\u2019s do this with the tax program.\n\u2022 We need some paper.\nline\n\u2022 A table with one column for the\nline number.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNested Branches \u2013 Taxes\nThen we add lime numbers to all non-empty lines.\n1 int main()\n{\n2 const double RATE1 = 0.10;\n3 const double RATE2 = 0.25;\n4 const double SINGLE_LIMIT = 32000;\n5 const double MARRIED_LIMIT = 64000;\n6 const double SINGLE_BASE = 3200;\n7 const double MARRIED_BASE = 6400;\n8 double tax = 0;\n9 double income = 0;\n10 string marital_status;\n11 cout << \"Please enter your income: \";\n12 cin >> income;\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n1 int main()\n{\n2 const double RATE1 = 0.10;\n3 const double RATE2 = 0.25;\nline\n4 const double SINGLE_LIMIT = 32000;\n5 const double MARRIED_LIMIT = 64000;\n6 const double SINGLE_BASE = 3200;\n7 const double MARRIED_BASE = 6400;\n\u2026\n\uf0a7 Constants aren\u2019t \u201cchanges\u201d.\n\uf0a7 They were created and initialized earlier\nso we don\u2019t write them in our trace.\n\uf0a7 But we make a note.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n7 const double MARRIED_BASE = 6400;\n8 double tax = 0;\nline tax\n9 double income = 0;\n10 string marital_status;\n\u2026\n\uf0a7 For each variable declaration we\nintroduce a new column.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n7 const double MARRIED_BASE = 6400;\n8 double tax = 0;\nline tax\n9 double income = 0;\n8 0\n10 string marital_status;\n\u2026\n\uf0a7 For each variable declaration we\nintroduce a new column.\n\uf0a7 If a variable is initialized, we write down\nthe value.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n7 const double MARRIED_BASE = 6400;\n8 double tax = 0;\nline tax\n9 double income = 0;\n8 0\n10 string marital_status;\n9\n\u2026\n\uf0a7 For each variable declaration we\nintroduce a new column.\n\uf0a7 If a variable is initialized, we write down\nthe value.\n\uf0a7 And we proceed with the next line.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n7 const double MARRIED_BASE = 6400;\n8 double tax = 0;\nline tax income\n9 double income = 0;\n8 0\n10 string marital_status;\n9 \u2018\u2019 0\n\u2026\n\uf0a7 For each variable declaration we\nintroduce a new column.\n\uf0a7 If a variable is initialized, we write down\nthe value.\n\uf0a7 And we proceed with the next line.\n\uf0a7 For values that don\u2019t change we mark ''\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n7 const double MARRIED_BASE = 6400;\nmarital\n8 double tax = 0;\nline tax income status\n9 double income = 0;\n8 0\n10 string marital_status;\n9 \u2018\u2019 0\n10 \u2018\u2019 \u2018\u2019\n\u2026\n\uf0a7 For each variable declaration we\nintroduce a new column.\n\uf0a7 If a variable is initialized, we write down\nthe value.\n\uf0a7 And we proceed with the next line.\n\uf0a7 For values that don\u2019t change we mark ''\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n11 cout << \"Please enter your income: \";\n12 cin >> income;\nmarital\nline tax income status\n13 cout << \"Please enter s for single,\n8 0\nm for married: \";\n9 \u2018\u2019 0\n14 cin >> marital_status;\n10 \u2018\u2019 \u2018\u2019\n\u2026\n11 \u2018\u2019 \u2018\u2019\n\uf0a7 For lines that just produce output nothing\nchanges.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n11 cout << \"Please enter your income: \";\n12 cin >> income;\nmarital\nline tax income status\n13 cout << \"Please enter s for single,\n8 0\nm for married: \";\n9 \u2018\u2019 0\n14 cin >> marital_status;\n10 \u2018\u2019 \u2018\u2019\n\u2026\n11 \u2018\u2019 \u2018\u2019\n12 \u2018\u2019 10000\n\uf0a7 For lines that just produce output nothing\nchanges.\n\uf0a7 For lines that ask for an input we select a\nvalue.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n11 cout << \"Please enter your income: \";\n12 cin >> income;\nmarital\nline tax income status\n13 cout << \"Please enter s for single,\n8 0\nm for married: \";\n9 \u2018\u2019 0\n14 cin >> marital_status;\n10 \u2018\u2019 \u2018\u2019\n\u2026\n11 \u2018\u2019 \u2018\u2019\n12 \u2018\u2019 10000\n\uf0a7 For lines that just produce output nothing\nchanges.\n\uf0a7 For lines that ask for an input we select a\nvalue.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n\u2026\n11 cout << \"Please enter your income: \";\n12 cin >> income;\nmarital\nline tax income status\n13 cout << \"Please enter s for single,\n8 0\nm for married: \";\n9 \u2018\u2019 0\n14 cin >> marital_status;\n10 \u2018\u2019 \u2018\u2019\n\u2026\n11 \u2018\u2019 \u2018\u2019\n12 \u2018\u2019 10000\n\uf0a7 For lines that just produce output nothing\n13 \u2018\u2019 \u2018\u2019\nchanges. 14 \u2018\u2019 \u2018\u2019 \u2019m\u2019\n\uf0a7 For lines that ask for an input we select a\nvalue.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n15 if (marital_status == \"s\")\n{ //the true-branch (single) marital\n17 if (income <= SINGLE_LIMIT) line tax income status\n{ 8 0\n18 tax = RATE1 * income; 9 \u2018\u2019 0\n10 \u2018\u2019 \u2018\u2019\n}\n11 \u2018\u2019 \u2018\u2019\n19 else\n12 \u2018\u2019 10000\n{\n13 \u2018\u2019 \u2018\u2019\n20 tax = SINGLE_BASE + RATE2 * (in 1 c 4 o me - \u2018\u2019 S INGLE_L \u2018\u2019 IMIT); \u2019m\u2019\n} 15 \u2018\u2019 \u2018\u2019 \u2018\u2019\n}\n21 else\n\u2026\n\uf0a7 Every if-condition gets evaluated.\n\uf0a7 If true continue with the next line, otherwise with the first line of\nthe else.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n15 if (marital_status == \"s\")\n{ //the true-branch (single) marital\n17 if (income <= SINGLE_LIMIT) line tax income status\n{ 8 0\n18 tax = RATE1 * income; 9 \u2018\u2019 0\n10 \u2018\u2019 \u2018\u2019\n}\n11 \u2018\u2019 \u2018\u2019\n19 else\n12 \u2018\u2019 10000\n{\n13 \u2018\u2019 \u2018\u2019\n20 tax = SINGLE_BASE + RATE2 * (in 1 c 4 o me - \u2018\u2019 S INGLE_L \u2018\u2019 IMIT); \u2019m\u2019\n} 15 \u2018\u2019 \u2018\u2019 \u2018\u2019\n21 \u2018\u2019 \u2018\u2019 \u2018\u2019\n}\n21 else\n\u2026\n\uf0a7 Condition marital_status == \"s\" is false,\n\uf0a7 Hence, continue with line 21\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n21 else\n{ //the false-branch (married \u2013 not s ingle) marital\nline tax income status\n22 if (income <= MARRIED_LIMIT)\n{ 8 0\n23 tax = RATE1 * income; 9 \u2018\u2019 0\n10 \u2018\u2019 \u2018\u2019\n}\n11 \u2018\u2019 \u2018\u2019\n24 else\n12 \u2018\u2019 10000\n{\n13 \u2018\u2019 \u2018\u2019\n25 tax = MARRIED_BASE + RATE2 * ( i1n4c ome -\u2018\u2019 MARRIE\u2018D\u2019 _LIMIT)\u2019m; \u2019\n} 15 \u2018\u2019 \u2018\u2019 \u2018\u2019\n21 \u2018\u2019 \u2018\u2019 \u2018\u2019\n}\n22 \u2018\u2019 \u2018\u2019 \u2018\u2019\n..\n\uf0a7 Condition income <= MARRIED_LIMIT is true,\n\uf0a7 Hence, continue with line 23\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n21 else\n{ //the false-branch (married \u2013 not s ingle) marital\nline tax income status\n22 if (income <= MARRIED_LIMIT)\n{ 8 0\n23 tax = RATE1 * income; 9 \u2018\u2019 0\n10 \u2018\u2019 \u2018\u2019\n}\n11 \u2018\u2019 \u2018\u2019\n24 else\n12 \u2018\u2019 10000\n{\n13 \u2018\u2019 \u2018\u2019\n25 tax = MARRIED_BASE + RATE2 * ( i1n4c ome -\u2018\u2019 MARRIE\u2018D\u2019 _LIMIT)\u2019m; \u2019\n} 15 \u2018\u2019 \u2018\u2019 \u2018\u2019\n21 \u2018\u2019 \u2018\u2019 \u2018\u2019\n}\n22 \u2018\u2019 \u2018\u2019 \u2018\u2019\n..\n23 1000 \u2018\u2019 \u2018\u2019\n\uf0a7 Condition income <= MARRIED_LIMIT is true,\n\uf0a7 Hence, continue with line 23\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n21 else\n{ //the false-branch (married \u2013 not s ingle) marital\nline tax income status\n22 if (income <= MARRIED_LIMIT)\n{ 8 0\n23 tax = RATE1 * income; 9 \u2018\u2019 0\n10 \u2018\u2019 \u2018\u2019\n}\n11 \u2018\u2019 \u2018\u2019\n24 else\n12 \u2018\u2019 10000\n{\n13 \u2018\u2019 \u2018\u2019\n25 tax = MARRIED_BASE + RATE2 * ( i1n4c ome -\u2018\u2019 MARRIE\u2018D\u2019 _LIMIT)\u2019m; \u2019\n} 15 \u2018\u2019 \u2018\u2019 \u2018\u2019\n21 \u2018\u2019 \u2018\u2019 \u2018\u2019\n}\n22 \u2018\u2019 \u2018\u2019 \u2018\u2019\n..\n23 1000 \u2018\u2019 \u2018\u2019\n\uf0a7 At the end of a block continue with the next line after the whole if.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nRATE1=0.10, RATE2=0.25\nHand-Tracing\nSINGLE_LIMIT=32000,\nMARRIED_LIMIT = 64000\nSINGLE_BASE =3200\nMARRIED_BASE =6400\n26 cout << \"The tax is $\" << tax << endl;\n27 return 0; marital\nline tax income status\n}\n.. 8 0\n9 \u2018\u2019 0\n\uf0a7 Output to screen does not change the 10 \u2018\u2019 \u2018\u2019\n11 \u2018\u2019 \u2018\u2019\nvalues of variables.\n12 \u2018\u2019 10000\n\uf0a7 Continue until the end (return 0)\n13 \u2018\u2019 \u2018\u2019\n14 \u2018\u2019 \u2018\u2019 \u2019m\u2019\n15 \u2018\u2019 \u2018\u2019 \u2018\u2019\n21 \u2018\u2019 \u2018\u2019 \u2018\u2019\n22 \u2018\u2019 \u2018\u2019 \u2018\u2019\n23 1000 \u2018\u2019 \u2018\u2019\n26 \u2018\u2019 \u2018\u2019 \u2018\u2019\n27 \u2018\u2019 \u2018\u2019 \u2018\u2019\nThe end.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nPrepare Test Cases\nTest cases\n\uf0a7 Consider how to test the tax computation program.\n\uf0a7 You cannot try out all possible inputs of filing status and income\nlevel.\n\uf0a7 Even if you could, there would be no point in trying them all.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nPrepare Test Cases\nTest cases\n\uf0a7 A test case specifies the input to the program and the expected\noutput.\n\uf0a7 The are usually multiple test cases, to cover different parts of the\ncode.\n\uf0a7 How do you choose a good test case?\nPrepare Test Cases\nTest cases\n\uf0a7 A good practice is to select test cases that test boundary\ncondition.\n\uf0a7 Testing boundary condition means to select values such that\ncondition are either just true, or just false.\nSINGLE_LIMIT\nis 32000\n\uf0a7 Example if(income<=SINGLE_LIMIT)\n\uf0a7 Use a value of 32000 for income, for one test,\n\uf0a7 Use a value of 32001 for income, for another test\nPrepare Test Cases\nTest cases\n\uf0a7 Test also very small values, and very large values.\n\uf0a7 Test a value of 0.\n\uf0a7 Test \u201cinvalid\u201d input, like negative income.\n\uf0a7 Similarly, there are two possible answers for the marital status:\n\uf0a7 married (\u201cm\u201d)\n\uf0a7 single (\u201cs\u201d)\n\uf0a7 Use each of the values in different test cases.\n\uf0a7 Use also \u2018invalid\u2019 input such as \u201cx\u201d.\nPrepare Test Cases\nHere are some possible test cases for the tax program:\nTest Case Expected Output Comment\n\uf0a7 32,000 s 3,200 10% bracket\n\uf0a7 32,001 s 3,200.25 3,200 + 25% of 1\n\uf0a7 64,000 m 6,400 10% bracket\n\uf0a7 64,100 m 6,425 6,400 + 25% of 100\n\uf0a7 100,000 m 15,400 6,400 + 25% of 36000\n\uf0a7 0 m 0 boundary case\n\uf0a7 10000 x ? invalid input\n\uf0a7 \u2026.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nPrepare Test Cases\nIt is always a good idea to design test\ncases before starting to code.\nWorking through the test cases gives you a\nbetter understanding of the algorithm that\nyou are about to implement.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nPrepare Test Cases\nUSS Yorktown\n\uf0a7 Testbed for the US Navy's Smart Ship program\n\uf0a7 In 1997 a crew member entered accidentally zero into a\ndatabase field\n\uf0a7 Result 1: division by zero\n\uf0a7 Result 2: network failure\n\uf0a7 Result 3: propulsion system failure\n\uf0a7 Result 4: ship \u201cdead in the water\u201d\nfor about 3hrs.\nLesson: Test for 0s\n",
  "context": "use 6400 + 25% marginal tax\nDisplay tax\nNested Branches \u2013 Taxes",
  "source_file": "resources\\Year 1\\CS111 Lectures\\CS111 Lecture 4.2.pdf",
  "line_numbers": [
    166,
    820
  ]
}