{
  "title": "CS111 Lecture 2.1",
  "language": "cpp",
  "topics": [
    "database",
    "algorithms",
    "fundamentals"
  ],
  "purpose": "Introduction to Computing Science Hello World \u2022 We saw a very simple program in C++:",
  "code": "#include <iostream>\nusing namespace std;\nint main(){\ncout << \"Hello, World!\" << endl;\nreturn 0;\n}\n\u2022 In this lesson we\u2019ll try to modify the same program so that it\ndoes something more interesting.\nHello World\nWe also learnt how any C++ program is structured.\n\u2022 Begins with a #include statement which specifies the\nlibrary from which you would like to use some functions.\n\u2022 Then comes the void main() and within curly {} braces,\nyou write your program statements\nHello World\nNote:\n\u2022 The opening and closing curly brace is mandatory.\n\u2022 Also each line of your program statement should terminate\nwith a semi-colon ;\nBut when we run our nice little program, it prints to console and\nthen closes.\nToday: A program with input and output.\nInput/Output\nC++ Input and Output (I/O)\nUsually I/O is the most important part of any program.\no\nInput: Data provided by the user.\no\nOutput: Data computed by the program.\nTo do anything useful your program needs to be\nable to accept input data and report back your results.\nIn C++, the standard library (iostream) provides routines for input and output.\nInput/Output\nIn our course all the input functions described read from\nstandard input and all the output functions described write\nto standard output.\n\u2022 Standard input usually means input using the keyboard.\n\u2022 Standard output usually means output onto the monitor.\nInput/Output\nExample:\ncout << \"Hello World\";\nWhen this statement is executed, it sends the stream of\ncharacters Hello World to the standard output.\nStandard output is usually the monitor.\nIn other words, anything after the << is written to the screen.\nInput/Output\nSuppose we want to write more than Hello World\n#include <iostream>\nusing namespace std;\nint main()\n{\ncout << \"Hello World. This is the second program!\";\nreturn 0;\n}\nThe output of the program is:\nHello World. This is the second program!\nInput/Output\nSuppose we want to write\nHello World.\nThis is the second program!\nInput/Output\nWe might try\n#include <iostream>\nusing namespace std;\nint main()\n{\ncout << \"Hello World.\";\ncout << \"This is the second program!\";\nreturn 0;\n}\nThe output of the program is again:\nHello World.This is the second program!\nInput/Output\nThere are two ways to print\nHello World.\nThis is the second program!\nWe saw one solution last week. Use endl\n#include <iostream>\nusing namespace std;\nint main()\n{\ncout << \"Hello World.\" << endl;\ncout << \"This is the second program!\";\nreturn 0;\n}\nInput/Output\nThere are two ways to print\nHello World.\nThis is the second program!\nThe other is to use escape sequences.\nEscape sequences are used for special characters in strings.\nInput/Output\nCommon escape sequences\nInput/Output\nHow do you print the following:\nTo print quotes use \\\".\nWhat are the 'correct' escape sequences?\nOK?\nInput/Output\nHow do you print the following:\nTo print quotes use \\\".\nWhat are the 'correct' escape sequences?\nOK?\nUse\ncout <<\"To print quotes use \\\\\\\".\\n\";\ncout <<\"What are the \\'correct\\' escape sequences\\?\\n\";\ncout <<\"\\tOK\\?\";\nInput/Output\nSuppose you want to ask someone to enter their age.\nPlease enter your age?\nYou can print the question to screen.\ncout << \"Please enter your age\\?\";\nHowever, how do you read the answer?\nInput/Output\nTo read input use cin.\n\u2022 However, input needs to be stored. It needs to be written to a variable.\n\u2022 First a variable needs to be declared:\nint age;\n\u2022 This means that age is a variable, and its value is an integer (a whole\nnumber).\n\u2022 Then read the input and write it to age as follows.\ncin >> age;\nInput/Output\nThis gives\n#include <iostream>\nusing namespace std;\nint main()\n{\nint age;\ncout << \"Please enter your age\\?\";\ncin >> age;\ncout << \"Hello.\\nYou are \" << age << \" years\nold\";\nreturn 0;\n}\nThis program asks for the age and prints a welcome message.\nInput/Output\nSecond look at\ncin >> age;\n\u2022 The input cin comes from the keyboard. Use #include <iostream>\n\u2022 The operator >> reads input from cin.\n\u2022 The input is then written to variable age.\nInput/Output\n\u2022 Another type for input are strings.\n\u2022 Suppose we want to read a name.\n\u2022 Strings are a string of characters. A variable for a string is\ndefined as follows:\nstring name;\n\u2022 This tells the compiler:\nname is a variable for a string\nInput/Output\n\u2022 We use this as follows:\n#include <iostream>\nusing namespace std;\nint main()\n{\nstring name;\ncout << \"Please enter your name\\? \";\ncin >> name;\ncout << \"Hello \" << name << \".\\n\";\nreturn 0;\n}\nThe First programs\nLessons learned (beyond standard input and output)\n\u2022 Programming is an iterative process of trial and error.\n\u2022 Many mistakes are made. Often inadvertently.\n\u2022 Debugging is part of the process.\n\u2022 An IDE and compiler help, but you have to do the work.\nThe First programs\nProgramming is a process\n\u2022 Editing\n\u2022 Compiling\n\u2022 Debugging\n\u2022 Testing\n\u2022 Analysing\nBut this is only part of the bigger picture.\nNext: Thinking about Algorithms\nErrors and Warnings\nA compiler can give you Errors and Warnings.\n\u2022 Error means that the compiler could not finish its job.\n\u2022 Error means that there is no executable code.\n\u2022 Error means that you have to find and fix the problem.\n\u2022 This is an error at compile time.\n\u2022 Warning means that the compiler could finish its job.\n\u2022 Warning mean there is an executable, but it may hang or worse.\n\u2022 Warning means that you should look again, see if it is what you want.\n\u2022 This could be an error at runtime.\nErrors and Warnings\nA compiler can give you Errors and Warnings.\nA compiler will only find some errors.\nThere is a difference between syntax and semantics.\nCompilers are good at finding syntax errors.\nCompilers are bad at finding semantic errors.\nSyntax and Semantics\n\u2022 Syntax : is the structure of the language\n: the form or structure of the expressions, statements, and\nprogram units\nEg. Using: cout <<\u201c Hello World\u201d;\nSyntax and Semantics\n\u2022 Semantics : the meaning of the expressions, statements, and program\nunits\nEg. When Using: cout <<\u201c Hello World\u201d;\nSemantics is: what does \u201chello world\u201d mean?\nSyntax and Semantic\nHow do we prevent errors and mistakes that the compiler does\nnot find?\nBy\n\u2022 Analysing the problem.\n\u2022 Analysing the solution.\n\u2022 Testing.\n\u2022 Thinking.\n\u2022 Planning.\n",
  "context": "Introduction to Computing Science\nHello World\n\u2022 We saw a very simple program in C++:",
  "source_file": "resources\\Year 1\\CS111 Lectures\\CS111 Lecture 2.1.pdf",
  "line_numbers": [
    5,
    217
  ]
}