{
  "title": "CS111 Lecture 5.1",
  "language": "cpp",
  "topics": [
    "database",
    "networking",
    "data_structures",
    "fundamentals"
  ],
  "purpose": "Copyright \u00a9 2012 by John Wiley & Sons.",
  "code": "bool isLegalAge = false;\n\uf0a7 A Boolean variable named isLegalAge, initialized to false.\n\uf0a7 It can be set by an intervening statement\n\uf0a7 It can be used later to make a decision\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nBoolean Variables\nExample of using a Boolean variable:\nThe right\nconst int LEGAL_AGE = 21;\nhand side is\nint student_age; a condition.\nbool isLegalAge;\nIt evaluates\nto \u201ctrue\u201d or\ncout << \u201cWhat\u2019s your age? \u201c;\n\u201cfalse\u201d.\ncin >> student_age;\nThe result is\nisLegalAge = (student_age >= LEGAL_AGE); then assigned\nto variable\n\u2026\n\u201cisLegalAge\u201d\nif (isLegalAge)\ncout << \u201cOk, you can drink\u201d;\nCan be used\nelse as condition\ncout << \u201cNo drinks for you\u201d; later on.\nBoolean Variables\nSometimes bool variables are called \u201cflag\u201d variables.\nThe flag is either up or down.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nBoolean Operators\n\uf0a7 Suppose you need to write a program that decides if a\nyear is a leap year.\n\uf0a7 This not a simple test condition.\n\uf0a7 A year is a leap year if it is divisible by 400, or\n\uf0a7 Years that are divisible by 4,\n\uf0a7 But not by 100.\nBoolean Operators\nComplex Decisions\n\uf0a7 When you make complex decisions, you often need to combine\nBoolean values.\n\uf0a7 An operator that combines Boolean conditions is called a\nBoolean operator.\n\uf0a7 Boolean operators take one or two Boolean values or\nexpressions and combine them into a resultant Boolean value.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nBoolean Operators\nComplex Decisions\n\uf0a7 Boolean Algebra allows you to compute with Boolean variables\nlike Algebra with \u201cnormal variables\u201d\n\uf0a7 You have Boolean operations similar to addition and\nmultiplication in \u201cnormal Algebra\u201d.\n\uf0a7 Some common Boolean operators are \u201cAND\u201d, \u201cOR\u201d, and \u201cNOT\u201d.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Boolean Operator && (and)\nBoolean \u201cAND\u201d\n\uf0a7 The Boolean expression\na AND b\nevaluates to true, only if a is true and b is true.\n\uf0a7 Both have to be true.\n\uf0a7 In C++ we use the && operator for \u201cAND\u201d.\nThe Boolean Operator && (and)\nExample\nif (shark_free && sunny)\n{\ncout << \u201cGo swimming!\";\n}\nYou can also combine conditions\nif ((temperature >=0) && (temperature <=100))\n{\ncout << \u201cLiquid Water\";\n}\nThe Boolean Operator || (or)\nBoolean \u201cor\u201d\n\uf0a7 The Boolean expression\na or b\nevaluates to true, if a is true or b is true.\n\uf0a7 At least one is true.\n\u201cEither Or\u201d\nmeans exactly\n\uf0a7 Both could be true.\none is true.\n\uf0a7 In C++ we use the || operator for \u201cOR\u201d.\nDo not confuse \u201cOR\u201d with \u201cEITHER OR\u201d!\nThe Boolean Operator || (or)\nExample\nDon\u2019t swim if\nthere are sharks\nif (sharks || rainy) or if it is\nrainy. Or both.\n{\ncout << \u201cDon\u2019t swim!\";\n}\nYou can also combine conditions\nif ((temperature <0) || (temperature > 100))\n{\ncout << \u201cNo Liquid Water\";\n}\nThe Boolean Operator || (or)\nDo you want Yes!\ncoffee or tea?\nLogic\nrules!\nNerd!\nYou can have too much logic with your coffee (or tea)\nThe Boolean Operatorion\nBoolean \u201cNOT\u201d\n\uf0a7 The Boolean expression\nNOT a\nevaluates to true, only if a is false.\n\uf0a7 In C++ we use the ! operator for \u201cNOT\u201d.\nif it is not\nshark free don\u2019t\nswim.\nThe Boolean Operatorion\nExample\nif it is not\nshark free don\u2019t\nswim.\nif (!shark_free)\n{\ncout << \u201cDon\u2019t swim!\";\n}\nThis is the same\nas temperature<0\nif (!(temperature >=0))\n{\ncout << \u201cFreezing.\";\n}\nThe Boolean Operators\nCombining operators\n\uf0a7 You can combine different operators.\n\uf0a7 Use parentheses to define the order of evaluation.\nif ( !sharks && (warm || sunny))\n{\ncout << \u201cGo swimming!\";\n}\nBoolean Operators\nThis information is traditionally collected into a table called\na truth table:\nwhere A and B denote bool variables or Boolean\nexpressions.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nBoolean Operators \u2013 Some Examples\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nBoolean Operators \u2013 Some Examples\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013 Combining Multiple Operators\nConsider the expression\nif (0 <= temp <= 100)\u2026\nThis looks just like the mathematical test:\n0 \u2264 temp \u2264 100\nIt might compile,\nbut it is (almost)\nUnfortunately, it is not.\ncertainly wrong\nUse: if (0 <= temp && temp <= 100)\u2026\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013 Combining Multiple Operators\nAnother common error, along the same lines, is to write\nif (x && y > 0) ... // Error\ninstead of\nif (x > 0 && y > 0) ...\n(x and y are ints)\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013 Combining Multiple Operators\nNaturally, that computation makes no sense.\n(But it was a good attempt at translating:\n\u201cboth x and y must be greater than 0\u201d into\na C++ expression!).\nAgain, the compiler would not issue an error message.\nIt would do something you probably do not expect.\nCommon Error \u2013 Confusing && and ||\nIt is quite common that the individual conditions are\nnicely set apart in a bulleted list, but with little indication\nof how they should be combined.\nExample Is this\nConcession fees apply if an && or\nan || ?\n\u2022 You are a student\n\u2022 Younger than 12 years old Student\nand\n\u2022 A pensioner\npensioner?\n\u2022 A staff member\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013 Confusing && and ||\nIt is quite common that the individual conditions are\nnicely set apart in a bulleted list, but with little indication\nof how they should be combined.\nExample Is this\nYou can apply for the grant if you an && or\nan || ?\n\u2022 are a staff member\n\u2022 are at least 3 years employed Staff or 3\nyear\n\u2022 have at least 3 recommendations\nemployed?\n\u2022 have not been awarded before.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nDeMorgan\u2019s Law\nSuppose we want to charge a higher shipping rate\nif we don\u2019t ship within the main islands of Fiji.\nshipping_charge = 10.00;\nif (!(country == \"FIJI\"\n&& division != \"Eastern\" && division != \"Rotuma\"))\nshipping_charge = 20.00;\nThis test is a little bit complicated.\nDeMorgan\u2019s Law to the rescue!\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nDeMorgan\u2019s Law\nDeMorgan\u2019s Law:\n!(A && B) is the same as !A || !B\n(change the && to || and negate all the terms)\n!(A || B) is the same as !A && !B\n(change the || to && and negate all the terms)\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nDeMorgan\u2019s Law\nDeMorgan\u2019s Law allows us to rewrite complicated\nnot/and/or messes so that they are more clearly read.\nshipping_charge = 10.00;\nif (country != \"FIJI\"\n|| division == \"Eastern\" || division == \"Rotuma\"))\nshipping_charge = 20.00;\nAh, much nicer.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nYou, the C++ programmer, doing Quality Assurance\n(by hand!)\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nInput validation is an important part of\nworking with live human beings.\nIt has been found to be true that, unfortunately,\nall human beings can mistke makez.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nLet\u2019s return to the elevator\nprogram and consider input\nvalidation.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\n\uf0a7 Assume that the elevator panel has buttons labeled 1\nthrough 20 (but not 13!).\n\uf0a7 The following are illegal inputs:\n\uf0a7 The number 13\n\uf0a7 Zero or a negative number\n\uf0a7 A number larger than 20\n\uf0a7 A value that is not a sequence of digits, such as five\n\uf0a7 In each of these cases, we will want to give an error\nmessage and exit the program.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nIt is simple to guard against an input of 13:\nif (floor == 13)\n{\ncout << \"Error: \"\n<< \" There is no thirteenth floor.\"\n<< endl;\nreturn 1;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nThe statement:\nreturn 1;\nimmediately exits the main function and therefore\nterminates the program.\nIt is a convention to return with the value 0 if the program\ncompletes normally, and with a non-zero value when an\nerror is encountered.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nTo ensure that the user doesn\u2019t enter a number outside the\nvalid range:\nif (floor <= 0 || floor > 20)\n{\ncout << \"Error: \"\n<< \" The floor must be between 1 and 20.\"\n<< endl;\nreturn 1;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nDealing with input that is not a valid integer is a more\ndifficult problem.\nWhat if the user does not type a number in response to\nthe prompt?\n\u2018F\u2019 \u2018o\u2019 \u2018u\u2019 \u2018r\u2019 is not an integer response.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nWhen\ncin >> floor;\nis executed, and the user types in a bad input, the\ninteger variable floor is not set.\nInstead, the input stream cin is set to a failed state.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nYou can call the cin.fail function to test for that failed\nstate.\nSo you can test for bad user input this way:\nif (cin.fail())\n{\ncout << \"Error: Not an integer.\" << endl;\nreturn 1;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nLater you will learn more robust ways to deal with bad\ninput, but for now just exiting main with an error report is\nenough.\nHere\u2019s the whole program with validity testing:\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\nint main()\n{\nint floor;\ncout << \"Floor: \";\ncin >> floor;\n// The following statements check various input errors\nif (cin.fail())\n{\ncout << \"Error: Not an integer.\" << endl;\nreturn 1;\n}\nif (floor == 13)\n{\ncout << \"Error: There is no thirteenth floor.\" << endl;\nreturn 1;\n}\nif (floor <= 0 || floor > 20)\n{\ncout << \"Error: The floor must be between 1 and 20.\" << endl;\nreturn 1;\n}\n\u2026 C++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nInput Validation with if Statements\n// Now we know that the input is valid\nint actual_floor;\nif (floor > 13)\n{\nactual_floor = floor - 1;\n}\nelse\n{\nactual_floor = floor;\n}\ncout << \"The elevator will travel to the actual floor \"\n<< actual_floor << endl;\nreturn 0;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nExercise: Leap Year\nWrite a program to check is a year is a leap year:\nLeap years according to the Gregorian calendar (since 1582) are years\nthat are exactly divisible by 400 or years that are exactly divisible by 4,\nexcept that years that are divisible by 100 are not leap years. Exactly\ndivisible means that the remainder of the integer division is zero.\nWhat is the pseudo code?\nExercise: Leap Year\nThe pseudo code is\nIf ((year divisible by 400) OR\n(year divisible by 4 AND\nyear not divisible by 100))\nleap_year = true\nElse\nleap_year = false\nExercise: Leap Year\nWhat type do you take for year and leap_year?\nExercise: Leap Year\nHow do you express\n((year divisible by 400)\nOR\n(year divisible by 4 AND year not divisible by 4))\nExercise: Leap Year\nFinally add it to the if-condition with the assignments.\nSummary\nUse the if statement to implement a decision.\n\uf0a7 The if statement allows a program to carry out different actions\ndepending on the nature of the data to be processed.\nImplement comparisons of numbers and objects.\n\uf0a7 Relational operators (< <= > >= == !=) are used to compare\nnumbers and strings.\n\uf0a7 Lexicographic order is used to compare strings\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nSummary\nImplement complex decisions that require multiple if\nstatements.\n\uf0a7 Multiple alternatives are required for decisions that have more\nthan two cases.\n\uf0a7 When using multiple if statements, pay attention to the order of\nthe conditions.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nSummary\nImplement decisions whose branches require further\ndecisions.\n\uf0a7 When a decision statement is contained inside the branch of\nanother decision statement, the statements are nested.\n\uf0a7 Nested decisions are required for problems that have two levels\nof decision making.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nChapter Summary\nDesign test cases for your programs.\n\uf0a7 Each branch of your program should be tested.\n\uf0a7 It is a good idea to design test cases before implementing a\nprogram.\nUse the bool data type to store and combine conditions\n\uf0a7 The bool type bool has two values, false and true.\n\uf0a7 C++ has two Boolean operators that combine conditions:\n&& (and) and || (or).\n\uf0a7 To invert a condition, use the ! (not) operator.\n\uf0a7 De Morgan\u2019s law tells you how to negate && and || conditions.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nChapter Summary\nApply if statements to detect whether user input is valid.\n\uf0a7 When reading a value, check that it is within the required range.\n\uf0a7 Use the fail function to test whether the input stream has failed.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\n",
  "context": "Copyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nBoolean Variables\nExample of defining a Boolean variable",
  "source_file": "resources\\Year 1\\CS111 Lectures\\CS111 Lecture 5.1.pdf",
  "line_numbers": [
    41,
    491
  ]
}