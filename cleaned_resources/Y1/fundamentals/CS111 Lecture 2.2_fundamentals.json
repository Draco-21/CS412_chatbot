{
  "title": "CS111 Lecture 2.2",
  "language": "cpp",
  "topics": [
    "database",
    "networking",
    "web_dev",
    "fundamentals"
  ],
  "purpose": "Common basic types \uf0a7 int Integers \u2026.,-1,0,1,2, \u2026.",
  "code": "\uf0a7 char characters a,b,c,\u2026, A,B,C,\u2026,!,@,#,$,...\nMore about data types later.\nC++ Variables\nVariables are containers for storing data values.\nIn C++, there are different types of variables (defined with different keywords),\nfor example:\n\u2022 int - stores integers (whole numbers), without decimals, such as 123 or -123\nEg:\nint myNum = -10; // Integer (whole number without decimals)\n------------------------------------------------------------------------------------------\n\u2022 double - stores floating point numbers, with decimals, such as 19.99 or -\n19.99\nEg:\ndouble myFloatNum = 25.99; // Floating point number (with decimals)\n\u2022 char - stores single characters, such as 'a' or 'B'. Char values are surrounded\nby single quotes\nEg:\nchar myLetter = 'D'; // Character\n----------------------------------------------------------------------------------------\n\u2022 string - stores text, such as \"Hello World\". String values are surrounded by\ndouble quotes\nstring myText = \"Hello\"; // String (text)\n------------------------------------------------------------\n\u2022 bool - stores values with two states: true or false\nbool myBoolean = true; // Boolean (true or false)\nVariable Names\n\uf0a7 When you define a variable, you should pick a\nname that explains its purpose.\n\uf0a7 For example, it is better to use a descriptive\nname, such as can_volume, than a terse name,\nsuch as cv.\n\uf0a7 You do this for yourself, and your colleagues.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nVariable Names\n\uf0a7 In C++, there are a few strict rules for variable names.\n\uf0a7 The compiler will enforce these rules.\n\uf0a7 This means, if you do not follow them, your program will\nnot compile.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nVariable Names\n1. Variable names must start with a letter or the underscore (_)\ncharacter, and the remaining characters must be letters numbers, or\nunderscores.\n2. You cannot use special symbols. Spaces are not\npermitted inside names; you can use an underscore instead, as in\ncan_volume\n.\ncan_volume\n3. Variable names are case-sensitive, that is, and\ncan_Volume\nare different names.\nFor that reason, it is a good idea to use only lowercase letters in\nvariable names.\ndouble return\n4. You cannot use reserved words such as or as\nnames; these words are reserved exclusively for their special C++\nmeanings.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nVariable Names\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNumberTypes\nA number written by a programmer is called a\nnumber literal.\nThere are rules for writing literal values:\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNumberTypes\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nLessons so far\nA variable declaration (aka variable definition)\n\uf0a7 Starts with the type (int, double, char,\u2026)\n\uf0a7 Then come the variable name. Choose a good name.\n\uf0a7 Then you can set an initial value. This is optional.\nLessons so far\nLiterals used in C++ have a type, too. There is for\nexample a difference between\n\uf0a7 the integer 2\n\uf0a7 the floating point number 2.0\n\uf0a7 the character \u20182\u2019.\nThe Assignment Statement\n\uf0a7 The contents in variables can \u201cvary\u201d over time\n(hence the name!).\n\uf0a7 Variables can be changed by\n\uf0a7 assigning to them\n\uf0a7 The assignment statement\n\uf0a7 using the increment or decrement operator\n\uf0a7 inputting into them\n\uf0a7 The input statement\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\n\uf0a7 An assignment statement\nstores a new value in a variable,\nreplacing the previously stored value.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\ncans_per_pack = 8;\nThis assignment statement changes the value stored in\ncans_per_pack to be 8.\nThe previous value is replaced.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\n\uf0a7 There is an important difference between a variable\ndefinition and an assignment statement:\nint cans_per_pack = 6; // Variable definition\n...\ncans_per_pack = 8; // Assignment statement\n\uf0a7 The first statement is a declaration of cans_per_pack.\n\uf0a7 The second statement is an assignment statement.\nAn existing variable\u2019s contents are replaced.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\n\uf0a7 The = in an assignment does not mean the left hand\nside is equal to the right hand side as it does in math.\n\uf0a7 = is an instruction to do something:\ncopy the value of the expression on the right\ninto the variable on the left.\n\uf0a7 Consider what it would mean, mathematically, to state:\ncounter = counter + 2;\n?\ncounter EQUALS counter + 1\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\ncounter = 11; // set counter to 11\ncounter = counter + 2; // increment\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\ncounter = 11; // set counter to 11\ncounter = counter + 2; // increment\n1. Look up what is currently in counter (11)\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\ncounter = 11; // set counter to 11\ncounter = counter + 2; // increment\n1. Look up what is currently in counter (11)\n2. Add 2 to that value (13)\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\nccoouunntteerr == 1111;; //// sseett ccoouunntteerr ttoo 1111\nccoouunntteerr == ccoouunntteerr ++ 22;; //// iinnccrreemmeenntt\n11.. LLooookk uupp wwhhaatt iiss ccuurrrreennttllyy iinn ccoouunntteerr ((1111))\n22.. AAdddd 22 ttoo tthhaatt vvaalluuee ((1133))\n3. copy the result of the addition expression\ninto the variable on the left, changing counter\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Assignment Statement\nccoouunntteerr == 1111;; //// sseett ccoouunntteerr ttoo 1111\nccoouunntteerr == ccoouunntteerr ++ 22;; //// iinnccrreemmeenntt\n11.. LLooookk uupp wwhhaatt iiss ccuurrrreennttllyy iinn ccoouunntteerr ((1111))\n22.. AAdddd 22 ttoo tthhaatt vvaalluuee ((1133))\n3. copy the result of the addition expression\ninto the variable on the left, changing counter\ncout << counter << endl;\n13 is shown\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nConstants\n\uf0a7 Sometimes the programmer knows certain values just from\nanalyzing the problem, for this kind of information, programmers use\nthe reserved word const.\n\uf0a7 The reserved word const is used to define a constant.\n\uf0a7 A const is a variable whose contents cannot be changed and must\nbe set when created.\n(Most programmers just call them constants, not variables.)\n\uf0a7 Constants are commonly written using capital letters to distinguish\nthem visually from regular variables:\nconst double BOTTLE_VOLUME = 2;\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nConstants\nAnother good reason for using constants:\ndouble volume = bottles * 2;\nWhat does that 2 mean?\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nConstants\nIf we use a constant there is no question:\ndouble volume = bottles * BOTTLE_VOLUME;\nAny questions?\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nConstants\nAnd still another good reason for using constants:\ndouble bottle_volume = bottles * 2;\ndouble can_volume = cans * 2;\nWhat does that 2 mean?\n\u2014 WHICH 2?\nThat 2\nis called a \u201cmagic number\u201d\n(so is that one)\nbecause it would require magic to know what 2 means.\nIt is not good programming practice to use magic numbers.\nUse constants.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nConstants\n\uf0a7 Rules of thumb on Magic Numbers\n\uf0a7 Avoid using literal numbers like 2.0 or 45.\n\uf0a7 Define a constant instead and use that constant.\n\uf0a7 Exceptions are using 0 (zero) or 1.\n\uf0a7 It is usually obvious what these stand for.\n\uf0a7 You can use them on your program.\n\uf0a7 No need to define a constant for 0 or 1.\nConstants\nAnd it can get even worse \u2026\nSuppose that the number 2 appears hundreds of times\nthroughout a five-hundred-line program?\nNow we need to change the BOTTLE_VOLUME to 2.23\n(because we are now using a bottle with a different shape)\nHow to change only some of those magic numbers 2\u2019s?\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nConstants\nConstants to the rescue!\nconst double BOTTLE_VOLUME = 2.23;\nconst double CAN_VOLUME = 2;\n...\ndouble bottle_volume = bottles *\nBOTTLE_VOLUME;\ndouble can_volume = cans * CAN_VOLUME;\n(Look, no magic numbers!)\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nComments\n\uf0a7 Comments\nare explanations for human readers of your code\n(other programmers).\n\uf0a7 The compiler ignores comments completely.\ndouble can_volume = 0.355; // Liters in a 12-ounce can\nComment\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nComments\ndouble can_volume = 0.355; // Liters in a 12-ounce can\nThis just in\u2026\nThe number of liters\nin a twelve ounce can\nis 355 one hundredths\nThis newsbreak brought\nto you by Cay\u2019s Cans Corp.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nComments\nComments can be written in two styles:\n\uf0a7 Single line:\ndouble can_volume = 0.355; // Liters in a 12-ounce\ncan\nThe compiler ignores everything after to the end of line\n//\n\uf0a7 Multiline for longer comments:\n/*\nThis program computes the volume (in liters)\nof a six-pack of soda cans.\n*/\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013Undefined Variables\n\uf0a7 You must define a variable before you use it for the first\ntime.\n\uf0a7 For example, the following sequence of statements\nwould not be legal:\ndouble can_volume = 12 * liter_per_ounce;\ndouble liter_per_ounce = 0.0296;\nWhat is the value of can_volume at the end?\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013Undefined Variables\nWhat is the value of can_volume at the end?\ndouble can_volume = 12 * liter_per_ounce;\ndouble liter_per_ounce = 0.0296;\n? ?\n\uf0a7 Statements are compiled in top to bottom order.\n\uf0a7 When the compiler reaches the first statement, it does\nnot know that liter_per_ounce will be defined in the\nnext line, and it reports an error.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error \u2013Uninitialized Variables\n\uf0a7 Initializing a variable is not required, but there is always\na value in every variable, even uninitialized ones.\n\uf0a7 Some value will be there, the flotsam left over from some\nprevious calculation or simply the random value there\nwhen the transistors in RAM were first turned on.\nint bottles; // Forgot to initialize\nint bottle_volume = bottles * 2;\n// Result is unpredictable\nWhat value would be output from the following\nstatement?\ncout << bottle_volume << endl;\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nNotice All the Issues Covered So Far\n/*\nThis program computes the volume (in liters) of a six-pack of soda\ncans and the total volume of a six-pack and a two-liter bottle.\n*/\nint main()\n{\nint cans_per_pack = 6;\nconst double CAN_VOLUME = 0.355; // Liters in a 12-ounce can\ndouble total_volume = cans_per_pack * CAN_VOLUME;\ncout << \"A six-pack of 12-ounce cans contains \"\n<< total_volume << \" liters.\" << endl;\nconst double BOTTLE_VOLUME = 2; // Two-liter bottle\ntotal_volume = total_volume + BOTTLE_VOLUME;\ncout << \"A six-pack and a two-liter bottle contain \"\n<< total_volume << \" liters.\" << endl;\nreturn 0;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nQuiz\nWhat is standard output?\nWhat is standard input?\nQuiz\nWhat is an escape sequence?\nQuiz\nHow do you print to standard output:\nThe emoticon for `looking around' is \\\\(<.<|>.>)//\nQuiz\n\uf0a7 What is the difference between variables and\nconstants\nQuiz\nWhat would be a good variable name for the\nnumber of students in a tutorial?\nQuiz\nWhat would be a good name for the constant:\nmaximal number of students in a tutorial?\nQuiz\nWhat is a magic number? Should you have them?\nQuiz\nWhat happens if you use a variable that has not\nbeen initialized?\nQuiz\nWhat happens if you use a variable that has not\nbeen declared?\nQuiz\nWhat do you use comments for?\n",
  "context": "Common basic types\n\uf0a7 int Integers \u2026.,-1,0,1,2, \u2026.\n\uf0a7 double Floating point numbers 1.0, 3.14, -2.1",
  "source_file": "resources\\Year 1\\CS111 Lectures\\CS111 Lecture 2.2.pdf",
  "line_numbers": [
    74,
    428
  ]
}