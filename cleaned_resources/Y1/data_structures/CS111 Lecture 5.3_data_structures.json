{
  "title": "CS111 Lecture 5.3",
  "language": "cpp",
  "topics": [
    "database",
    "algorithms",
    "data_structures",
    "fundamentals"
  ],
  "purpose": "if statement) while (condition) The statements are repeatedly executed",
  "code": "{\nwhile the condition\nis true.\nstatements\n}\nThe statements are\nalso called the body\nof the while.\n\uf0a7 It starts with the keyword \u201cwhile\u201d\nThe loop stops when\n\uf0a7 Followed by a condition\nthe condition is\n\uf0a7 Followed by one or more statements. false.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nTo execute statements a\ncertain number of times\n\u201cYou \u201csimply\u201d take 4,522 steps!!!\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\n\uf0a7 Often you will need to execute a sequence of statements\na given number of times.\n\uf0a7 You could use a while loop for this.\ncounter = 1; // Initialize the counter\nwhile (counter <= 10) // Check the counter\n{\ncout << counter << endl;\ncounter++; // Update the counter\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\n\uf0a7 The for loop is better than while for doing certain\nthings\n\uf0a7 Things that matter for the loop are all over the place.\ncounter = 1; // Initialize the counter\nwhile (counter <= 10) // Check the counter\n{\ncout << counter << endl;\ncounter++; // Update the counter\n}\ninitialization condition statements update\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nfor\n\uf0a7 C++ has a statement custom made this sort of\nprocessing: for loop\n\uf0a7 The same now as a for loop.\nfor (counter = 1; counter <= 10; counter++)\n{\ncout << counter << endl;\n}\ninitialization condition statements update\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nThe initialization is code that happens once, before the\ncheck is made, in order to set up for counting how many\ntimes the statements will happen.\nfor (counter = 1; counter <= 10; counter++)\n{\ncout << counter << endl;\n}\n\uf0a7 The assignment counter = 1; is performed only once at the\nbeginning.\n\uf0a7 You can also declare and initialize the loop variable here.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nThe condition is code that tests to see if the loop is done.\nWhen this test is false, the for statement is over. We go\non to the next statement after the closing bracket.\nfor (counter = 1; counter <= 10; counter++)\n{\ncout << counter << endl;\n}\n\uf0a7 The condition counter <= 10 is checked before every loop.\n\uf0a7 If the condition if false at the beginning, no loop will be taken.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nThe statements are repeatedly executed - until the\ncondition is false. Thewse statements are also called the\nbody of a for loop.\nfor (counter = 1; counter <= 10; counter++)\n{\ncout << counter << endl;\n}\n\uf0a7 If the condition is true this loop will print the value of counter to\nstandard output.\n\uf0a7 In this example it will print the numbers 1 to 10.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nThe update is code that is executed at the end of each\nloop, before the condition is checked. It causes the\ncondition to eventually become false.\nfor (counter = 1; counter <= 10; counter++)\n{\ncout << counter << endl;\n}\n\uf0a7 The update counter++ will increase the value of counter by 1\nat the end of each loop.\n\uf0a7 If this value exceeds 10 (counter>10), the for loop stops.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nSome people call the for loop count-controlled.\n\uf0a7 You initialize a counter.\n\uf0a7 You check a counter.\n\uf0a7 You update a counter.\nIn contrast, the while can be called an event-controlled.\n\uf0a7 It executes until an event occurs, for example when the balance\nexceeds the target.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nAnother commonly-used term for a count-controlled\nloop is definite.\nYou know from the outset that the loop body will be\nexecuted a definite number of times\u2013\u2013ten times in\nour example.\nIn contrast, event-controlled loops are called indefinite.\nYou do not know how many iterations it will take until the condition\nis false.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Statement\nYou can define\nthe variables\nhere as well.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nScope of the Loop Variable\nYou can define (declare) the loop variable as part of the\ninitialization\nfor(int counter = 5;\u2026)\n\uf0a7 When defined as part of the for statement cannot be used\nbefore or after the for statement .\n\uf0a7 A for statement can use variables that were defined before the\nloop.\n\uf0a7 In an earlier example, counter was defined before the loop \u2013\nthis works as well.\n\uf0a7 However, many prefer to define loop variables in the\ninitialization.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Can Count Up or Down\nA for loop can count down instead of up:\nfor (int counter = 10; counter >= 0; counter--)\u2026\nThe increment or decrement need not be in steps of 1\nfor (int counter = 0; counter <= 10; counter++)\u2026\nNotice that in these examples, the loop variable is defined\nin the initialization (where it really should be!).\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nSolving a Problem with a for Statement\n\uf0a7 Earlier we determined the number of years it would take\nto (at least) double our balance.\n\uf0a7 Now let\u2019s see the interest in action:\n\uf0a7 We want to print the balance of our savings account over a five-\nyear period.\n\uf0a7 The \u201c\u2026over a five-year period\u201d indicates that a for loop should\nbe used.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nSolving a Problem with a for Statement\nThe output should look something like this:\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nSolving a Problem with a for Statement\nThe pseudo-code\nfor year one to year five\nUpdate balance.\nPrint year and balance.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe for Loop\nFlowchart of\nthe investment\ncalculation\nusing\na for loop\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nSolving a Problem with a for Statement\nTwo statements should happen five times.\nThey are:\nupdate balance\nprint year and balance\nfor (int year = 1; year <= nyears; year++)\n{\n// update balance\n// print year and balance\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nSolving a Problem with a for Statement\nint main()\n{\nconst double RATE = 5;\nconst double INITIAL_BALANCE = 10000;\ndouble balance = INITIAL_BALANCE;\nint nyears;\ncout << \"Enter number of years: \";\ncin >> nyears;\nfor (int year = 1; year <= nyears; year++)\n{\nbalance = balance * (1 + RATE / 100);\ncout << year << \":\\t\" << balance << endl;\n}\nreturn 0;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nSolving a Problem with a for Statement\nA run of the program:\nEnter number of years: 10\n1: 10500\n2: 11025\n3: 11576.3\n4: 12155.1\n5: 12762.8\n6: 13401\n7: 14071\n8: 14774.6\n9: 15513.3\n10: 16288.9\nPress any key to continue . . .\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHand Tracing\nint main()\n{\nconst double RATE = 5;\nconst double INITIAL_BALANCE = 10000;\ndouble balance = INITIAL_BALANCE;\n1\nint nyears;\n2\ncout << \"Enter number of years: \";\n3\ncin >> nyears;\n4\nEvery part\nof the if\nfor (int year = 1;\n5\ngets their\nyear <= nyears;\n6\nown line\nyear++)\n7\n{\nbalance = balance * (1 + RATE / 100);\n8\ncout << year << \":\\t\" << balance << endl;\n9\n}\nreturn 0;\n10\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHand Tracing\nint main()\n{\nline\nconst double RATE = 5;\nconst double INITIAL_BALANCE = 10000;\ndouble balance = INITIAL_BALANCE;\n1\nint nyears;\n2\ncout << \"Enter number of years: \";\n3\ncin >> nyears;\n4\nfor (int year = 1;\n5\nyear <= nyears;\n6\nyear++)\n7\n{\nbalance = balance * (1 + RATE / 100);\n8\ncout << year << \":\\t\" << balance << endl;\n9\n}\nreturn 0;\n10\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHand Tracing\nint main()\n{\nline balance\nconst double RATE = 5;\n1 10000\nconst double INITIAL_BALANCE = 10000;\ndouble balance = INITIAL_BALANCE;\n1\nint nyears;\n2\ncout << \"Enter number of years: \";\n3\ncin >> nyears;\n4\nfor (int year = 1;\n5\nyear <= nyears;\n6\nyear++)\n7\n{\nbalance = balance * (1 + RATE / 100);\n8\ncout << year << \":\\t\" << balance << endl;\n9\n}\nreturn 0;\n10\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHand Tracing\nint main()\n{\nline balance nyears\nconst double RATE = 5;\n1 10000\nconst double INITIAL_BALANCE = 10000;\n2 \u201c\ndouble balance = INITIAL_BALANCE;\n1 3 \u201c\n2 int nyears; 4 \u201c 2\ncout << \"Enter number of years: \";\n3\ncin >> nyears;\n4\ninput is 2\nfor (int year = 1;\n5\nyear <= nyears;\n6\nyear++)\n7\n{\nbalance = balance * (1 + RATE / 100);\n8\ncout << year << \":\\t\" << balance << endl;\n9\n}\nreturn 0;\n10\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHand Tracing\nint main()\n{\nline balance nyears year\nconst double RATE = 5;\n1 10000\nconst double INITIAL_BALANCE = 10000;\n2 \u201c\ndouble balance = INITIAL_BALANCE;\n1 3 \u201c\n2 int nyears; 4 \u201c 2\ncout << \"Enter number of years: \"; 5 \u201c \u201c 1\n3\n6 \u201c \u201c \u201c\ncin >> nyears;\n4\nfor (int year = 1;\n5\nyear <= nyears;\n6 condition is true\nyear++)\n7\ncontinue here\n{\nbalance = balance * (1 + RATE / 100);\n8\ncout << year << \":\\t\" << balance << endl;\n9\n}\nreturn 0;\n10\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHand Tracing\nint main()\n{\nline balance nyears year\nconst double RATE = 5;\n1 10000\nconst double INITIAL_BALANCE = 10000;\n2 \u201c\ndouble balance = INITIAL_BALANCE;\n1 3 \u201c\n2 int nyears; 4 \u201c 2\ncout << \"Enter number of years: \"; 5 \u201c \u201c 1\n3\n6 \u201c \u201c \u201c\ncin >> nyears;\n4\n8 10500 \u201c \u201c\n9 \u201c \u201c \u201c\nfor (int year = 1;\n5\n7 \u201c \u201c 2\nyear <= nyears;\n6 condition is true 6 \u201c \u201c \u201c\n7\nyear++)\n{\nbalance = balance * (1 + RATE / 100);\n8\ncout << year << \":\\t\" << balance << endl;\n9\n}\nreturn 0;\n10\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHand Tracing\nint main()\n{\nline balance nyears year\nconst double RATE = 5;\n1 10000\nconst double INITIAL_BALANCE = 10000;\n2 \u201c\ndouble balance = INITIAL_BALANCE;\n1 3 \u201c\n2 int nyears; 4 \u201c 2\ncout << \"Enter number of years: \"; 5 \u201c \u201c 1\n3\n6 \u201c \u201c \u201c\ncin >> nyears;\n4\n8 10500 \u201c \u201c\n9 \u201c \u201c \u201c\nfor (int year = 1;\n5\n7 \u201c \u201c 2\nyear <= nyears;\n6 condition is false 6 \u201c \u201c \u201c\n7 year++) 8 11025 \u201c \u201c\n{ 9 \u201c \u201c \u201c\n7 \u201c \u201c 3\nbalance = balance * (1 + RATE / 100);\n8\n6 \u201c \u201c \u201c\ncout << year << \":\\t\" << balance << endl;\n9\n10 \u201c \u201c \u201c\n}\nreturn 0;\n10\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error- Confusing Yourself\nA for loop is an idiom for a loop of a particular form. A value\nruns from the start to the end, with a constant increment or\ndecrement.\n\uf0a7 As long as all the expressions in a for loop are valid, the\ncompiler will not complain.\n\uf0a7 You can write this:\nfor (cout << \"Inputs: \"; cin >> x; sum += x)\n{\ncount++;\n}\n\uf0a7 It compiles, and it works, but will confuse everyone, including\nyourself.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nCommon Error- Confusing Yourself\nA for loop should only be used to cause a loop variable to\nrun, with a consistent increment, from the start to the end of\na sequence of values.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nKnow Your Bounds \u2013 Symmetric vs. Asymmetric\n\uf0a7 The start and end values should match the task the for\nloop is solving.\n\uf0a7 The range 3 \u2264 n \u2264 17 is symmetric, both end points are\nincluded so the for loop is:\nfor (int n = 3; n <= 17; n++)\u2026\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nKnow Your Bounds \u2013 Symmetric vs. Asymmetric\n\uf0a7 When dealing with arrays (in a later chapter), you\u2019ll find\nthat if there are N items in an array, you must deal with\nthem using the range [0..N).\nSo the for loop for arrays is:\nfor( int arrIndVar=0;\narrIndVar<N;\narrIndVar++ )\u2026\n\uf0a7 This still executes the statements N times.\nMany coders use this asymmetric form for every\nproblem involving doing something N times.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nHow Many Times Was That?\nFence arithmetic\nDon\u2019t forget to count the first (or last)\n\u201cpost number\u201d that a loop variable takes on.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nFence Arithmetic \u2013 Counting Iterations\n\uf0a7 Finding the correct lower and upper bounds and the\ncorrect check for an iteration can be confusing.\n\uf0a7 Should you start at 0 or at 1?\n\uf0a7 Should you use <= b or < b as a termination\ncondition?\n\uf0a7 Counting the number of iterations is a very useful device\nfor better understanding a loop.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nFence Arithmetic \u2013 Counting Iterations\nCounting is easier for loops with asymmetric bounds.\nThe loop\nfor (i = a; i < b; i++)\u2026\nexecutes the statements (b \u2013 a) times\nand when a is 0.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nFence Arithmetic \u2013 Counting Iterations\nFor example, the loop traversing the characters in a\nstring,\nfor (i = 0; i < s.length(); i++)\u2026\nruns s.length times.\nThat makes perfect sense, since there are s.length\ncharacters in a string.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nFence Arithmetic Again \u2013 Counting Iterations\nThe loop with symmetric bounds,\nfor (i = a; i <= b; i++)\u2026\nis executed (b \u2013 a) + 1 times.\nThat \"+1\" is the source of many programming errors.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe do Loop\nThe while loop\u2019s condition test is the first thing\nthat occurs in its execution.\nThe do loop (or do-while loop) has its condition tested\nonly after at least one execution of the statements.\ndo\n{\nstatements\n}\nwhile (condition);\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe do Loop\nThis means that the do loop should be used only\nwhen the statements must be executed before\nthere is any knowledge of the condition.\nThis also means that in practice the do loop is the least\nused loop.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe do Loop\n\uf0a7 What problems require\nsomething to have happened\nbefore the testing in a loop?\n\uf0a7 Getting valid user input is often\ncited.\n\uf0a7 Here is the flowchart for the\nproblem in which the user is\nsupposed to enter a value less\nthan 100 and processing must\nnot continue until they do.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe do Loop\n\uf0a7 Here is the code:\nint value;\ndo\n{\ncout << \"Enter a value < 100: \";\ncin >> value;\n}\nwhile (value >= 100);\n\uf0a7 In this form, the user sees the same prompt each time\nuntil the enter valid input.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe do Loop\nIn order to have a different, \u201cerror\u201d prompt that the user\nsees only on invalid input, the initial prompt and input would\nbe before a while loop:\nNotice that nothing\nint value;\nhappens if the user\ncout << \"Enter a value < 100:\"; gives valid input\non the first\nwhile (value >= 100);\nattempt. Good.\n{\ncout << Sorry, that is larger than 100\\n\n\" \"\n<< Try again:\n\" \";\ncin >> value;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nFlowcharts for the while Loop and the do Loop\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nProcessing Input \u2013 When and/or How to Stop?\n\uf0a7 We need to know, when getting input\nfrom a user, when they are done.\n\uf0a7 One method is to hire\na sentinel (as shown)\nor more correctly choose a value whose meaning is\nSTOP!\n\uf0a7 As long as there is a known range of valid data points,\nwe can use a value not in it.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nProcessing Input \u2013 When and/or How to Stop?\nWe will write code to calculate the average of some salary\nvalues input by the user.\nHow many will there be?\n\uf0a7 That is the problem. We can\u2019t know.\n\uf0a7 But we can use a sentinel value, as long as we tell the user to\nuse it, to tell us when they are done.\n\uf0a7 Since salaries are never negative, we can safely choose -1 as\nour sentinel value.\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nProcessing Input \u2013 When and/or How to Stop?\n\uf0a7 In order to have a value to test, we will need to get the first input\nbefore the loop.\n\uf0a7 The loop statements will process each non-sentinel value, and then\nget the next input.\n\uf0a7 For averages we need the total sum, and the total number of inputs.\nPseudo code\n\uf0a7 ask for input\n\uf0a7 while input is not negative\n\uf0a7 update totals\n\uf0a7 ask for input\n\uf0a7 compute average\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nThe Complete Salary Average Program\nint main()\n{\ndouble sum = 0;\nint count = 0;\ndouble salary = 0;\ncout << \"Enter salaries, -1 to finish: \";\ncin >> salary;\nwhile (salary != -1)\n{\nsum = sum + salary;\ncount++;\ncin >> salary;\n}\ncout << \u201cThe average is: \" << sum/count << endl;\nreturn 0;\n}\nC++ for Everyone by Cay Horstmann\nCopyright \u00a9 2012 by John Wiley & Sons. All rights reserved\nQuiz\n\uf0a7 You need add the scores of 10 students. Which type of\nloop do you use?\nQuiz\n\uf0a7 You want to add student scores until the user enters a\nnegative score. Which type of loop do you use?\nQuiz\n\uf0a7 What does the condition is a while loop say? Whether to\nstop the loop. Or whether to continue?\nQuiz\n\uf0a7 How often does initialisation in a for-loop take place, and\nwhen?\nQuiz\n\uf0a7 How often is the condition in a for-loop take checked,\nand when?\nQuiz\n\uf0a7 How often is the update in a for-loop take performed,\nand when?\nQuiz\n\uf0a7 At the end of an iteration in a for loop, do you update first\nand then check the condition, or do you check first and\nthen update?\nQuiz\n\uf0a7 In the first statement after a while-loop, is the condition\ntrue or false.\nwhile (condition){\ndo something\n}\nnext statement;\nQuiz\n\uf0a7 What value will be printed after the while-loop?\nwhile (counter<=10){\ncounter++;\n}\ncout << counter << endl;\nQuiz\n\uf0a7 In the first statement after a for-loop, is the condition true\nor false.\nfor (initialisation;condition;update){\ndo something\n}\nnext statement;\nQuiz\n\uf0a7 What value will be printed after the for-loop?\nfor (int counter = 0; counter < 10; counter++){\ncout << 2*counter << endl;\n}\ncout << counter << endl;\n",
  "context": "if statement)\nwhile (condition) The statements are\nrepeatedly executed",
  "source_file": "resources\\Year 1\\CS111 Lectures\\CS111 Lecture 5.3.pdf",
  "line_numbers": [
    10,
    738
  ]
}