{
  "title": "asp.net documentation",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "ASP.NET",
  "code": "#asp.net\nTable of Contents\nAbout 1\nChapter 1: Getting started with ASP.NET 2\nRemarks 2\nExamples 2\nInstallation or Setup 2\nASP.NET Overview 2\nHello World with OWIN 3\nSimple Intro of ASP.NET 3\nChapter 2: Asp Web Forms Identity 5\nExamples 5\nGetting Started 5\nChapter 3: ASP.NET - Basic Controls 7\nSyntax 7\nExamples 7\nText Boxes and Labels 7\nCheck Boxes and Radio Buttons 8\nList Controls 9\nRadio Button list and Check Box list 10\nBulleted lists and Numbered lists 10\nHyperLink Control 11\nImage Control 11\nChapter 4: ASP.NET - Managing State 13\nExamples 13\nView State 13\nChapter 5: ASP.NET - User Controls 15\nIntroduction 15\nExamples 15\nIntroduction of User Controls 15\nCreating User Control Instance Programmatically 16\nAdding Custom Properties for User Control 16\nChapter 6: ASP.NET - Validators 18\nSyntax 18\nExamples 18\nValidation controls 18\nRequiredFieldValidator Control 18\nRangeValidator Control 19\nCompareValidator Control 19\nRegularExpressionValidator 20\nValidation Summary 21\nValidation Groups 22\nChapter 7: Asp.net Ajax Controls 25\nExamples 25\nFileUpload Ajax Toolkit Control 25\nChapter 8: ASP.NET Caching 27\nExamples 27\nData Cache 27\nChapter 9: Data Binding 29\nExamples 29\nSQL Data Source 29\nRetrieving Data 29\nBasic Usage 30\nObject Data Source 30\nChapter 10: Data List 32\nSyntax 32\nExamples 32\nData Binding in asp.net 32\nChapter 11: DayPilot Scheduler 34\nParameters 34\nRemarks 34\nExamples 34\nBasic Info 34\nDeclaration 34\nChapter 12: Directives 36\nExamples 36\nThe Application Directive 36\nThe Control Directive 36\nThe Implements Directive 37\nThe Master Directive 37\nThe Import Directive 37\nThe MasterType Directive 37\nThe Page Directive 38\nThe OutputCache Directive 39\nChapter 13: Event Delegation 40\nSyntax 40\nRemarks 40\nExamples 40\nDelegation of Event from User Control to aspx 40\nChapter 14: Event Handling 43\nSyntax 43\nParameters 43\nExamples 43\nApplication and Session Events 43\nPage and Control Events 43\nDefault Events 44\nChapter 15: Expressions 47\nExamples 47\nValue From App.Config 47\nEvaluated Expression 47\nCode Block Within ASP Markup 47\nChapter 16: Find Control by ID 48\nSyntax 48\nRemarks 48\nExamples 48\nAccessing the TextBox Control in aspx Page 48\nFind a control in a GridView, Repeater, ListView etc. 48\nChapter 17: GridView 49\nExamples 49\nData Binding 49\nManual Binding 49\nDataSourceControl 49\nColumns 49\nStrongly Typed GridView 50\nHandling command event 51\nPaging 52\nObjectDataSource 52\nManual Binding 53\nUpdate Gridview on row click 54\nChapter 18: httpHandlers 57\nExamples 57\nUsing an httpHandler (.ashx) to download a file from a specific location 57\nChapter 19: Katana 59\nIntroduction 59\nExamples 59\nExample 59\nChapter 20: Middleware 61\nParameters 61\nRemarks 61\nExamples 61\nOutput the request path and the time it took to process it 61\nChapter 21: Page Life Cycle 63\nExamples 63\nLife Cycle Events 63\nCode Example 64\nChapter 22: Page Methods 68\nParameters 68\nRemarks 68\nMore than one parameter 68\nReturn value 68\nExamples 68\nHow to call it 68\nChapter 23: Repeater 70\nExamples 70\nBasic usage 70\nChapter 24: ScriptManager 71\nIntroduction 71\nSyntax 71\nExamples 71\nWorking with ScriptManager 71\nChapter 25: Session Managment 73\nExamples 73\nAdvantage and Disadvantage of Session State, types of session 73\nChapter 26: Session State 74\nSyntax 74\nRemarks 74\nExamples 74\nUsing the Session object to store values 74\nUsing a SQL Session Store 75\nUsing an Amazon DynamoDB Session Store 75\nChapter 27: UpdatePanel 77\nIntroduction 77\nSyntax 77\nRemarks 77\nExamples 77\nUpdate Panel Example 77\nChapter 28: View State 79\nIntroduction 79\nSyntax 79\nExamples 79\nExample 79\nChapter 29: web.config > system.webServer/httpErrors & system.web/customErrors sections 81\nIntroduction 81\nExamples 81\nWhat is the difference between customErrors and httpErrors? 81\nChapter 30: WebForms 82\nSyntax 82\nRemarks 82\nExamples 82\nUsing a Repeater to create a HTML Table 82\nGrouping in ListView 83\nExample 85\nHyperlink 85\nChapter 31: WebService without Visual Studio 87\nIntroduction 87\nRemarks 87\nExamples 87\nCalculator WebService 87\nCredits 89\nAbout\nYou can share this PDF with anyone you feel could benefit from it, downloaded the latest version\nfrom: asp-net\nIt is an unofficial and free ASP.NET ebook created for educational purposes. All the content is\nextracted from Stack Overflow Documentation, which is written by many hardworking individuals at\nStack Overflow. It is neither affiliated with Stack Overflow nor official ASP.NET.\nThe content is released under Creative Commons BY-SA, and the list of contributors to each\nchapter are provided in the credits section at the end of this book. Images may be copyright of\ntheir respective owners unless otherwise specified. All trademarks and registered trademarks are\nthe property of their respective company owners.\nUse the content presented in this book at your own risk; it is not guaranteed to be correct nor\naccurate, please send your feedback and corrections to info@zzzprojects.com\nhttps://riptutorial.com/ 1\nChapter 1: Getting started with ASP.NET\nRemarks\nASP.NET is a collection of technologies within the .NET Framework that are targeted towards web\napplication development. These technologies consist of:\n\u2022 WebForms: A RAD style development platform using web controls.\n\u2022 MVC: A Model View Controller development platform.\n\u2022 SignalR: A real-time messaging platform for client/server messaging.\n\u2022 Razor: A front-end markup language you can embed server-side commands with.\n\u2022 WebAPI: A platform for building REST API style applications.\nExamples\nInstallation or Setup\nBy default, all the required libraries for build ASP.NET applications are included during the\ninstallation of Visual Studio. If a newer version of ASP.NET is released that was not included with\nVisual Studio, you can download the appropriate SDK library from Microsoft, which will include all\nthe necessary libraries for that version.\nSimilarly, the Windows operating system comes pre-installed with a more recent version of\nASP.NET and is automatically registered with IIS for configuration and execution. Similarly, if a\nnewer version of ASP.NET becomes available, you can install the SDK for the version you need\nand then use the aspnet_regiis tool to register the framework with IIS for use.\nIt should be also noted that for server deployments, there also exists a ASP.NET SDK\nRedistributable package. This version is a streamlined version of the SDK, with just the essential\nlibraries and does not have the tools and integrations with Visual Studio in it.\nASP.NET Overview\nASP.NET is a unified Web development model that includes the services necessary for you to\nbuild enterprise-class Web applications with a minimum of coding. ASP.NET is part of the .NET\nFramework, and when coding ASP.NET applications you have access to classes in the .NET\nFramework.\nYou can code your applications in any language compatible with the common language runtime\n(CLR), including Microsoft Visual Basic, C#, JScript .NET, and J#. These languages enable you to\ndevelop ASP.NET applications that benefit from the common language runtime, type safety,\ninheritance, and so on.\nASP.NET includes:\n\u2022 A page and controls framework\nhttps://riptutorial.com/ 2\n\u2022 The ASP.NET compiler\n\u2022 Security infrastructure\n\u2022 State-management facilities\n\u2022 Application configuration\n\u2022 Health monitoring and performance features\n\u2022 Debugging support\n\u2022 An XML Web services framework\n\u2022 Extensible hosting environment and application life cycle management\n\u2022 An extensible designer environment\nHello World with OWIN\nUse the packet manager to install Microsoft.Owin.SelfHost\ninstall-packet Microsoft.Owin.SelfHost\nCode for a bare minimum HelloWorld web application running from a console window:\nnamespace HelloOwin\n{\nusing System;\nusing Owin;\nclass Program\n{\nstatic readonly string baseUrl = \"http://localhost:8080\";\nstatic void Main(string[] args)\n{\nusing (Microsoft.Owin.Hosting.WebApp.Start<Startup>(baseUrl))\n{\nConsole.WriteLine(\"Prease any key to quit.\");\nConsole.ReadKey();\n}\n}\n}\npublic class Startup\n{\npublic void Configuration(IAppBuilder app)\n{\napp.Run(ctx =>\n{\nreturn ctx.Response.WriteAsync(\"Hello World\");\n});\n}\n}\n}\nSimple Intro of ASP.NET\nAsp.net is web application framework developed by Microsoft to build dynamic data-driven Web\nhttps://riptutorial.com/ 3\nApplication and WebServices.\nAsp.net is basically a subset of wider .NET framework. A framework is nothing but a collection of\nclasses.\nIn .NET Framework you can build Console application. Web Application, Window Application,\nMobile Application. So for web application ASP.net is being used.\nASP.NET is the successor to classic ASP (Active Server Page.)\nWhat is Web Application?\nA web application is an application that is accessed by users using a web browser such as:\n\u2022 Microsoft Internet Explorer.\n\u2022 Google Chrome\n\u2022 Mozilla FireFox\n\u2022 Apple safari\nRead Getting started with ASP.NET online: https://riptutorial.com/asp-net/topic/836/getting-started-\nwith-asp-net\nhttps://riptutorial.com/ 4\nChapter 2: Asp Web Forms Identity\nExamples\nGetting Started\nGetting Started\nInstall NuGet packages:\n1. Microsoft.AspNet.Identity.EntityFramework\n2. Microsoft.AspNet.Identity.Core\n3. Microsoft.AspNet.Identity.OWIN\nRegister action - Account controller\n[HttpPost]\n[AllowAnonymous]\n[ValidateAntiForgeryToken]\npublic async Task<ActionResult> Register(RegisterViewModel model)\n{\nif (ModelState.IsValid)\n{\nvar user = new ApplicationUser() { UserName = model.UserName };\nvar result = await UserManager.CreateAsync(user, model.Password);\nif (result.Succeeded)\n{\nawait SignInAsync(user, isPersistent: false);\nreturn RedirectToAction(\"Index\", \"Home\");\n}\nelse\n{\nAddErrors(result);\n}\n}\n// If we got this far, something failed, redisplay form\nreturn View(model);\n}\nLog-in action - SignInAsync method\nprivate async Task SignInAsync(ApplicationUser user, bool isPersistent)\n{\nAuthenticationManager.SignOut(DefaultAuthenticationTypes.ExternalCookie);\nvar identity = await UserManager.CreateIdentityAsync(\nuser, DefaultAuthenticationTypes.ApplicationCookie);\nAuthenticationManager.SignIn(\nnew AuthenticationProperties() {\nhttps://riptutorial.com/ 5\nIsPersistent = isPersistent\n}, identity);\n}\nLog off\n// POST: /Account/LogOff\n[HttpPost]\n[ValidateAntiForgeryToken]\npublic ActionResult LogOff()\n{\nAuthenticationManager.SignOut();\nreturn RedirectToAction(\"Index\", \"Home\");\n}\nRead Asp Web Forms Identity online: https://riptutorial.com/asp-net/topic/9146/asp-web-forms-\nidentity\nhttps://riptutorial.com/ 6\nChapter 3: ASP.NET - Basic Controls\nSyntax\n\u2022 <asp:Button ID=\"Button1\" runat=\"server\" onclick=\"Button1_Click\" Text=\"Click\" / >\n<asp:TextBox ID=\"txtstate\" runat=\"server\">\n\u2022 </asp:TextBox> <asp:CheckBox ID= \"chkoption\" runat= \"Server\"> </asp:CheckBox>\n<asp:RadioButton ID= \"rdboption\" runat= \"Server\"> </asp: RadioButton>\n\u2022 <asp:ListBox ID=\"ListBox1\" runat=\"server\" AutoPostBack=\"True\"\nOnSelectedIndexChanged=\"ListBox1_SelectedIndexChanged\"> </asp:ListBox>\n\u2022 <asp:DropDownList ID=\"DropDownList1\" runat=\"server\" AutoPostBack=\"True\"\nOnSelectedIndexChanged=\"DropDownList1_SelectedIndexChanged\">\n</asp:DropDownList>\n\u2022 <asp:RadioButtonList ID=\"RadioButtonList1\" runat=\"server\" AutoPostBack=\"True\"\nOnSelectedIndexChanged=\"RadioButtonList1_SelectedIndexChanged\">\n</asp:RadioButtonList>\n\u2022 <asp:CheckBoxList ID=\"CheckBoxList1\" runat=\"server\" AutoPostBack=\"True\"\nOnSelectedIndexChanged=\"CheckBoxList1_SelectedIndexChanged\"> </asp:CheckBoxList>\n\u2022 <asp:BulletedList ID=\"BulletedList1\" runat=\"server\"> </asp:BulletedList>\n\u2022 <asp:HyperLink ID=\"HyperLink1\" runat=\"server\"> HyperLink </asp:HyperLink> <asp:Image\nID=\"Image1\" runat=\"server\">\nExamples\nText Boxes and Labels\nText box controls are typically used to accept input from the user. A text box control can accept\none or more lines of text depending upon the settings of the TextMode attribute.\nLabel controls provide an easy way to display text which can be changed from one execution of a\npage to the next. If you want to display text that does not change, you use the literal text.\nBasic syntax of text control:\n<asp:TextBox ID=\"txtstate\" runat=\"server\" ></asp:TextBox>\nCommon Properties of the Text Box and Labels:\nProperties Description\nSpecifies the type of text box. SingleLine creates a standard text box, MultiLIne\nTextMode creates a text box that accepts more than one line of text and the Password\ncauses the characters that are entered to be masked. The default is SingleLine.\nText The text content of the text box.\nhttps://riptutorial.com/ 7\nProperties Description\nMaxLength The maximum number of characters that can be entered into the text box.\nIt determines whether or not text wraps automatically for multi-line text box;\nWrap\ndefault is true.\nDetermines whether the user can change the text in the box; default is false,\nReadOnly\ni.e., the user can change the text.\nThe width of the text box in characters. The actual width is determined based on\nColumns\nthe font that is used for the text entry.\nThe height of a multi-line text box in lines. The default value is 0, means a\nRows\nsingle line text box.\nThe mostly used attribute for a label control is 'Text', which implies the text displayed on the label.\nCheck Boxes and Radio Buttons\nA check box displays a single option that the user can either check or uncheck and radio buttons\npresent a group of options from which the user can select just one option.\nTo create a group of radio buttons, you specify the same name for the GroupName attribute of\neach radio button in the group. If more than one group is required in a single form, then specify a\ndifferent group name for each group.\nIf you want check box or radio button to be selected when the form is initially displayed, set its\nChecked attribute to true. If the Checked attribute is set to true for multiple radio buttons in a\ngroup, then only the last one is considered as true.\nBasic syntax of check box:\n<asp:CheckBox ID= \"chkoption\" runat= \"Server\"> </asp:CheckBox>\nBasic syntax of radio button:\n<asp:RadioButton ID= \"rdboption\" runat= \"Server\"> </asp: RadioButton>\nCommon properties of check boxes and radio buttons:\nProperties Description\nText The text displayed next to the check box or radio button.\nChecked Specifies whether it is selected or not, default is false.\nGroupName Name of the group the control belongs to.\nhttps://riptutorial.com/ 8\nList Controls\nASP.NET provides the following controls\n\u2022 Drop-down list\n\u2022 List box\n\u2022 Radio button list\n\u2022 Check box list\n\u2022 Bulleted list\nThese control let a user choose from one or more items from the list. List boxes and drop-down\nlists contain one or more list items. These lists can be loaded either by code or by the\nListItemCollection editor.\nBasic syntax of list box control:\n<asp:ListBox ID=\"ListBox1\" runat=\"server\" AutoPostBack=\"True\"\nOnSelectedIndexChanged=\"ListBox1_SelectedIndexChanged\">\n</asp:ListBox>\nBasic syntax of drop-down list control:\n<asp:DropDownList ID=\"DropDownList1\" runat=\"server\" AutoPostBack=\"True\"\nOnSelectedIndexChanged=\"DropDownList1_SelectedIndexChanged\">\n</asp:DropDownList>\nCommon properties of list box and drop-down Lists:\nProperties Description\nThe collection of ListItem objects that represents the items in the control.\nItems\nThis property returns an object of type ListItemCollection.\nSpecifies the number of items displayed in the box. If actual list contains\nRows\nmore rows than displayed then a scroll bar is added.\nThe index of the currently selected item. If more than one item is selected,\nSelectedIndex then the index of the first selected item. If no item is selected, the value of\nthis property is -1.\nThe value of the currently selected item. If more than one item is selected,\nSelectedValue then the value of the first selected item. If no item is selected, the value of\nthis property is an empty string (\"\").\nSelectionMode Indicates whether a list box allows single selections or multiple selections.\nCommon properties of each list item objects:\nhttps://riptutorial.com/ 9\nProperties Description\nText The text displayed for the item.\nSelected A string value associated with the item.\nValue Indicates whether the item is selected.\nIt is important to notes that:\n\u2022 To work with the items in a drop-down list or list box, you use the Items property of the\ncontrol. This property returns a ListItemCollection object which contains all the items of the\nlist.\n\u2022 The SelectedIndexChanged event is raised when the user selects a different item from a\ndrop-down list or list box.\nRadio Button list and Check Box list\nA radio button list presents a list of mutually exclusive options. A check box list presents a list of\nindependent options. These controls contain a collection of ListItem objects that could be referred\nto through the Items property of the control.\nBasic syntax of radio button list:\n<asp:RadioButtonList ID=\"RadioButtonList1\" runat=\"server\" AutoPostBack=\"True\"\nOnSelectedIndexChanged=\"RadioButtonList1_SelectedIndexChanged\">\n</asp:RadioButtonList>\nBasic syntax of check box list:\n<asp:CheckBoxList ID=\"CheckBoxList1\" runat=\"server\" AutoPostBack=\"True\"\nOnSelectedIndexChanged=\"CheckBoxList1_SelectedIndexChanged\">\n</asp:CheckBoxList>\nCommon properties of check box and radio button lists:\nProperties Description\nThis attribute specifies whether the table tags or the normal html flow to\nRepeatLayout\nuse while formatting the list when it is rendered. The default is Table.\nIt specifies the direction in which the controls to be repeated. The values\nRepeatDirection\navailable are Horizontal and Vertical. Default is Vertical.\nIt specifies the number of columns to use when repeating the controls;\nRepeatColumns\ndefault is 0.\nBulleted lists and Numbered lists\nhttps://riptutorial.com/ 10\nThe bulleted list control creates bulleted lists or numbered lists. These controls contain a collection\nof ListItem objects that could be referred to through the Items property of the control.\nBasic syntax of a bulleted list:\n<asp:BulletedList ID=\"BulletedList1\" runat=\"server\">\n</asp:BulletedList>\nCommon properties of the bulleted list:\nProperties Description\nBulletStyle This property specifies the style and looks of the bullets, or numbers.\nIt specifies the direction in which the controls to be repeated. The values\nRepeatDirection\navailable are Horizontal and Vertical. Default is Vertical.\nIt specifies the number of columns to use when repeating the controls;\nRepeatColumns\ndefault is 0.\nHyperLink Control\nThe HyperLink control is like the HTML element.\nBasic syntax for a hyperlink control:\n<asp:HyperLink ID=\"HyperLink1\" runat=\"server\">\nHyperLink\n</asp:HyperLink>\nIt has the following important properties:\nProperties Description\nImageUrl Path of the image to be displayed by the control.\nNavigateUrl Target link URL.\nText The text to be displayed as the link.\nTarget The window or frame which loads the linked page.\nImage Control\nThe image control is used for displaying images on the web page, or some alternative text, if the\nimage is not available.\nBasic syntax for an image control:\nhttps://riptutorial.com/ 11\n<asp:Image ID=\"Image1\" runat=\"server\">\nIt has the following important properties:\nProperties Description\nAlternateText Alternate text to be displayed in absence of the image.\nImageAlign Alignment options for the control.\nImageUrl Path of the image to be displayed by the control.\nRead ASP.NET - Basic Controls online: https://riptutorial.com/asp-net/topic/6444/asp-net---basic-\ncontrols\nhttps://riptutorial.com/ 12\nChapter 4: ASP.NET - Managing State\nExamples\nView State\nThe following example demonstrates the concept of storing view state. Let us keep a counter,\nwhich is incremented each time the page is posted back by clicking a button on the page. A label\ncontrol shows the value in the counter.\nThe markup file code is as follows:\n<%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\"\nInherits=\"statedemo._Default\" %>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n<head runat=\"server\">\n<title>\nUntitled Page\n</title>\n</head>\n<body>\n<form id=\"form1\" runat=\"server\">\n<div>\n<h3>View State demo</h3>\nPage Counter:\n<asp:Label ID=\"lblCounter\" runat=\"server\" />\n<asp:Button ID=\"btnIncrement\" runat=\"server\" Text=\"Add Count\"\nonclick=\"btnIncrement_Click\" />\n</div>\n</form>\n</body>\n</html>\nThe code behind file for the example is shown here:\npublic partial class _Default : System.Web.UI.Page\n{\npublic int counter\n{\nget\n{\nif (ViewState[\"pcounter\"] != null)\n{\nhttps://riptutorial.com/ 13\nreturn ((int)ViewState[\"pcounter\"]);\n}\nelse\n{\nreturn 0;\n}\n}\nset\n{\nViewState[\"pcounter\"] = value;\n}\n}\nprotected void Page_Load(object sender, EventArgs e)\n{\nlblCounter.Text = counter.ToString();\ncounter++;\n}\n}\nIt would produce the following result:\nView State Demo\nRead ASP.NET - Managing State online: https://riptutorial.com/asp-net/topic/6296/asp-net---\nmanaging-state\nhttps://riptutorial.com/ 14\nChapter 5: ASP.NET - User Controls\nIntroduction\nUser controls are containers which can be populated with HTML markup & server controls with\ncode-behind in the same way as ASPX page. They're treated as reusable smaller units of a page,\nso they can't run as stand-alone pages and must not having html, body or form HTML elements\nin them.\nExamples\nIntroduction of User Controls\nUser controls are made for reusability across ASP.NET pages, similar to master pages. Instead of\nsharing base page layout, user controls share group of HTML/ASP.NET built-in server controls or\na specific form layout, e.g. comment submission or guest notes.\nA user control can contain both HTML controls and ASP.NET server controls, including client-side\nscripts.\nThe user controls usually include Control directive on top of its definition:\n<%@ Control Language=\"C#\" AutoEventWireup=\"True\" CodeFile=\"UserControl.ascx.cs\" %>\nLike ASPX page, user controls consists of markups which can be associated with a code behind\nfile to perform certain events and tasks, therefore all HTML tags available on ASPX page can be\nused on user controls except <html>, <body> and <form> tags.\nHere is an example for simple user control markup:\n<%-- UserControl.ascx --%>\n<%@ Control Language=\"C#\" AutoEventWireup=\"True\" CodeFile=\"UserControl.ascx.cs\" %>\n<div>\n<asp:Label ID=\"Label1\" runat=\"server\" />\n<br />\n<asp:Button ID=\"Button1\" runat=\"server\" Text=\"Click Here\" OnClick=\"Button1_Click\" />\n</div>\nCode-behind example:\n// UserControl.ascx.cs\npublic partial class UserControl : System.Web.UI.UserControl\n{\nprotected void Button1_Click(Object sender, EventArgs e)\n{\nLabel1.Text = \"Hello World!\";\n}\n}\nhttps://riptutorial.com/ 15\nBefore a user control inserted in ASPX page, Register directive should declared on top of the page\nreferencing the user control with its source URL, tag name & tag prefix.\n<%@ Register Src=\"UserControl.ascx\" TagName=\"UserControl\" TagPrefix=\"uc\" %>\nAfterwards, you can place user control inside ASPX page like ASP.NET built-in server control:\n<uc:UserControl ID=\"UserControl1\" runat=\"server\" />\nCreating User Control Instance Programmatically\nIf you want to instantiate an instance of user control inside ASPX code behind page, you need to\nwrite user control declaration on Page_Load event as follows:\npublic partial class Default : System.Web.UI.Page\n{\nprotected void Page_Load(Object sender, EventArgs e)\n{\nControl control1 = LoadControl(\"UserControl.ascx\");\nPage.Controls.Add(control1);\n}\n}\nNote that the user control ASCX file should be already created when executing LoadControl\nmethod.\nAnother way known to declare user controls programatically is using PlaceHolder:\npublic partial class Default : System.Web.UI.Page\n{\npublic PlaceHolder Placeholder1;\nprotected void Page_Load(Object sender, EventArgs e)\n{\nControl control1 = LoadControl(\"UserControl.ascx\");\nPlaceholder1.Controls.Add(control1);\n}\n}\nDepending on your need, PlaceHolder places user controls on a container storing all server\ncontrols dynamically added into the page, where Page.Controls directly inserts user control inside\nthe page which more preferred for rendering HTML literal controls.\nAdding Custom Properties for User Control\nLike standard ASP.NET built-in server controls, user controls can have properties (attributes) on\nits definition tag. Suppose you want to add color effect on UserControl.ascx file like this:\n<uc:UserControl ID=\"UserControl1\" runat=\"server\" Color=\"blue\" />\nAt this point, custom attributes/properties for user controls can be set by declaring properties\nhttps://riptutorial.com/ 16\ninside user control's code behind:\nprivate String _color;\npublic String Color\n{\nget\n{\nreturn _color;\n}\nset\n{\n_color = value;\n}\n}\nAdditionally, if you want to set default value on a user control property, assign the default value\ninside user control's constructor method.\npublic UserControl()\n{\n_color = \"red\";\n}\nThen, user control markup should be modified to add color attribute as following example:\n<%@ Control Language=\"C#\" AutoEventWireup=\"True\" CodeFile=\"UserControl.ascx.cs\" %>\n<div>\n<span style=\"color:<%= Color %>\"><asp:Label ID=\"Label1\" runat=\"server\" /></span>\n<br />\n<asp:Button ID=\"Button1\" runat=\"server\" Text=\"Click Here\" OnClick=\"Button1_Click\" />\n</div>\nRead ASP.NET - User Controls online: https://riptutorial.com/asp-net/topic/6773/asp-net---user-\ncontrols\nhttps://riptutorial.com/ 17\nChapter 6: ASP.NET - Validators\nSyntax\n\u2022 RequiredFieldValidator Control: <asp:RequiredFieldValidator ID=\"rfvcandidate\"\nrunat=\"server\" ControlToValidate =\"ddlcandidate\" ErrorMessage=\"Please choose a\ncandidate\" InitialValue=\"Please choose a candidate\">\n</asp:RequiredFieldValidator>\n\u2022 RangeValidator Control:\n<asp:RangeValidator ID=\"rvclass\" runat=\"server\" ControlToValidate=\"txtclass\"\nErrorMessage=\"Enter your class (6 - 12)\" MaximumValue=\"12\" MinimumValue=\"6\"\nType=\"Integer\">\n</asp:RangeValidator>\n\u2022 CompareValidator Control: <asp:CompareValidator ID=\"CompareValidator1\"\nrunat=\"server\" ErrorMessage=\"CompareValidator\"> </asp:CompareValidator>\n\u2022 CustomValidator:\n<asp:CustomValidator ID=\"CustomValidator1\" runat=\"server\"\nClientValidationFunction=.cvf_func. ErrorMessage=\"CustomValidator\">\n</asp:CustomValidator>\n\u2022 Validation Summary: <asp:ValidationSummary ID=\"ValidationSummary1\" runat=\"server\"\nDisplayMode = \"BulletList\" ShowSummary = \"true\" HeaderText=\"Errors:\" />\nExamples\nValidation controls\nASP.NET validation controls validate the user input data to ensure that useless, unauthenticated,\nor contradictory data don't get stored.\nASP.NET provides the following validation controls:\n\u2022 RequiredFieldValidator\n\u2022 RangeValidator\n\u2022 CompareValidator\n\u2022 RegularExpressionValidator\n\u2022 CustomValidator\n\u2022 ValidationSummary\nRequiredFieldValidator Control\nhttps://riptutorial.com/ 18\nThe RequiredFieldValidator control ensures that the required field is not empty. It is generally tied\nto a text box to force input into the text box.\nThe syntax of the control is as given:\n<asp:RequiredFieldValidator ID=\"rfvcandidate\"\nrunat=\"server\" ControlToValidate =\"ddlcandidate\"\nErrorMessage=\"Please choose a candidate\"\nInitialValue=\"Please choose a candidate\">\n</asp:RequiredFieldValidator>\nRangeValidator Control\nThe RangeValidator control verifies that the input value falls within a predetermined range.\nIt has three specific properties:\nProperties Description\nType It defines the type of the data. The available values are: Currency, Date,\nMinimumValue It specifies the minimum value of the range.\nMaximumValue It specifies the maximum value of the range.\nThe syntax of the control is as given:\n<asp:RangeValidator ID=\"rvclass\" runat=\"server\" ControlToValidate=\"txtclass\"\nErrorMessage=\"Enter your class (6 - 12)\" MaximumValue=\"12\"\nMinimumValue=\"6\" Type=\"Integer\">\n</asp:RangeValidator>\nCompareValidator Control\nThe CompareValidator control compares a value in one control with a fixed value or a value in\nanother control.\nIt has the following specific properties:\nProperties Description\nType It specifies the data type.\nControlToCompare It specifies the value of the input control to compare with.\nValueToCompare It specifies the constant value to compare with.\nValueToCompare It specifies the comparison operator, the available values are: Equal,\nhttps://riptutorial.com/ 19\nProperties Description\nNotEqual, GreaterThan, GreaterThanEqual, LessThan, LessThanEqual,\nand DataTypeCheck.\nThe basic syntax of the control is as follows:\n<asp:CompareValidator ID=\"CompareValidator1\" runat=\"server\"\nErrorMessage=\"CompareValidator\">\n</asp:CompareValidator>\nRegularExpressionValidator\nThe RegularExpressionValidator allows validating the input text by matching against a pattern of a\nregular expression. The regular expression is set in the ValidationExpression property.\nThe following table summarizes the commonly used syntax constructs for regular expressions:\nCharacter Escapes Description\n\\b Matches a backspace.\n\\t Matches a tab.\n\\r Matches a carriage return.\n\\v Matches a vertical tab.\n\\f Matches a form feed.\n\\n Matches a new line.\n\\ Escape character.\nApart from single character match, a class of characters could be specified that can be matched,\ncalled the metacharacters.\nMetacharacters Description\n. Matches any character except \\n.\n[abcd] Matches any character in the set.\n[^abcd] Excludes any character in the set.\n[2-7a-mA-M] Matches any character specified in the range.\n\\w Matches any alphanumeric character and underscore.\nhttps://riptutorial.com/ 20\nMetacharacters Description\n\\W Matches any non-word character.\n\\s Matches whitespace characters like, space, tab, new line etc.\n\\S Matches any non-whitespace character.\n\\d Matches any decimal character.\n\\D Matches any non-decimal character.\nQuantifiers could be added to specify number of times a character could appear.\nQuantifier Description\n* Zero or more matches.\n+ One or more matches.\n? Zero or one matches.\n{N} N matches.\n{N,} N or more matches.\n{N,M} Between N and M matches.\nThe syntax of the control is as given:\n<asp:RegularExpressionValidator ID=\"string\" runat=\"server\" ErrorMessage=\"string\"\nValidationExpression=\"string\" ValidationGroup=\"string\">\n</asp:RegularExpressionValidator>\nValidation Summary\nThe ValidationSummary control does not perform any validation but shows a summary of all errors\nin the page. The summary displays the values of the ErrorMessage property of all validation\ncontrols that failed validation.\nThe following two mutually inclusive properties list out the error message:\nShowSummary : shows the error messages in specified format.\nShowMessageBox : shows the error messages in a separate window.\nThe syntax for the control is as given:\n<asp:ValidationSummary ID=\"ValidationSummary1\" runat=\"server\"\nhttps://riptutorial.com/ 21\nDisplayMode = \"BulletList\" ShowSummary = \"true\" HeaderText=\"Errors:\" />\nValidation Groups\nComplex pages have different groups of information provided in different panels. In such situation,\na need might arise for performing validation separately for separate group. This kind of situation is\nhandled using validation groups.\nTo create a validation group, you should put the input controls and the validation controls into the\nsame logical group by setting their ValidationGroup property.\nExample The following example describes a form to be filled up by all the students of a school,\ndivided into four houses, for electing the school president. Here, we use the validation controls to\nvalidate the user input.\nThis is the form in design view:\nThe content file code is as given:\n<form id=\"form1\" runat=\"server\">\n<table style=\"width: 66%;\">\n<tr>\n<td class=\"style1\" colspan=\"3\" align=\"center\">\n<asp:Label ID=\"lblmsg\"\nText=\"President Election Form : Choose your president\"\nrunat=\"server\" />\n</td>\n</tr>\n<tr>\n<td class=\"style3\">\nCandidate:\n</td>\n<td class=\"style2\">\n<asp:DropDownList ID=\"ddlcandidate\" runat=\"server\" style=\"width:239px\">\n<asp:ListItem>Please Choose a Candidate</asp:ListItem>\n<asp:ListItem>M H Kabir</asp:ListItem>\n<asp:ListItem>Steve Taylor</asp:ListItem>\nhttps://riptutorial.com/ 22\n<asp:ListItem>John Abraham</asp:ListItem>\n<asp:ListItem>Venus Williams</asp:ListItem>\n</asp:DropDownList>\n</td>\n<td>\n<asp:RequiredFieldValidator ID=\"rfvcandidate\"\nrunat=\"server\" ControlToValidate =\"ddlcandidate\"\nErrorMessage=\"Please choose a candidate\"\nInitialValue=\"Please choose a candidate\">\n</asp:RequiredFieldValidator>\n</td>\n</tr>\n<tr>\n<td class=\"style3\">\nHouse:\n</td>\n<td class=\"style2\">\n<asp:RadioButtonList ID=\"rblhouse\" runat=\"server\" RepeatLayout=\"Flow\">\n<asp:ListItem>Red</asp:ListItem>\n<asp:ListItem>Blue</asp:ListItem>\n<asp:ListItem>Yellow</asp:ListItem>\n<asp:ListItem>Green</asp:ListItem>\n</asp:RadioButtonList>\n</td>\n<td>\n<asp:RequiredFieldValidator ID=\"rfvhouse\" runat=\"server\"\nControlToValidate=\"rblhouse\" ErrorMessage=\"Enter your house name\" >\n</asp:RequiredFieldValidator>\n<br />\n</td>\n</tr>\n<tr>\n<td class=\"style3\">\nClass:\n</td>\n<td class=\"style2\">\n<asp:TextBox ID=\"txtclass\" runat=\"server\"></asp:TextBox>\n</td>\n<td>\n<asp:RangeValidator ID=\"rvclass\"\nrunat=\"server\" ControlToValidate=\"txtclass\"\nErrorMessage=\"Enter your class (6 - 12)\" MaximumValue=\"12\"\nMinimumValue=\"6\" Type=\"Integer\">\n</asp:RangeValidator>\n</td>\n</tr>\n<tr>\n<td class=\"style3\">\nEmail:\n</td>\n<td class=\"style2\">\n<asp:TextBox ID=\"txtemail\" runat=\"server\" style=\"width:250px\">\nhttps://riptutorial.com/ 23\n</asp:TextBox>\n</td>\n<td>\n<asp:RegularExpressionValidator ID=\"remail\" runat=\"server\"\nControlToValidate=\"txtemail\" ErrorMessage=\"Enter your email\"\nValidationExpression=\"\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*\">\n</asp:RegularExpressionValidator>\n</td>\n</tr>\n<tr>\n<td class=\"style3\" align=\"center\" colspan=\"3\">\n<asp:Button ID=\"btnsubmit\" runat=\"server\" onclick=\"btnsubmit_Click\"\nstyle=\"text-align: center\" Text=\"Submit\" style=\"width:140px\" />\n</td>\n</tr>\n</table>\n<asp:ValidationSummary ID=\"ValidationSummary1\" runat=\"server\"\nDisplayMode =\"BulletList\" ShowSummary =\"true\" HeaderText=\"Errors:\" />\n</form>\nThe code behind the submit button:\nprotected void btnsubmit_Click(object sender, EventArgs e)\n{\nif (Page.IsValid)\n{\nlblmsg.Text = \"Thank You\";\n}\nelse\n{\nlblmsg.Text = \"Fill up all the fields\";\n}\n}\nRead ASP.NET - Validators online: https://riptutorial.com/asp-net/topic/6180/asp-net---validators\nhttps://riptutorial.com/ 24\nChapter 7: Asp.net Ajax Controls\nExamples\nFileUpload Ajax Toolkit Control\n1. Add a reference of AjaxToolkitControl.dll into your project.\n2. Then drag and drop Toolkit Script Manager and AjaxFileUpload Control from Visual Studio\nToolbox window to your .aspx page like this :\n3. use this code on your aspx.cs file\nhttps://riptutorial.com/ 25\n4. Make sure you have created folder named as Uploads in your project root directory.\nRead Asp.net Ajax Controls online: https://riptutorial.com/asp-net/topic/7164/asp-net-ajax-controls\nhttps://riptutorial.com/ 26\nChapter 8: ASP.NET Caching\nExamples\nData Cache\nASP.Net exposes Cache API to store data in the cache for retrieval later.\nGetting Started\nStore string\nCache[\"key\"]=\"value\";\nRetrieve string\nvar value=\"\";\nif (Cache[\"key\"] != null)\nvalue = Cache[\"key\"].ToString();\nYou can also use the Add or the Insert methods.\nprotected void Page_Load( object sender, EventArgs e)\n{\nif ( this.IsPostBack )\n{\nlabel1.Text + = \"Page is posted back\";\n}\nelse\n{\nlabel1.Text + = \"Page is created\";\n}\nif ( Cache [ \"item\"] == null )\n{\nlabel1.Text + = \"New item is created\";\nDateTime item = DateTime.Now;\nlabel1.Text + = \"Item is stored\";\nCache.Insert ( \"item\", item, null );\nDateTime.Now.AddSeconds ( 20 ), TimeSpan.Zero;\n}\nelse\n{\nlabel1.Text + = \"Item is accesses\";\nDateTime item = ( DateTime) Cache [ \"item\" ];\nlabel1.Text + = \"Time is: \" + item.ToString();\nlabel1.Text + = <br/>\";\n}\nlabel1.Text + = \"<br/>\";\n}\nhttps://riptutorial.com/ 27\nRead ASP.NET Caching online: https://riptutorial.com/asp-net/topic/9148/asp-net-caching\nhttps://riptutorial.com/ 28\nChapter 9: Data Binding\nExamples\nSQL Data Source\nControls that can be bound with data can make use of SqlDataSource controls. The SqlDataSource\ncontrol not only allows you to retrieve data from a database, but also edit and sort the data.\nRetrieving Data\nStored Procedure:\n<asp:SqlDataSource ID=\"SqlDataSourceEmployees\"\nrunat=\"server\"\nConnectionString=\"<%$ ConnectionStrings:MyConnectionString %>\"\nSelectCommand=\"sp_GetEmployees\"\nSelectCommandType=\"StoredProcedure\">\n</asp:SqlDataSource>\nSQL Query:\n<asp:SqlDataSource ID=\"SqlDataSourceEmployees\"\nrunat=\"server\"\nConnectionString=\"<%$ ConnectionStrings:MyConnectionString %>\"\nSelectCommand=\"SELECT\nEmployeeID,\nEmployeeFirstName,\nEmployeeLastName\nFROM\ndbo.Employees\">\n</asp:SqlDataSource>\nParameters:\n<asp:SqlDataSource ID=\"SqlDataSourceEmployees\"\nrunat=\"server\"\nConnectionString=\"<%$ ConnectionStrings:MyConnectionString %>\"\nSelectCommand=\"SELECT\nEmployeeID,\nEmployeeFirstName,\nEmployeeLastName\nFROM\ndbo.Employees\nWHERE\nDepartmentID = @DepartmentID;\">\n<SelectParameters>\n<asp:ControlParameter ControlID=\"ddlDepartment\"\nName=\"DepartmentID\"\nPropertyName=\"SelectedValue\" />\n</SelectParameters>\nhttps://riptutorial.com/ 29\n</asp:SqlDataSource>\nBe aware of the CancelSelectOnNullParameter option, that if set to true (default) will stop the data\nbinding if any parameter is NULL\nBasic Usage\nGridView:\n<asp:GridView ID=\"GridViewEmployees\"\nrunat=\"server\"\nAutoGenerateColumns=\"false\"\nDataSourceID=\"SqlDataSourceEmployees\">\n<Columns>\n<asp:BoundField DataField=\"EmployeeID\" HeaderText=\"Employee ID\" />\n<asp:BoundField DataField=\"EmployeeFirstName\" HeaderText=\"First Name\" />\n<asp:BoundField DataField=\"EmployeeLastName\" HeaderText=\"Last Name\" />\n</Columns>\n</asp:GridView>\nObject Data Source\n<asp:ObjectDataSource ID=\"ObjectDataSourceEmployees\" runat=\"server\"\nTypeName=\"MyPackage.MyDataAccessClass\"\nDataObjectTypeName=\"MyPackage.Employee\"\nSelectMethod=\"GetEmployees\"\nUpdateMethod=\"SaveEmployee\"\nInsertMethod=\"SaveEmployee\">\n</asp:ObjectDataSource>\nIn the code behind\nThe Data Access Class\npublic class MyDataAccess\n{\npublic static List<Employee> GetEmployees()\n{\nList<Employee> results = new List<Employee>()\n{\nnew Employee(){ Id=1, Name=\"John Smith\" },\nnew Employee(){ Id=2, Name=\"Mary Jane\" }\n};\nreturn results;\n}\npublic static void SaveEmployee(Employee e)\n{\n// Persist Employee e to the DB/cache etc. here\n}\n}\nThe Employee Class\nhttps://riptutorial.com/ 30\npublic class Employee\n{\npublic Int32EmployeeId { get; set; }\npublic string Name { get; set; }\n}\nRead Data Binding online: https://riptutorial.com/asp-net/topic/2245/data-binding\nhttps://riptutorial.com/ 31\nChapter 10: Data List\nSyntax\n1. ItemTemplate:It potrays the content and layout of items within the list.This is mandatory\nRequired\n2. AlternatingItemTemplate:If mentioned, determines the content and layout of alternating\nitems. If not mentioned, ItemTemplate is used.\n3. SeparatorTemplate : If mentioned, is rendered between items (and alternating items). If not\nmentioned, a separator is not rendered.\n4. SelectedItemTemplate : If mentioned, determines the content and layout of the selected\nitem. If not mentioned, ItemTemplate (AlternatingItemTemplate) is used.\n5. EditItemTemplate :If mentioned, determines the content and layout of the item being edited.\nIf not mentioned, ItemTemplate (AlternatingItemTemplate, SelectedItemTemplate) is used.\n6. HeaderTemplate:If mentioned, determines the content and layout of the list header. If not\nmentioned, the header is not rendered.\n7. FooterTemplate:If mentioned, determines the content and layout of the list footer. If not\nmentioned, the footer is not rendered.\nExamples\nData Binding in asp.net\nAspx\n<asp:DataList runat=\"server\" CssClass=\"sample\" RepeatLayout=\"Flow\" ID=\"dlsamplecontent\"\nRepeatDirection=\"Vertical\" OnItemCommand=\"dlsamplecontent_ItemCommand\">\n<ItemStyle CssClass=\"tdContainer\" />\n<ItemTemplate>\n//you code\n</ItemTemplate>\n</asp:DataList>\nAspx.cs\npublic void GetSamplingContentType()\n{\ntry\n{\nErrorLogger.gstrClientMethodName = this.GetType().FullName + \"_\" +\nSystem.Reflection.MethodBase.GetCurrentMethod().Name + \" : \";\nDataTable dt = new DataTable();\ndlsamplecontent.DataSource = dt;\ndlsamplecontent.DataBind();\n}\ncatch (Exception ex)\n{\nhttps://riptutorial.com/ 32\nErrorLogger.ClientErrorLogger(ex);\n}\n}\nItem Command and Retrieving Id using Command argument\nprotected void dlsamplecontent_ItemCommand(object source, DataListCommandEventArgs e)\n{\ntry\n{\nint BlogId = Convert.ToInt32(e.CommandArgument.ToString());\nif (e.CommandName == \"SampleName\")\n{\n//your code\n}\n}\ncatch (Exception ex)\n{\nErrorLogger.ClientErrorLogger(ex);\n}\n}\nRead Data List online: https://riptutorial.com/asp-net/topic/7041/data-list\nhttps://riptutorial.com/ 33\nChapter 11: DayPilot Scheduler\nParameters\nParameter Desc\nDataStartField specifies the data source column that contains event start (DateTime)\nDataStartField specifies the data source column that contains event start (DateTime)\nDataEndField specifies the data source column that contains event end (DateTime)\nDataTextField specifies the data soruce column that contains event text (string)\nspecifies the data source column that contains event id (string or\nDataIdField\ninteger)\nspecifies the data soruce column that contains event resource foreign\nDataResourceField\nkey (string)\nRemarks\nThis is basics of DayPilot schedular which needs to be further explore.\nExamples\nBasic Info\nDayPilot Scheduler widget displays a time line for multiple resources. Supports AJAX and HTML5.\nAutomatic and manual localization. Full CSS styling support\nDeclaration\n<%@ Register Assembly=\"DayPilot\" Namespace=\"DayPilot.Web.Ui\" TagPrefix=\"DayPilot\" %>\n<DayPilot:DayPilotScheduler\nID=\"DayPilotScheduler1\"\nrunat=\"server\"\nDataStartField=\"eventstart\"\nDataEndField=\"eventend\"\nDataTextField=\"name\"\nDataIdField=\"id\"\nDataResourceField=\"resource_id\"\nCellGroupBy=\"Month\"\nScale=\"Day\"\nhttps://riptutorial.com/ 34\nEventMoveHandling=\"CallBack\"\nOnEventMove=\"DayPilotScheduler1_EventMove\" >\n</DayPilot:DayPilotScheduler>\nRead DayPilot Scheduler online: https://riptutorial.com/asp-net/topic/6027/daypilot-scheduler\nhttps://riptutorial.com/ 35\nChapter 12: Directives\nExamples\nThe Application Directive\nThe Application directive defines application-specific attributes. It is provided at the top of the\nglobal.aspx file. The basic syntax of Application directive is:\n<%@ Application Language=\"C#\" %>\nThe attributes of the Application directive are:\nAttributes Description\nInherits The name of the class from which to inherit.\nDescription The text description of the application. Parsers and compilers ignore this.\nLanguage The language used in code blocks.\nThe Control Directive\nThe control directive is used with the user controls and appears in the user control (.ascx) files.\nThe basic syntax of Control directive is:\n<%@ Control Language=\"C#\" EnableViewState=\"false\" %>\nThe attributes of the Control directive are:\nAttributes Description\nThe Boolean value that enables or disables automatic association of\nAutoEventWireup\nevents to handlers.\nClassName The file name for the control.\nThe Boolean value that enables or disables compiling with debug\nDebug\nsymbols.\nDescription The text description of the control page, ignored by compiler.\nThe Boolean value that indicates whether view state is maintained across\nEnableViewState\npage requests.\nhttps://riptutorial.com/ 36\nAttributes Description\nExplicit For VB language, tells the compiler to use option explicit mode.\nInherits The class from which the control page inherits.\nLanguage The language for code and script.\nSrc The filename for the code-behind class.\nStrict For VB language, tells the compiler to use the option strict mode.\nThe Implements Directive\nThe Implement directive indicates that the web page, master page or user control page must\nimplement the specified .Net framework interface.\nThe basic syntax for implements directive is:\n<%@ Implements Interface=\"interface_name\" %>\nThe Master Directive\nThe Master directive specifies a page file as being the mater page.\nThe basic syntax of sample MasterPage directive is:\n<%@ MasterPage Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"SiteMater.master.cs\"\nInherits=\"SiteMaster\" %>\nThe Import Directive\nThe Import directive imports a namespace into a web page, user control page of application. If the\nImport directive is specified in the global.asax file, then it is applied to the entire application. If it is\nin a page of user control page, then it is applied to that page or control.\nThe basic syntax for import directive is:\n<%@ namespace=\"System.Drawing\" %>\nThe MasterType Directive\nThe MasterType directive assigns a class name to the Master property of a page, to make it\nstrongly typed.\nThe basic syntax of MasterType directive is:\n<%@ MasterType attribute=\"value\"[attribute=\"value\" ...] %>\nhttps://riptutorial.com/ 37\nThe Page Directive\nThe Page directive defines the attributes specific to the page file for the page parser and the\ncompiler.\nThe basic syntax of Page directive is:\n<%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\"\nTrace=\"true\" %>\nThe attributes of the Page directive are:\nAttributes Description\nThe Boolean value that enables or disables page events that are being\nAutoEventWireup\nautomatically bound to methods; for example, Page_Load.\nBuffer The Boolean value that enables or disables HTTP response buffering.\nClassName The class name for the page.\nClientTarget The browser for which the server controls should render content.\nCodeFile The name of the code behind file.\nThe Boolean value that enables or disables compilation with debug\nDebug\nsymbols.\nDescription The text description of the page, ignored by the parser.\nEnableSessionState It enables, disables, or makes session state read-only.\nThe Boolean value that enables or disables view state across page\nEnableViewState\nrequests.\nErrorPage URL for redirection if an unhandled page exception occurs.\nInherits The name of the code behind or other class.\nLanguage The programming language for code.\nSrc The file name of the code behind class.\nTrace It enables or disables tracing.\nIt indicates how trace messages are displayed, and sorted by time or\nTraceMode\ncategory.\nTransaction It indicates if transactions are supported.\nhttps://riptutorial.com/ 38\nAttributes Description\nThe Boolean value that indicates whether all input data is validated\nValidateRequest\nagainst a hardcoded list of values.\nThe OutputCache Directive\nThe OutputCache directive controls the output caching policies of a web page or a user control.\nThe basic syntax of OutputCache directive is:\n<%@ OutputCache Duration=\"15\" VaryByParam=\"None\" %>\nRead Directives online: https://riptutorial.com/asp-net/topic/2255/directives\nhttps://riptutorial.com/ 39\nChapter 13: Event Delegation\nSyntax\n1. public delegate void ActionClick();\npublic event ActionClick OnResetClick;\nRemarks\nI haven't found any disadvantages in this approach but there are a few things which make this a\nlittle problematic.\n1. You need to add an event handler for each and every event. If you do not add the event\nhandlers in the OnInit event of the page, you might face some problems that on page post\nback, you will lose the event assignment (as ASP.NET is stateless, which is not the case\nwith Windows controls).\n2. In this approach, you need to respect the page life cycle events. Some times when you are\nworking on the Designer, there might be a case when the event handler gets lost without\nyour notice.\n3. Even if you have not added the event handler, you will not get any errors or warnings. If you\nhave multiple pages for performing the same action, there is no guarantee that all the\nmethod names will be same; the developer can choose their own method names, which\nreduces the maintainability of the code.\nExamples\nDelegation of Event from User Control to aspx\nNormally, we opt this approach if we want complete encapsulation and don't want to make our\nmethods public.\nAscx\n<div style=\"width: 100%;\">\n<asp:Button ID=\"btnAdd\" runat=\"server\"\nText=\"Add\" OnClick=\"btnAdd_Click\"></asp:button>\n<asp:button id=\"btnEdit\" runat=\"server\"\ntext=\"Edit\" onclick=\"btnEdit_Click\"> </asp:button>\n<asp:button id=\"btnDelete\" runat=\"server\"\ntext=\"Delete\" onclick=\"btnDelete_Click\"> </asp:Button>\n<asp:button id=\"btnReset\" runat=\"server\"\ntext=\"Reset\" onclick=\"btnReset_Click\"></asp:button>\n</div>\nAscx.cs\nhttps://riptutorial.com/ 40\npublic delegate void ActionClick();\npublic partial class EventDelegation : System.Web.UI.UserControl\n{\npublic event ActionClick OnAddClick;\npublic event ActionClick OnDeleteClick;\npublic event ActionClick OnEditClick;\npublic event ActionClick OnResetClick;\nprotected void btnAdd_Click(object sender, EventArgs e)\n{\nif(OnAddClick!= null)\n{\nOnAddClick();\n}\n}\nprotected void btnEdit_Click(object sender, EventArgs e)\n{\nif (OnEditClick != null)\n{\nOnEditClick();\n}\n}\nprotected void btnDelete_Click(object sender, EventArgs e)\n{\nif(OnDeleteClick!= null)\n{\nOnDeleteClick();\n}\n}\nprotected void btnReset_Click(object sender, EventArgs e)\n{\nif(OnResetClick!= null)\n{\nOnResetClick();\n}\n}\n}\nThe user control specifies some public events like OnAddClick, OnEditClick,etc., which declare a\ndelegate. Anyone who wants to use these events needs to add the EventHandler to execute when\nthe corresponding button click event occurs.\nAspx Design\n<%@ Register src=\"Controls/EventDelegation.ascx\"\ntagname=\"EventDelegation\" tagprefix=\"uc1\" %>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n<head runat=\"server\">\n<title></title>\n</head>\n<body>\n<form id=\"form1\" runat=\"server\">\nhttps://riptutorial.com/ 41\n<div>\n<uc1:Direct ID=\"Direct1\" runat=\"server\" />\n</div>\n</form>\n</body>\n</html>\nAspx.cs\npublic partial class EventDelegation : System.Web.UI.Page\n{\nprotected override void OnInit(EventArgs e)\n{\nbase.OnInit(e);\nActionControl.OnAddClick += ActionControl_OnAddClick;\nActionControl.OnDeleteClick += ActionControl_OnDeleteClick;\nActionControl.OnEditClick += ActionControl_OnEditClick;\nActionControl.OnResetClick += ActionControl_OnResetClick;\n}\nprivate void ActionControl_OnResetClick()\n{\nResponse.Write(\"Reset done.\");\n}\nprivate void ActionControl_OnEditClick()\n{\nResponse.Write(\"Updated.\");\n}\nprivate void ActionControl_OnDeleteClick()\n{\nResponse.Write(\"Deleted.\");\n}\nprivate void ActionControl_OnAddClick()\n{\nResponse.Write(\"Added.\");\n}\n}\nRead Event Delegation online: https://riptutorial.com/asp-net/topic/6927/event-delegation\nhttps://riptutorial.com/ 42\nChapter 14: Event Handling\nSyntax\n\u2022 private void EventName (object sender, EventArgs e);\nParameters\nParameter Details\nobject sender refers to the object that invoked the event that fired the event handler.\nsender This is useful if you have many objects using the same event handler.\nEventArgs is something of a dummy base class. In and of itself it's more or less\nEventArgs\nuseless, but if you derive from it, you can add whatever data you need to pass\ne\nto your event handlers.\nExamples\nApplication and Session Events\nThe most important application events are:\nApplication_Start - It is raised when the application/website is started.\nApplication_End - It is raised when the application/website is stopped.\nSimilarly, the most used Session events are:\nSession_Start - It is raised when a user first requests a page from the application.\nSession_End - It is raised when the session ends.\nPage and Control Events\nCommon page and control events are:\nDataBinding - It is raised when a control binds to a data source.\nDisposed - It is raised when the page or the control is released.\nError - It is a page event, occurs when an unhandled exception is thrown.\nInit - It is raised when the page or the control is initialized.\nLoad - It is raised when the page or a control is loaded.\nhttps://riptutorial.com/ 43\nPreRender - It is raised when the page or the control is to be rendered.\nUnload - It is raised when the page or control is unloaded from memory.\nDefault Events\nThe default event for the Page object is Load event. Similarly, every control has a default event.\nFor example, default event for the button control is the Click event.\nThe default event handler could be created in Visual Studio, just by double clicking the control in\ndesign view. The following table shows some of the default events for common controls:\nControl Default Event\nAdRotator AdCreated\nBulletedList Click\nButton Click\nCalender SelectionChanged\nCheckBox CheckedChanged\nCheckBoxList SelectedIndexChanged\nDataGrid SelectedIndexChanged\nDataList SelectedIndexChanged\nDropDownList SelectedIndexChanged\nHyperLink Click\nImageButton Click\nImageMap Click\nLinkButton Click\nListBox SelectedIndexChanged\nMenu MenuItem Click\nRadioButton CheckedChanged\nRadioButtonList SelectedIndexChanged\nExample This example includes a simple page with a label control and a button control on it. As\nthe page events such as Page_Load, Page_Init, Page_PreRender etc. take place, it sends a\nhttps://riptutorial.com/ 44\nmessage, which is displayed by the label control. When the button is clicked, the Button_Click\nevent is raised and that also sends a message to be displayed on the label.\nCreate a new website and drag a label control and a button control on it from the control tool box.\nUsing the properties window, set the IDs of the controls as .lblmessage. and .btnclick.\nrespectively. Set the Text property of the Button control as 'Click'.\nThe markup file (.aspx):\n<%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"Default.aspx.cs\"\nInherits=\"eventdemo._Default\" %>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n<head runat=\"server\">\n<title>Untitled Page</title>\n</head>\n<body>\n<form id=\"form1\" runat=\"server\">\n<div>\n<asp:Label ID=\"lblmessage\" runat=\"server\" >\n</asp:Label>\n<br />\n<br />\n<br />\n<asp:Button ID=\"btnclick\" runat=\"server\" Text=\"Click\" onclick=\"btnclick_Click\" />\n</div>\n</form>\n</body>\n</html>\nDouble click on the design view to move to the code behind file. The Page_Load event is\nautomatically created without any code in it. Write down the following self-explanatory code lines:\nusing System;\nusing System.Collections;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.HtmlControls;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\nusing System.Xml.Linq;\nhttps://riptutorial.com/ 45\nnamespace eventdemo {\npublic partial class _Default : System.Web.UI.Page {\nprotected void Page_Load(object sender, EventArgs e) {\nlblmessage.Text += \"Page load event handled. <br />\";\nif (Page.IsPostBack) {\nlblmessage.Text += \"Page post back event handled.<br/>\";\n}\n}\nprotected void Page_Init(object sender, EventArgs e) {\nlblmessage.Text += \"Page initialization event handled.<br/>\";\n}\nprotected void Page_PreRender(object sender, EventArgs e) {\nlblmessage.Text += \"Page prerender event handled. <br/>\";\n}\nprotected void btnclick_Click(object sender, EventArgs e) {\nlblmessage.Text += \"Button click event handled. <br/>\";\n}\n}\n}\nExecute the page. The label shows page load, page initialization and, the page pre-render events.\nClick the button to see effect:\nRead Event Handling online: https://riptutorial.com/asp-net/topic/2347/event-handling\nhttps://riptutorial.com/ 46\nChapter 15: Expressions\nExamples\nValue From App.Config\n<asp:Literal runat=\"server\" text=\"<%$ AppSettings:MyAppSettingName %>\"/>\nEvaluated Expression\n<div>\nThe time is now <%= DateTime.Now.ToString() %>\n</div>\nCode Block Within ASP Markup\n<div>\n<form id=\"form1\" runat=\"server\">\n<%\nfor (int i = 1; i <= 10; j++)\n{\nResponse.Write(i) + \" \";\n}\n%>\n</form>\n<div>\nRead Expressions online: https://riptutorial.com/asp-net/topic/6326/expressions\nhttps://riptutorial.com/ 47\nChapter 16: Find Control by ID\nSyntax\n1. control.FindControl(\"Id Of The Control To Be Found\")\nRemarks\n\u2022 FindControl is not recursive, it only searches through immediate children of the control\n\u2022 There is an overload FindControl(String, int) which is not indented for public usage\n\u2022 If nothing is found, FindControl returns null, so this is often a good idea to verify result for\nbeing not null\nExamples\nAccessing the TextBox Control in aspx Page\nTextBox txt = (TextBox)FindControl(yourtxt_Id);\nFind a control in a GridView, Repeater, ListView etc.\nIf the Control has rows.\nTextBox tb = GridView1.Rows[i].FindControl(\"TextBox1\") as TextBox;\nOr if it has items.\nTextBox tb = Repeater1.Items[i].FindControl(\"TextBox1\") as TextBox;\nRead Find Control by ID online: https://riptutorial.com/asp-net/topic/6894/find-control-by-id\nhttps://riptutorial.com/ 48\nChapter 17: GridView\nExamples\nData Binding\nThere are two ways you can bind a GridView. You can either manually do it by setting the\nDataSource property and calling DataBind(), or you can use a DataSourceControl such as a\nSqlDataSource.\nManual Binding\nCreate your GridView:\n<asp:GridView ID=\"gvColors\" runat=\"server\"></asp:GridView>\nFirst create or retrieve the source data for the GridView. Next, assign the data to the GridView's\nDataSource property. Finally, call DataBind().\nList<string> colors = new List<string>();\ncolors.Add(\"Red\");\ncolors.Add(\"Green\");\ncolors.Add(\"Blue\");\ngvColors.DataSource = colors;\ngvColors.DataBind();\nDataSourceControl\nCreate your DataSourceControl:\n<asp:SqlDataSource ID=\"sdsColors\"\nrunat=\"server\"\nConnectionString=\"<%$ MyConnectionString %>\"\nSelectCommand=\"SELECT Color_Name FROM Colors\">\n</asp:SqlDataSource>\nCreate your GridView and set the DataSourceID property:\n<asp:GridView ID=\"gvColors\"\nrunat=\"server\"\nDataSourceID=\"sdsColors\">\n</asp:GridView>\nColumns\nThere are seven different column types that can be used within a GridView.\nhttps://riptutorial.com/ 49\n<asp:GridView ID=\"GridView1\" runat=\"server\">\n<Columns>\n...\n</Columns>\n</asp:GridView>\nBoundField:\n<asp:BoundField DataField=\"EmployeeID\" HeaderText=\"Employee ID\" />\nButtonField:\n<asp:ButtonField ButtonType=\"Button\" HeaderText=\"Select Employee\" Text=\"Select\"/>\nCheckBoxField:\n<asp:CheckBoxField DataField=\"IsActive\" HeaderText=\"Is Active\" />\nCommandField:\n<asp:CommandField ShowDeleteButton=\"true\"\nShowEditButton=\"true\"\nShowInsertButton=\"true\"\nShowSelectButton=\"true\" />\nHyperLinkField:\n<asp:HyperLinkField HeaderText=\"Employee Profile\"\nDataNavigateUrlFields=\"EmployeeID\"\nDataNavigateUrlFormatString=\"EmployeeProfile.aspx?EmployeeID={0}\" />\nImageField:\n<asp:ImageField HeaderText=\"Photo\"\nDataImageUrlField=\"EmployeeID\"\nDataImageUrlFormatString=\"/images/{0}\" />\nTemplateField:\n<asp:TemplateField>\n<HeaderTemplate>\nName\n</HeaderTemplate>\n<ItemTemplate>\n<asp:Label ID=\"lblEmployeeName\"\nrunat=\"server\"\nText='<&# Eval(\"EmployeeName\") %>'></asp:Label>\n</ItemTemplate>\n</asp:TemplateField>\nStrongly Typed GridView\nhttps://riptutorial.com/ 50\nStarting with Asp.net 4.5 web controls can take advantage from strongly-typed binding to get\nIntelliSense support and compiletime errors.\nCreate a class, which holds your model:\npublic class Album\n{\npublic int Id { get; set; }\npublic string Name { get; set; }\npublic string Artist { get; set; }\n}\nDefine the GridView control on your page:\n<asp:GridView ID=\"Grid\" runat=\"server\" AutoGenerateColumns=\"false\"\nItemType=\"YourNamespace.Album\">\n<Columns>\n<asp:TemplateField HeaderText=\"Id\">\n<ItemTemplate>\n<asp:Label ID=\"lblName\" runat=\"server\" Text=\"<%# Item.Id %>\"></asp:Label>\n</ItemTemplate>\n</asp:TemplateField>\n<asp:TemplateField HeaderText=\"Name\">\n<ItemTemplate>\n<asp:Label ID=\"lblName\" runat=\"server\" Text=\"<%# Item.Name %>\"></asp:Label>\n</ItemTemplate>\n</asp:TemplateField>\n<asp:TemplateField HeaderText=\"Artist\">\n<ItemTemplate>\n<asp:Label ID=\"lblCity\" runat=\"server\" Text=\"<%# Item.Artist %>\"></asp:Label>\n</ItemTemplate>\n</asp:TemplateField>\n</Columns>\n</asp:GridView>\nLoad the data and bind it:\nvar albumList = new List<Album>\n{\nnew Album {Id = 1, Artist = \"Icing (a Cake cover band)\", Name = \"Toppings Vol. 1\"},\nnew Album {Id = 2, Artist = \"Fleetwood PC\", Name = \"Best of Windows\"},\nnew Album {Id = 3, Artist = \"this.Bandnames\", Name = \"TH_ (Pronounced \\\"Thunderscore\\\")\"},\n};\nGrid.DataSource = albumList;\nGrid.DataBind();\nHandling command event\nGridViews allow commands to be sent from a GridView row. This is useful for passing row-specific\ninformation into an event handler as command arguments.\nTo subscribe to a command event:\nhttps://riptutorial.com/ 51\n<asp:GridView ID=\"GridView1\" ... OnRowCommand=\"GridView1_RowCommand\">\nButtons are the most common way to raise commands. They also support a way to specify\ncommand arguments. In this example, the argument is an ID of the item that the row represents.\n<TemplateField>\n<ItemTemplate>\n<asp:LinkButton ID=\"LinkButton1\" runat=\"server\"\nCommandName=\"SampleCmd\"\nCommandArgument='<%# Eval(\"ID\") %>'>\n</asp:LinkButton>\n</ItemTemplate>\n</TemplateField>\nAlternatively, one can use a CommandField column template that provides the most common\ncommand controls.\nHandling of the event in code behind:\nprotected void GridView1_RowCommand(object source, GridViewCommandEventArgs e)\n{\nif (e.CommandName == \"SampleCmd\")\n{\nvar id = e.CommandArgument;\n}\n}\nNote that the CommandName used in this example is arbitrary and is a choice of the developer. There\nis, however, a set of predefined names that the GridView itself recognizes. Corresponding events\nare raised when these commands are fired.\nCommand Name Events Raised\nCancel RowCancelingEdit\nDelete RowDeleting, RowDeleted\nEdit RowEditing\nPage PageIndexChanging, PageIndexChanged\nSelect SelectedIndexChanging, SelectedIndexChanged\nSort Sorting, Sorted\nUpdate RowUpdating, RowUpdated\nPaging\nObjectDataSource\nhttps://riptutorial.com/ 52\nIf using an ObjectDataSource, almost everything is handled for you already, just simply tell the\nGridView to AllowPaging and give it a PageSize.\n<asp:GridView ID=\"gvColors\"\nrunat=\"server\"\nDataSourceID=\"sdsColors\"\nAllowPaging=\"True\"\nPageSize=\"5\">\n</asp:GridView>\n<asp:SqlDataSource ID=\"sdsColors\"\nrunat=\"server\"\nConnectionString=\"<%$ MyConnectionString %>\"\nSelectCommand=\"SELECT Color_ID, Color_Name FROM Colors\">\n</asp:SqlDataSource>\nManual Binding\nIf binding manually, you must handle the PageIndexChanging event. Simply set the DataSource and\nPageIndex and re-bind the GridView.\n<asp:GridView ID=\"gvColors\"\nrunat=\"server\"\nAllowPaging=\"True\"\nPageSize=\"5\"\nOnPageIndexChanging=\"gvColors_PageIndexChanging\">\n</asp:GridView>\nC#\nprotected void gvColors_PageIndexChanging(object sender, GridViewPageEventArgs e)\n{\ngvColors.DataSource = // Method to retrieve DataSource\ngvColors.PageIndex = e.NewPageIndex;\ngvColors.DataBind();\n}\nVB.NET\nProtected Sub gvColors_PageIndexChanging(sender As Object, e As GridViewPageEventArgs)\n{\ngvColors.DataSource = // Method to retrieve DataSource\ngvColors.PageIndex = e.NewPageIndex\ngvColors.DataBind()\nhttps://riptutorial.com/ 53\n}\nUpdate Gridview on row click\nGridviews are more useful if we can update the view as per our need. Consider a view with a\nlock/unlock feature in each row. It can be done like:\nAdd an update panel:\n<asp:UpdatePanel ID=\"UpdatePanel2\" runat=\"server\" UpdateMode=\"Conditional\"> </asp:UpdatePanel>\nAdd a ContentTemplate and Trigger inside your UpdatePanel:\n<asp:UpdatePanel ID=\"UpdatePanel2\" runat=\"server\" UpdateMode=\"Conditional\">\n<ContentTemplate>\n</ContentTemplate>\n<Triggers>\n</Triggers>\n</asp:UpdatePanel>\nAdd your GridView inside ContentTemplate:\n<ContentTemplate>\n<asp:GridView ID=\"GridView1\" runat=\"server\">\n<Columns>\n<asp:TemplateField>\n<ItemTemplate>\n<asp:ImageButton ID=\"imgDownload\" runat=\"server\" OnClientClick=\"return\nconfirm('Are you sure want to Lock/Unlock ?');\"\nCommandName=\"togglelock\"\nCommandArgument='<%#Container.DataItemIndex%>'/>\n</ItemTemplate>\n</asp:TemplateField>\n</Columns>\n</ContentTemplate>\nHere we are giving our GridView1 one constant column, for lock button. Mind it, databind has not\ntaken place till now.\nTime for DataBind: (on PageLoad)\nusing (SqlConnection con= new SqlConnection(connectionString))\n{\nSqlCommand sqlCommand = new SqlCommand(\" ... \", con);\nSqlDataReader reader = sqlCommand.ExecuteReader();\nGridView1.DataSource = reader;\nGridView1.DataBind();\n}\nLock/Unlock image will be different as per the value of a certain column in your GridView.\nhttps://riptutorial.com/ 54\nConsider a case where your table contains an attribute/column titled \"Lock Status\". Now you wish\nto (1) hide that column just after DataBind and just before page rendering and (2) Assign different\nimages to each row on basis of that hidden column value i.e. if Lock Status for a row is 0, assign it\n\"lock.jpg\", if status is 1 assign it \"unlock.jpg\". To do this, we'll use OnRowDataBound option of\nGridView, it mingles with your GridView, just before rendering each row to the HTML page.\n<ContentTemplate>\n<asp:GridView ID=\"GridView1\" runat=\"server\" OnRowDataBound=\"GridView1_RowDataBound\"> ...\nIn cs file\nprotected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)\n{\nif (e.Row.RowType == DataControlRowType.DataRow)\n{\ne.Row.Cells[8].Visible = false; //hiding the desired column which is column number\n8 in this case\nGridView1.HeaderRow.Cells[8].Visible = false; //hiding its header\nImageButton imgDownload = (ImageButton)e.Row.FindControl(\"imgDownload\");\nstring lstate = ((CheckBox)e.Row.Cells[8].Controls[0]).Checked.ToString();\nif (lstate == \"True\")\n{ imgDownload.ImageUrl = \"images/lock.png\"; }\nelse\n{\nimgDownload.ImageUrl = \"images/unlock.png\";\n}\n}\n}\nNow the GridView will be rendered as we want, now let us implement button click events on that\nLock/Unlock image button. Understand, that to perform a specific operation on a specific row, a\ncommand has to be given to that row and GridView provides us with the same functionality named\nOnRowCommand.\n<ContentTemplate>\n<asp:GridView ID=\"GridView1\" runat=\"server\" OnRowDataBound=\"GridView1_RowDataBound\"\nOnRowCommand=\"GridView1_RowCommand\">\n...\n</ContentTemplate>\nIt'll create a function in cs file which takes an object sender and GridViewCommandEventArgs e With\ne.CommandArgument we can get the index of the row which gave the command Point to be noted here\nis that, a row can have multiple buttons and the cs code needs to know which button from that row\ngave the command. So we'll use CommandName\n<asp:ImageButton ID=\"imgDownload\" runat=\"server\" OnClientClick=\"return confirm('Are you sure\nwant to Lock/Unlock ?');\"\nCommandName=\"togglelock\"\nCommandArgument='<%#Container.DataItemIndex%>'/>\nNow in the backend one can distinguish commands from different rows and different buttons.\nhttps://riptutorial.com/ 55\nprotected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)\n{\nif (e.CommandName == \"togglelock\")\n{\nusing (SqlConnection con= new SqlConnection(connectionString))\n{\nint index = Convert.ToInt32(e.CommandArgument);\nSqlCommand sqlCommand = new SqlCommand(\" ... \", con);\nSqlDataReader reader = sqlCommand.ExecuteReader();\nGridView1.DataSource = reader;\nGridView1.DataBind();\n}\n}\n}\nAdd <asp:PostBackTrigger ControlID=\"GridView1\"/> to the Trigger and it will update the GridView\nonce the DataBind is done.\nUse HorizontalAlign=\"Center\" to place the GridView at the center of the page.\nRead GridView online: https://riptutorial.com/asp-net/topic/1680/gridview\nhttps://riptutorial.com/ 56\nChapter 18: httpHandlers\nExamples\nUsing an httpHandler (.ashx) to download a file from a specific location\nCreate a new httpHandler inside your ASP.NET project. Apply the following code (VB) to the\nhandler file:\nPublic Class AttachmentDownload\nImplements System.Web.IHttpHandler\nSub ProcessRequest(ByVal context As HttpContext) Implements IHttpHandler.ProcessRequest\n' pass an ID through the query string to append a unique identifer to your\ndownloadable fileName\nDim fileUniqueId As Integer = CInt(context.Request.QueryString(\"id\"))\n' file path could also be something like \"C:\\FolderName\\FilesForUserToDownload\nDim filePath As String = \"\\\\ServerName\\FolderName\\FilesForUserToDownload\"\nDim fileName As String = \"UserWillDownloadThisFile_\" & fileUniqueId\nDim fullFilePath = filePath & \"\\\" & fileName\nDim byteArray() As Byte = File.ReadAllBytes(fullFilePath)\n' promt the user to download the file\ncontext.Response.Clear()\ncontext.Response.ContentType = \"application/x-please-download-me\" ' \"application/x-\nunknown\"\ncontext.Response.AppendHeader(\"Content-Disposition\", \"attachment; filename=\" &\nfileName)\ncontext.Response.BinaryWrite(byteArray)\ncontext.Response.Flush()\ncontext.Response.Close()\nbyteArray = Nothing\nEnd Sub\nReadOnly Property IsReusable() As Boolean Implements IHttpHandler.IsReusable\nGet\nReturn False\nEnd Get\nEnd Property\nEnd Class\nYou can call the handler from code behind, or from a client side language. In this example I am\nusing a javascript which will call the handler.\nfunction openAttachmentDownloadHandler(fileId) {\n// the location of your handler, and query strings to be passed to it\nhttps://riptutorial.com/ 57\nvar url = \"..\\\\_Handlers\\\\AttachmentDownload.ashx?\";\nurl = url + \"id=\" + fileId;\n// opening the handler will run its code, and it will close automatically\n// when it is finished.\nwindow.open(url);\n}\nNow attach that assign the javascript function to a button click event on a clickable element in your\nweb form. For example:\n<asp:LinkButton ID=\"lbtnDownloadFile\" runat=\"server\"\nOnClientClick=\"openAttachmentDownloadHandler(20);\">Download A File</asp:LinkButton>\nOr you can call the javascript function from the code behind as well:\nScriptManager.RegisterStartupScript(Page,\nPage.GetType(),\n\"openAttachmentDownloadHandler\",\n\"openAttachmentDownloadHandler(\" & fileId & \");\",\nTrue)\nNow when you click your button the httpHandler will get your file to the browser and ask the user if\nthey would like to download it.\nRead httpHandlers online: https://riptutorial.com/asp-net/topic/3476/httphandlers\nhttps://riptutorial.com/ 58\nChapter 19: Katana\nIntroduction\nWhat Is Katana? Katana is a set of open source components for building and hosting OWIN-\nbased web applications, maintained by the Microsoft Open Technologies Group.Katana provides\nan implementation of the OWIN specification, and is in fact used in an increasing number of\nASP.NET project templates. Additionally, Katana provides a wide variety of ready-to-use\nmiddleware components, ready for use in an OWIN-based application.\nExamples\nExample\nBasic KatanaConsole Application\nnamespace KatanaConsole\n{\n// use an alias for the OWIN AppFunc:\nusing AppFunc = Func<IDictionary<string, object>, Task>;\nclass Program\n{\nstatic void Main(string[] args)\n{\nWebApp.Start<Startup>(\"http://localhost:8080\");\nConsole.WriteLine(\"Server Started; Press enter to Quit\");\nConsole.ReadLine();\n}\n}\npublic class Startup\n{\npublic void Configuration(IAppBuilder app)\n{\nvar middleware = new Func<AppFunc, AppFunc>(MyMiddleWare);\napp.Use(middleware);\n}\npublic AppFunc MyMiddleWare(AppFunc next)\n{\nAppFunc appFunc = async (IDictionary<string, object> environment) =>\n{\n// Do something with the incoming request:\nvar response = environment[\"owin.ResponseBody\"] as Stream;\nusing (var writer = new StreamWriter(response))\n{\nawait writer.WriteAsync(\"<h1>Hello from My First Middleware</h1>\");\n}\n// Call the next Middleware in the chain:\nawait next.Invoke(environment);\n};\nreturn appFunc;\nhttps://riptutorial.com/ 59\n}\n}\n}\nRead Katana online: https://riptutorial.com/asp-net/topic/8236/katana\nhttps://riptutorial.com/ 60\nChapter 20: Middleware\nParameters\nParameter Details\nThis is the only collection in which OWIN communicates\ninformation during a call. All keys can be found at\nIDictionary<string,object>\nenvironment https://docs.asp.net/en/latest/fundamentals/owin.html#owin-\nkeys\nRemarks\nThe AppFunc type is just an alias for Func<IDictionary<string, object>, Task> type to shorten\nmethod signatures, much like typedef in C++.\nExamples\nOutput the request path and the time it took to process it\n//define a short alias to avoid chubby method signatures\nusing AppFunc = Func<IDictionary<string, object>, Task>;\nclass RequestTimeMiddleware\n{\nprivate AppFunc _next;\npublic RequestTimeMiddleware(AppFunc next)\n{\n_next = next;\n}\npublic async Task Invoke(IDictionary<string, object> environment)\n{\nIOwinContext context = new OwinContext(environment);\nvar path = context.Request.Path;\nvar sw = Stopwatch.StartNew();\n//Queue up the next middleware in the pipeline\nawait _next(environment);\n//When the request comes back, log the elapsed time\nConsole.WriteLine($\"Request for {path} processed in {sw.ElapsedMilliseconds}ms\");\n}\n}\npublic static class RequestTimeMiddlewareExtensions\n{\n//Extension method as syntactic sugar, to get a meaningful way\n//in adding the middleware to the pipeline\npublic static void UseRequestTimeMiddleware(this IAppBuilder app)\nhttps://riptutorial.com/ 61\n{\napp.Use<RequestTimeMiddleware>();\n}\n}\npublic class Startup\n{\npublic void Configuration(IAppBuilder app)\n{\n//add the Middleware as early as possible\napp.UseRequestTimeMiddleware();\n//Queue up every other module\napp.Use(async (environment, next) =>\n{\nawait environment.Response.WriteAsync(\"Hello from the console world\");\nawait next();\n});\n}\n}\nRead Middleware online: https://riptutorial.com/asp-net/topic/6607/middleware\nhttps://riptutorial.com/ 62\nChapter 21: Page Life Cycle\nExamples\nLife Cycle Events\nFollowing are the page life cycle events:\nPreInit - PreInit is the first event in page life cycle. It checks the IsPostBack property and\ndetermines whether the page is a postback. It sets the themes and master pages, creates\ndynamic controls, and gets and sets profile property values. This event can be handled by\noverriding the OnPreInit method or creating a Page_PreInit handler.\nInit - Init event initializes the control property and the control tree is built. This event can be\nhandled by overriding the OnInit method or creating a Page_Init handler.\nInitComplete - InitComplete event allows tracking of view state. All the controls turn on view-state\ntracking.\nLoadViewState - LoadViewState event allows loading view state information into the controls.\nLoadPostData - During this phase, the contents of all the input fields are defined with the tag are\nprocessed.\nPreLoad - PreLoad occurs before the post back data is loaded in the controls. This event can be\nhandled by overriding the OnPreLoad method or creating a Page_PreLoad handler.\nLoad - The Load event is raised for the page first and then recursively for all child controls. The\ncontrols in the control tree are created. This event can be handled by overriding the OnLoad\nmethod or creating a Page_Load handler.\nLoadComplete - The loading process is completed, control event handlers are run, and page\nvalidation takes place. This event can be handled by overriding the OnLoadComplete method or\ncreating a Page_LoadComplete handler\nPreRender - The PreRender event occurs just before the output is rendered. By handling this\nevent, pages and controls can perform any updates before the output is rendered.\nPreRenderComplete - As the PreRender event is recursively fired for all child controls, this event\nensures the completion of the pre-rendering phase.\nSaveStateComplete - State of control on the page is saved. Personalization, control state and\nview state information is saved. The HTML markup is generated. This stage can be handled by\noverriding the Render method or creating a Page_Render handler.\nUnLoad - The UnLoad phase is the last phase of the page life cycle. It raises the UnLoad event\nfor all controls recursively and lastly for the page itself. Final cleanup is done and all resources and\nhttps://riptutorial.com/ 63\nreferences, such as database connections, are freed. This event can be handled by overriding the\nOnUnLoad method or creating a Page_UnLoad handler.\nCode Example\nusing System;\nnamespace myProject\n{\npublic partial class WebForm1 : System.Web.UI.Page\n{\npublic string PageSteps = string.Empty;\n//Raised after the start stage is complete and before the initialization stage begins.\nprotected void Page_PreInit(object sender, EventArgs e)\n{\nPageSteps += \"1 - Page_PreInit<br>\";\n//Access to page Controls not available in this step\n//Label1.Text = \"Step 1\";\n}\n//Raised after all controls have been initialized and any skin settings have been\napplied.\n//The Init event of individual controls occurs before the Init event of the page.\nprotected void Page_Init(object sender, EventArgs e)\n{\nPageSteps += \"2 - Page_Init<br>\";\nLabel1.Text = \"Step 2\";\n}\n//Raised at the end of the page's initialization stage.\n//Only one operation takes place between the Init and InitComplete events: tracking of\nview state changes is turned on.\n//View state tracking enables controls to persist any values that are programmatically\nadded to the ViewState collection.\n//Until view state tracking is turned on, any values added to view state are lost\nacross postbacks.\n//Controls typically turn on view state tracking immediately after they raise their\nInit event.\nprotected void Page_InitComplete(object sender, EventArgs e)\n{\nPageSteps += \"3 - Page_InitComplete<br>\";\nLabel1.Text = \"Step 3\";\n}\n//Raised after the page loads view state for itself and all controls, and after it\nprocesses postback data that is included with the Request instance.\nprotected override void OnPreLoad(EventArgs e)\n{\nPageSteps += \"4 - OnPreLoad<br>\";\nLabel1.Text = \"Step 4\";\n}\n//The Page object calls the OnLoad method on the Page object, and then recursively\ndoes the same for each child control until the page and all controls are loaded.\nhttps://riptutorial.com/ 64\n//The Load event of individual controls occurs after the Load event of the page.\nprotected void Page_Load(object sender, EventArgs e)\n{\nPageSteps += \"5 - Page_Load<br>\";\nLabel1.Text = \"Step 5\";\n}\n//Use these events to handle specific control events, such as a Button control's Click\nevent or a TextBox control's TextChanged event.\nprotected void btnSubmit_Click(object sender, EventArgs e)\n{\n//Step only visible on PostBack\nPageSteps += \"6 - btnSubmit_Click<br>\";\nLabel1.Text = \"Step 6\";\n}\n//Raised at the end of the event-handling stage.\nprotected void Page_LoadComplete(object sender, EventArgs e)\n{\nPageSteps += \"7 - Page_LoadComplete<br>\";\nLabel1.Text = \"Step 7\";\n}\n//Raised after the Page object has created all controls that are required in order to\nrender the page, including child controls of composite controls.\n//(To do this, the Page object calls EnsureChildControls for each control and for the\npage.)\nprotected override void OnPreRender(EventArgs e)\n{\nPageSteps += \"8 - OnPreRender<br>\";\nLabel1.Text = \"Step 8\";\n}\n//Raised after each data bound control whose DataSourceID property is set calls its\nDataBind method.\nprotected override void OnPreRenderComplete(EventArgs e)\n{\nPageSteps += \"9 - OnPreRenderComplete<br>\";\nLabel1.Text = \"Step 9\";\n}\n//Raised after view state and control state have been saved for the page and for all\ncontrols.\n//Any changes to the page or controls at this point affect rendering, but the changes\nwill not be retrieved on the next postback.\nprotected override void OnSaveStateComplete(EventArgs e)\n{\nPageSteps += \"10 - OnSaveStateComplete<br><hr><br>\";\nLabel1.Text = \"Step 10\";\n}\n// Render\n//This is not an event; instead, at this stage of processing, the Page object calls\nthis method on each control.\nhttps://riptutorial.com/ 65\n//All ASP.NET Web server controls have a Render method that writes out the control's\nmarkup to send to the browser.\n//Raised for each control and then for the page.\n//Controls use this event to do final cleanup for specific controls, such as closing\ncontrol-specific database connections\nprotected void Page_UnLoad(object sender, EventArgs e)\n{\n//This last PageSteps addition will not be visible on the page\nPageSteps += \"11 - Page_UnLoad<br>\";\n//Access to page Controls not available in this step\n//Label1.Text = \"Step 11\";\n}\n}\n}\nAdd the following code to the .aspx page to visualize the Steps in the Life Cycle.\n<b>Page Life Cycle Visualization:</b>\n<br />\n<%= PageSteps %>\nMore information\n\u2022 https://msdn.microsoft.com/en-us/library/ms178472.aspx\n\u2022 https://www.tutorialspoint.com/asp.net/asp.net_life_cycle.htm\n\u2022 http://www.c-sharpcorner.com/UploadFile/8911c4/page-life-cycle-with-examples-in-Asp-Net/\n\u2022 https://www.codeproject.com/Articles/667308/ASP-NET-Page-Life-Cycle-Events\nhttps://riptutorial.com/ 66\nRead Page Life Cycle online: https://riptutorial.com/asp-net/topic/4948/page-life-cycle\nhttps://riptutorial.com/ 67\nChapter 22: Page Methods\nParameters\nParameter Detail\nThe parameter of the C# method. You supply the argument via the Page\nlimit\nMethod.\nThe JavaScript function that is executed when the Page Method call is\nonSuccess\nsuccessful.\nThe JavaScript function that is executed when there is an error in the Page\nonError\nMethod call.\nRemarks\nMore than one parameter\nIn the example the C# function just request one parameter, if you need to pass more than one you\ncan do it, just put them in order in your JS call and you are good to go. Ej.\n//C#\npublic static int SumValues(int num1, int num2, int num3, ..., int numN)\n//JS\nPageMethods.SumValues(num1, num2, num3, ..., numN, onSuccess, onError);\nReturn value\nIn the onSuccess function the result is going to be the C# function's return value. In the onError\nfunction the result is going to be the error.\nExamples\nHow to call it\nJust add the using at the beginning and the [WebMethod] decorator to the static method to be called\nin the aspx page:\nusing System.Web.Services;\nhttps://riptutorial.com/ 68\npublic partial class MyPage : System.Web.UI.Page\n{\n[WebMethod]\npublic static int GetRandomNumberLessThan(int limit)\n{\nvar r = new Random();\nreturn r.Next(limit);\n}\n}\nIn your .aspx file add a asp:ScriptManager enabling Page Methods:\n<asp:ScriptManager ID=\"ScriptManager1\" runat=\"server\" EnablePageMethods=\"true\">\n</asp:ScriptManager>\nThen you can call it from JS like this:\nvar limit= 42 // your parameter value\nPageMethods.GetRandomNumberLessThan(limit, onSuccess, onError);\nfunction onSuccess(result) {\nvar randomNumber = result;\n// use randomNumber...\n}\nfunction onError(result) {\nalert('Error: ' + result);\n}\nRead Page Methods online: https://riptutorial.com/asp-net/topic/1411/page-methods\nhttps://riptutorial.com/ 69\nChapter 23: Repeater\nExamples\nBasic usage\nThis example creates a simple 1-column repeater that displays a list of numbers, one per repeater\nitem.\nMarkup:\n<asp:Repeater ID=\"Repeater1\" runat=\"server\">\n<ItemTemplate>\n<%# Container.DataItem.ToString() %>\n</ItemTemplate>\n</Repeater>\nCode behind:\nprotected void Page_Load(object sender, EventArgs e)\n{\nList<int> numbers = new List<int>{1, 2, 3, 4, 5};\nRepeater1.DataSource = numbers;\nRepeater1.DataBind();\n}\nRead Repeater online: https://riptutorial.com/asp-net/topic/2635/repeater\nhttps://riptutorial.com/ 70\nChapter 24: ScriptManager\nIntroduction\nScriptManager control registers the script for the Microsoft AJAX Library with the page. This\nenables client script support features such as partial-page rendering and Web-service calls.\nSyntax\n1. <asp:ScriptManager ID=\"smPop\" runat=\"server\"></asp:ScriptManager>\n2. ScriptManager.RegisterStartupScript(Control,Type,String,String,Boolean);\nExamples\nWorking with ScriptManager\nYou must use a ScriptManager control on a page to enable the following features of ASP.NET\nAJAX:\n1. Client-script functionality of the Microsoft AJAX Library, and any custom script that you want to\nsend to the browser.\nprotected void Button1_Click(object sender, EventArgs e)\n{\nPage.ClientScript.RegisterStartupScript(\nthis.GetType(),\"myscript\",\"alert('hello world!');\");\n}\n2. Partial-page rendering, which enables regions on the page to be independently refreshed\nwithout a postback. The ASP.NET AJAX UpdatePanel, UpdateProgress, and Timer controls\nrequire a ScriptManager control to support partial-page rendering.\n3. JavaScript proxy classes for Web services, which enable you to use client script to access Web\nservices by exposing Web services as strongly typed objects.\n[WebMethod]\npublic int Add(int a, int b) { return a + b; }\nfunction CallAdd()\n{\n// method will return immediately\n// processing done asynchronously\nWebService.Add(0,6, OnMethodSucceeded, OnMethodFailed);\n}\n4. JavaScript classes to access ASP.NET authentication and profile application services.\nhttps://riptutorial.com/ 71\nSys.Services.AuthenticationService.login\nSys.Services.AuthenticationService.logout\n<script type=\"text/javascript\">\nfunction MyMethod(username, password)\n{\nSys.Services.AuthenticationService.login(username,\npassword,false,null,null,null,null,\"User Context\");\n}\n</script>\nSee more at https://msdn.microsoft.com/en-us/library/system.web.ui.scriptmanager.aspx\nRead ScriptManager online: https://riptutorial.com/asp-net/topic/10077/scriptmanager\nhttps://riptutorial.com/ 72\nChapter 25: Session Managment\nExamples\nAdvantage and Disadvantage of Session State, types of session\nThe advantages of using Session State are\n1)Better security\n2)Reduced bandwidth\nThe disadvantages of using Session state are\n1)More resource consumption of server.\n2)Extra code/care if a Web farm is used(we will discuss this shortly)\n**Session State Modes**\n1) InProc mode, which stores session state in memory on the Web server. This is the\ndefault.\n2) StateServer mode, which stores session state in a separate process called the ASP.NET\nstate service. This ensures that session state is preserved if the Web application is\nrestarted and also makes session state available to multiple Web servers in a Web farm.\n3) SQLServer mode stores session state in a SQL Server database. This ensures that session\nstate is preserved if the Web application is restarted and also makes session state available\nto multiple Web servers in a Web farm.\n4) Custom mode, which enables you to specify a custom storage provider.\nOff mode, which disables session state.\nRead Session Managment online: https://riptutorial.com/asp-net/topic/4180/session-managment\nhttps://riptutorial.com/ 73\nChapter 26: Session State\nSyntax\n\u2022 Session[\"Session_Key\"] = Obj_Value;\nRemarks\nHTTP is stateless. ASP.NET session state is a framework that facilitates maintaining state\nbetween HTTP page requests.\nSession differs from the class level variables in its ability to remain available across post-backs\nand different pages. For instance, a session variable created in Page1.aspx will be available if the\nuser is redirected to Page2.aspx afterwards, within the same application.\nAlso, in contrast to static variables declared at the page level, the session variables are\nindependent for different users. Meaning, changing the value of one user's session variable will\nnot affect the value of the same variable for other users.\nWhile ViewState can be used to store user's data temporarily, it doesn't allow saving data across\nmultiple pages. In addition, the viewstate is part of the page and is sent to the client. As a result,\nany critical information related to the user cannot be saved in the ViewState, and that's where\nSession variables become useful.\nExamples\nUsing the Session object to store values\nThe System.Web.SessionState.HttpSessionState object provides a way to persist values between\nHTTP requests. In the example below, a user's preference for warnings is being saved in the\nsession. Later on, while serving another request to the user, the application can read this\npreference from session and hide the warnings.\npublic partial class Default : System.Web.UI.Page\n{\npublic void LoadPreferences(object sender, EventArgs args)\n{\n// ...\n// ... A DB operation that loads the user's preferences.\n// ...\n// Store a value with the key showWarnings\nHttpContext.Current.Session[\"showWarnings\"] = false;\n}\npublic void button2Clicked(object sender, EventArgs args)\n{\n// While processing another request, access this value.\nhttps://riptutorial.com/ 74\nbool showWarnings = (bool)HttpContext.Current.Session[\"showWarnings\"];\nlblWarnings.Visible = false;\n}\n}\nNote that the session variables are not common for all users (just like cookies), and they are\npersisted across multiple post-backs.\nThe session works by setting a cookie that contains an identifier for the users session. By default\nthis identifier is stored in the web-server memory, along with the values stored against it.\nHere is a screenshot of the cookie set in the user's browser to keep track of the session:\nUsing a SQL Session Store\nIf you find that you have multiple servers that need to share session state, storing it in the\nASP.NET process memory will not work. For example you may deploy into a web-farm\nenvironment with a load balancer that distributes requests in a round-robin fashion. In this\nenvironment a single user's requests could be served by multiple servers.\nIn the web.config file you can configure a SQL server session store.\n<configuration>\n<system.web>\n<sessionState\nmode=\"SQLServer\"\nsqlConnectionString=\"Data Source=localhost;Integrated Security=SSPI\"\ncookieless=\"true\"\ntimeout=\"30\" />\n</system.web>\n</configuration>\nTo create the sql schema use the aspnet_regsql tool. [SampleSqlServerName] is the hostname of\nthe SQL server. -ssadd tells the tool to create the session state database. -sstype p tells the tool to\ncreate a new database with the default name ASPState.\naspnet_regsql.exe -S [SampleSqlServerName] -U [Username] -P [Password] -ssadd -sstype p\nUsing an Amazon DynamoDB Session Store\nIf you don't want to use SQL server you can use Amazon's hosted Dynamo DB nosql database as\na session store.\nYou'll need the AWS SDK. To install this from the Visual Studio nuget package manager console\nuse the following command\nhttps://riptutorial.com/ 75\nInstall-Package AWSSDK\nYou can then configure your sessionState provider to use a custom provider. You must specify the\nregion and credentials, either a profile or an IAM access and secret key combination. By default\nthis will create a table named ASP.NET_SessionState.\n<configuration>\n<system.web>\n<sessionState\ntimeout=\"20\"\nmode=\"Custom\"\ncustomProvider=\"DynamoDBSessionStoreProvider\">\n<providers>\n<add name=\"DynamoDBSessionStoreProvider\"\ntype=\"Amazon.SessionProvider.DynamoDBSessionStateStore\"\nAWSProfileName=\"[PROFILE]\"\nRegion=\"[REGION]\"\nCreateIfNotExist=\"true\"\n/>\n</providers>\n</sessionState>\n</system.web>\n</configuration>\nRead Session State online: https://riptutorial.com/asp-net/topic/3864/session-state\nhttps://riptutorial.com/ 76\nChapter 27: UpdatePanel\nIntroduction\nThis topic describes how to add partial-page update support to a Web page by using two Microsoft\nAjax server controls: the ScriptManager control and the UpdatePanel control. These controls\nremove the requirement to refresh the whole page with each postback, which improves the user\nexperience.\nSyntax\n\u2022 <asp:UpdatePanel ID=\"UpdatePanel1\" runat=\"server\">\n</asp:UpdatePanel>\nRemarks\nA ScriptManager must be added to page to make the UpdatePanel to work.\nExamples\nUpdate Panel Example\nStep 1: Add ScriptManager to your page\n<asp:ScriptManager ID=\"ScriptManager1\" runat=\"server\">\n</asp:ScriptManager>\nStep 2: Add UpdatePanel to your page just after ScriptManager.\n<asp:UpdatePanel ID=\"UpdatePanel1\" runat=\"server\">\n<ContentTemplate></ContentTemplate>\n</asp:UpdatePanel>\nStep 3: After adding content to your UpdatePanels Content Template your aspx page should look\nsomething like this:\n<%@ Page Language=\"C#\" %>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n<head runat=\"server\">\n<title>Untitled Page</title>\n<style type=\"text/css\">\n#UpdatePanel1 {\nwidth:300px; height:100px;\nhttps://riptutorial.com/ 77\n}\n</style>\n</head>\n<body>\n<form id=\"form1\" runat=\"server\">\n<div style=\"padding-top: 10px\">\n<asp:ScriptManager ID=\"ScriptManager1\" runat=\"server\">\n</asp:ScriptManager>\n<asp:UpdatePanel ID=\"UpdatePanel1\" runat=\"server\">\n<ContentTemplate>\n<fieldset>\n<legend>UpdatePanel</legend>\n<asp:Label ID=\"Label1\" runat=\"server\" Text=\"Panel created.\"></asp:Label><br />\n<asp:Button ID=\"Button1\" runat=\"server\" OnClick=\"Button1_Click\" Text=\"Button\"\n/>\n</fieldset>\n</ContentTemplate>\n</asp:UpdatePanel>\n<br />\n</div>\n</div>\n</form>\n</body>\n</html>\nStep 4: Add this part to your C# page:\nprotected void Button1_Click(object sender, EventArgs e)\n{\nLabel1.Text = \"Refreshed at \" +\nDateTime.Now.ToString();\n}\nStep 5: Now run your application.\nExpected Result:\nThe panel content changes every time that you click the button, but the whole page is not\nrefreshed. By default, the ChildrenAsTriggers property of an UpdatePanel control is true. When\nthis property is set to true, controls inside the panel participate in partial-page updates when any\ncontrol in the panel causes a postback.\nRead UpdatePanel online: https://riptutorial.com/asp-net/topic/10075/updatepanel\nhttps://riptutorial.com/ 78\nChapter 28: View State\nIntroduction\nView State is the method to preserve the Value of the Page and Controls between round trips. It is\na Page-Level State Management technique. View State is turned on by default and normally\nserializes the data in every control on the page regardless of whether it is actually used during a\npost-back.\nSyntax\n\u2022 ViewState[\"NameofViewstate\"] = \"Value\";\nExamples\nExample\nASPX\n<%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\"\n%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n<head runat=\"server\">\n<title>ViewState</title>\n</head>\n<body>\n<form id=\"form1\" runat=\"server\">\n<asp:TextBox runat=\"server\" id=\"NameField\" />\n<asp:Button runat=\"server\" id=\"SubmitForm\" onclick=\"SubmitForm_Click\" text=\"Submit\n& set name\" />\n<asp:Button runat=\"server\" id=\"RefreshPage\" text=\"Just submit\" />\n<br /><br />\nName retrieved from ViewState: <asp:Label runat=\"server\" id=\"NameLabel\" />\n</form>\n</body>\n</html>\nCode behind\nusing System;\nusing System.Data;\nusing System.Web;\npublic partial class _Default : System.Web.UI.Page\n{\nprotected void Page_Load(object sender, EventArgs e)\n{\nif(ViewState[\"NameOfUser\"] != null)\nhttps://riptutorial.com/ 79\nNameLabel.Text = ViewState[\"NameOfUser\"].ToString();\nelse\nNameLabel.Text = \"Not set yet...\";\n}\nprotected void SubmitForm_Click(object sender, EventArgs e)\n{\nViewState[\"NameOfUser\"] = NameField.Text;\nNameLabel.Text = NameField.Text;\n}\n}\nRead View State online: https://riptutorial.com/asp-net/topic/8234/view-state\nhttps://riptutorial.com/ 80\nChapter 29: web.config >\nsystem.webServer/httpErrors &\nsystem.web/customErrors sections\nIntroduction\nCustomErrors are a legacy (backwards compatable) element, used by Visual Studio Development\nServer (aka. VSDS or Cassini).\nhttpErrors are the new element which is only used by IIS7.\nExamples\nWhat is the difference between customErrors and httpErrors?\nBoth are used to define error handling for a website, but different software refers to\ndifferent config elements.\ncustomErrors are a legacy (backwards compatable) element, used by Visual Studio Development\nServer (aka. VSDS or Cassini).\nhttpErrors are the new element which is only used by IIS7.\nThis highlights the possible problem when developing ASP.NET websites while using VSDS\ninstead of the local IIS.\nAlso, refer to this post by myself about how to handle error messages with IIS7, if you wish to have\nfull control of the error output.\nSummary:\n1. Developing in VSDS - use customErrors\n2. Publishing the site to IIS6 - use customErrors\n3. Publishing the site to IIS7 - use httpErrors.\n4. and if you develop with VSDS but publish to IIS7, then i guess u'll need both.\nRead web.config > system.webServer/httpErrors & system.web/customErrors sections online:\nhttps://riptutorial.com/asp-net/topic/10103/web-config---system-webserver-httperrors---system-\nweb-customerrors-sections\nhttps://riptutorial.com/ 81\nChapter 30: WebForms\nSyntax\n\u2022 <asp:TextBox runat=\"server\" ID=\"\" TextMode=\"\" Text=\"\" />\n\u2022 <asp:Repeater runat=\"server\" ID=\"\" OnItemDataBound=\"\">\n<HeaderTemplate></HeaderTemplate>\n<ItemTemplate></ItemTemplate>\n<FooterTemplate></FooterTemplate>\n</asp:Repeater>\nRemarks\nAll ASP.Net WebForm controls require runat=\"server\" in order to communicate with the\nCodeBehind.\nExamples\nUsing a Repeater to create a HTML Table\nWhen the Repeater is Bound, for each item in the data, a new table row will be added.\n<asp:Repeater ID=\"repeaterID\" runat=\"server\" OnItemDataBound=\"repeaterID_ItemDataBound\">\n<HeaderTemplate>\n<table>\n<thead>\n<tr>\n<th style=\"width: 10%\">Column 1 Header</th>\n<th style=\"width: 30%\">Column 2 Header</th>\n<th style=\"width: 30%\">Column 3 Header</th>\n<th style=\"width: 30%\">Column 4 Header</th>\n</tr>\n</thead>\n</HeaderTemplate>\n<ItemTemplate>\n<tr runat=\"server\" id=\"rowID\">\n<td>\n<asp:Label runat=\"server\" ID=\"mylabel\">You can add ASP labels if you\nwant</asp:Label>\n</td>\n<td>\n<label>Or you can add HTML labels.</label>\n</td>\n<td>\nYou can also just type plain text like this.\n</td>\n<td>\n<button type=\"button\">You can even add a button to the table if you\nwant!</button>\n</td>\n</tr>\n</ItemTemplate>\nhttps://riptutorial.com/ 82\n<FooterTemplate>\n</table>\n</FooterTemplate>\n</asp:Repeater>\nThe ItemDataBound method is optional, yet useful for formatting or populating more complicated\ndata. In this example, the method is used to dynamically give each <tr> a unique ID. This ID can\nthen be use in JavaScript to access or modify a specific row. Note, the tr will not keep its dynamic\nID value on PostBack. The text of each row's <asp:Label> was also set in this method.\nprotected void repeaterID_ItemDataBound(object sender, RepeaterItemEventArgs e)\n{\nif (e.Item.ItemType == ListItemType.Item || e.Item.ItemType ==\nListItemType.AlternatingItem)\n{\nMyItem item = (MyItem)e.Item.DataItem;\nvar row = e.Item.FindControl(\"rowID\");\nrow.ClientIDMode = ClientIDMode.Static;\nrow.ID = \"rowID\" + item.ID;\nLabel mylabel = (Label)e.Item.FindControl(\"mylabel\");\nmylabel.Text = \"The item ID is: \" + item.ID;\n}\n}\nIf you plan on doing a lot of communication with the CodeBehind, you might want to consider\nusing GridView. Repeaters, however, in general have less overhead than GridView, and with basic\nID manipulation, can perform the same functions as GridView.\nGrouping in ListView\nasp:ListView introduced in ASP.NET WebForms framework 3.5 is the most flexible of all\nDataPresentation Controls in the framework. An example of Grouping using ListView (which will\ncome handy as an image gallery)\nObjective: To display three images in a row using asp:ListView\nMarkup\n<asp:ListView ID=\"SportsImageList\" runat=\"server\"\nGroupItemCount=\"3\">\n<LayoutTemplate>\n<span class=\"images-list\">\n<ul id=\"groupPlaceholder\" runat=\"server\"></ul>\n</span>\n</LayoutTemplate>\n<GroupTemplate>\n<ul>\n<li id=\"itemPlaceholder\" runat=\"server\"></li>\n</ul>\n</GroupTemplate>\n<ItemTemplate>\n<li>\nhttps://riptutorial.com/ 83\n<img src='<%# Container.DataItem %>' />\n</li>\n</ItemTemplate>\n</asp:ListView>\nCode Behind\nprotected void Page_Load(object sender, EventArgs e)\n{\nif(!IsPostBack)\n{\nSportsImageList.DataSource = GetImages();\nSportsImageList.DataBind();\n}\n}\nprivate static IEnumerable<string> GetImages()\n{\nvar images = Enumerable.Range(1, 9) //get numbers 1 to 9\n.Select(i =>\nstring.Format(\"http://lorempixel.com/100/100/sports/{0}/\", i)\n); //convert the numbers to string\nreturn images;\n}\nCSS\n.images-list ul{\nclear: both;\nlist-style-type: none;\n}\n.images-list ul li{\nfloat: left;\npadding: 5px;\n}\nRendered Output\nhttps://riptutorial.com/ 84\nExample\n<script language=\"VB\" runat=\"server\">\nSub SubmitBtn_Click(sender As Object, e As EventArgs)\nLabel1.Text = \"Text1.Text = \" & Text1.Text\nEnd Sub\n</script>\n<h3><font face=\"Verdana\">TextBox Sample</font></h3>\n<form runat=\"server\">\n<asp:TextBox id=\"Text1\" Text=\"Copy this text to the label\" Width=\"200px\" runat=\"server\"/>\n<asp:Button OnClick=\"SubmitBtn_Click\" Text=\"Copy Text to Label\" Runat=\"server\"/>\n<p>\n<asp:Label id=\"Label1\" Text=\"Label1\" runat=\"server\"/>\n</form>\nHyperlink\nThe HyperLink control is used to navigate from the client to another page.\n<html>\n<script language=\"VB\" runat=\"server\">\nSub Page_Load(sender As Object, e As EventArgs)\nhttps://riptutorial.com/ 85\n' Set hyperlink to \"~\", which indicates application root.\nHyperLink1.NavigateUrl = \"~\"\nEnd Sub\n</script>\n<body>\n<h3><font face=\"Verdana\">Simple asp:hyperlink Sample</font></h3>\n<form runat=server>\n<p>\n<asp:hyperlink id=HyperLink1 runat=\"server\">\nGo To QuickStart\n</asp:hyperlink>\n</form>\n</body>\n</html>\nRead WebForms online: https://riptutorial.com/asp-net/topic/5394/webforms\nhttps://riptutorial.com/ 86\nChapter 31: WebService without Visual\nStudio\nIntroduction\nA very basic ASP.Net example of the bare minimum of code to create a WebService.\nRemarks\nIn a separate StackOverflow Documentation post, we'll look at consuming this Calculator\nWebService.\nExamples\nCalculator WebService\n<%@ WebService Language=\"C#\" Class=\"Util\" %>\nusing System;\nusing System.Web.Services;\npublic class Util: WebService\n{\n[WebMethod]\npublic int CalculatorAdd(int operandA, int operandB)\n{\nreturn operandA + operandB;\n}\n[WebMethod]\npublic int CalculatorSubtract(int operandA, int operandB)\n{\nreturn operandA - operandB;\n}\n[WebMethod]\npublic long CalculatorMultiply(int operandA, int operandB)\n{\nreturn operandA * operandB;\n}\n[WebMethod]\npublic long CalculatorDivide(int operandNumerator, int operandDenominator)\n{\nif (operandDenominator == 0)\nreturn System.Int64.MaxValue; // Should really do better error handling overall\n& return an error\nelse\nreturn operandNumerator / operandDenominator;\n}\n}\nhttps://riptutorial.com/ 87\nRead WebService without Visual Studio online: https://riptutorial.com/asp-\nnet/topic/8859/webservice-without-visual-studio\nhttps://riptutorial.com/ 88\nCredits\nS.\nChapters Contributors\nNo\nAhmed Abdelhameed, Aristos, Community, demonplus,\nGetting started with\n1 Dillie-O, Josh E, khawarPK, Marco, Matt, Muhammad\nASP.NET\nAwais, Satinder singh, wintersolider\n2 Asp Web Forms Identity tatigo\n3 ASP.NET - Basic Controls khawarPK\n4 ASP.NET - Managing State khawarPK\n5 ASP.NET - User Controls Tetsuya Yamamoto\n6 ASP.NET - Validators khawarPK\n7 Asp.net Ajax Controls Saurabh Srivastava\n8 ASP.NET Caching tatigo\n9 Data Binding j.f., Ryan\n10 Data List Webruster\n11 DayPilot Scheduler Abdul\n12 Directives khawarPK, Tot Zam\n13 Event Delegation Webruster\n14 Event Handling khawarPK, Tot Zam\n15 Expressions Ryan\n16 Find Control by ID Andrei, VDWWD, Webruster\n17 GridView Andrei, Asif.Ali, j.f., Marco, Ritwik\n18 httpHandlers Taylor Brown\n19 Katana jignesh\n20 Middleware Marco\n21 Page Life Cycle Abdul, mbenegas, Srikar, VDWWD\nhttps://riptutorial.com/ 89\n22 Page Methods Enrique Zavaleta, wazz, XIII\n23 Repeater Andrei\n24 ScriptManager Naveen Gogineni\n25 Session Managment Jasmin Solanki\n26 Session State Luke Ryan, Naveen Gogineni, Nisarg Shah\n27 UpdatePanel Naveen Gogineni\n28 View State jignesh\nweb.config >\nsystem.webServer/httpErrors\n29 Naveen Gogineni\n& system.web/customErrors\nsections\n30 WebForms Big Fan, jignesh, naveen, Tot Zam\nWebService without Visual\n31 George 2.0 Hope\nStudio\nhttps://riptutorial.com/ 90\n",
  "context": "ASP.NET",
  "source_file": "resources\\Year 2\\ASP.net and MySQL\\asp.net documentation.pdf",
  "line_numbers": [
    2,
    2781
  ]
}