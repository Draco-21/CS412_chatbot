{
  "title": "mysql",
  "language": "cpp",
  "topics": [
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "at vi Access to Oracle Support for Accessibility",
  "code": "http://www.oracle.com/pls/topic/lookup?ctx=acc&id=docacc.\nAccess to Oracle Support for Accessibility\nOracle customers that have purchased support have access to electronic support through My Oracle\nSupport. For information, visit\nhttp://www.oracle.com/pls/topic/lookup?ctx=acc&id=info or visit http://www.oracle.com/pls/topic/\nlookup?ctx=acc&id=trs if you are hearing impaired.\nvii\nviii\nChapter 1 Tutorial\nThis chapter provides a tutorial introduction to MySQL by showing how to use the mysql client program\nto create and use a simple database. mysql (sometimes referred to as the \u201cterminal monitor\u201d or just\n\u201cmonitor\u201d) is an interactive program that enables you to connect to a MySQL server, run queries, and view\nthe results. mysql may also be used in batch mode: you place your queries in a file beforehand, then tell\nmysql to execute the contents of the file. Both ways of using mysql are covered here.\nTo see a list of options provided by mysql, invoke it with the --help option:\n$> mysql --help\nThis chapter assumes that mysql is installed on your machine and that a MySQL server is available to\nwhich you can connect. If this is not true, contact your MySQL administrator. (If you are the administrator,\nyou need to consult the relevant portions of this manual, such as MySQL Server Administration.)\nThis chapter describes the entire process of setting up and using a database. If you are interested only\nin accessing an existing database, you may want to skip the sections that describe how to create the\ndatabase and the tables it contains.\nBecause this chapter is tutorial in nature, many details are necessarily omitted. Consult the relevant\nsections of the manual for more information on the topics covered here.\n1\n2\nChapter 2 Connecting to and Disconnecting from the Server\nTo connect to the server, you usually need to provide a MySQL user name when you invoke mysql and,\nmost likely, a password. If the server runs on a machine other than the one where you log in, you also\nneed to specify a host name. Contact your administrator to find out what connection parameters you\nshould use to connect (that is, what host, user name, and password to use). Once you know the proper\nparameters, you should be able to connect like this:\n$> mysql -h host -u user -p\nEnter password: ********\nhost and user represent the host name where your MySQL server is running and the user name of your\nMySQL account. Substitute appropriate values for your setup. The ******** represents your password;\nenter it when mysql displays the Enter password: prompt.\nIf that works, you should see some introductory information followed by a mysql> prompt:\n$> mysql -h host -u user -p\nEnter password: ********\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 25338 to server version: 5.7.44-standard\nType 'help;' or '\\h' for help. Type '\\c' to clear the buffer.\nmysql>\nThe mysql> prompt tells you that mysql is ready for you to enter SQL statements.\nIf you are logging in on the same machine that MySQL is running on, you can omit the host, and simply\nuse the following:\n$> mysql -u user -p\nIf, when you attempt to log in, you get an error message such as ERROR 2002 (HY000): Can't\nconnect to local MySQL server through socket '/tmp/mysql.sock' (2), it means that\nthe MySQL server daemon (Unix) or service (Windows) is not running. Consult the administrator or see the\nsection of Installing and Upgrading MySQL that is appropriate to your operating system.\nFor help with other problems often encountered when trying to log in, see Common Errors When Using\nMySQL Programs.\nSome MySQL installations permit users to connect as the anonymous (unnamed) user to the server\nrunning on the local host. If this is the case on your machine, you should be able to connect to that server\nby invoking mysql without any options:\n$> mysql\nAfter you have connected successfully, you can disconnect any time by typing QUIT (or \\q) at the mysql>\nprompt:\nmysql> QUIT\nBye\nOn Unix, you can also disconnect by pressing Control+D.\nMost examples in the following sections assume that you are connected to the server. They indicate this by\nthe mysql> prompt.\n3\n4\nChapter 3 Entering Queries\nMake sure that you are connected to the server, as discussed in the previous section. Doing so does not in\nitself select any database to work with, but that is okay. At this point, it is more important to find out a little\nabout how to issue queries than to jump right in creating tables, loading data into them, and retrieving data\nfrom them. This section describes the basic principles of entering queries, using several queries you can\ntry out to familiarize yourself with how mysql works.\nHere is a simple query that asks the server to tell you its version number and the current date. Type it in as\nshown here following the mysql> prompt and press Enter:\nmysql> SELECT VERSION(), CURRENT_DATE;\n+--------------+--------------+\n| VERSION() | CURRENT_DATE |\n+--------------+--------------+\n| 5.7.1-m4-log | 2012-12-25 |\n+--------------+--------------+\n1 row in set (0.01 sec)\nmysql>\nThis query illustrates several things about mysql:\n\u2022 A query normally consists of an SQL statement followed by a semicolon. (There are some exceptions\nwhere a semicolon may be omitted. QUIT, mentioned earlier, is one of them. We'll get to others later.)\n\u2022 When you issue a query, mysql sends it to the server for execution and displays the results, then prints\nanother mysql> prompt to indicate that it is ready for another query.\n\u2022 mysql displays query output in tabular form (rows and columns). The first row contains labels for\nthe columns. The rows following are the query results. Normally, column labels are the names of the\ncolumns you fetch from database tables. If you're retrieving the value of an expression rather than a\ntable column (as in the example just shown), mysql labels the column using the expression itself.\n\u2022 mysql shows how many rows were returned and how long the query took to execute, which gives you\na rough idea of server performance. These values are imprecise because they represent wall clock time\n(not CPU or machine time), and because they are affected by factors such as server load and network\nlatency. (For brevity, the \u201crows in set\u201d line is sometimes not shown in the remaining examples in this\nchapter.)\nKeywords may be entered in any lettercase. The following queries are equivalent:\nmysql> SELECT VERSION(), CURRENT_DATE;\nmysql> select version(), current_date;\nmysql> SeLeCt vErSiOn(), current_DATE;\nHere is another query. It demonstrates that you can use mysql as a simple calculator:\nmysql> SELECT SIN(PI()/4), (4+1)*5;\n+------------------+---------+\n| SIN(PI()/4) | (4+1)*5 |\n+------------------+---------+\n| 0.70710678118655 | 25 |\n+------------------+---------+\n1 row in set (0.02 sec)\nThe queries shown thus far have been relatively short, single-line statements. You can even enter multiple\nstatements on a single line. Just end each one with a semicolon:\nmysql> SELECT VERSION(); SELECT NOW();\n+------------------+\n| VERSION() |\n5\n+------------------+\n| 5.7.10-ndb-7.5.1 |\n+------------------+\n1 row in set (0.00 sec)\n+---------------------+\n| NOW() |\n+---------------------+\n| 2016-01-29 18:02:55 |\n+---------------------+\n1 row in set (0.00 sec)\nA query need not be given all on a single line, so lengthy queries that require several lines are not a\nproblem. mysql determines where your statement ends by looking for the terminating semicolon, not by\nlooking for the end of the input line. (In other words, mysql accepts free-format input: it collects input lines\nbut does not execute them until it sees the semicolon.)\nHere is a simple multiple-line statement:\nmysql> SELECT\n-> USER()\n-> ,\n-> CURRENT_DATE;\n+---------------+--------------+\n| USER() | CURRENT_DATE |\n+---------------+--------------+\n| jon@localhost | 2010-08-06 |\n+---------------+--------------+\nIn this example, notice how the prompt changes from mysql> to -> after you enter the first line of a\nmultiple-line query. This is how mysql indicates that it has not yet seen a complete statement and is\nwaiting for the rest. The prompt is your friend, because it provides valuable feedback. If you use that\nfeedback, you can always be aware of what mysql is waiting for.\nIf you decide you do not want to execute a query that you are in the process of entering, cancel it by typing\n\\c:\nmysql> SELECT\n-> USER()\n-> \\c\nmysql>\nHere, too, notice the prompt. It switches back to mysql> after you type \\c, providing feedback to indicate\nthat mysql is ready for a new query.\nThe following table shows each of the prompts you may see and summarizes what they mean about the\nstate that mysql is in.\nPrompt Meaning\nmysql> Ready for new query\n-> Waiting for next line of multiple-line query\n'> Waiting for next line, waiting for completion of a\nstring that began with a single quote (')\n\"> Waiting for next line, waiting for completion of a\nstring that began with a double quote (\")\n`> Waiting for next line, waiting for completion of an\nidentifier that began with a backtick (`)\n/*> Waiting for next line, waiting for completion of a\ncomment that began with /*\n6\nMultiple-line statements commonly occur by accident when you intend to issue a query on a single line, but\nforget the terminating semicolon. In this case, mysql waits for more input:\nmysql> SELECT USER()\n->\nIf this happens to you (you think you've entered a statement but the only response is a -> prompt), most\nlikely mysql is waiting for the semicolon. If you don't notice what the prompt is telling you, you might sit\nthere for a while before realizing what you need to do. Enter a semicolon to complete the statement, and\nmysql executes it:\nmysql> SELECT USER()\n-> ;\n+---------------+\n| USER() |\n+---------------+\n| jon@localhost |\n+---------------+\nThe '> and \"> prompts occur during string collection (another way of saying that MySQL is waiting\nfor completion of a string). In MySQL, you can write strings surrounded by either ' or \" characters (for\nexample, 'hello' or \"goodbye\"), and mysql lets you enter strings that span multiple lines. When\nyou see a '> or \"> prompt, it means that you have entered a line containing a string that begins with a '\nor \" quote character, but have not yet entered the matching quote that terminates the string. This often\nindicates that you have inadvertently left out a quote character. For example:\nmysql> SELECT * FROM my_table WHERE name = 'Smith AND age < 30;\n'>\nIf you enter this SELECT statement, then press Enter and wait for the result, nothing happens. Instead\nof wondering why this query takes so long, notice the clue provided by the '> prompt. It tells you that\nmysql expects to see the rest of an unterminated string. (Do you see the error in the statement? The string\n'Smith is missing the second single quotation mark.)\nAt this point, what do you do? The simplest thing is to cancel the query. However, you cannot just type \\c\nin this case, because mysql interprets it as part of the string that it is collecting. Instead, enter the closing\nquote character (so mysql knows you've finished the string), then type \\c:\nmysql> SELECT * FROM my_table WHERE name = 'Smith AND age < 30;\n'> '\\c\nmysql>\nThe prompt changes back to mysql>, indicating that mysql is ready for a new query.\nThe `> prompt is similar to the '> and \"> prompts, but indicates that you have begun but not completed a\nbacktick-quoted identifier.\nIt is important to know what the '>, \">, and `> prompts signify, because if you mistakenly enter an\nunterminated string, any further lines you type appear to be ignored by mysql\u2014including a line containing\nQUIT. This can be quite confusing, especially if you do not know that you need to supply the terminating\nquote before you can cancel the current query.\nNote\nMultiline statements from this point on are written without the secondary (->\nor other) prompts, to make it easier to copy and paste the statements to try for\nyourself.\n7\n8\nChapter 4 Creating and Using a Database\nTable of Contents\n4.1 Creating and Selecting a Database ............................................................................................. 10\n4.2 Creating a Table ........................................................................................................................ 11\n4.3 Loading Data into a Table .......................................................................................................... 12\n4.4 Retrieving Information from a Table ............................................................................................. 13\n4.4.1 Selecting All Data ............................................................................................................ 13\n4.4.2 Selecting Particular Rows ................................................................................................. 14\n4.4.3 Selecting Particular Columns ............................................................................................ 15\n4.4.4 Sorting Rows ................................................................................................................... 16\n4.4.5 Date Calculations ............................................................................................................. 17\n4.4.6 Working with NULL Values ............................................................................................... 20\n4.4.7 Pattern Matching .............................................................................................................. 21\n4.4.8 Counting Rows ................................................................................................................ 23\n4.4.9 Using More Than one Table ............................................................................................. 25\nOnce you know how to enter SQL statements, you are ready to access a database.\nSuppose that you have several pets in your home (your menagerie) and you would like to keep track of\nvarious types of information about them. You can do so by creating tables to hold your data and loading\nthem with the desired information. Then you can answer different sorts of questions about your animals by\nretrieving data from the tables. This section shows you how to perform the following operations:\n\u2022 Create a database\n\u2022 Create a table\n\u2022 Load data into the table\n\u2022 Retrieve data from the table in various ways\n\u2022 Use multiple tables\nThe menagerie database is simple (deliberately), but it is not difficult to think of real-world situations\nin which a similar type of database might be used. For example, a database like this could be used by\na farmer to keep track of livestock, or by a veterinarian to keep track of patient records. A menagerie\ndistribution containing some of the queries and sample data used in the following sections can be\nobtained from the MySQL website. It is available in both compressed tar file and Zip formats at https://\ndev.mysql.com/doc/.\nUse the SHOW statement to find out what databases currently exist on the server:\nmysql> SHOW DATABASES;\n+----------+\n| Database |\n+----------+\n| mysql |\n| test |\n| tmp |\n+----------+\nThe mysql database describes user access privileges. The test database often is available as a\nworkspace for users to try things out.\n9\nCreating and Selecting a Database\nThe list of databases displayed by the statement may be different on your machine; SHOW DATABASES\ndoes not show databases that you have no privileges for if you do not have the SHOW DATABASES\nprivilege. See SHOW DATABASES Statement.\nIf the test database exists, try to access it:\nmysql> USE test\nDatabase changed\nUSE, like QUIT, does not require a semicolon. (You can terminate such statements with a semicolon if you\nlike; it does no harm.) The USE statement is special in another way, too: it must be given on a single line.\nYou can use the test database (if you have access to it) for the examples that follow, but anything you\ncreate in that database can be removed by anyone else with access to it. For this reason, you should\nprobably ask your MySQL administrator for permission to use a database of your own. Suppose that you\nwant to call yours menagerie. The administrator needs to execute a statement like this:\nmysql> GRANT ALL ON menagerie.* TO 'your_mysql_name'@'your_client_host';\nwhere your_mysql_name is the MySQL user name assigned to you and your_client_host is the host\nfrom which you connect to the server.\n4.1 Creating and Selecting a Database\nIf the administrator creates your database for you when setting up your permissions, you can begin using\nit. Otherwise, you need to create it yourself:\nmysql> CREATE DATABASE menagerie;\nUnder Unix, database names are case-sensitive (unlike SQL keywords), so you must always refer to\nyour database as menagerie, not as Menagerie, MENAGERIE, or some other variant. This is also true\nfor table names. (Under Windows, this restriction does not apply, although you must refer to databases\nand tables using the same lettercase throughout a given query. However, for a variety of reasons, the\nrecommended best practice is always to use the same lettercase that was used when the database was\ncreated.)\nNote\nIf you get an error such as ERROR 1044 (42000): Access denied for user\n'micah'@'localhost' to database 'menagerie' when attempting to\ncreate a database, this means that your user account does not have the necessary\nprivileges to do so. Discuss this with the administrator or see Access Control and\nAccount Management.\nCreating a database does not select it for use; you must do that explicitly. To make menagerie the current\ndatabase, use this statement:\nmysql> USE menagerie\nDatabase changed\nYour database needs to be created only once, but you must select it for use each time you begin a mysql\nsession. You can do this by issuing a USE statement as shown in the example. Alternatively, you can select\nthe database on the command line when you invoke mysql. Just specify its name after any connection\nparameters that you might need to provide. For example:\n$> mysql -h host -u user -p menagerie\nEnter password: ********\n10\nCreating a Table\nImportant\nmenagerie in the command just shown is not your password. If you want to supply\nyour password on the command line after the -p option, you must do so with no\nintervening space (for example, as -ppassword, not as -p password). However,\nputting your password on the command line is not recommended, because doing so\nexposes it to snooping by other users logged in on your machine.\nNote\nYou can see at any time which database is currently selected using SELECT\nDATABASE().\n4.2 Creating a Table\nCreating the database is the easy part, but at this point it is empty, as SHOW TABLES tells you:\nmysql> SHOW TABLES;\nEmpty set (0.00 sec)\nThe harder part is deciding what the structure of your database should be: what tables you need and what\ncolumns should be in each of them.\nYou want a table that contains a record for each of your pets. This can be called the pet table, and\nit should contain, as a bare minimum, each animal's name. Because the name by itself is not very\ninteresting, the table should contain other information. For example, if more than one person in your\nfamily keeps pets, you might want to list each animal's owner. You might also want to record some basic\ndescriptive information such as species and sex.\nHow about age? That might be of interest, but it is not a good thing to store in a database. Age changes\nas time passes, which means you'd have to update your records often. Instead, it is better to store a fixed\nvalue such as date of birth. Then, whenever you need age, you can calculate it as the difference between\nthe current date and the birth date. MySQL provides functions for doing date arithmetic, so this is not\ndifficult. Storing birth date rather than age has other advantages, too:\n\u2022 You can use the database for tasks such as generating reminders for upcoming pet birthdays. (If you\nthink this type of query is somewhat silly, note that it is the same question you might ask in the context\nof a business database to identify clients to whom you need to send out birthday greetings in the current\nweek or month, for that computer-assisted personal touch.)\n\u2022 You can calculate age in relation to dates other than the current date. For example, if you store death\ndate in the database, you can easily calculate how old a pet was when it died.\nYou can probably think of other types of information that would be useful in the pet table, but the ones\nidentified so far are sufficient: name, owner, species, sex, birth, and death.\nUse a CREATE TABLE statement to specify the layout of your table:\nmysql> CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),\nspecies VARCHAR(20), sex CHAR(1), birth DATE, death DATE);\nVARCHAR is a good choice for the name, owner, and species columns because the column values vary\nin length. The lengths in those column definitions need not all be the same, and need not be 20. You can\nnormally pick any length from 1 to 65535, whatever seems most reasonable to you. If you make a poor\nchoice and it turns out later that you need a longer field, MySQL provides an ALTER TABLE statement.\nSeveral types of values can be chosen to represent sex in animal records, such as 'm' and 'f', or\nperhaps 'male' and 'female'. It is simplest to use the single characters 'm' and 'f'.\n11\nLoading Data into a Table\nThe use of the DATE data type for the birth and death columns is a fairly obvious choice.\nOnce you have created a table, SHOW TABLES should produce some output:\nmysql> SHOW TABLES;\n+---------------------+\n| Tables in menagerie |\n+---------------------+\n| pet |\n+---------------------+\nTo verify that your table was created the way you expected, use a DESCRIBE statement:\nmysql> DESCRIBE pet;\n+---------+-------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| name | varchar(20) | YES | | NULL | |\n| owner | varchar(20) | YES | | NULL | |\n| species | varchar(20) | YES | | NULL | |\n| sex | char(1) | YES | | NULL | |\n| birth | date | YES | | NULL | |\n| death | date | YES | | NULL | |\n+---------+-------------+------+-----+---------+-------+\nYou can use DESCRIBE any time, for example, if you forget the names of the columns in your table or what\ntypes they have.\nFor more information about MySQL data types, see Data Types.\n4.3 Loading Data into a Table\nAfter creating your table, you need to populate it. The LOAD DATA and INSERT statements are useful for\nthis.\nSuppose that your pet records can be described as shown here. (Observe that MySQL expects dates in\n'YYYY-MM-DD' format; this may differ from what you are used to.)\nname owner species sex birth death\nFluffy Harold cat f 1993-02-04\nClaws Gwen cat m 1994-03-17\nBuffy Harold dog f 1989-05-13\nFang Benny dog m 1990-08-27\nBowser Diane dog m 1979-08-31 1995-07-29\nChirpy Gwen bird f 1998-09-11\nWhistler Gwen bird 1997-12-09\nSlim Benny snake m 1996-04-29\nBecause you are beginning with an empty table, an easy way to populate it is to create a text file\ncontaining a row for each of your animals, then load the contents of the file into the table with a single\nstatement.\nYou could create a text file pet.txt containing one record per line, with values separated by tabs, and\ngiven in the order in which the columns were listed in the CREATE TABLE statement. For missing values\n(such as unknown sexes or death dates for animals that are still living), you can use NULL values. To\n12\nRetrieving Information from a Table\nrepresent these in your text file, use \\N (backslash, capital-N). For example, the record for Whistler the bird\nwould look like this (where the whitespace between values is a single tab character):\nWhistler Gwen bird \\N 1997-12-09 \\N\nTo load the text file pet.txt into the pet table, use this statement:\nmysql> LOAD DATA LOCAL INFILE '/path/pet.txt' INTO TABLE pet;\nIf you created the file on Windows with an editor that uses \\r\\n as a line terminator, you should use this\nstatement instead:\nmysql> LOAD DATA LOCAL INFILE '/path/pet.txt' INTO TABLE pet\nLINES TERMINATED BY '\\r\\n';\n(On an Apple machine running macOS, you would likely want to use LINES TERMINATED BY '\\r'.)\nYou can specify the column value separator and end of line marker explicitly in the LOAD DATA statement\nif you wish, but the defaults are tab and linefeed. These are sufficient for the statement to read the file\npet.txt properly.\nIf the statement fails, it is likely that your MySQL installation does not have local file capability enabled by\ndefault. See Security Considerations for LOAD DATA LOCAL, for information on how to change this.\nWhen you want to add new records one at a time, the INSERT statement is useful. In its simplest form,\nyou supply values for each column, in the order in which the columns were listed in the CREATE TABLE\nstatement. Suppose that Diane gets a new hamster named \u201cPuffball.\u201d You could add a new record using\nan INSERT statement like this:\nmysql> INSERT INTO pet\nVALUES ('Puffball','Diane','hamster','f','1999-03-30',NULL);\nString and date values are specified as quoted strings here. Also, with INSERT, you can insert NULL\ndirectly to represent a missing value. You do not use \\N like you do with LOAD DATA.\nFrom this example, you should be able to see that there would be a lot more typing involved to load your\nrecords initially using several INSERT statements rather than a single LOAD DATA statement.\n4.4 Retrieving Information from a Table\nThe SELECT statement is used to pull information from a table. The general form of the statement is:\nSELECT what_to_select\nFROM which_table\nWHERE conditions_to_satisfy;\nwhat_to_select indicates what you want to see. This can be a list of columns, or * to indicate \u201call\ncolumns.\u201d which_table indicates the table from which you want to retrieve data. The WHERE clause\nis optional. If it is present, conditions_to_satisfy specifies one or more conditions that rows must\nsatisfy to qualify for retrieval.\n4.4.1 Selecting All Data\nThe simplest form of SELECT retrieves everything from a table:\nmysql> SELECT * FROM pet;\n+----------+--------+---------+------+------------+------------+\n| name | owner | species | sex | birth | death |\n13\nSelecting Particular Rows\n+----------+--------+---------+------+------------+------------+\n| Fluffy | Harold | cat | f | 1993-02-04 | NULL |\n| Claws | Gwen | cat | m | 1994-03-17 | NULL |\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n| Fang | Benny | dog | m | 1990-08-27 | NULL |\n| Bowser | Diane | dog | m | 1979-08-31 | 1995-07-29 |\n| Chirpy | Gwen | bird | f | 1998-09-11 | NULL |\n| Whistler | Gwen | bird | NULL | 1997-12-09 | NULL |\n| Slim | Benny | snake | m | 1996-04-29 | NULL |\n| Puffball | Diane | hamster | f | 1999-03-30 | NULL |\n+----------+--------+---------+------+------------+------------+\nThis form of SELECT uses *, which is shorthand for \u201cselect all columns.\u201d This is useful if you want to review\nyour entire table, for example, after you've just loaded it with your initial data set. For example, you may\nhappen to think that the birth date for Bowser does not seem quite right. Consulting your original pedigree\npapers, you find that the correct birth year should be 1989, not 1979.\nThere are at least two ways to fix this:\n\u2022 Edit the file pet.txt to correct the error, then empty the table and reload it using DELETE and LOAD\nDATA:\nmysql> DELETE FROM pet;\nmysql> LOAD DATA LOCAL INFILE '/path/pet.txt' INTO TABLE pet;\nHowever, if you do this, you must also re-enter the record for Puffball.\n\u2022 Fix only the erroneous record with an UPDATE statement:\nmysql> UPDATE pet SET birth = '1989-08-31' WHERE name = 'Bowser';\nThe UPDATE changes only the record in question and does not require you to reload the table.\n4.4.2 Selecting Particular Rows\nAs shown in the preceding section, it is easy to retrieve an entire table. Just omit the WHERE clause from\nthe SELECT statement. But typically you don't want to see the entire table, particularly when it becomes\nlarge. Instead, you're usually more interested in answering a particular question, in which case you specify\nsome constraints on the information you want. Let's look at some selection queries in terms of questions\nabout your pets that they answer.\nYou can select only particular rows from your table. For example, if you want to verify the change that you\nmade to Bowser's birth date, select Bowser's record like this:\nmysql> SELECT * FROM pet WHERE name = 'Bowser';\n+--------+-------+---------+------+------------+------------+\n| name | owner | species | sex | birth | death |\n+--------+-------+---------+------+------------+------------+\n| Bowser | Diane | dog | m | 1989-08-31 | 1995-07-29 |\n+--------+-------+---------+------+------------+------------+\nThe output confirms that the year is correctly recorded as 1989, not 1979.\nString comparisons normally are case-insensitive, so you can specify the name as 'bowser', 'BOWSER',\nand so forth. The query result is the same.\nYou can specify conditions on any column, not just name. For example, if you want to know which animals\nwere born during or after 1998, test the birth column:\nmysql> SELECT * FROM pet WHERE birth >= '1998-1-1';\n+----------+-------+---------+------+------------+-------+\n14\nSelecting Particular Columns\n| name | owner | species | sex | birth | death |\n+----------+-------+---------+------+------------+-------+\n| Chirpy | Gwen | bird | f | 1998-09-11 | NULL |\n| Puffball | Diane | hamster | f | 1999-03-30 | NULL |\n+----------+-------+---------+------+------------+-------+\nYou can combine conditions, for example, to locate female dogs:\nmysql> SELECT * FROM pet WHERE species = 'dog' AND sex = 'f';\n+-------+--------+---------+------+------------+-------+\n| name | owner | species | sex | birth | death |\n+-------+--------+---------+------+------------+-------+\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n+-------+--------+---------+------+------------+-------+\nThe preceding query uses the AND logical operator. There is also an OR operator:\nmysql> SELECT * FROM pet WHERE species = 'snake' OR species = 'bird';\n+----------+-------+---------+------+------------+-------+\n| name | owner | species | sex | birth | death |\n+----------+-------+---------+------+------------+-------+\n| Chirpy | Gwen | bird | f | 1998-09-11 | NULL |\n| Whistler | Gwen | bird | NULL | 1997-12-09 | NULL |\n| Slim | Benny | snake | m | 1996-04-29 | NULL |\n+----------+-------+---------+------+------------+-------+\nAND and OR may be intermixed, although AND has higher precedence than OR. If you use both operators, it\nis a good idea to use parentheses to indicate explicitly how conditions should be grouped:\nmysql> SELECT * FROM pet WHERE (species = 'cat' AND sex = 'm')\nOR (species = 'dog' AND sex = 'f');\n+-------+--------+---------+------+------------+-------+\n| name | owner | species | sex | birth | death |\n+-------+--------+---------+------+------------+-------+\n| Claws | Gwen | cat | m | 1994-03-17 | NULL |\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n+-------+--------+---------+------+------------+-------+\n4.4.3 Selecting Particular Columns\nIf you do not want to see entire rows from your table, just name the columns in which you are interested,\nseparated by commas. For example, if you want to know when your animals were born, select the name\nand birth columns:\nmysql> SELECT name, birth FROM pet;\n+----------+------------+\n| name | birth |\n+----------+------------+\n| Fluffy | 1993-02-04 |\n| Claws | 1994-03-17 |\n| Buffy | 1989-05-13 |\n| Fang | 1990-08-27 |\n| Bowser | 1989-08-31 |\n| Chirpy | 1998-09-11 |\n| Whistler | 1997-12-09 |\n| Slim | 1996-04-29 |\n| Puffball | 1999-03-30 |\n+----------+------------+\nTo find out who owns pets, use this query:\nmysql> SELECT owner FROM pet;\n+--------+\n| owner |\n15\nSorting Rows\n+--------+\n| Harold |\n| Gwen |\n| Harold |\n| Benny |\n| Diane |\n| Gwen |\n| Gwen |\n| Benny |\n| Diane |\n+--------+\nNotice that the query simply retrieves the owner column from each record, and some of them appear more\nthan once. To minimize the output, retrieve each unique output record just once by adding the keyword\nDISTINCT:\nmysql> SELECT DISTINCT owner FROM pet;\n+--------+\n| owner |\n+--------+\n| Benny |\n| Diane |\n| Gwen |\n| Harold |\n+--------+\nYou can use a WHERE clause to combine row selection with column selection. For example, to get birth\ndates for dogs and cats only, use this query:\nmysql> SELECT name, species, birth FROM pet\nWHERE species = 'dog' OR species = 'cat';\n+--------+---------+------------+\n| name | species | birth |\n+--------+---------+------------+\n| Fluffy | cat | 1993-02-04 |\n| Claws | cat | 1994-03-17 |\n| Buffy | dog | 1989-05-13 |\n| Fang | dog | 1990-08-27 |\n| Bowser | dog | 1989-08-31 |\n+--------+---------+------------+\n4.4.4 Sorting Rows\nYou may have noticed in the preceding examples that the result rows are displayed in no particular order. It\nis often easier to examine query output when the rows are sorted in some meaningful way. To sort a result,\nuse an ORDER BY clause.\nHere are animal birthdays, sorted by date:\nmysql> SELECT name, birth FROM pet ORDER BY birth;\n+----------+------------+\n| name | birth |\n+----------+------------+\n| Buffy | 1989-05-13 |\n| Bowser | 1989-08-31 |\n| Fang | 1990-08-27 |\n| Fluffy | 1993-02-04 |\n| Claws | 1994-03-17 |\n| Slim | 1996-04-29 |\n| Whistler | 1997-12-09 |\n| Chirpy | 1998-09-11 |\n| Puffball | 1999-03-30 |\n+----------+------------+\n16\nDate Calculations\nOn character type columns, sorting\u2014like all other comparison operations\u2014is normally performed in a\ncase-insensitive fashion. This means that the order is undefined for columns that are identical except for\ntheir case. You can force a case-sensitive sort for a column by using BINARY like so: ORDER BY BINARY\ncol_name.\nThe default sort order is ascending, with smallest values first. To sort in reverse (descending) order, add\nthe DESC keyword to the name of the column you are sorting by:\nmysql> SELECT name, birth FROM pet ORDER BY birth DESC;\n+----------+------------+\n| name | birth |\n+----------+------------+\n| Puffball | 1999-03-30 |\n| Chirpy | 1998-09-11 |\n| Whistler | 1997-12-09 |\n| Slim | 1996-04-29 |\n| Claws | 1994-03-17 |\n| Fluffy | 1993-02-04 |\n| Fang | 1990-08-27 |\n| Bowser | 1989-08-31 |\n| Buffy | 1989-05-13 |\n+----------+------------+\nYou can sort on multiple columns, and you can sort different columns in different directions. For example,\nto sort by type of animal in ascending order, then by birth date within animal type in descending order\n(youngest animals first), use the following query:\nmysql> SELECT name, species, birth FROM pet\nORDER BY species, birth DESC;\n+----------+---------+------------+\n| name | species | birth |\n+----------+---------+------------+\n| Chirpy | bird | 1998-09-11 |\n| Whistler | bird | 1997-12-09 |\n| Claws | cat | 1994-03-17 |\n| Fluffy | cat | 1993-02-04 |\n| Fang | dog | 1990-08-27 |\n| Bowser | dog | 1989-08-31 |\n| Buffy | dog | 1989-05-13 |\n| Puffball | hamster | 1999-03-30 |\n| Slim | snake | 1996-04-29 |\n+----------+---------+------------+\nThe DESC keyword applies only to the column name immediately preceding it (birth); it does not affect\nthe species column sort order.\n4.4.5 Date Calculations\nMySQL provides several functions that you can use to perform calculations on dates, for example, to\ncalculate ages or extract parts of dates.\nTo determine how many years old each of your pets is, use the TIMESTAMPDIFF() function. Its\narguments are the unit in which you want the result expressed, and the two dates for which to take the\ndifference. The following query shows, for each pet, the birth date, the current date, and the age in years.\nAn alias (age) is used to make the final output column label more meaningful.\nmysql> SELECT name, birth, CURDATE(),\nTIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age\nFROM pet;\n+----------+------------+------------+------+\n| name | birth | CURDATE() | age |\n+----------+------------+------------+------+\n| Fluffy | 1993-02-04 | 2003-08-19 | 10 |\n17\nDate Calculations\n| Claws | 1994-03-17 | 2003-08-19 | 9 |\n| Buffy | 1989-05-13 | 2003-08-19 | 14 |\n| Fang | 1990-08-27 | 2003-08-19 | 12 |\n| Bowser | 1989-08-31 | 2003-08-19 | 13 |\n| Chirpy | 1998-09-11 | 2003-08-19 | 4 |\n| Whistler | 1997-12-09 | 2003-08-19 | 5 |\n| Slim | 1996-04-29 | 2003-08-19 | 7 |\n| Puffball | 1999-03-30 | 2003-08-19 | 4 |\n+----------+------------+------------+------+\nThe query works, but the result could be scanned more easily if the rows were presented in some order.\nThis can be done by adding an ORDER BY name clause to sort the output by name:\nmysql> SELECT name, birth, CURDATE(),\nTIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age\nFROM pet ORDER BY name;\n+----------+------------+------------+------+\n| name | birth | CURDATE() | age |\n+----------+------------+------------+------+\n| Bowser | 1989-08-31 | 2003-08-19 | 13 |\n| Buffy | 1989-05-13 | 2003-08-19 | 14 |\n| Chirpy | 1998-09-11 | 2003-08-19 | 4 |\n| Claws | 1994-03-17 | 2003-08-19 | 9 |\n| Fang | 1990-08-27 | 2003-08-19 | 12 |\n| Fluffy | 1993-02-04 | 2003-08-19 | 10 |\n| Puffball | 1999-03-30 | 2003-08-19 | 4 |\n| Slim | 1996-04-29 | 2003-08-19 | 7 |\n| Whistler | 1997-12-09 | 2003-08-19 | 5 |\n+----------+------------+------------+------+\nTo sort the output by age rather than name, just use a different ORDER BY clause:\nmysql> SELECT name, birth, CURDATE(),\nTIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age\nFROM pet ORDER BY age;\n+----------+------------+------------+------+\n| name | birth | CURDATE() | age |\n+----------+------------+------------+------+\n| Chirpy | 1998-09-11 | 2003-08-19 | 4 |\n| Puffball | 1999-03-30 | 2003-08-19 | 4 |\n| Whistler | 1997-12-09 | 2003-08-19 | 5 |\n| Slim | 1996-04-29 | 2003-08-19 | 7 |\n| Claws | 1994-03-17 | 2003-08-19 | 9 |\n| Fluffy | 1993-02-04 | 2003-08-19 | 10 |\n| Fang | 1990-08-27 | 2003-08-19 | 12 |\n| Bowser | 1989-08-31 | 2003-08-19 | 13 |\n| Buffy | 1989-05-13 | 2003-08-19 | 14 |\n+----------+------------+------------+------+\nA similar query can be used to determine age at death for animals that have died. You determine which\nanimals these are by checking whether the death value is NULL. Then, for those with non-NULL values,\ncompute the difference between the death and birth values:\nmysql> SELECT name, birth, death,\nTIMESTAMPDIFF(YEAR,birth,death) AS age\nFROM pet WHERE death IS NOT NULL ORDER BY age;\n+--------+------------+------------+------+\n| name | birth | death | age |\n+--------+------------+------------+------+\n| Bowser | 1989-08-31 | 1995-07-29 | 5 |\n+--------+------------+------------+------+\nThe query uses death IS NOT NULL rather than death <> NULL because NULL is a special value\nthat cannot be compared using the usual comparison operators. This is discussed later. See Section 4.4.6,\n\u201cWorking with NULL Values\u201d.\n18\nDate Calculations\nWhat if you want to know which animals have birthdays next month? For this type of calculation, year\nand day are irrelevant; you simply want to extract the month part of the birth column. MySQL provides\nseveral functions for extracting parts of dates, such as YEAR(), MONTH(), and DAYOFMONTH(). MONTH()\nis the appropriate function here. To see how it works, run a simple query that displays the value of both\nbirth and MONTH(birth):\nmysql> SELECT name, birth, MONTH(birth) FROM pet;\n+----------+------------+--------------+\n| name | birth | MONTH(birth) |\n+----------+------------+--------------+\n| Fluffy | 1993-02-04 | 2 |\n| Claws | 1994-03-17 | 3 |\n| Buffy | 1989-05-13 | 5 |\n| Fang | 1990-08-27 | 8 |\n| Bowser | 1989-08-31 | 8 |\n| Chirpy | 1998-09-11 | 9 |\n| Whistler | 1997-12-09 | 12 |\n| Slim | 1996-04-29 | 4 |\n| Puffball | 1999-03-30 | 3 |\n+----------+------------+--------------+\nFinding animals with birthdays in the upcoming month is also simple. Suppose that the current month is\nApril. Then the month value is 4 and you can look for animals born in May (month 5) like this:\nmysql> SELECT name, birth FROM pet WHERE MONTH(birth) = 5;\n+-------+------------+\n| name | birth |\n+-------+------------+\n| Buffy | 1989-05-13 |\n+-------+------------+\nThere is a small complication if the current month is December. You cannot merely add one to the month\nnumber (12) and look for animals born in month 13, because there is no such month. Instead, you look for\nanimals born in January (month 1).\nYou can write the query so that it works no matter what the current month is, so that you do not have to\nuse the number for a particular month. DATE_ADD() enables you to add a time interval to a given date.\nIf you add a month to the value of CURDATE(), then extract the month part with MONTH(), the result\nproduces the month in which to look for birthdays:\nmysql> SELECT name, birth FROM pet\nWHERE MONTH(birth) = MONTH(DATE_ADD(CURDATE(),INTERVAL 1 MONTH));\nA different way to accomplish the same task is to add 1 to get the next month after the current one after\nusing the modulo function (MOD) to wrap the month value to 0 if it is currently 12:\nmysql> SELECT name, birth FROM pet\nWHERE MONTH(birth) = MOD(MONTH(CURDATE()), 12) + 1;\nMONTH() returns a number between 1 and 12. And MOD(something,12) returns a number between 0\nand 11. So the addition has to be after the MOD(), otherwise we would go from November (11) to January\n(1).\nIf a calculation uses invalid dates, the calculation fails and produces warnings:\nmysql> SELECT '2018-10-31' + INTERVAL 1 DAY;\n+-------------------------------+\n| '2018-10-31' + INTERVAL 1 DAY |\n+-------------------------------+\n| 2018-11-01 |\n+-------------------------------+\nmysql> SELECT '2018-10-32' + INTERVAL 1 DAY;\n+-------------------------------+\n19\nWorking with NULL Values\n| '2018-10-32' + INTERVAL 1 DAY |\n+-------------------------------+\n| NULL |\n+-------------------------------+\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level | Code | Message |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '2018-10-32' |\n+---------+------+----------------------------------------+\n4.4.6 Working with NULL Values\nThe NULL value can be surprising until you get used to it. Conceptually, NULL means \u201ca missing unknown\nvalue\u201d and it is treated somewhat differently from other values.\nTo test for NULL, use the IS NULL and IS NOT NULL operators, as shown here:\nmysql> SELECT 1 IS NULL, 1 IS NOT NULL;\n+-----------+---------------+\n| 1 IS NULL | 1 IS NOT NULL |\n+-----------+---------------+\n| 0 | 1 |\n+-----------+---------------+\nYou cannot use arithmetic comparison operators such as =, <, or <> to test for NULL. To demonstrate this\nfor yourself, try the following query:\nmysql> SELECT 1 = NULL, 1 <> NULL, 1 < NULL, 1 > NULL;\n+----------+-----------+----------+----------+\n| 1 = NULL | 1 <> NULL | 1 < NULL | 1 > NULL |\n+----------+-----------+----------+----------+\n| NULL | NULL | NULL | NULL |\n+----------+-----------+----------+----------+\nBecause the result of any arithmetic comparison with NULL is also NULL, you cannot obtain any meaningful\nresults from such comparisons.\nIn MySQL, 0 or NULL means false and anything else means true. The default truth value from a boolean\noperation is 1.\nThis special treatment of NULL is why, in the previous section, it was necessary to determine which\nanimals are no longer alive using death IS NOT NULL instead of death <> NULL.\nTwo NULL values are regarded as equal in a GROUP BY.\nWhen doing an ORDER BY, NULL values are presented first if you do ORDER BY ... ASC and last if you\ndo ORDER BY ... DESC.\nA common error when working with NULL is to assume that it is not possible to insert a zero or an empty\nstring into a column defined as NOT NULL, but this is not the case. These are in fact values, whereas NULL\nmeans \u201cnot having a value.\u201d You can test this easily enough by using IS [NOT] NULL as shown:\nmysql> SELECT 0 IS NULL, 0 IS NOT NULL, '' IS NULL, '' IS NOT NULL;\n+-----------+---------------+------------+----------------+\n| 0 IS NULL | 0 IS NOT NULL | '' IS NULL | '' IS NOT NULL |\n+-----------+---------------+------------+----------------+\n| 0 | 1 | 0 | 1 |\n+-----------+---------------+------------+----------------+\nThus it is entirely possible to insert a zero or empty string into a NOT NULL column, as these are in fact\nNOT NULL. See Problems with NULL Values.\n20\nPattern Matching\n4.4.7 Pattern Matching\nMySQL provides standard SQL pattern matching as well as a form of pattern matching based on extended\nregular expressions similar to those used by Unix utilities such as vi, grep, and sed.\nSQL pattern matching enables you to use _ to match any single character and % to match an arbitrary\nnumber of characters (including zero characters). In MySQL, SQL patterns are case-insensitive by default.\nSome examples are shown here. Do not use = or <> when you use SQL patterns. Use the LIKE or NOT\nLIKE comparison operators instead.\nTo find names beginning with b:\nmysql> SELECT * FROM pet WHERE name LIKE 'b%';\n+--------+--------+---------+------+------------+------------+\n| name | owner | species | sex | birth | death |\n+--------+--------+---------+------+------------+------------+\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n| Bowser | Diane | dog | m | 1989-08-31 | 1995-07-29 |\n+--------+--------+---------+------+------------+------------+\nTo find names ending with fy:\nmysql> SELECT * FROM pet WHERE name LIKE '%fy';\n+--------+--------+---------+------+------------+-------+\n| name | owner | species | sex | birth | death |\n+--------+--------+---------+------+------------+-------+\n| Fluffy | Harold | cat | f | 1993-02-04 | NULL |\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n+--------+--------+---------+------+------------+-------+\nTo find names containing a w:\nmysql> SELECT * FROM pet WHERE name LIKE '%w%';\n+----------+-------+---------+------+------------+------------+\n| name | owner | species | sex | birth | death |\n+----------+-------+---------+------+------------+------------+\n| Claws | Gwen | cat | m | 1994-03-17 | NULL |\n| Bowser | Diane | dog | m | 1989-08-31 | 1995-07-29 |\n| Whistler | Gwen | bird | NULL | 1997-12-09 | NULL |\n+----------+-------+---------+------+------------+------------+\nTo find names containing exactly five characters, use five instances of the _ pattern character:\nmysql> SELECT * FROM pet WHERE name LIKE '_____';\n+-------+--------+---------+------+------------+-------+\n| name | owner | species | sex | birth | death |\n+-------+--------+---------+------+------------+-------+\n| Claws | Gwen | cat | m | 1994-03-17 | NULL |\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n+-------+--------+---------+------+------------+-------+\nThe other type of pattern matching provided by MySQL uses extended regular expressions. When you\ntest for a match for this type of pattern, use the REGEXP and NOT REGEXP operators (or RLIKE and NOT\nRLIKE, which are synonyms).\nThe following list describes some characteristics of extended regular expressions:\n\u2022 . matches any single character.\n\u2022 A character class [...] matches any character within the brackets. For example, [abc] matches a, b,\nor c. To name a range of characters, use a dash. [a-z] matches any letter, whereas [0-9] matches\nany digit.\n21\nPattern Matching\n\u2022 * matches zero or more instances of the thing preceding it. For example, x* matches any number of x\ncharacters, [0-9]* matches any number of digits, and .* matches any number of anything.\n\u2022 A regular expression pattern match succeeds if the pattern matches anywhere in the value being tested.\n(This differs from a LIKE pattern match, which succeeds only if the pattern matches the entire value.)\n\u2022 To anchor a pattern so that it must match the beginning or end of the value being tested, use ^ at the\nbeginning or $ at the end of the pattern.\nTo demonstrate how extended regular expressions work, the LIKE queries shown previously are rewritten\nhere to use REGEXP.\nTo find names beginning with b, use ^ to match the beginning of the name:\nmysql> SELECT * FROM pet WHERE name REGEXP '^b';\n+--------+--------+---------+------+------------+------------+\n| name | owner | species | sex | birth | death |\n+--------+--------+---------+------+------------+------------+\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n| Bowser | Diane | dog | m | 1989-08-31 | 1995-07-29 |\n+--------+--------+---------+------+------------+------------+\nTo force a REGEXP comparison to be case-sensitive, use the BINARY keyword to make one of the strings a\nbinary string. This query matches only lowercase b at the beginning of a name:\nSELECT * FROM pet WHERE name REGEXP BINARY '^b';\nTo find names ending with fy, use $ to match the end of the name:\nmysql> SELECT * FROM pet WHERE name REGEXP 'fy$';\n+--------+--------+---------+------+------------+-------+\n| name | owner | species | sex | birth | death |\n+--------+--------+---------+------+------------+-------+\n| Fluffy | Harold | cat | f | 1993-02-04 | NULL |\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n+--------+--------+---------+------+------------+-------+\nTo find names containing a w, use this query:\nmysql> SELECT * FROM pet WHERE name REGEXP 'w';\n+----------+-------+---------+------+------------+------------+\n| name | owner | species | sex | birth | death |\n+----------+-------+---------+------+------------+------------+\n| Claws | Gwen | cat | m | 1994-03-17 | NULL |\n| Bowser | Diane | dog | m | 1989-08-31 | 1995-07-29 |\n| Whistler | Gwen | bird | NULL | 1997-12-09 | NULL |\n+----------+-------+---------+------+------------+------------+\nBecause a regular expression pattern matches if it occurs anywhere in the value, it is not necessary in the\nprevious query to put a wildcard on either side of the pattern to get it to match the entire value as would be\ntrue with an SQL pattern.\nTo find names containing exactly five characters, use ^ and $ to match the beginning and end of the name,\nand five instances of . in between:\nmysql> SELECT * FROM pet WHERE name REGEXP '^.....$';\n+-------+--------+---------+------+------------+-------+\n| name | owner | species | sex | birth | death |\n+-------+--------+---------+------+------------+-------+\n| Claws | Gwen | cat | m | 1994-03-17 | NULL |\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n+-------+--------+---------+------+------------+-------+\n22\nCounting Rows\nYou could also write the previous query using the {n} (\u201crepeat-n-times\u201d) operator:\nmysql> SELECT * FROM pet WHERE name REGEXP '^.{5}$';\n+-------+--------+---------+------+------------+-------+\n| name | owner | species | sex | birth | death |\n+-------+--------+---------+------+------------+-------+\n| Claws | Gwen | cat | m | 1994-03-17 | NULL |\n| Buffy | Harold | dog | f | 1989-05-13 | NULL |\n+-------+--------+---------+------+------------+-------+\nFor more information about the syntax for regular expressions, see Regular Expressions.\n4.4.8 Counting Rows\nDatabases are often used to answer the question, \u201cHow often does a certain type of data occur in a table?\u201d\nFor example, you might want to know how many pets you have, or how many pets each owner has, or you\nmight want to perform various kinds of census operations on your animals.\nCounting the total number of animals you have is the same question as \u201cHow many rows are in the pet\ntable?\u201d because there is one record per pet. COUNT(*) counts the number of rows, so the query to count\nyour animals looks like this:\nmysql> SELECT COUNT(*) FROM pet;\n+----------+\n| COUNT(*) |\n+----------+\n| 9 |\n+----------+\nEarlier, you retrieved the names of the people who owned pets. You can use COUNT() if you want to find\nout how many pets each owner has:\nmysql> SELECT owner, COUNT(*) FROM pet GROUP BY owner;\n+--------+----------+\n| owner | COUNT(*) |\n+--------+----------+\n| Benny | 2 |\n| Diane | 2 |\n| Gwen | 3 |\n| Harold | 2 |\n+--------+----------+\nThe preceding query uses GROUP BY to group all records for each owner. The use of COUNT() in\nconjunction with GROUP BY is useful for characterizing your data under various groupings. The following\nexamples show different ways to perform animal census operations.\nNumber of animals per species:\nmysql> SELECT species, COUNT(*) FROM pet GROUP BY species;\n+---------+----------+\n| species | COUNT(*) |\n+---------+----------+\n| bird | 2 |\n| cat | 2 |\n| dog | 3 |\n| hamster | 1 |\n| snake | 1 |\n+---------+----------+\nNumber of animals per sex:\nmysql> SELECT sex, COUNT(*) FROM pet GROUP BY sex;\n23\nCounting Rows\n+------+----------+\n| sex | COUNT(*) |\n+------+----------+\n| NULL | 1 |\n| f | 4 |\n| m | 4 |\n+------+----------+\n(In this output, NULL indicates that the sex is unknown.)\nNumber of animals per combination of species and sex:\nmysql> SELECT species, sex, COUNT(*) FROM pet GROUP BY species, sex;\n+---------+------+----------+\n| species | sex | COUNT(*) |\n+---------+------+----------+\n| bird | NULL | 1 |\n| bird | f | 1 |\n| cat | f | 1 |\n| cat | m | 1 |\n| dog | f | 1 |\n| dog | m | 2 |\n| hamster | f | 1 |\n| snake | m | 1 |\n+---------+------+----------+\nYou need not retrieve an entire table when you use COUNT(). For example, the previous query, when\nperformed just on dogs and cats, looks like this:\nmysql> SELECT species, sex, COUNT(*) FROM pet\nWHERE species = 'dog' OR species = 'cat'\nGROUP BY species, sex;\n+---------+------+----------+\n| species | sex | COUNT(*) |\n+---------+------+----------+\n| cat | f | 1 |\n| cat | m | 1 |\n| dog | f | 1 |\n| dog | m | 2 |\n+---------+------+----------+\nOr, if you wanted the number of animals per sex only for animals whose sex is known:\nmysql> SELECT species, sex, COUNT(*) FROM pet\nWHERE sex IS NOT NULL\nGROUP BY species, sex;\n+---------+------+----------+\n| species | sex | COUNT(*) |\n+---------+------+----------+\n| bird | f | 1 |\n| cat | f | 1 |\n| cat | m | 1 |\n| dog | f | 1 |\n| dog | m | 2 |\n| hamster | f | 1 |\n| snake | m | 1 |\n+---------+------+----------+\nIf you name columns to select in addition to the COUNT() value, a GROUP BY clause should be present\nthat names those same columns. Otherwise, the following occurs:\n\u2022 If the ONLY_FULL_GROUP_BY SQL mode is enabled, an error occurs:\nmysql> SET sql_mode = 'ONLY_FULL_GROUP_BY';\nQuery OK, 0 rows affected (0.00 sec)\n24\nUsing More Than one Table\nmysql> SELECT owner, COUNT(*) FROM pet;\nERROR 1140 (42000): In aggregated query without GROUP BY, expression\n#1 of SELECT list contains nonaggregated column 'menagerie.pet.owner';\nthis is incompatible with sql_mode=only_full_group_by\n\u2022 If ONLY_FULL_GROUP_BY is not enabled, the query is processed by treating all rows as a single group,\nbut the value selected for each named column is nondeterministic. The server is free to select the value\nfrom any row:\nmysql> SET sql_mode = '';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT owner, COUNT(*) FROM pet;\n+--------+----------+\n| owner | COUNT(*) |\n+--------+----------+\n| Harold | 8 |\n+--------+----------+\n1 row in set (0.00 sec)\nSee also MySQL Handling of GROUP BY. See Aggregate Function Descriptions for information about\nCOUNT(expr) behavior and related optimizations.\n4.4.9 Using More Than one Table\nThe pet table keeps track of which pets you have. If you want to record other information about them,\nsuch as events in their lives like visits to the vet or when litters are born, you need another table. What\nshould this table look like? It needs to contain the following information:\n\u2022 The pet name so that you know which animal each event pertains to.\n\u2022 A date so that you know when the event occurred.\n\u2022 A field to describe the event.\n\u2022 An event type field, if you want to be able to categorize events.\nGiven these considerations, the CREATE TABLE statement for the event table might look like this:\nmysql> CREATE TABLE event (name VARCHAR(20), date DATE,\ntype VARCHAR(15), remark VARCHAR(255));\nAs with the pet table, it is easiest to load the initial records by creating a tab-delimited text file containing\nthe following information.\nname date type remark\nFluffy 1995-05-15 litter 4 kittens, 3 female, 1\nmale\nBuffy 1993-06-23 litter 5 puppies, 2 female, 3\nmale\nBuffy 1994-06-19 litter 3 puppies, 3 female\nChirpy 1999-03-21 vet needed beak\nstraightened\nSlim 1997-08-03 vet broken rib\nBowser 1991-10-12 kennel\nFang 1991-10-12 kennel\n25\nUsing More Than one Table\nname date type remark\nFang 1998-08-28 birthday Gave him a new chew\ntoy\nClaws 1998-03-17 birthday Gave him a new flea\ncollar\nWhistler 1998-12-09 birthday First birthday\nLoad the records like this:\nmysql> LOAD DATA LOCAL INFILE 'event.txt' INTO TABLE event;\nBased on what you have learned from the queries that you have run on the pet table, you should be able\nto perform retrievals on the records in the event table; the principles are the same. But when is the event\ntable by itself insufficient to answer questions you might ask?\nSuppose that you want to find out the ages at which each pet had its litters. We saw earlier how to\ncalculate ages from two dates. The litter date of the mother is in the event table, but to calculate her age\non that date you need her birth date, which is stored in the pet table. This means the query requires both\ntables:\nmysql> SELECT pet.name,\nTIMESTAMPDIFF(YEAR,birth,date) AS age,\nremark\nFROM pet INNER JOIN event\nON pet.name = event.name\nWHERE event.type = 'litter';\n+--------+------+-----------------------------+\n| name | age | remark |\n+--------+------+-----------------------------+\n| Fluffy | 2 | 4 kittens, 3 female, 1 male |\n| Buffy | 4 | 5 puppies, 2 female, 3 male |\n| Buffy | 5 | 3 puppies, 3 female |\n+--------+------+-----------------------------+\nThere are several things to note about this query:\n\u2022 The FROM clause joins two tables because the query needs to pull information from both of them.\n\u2022 When combining (joining) information from multiple tables, you need to specify how records in one table\ncan be matched to records in the other. This is easy because they both have a name column. The query\nuses an ON clause to match up records in the two tables based on the name values.\nThe query uses an INNER JOIN to combine the tables. An INNER JOIN permits rows from either table\nto appear in the result if and only if both tables meet the conditions specified in the ON clause. In this\nexample, the ON clause specifies that the name column in the pet table must match the name column in\nthe event table. If a name appears in one table but not the other, the row does not appear in the result\nbecause the condition in the ON clause fails.\n\u2022 Because the name column occurs in both tables, you must be specific about which table you mean when\nreferring to the column. This is done by prepending the table name to the column name.\nYou need not have two different tables to perform a join. Sometimes it is useful to join a table to itself, if\nyou want to compare records in a table to other records in that same table. For example, to find breeding\npairs among your pets, you can join the pet table with itself to produce candidate pairs of live males and\nfemales of like species:\nmysql> SELECT p1.name, p1.sex, p2.name, p2.sex, p1.species\nFROM pet AS p1 INNER JOIN pet AS p2\n26\nUsing More Than one Table\nON p1.species = p2.species\nAND p1.sex = 'f' AND p1.death IS NULL\nAND p2.sex = 'm' AND p2.death IS NULL;\n+--------+------+-------+------+---------+\n| name | sex | name | sex | species |\n+--------+------+-------+------+---------+\n| Fluffy | f | Claws | m | cat |\n| Buffy | f | Fang | m | dog |\n+--------+------+-------+------+---------+\nIn this query, we specify aliases for the table name to refer to the columns and keep straight which\ninstance of the table each column reference is associated with.\n27\n28\nChapter 5 Getting Information About Databases and Tables\nWhat if you forget the name of a database or table, or what the structure of a given table is (for example,\nwhat its columns are called)? MySQL addresses this problem through several statements that provide\ninformation about the databases and tables it supports.\nYou have previously seen SHOW DATABASES, which lists the databases managed by the server. To find\nout which database is currently selected, use the DATABASE() function:\nmysql> SELECT DATABASE();\n+------------+\n| DATABASE() |\n+------------+\n| menagerie |\n+------------+\nIf you have not yet selected any database, the result is NULL.\nTo find out what tables the default database contains (for example, when you are not sure about the name\nof a table), use this statement:\nmysql> SHOW TABLES;\n+---------------------+\n| Tables_in_menagerie |\n+---------------------+\n| event |\n| pet |\n+---------------------+\nThe name of the column in the output produced by this statement is always Tables_in_db_name, where\ndb_name is the name of the database. See SHOW TABLES Statement, for more information.\nIf you want to find out about the structure of a table, the DESCRIBE statement is useful; it displays\ninformation about each of a table's columns:\nmysql> DESCRIBE pet;\n+---------+-------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| name | varchar(20) | YES | | NULL | |\n| owner | varchar(20) | YES | | NULL | |\n| species | varchar(20) | YES | | NULL | |\n| sex | char(1) | YES | | NULL | |\n| birth | date | YES | | NULL | |\n| death | date | YES | | NULL | |\n+---------+-------------+------+-----+---------+-------+\nField indicates the column name, Type is the data type for the column, NULL indicates whether the\ncolumn can contain NULL values, Key indicates whether the column is indexed, and Default specifies the\ncolumn's default value. Extra displays special information about columns: If a column was created with\nthe AUTO_INCREMENT option, the value is auto_increment rather than empty.\nDESC is a short form of DESCRIBE. See DESCRIBE Statement, for more information.\nYou can obtain the CREATE TABLE statement necessary to create an existing table using the SHOW\nCREATE TABLE statement. See SHOW CREATE TABLE Statement.\nIf you have indexes on a table, SHOW INDEX FROM tbl_name produces information about them. See\nSHOW INDEX Statement, for more about this statement.\n29\n30\nChapter 6 Using mysql in Batch Mode\nIn the previous sections, you used mysql interactively to enter statements and view the results. You can\nalso run mysql in batch mode. To do this, put the statements you want to run in a file, then tell mysql to\nread its input from the file:\n$> mysql < batch-file\nIf you are running mysql under Windows and have some special characters in the file that cause\nproblems, you can do this:\nC:\\> mysql -e \"source batch-file\"\nIf you need to specify connection parameters on the command line, the command might look like this:\n$> mysql -h host -u user -p < batch-file\nEnter password: ********\nWhen you use mysql this way, you are creating a script file, then executing the script.\nIf you want the script to continue even if some of the statements in it produce errors, you should use the --\nforce command-line option.\nWhy use a script? Here are a few reasons:\n\u2022 If you run a query repeatedly (say, every day or every week), making it a script enables you to avoid\nretyping it each time you execute it.\n\u2022 You can generate new queries from existing ones that are similar by copying and editing script files.\n\u2022 Batch mode can also be useful while you are developing a query, particularly for multiple-line statements\nor multiple-statement sequences. If you make a mistake, you do not have to retype everything. Just edit\nyour script to correct the error, then tell mysql to execute it again.\n\u2022 If you have a query that produces a lot of output, you can run the output through a pager rather than\nwatching it scroll off the top of your screen:\n$> mysql < batch-file | more\n\u2022 You can catch the output in a file for further processing:\n$> mysql < batch-file > mysql.out\n\u2022 You can distribute your script to other people so that they can also run the statements.\n\u2022 Some situations do not allow for interactive use, for example, when you run a query from a cron job. In\nthis case, you must use batch mode.\nThe default output format is different (more concise) when you run mysql in batch mode than when you\nuse it interactively. For example, the output of SELECT DISTINCT species FROM pet looks like this\nwhen mysql is run interactively:\n+---------+\n| species |\n+---------+\n| bird |\n| cat |\n| dog |\n| hamster |\n31\n| snake |\n+---------+\nIn batch mode, the output looks like this instead:\nspecies\nbird\ncat\ndog\nhamster\nsnake\nIf you want to get the interactive output format in batch mode, use mysql -t. To echo to the output the\nstatements that are executed, use mysql -v.\nYou can also use scripts from the mysql prompt by using the source command or \\. command:\nmysql> source filename;\nmysql> \\. filename\nSee Executing SQL Statements from a Text File, for more information.\n32\nChapter 7 Examples of Common Queries\nTable of Contents\n7.1 The Maximum Value for a Column .............................................................................................. 33\n7.2 The Row Holding the Maximum of a Certain Column ................................................................... 34\n7.3 Maximum of Column per Group .................................................................................................. 34\n7.4 The Rows Holding the Group-wise Maximum of a Certain Column ................................................ 34\n7.5 Using User-Defined Variables ..................................................................................................... 35\n7.6 Using Foreign Keys .................................................................................................................... 36\n7.7 Searching on Two Keys .............................................................................................................. 38\n7.8 Calculating Visits Per Day ........................................................................................................... 38\n7.9 Using AUTO_INCREMENT ......................................................................................................... 39\nHere are examples of how to solve some common problems with MySQL.\nSome of the examples use the table shop to hold the price of each article (item number) for certain traders\n(dealers). Supposing that each trader has a single fixed price per article, then (article, dealer) is a\nprimary key for the records.\nStart the command-line tool mysql and select a database:\n$> mysql your-database-name\nTo create and populate the example table, use these statements:\nCREATE TABLE shop (\narticle INT UNSIGNED DEFAULT '0000' NOT NULL,\ndealer CHAR(20) DEFAULT '' NOT NULL,\nprice DECIMAL(16,2) DEFAULT '0.00' NOT NULL,\nPRIMARY KEY(article, dealer));\nINSERT INTO shop VALUES\n(1,'A',3.45),(1,'B',3.99),(2,'A',10.99),(3,'B',1.45),\n(3,'C',1.69),(3,'D',1.25),(4,'D',19.95);\nAfter issuing the statements, the table should have the following contents:\nSELECT * FROM shop ORDER BY article;\n+---------+--------+-------+\n| article | dealer | price |\n+---------+--------+-------+\n| 1 | A | 3.45 |\n| 1 | B | 3.99 |\n| 2 | A | 10.99 |\n| 3 | B | 1.45 |\n| 3 | C | 1.69 |\n| 3 | D | 1.25 |\n| 4 | D | 19.95 |\n+---------+--------+-------+\n7.1 The Maximum Value for a Column\n\u201cWhat is the highest item number?\u201d\nSELECT MAX(article) AS article FROM shop;\n+---------+\n| article |\n+---------+\n33\nThe Row Holding the Maximum of a Certain Column\n| 4 |\n+---------+\n7.2 The Row Holding the Maximum of a Certain Column\nTask: Find the number, dealer, and price of the most expensive article.\nThis is easily done with a subquery:\nSELECT article, dealer, price\nFROM shop\nWHERE price=(SELECT MAX(price) FROM shop);\n+---------+--------+-------+\n| article | dealer | price |\n+---------+--------+-------+\n| 0004 | D | 19.95 |\n+---------+--------+-------+\nAnother solution is to use a LEFT JOIN, as shown here:\nSELECT s1.article, s1.dealer, s1.price\nFROM shop s1\nLEFT JOIN shop s2 ON s1.price < s2.price\nWHERE s2.article IS NULL;\nYou can also do this by sorting all rows descending by price and get only the first row using the MySQL-\nspecific LIMIT clause, like this:\nSELECT article, dealer, price\nFROM shop\nORDER BY price DESC\nLIMIT 1;\nNote\nIf there were several most expensive articles, each with a price of 19.95, the LIMIT\nsolution would show only one of them.\n7.3 Maximum of Column per Group\nTask: Find the highest price per article.\nSELECT article, MAX(price) AS price\nFROM shop\nGROUP BY article\nORDER BY article;\n+---------+-------+\n| article | price |\n+---------+-------+\n| 0001 | 3.99 |\n| 0002 | 10.99 |\n| 0003 | 1.69 |\n| 0004 | 19.95 |\n+---------+-------+\n7.4 The Rows Holding the Group-wise Maximum of a Certain Column\nTask: For each article, find the dealer or dealers with the most expensive price.\nThis problem can be solved with a subquery like this one:\nSELECT article, dealer, price\n34\nUsing User-Defined Variables\nFROM shop s1\nWHERE price=(SELECT MAX(s2.price)\nFROM shop s2\nWHERE s1.article = s2.article)\nORDER BY article;\n+---------+--------+-------+\n| article | dealer | price |\n+---------+--------+-------+\n| 0001 | B | 3.99 |\n| 0002 | A | 10.99 |\n| 0003 | C | 1.69 |\n| 0004 | D | 19.95 |\n+---------+--------+-------+\nThe preceding example uses a correlated subquery, which can be inefficient (see Correlated Subqueries).\nOther possibilities for solving the problem are to use an uncorrelated subquery in the FROM clause or a\nLEFT JOIN.\nUncorrelated subquery:\nSELECT s1.article, dealer, s1.price\nFROM shop s1\nJOIN (\nSELECT article, MAX(price) AS price\nFROM shop\nGROUP BY article) AS s2\nON s1.article = s2.article AND s1.price = s2.price\nORDER BY article;\nLEFT JOIN:\nSELECT s1.article, s1.dealer, s1.price\nFROM shop s1\nLEFT JOIN shop s2 ON s1.article = s2.article AND s1.price < s2.price\nWHERE s2.article IS NULL\nORDER BY s1.article;\nThe LEFT JOIN works on the basis that when s1.price is at its maximum value, there is no s2.price\nwith a greater value and thus the corresponding s2.article value is NULL. See JOIN Clause.\n7.5 Using User-Defined Variables\nYou can employ MySQL user variables to remember results without having to store them in temporary\nvariables in the client. (See User-Defined Variables.)\nFor example, to find the articles with the highest and lowest price you can do this:\nmysql> SELECT @min_price:=MIN(price),@max_price:=MAX(price) FROM shop;\nmysql> SELECT * FROM shop WHERE price=@min_price OR price=@max_price;\n+---------+--------+-------+\n| article | dealer | price |\n+---------+--------+-------+\n| 0003 | D | 1.25 |\n| 0004 | D | 19.95 |\n+---------+--------+-------+\nNote\nIt is also possible to store the name of a database object such as a table or a\ncolumn in a user variable and then to use this variable in an SQL statement;\nhowever, this requires the use of a prepared statement. See Prepared Statements,\nfor more information.\n35\nUsing Foreign Keys\n7.6 Using Foreign Keys\nMySQL supports foreign keys, which permit cross-referencing related data across tables, and foreign key\nconstraints, which help keep the related data consistent.\nA foreign key relationship involves a parent table that holds the initial column values, and a child table with\ncolumn values that reference the parent column values. A foreign key constraint is defined on the child\ntable.\nThis following example relates parent and child tables through a single-column foreign key and shows\nhow a foreign key constraint enforces referential integrity.\nCreate the parent and child tables using the following SQL statements:\nCREATE TABLE parent (\nid INT NOT NULL,\nPRIMARY KEY (id)\n) ENGINE=INNODB;\nCREATE TABLE child (\nid INT,\nparent_id INT,\nINDEX par_ind (parent_id),\nFOREIGN KEY (parent_id)\nREFERENCES parent(id)\n) ENGINE=INNODB;\nInsert a row into the parent table, like this:\nmysql> INSERT INTO parent (id) VALUES (1);\nVerify that the data was inserted. You can do this simply by selecting all rows from parent, as shown\nhere:\nmysql> SELECT * FROM parent;\n+----+\n| id |\n+----+\n| 1 |\n+----+\nInsert a row into the child table using the following SQL statement:\nmysql> INSERT INTO child (id,parent_id) VALUES (1,1);\nThe insert operation is successful because parent_id 1 is present in the parent table.\nInsertion of a row into the child table with a parent_id value that is not present in the parent table is\nrejected with an error, as you can see here:\nmysql> INSERT INTO child (id,parent_id) VALUES(2,2);\nERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails\n(`test`.`child`, CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\nREFERENCES `parent` (`id`))\nThe operation fails because the specified parent_id value does not exist in the parent table.\nTrying to delete the previously inserted row from the parent table also fails, as shown here:\nmysql> DELETE FROM parent WHERE id = 1;\nERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails\n(`test`.`child`, CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`)\n36\nUsing Foreign Keys\nREFERENCES `parent` (`id`))\nThis operation fails because the record in the child table contains the referenced id (parent_id) value.\nWhen an operation affects a key value in the parent table that has matching rows in the child table,\nthe result depends on the referential action specified by ON UPDATE and ON DELETE subclauses of\nthe FOREIGN KEY clause. Omitting ON DELETE and ON UPDATE clauses (as in the current child table\ndefinition) is the same as specifying the RESTRICT option, which rejects operations that affect a key value\nin the parent table that has matching rows in the parent table.\nTo demonstrate ON DELETE and ON UPDATE referential actions, drop the child table and recreate it\nto include ON UPDATE and ON DELETE subclauses with the CASCADE option. The CASCADE option\nautomatically deletes or updates matching rows in the child table when deleting or updating rows in the\nparent table.\nDROP TABLE child;\nCREATE TABLE child (\nid INT,\nparent_id INT,\nINDEX par_ind (parent_id),\nFOREIGN KEY (parent_id)\nREFERENCES parent(id)\nON UPDATE CASCADE\nON DELETE CASCADE\n) ENGINE=INNODB;\nInsert some rows into the child table using the statement shown here:\nmysql> INSERT INTO child (id,parent_id) VALUES(1,1),(2,1),(3,1);\nVerify that the data was inserted, like this:\nmysql> SELECT * FROM child;\n+------+-----------+\n| id | parent_id |\n+------+-----------+\n| 1 | 1 |\n| 2 | 1 |\n| 3 | 1 |\n+------+-----------+\nUpdate the ID in the parent table, changing it from 1 to 2, using the SQL statement shown here:\nmysql> UPDATE parent SET id = 2 WHERE id = 1;\nVerify that the update was successful by selecting all rows from the parent table, as shown here:\nmysql> SELECT * FROM parent;\n+----+\n| id |\n+----+\n| 2 |\n+----+\nVerify that the ON UPDATE CASCADE referential action updated the child table, like this:\nmysql> SELECT * FROM child;\n+------+-----------+\n| id | parent_id |\n+------+-----------+\n| 1 | 2 |\n| 2 | 2 |\n| 3 | 2 |\n37\nSearching on Two Keys\n+------+-----------+\nTo demonstrate the ON DELETE CASCADE referential action, delete records from the parent table where\nparent_id = 2; this deletes all records in the parent table.\nmysql> DELETE FROM parent WHERE id = 2;\nBecause all records in the child table are associated with parent_id = 2, the ON DELETE CASCADE\nreferential action removes all records from the child table, as shown here:\nmysql> SELECT * FROM child;\nEmpty set (0.00 sec)\nFor more information about foreign key constraints, see FOREIGN KEY Constraints.\n7.7 Searching on Two Keys\nAn OR using a single key is well optimized, as is the handling of AND.\nThe one tricky case is that of searching on two different keys combined with OR:\nSELECT field1_index, field2_index FROM test_table\nWHERE field1_index = '1' OR field2_index = '1'\nThis case is optimized. See Index Merge Optimization.\nYou can also solve the problem efficiently by using a UNION that combines the output of two separate\nSELECT statements. See UNION Clause.\nEach SELECT searches only one key and can be optimized:\nSELECT field1_index, field2_index\nFROM test_table WHERE field1_index = '1'\nUNION\nSELECT field1_index, field2_index\nFROM test_table WHERE field2_index = '1';\n7.8 Calculating Visits Per Day\nThe following example shows how you can use the bit group functions to calculate the number of days per\nmonth a user has visited a Web page.\nCREATE TABLE t1 (year YEAR, month INT UNSIGNED,\nday INT UNSIGNED);\nINSERT INTO t1 VALUES(2000,1,1),(2000,1,20),(2000,1,30),(2000,2,2),\n(2000,2,23),(2000,2,23);\nThe example table contains year-month-day values representing visits by users to the page. To determine\nhow many different days in each month these visits occur, use this query:\nSELECT year,month,BIT_COUNT(BIT_OR(1<<day)) AS days FROM t1\nGROUP BY year,month;\nWhich returns:\n+------+-------+------+\n| year | month | days |\n+------+-------+------+\n| 2000 | 1 | 3 |\n| 2000 | 2 | 2 |\n38\nUsing AUTO_INCREMENT\n+------+-------+------+\nThe query calculates how many different days appear in the table for each year/month combination, with\nautomatic removal of duplicate entries.\n7.9 Using AUTO_INCREMENT\nThe AUTO_INCREMENT attribute can be used to generate a unique identity for new rows:\nCREATE TABLE animals (\nid MEDIUMINT NOT NULL AUTO_INCREMENT,\nname CHAR(30) NOT NULL,\nPRIMARY KEY (id)\n);\nINSERT INTO animals (name) VALUES\n('dog'),('cat'),('penguin'),\n('lax'),('whale'),('ostrich');\nSELECT * FROM animals;\nWhich returns:\n+----+---------+\n| id | name |\n+----+---------+\n| 1 | dog |\n| 2 | cat |\n| 3 | penguin |\n| 4 | lax |\n| 5 | whale |\n| 6 | ostrich |\n+----+---------+\nNo value was specified for the AUTO_INCREMENT column, so MySQL assigned sequence numbers\nautomatically. You can also explicitly assign 0 to the column to generate sequence numbers, unless the\nNO_AUTO_VALUE_ON_ZERO SQL mode is enabled. For example:\nINSERT INTO animals (id,name) VALUES(0,'groundhog');\nIf the column is declared NOT NULL, it is also possible to assign NULL to the column to generate sequence\nnumbers. For example:\nINSERT INTO animals (id,name) VALUES(NULL,'squirrel');\nWhen you insert any other value into an AUTO_INCREMENT column, the column is set to that value and\nthe sequence is reset so that the next automatically generated value follows sequentially from the largest\ncolumn value. For example:\nINSERT INTO animals (id,name) VALUES(100,'rabbit');\nINSERT INTO animals (id,name) VALUES(NULL,'mouse');\nSELECT * FROM animals;\n+-----+-----------+\n| id | name |\n+-----+-----------+\n| 1 | dog |\n| 2 | cat |\n| 3 | penguin |\n| 4 | lax |\n| 5 | whale |\n| 6 | ostrich |\n| 7 | groundhog |\n| 8 | squirrel |\n| 100 | rabbit |\n| 101 | mouse |\n39\nInnoDB Notes\n+-----+-----------+\nUpdating an existing AUTO_INCREMENT column value in an InnoDB table does not reset the\nAUTO_INCREMENT sequence as it does for MyISAM and NDB tables.\nYou can retrieve the most recent automatically generated AUTO_INCREMENT value with the\nLAST_INSERT_ID() SQL function or the mysql_insert_id() C API function. These functions are\nconnection-specific, so their return values are not affected by another connection which is also performing\ninserts.\nUse the smallest integer data type for the AUTO_INCREMENT column that is large enough to hold the\nmaximum sequence value you need. When the column reaches the upper limit of the data type, the\nnext attempt to generate a sequence number fails. Use the UNSIGNED attribute if possible to allow a\ngreater range. For example, if you use TINYINT, the maximum permissible sequence number is 127. For\nTINYINT UNSIGNED, the maximum is 255. See Integer Types (Exact Value) - INTEGER, INT, SMALLINT,\nTINYINT, MEDIUMINT, BIGINT for the ranges of all the integer types.\nNote\nFor a multiple-row insert, LAST_INSERT_ID() and mysql_insert_id() actually\nreturn the AUTO_INCREMENT key from the first of the inserted rows. This enables\nmultiple-row inserts to be reproduced correctly on other servers in a replication\nsetup.\nTo start with an AUTO_INCREMENT value other than 1, set that value with CREATE TABLE or ALTER\nTABLE, like this:\nmysql> ALTER TABLE tbl AUTO_INCREMENT = 100;\nInnoDB Notes\nFor information about AUTO_INCREMENT usage specific to InnoDB, see AUTO_INCREMENT Handling in\nInnoDB.\nMyISAM Notes\n\u2022 For MyISAM tables, you can specify AUTO_INCREMENT on a secondary column in a multiple-\ncolumn index. In this case, the generated value for the AUTO_INCREMENT column is calculated as\nMAX(auto_increment_column) + 1 WHERE prefix=given-prefix. This is useful when you\nwant to put data into ordered groups.\nCREATE TABLE animals (\ngrp ENUM('fish','mammal','bird') NOT NULL,\nid MEDIUMINT NOT NULL AUTO_INCREMENT,\nname CHAR(30) NOT NULL,\nPRIMARY KEY (grp,id)\n) ENGINE=MyISAM;\nINSERT INTO animals (grp,name) VALUES\n('mammal','dog'),('mammal','cat'),\n('bird','penguin'),('fish','lax'),('mammal','whale'),\n('bird','ostrich');\nSELECT * FROM animals ORDER BY grp,id;\nWhich returns:\n+--------+----+---------+\n| grp | id | name |\n+--------+----+---------+\n| fish | 1 | lax |\n40\nFurther Reading\n| mammal | 1 | dog |\n| mammal | 2 | cat |\n| mammal | 3 | whale |\n| bird | 1 | penguin |\n| bird | 2 | ostrich |\n+--------+----+---------+\nIn this case (when the AUTO_INCREMENT column is part of a multiple-column index), AUTO_INCREMENT\nvalues are reused if you delete the row with the biggest AUTO_INCREMENT value in any group. This\nhappens even for MyISAM tables, for which AUTO_INCREMENT values normally are not reused.\n\u2022 If the AUTO_INCREMENT column is part of multiple indexes, MySQL generates sequence values using\nthe index that begins with the AUTO_INCREMENT column, if there is one. For example, if the animals\ntable contained indexes PRIMARY KEY (grp, id) and INDEX (id), MySQL would ignore the\nPRIMARY KEY for generating sequence values. As a result, the table would contain a single sequence,\nnot a sequence per grp value.\nFurther Reading\nMore information about AUTO_INCREMENT is available here:\n\u2022 How to assign the AUTO_INCREMENT attribute to a column: CREATE TABLE Statement, and ALTER\nTABLE Statement.\n\u2022 How AUTO_INCREMENT behaves depending on the NO_AUTO_VALUE_ON_ZERO SQL mode: Server\nSQL Modes.\n\u2022 How to use the LAST_INSERT_ID() function to find the row that contains the most recent\nAUTO_INCREMENT value: Information Functions.\n\u2022 Setting the AUTO_INCREMENT value to be used: Server System Variables.\n\u2022 AUTO_INCREMENT Handling in InnoDB\n\u2022 AUTO_INCREMENT and replication: Replication and AUTO_INCREMENT.\n\u2022 Server-system variables related to AUTO_INCREMENT (auto_increment_increment and\nauto_increment_offset) that can be used for replication: Server System Variables.\n41\n42\nChapter 8 Using MySQL with Apache\nThere are programs that let you authenticate your users from a MySQL database and also let you write\nyour log files into a MySQL table.\nYou can change the Apache logging format to be easily readable by MySQL by putting the following into\nthe Apache configuration file:\nLogFormat \\\n\"\\\"%h\\\",%{%Y%m%d%H%M%S}t,%>s,\\\"%b\\\",\\\"%{Content-Type}o\\\", \\\n\\\"%U\\\",\\\"%{Referer}i\\\",\\\"%{User-Agent}i\\\"\"\nTo load a log file in that format into MySQL, you can use a statement something like this:\nLOAD DATA INFILE '/local/access_log' INTO TABLE tbl_name\nFIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' ESCAPED BY '\\\\'\nThe named table should be created to have columns that correspond to those that the LogFormat line\nwrites to the log file.\n43\n44\n",
  "context": "at\nvi\nAccess to Oracle Support for Accessibility",
  "source_file": "resources\\Year 2\\ASP.net and MySQL\\mysql.pdf",
  "line_numbers": [
    133,
    1786
  ]
}