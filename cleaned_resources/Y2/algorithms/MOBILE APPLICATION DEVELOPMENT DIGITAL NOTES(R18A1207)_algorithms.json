{
  "title": "MOBILE APPLICATION DEVELOPMENT DIGITAL NOTES(R18A1207)",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "\u2022 Develop and design apps for mobile devices using SQLiteDatabase.",
  "code": "framework;\nInstalling and running applications on Android Studio, Creating AVDs, Types of Android\napplication; Creating Activities, Activity Life Cycle, Activity states, monitoring state changes;\nUNIT- II\nAndroid application components \u2013 Android Manifest file, Externalizing recourses like Simple\nValues, Drawables, Layouts, Menus, etc,\nBuilding User Interfaces: Fundamental Android UI design, Layouts \u2013 Linear, Relative, Grid and\nTable Layouts. User Interface (UI) Components\nUNIT-III\nFragments \u2013 Creating fragments, Lifecycle of fragments, Fragment states, Adding fragments to\nActivity, adding, removing and replacing fragments with fragment transactions, interfacing\nbetween fragments and Activities,\nUNIT-IV\nIntents and Broadcasts: Using intents to launch Activities, Types of Intents, Passing data to Intents,\nGetting results from Activities, Broadcast Receivers \u2013 Using Intent filters to service implicit\nIntents, Resolving Intent filters;\nUNIT-V\nDatabase: Introduction to SQLite database, creating and opening a database, creating tables, inserting\nretrieving and deleting data;\nTEXT BOOKS:\n1. Professional Android 4 Application Development, Reto Meier, Wiley India, (Wrox), 2012\n2. Android Application Development for Java Programmers, James C Sheusi, Cengage\nLearning, 2013\nREFERENCEs:\n1. Beginning Android 4 Application Development, Wei-Meng Lee, Wiley India(Wrox),\n2013\n2. Android Application Development (with Kitkat Support), Black Book, Pradeep Kothari,\n2014, Dreamtech Press publisher, Kogent Learning Inc.,2014\n3. Android Programming: Pushing the Limits, Erik Hellman, 1st Edition,Wiley Publications,\n2014\n2\nINDEX\nUNIT\nTOPIC PAGE NO\nNO\nIntroduction\nAndroid OS and Features 1-11\nI\nAndroid development framework; 11-18\nInstalling and running applications on Android Studio 18-25\nCreating Activities 26-31\nAndroid applicationcomponents 49-52\nII\nBuilding User Interfaces\nCritical Section problem 52-5\nFragments 66-82\nIII\nIntents and Broadcasts 90-105\nIV\nDatabase 111-119\nV\n3\nUNIT-I\nIntroductionto Android Operating System: Android OSand Features\u2013 Androiddevelopmentframework;\nInstalling andrunningapplicationson Android Studio, Creating AVDs, Typesof Androidapplication;\nCreatingActivities, Activity LifeCycle, Activitystates,monitoringstatechanges;\nIntroduction To Android\nAndroid is an open source and Linux-based Operating System for mobile devices such as smartphones and\ntablet computers. Android was developed by the Open Handset Alliance, led by Google, and other\ncompanies.\nAndroid offers a unified approach to application development for mobile devices which means developers\nneed only develop for Android, and their applications should be able to run on different devices powered by\nAndroid.\nAndroid has come a long way from its humble beginnings,\nas the product of a small start up, all the way to becoming\nthe leading mobile operating system worldwide. Google\u2019s\nintroduction of Project Treble in Android Oreo should\nmake it easier for phone makers to update their devices\nfaster.\nOne challenge for Android device owners that has been an\nissue for the OS ever since it launched is updating it with\nthe latest security patches, for major feature updates.\nGoogle\u2019s supported Nexus and Pixel devices consistently\nreceive regular monthly security updates, and the latest\nversion of the OS.\nOperating Systems\nDifferent OS run on different types of hardware and are designed for different types of\napplications. For example, iOS is designed for iPhones and iPad tablets, while Mac desktops\nand laptops use macOS.\nMicrosoft Windows :\nInitial versions of Windows worked with MS-DOS, providing a modern graphical interface\non top of DOS's traditional text-based commands. The Windows Start menu helps users find\nprograms and files on their devices.\nAPPLE IOS\nApple's iOS is one of the most popular smartphone operating systems, second only to Android. It\nruns on Apple hardware, including iPhones, iPad tablets and iPod Touch media players.\nGOOGLE'S ANDROID OS\nAndroid is the most popular operating system in the world judging by the number of devices\ninstalled. Users can download custom versions of the operating system.\nAPPLE MAC OS\nApple's macOS, successor to the popular OS X operating system, runs on Apple laptops and\n4\ndesktops.. MacOS is known for its user-friendly features, which include Siri and FaceTime.\nLINUX OPERATING SYSTEM\nLinux can be run on a wide variety of hardware and is available free of charge over the internet.\nFeaturesofAndroid\nAndroid is a powerful operating system competing with Apple 4GS and\nsupport great features. Few of them are listed below:\nFeature Description\nBeautiful UI Android OS basic screen provides a beautiful and intuitive user\ninterface.\nConnectivity GSM/EDGE, IDEN, CDMA, EV-DO, UMTS, Bluetooth, Wi-Fi, LTE,\nNFC\nand WiMAX.\nStorage SQLite, a lightweight relational database, is used for data storage\npurposes.\nMedia support H.263, H.264, MPEG-4 SP, AMR, AMR-WB, AAC, HE-AAC, AAC\n5.1, MP3, MIDI, Ogg Vorbis, WAV, JPEG, PNG, GIF, and BMP\nMessaging SMS and MMS\nWeb browser Based on the open-source WebKit layout engine, coupled with\nChrome's V8 JavaScript engine supporting HTML5 and CSS3.\nMulti-touch Android has native support for multi-touch which was initially made\navailable in handsets such as the HTC Hero.\nMulti-tasking User can jump from one task to another and same time various\napplication can run simultaneously.\nResizable widgets Widgets are resizable, so users can expand them to show more content\nor shrink them to save space\nMulti-Language Support single direction and bi-directional text.\n5\nGCM Google Cloud Messaging (GCM) is a service that let developers send\nshort message data to their users on Android devices, without needing\na proprietary sync solution.\nWi-Fi Direct A technology that let apps discover and pair directly, over a high-\nbandwidth peer-to-peer connection.\nAndroid Beam A popular NFC-based technology that let users instantly share, just by\ntouching two NFC-enabled phones together.\nTHE DEVELOPMENT FRAMEWORK: ANDROID ARCHITECTURE\nAndroid operating system is a stack of software components which is roughly divided into five sections\nand four main layers as shown below in the architecture diagram\nAndroid is structured in the form of a software stack comprising applications, an operating\nsystem, run-time environment, middleware, services and libraries. Each layer of the stack, and\nthe corresponding elements within each layer, are tightly integrated and carefully tuned to\nprovide the optimal application development and execution environment for mobile devices.\nTHE LINUX KERNEL\nPositioned at the bottom of the Android software stack, the Linux Kernel provides a level of\nabstraction between the device hardware and the upper layers of the Android software stack.\nBased on Linux version 2.6, the kernel provides pre-emptive multitasking, low-level core\nsystem services such as memory, process and power management in addition to providing a\nnetwork stack and device drivers for hardware such as the device display, Wi-Fi and audio.\nANDROID RUNTIME \u2013 ART\nWhen an Android app is built within Android Studio it is compiled into an intermediate byte-\ncode format (DEX format). When the application is subsequently loaded onto the device, the\nAndroid Runtime (ART) uses a process referred to as Ahead-of-Time (AOT) compilation to\ntranslate the byte-code down to the native instructions required by the device processor. This\nformat is known as Executable and Linkable Format (ELF). Each time the application is\nsubsequently launched, the ELF executable version is run, resulting in faster application\nperformance and improved battery life.\nThis section provides a key component called Dalvik Virtual Machine which is a kind of Java\nVirtual Machine specially designed and optimized for Android.\nThe Dalvik VM makes use of Linux core features like memory management and multi-\nthreading, which is intrinsic in the Java language. The Dalvik VM enables every Android\napplication to run in its own process, with its own instance of the Dalvik virtual machine.\nThe Android runtime also provides a set of core libraries which enable Android application\ndevelopers to write Android applications using standard Java programming language.\n6\nANDROID LIBRARIES\nIn addition to a set of standard Java development libraries (providing support for such general\npurpose tasks as string handling, networking and file manipulation), the Android development\nenvironment also includes the Android Libraries. These are a set of Java-based libraries that\nare specific to Android development.\nC/C++ LIBRARIES\nThe Android runtime core libraries are Java-based and provide the primary APIs for developers\nwriting Android applications. It is important to note, however, that the core libraries do not\nperform much of the actual work and are, in fact, essentially Java\n\u2015wrappers\u2016 around a set of C/C++ based libraries.\nAPPLICATION FRAMEWORK\nThe Application Framework is a set of services that collectively form the environment in which\nAndroid applications run and are managed. This framework implements the concept that\nAndroid applications are constructed from reusable, interchangeable and replaceable\ncomponents. This concept is taken a step further in that an application is also able to publish its\ncapabilities along with any corresponding data so that they can be found and reused by other\napplications.\nAPPLICATIONS\nLocated at the top of the Android software stack are the applications. These comprise both\nthe native applications provided with the particular Android implementation (for example web\nbrowser and email applications) and the third party applications installed by the user after\npurchasing the device.\n7\nINSTALLING AND RUNNING APPLICATIONS ON ANDROID STUDIO\nStep 1 - System Requirements\nThe required tools to develop Android applications are open source and can be downloaded from the Web.\nFollowing is the list of software's you will need before you start your Android application programming.\n\u2022 Java JDK5 or later version\n\u2022 Java Runtime Environment (JRE) 6\n\u2022 Android Studio\nStep 2 - Setup Android Studio\nAndroid Studio is the official IDE for android application development.It works based on IntelliJ IDEA,\nYou can download the latest version of android studio from Android Studio 2.2 Download, If you are\nnew to installing Android Studio on windows,you will find a file, which is named as android-studio- bundle-\n143.3101438-windows.exe.So just download and run on windows machine according to android studio\nwizard guideline.\nIf you are installing Android Studio on Mac or Linux, You can download the latest version from Android\nStudio Mac Download,or Android Studio Linux Download, check the instructions provided along with\nthe downloaded file for Mac OS and Linux. This tutorial will consider that you are going to setup your\nenvironment on Windows machine having Windows 8.1 operating system.\nInstallation\nSo let's launch Android Studio.exe,Make sure before launch Android Studio, Our Machine should\nrequired installed Java JDK. To install Java JDK,take a references of Android environment setup\n8\nOnce you launched Android Studio, its time to mention JDK path or later version in android studio\ninstaller.\nBelow the image initiating JDK to android SDK\nNeed to check the components, which are required to create applications, below the image has\nselected AndroidStudio, AndroidSDK, AndroidVirtualMachineand performance(Intelchip).\n9\nNeed to specify the location of local machine path for Android studio and Android SDK, below the image\nhas taken default location of windows 8.1 x64 bit architecture.\nNeed to specify the ram space for Android emulator by default it would take 512MB of local machine\nRAM.\n10\nAt final stage, it would extract SDK packages into our local machine, it would take a while time to finish\nthe task and would take 2626MB of Hard disk space.\nAfter done all above steps perfectly, you must get finish button and it gonna be open android studio\nproject with Welcome to android studio message as shown below\n11\nYou can start your application development by calling start a new android studio project. in a new installation\nframe should ask Application name, package information and location of the project.\nAfter entered application name, it going to be called select the form factors your application runs on, here\nneed to specify Minimum SDK, in our tutorial, I have declared as API23: Android 6.0(Mashmallow)\n12\nThe next level of installation should contain selecting the activity to mobile, it specifies the default layout\nfor Applications\nAt the final stage it going to be open development tool to write the application code.\n13\nStep 3 - Create Android Virtual Device\nTo test your Android applications, you will need a virtual Android device. So before we start writing our\ncode, let us create an Android virtual device. Launch Android AVD Manager Clicking AVD_Manager icon\nas shown below\nAfter Click on a virtual device icon, it going to be shown by default virtual devices which are present on\nyour SDK, or else need to create a virtual device by clicking Create new Virtual device button\n14\nur AVD\nis created successfully it means your environment is ready for Android application development. If you like, you can close this\nwindow using top-right cross button. Better you re-start your machine and once you are done with this last step, you are ready to\nproceed for your first Android example but before that we will see few more important concepts related to Android Application\nDevelopment.\nHello Word Example\nBefore Writing a Hello word code, you must know about XML tags.To write hello word code, you should\nredirect to App>res>layout>Activity_main.xml\nTo show hello word, we need to call text view with layout ( about text view and layout, you must take\nreferences at Relative Layout and Text View ).\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\" tools:context=\".MainActivity\">\n<TextView\nandroid:text=\"@string/hello_world\"\nandroid:layout_width=\"550dp\"\nandroid:layout_height=\"wrap_content\" />\n15\nNeed to run the program by clicking Run>Run App or else need to call shift+f10key.\nFinally, result should be placed at Virtual devices as shown above.\nCREATING AN ANDROID PROJECT\nCREATE THE APP PROJECT\n1. Open Android Studio if it is not already opened.\n2. In the main Welcome to Android Studio window, click StartanewAndroid Studioproject.\n3. In the Create Android Project window, enter Hello World for the Application name.\n4. Verify that the default Project location is where you want to store your Hello World\napp and other Android Studio projects, or change it to your preferred directory.\n5. Accept the default android.example.com for Company Domain, or create a unique\ncompany domain. If you are not planning to publish your app, you can accept the\ndefault. Be aware that changing the package name of your app later is extra work.\n6. Leave unchecked the options to Include C++support and Include Kotlin support, and click\nNext.\n7. On the TargetAndroidDevicesscreen, PhoneandTabletshouldbeselected. Ensure that\nAPI15:Android4.0.3IceCreamSandwichis set to Minimum SDK; if not, usethe popup\nmenu to set it.\n16\nhese are the settings. As of this writing, these settings make Hello World app compatible\nwith 9% of Android devices active on the Google Play Store.\n8. Leave unchecked the Include Instant App support and all other options. Then click\nNext. If your project requires additional components for your chosen target SDK,\nAndroid Studio will install them automatically.\n9. The Add an Activity window appears. An Activity is a single, focused thing that the\nuser can do. It is a crucial component of any Android app. An Activity typically has a\nlayout associated with it that defines how UI elements appear on a screen. Android\nStudio provides Activity templates to help you get started. For the Hello World project,\nchoose Empty Activity as shown below, and click Next.\n10. The Configure Activity screen appears (which differs depending on which template\nyou chose in the previous step). By default, the empty Activity provided by the template\nis named MainActivity. You can change this if you want, but this lesson uses\nMainActivity.\n11. Make sure that the Generate Layout file option is checked. The layout name by\ndefault is activity_main. You can change this if you want, but this lesson uses\nactivity_main.\n12. Make sure that the Backwards Compatibility (App Compat) option is checked. This\nensures that your app will be backwards-compatible with previous versions of Android.\n13. Click Finish.\nAndroid Studio creates a folder for your projects, and builds the project\nwith Gradle. The Android Studio editor appears. Follow these steps:\n1. Click the activity_main.xmltab to see the layout editor.\n2. Click the layout editor Design tab, if not already selected, to show a graphical rendition\nof the layout as shown below.\n3. Click the MainActivity.java tab to see the code editor as shown below.\nExplore the Project > Android pane\n.\n1. If not already selected, click the Project tab in the vertical tab column on the left\nside of the Android Studio window. The Project pane appears.\n2. To view the project in the standard Android project hierarchy, choose Android\nfrom the popup menu at the top of the Project pane, as shown below.\nExplore the manifests folder\ne manifests folder contains files that provide essential information about your app to the\nAndroid system, which the system must have before it can run any of the app's code.\n17\n1. Expand the manifests folder.\n2. Open the AndroidManifest.xml file.\nThe AndroidManifest.xml file describes all of the components of your Android app. All\ncomponents for an app, such as each Activity, must be declared in this XML file. In other\ncourse lessons you will modify this file to add features and feature permissions. For an\nintroduction, see App Manifest Overview.\nRUN ON EMULATOR\n1. Lets create an android virtual device (avd). In order to run an emulator on your computer,\nyou have to create a configuration that describes the virtual device. In Android Studio, select\nTools > Android > AVD Manager, or click the AVD Manager icon in the toolbar.\nThe Your Virtual Devices screen appears. If you've already created virtual devices, the screen\nshows them; otherwise you see a blank list.\n2. Click the +Create Virtual Device. The Select Hardware window appears showing a list of\npre configured hardware devices. For each device, the table provides a column for its diagonal\ndisplay size (Size), screen resolution in pixels (Resolution), and pixel density (Density).\n3. Choose a device such as Nexus 5x or Pixel XL, and click Next. The System Image screen appears.\n4. Click the Recommended tab if it is not already selected, and choose which version of the\nAndroid system to run on the virtual device (such as Oreo).Click the link to start the download,\nand click Finishwhen it's done.\n5. After choosing a system image, click Next. The Android Virtual Device (AVD) window\nappears. You can also change the name of the AVD. Check your configuration and click Finish.\nRun the app on the virtual device\nLet\u2019s run your Hello World app.\n1. In Android Studio, choose Run> Runapp or click the Run icon in thetoolbar.\n2. TheSelectDeploymentTarget window,underAvailableVirtual Devices,selectthe\nvirtual device, which you just created, and click OK\nThe emulator starts and boots just like a physical device. Your app builds, and once the\nemulato\nr is ready, Android Studio will upload the app to the emulator and run it.\n18\nDEPLOY IT ON USB-CONNECTED ANDROID DEVICE\nConfigure the Android device\nIn order to install an application directly to your device, you need to configure it to use a\nUSB connection. The configuration settings vary by device.\nFor Android 4.2 and later devices, you need to enable Developer options by opening\nSettings, click About then click the Build number item seven items. If you do not do this,\nyou will not see the Developer options item in Settings.\n1. Open Settings.\n2. Click Security.\n3. Enable Unknown sources, that is, check this option. This permits the device to\ninstall apps that do not originate from Google Play.\n4. Back out to Settings.\n5. Click Developer options.\n6. If available: Set the switch in the title bar to on.\n7. Enable USB debugging, that is, check this option. This permits the device to install\napps over a USB connection.\n8. Optional: Enable Stay awake, that is, check this option. This option keeps the\nscreen on and disables the lock screen while the device is connected to USB.\n9. Optional: Enable Allow mock locations, that is, check this option. This option\ncreates fake GPS locations to test location services.\n10. Back out of or close\nSettings. Install the USB driver\n(Windows only)\nDevelopers on Windows may need to install a USB driver specific to the manufacturer and\nmodel of the device on which they'll be testing. The driver enables your Windows computer\nto communicate with your Android device. Google provides download links to the drivers\nat Android Developer: OEM USB Drivers.\nConnect the device\nConnect the Android device to your computer using an USB cord. Note that some USB\ncables are only power cables and do not allow communications with the device. Make sure\nyou use a USB cable that allows a data connection.\nFor 4.2 devices, an \"Allow USB debugging?\" dialog will appear once connected via\nUSB. Click the OK button.\nDeploy the application using Axway Appcelerator Studio\nOnce you have configured your device and connected it to your computer's USB port, you\nare ready to deploy your app to it.\n19\nIn Studio, first select the project in the Project Explorer view, then in the global tool bar,\nselect Run from the Launch Mode drop-down list and an Android device from the Target\ndrop-down list under the Android Application Installer category. If the Launch\nAutomatically option is enabled under the Target drop- down list, the application will be\nautomatically launched after the device is selected. If not, you need to click the Run button\nto start the build process. Your app will be built, installed to your device and automatically\nlaunched\nCREATING ACTIVITIES\nAn activity is the single screen in android. It is like window or frame of Java.\nBy the help of activity, you can place all your UI components or widgets in a single screen.\nAn activity represents a single screen with a user interface just like window or frame of\nJava.Android activity is the subclass of ContextThemeWrapper class.\n20\nAndroid Activity Lifecycle\nLet's see the lifecycle methods of android activity.\nThe Activity class\ndefines the following call backs i.e. events. You don't need to implement all the callbacks methods.\nHowever, it's important that you understand each one and implement those that ensure your app behaves\nthe way users expect.\n21\nSr.No Callback & Description\n1 onCreate()\nThis is the first callback and called when the activity is first created.\nonStart()\n2\nThis callback is called when the activity becomes visible to the user.\nonResume()\n3\nThis is called when the user starts interacting with the application.\nonPause()\n4\nThe paused activity does not receive user input and cannot execute any code and call ed\nwhen the c activity is being resumed.\nonStop()\n5\nThis callback is called when the activity is no longer visible.\nonDestroy()\n6\nThis callback is called before the activity is destroyed by the system.\nonRestart()\nThis callback is called when the activity restarts after stopping it.\n22\nxample\nThis example will take you through simple steps to show Android application activity life cycle. Follow\nthe following steps to modify the Android application we created in Hello World Example chapter \u2212\nStep Description\n1 You will use Android studio to create an Android application and name it as HelloWorld under a pack ge\nWorld Example chapter.\n2 Modify main activity file MainActivity.java as explained below. Keep rest of the files unchanged.\n3 Run the application to launch Android emulator and verify the result of the changes done in the applic tio\nPage 23\n23\nAndroid Activity Lifecycle Example\nIt provides the details about the invocation of life cycle methods of activity. In this example, we are\ndisplaying the content on the logcat.\nFile: MainActivity.java\npackage example.mrcet.com.activitylifecycle;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.util.Log;\npublic class MainActivity extends Activity\n{ @Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nLog.d(\"lifecycle\",\"onCreate invoked\");\n}\n@Override\nprotected void onStart() {\nsuper.onStart();\nLog.d(\"lifecycle\",\"onStart\ninvoked\");\n}\n@Override\nprotected void onResume() {\nsuper.onResume();\nLog.d(\"lifecycle\",\"onResume\ninvoked\");\n}\n@Override\nprotected void onPause() {\nsuper.onPause();\nLog.d(\"lifecycle\",\"onPause\ninvoked\");\n}\n@Override\nprotected void onStop() {\nsuper.onStop();\nLog.d(\"lifecycle\",\"onStop\ninvoked\");\n}\n@Override\nprotected void onRestart() {\nsuper.onRestart();\nLog.d(\"lifecycle\",\"onRestart\ninvoked\");\n}\n24\nAn activity class loads all the UI component using the XML file available in res/layout folder of the\nproject. Following statement loads UI components from res/layout/activity_main.xml file:\nsetContentView(R.layout.activity_main);\nAn application can have one or more activities without any restrictions. Every activity you define for your\napplication must be declared in your AndroidManifest.xml file and the main activity for your app must be\ndeclared in the manifest with an <intent-filter> that includes the MAIN action and LAUNCHER category\nas follows:\nFile: activity_main.xml\n1. <?xml version=\"1.0\" encoding=\"utf-8\"?>\n2. <android.support.constraint.ConstraintLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\n3. xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n4. xmlns:tools=\"http://schemas.android.com/tools\"\n5. android:layout_width=\"match_parent\"\n6. android:layout_height=\"match_parent\"\n7. tools:context=\"example.mrcet.com.activitylifecycle.MainActivity\"> 8.\n9. <TextView\n10. android:layout_width=\"wrap_content\"\n11. android:layout_height=\"wrap_content\"\n12. android:text=\"Hello World!\"\n13. app:layout_constraintBottom_toBottomOf=\"parent\"\n14. app:layout_constraintLeft_toLeftOf=\"parent\"\n15. app:layout_constraintRight_toRightOf=\"parent\"\n16. app:layout_constraintTop_toTopOf=\"parent\" />\n1.\n18. </android.support.constraint.ConstraintLayout>\n25\nUNIT - II\nAndroidapplicationcomponents\u2013 Android Manifestfile, Externalizingrecourseslike Simple Values,\nDrawables, Layouts, Menus, etc,\nBuilding User Interfaces: Fundamental Android UI design, Layouts \u2013 Linear, Relative, Grid and Table Layouts. User\nInterface (UI)Components\nANDROID-APPLICATIONCOMPONENTS\nApplication components are the essential building blocks of an Android application. These components are\nloosely coupled by the application manifest file AndroidManifest.xml that describes each component of the\napplication and how they interact.\nThere are following four main components that can be used within an Android application \u2212\nSr.No Components & Description\n1 Activities\nThey dictate the UI and handle the user interaction to the smart phone screen.\nServices\n2\nThey handle background processing associated with an application.\nBroadcast Receivers\n3\nThey handle communication between Android OS and applications.\nContent Providers\n4\nThey handle data and database management issues.\nActivities\nAn activity represents a single screen with a user interface,in-short Activity performs actions on the screen.\nFor example, an email application might have one activity that shows a list of new emails, another activity\nto compose an email, and another activity for reading emails. If an application has more than one activity,\nthen one of them should be marked as the activity that is presented when the application is launched.\nAn activity is implemented as a subclass of Activity class as follows \u2212\npublic class MainActivity extends Activity {\n}\nServices\n26\nservice is a component that runs in the background to perform long-running operations. For example, a service might play\nmusic in the background while the user is in a different application, or it might fetch data over the network without blocking\nuser interaction with an activity.\nA service is implemented as a subclass of Service class as follows \u2212\npublic class MyService extends Service {\n}\nBroadcast Receivers\nBroadcast Receivers simply respond to broadcast messages from other applications or from the system. For\nexample, applications can also initiate broadcasts to let other applications know that some data has been\ndownloaded to the device and is available for them to use, so this is broadcast receiver who will intercept\nthis communication and will initiate appropriate action.\nA broadcast receiver is implemented as a subclass of BroadcastReceiver class and each message is\nbroadcaster as an Intent object.\npublic class MyReceiver extends\nBroadcastReceiver { public void\nonReceive(context,intent){}\nContent Providers\nA content provider component supplies data from one application to others on request. Such requests are\nhandled by the methods of the ContentResolver class. The data may be stored in the file system, the database\nor somewhere else entirely.\nA content provider is implemented as a subclass of ContentProvider class and must implement a standard\nset of APIs that enable other applications to perform transactions.\npublic class MyContentProvider extends\nContentProvider { public void onCreate(){}\n}\nWe will go through these tags in detail while covering application components in individual chapters.\nAdditional Components\nThere are additional components which will be used in the construction of above mentioned entities, their\nlogic, and wiring between them. These components are \u2212\nS.No Components & Description\n1 Fragments\nRepresents a portion of user interface in an Activity.\nViews\n2\nUI elements that are drawn on-screen including buttons, lists forms etc.\n27\nLayouts\n3\nView hierarchies that control screen format and appearance of the views.\nIntents\n4\nMessages wiring components together.\nResources\n5\nExternal elements, such as strings, constants and drawable pictures.\nManifest\n6\nConfiguration file for the application.\nANDROID MANIFEST FILE\nThe AndroidManifest.xml file contains information of your package, including components of the\napplication such as activities, services, broadcast receivers, content providers etc.\nIt performs some other tasks also:\no It is responsible to protect the application to access any protected parts by providing the\npermissions.\no It also declares the android api that the application is going to use.\no It lists the instrumentation classes. The instrumentation classes provides profiling and other\ninformations. These informations are removed just before the application is published etc.\nThis is the required xml file for all the android application and located inside the root directory.\nManifest file:\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.javatpoint.hello\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\" >\n<uses-sdk\nandroid:minSdkVersion=\"8\"\nandroid:targetSdkVersion=\"15\" />\n<application android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\" >\n28\n<activity\nandroid:name=\".MainActivity\n\"\nandroid:label=\"@string/title_activity_main\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n</application>\n</manifest>\nEXTERNALIZING RESOURCES:\nThere are many more items which you use to build a good Android application. Apart from coding\nfor the application, you take care of various other resources like static content that your code uses, such\nas bitmaps, colors, layout definitions, user interface strings, animation instructions, and more. These\nresources are always maintained separately in various sub-directories under res/ directory of the project.\nThis tutorial will explain you how you can organize your application resources, specify alternative\nresources and access them in your applications.\nOrganize resource in Android Studio\nMyProject/\napp/\nmanifest/\nAndroidManifest.xm\nl\njava/\nMyActivity.java\nres/\ndrawable/\nicon.png\nlayout/\nactivity_main.xm\nl info.xml\nvalues/\nstrings.xml\nSr.No. Directory & Resource Type\n29\n1\nanim/\nXML files that define property animations. They are saved in res/anim/ folder and accessed R.a\nfrom the\n2\ncolor/\nXML files that define a state list of colors. They are saved in res/color/ and accessed from r cla\nthe R.colo\n3\ndrawable/\nio\nImage files like .png, .jpg, .gif or XML files that are compiled into bitmaps, state lists,\nshapes, animat accessed from the R.drawable class.\n4\nlayout/\nayo\nXML files that define a user interface layout. They are saved in res/layout/ and accessed\nfrom the R.l\n5\nmenu/\nXML files that define application menus, such as an Options Menu, Context Menu, or Sub\nMenu. T the R.menu class.\n6\nraw/\nou\nArbitrary files to save in their raw form. You need to call Resources.openRawResource()\nwith the re files.\nvalues/\ne fi\nXML files that contain simple values, such as strings, integers, and colors. For example,\nhere are som in this directory \u2212\n\u2022 arrays.xml for resource arrays, and accessed from the R.array class.\n\u2022 integers.xml for resource integers, and accessed from the R.integerclass.\n\u2022 bools.xml for resource boolean, and accessed from the R.bool class.\n\u2022 colors.xml for color values, and accessed from the R.color class.\n\u2022 dimens.xml for dimension values, and accessed from the R.dimen class.\n\u2022 strings.xml for string values, and accessed from the R.string class.\n\u2022 styles.xml for styles, and accessed from the R.style class.\n30\n8\nxml/\nArbitrary XML files that can be read at runtime by calling Resources.getXML(). You can save\nvarious confi\nAlternative Resources\nYour application should provide alternative resources to support specific device configurations. For\nexample, you should include alternative drawable resources ( i.e.images ) for different screen resolution\nand alternative string resources for different languages. At runtime, Android detects the current device\nconfiguration and loads the appropriate resources for your application.\nTo specify configuration-specific alternatives for a set of resources, follow the following steps \u2212\n\u2022 Create a new directory in res/ named in the form <resources_name>-<config_qualifier>. Here\nresources_name will be any of the resources mentioned in the above table, like layout, drawable\netc. The qualifier will specify an individual configuration for which these resources are to be used.\nYou can check official documentation for a complete list of qualifiers for different type of resources.\n\u2022 Save the respective alternative resources in this new directory. The resource files must be named\nexactly the same as the default resource files as shown in the below example, but these files will\nhave content specific to the alternative. For example though image file name will be same but for\nhigh resolution screen, its resolution will be high.\nBelow is an example which specifies images for a default screen and alternative images for high\nresolution screen.\nMyProject/\napp/\nmanifest/\nAndroidManifest.xm\nl\njava/\nMyActivity.java\nres/\ndrawable/\nicon.png\nbackground.png\ndrawable-hdpi/\nicon.png\nbackground.png\nlayout/\nactivity_main.xm\nl info.xml\nvalues/\nstrings.xml\nBelow is another example which specifies layout for a default language and alternative layout for Arabic\n31\nlanguage.\nMyProject/\napp/\nmanifest/\nAndroidManifest.xm\nl\njava/\nMyActivity.java\nres/\ndrawable/\nicon.png\nbackground.png\ndrawable-hdpi/\nicon.png\nbackground.png\nlayout/\nactivity_main.xm\nl info.xml\nlayout-ar/\nmain.xml\nvalues/\nstrings.xml\nAccessing Resources\nDuring your application development you will need to access defined resources either in your code, or in\nyour layout XML files. Following section explains how to access your resources in both the scenarios \u2212\nAccessing Resources in Code\nWhen your Android application is compiled, a R class gets generated, which contains resource IDs for all\nthe resources available in your res/ directory. You can use R class to access that resource using sub-\ndirectory and resource name or directly resource ID.\nExample\nTo access res/drawable/myimage.png and set an ImageView you will use following code \u2212\nImageView imageView = (ImageView)\nfindViewById(R.id.myimageview);\nHere first line of the code make use of R.id.myimageview to get ImageView defined with id\nmyimageview in a Layout file. Second line of code makes use of R.drawable.myimage to get an image with\nname myimage available in drawable sub-directory under/res.\nExample\nConsider next example where res/values/strings.xml has following definition \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"hello\">Hello, World!</string>\n</resources>\nNow you can set the text on a TextView object with ID msg using a resource ID as follows \u2212\nTextView msgTextView = (TextView)\nfindViewById(R.id.msg);\nmsgTextView.setText(R.string.hello); 32\nandroid:layout_width=\"fill_parent\n\"\nandroid:layout_height=\"fill_paren\nt\" android:orientation=\"vertical\" >\n<TextView android:id=\"@+id/text\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\n\" android:text=\"Hello, I am a\nTextView\" />\n<Button android:id=\"@+id/button\"\nandroid:layout_width=\"wrap_content\n\"\nandroid:layout_height=\"wrap_conte\nnt\" android:text=\"Hello, I am a\nThis application code will load this layout for an Activity, in the onCreate() method as follows \u2212\npublic void onCreate(Bundle\nsavedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nAccessing Resources in XML\nConsider the following resource XML res/values/strings.xml file that includes a color resource and a\nstring resource \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<color name=\"opaque_red\">#f00</color>\n<string name=\"hello\">Hello!</string>\n</resources>\nNow you can use these resources in the following layout file to set the text color and text string as\nfollows \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<EditText\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\"\nandroid:textColor=\"@color/opaque_red\"\nNow if you will go through previous chapter once again where I have explained Hello World! example,\nand I'm sure you will have better understanding on all the concepts explained in this chapter. So I highly\nrecommend to check previous chapter for working example and check how I have used various resources\nat very basic level.\n33\nBuilding User Interfaces\nAndroid provides several common UI controls, widgets, and Layout Managers.\nFor most graphical applications, it\u2019s likely that you\u2019ll need to extend and modify these\nstandard Views \u2014 or create composite or entirely new Views \u2014 to provide your own user\nexperience.\nThe basic building block for user interface is a View object which is created from the View class and\noccupies a rectangular area on the screen and is responsible for drawing and event handling. View is the\nbase class for widgets, which are used to create interactive UI components like buttons, text fields, etc.\nThe ViewGroup is a subclass of View and provides invisible container that hold other Views or other\nViewGroups and define their layout properties.\nAt third level we have different layouts which are subclasses of ViewGroup class and a typical layout\ndefines the visual structure for an Android user interface and can be created either at run time using\nView/ViewGroup objects or you can declare your layout using simple XML file main_layout.xml\nwhich is located in the res/layout folder of your project.\nLayout params\nThis tutorial is more about creating your GUI based on layouts defined in XML file. A layout may contain\nany type of widgets such as buttons, labels, textboxes, and so on. Following is a simple example of XML\nfile having LinearLayout \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_paren\nt\" android:orientation=\"vertical\" >\n<TextView android:id=\"@+id/text\"\nandroid:layout_width=\"wrap_content\n\"\n34\nandroid:text=\"This is a TextView\" />\n<Button android:id=\"@+id/button\"\nandroid:layout_width=\"wrap_content\n\"\nandroid:layout_height=\"wrap_conte\nnt\" android:text=\"This is a Button\" />\n<!-- More GUI components go here -->\n</LinearLayout>\nOnce your layout has created, you can load the layout resource from your application code, in\nyour Activity.onCreate() callback implementation as shown below \u2212\npublic void onCreate(Bundle\nsavedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nAndroid Layout Types\nThere are number of Layouts provided by Android which you will use in almost all the Android\napplications to provide different view, look and feel.\nSr.No Layout & Description\n1 Linear Layout\nLinearLayout is a view group that aligns all children in a single direction, vertically or horizontally.\n2 Relative Layout\nRelativeLayout is a view group that displays child views in relative positions.\n3 Table Layout\nTableLayout is a view that groups views into rows and columns.\n4 Absolute Layout\nAbsoluteLayout enables you to specify the exact location of its children.\n5 Frame Layout\nThe FrameLayout is a placeholder on screen that you can use to display a single view.\n6 List View\nListView is a view group that displays a list of scrollable items.\n35\nGrid View\nGridView is a ViewGroup that displays items in a two-dimensional, scrollable grid.\nLayout Attributes\nEach layout has a set of attributes which define the visual properties of that layout. There are few common\nattributes among all the layouts and their are other attributes which are specific to that layout. Following\nare common attributes and will be applied to all the layouts:\nSr.No Attribute & Description\n1\nandroid:id\nThis is the ID which uniquely identifies the view.\n2\nandroid:layout_width\nThis is the width of the layout.\n3\nandroid:layout_height\nThis is the height of the layout\n4\nandroid:layout_marginTop\nThis is the extra space on the top side of the layout.\n5\nandroid:layout_marginBottom\nThis is the extra space on the bottom side of the layout.\n6\nandroid:layout_marginLeft\nThis is the extra space on the left side of the layout.\nandroid:layout_marginRight\nThis is the extra space on the right side of the layout.\n8\nandroid:layout_gravity\nThis specifies how child Views are positioned.\n9\nandroid:layout_weight\nThis specifies how much of the extra space in the layout should be allocated to the View.\n10\nandroid:layout_x\nThis specifies the x-coordinate of the layout.\n36\n11\nandroid:layout_y\nThis specifies the y-coordinate of the layout.\n12\nandroid:layout_width\nThis is the width of the layout.\n13\nandroid:paddingLeft\nThis is the left padding filled for the layout.\n14\nandroid:paddingRight\nThis is the right padding filled for the layout.\n15\nandroid:paddingTop\nThis is the top padding filled for the layout.\n16\nandroid:paddingBottom\nThis is the bottom padding filled for the layout.\nHere width and height are the dimension of the layout/view which can be specified in terms of dp (Density-\nindependent Pixels), sp ( Scale-independent Pixels), pt ( Points which is 1/2 of an inch), px( Pixels), mm (\nMillimeters) and finally in (inches).\nYou can specify width and height with exact measurements but more often, you will use one of these\nconstants to set the width or height \u2212\n\u2022 android:layout_width=wrap_content tells your view to size itself to the dimensions required by its\ncontent.\n\u2022 android:layout_width=fill_parent tells your view to become as big as its parent view.\n\u2022 Input controls are the interactive components in your app's user interface. Android provides\na wide variety of controls you can use in your UI, such as buttons, text fields, seek bars,\ncheck box, zoom buttons, toggle buttons, and many more.\n37\nUI Elements\n\u2022 A View is an object that draws something on the screen that the user can interact with and a\nViewGroup is an object that holds other View (and ViewGroup) objects in order to define the layout\nof the user interface.\n\u2022 You define your layout in an XML file which offers a human-readable structure for the layout,\nsimilar to HTML. For example, a simple vertical layout with a text view and a button looks like\nthis\n\u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_paren\n<TextView android:id=\"@+id/text\"\nandroid:layout_width=\"wrap_conten\nt\"\nandroid:layout_height=\"wrap_conte\nnt\" android:text=\"I am a TextView\"\n/>\n<Button android:id=\"@+id/button\"\nandroid:layout_width=\"wrap_content\n\"\nandroid:layout_height=\"wrap_conte\n\u2022 Android UI Controls\n\u2022 There are number of UI controls provided by Android that allow you to build the graphical user\ninterface for your app.\nSr.No UI Control & Description\n.\n1 TextView\nThis control is used to display text to the user.\n2 EditText\nEditText is a predefined subclass of TextView that includes rich editing capabilities.\n3 AutoCompleteTextView\nThe AutoCompleteTextView is a view that is similar to EditText, except that it shows a list of\ncompletion suggestions automatically while the user is typing.\n38\n4 Button\nA push-button that can be pressed, or clicked, by the user to perform an action.\n5 ImageButton\nAn ImageButton is an AbsoluteLayout which enables you to specify the exact location of its\nchildren. This shows a button with an image (instead of text) that can be pressed or clicked by the\nuser.\n6 CheckBox\nAn on/off switch that can be toggled by the user. You should use check box when presenting users\nwith a group of selectable options that are not mutually exclusive.\nToggleButton\nAn on/off button with a light indicator.\n8 RadioButton\nThe RadioButton has two states: either checked or unchecked.\n9 RadioGroup\nA RadioGroup is used to group together one or more RadioButtons.\n10 ProgressBar\nThe ProgressBar view provides visual feedback about some ongoing tasks, such as when you\nare performing a task in the background.\n11 Spinner\nA drop-down list that allows users to select one value from a set.\n12 TimePicker\nThe TimePicker view enables users to select a time of the day, in either 24-hour mode or\nAM/PM mode.\n13 DatePicker\nThe DatePicker view enables users to select a date of the day.\n39\n\u2022 Create UI Controls\n\u2022 Input controls are the interactive components in your app's user interface. Android provides a wide\nvariety of controls you can use in your UI, such as buttons, text fields, seek bars, check box, zoom\nbuttons, toggle buttons, and many more.\n40\n\u2022 As explained in previous chapter, a view object may have a unique ID assigned to it which will\nidentify the View uniquely within the tree. The syntax for an ID, inside an XML tag is \u2212\n\u2022 android:id=\"@+id/text_id\"\n\u2022 To create a UI Control/View/Widget you will have to define a view/widget in the layout file and\nassign it a unique ID as follows \u2212\n\u2022 <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\u2022 <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\u2022 android:layout_width=\"fill_parent\"\n\u2022 android:layout_height=\"fill_parent\"\n\u2022 android:orientation=\"vertical\" >\n\u2022\n\u2022 <TextView android:id=\"@+id/text_id\"\n\u2022 android:layout_width=\"wrap_content\"\n\u2022 android:layout_height=\"wrap_content\"\n\u2022 android:text=\"I am a TextView\" />\n\u2022 </LinearLayout>\n\u2022 Then finally create an instance of the Control object and capture it from the layout, use the\nfollowing \u2212\n\u2022 TextView myText = (TextView) findViewById(R.id.text_id);\nText View:\nATextView displaystexttotheuser andoptionallyallows them toeditit. ATextView isa complete text\neditor, howeverthebasicclass is configured to not allow editing.\nTextView Attributes\nFollowing are the important attributes related to TextView control. You can check Android official\ndocumentation for complete list of attributes and related methods which you can use to change these\nattributes are run time.\nAttribute & Description\nandroid:id\nThis is the ID which uniquely identifies the control.\nandroid:inputType\nThe type of data being placed in a text field. Phone, Date, Time, Number, Password etc.\nandroid:maxHeight\nMakes the TextView be at most this many pixels tall.\n41\nandroid:maxWidth\nMakes the TextView be at most this many pixels wide.\nandroid:minHeight\nMakes the TextView be at least this many pixels tall.\nandroid:minWidth\nMakes the TextView be at least this many pixels wide.\nandroid:password\nWhether the characters of the field are displayed as password dots instead of themselves. Possible value either \"t\nandroid:phoneNumber\nIf set, specifies that this TextView has a phone number input method. Possible value either \"true\" or \"false\".\nandroid:text\nText to display.\nandroid:textAllCaps\nPresent the text in ALL CAPS. Possible value either \"true\" or \"false\".\nandroid:textColor\nText color. May be a color value, in the form of \"#rgb\", \"#argb\", \"#rrggbb\", or \"#aarrggbb\".\nandroid:textSize\nSize of the text. Recommended dimension type for text is \"sp\" for scaled-pixels (example: 15sp).\nExample\nThis example will take you through simple steps to show how to create your own Android application\nusing Linear Layout and TextView.\nStep Description\n1 You will use Android studio to create an Android application and name it as demo under a\npackage com.example.demo as explained in the Hello World Example chapter.\n42\n2 Modify src/MainActivity.java file to add necessary code .\n2 Modify the default content of res/layout/activity_main.xml file to include Android UI control.\n3 No need to change default string constants at string.xml file. Android studio takes care of\ndefault string constants.\n4 Run the application to launch Android emulator and verify the result of the changes done in the\napplication.\nFollowing is the content of the modified main activity file src/com.example.demo/MainActivity.java.\nThis file can include each of the fundamental lifecycle methods.\npackage com.example.demo;\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.view.Menu;\nimport android.view.View;\nimport\nandroid.widget.TextView;\nimport android.widget.Toast;\npublic class MainActivity extends\nActivity { @Override\nprotected void onCreate(Bundle\nsavedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\n//--- text view---\nTextView txtView = (TextView) findViewById(R.id.text_id);\n}\nFollowing will be the content of res/layout/activity_main.xmlfile \u2212\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\n43\ntools:context=\".MainActivity\" >\n<TextView\nandroid:id=\"@+id/text_id\"\nandroid:layout_width=\"300dp\n\"\nandroid:layout_height=\"200d\np\"\nandroid:capitalize=\"character\ns\" android:text=\"hello_world\"\nandroid:textColor=\"@android:color/holo_blue_dark\"\nandroid:textColorHighlight=\"@android:color/primary_text_d\nark\" android:layout_centerVertical=\"true\"\nandroid:layout_alignParentEnd=\"true\"\nandroid:textSize=\"50dp\"/>\nFollowing will be the content of res/values/strings.xml to define two new constants \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">demo</string>\n</resources>\nFollowing is the default content of AndroidManifest.xml \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.demo\" >\n<application\nandroid:allowBackup=\"tru\ne\"\nandroid:icon=\"@drawable/ic_launch\ner\"\nandroid:label=\"@string/app_name\"\nandroid:supportsRtl=\"true\"\nandroid:theme=\"@style/AppTheme\"\n>\n<activity\nandroid:name=\"com.example.demo.MainActiv\nity\" android:label=\"@string/app_name\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n44\nLet's try to run your demo application. I assume you had created your AVD while doing environment setup.\nTo run the app from Android studio, open one of your project's activity files and click Run icon from the\ntoolbar. Android studio installs the app on your AVD and starts it and if everything is fine with your setup\nand application, it will display following Emulator window \u2212\nA EditText is an overlay over TextView that configures itself to be editable. It is the predefined\nsubclass of TextView that includes rich editing capabilities.\nStyles of edit text\nEditText Attributes\nFollowing are the important attributes related to EditText control. You can check Android official\ndocumentation for complete list of attributes and related methods which you can use to change these\nattributes are run time.\nInherited from android.widget.TextView Class \u2212\n45\nAttribute & Description\nandroid:autoText\nIf set, specifies that this TextView has a textual input method and automatically corrects some\ncommon spell\nandroid:drawableBottom\nThis is the drawable to be drawn below the text.\nandroid:drawableRight\nThis is the drawable to be drawn to the right of the text.\nandroid:editable\nIf set, specifies that this TextView has an input method.\nandroid:text\nThis is the Text to display.\nInherited from android.view.View Class \u2212\n46\nSr.No Attribute & Description\n1\nandroid:background\nThis is a drawable to use as the background.\n2\nandroid:contentDescription\nThis defines text that briefly describes content of the view.\n3\nandroid:id\nThis supplies an identifier name for this view.\n4\nandroid:onClick\n6\nThis is the name of the method in this View's context to invoke when the view is clicked.\n5 android:visibility\nThis controls the initial visibility of the view.\nExample\nThis example will take you through simple steps to show how to create your own Android application\nusing Linear Layout and EditText.\nStep Description\n1 You will use Android studio IDE to create an Android application and name it as demo under a packa\nExample chapter.\n2 Modify src/MainActivity.java file to add a click event.\n3 Modify the default content of res/layout/activity_main.xml file to include Android UI control.\n47\ntio\nthe content of the modified main activity file src/com.example.demo/MainActivity.java. This file\ncan include each of the fundamental lifecycle methods.\npackage com.example.demo;\nimport android.os.Bundle;\nimport\nandroid.app.Activity;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport\nandroid.widget.EditText;\nimport android.widget.Toast;\n48\nEditText\neText; Button\nbtn;\n@Override\nprotected void onCreate(Bundle\nsavedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\neText = (EditText)\nfindViewById(R.id.edittext); btn = (Button)\nfindViewById(R.id.button);\nbtn.setOnClickListener(new\nOnClickListener() {\npublic void onClick(View v) {\nString str = eText.getText().toString();\nToast msg =\nToast.makeText(getBaseContext(),str,Toast.LENGTH_LONG);\nmsg.show();\nFollowing will be the content of res/layout/activity_main.xml file \u2212\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\ntools:context=\".MainActivity\" >\n<TextView\nandroid:id=\"@+id/textView1\"\nandroid:layout_width=\"wrap_conten\nt\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignParentLeft=\"true\"\nandroid:layout_alignParentTop=\"true\"\nandroid:layout_marginLeft=\"14dp\"\nandroid:layout_marginTop=\"18dp\"\nandroid:text=\"@string/example_edittext\"\n/>\n<Button\nandroid:id=\"@+id/button\n\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignLeft=\"@+id/textView\n1\"\n49\nFollowing will be the content of res/values/strings.xml to define these new constants \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">demo</string>\n<string name=\"example_edittext\">Example showing EditText</string>\n<string name=\"show_the_text\">Show the Text</string>\n<string name=\"enter_text\">text changes</string>\n</resources>\nFollowing is the default content of AndroidManifest.xml \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.demo\" >\n<application\nandroid:allowBackup=\"tru\ne\"\nandroid:icon=\"@drawable/ic_launch\ner\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\"\n>\n<activity\nandroid:name=\"com.example.demo.MainActiv\nity\" android:label=\"@string/app_name\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n</application>\nLet's try to run your demo application. I assume you had created your AVD while doing environment\nsetup. To run the app from Android studio, open one of your project's activity files and click Run icon\nPage 51\n50\nfrom the toolbar. Android Studio installs the app on your AVD and starts it and if everything is fine with\nyour setup and application, it will display following Emulator window \u2212\nButton:\nA Button is a Push-button which can be pressed, or clicked, by the user to perform an action.\nButton Attributes\n51\nFollowing are the important attributes related to Button control. You can check Android official documentation for complete\nlist of attributes and related methods which you can use to change these attributes are run time.\nInherited from android.widget.TextView Class \u2212\nSr.No Attribute & Description\n1\nandroid:autoText\nIf set, specifies that this TextView has a textual input method and automatically corrects some\ncommon spelling errors.\n2\nandroid:drawableBottom\nThis is the drawable to be drawn below the text.\n3\nandroid:drawableRight\nThis is the drawable to be drawn to the right of the text.\n4\nandroid:editable\nIf set, specifies that this TextView has an input method.\n5\nandroid:text\nThis is the Text to display.\nInherited from android.view.View Class \u2212\nAttribute Description\n1\nandroid:background\nThis is a drawable to use as the background.\n2\nandroid:contentDescription\nThis defines text that briefly describes content of the view.\n52\n3\nandroid:id\nThis supplies an identifier name for this view.\n4\nandroid:onClick\nThis is the name of the method in this View's context to invoke the vi\nwhen\n5\nandroid:visibility\nThis controls the initial visibility of the view.\nExample\nThis example will take you through simple steps to show how to create your own Android application\nusing Linear Layout and Button.\nStep Description\nYou will use Android studio IDE to create an Android application and name\n1 it as myapplication under a package com.example.saira_000.myapplication as explained in the\nHello World Example chapter.\n2 Modify src/MainActivity.java file to add a click event.\n3 Modify the default content of res/layout/activity_main.xml file to include Android UI control.\nNo need to declare default string constants at string.xml, Android studio takes care of default\n4\nstring constants.\nRun the application to launch Android emulator and verify the result of the changes done in the\n5\napplication.\nFollowing is the content of the modified main activity file src/MainActivity.java. This file can include\neach of the fundamental lifecycle methods.\npackage com.example.saira_000.myapplication;\nimport\nandroid.content.Intent;\n53\nimport ndroid.support.v.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.Toast;\npublic class MainActivity extends ActionBarActivity { Button b1,b2,b3;\n@Override\nprotected void onCreate(Bundle\nsavedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nb1=(Button)findViewById(R.id.button);\nb1.setOnClickListener(new\nView.OnClickListener() {\n@Override\npublic void onClick(View v) {\nToast.makeText(MainActivity.this,\"YOUR MESSAGE\",Toast.LENGTH_LONG).show();\n}\n});\n}\nFollowing will be the content of res/layout/activity_main.xml file \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/andro\nid\" xmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margi\nn\" android:paddingTop=\"@dimen/activity_vertical_margin\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\n\" tools:context=\".MainActivity\">\n<TextView\nandroid:id=\"@+id/textView1\"\nandroid:layout_width=\"wrap_conten\nt\"\nandroid:layout_height=\"wrap_conten\nt\" android:text=\"Button Control\"\nandroid:layout_alignParentTop=\"true\n54\nandroid:textSize=\"30dp\" />\n<TextView\nandroid:id=\"@+id/textView2\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Mrcet\"\nandroid:textColor=\"#ff8ff09\"\nandroid:textSize=\"30dp\"\nandroid:layout_below=\"@+id/textView1\"\nandroid:layout_centerHorizontal=\"true\" />\n<ImageButton\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/imageButton\"\nandroid:src=\"@drawable/abc\"\nandroid:layout_below=\"@+id/textView2\"\nandroid:layout_centerHorizontal=\"true\"/>\n<EditText\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/editText\"\nandroid:layout_below=\"@+id/imageButton\"\nandroid:layout_alignRight=\"@+id/imageButton\"\nandroid:layout_alignEnd=\"@+id/imageButton\" />\n<Button android:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Button\"\nandroid:id=\"@+id/button\"\nandroid:layout_alignTop=\"@+id/editText\"\nandroid:layout_alignLeft=\"@+id/textView1\"\nandroid:layout_alignStart=\"@+id/textView1\"\nandroid:layout_alignRight=\"@+id/editText\"\nandroid:layout_alignEnd=\"@+id/editText\" />\n</RelativeLayout>\nFollowing will be the content of res/values/strings.xml to define these new constants \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">myapplication</string>\n</resources>\nFollowing is the default content of AndroidManifest.xml \u2212\n55\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.saira_000.myapplication\" >\n<application\nandroid:allowBackup=\"tru\ne\"\nandroid:icon=\"@drawable/ic_launcher\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\" >\n<activity\nandroid:name=\"com.example.guidemo4.MainActiv\nity\" android:label=\"@string/app_name\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n</application>\n</manifest>\nA CheckBox is an on/off switch that can be toggled by the user. You should use check-\nboxes when presenting users with a group of selectable options that are not mutually\nCheckBox\n56\nCheckBox Attributes\nFollowing are the important attributes related to CheckBox control. You can check Android official\ndocumentation for complete list of attributes and related methods which you can use to change these\nattributes are run time.\nInherited from android.widget.TextView Class \u2212\nSr.No Attribute & Description\nandroid:autoText\n1\nIf set, specifies that this TextView has a textual input method and automatically corrects some\ncommon spelling errors.\nandroid:drawableBottom\n2\nThis is the drawable to be drawn below the text.\nandroid:drawableRight\n3\nThis is the drawable to be drawn to the right of the text.\nandroid:editable\n4\nIf set, specifies that this TextView has an input method.\nandroid:text\n5\nThis is the Text to display.\nInherited from android.view.View Class \u2212\nSr.No Attribute & Description\n1 android:background\nThis is a drawable to use as the background.\nandroid:contentDescription\n2\nThis defines text that briefly describes content of the view.\n57\nandroid:id\n3\nThis supplies an identifier name for this view.\nandroid:onClick\n4\nThis is the name of the method in this View's context to invoke when the view is clicked.\nandroid:visibility\n5\nThis controls the initial visibility of the view.\nExample\nThis example will take you through simple steps to show how to create your own Android application\nusing Linear Layout and CheckBox.\nStep Description\n1 You will use Android Studio IDE to create an Android application and name it as\nmyapplication under a package com.example.myapplication as explained in the Hello World\nExample chapter.\n2 Modify src/MainActivity.java file to add a click event.\n3 Modify the default content of res/layout/activity_main.xml file to include Android UI control.\n4 No need to declare default string constants. Android studio takes care of default constants at\nstring.xml\n5 Run the application to launch Android emulator and verify the result of the changes done in the\napplication.\nFollowing is the content of the modified main activity file src/MainActivity.java. This file can include\neach of the fundamental lifecycle methods.\npackage com.example.myapplication;\n58\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.widget.Button;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.CheckBox;\nimport android.widget.Toast;\npublic class MainActivity extends Activity\n{ CheckBox ch1,ch2;\nButton b1,b2;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nch1=(CheckBox)findViewById(R.id.checkBox\n1);\nch2=(CheckBox)findViewById(R.id.checkBox\n2);\nb1=(Button)findViewById(R.id.button);\nb2=(Button)findViewById(R.id.button2);\nb2.setOnClickListener(new\nView.OnClickListener() {\n@Override\npublic void onClick(View\nv) { finish();\n}\n});\nb1.setOnClickListener(new View.OnClickListener() {\n@Override\npublic void onClick(View v) {\nStringBuffer result = new StringBuffer();\nresult.append(\"Thanks : \").append(ch1.isChecked());\nresult.append(\"\\nThanks: \").append(ch2.isChecked());\nToast.makeText(MainActivity.this, result.toString(),\nToast.LENGTH_LONG).show();\n}\n});\n}\n}\nFollowing will be the content of res/layout/activity_main.xml file \u2212\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/andro\n59\nid\" xmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\ntools:context=\".MainActivity\">\n<TextView\nandroid:id=\"@+id/textView1\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Example of checkbox\"\nandroid:layout_alignParentTop=\"true\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:textSize=\"30dp\" />\n<CheckBox\nandroid:id=\"@+id/checkBox1\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Do you like Mrcet\"\nandroid:layout_above=\"@+id/button\"\nandroid:layout_centerHorizontal=\"true\" />\n<CheckBox\nandroid:id=\"@+id/checkBox2\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Do you like android \"\nandroid:checked=\"false\"\nandroid:layout_above=\"@+id/checkBox1\"\nandroid:layout_alignLeft=\"@+id/checkBox1\"\nandroid:layout_alignStart=\"@+id/checkBox1\"\n/>\n<TextView\nandroid:id=\"@+id/textView2\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignLeft=\"@+id/checkBox1\"\nandroid:layout_below=\"@+id/textView1\"\nandroid:layout_marginTop=\"39dp\"\nandroid:text=\"Mrcet\"\nandroid:textColor=\"#ff8ff09\"\nandroid:textSize=\"30dp\"\nandroid:layout_alignRight=\"@+id/textView1\"\nandroid:layout_alignEnd=\"@+id/textView1\"\n/>\n60\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Ok\"\nandroid:id=\"@+id/button\"\nandroid:layout_alignParentBottom=\"true\"\nandroid:layout_alignLeft=\"@+id/checkBo\nx1\"\nandroid:layout_alignStart=\"@+id/checkBox1\" />\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Cancel\"\nandroid:id=\"@+id/button2\"\nandroid:layout_alignParentBottom=\"true\"\nandroid:layout_alignRight=\"@+id/textView\n2\"\nandroid:layout_alignEnd=\"@+id/textView2\" />\n<ImageButton\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/imageButton\"\nandroid:src=\"@drawable/abc\"\nandroid:layout_centerVertical=\"true\"\nandroid:layout_centerHorizontal=\"true\"\n/>\nFollowing will be the content of res/values/strings.xml to define these new constants \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">MyApplication</string>\n</resources>\nFollowing is the default content of AndroidManifest.xml \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.myapplication\" >\n<application\nandroid:allowBackup=\"tru\ne\"\nandroid:icon=\"@drawable/ic_launch\ner\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\"\n>\n<activity 61\nandroid:name=\"com.example.myapplication.MainActi\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n</application>\n</ manifest>\nA RadioButton has two states: either checked or unchecked.This allows the user to select on e\noption from a set.\nRadio Button\nExample\nThis example will take you through simple steps to show how to create your own Android application\nusing Linear Layout and RadioButton.\nStep Description\n1 You will use Android studio to create an Android application and name it as My Application\nunder a package com.example.saira_000.myapplication as explained in the Hello World\nExample chapter.\n2 Modify src/MainActivity.java file to add a click event.\n2 Modify the default content of res/layout/activity_main.xml file to include Android UI control.\n3 Android studio takes care of default constants so no need to declare default constants at\nstring.xml file\n62\n4 Run the application to launch Android emulator and verify the result of the changes done in the\napplication.\nFollowing is the content of the modified main activity file src/MainActivity.java. This file can include\neach of the fundamental lifecycle methods.\nIn the below example abc indicates the image of tutorialspoint\npackage com.example.saira_000.myapplication;\nimport\nandroid.support.v.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.view.View; import\nandroid.widget.Button;\nimport android.widget.ImageButton;\nimport android.widget.RadioButton;\nimport android.widget.RadioGroup;\nimport android.widget.Toast;\npublic class MainActivity extends\nActionBarActivity { RadioGroup rg1;\nRadioButton\nrb1; Button b1;\nprotected void onCreate(Bundle\nsavedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\naddListenerRadioButton();\n}\nprivate void addListenerRadioButton() {\nrg1 = (RadioGroup)\nfindViewById(R.id.radioGroup); b1 = (Button)\nfindViewById(R.id.button2);\nb1.setOnClickListener(new\nView.OnClickListener() {\n@Override\npublic void onClick(View v) {\nint selected=rg1.getCheckedRadioButtonId();\nrb1=(RadioButton)findViewById(selected);\nToast.makeText(MainActivity.this,rb1.getText(),Toast.LENGTH_LONG)\n.show();\n}\n});\n63\nFollowing will be the content of res/layout/activity_main.xml file \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\ntools:context=\".MainActivity\">\n<TextView\nandroid:id=\"@+id/textView1\"\nandroid:layout_width=\"wrap_conten\nt\"\nandroid:layout_height=\"wrap_conten\nt\" android:text=\"Example of Radio\nButton\"\nandroid:layout_alignParentTop=\"true\n\"\nandroid:layout_centerHorizontal=\"tru\nPage 65\n64\nandroid:id=\"@+id/textView2\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Mrcet\"\nandroid:textColor=\"#ff8ff09\"\nandroid:textSize=\"30dp\"\nandroid:layout_above=\"@+id/imageButton\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:layout_marginBottom=\"40dp\" />\n<ImageButton\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/imageButton\"\nandroid:src=\"@drawable/abc\"\nandroid:layout_centerVertical=\"true\"\nandroid:layout_centerHorizontal=\"true\" />\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/button2\"\nandroid:text=\"ClickMe\"\nandroid:layout_alignParentBottom=\"true\"\nandroid:layout_centerHorizontal=\"true\"/>\n<RadioGroup\nandroid:id=\"@+id/radioGroup\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\"\nandroid:layout_below=\"@+id/imageButton\"\nandroid:layout_alignLeft=\"@+id/textView2\"\nandroid:layout_alignStart=\"@+id/textView2\">\n<RadioButton\nandroid:layout_width=\"142dp\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"JAVA\"\nandroid:id=\"@+id/radioButton\"\nandroid:textSize=\"25dp\"\nandroid:textColor=\"@android:color/holo_red_light\"\nandroid:checked=\"false\"\nandroid:layout_gravity=\"center_horizontal\" />\n<RadioButton\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"ANDROID\"\nandroid:id=\"@+id/radioButton2\"\n65\nandroid:layout_gravity=\"center_horizontal\"\nandroid:checked=\"false\"\nandroid:textColor=\"@android:color/holo_red_da\nrk\" android:textSize=\"25dp\" />\n<RadioButton\nandroid:layout_width=\"136dp\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"HTML\"\nandroid:id=\"@+id/radioButton3\"\nandroid:layout_gravity=\"center_horizont\nal\" android:checked=\"false\"\nandroid:textSize=\"25dp\"\nandroid:textColor=\"@android:color/holo_red_dark\" />\n</RadioGroup>\n</RelativeLayout\n>\nFollowing will be the content of res/values/strings.xml to define these new constants \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">My Application</string>\n</resources>\nFollowing is the default content of AndroidManifest.xml \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.saira_000.myapplication\" >\n<application\nandroid:allowBackup=\"tru\ne\"\nandroid:icon=\"@drawable/ic_launch\ner\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\"\n>\n<activity\nandroid:name=\"com.example.My\nApplication.MainActivity\"\nandroid:label=\"@string/app_name\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n66\n</manifest>\nSPINNERS / COMBO BOXES\nSpinners provide a quick way to select one value from a set. In the default state, a spinner shows\nits currently selected value. Touching the spinner displays a dropdown menu with all other\navailable values, from which the user can select a new one.\nIMAGES\npublic abstract class Image\nextends Object implements AutoCloseable\njava.lang.Object\n\u21b3 android.media.Ima\nge\nA single complete image buffer to use with a media source such as a MediaCodec or a\nCameraDevice.\nThis class allows for efficient direct application access to the pixel data of the Image through\none or more ByteBuffers. Each buffer is encapsulated in a Plane that describes the layout of the\npixel data in that plane. Due to this direct access, and unlike the Bitmap class, Images are not\ndirectly usable as UI resources.\nMENU\nIn android, Options Menu is a primary collection of menu items for an activity and it is useful\nto implement actions that have a global impact on the app, such as Settings, Search, etc.\nIn case, if we define items for the options menu in both activity or fragment, then those items\nwill be combine and display in UI.\nDIALOG\nA dialog is a small window that prompts the user to make a decision or enter additional\ninformation. A dialog does not fill the screen and is normally used for modal events that require\nusers to take an action before they can proceed.\nThe Dialog class is the base class for dialogs, but you should avoid instantiating Dialog directly.\nInstead, use one of the following subclasses:\n\u2022 AlertDialog : A dialog that can show a title, up to three buttons, a list of selectable\nitems, or a custom layout.\n\u2022 DatePickerDialog or TimePickerDialog : A dialog with a pre-defined UI that allows\nthe user to select a date or time.\n67\nUNIT-III\nFragments \u2013 Creating fragments, Lifecycle of fragments, Fragment states, Adding fragments to Activity,\nadding, removing and replacing fragments with fragment transactions, interfacing between fragments\nand Activities,\nA Fragment is a piece of an activity which enable more modular activity design. It will not be wrong\nif we say, a fragment is a kind of sub-activity.\nFollowing are important points about fragment \u2212\n\u2022 A fragment has its own layout and its own behaviour with its own life cycle callbacks.\n\u2022 You can add or remove fragments in an activity while the activity is running.\n\u2022 You can combine multiple fragments in a single activity to build a multi-pane UI.\n\u2022 A fragment can be used in multiple activities.\n\u2022 Fragment life cycle is closely related to the life cycle of its host activity which means when the\nactivity is paused, all the fragments available in the activity will also be stopped.\n\u2022 A fragment can implement a behaviour that has no user interface component.\n\u2022 Fragments were added to the Android API in Honeycomb version of Android which API version\n11.\nYou create fragments by extending Fragment class and You can insert a fragment into your activity layout\nby declaring the fragment in the activity's layout file, as a <fragment> element.\nPrior to fragment introduction, we had a limitation because we can show only a single activity on the screen\nat one given point in time. So we were not able to divide device screen and control different parts separately.\nBut with the introduction of fragment we got more flexibility and removed the limitation of having a single\nactivity on the screen at a time. Now we can have a single activity but each activity can comprise of multiple\nfragments which will have their own layout, events and complete life cycle.\nFollowing is a typical example of how two UI modules defined by fragments can be combined into one\nactivity for a tablet design, but separated for a handset design.\n68\nThe application can embed two fragments in Activity A, when running on a tablet-sized device. However,\non a handset-sized screen, there's not enough room for both fragments, so Activity A includes only the\nfragment for the list of articles, and when the user selects an article, it starts Activity B, which includes\nthe second fragment to read the article.\nFragment Life Cycle\nAndroid fragments have their own life cycle very similar to an android activity. This section briefs different\nstages of its life cycle.\nFragment lifecycle\nHere is the list of methods which you can to override in your fragment class \u2212\n\u2022 onAttach()The fragment instance is associated with an activity instance.The fragment and the\nactivity is not fully initialized. Typically you get in this method a reference to the activity which\n66\nuses the fragment for further initialization work.\nPage 0\n69\n\u2022 onCreate() The system calls this method when creating the fragment. You should initialize essential\ncomponents of the fragment that you want to retain when the fragment is paused or stopped, then\nresumed.\n\u2022 onCreateView() The system calls this callback when it's time for the fragment to draw its user\ninterface for the first time. To draw a UI for your fragment, you must return a View component from\nthis method that is the root of your fragment's layout. You can return null if the fragment does\nnot provide a UI.\n\u2022 onActivityCreated()The onActivityCreated() is called after the onCreateView() method when the\nhost activity is created. Activity and fragment instance have been created as well as the view\nhierarchy of the activity. At this point, view can be accessed with the findViewById() method.\nexample. In this method you can instantiate objects which require a Context object\n\u2022 onStart()The onStart() method is called once the fragment gets visible.\n\u2022 onResume()Fragment becomes active.\n\u2022 onPause() The system calls this method as the first indication that the user is leaving the fragment.\nThis is usually where you should commit any changes that should be persisted beyond the current\nuser session.\n\u2022 onStop()Fragment going to be stopped by calling onStop()\n\u2022 onDestroyView()Fragment view will destroy after call this method\n\u2022 onDestroy()onDestroy() called to do final clean up of the fragment's state but Not guaranteed to be\ncalled by the Android platform.\npackage com.paad.fragments;\nimport android.app.Activity;\nimport android.app.Fragment;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\npublic class MySkeletonFragment extends Fragment {\n// Called when the Fragment is attached to its parent Activity.\n@Override\npublic void onAttach(Activity activity) {\nsuper.onAttach(activity);\n// Get a reference to the parent Activity.\n}\n// Called to do the initial creation of the Fragment.\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\n// Initialize the Fragment.\n}\n// Called once the Fragment has been created in order for it to 6\n// create its user interface.\n@Override\n70\npublic View onCreateView(LayoutInflater inflater,\nViewGroup container,\nBundle savedInstanceState) {\n// Create, or inflate the Fragment\u2019s UI, and return it.\n// If this Fragment has no UI then return null.\nreturn inflater.inflate(R.layout.my_fragment, container, false);\n}\n// Called once the parent Activity and the Fragment\u2019s UI have\n// been created.\n@Override\npublic void onActivityCreated(Bundle savedInstanceState)\n{ super.onActivityCreated(savedInstanceState);\n// Complete the Fragment initialization \u2013 particularly anything\n// that requires the parent Activity to be initialized or the\n// Fragment\u2019s view to be fully inflated.\n}\n// Called at the start of the visible lifetime.\n@Override\npublic void onStart(){\nsuper.onStart();\n// Apply any required UI change now that the Fragment is visible.\n}\n// Called at the start of the active lifetime.\n@Override\npublic void onResume(){\nsuper.onResume();\n// Resume any paused UI updates, threads, or processes required\n// by the Fragment but suspended when it became inactive.\n}\n// Called at the end of the active lifetime.\n@Override\npublic void onPause(){\n// Suspend UI updates, threads, or CPU intensive processes\n// that don\u2019t need to be updated when the Activity isn\u2019t\n// the active foreground activity.\n// Persist all edits or state changes\n// as after this call the process is likely to be killed.\nsuper.onPause();\n}\n// Called to save UI state changes at the\n// end of the active lifecycle.\n@Override\npublic void onSaveInstanceState(Bundle savedInstanceState) {\n// Save UI state changes to the savedInstanceState.\n// This bundle will be passed to onCreate, onCreateView, and\n// onCreateView if the parent Activity is killed and restarted.\nsuper.onSaveInstanceState(savedInstanceState);\n}\n// Called at the end of the visible lifetime.\n71\n@Override\npublic void onStop(){\n// Suspend remaining UI updates, threads, or processing\n// that aren\u2019t required when the Fragment isn\u2019t visible.\nsuper.onStop();\n}\n// Called when the Fragment\u2019s View has been detached.\n@Override\npublic void onDestroyView() {\n// Clean up resources related to the View.\nsuper.onDestroyView();\n}\n// Called at the end of the full lifetime.\n@Override\npublic void onDestroy(){\n// Clean up any resources including ending threads,\n// closing database connections etc.\nsuper.onDestroy();\n}\n// Called when the Fragment has been detached from its parent Activity.\n@Override\npublic void onDetach() {\nsuper.onDetach();\n}\n}\nIntroducing the Fragment Manager\nEach Activity includes a Fragment Manager to manage the Fragments it contains. You can access\nthe Fragment Manager using the getFragmentManager method:\nFragmentManager fragmentManager = getFragmentManager();\nThe Fragment Manager provides the methods used to access the Fragments currently added to the\nActivity, and to perform Fragment Transaction to add, remove, and replace Fragments. Adding\nFragments toActivities\nThe simplest way to add a Fragment to an Activity is by including it within the Activity\u2019s layout\nusing the fragment tag, as shown\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\n<LinearLayout xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\u201d\nandroid:orientation=\u201dhorizontal\u201d\nandroid:layout_width=\u201dmatch_parent\u201d\nandroid:layout_height=\u201dmatch_parent\u201d>\n<fragment android:name=\u201dcom.paad.weatherstation.MyListFragment\u201d\nandroid:id=\u201d@+id/my_list_fragment\u201d\nandroid:layout_width=\u201dmatch_parent\u201d\nandroid:layout_height=\u201dmatch_parent\u201d\nandroid:layout_weight=\u201d1\u201d\n/>\n<fragment android:name=\u201dcom.paad.weatherstation.DetailsFragment\u201d\nandroid:id=\u201d@+id/details_fragment\u201d\nandroid:layout_width=\u201dmatch_parent\u201d\nandroid:layout_height=\u201dmatch_parent\u201d\n72\nandroid:layout_weight=\u201d3\u201d\n/>\n</LinearLayout>\nOnce the Fragment has been infl ated, it becomes a View Group, laying out and managing its UI\nwithin the Activity.\nThis technique works well when you use Fragments to defi ne a set of static layouts based on various\nscreen sizes. If you plan to dynamically modify your layouts by adding, removing, and replacing\nFragments at run time, a better approach is to create layouts that use container Views into which\nFragments can be placed at runtime, based on the current application state.\nListing 4- shows an XML snippet that you could use to support this latter approach\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\n<LinearLayout xmlns:android=\u201dhttp://schemas.android.com/apk/res/android\u201d\nandroid:orientation=\u201dhorizontal\u201d\nandroid:layout_width=\u201dmatch_parent\u201d\nandroid:layout_height=\u201dmatch_parent\u201d>\n<FrameLayout\nandroid:id=\u201d@+id/ui_container\u201d\nandroid:layout_width=\u201dmatch_parent\u201d\nandroid:layout_height=\u201dmatch_parent\u201d\nandroid:layout_weight=\u201d1\u201d\n/>\n<FrameLayout\nandroid:id=\u201d@+id/details_container\u201d\nandroid:layout_width=\u201dmatch_parent\u201d\nandroid:layout_height=\u201dmatch_parent\u201d\nandroid:layout_weight=\u201d3\u201d\n/>\n</LinearLayout>\nUsing Fragment Transactions\nFragment Transactions can be used to add, remove, and replace Fragments within an Activity at run time.\nUsing Fragment Transactions, you can make your layouts dynamic \u2014 that is, they will adapt\nand change based on user interactions and application state.\nEach Fragment Transaction can include any combination of supported actions, including adding,\nremoving, or replacing Fragments. They also support the specifi cation of the transition animations\nto display and whether to include the Transaction on the back stack.\nA new Fragment Transaction is created using the beginTransaction method from the Activity\u2019s\nFragment Manager. Modify the layout using the add, remove, and replace methods, as required,\nbefore setting the animations to display, and setting the appropriate back-stack behavior. When you\nare ready to execute the change, call commit to add the transaction to the UI queue.\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\n// Add, remove, and/or replace Fragments.\n// Specify animations.\n// Add to back stack if required.\nfragmentTransaction.commit();\n0\nEach of these transaction types and options will be explored in the following sections.\nAdding, Removing, and Replacing Fragments\nWhen adding a new UI Fragment, specify the Fragment instance to add, along with the container\n73\nView into which the Fragment will be placed. Optionally, you can specify a tag that can later be\nused to fi nd the Fragment by using the findFragmentByTag method:\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nfragmentTransaction.add(R.id.ui_container, new MyListFragment());\nfragmentTransaction.commit();\nTo remove a Fragment, you fi rst need to fi nd a reference to it, usually using either the Fragment\nManager\u2019s findFragmentById or findFragmentByTag methods. Then pass the found Fragment\ninstance as a parameter to the remove method of a Fragment Transaction:\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nFragment fragment = fragmentManager.findFragmentById(R.id.details_fragment);\nfragmentTransaction.remove(fragment);\nfragmentTransaction.commit();\nYou can also replace one Fragment with another. Using the replace method, specify the container ID\ncontaining the Fragment to be replaced, the Fragment with which to replace it, and (optionally) a tag\nto identify the newly inserted Fragment.\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nfragmentTransaction.replace(R.id.details_fragment, new\nDetailFragment(selected_index));\nfragmentTransaction.commit();\nUsing the Fragment Manager to Find Fragments\nTo fi nd Fragments within your Activity, use the Fragment Manager\u2019s findFragmentById method.\nIf you have added your Fragment to the Activity layout in XML, you can use the Fragment\u2019s\nresource\nidentifi er:\nMyFragment myFragment =\n(MyFragment)fragmentManager.findFragmentById(R.id.MyFragment)\n;\nIf you\u2019ve added a Fragment using a Fragment Transaction, you should specify the resource identifi er of\nthe container View to which you added the Fragment you want to fi nd. Alternatively, you can use the\nfindFragmentByTag method to search for the Fragment using the tag you specifi ed in the Fragment\nTransaction:\nMyFragment myFragment =\n(MyFragment)fragmentManager.findFragmentByTag(MY_FRAGMENT_T AG);\nLater in this chapter you\u2019ll be introduced to Fragments that don\u2019t include a UI. The find\nFragmentByTag method is essential for interacting with these Fragments. Because they\u2019re not part of\nthe Activity\u2019s View hierarchy, they don\u2019t have a resource identifi er or a container resource identifi er\nto pass in to the findFragmentById method.\nInterfacing Between Fragments and Activities\nUse the getActivity method within any Fragment to return a reference to the Activity within which\nit\u2019s embedded. This is particularly useful for fi nding the current Context, accessing other\nFragments using the Fragment Manager, and fi nding Views within the Activity\u2019s View hierarchy.\nTextView textView = (TextView)getActivity().findViewById(R.id.textview);\nAlthough it\u2019s possible for Fragments to communicate directly using the host Activity\u2019s Fragment\nManager, it\u2019s generally considered better practice to use the Activity as an intermediary. This allows\nthe Fragments to be as independent and loosely coupled as possible, with the responsibility for\ndeciding how an event in one Fragment should affect the overall UI falling to the host Activity.\n1\nWhere your Fragment needs to share events with its host Activity (such as signaling UI selections), it\u2019s\n74\ngood practice to create a callback interface within the Fragment that a host Activity must implement.\nListing 4-10 shows a code snippet from within a Fragment class that defi nes a public event listener\n75\ninterface. The onAttach handler is overridden to obtain a reference to the host Activity, confi rming\nthatitimplementstherequiredinterface. public\ninterface OnSeasonSelectedListener { public\nvoid onSeasonSelected(Season season);\n}\nprivate OnSeasonSelectedListener onSeasonSelectedListener;\nprivate Season currentSeason;\n@Override\npublic void onAttach(Activity activity) {\nsuper.onAttach(activity);\ntry {\nonSeasonSelectedListener = (OnSeasonSelectedListener)activity;\n} catch (ClassCastException e) {\nthrow new ClassCastException(activity.toString()\n+ \u201c must implement OnSeasonSelectedListener\u201d);\n}\n}\nprivate void setSeason(Season season) {\ncurrentSeason = season;\nonSeasonSelectedListener.onSeasonSelected(season);\nFragments Without User Interfaces\nIn most circumstances, Fragments are used to encapsulate modular components of the UI; however,\nyoucanalsocreateaFragmentwithoutaUItoprovidebackgroundbehaviorthatpersistsacross Activity\nrestarts. This is particularly well suited to background tasks that regularly touch the UI or where it\u2019s\nimportant to maintain state across Activity restarts caused by confi guration changes.\nYou can choose to have an active Fragment retain its current instance when its parent Activity is\nrecreated\nusing the setRetainInstance method. After you call this method, the Fragment\u2019s lifecycle\nwill change.\nRather than being destroyed and re-created with its parent Activity, the same Fragment instance is\nretained when the Activity restarts. It will receive the onDetach event when the parent Activity is\ndestroyed, followed by the onAttach, onCreateView, and onActivityCreated events as the new\nparent Activity is instantiated.\nThe following snippet shows the skeleton code for a Fragment without a UI:\npublic class NewItemFragment extends Fragment {\n@Override\npublic void onAttach(Activity activity) {\nsuper.onAttach(activity);\n// Get a type-safe reference to the parent Activity.\n}\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\n// Create background worker threads and tasks.\n}\n@Override\npublic void onActivityCreated(Bundle savedInstanceState)\n{ super.onActivityCreated(savedInstanceState);\n76\n// Initiate worker threads and tasks.\n}\n}\nTo add this Fragment to your Activity, create a new Fragment Transaction, specifying a tag to use to\nidentify it. Because the Fragment has no UI, it should not be associated with a container View and\ngenerally shouldn\u2019t be added to the back stack.\nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\nfragmentTransaction.add(workerFragment, MY_FRAGMENT_TAG);\nfragmentTransaction.commit();\nUse the findFragmentByTag from the Fragment Manager to fi nd a reference to it later.\nMyFragment myFragment =\n(MyFragment)fragmentManager.findFragmentByTag(MY_FRAGMENT_TAG);\nAndroid Fragment Classes\nThe Android SDK includes a number of Fragment subclasses that encapsulate some of the most\ncommon Fragment implementations. Some of the more useful ones are listed here:\n\u2030 DialogFragment \u2014 A Fragment that you can use to display a fl oating Dialog over the parent\nActivity. You can customize the Dialog\u2019s UI and control its visibility directly via the\nFragment API. Dialog Fragments are covered in more detail in Chapter 10, \u201cExpanding the\nUser Experience.\u201d\n\u2030 ListFragment \u2014 A wrapper class for Fragments that feature a ListView bound to a data\nsource as the primary UI metaphor. It provides methods to set the Adapter to use and\nexposes the event handlers for list item selection. The List Fragment is used as part of the\nTo-Do List example in the next section.\n\u2030 WebViewFragment \u2014 A wrapper class that encapsulates a WebView within a Fragment. The\nchild WebView will be paused and resumed when the Fragment is paused and resumed.\nHow to use Fragments?\nThis involves number of simple steps to create Fragments.\n\u2022 First of all decide how many fragments you want to use in an activity. For example let's we want\nto use two fragments to handle landscape and portrait modes of the device.\n\u2022 Next based on number of fragments, create classes which will extend the Fragment class. The\nFragment class has above mentioned callback functions. You can override any of the functions based\non your requirements.\n\u2022 Corresponding to each fragment, you will need to create layout files in XML file. These files will\nhave layout for the defined fragments.\n\u2022 Finally modify activity file to define the actual logic of replacing fragments based on your\nrequirement.\nTypes of Fragments\nBasically fragments are divided as three stages as shown below.\n\u2022 Single frame fragments \u2212 Single frame fragments are using for hand hold devices like mobiles, here\nwe can show only one fragment as a view.\n\u2022 List fragments \u2212 fragments having special list view is called as list fragment\n\u2022 Fragments transaction \u2212 Using with fragment transaction. we can move one fragment to another\nfragment.\n77\nUNIT-IV\nIntents and Broadcasts: Using intents to launch Activities, Types of Intents, Passing data to Intents, Getting\nresults from Activities, Broadcast Receivers \u2013 Using Intent filters to service implicit Intents, Resolving\nIntentfilters\nAn Android Intent is an abstract description of an operation to be performed. It can be used with\nstartActivity to launch an Activity, broadcastIntent to send it to any interested BroadcastReceiver\ncomponents, and startService(Intent) or bindService(Intent, ServiceConnection, int) to communicate with a\nbackground Service.\nTheintentitself,anIntentobject,isapassivedatastructureholdinganabstractdescriptionofan operation\nto be performed.\nFor example, let's assume that you have an Activity that needs to launch an email client and sends an email\nusing your Android device. For this purpose, your Activity would send an ACTION_SEND along with\nappropriate chooser, to the Android Intent Resolver. The specified chooser gives the proper interface for\nthe user to pick how to send your email data.\nIntent email = new Intent(Intent.ACTION_SEND, Uri.parse(\"mailto:\"));\nemail.putExtra(Intent.EXTRA_EMAIL, recipients);\nemail.putExtra(Intent.EXTRA_SUBJECT,\nsubject.getText().toString()); email.putExtra(Intent.EXTRA_TEXT,\nbody.getText().toString()); startActivity(Intent.createChooser(email,\nAbove syntax is calling startActivity method to start an email activity and result should be as shown below\n\u2212\nFor example, assume that you have an Activity that needs to open URL in a web browser on your\nAndroid device. For this purpose, your Activity will send ACTION_WEB_SEARCH Intent to the Android\nIntent Resolver to open given URL in the web browser. The Intent Resolver parses through a list of\nActivities and chooses the one that would best match your Intent, in this case, the Web Browser\nActivity. The Intent Resolver then passes your web page to the web browser and starts the Web Browser\nActivity.\n78\nStringq = \"tutorialspoint\";\nIntent intent = new Intent(Intent.ACTION_WEB_SEARCH );\nintent.putExtra(SearchManager.QUERY, q);\nstartA ivity(intent);\nt\nexample will search as tutorialspoint on android search engine and it gives the result of\nAbovelspoint in your an activity\ntutoria\nare separate mechanisms for delivering intents to each type of component \u2212 activities, services,\nThere oadcast receivers.\nand br\n79\nAn Int nt object is a bundle of information which is used by the component that receives the intent as\nwell a information used by the Android system.\nAn I ent object can contain the following components based on what it is communicating or going to\nperfor \u2212\nAction\nThis i mandatory part of the Intent object and is a string naming the action to be performed \u2014 or, in the\ncase o broadcast intents, the action that took place and is being reported. The action largely determines\nhow t e rest of the intent object is structured . The Intent class defines a number of action constants\nSr.No Method & Description\ncorres onding to different intents. Here is a list of Android Intent Standard Actions\nThe ac tion in an Intent object can be set by the setAction() method and read by getAction().\nContext.startActivity()\n1 Data\nAdds a Tdahtea Isnpteecnifticoabtijeoncttoisapnaisnsteendt ftiolttehr.isTmheesthpeocdiftiocaltaiounncchanabneejuwstaacdtiavtiatytyopreg(etht eanmeimxiesTtiynpge activity meth\nattribu et)o, jduostsaoURI, or both a data type and a URI. A URI is specified by separate attributes for each of\nits par \u2212\nContext.startService()\n2These attributes that specify the URL format are optional, but also mutually dependent \u2212\nThe Intent object is passed to this method to initiate a service or deliver new instructions to ing\n\u2022 Iaf na socnhgeome is not specified for the intent filter, all the other URI attributes are ignored.\n\u2022 If ahost isnot specifiedforthe filter, the port attribute and all the path attributes are ignored.\nContext.sendBroadcast()\n3\nThe Intent object is passed to this method to deliver the message to all interested broadcas s\nreceiver\n80\nThe setData() method specifies data only as a URI, setType() specifies it only as a MIME type, and\nsetDataAndType() specifies it as both a URI and a MIME type. The URI is read by getData() and the type\nby getType().\nSome examples of action/data pairs are \u2212\nSr.No. Action/Data Pair & Description\nACTION_VIEW content://contacts/people/1\n1\nDisplay information about the person whose identifier is \"1\".\nACTION_DIAL content://contacts/people/1\n2\nDisplay the phone dialer with the person filled in.\nACTION_VIEW tel:123\n3\nDisplay the phone dialer with the given number filled in.\nACTION_DIAL tel:123\n4\nDisplay the phone dialer with the given number filled in.\nACTION_EDIT content://contacts/people/1\n5\nEdit information about the person whose identifier is \"1\".\nACTION_VIEW content://contacts/people/\n6\nDisplay a list of people, which the user can browse through.\nACTION_SET_WALLPAPER\n7\nShow settings for choosing wallpaper\nACTION_SYNC\n8\nIt going to be synchronous the data,Constant Value is android.intent.action.SYNC\nACTION_SYSTEM_TUTORIAL\n9\nIt will start the platform-defined tutorial(Default tutorial or start up tutorial)\n81\nACTION_TIMEZONE_CHANGED\n10\nIt intimates when time zone has changed\nACTION_UNINSTALL_PACKAGE\n11\nIt is used to run default uninstaller\nCategory\nThe c tegory is an optional part of Intent object and it's a string containing additional information about\nthe ki d of component that should handle the intent. The addCategory() method places a category in an\nIntent object, removeCategory() deletes a category previously added, and getCategories() gets the set of\nall cat gories currently in the object. Here is a list of Android Intent Standard Categories.\nYou can check detail on Intent Filters in below section to understand how do we use categories to choose\nappro riate activity corresponding to an Intent.\nExtras\nThis w ll be in key-value pairs for additional information that should be delivered to the component\nhandling the intent. The extras can be set and read using the putExtras() and getExtras() methods\nrespectively. Here is a list of Android Intent Standard Extra Data\nFlags\nThese flags are optional part of Intent object and instruct the Android system how to launch an activity,\nand ho to treat it after it's launched etc.\nSr.No Flags & Description\nFLAG_ACTIVITY_CLEAR_TASK\n1\nIf set in an Intent passed to Context.startActivity(), this flag will cause any existing task that would ass\nthe activity to be cleared before the activity is started. That is, the activity becomes the new root of a\nempty task, and any old activities are finished. This can only be used in conjunction with\nFLAG_ACTIVITY_\nFLAG_ACTIVITY_CLEAR_TOP\nIf set, and the activity being launched is already running in the current task, then instead of launchin g a\n2\nof that activity, all of the other activities on top of it will be closed and this Intent will be delivered to t top\nold activity as a new Intent.\nFLAG_ACTIVITY_NEW_TASK\n3\nThis flag is generally used by activities that want to present a \"launcher\" style behavior: they give the u\nseparate things that can be done, which otherwise run completely independently of the activity launch ing\n8\nComponent Name\n82\nThis optional field is an android ComponentName object representing either Activity, Service or\nBroadcastReceiver class. If it is set, the Intent object is delivered to an instance of the designated class\notherwise Android uses other information in the Intent object to locate a suitable target.\nThe component name is set by setComponent(), setClass(), or setClassName() and read by getComponent().\nTypes of Intents\nThere are following two types of intents supported by Android\nExplicit Intents\nExplicit intent going to be connected internal world of application,suppose if you wants to connect one\nactivity to another activity, we can do this quote by explicit intent, below image is connecting first\nactivity to second activity by clicking button.\nThese intents designate the target component by its name and they are typically used for application- internal\nmessages - such as an activity starting a subordinate service or launching a sister activity. For example \u2212\n// Explicit Intent by specifying its class name\nIntent i = new Intent(FirstActivity.this, SecondActivity.class);\n// Starts\nTargetActivity\n83\nImplicit Intents\nThese intents do not name a target and the field for the component name is left blank. Implicit intents are\noften used to activate components in other applications. For example \u2212\nIntent read1=new Intent();\nread1.setAction(android.content.Intent.ACTION_VIEW);\nread1.setData(ContactsContract.Contacts.CONTENT_URI\n); startActivity(read1);\nAbove code will give result as shown below\nThe target component which receives the intent can use the getExtras() method to get the extra data sent\nby the source component. For example \u2212\n// Get bundle object at appropriate place in your\ncode\nBundle extras = getIntent().getExtras();\n// Extract data using passed keys\nString value1 =\nExample\n84\nFollowing example shows the functionality of a Android Intent to launch various Android built-in\napplications.\n85\nStep Description\n1 You will use Android studio IDE to create an Android application and name it as My Applicat\npackage com.example.saira_000.myapplication.\n2 Modify src/main/java/MainActivity.java file and add the code to define two listeners wo\ncorresponding t Start Browser and Start Phone.\n3 Modify layout XML file res/layout/activity_main.xml to add three buttons in linear layout.\n4 Run the application to launch Android emulator and verify the result of the changes done in ation\nthe applic\nFollo\n86\nFollowing will be the content of res/layout/activity_main.xml file \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\ntools:context=\".MainActivity\">\n<TextView\nandroid:id=\"@+id/textView1\"\nandroid:layout_width=\"wrap_conten\nt\"\nandroid:layout_height=\"wrap_conten\nt\" android:text=\"Intent Example\"\nandroid:layout_alignParentTop=\"true\n\"\nandroid:layout_centerHorizontal=\"tru\ne\" android:textSize=\"30dp\" />\n<TextView\nandroid:id=\"@+id/textView2\"\nandroid:layout_width=\"wrap_conten\nt\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Mrcet\"\nandroid:textColor=\"#ff8ff09\"\nandroid:textSize=\"30dp\"\nandroid:layout_below=\"@+id/textView1\n\"\nandroid:layout_centerHorizontal=\"true\"\n/>\n<ImageButton\nandroid:layout_width=\"wrap_content\n\"\nandroid:layout_height=\"wrap_conte\nnt\"\n87\nandroid:id=\"@+id/imageButton\"\nandroid:src=\"@drawable/abc\"\nandroid:layout_below=\"@+id/textView2\n\"\nandroid:layout_centerHorizontal=\"true\"\n/>\n<EditText\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/editText\"\nandroid:layout_below=\"@+id/imageButto\nn\"\nandroid:layout_alignRight=\"@+id/imageButto\nn\"\nandroid:layout_alignEnd=\"@+id/imageButton\n\" />\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Start Browser\"\nandroid:id=\"@+id/button\"\nandroid:layout_alignTop=\"@+id/editText\"\nandroid:layout_alignRight=\"@+id/textView\n1\"\nandroid:layout_alignEnd=\"@+id/textView\n1\"\nandroid:layout_alignLeft=\"@+id/imageButton\"\nandroid:layout_alignStart=\"@+id/imageButton\"\n/>\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Start Phone\"\nandroid:id=\"@+id/button2\"\nFollowing will be the content of res/values/strings.xml to define two new constants \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">My Applicaiton</string>\n</resources>\nFollowing is the default content of AndroidManifest.xml \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\n<applicatio\n88\nandroid:allowBackup=\"true\"\nandroid:icon=\"@mipmap/ic_launch\ner\"\nandroid:label=\"@string/app_name\"\nandroid:supportsRtl=\"true\"\nandroid:theme=\"@style/AppTheme\n\">\n<activity android:name=\".MainActivity\">\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n</application>\nLet's try to run your My Application application. I assume you had created your AVD while doing\nenvironment setup. To run the app from Android Studio, open one of your project's activity files and click\nRun icon from the toolbar.Android Studio installs the app on your AVD and starts it and if everything\nis fine with your setup and application, it will display following Emulator window \u2212\n89\nNow click on Start Browser button, which will start a browser configured and display\nhttp://www.example.com as shown below \u2212\nSimilar way you can launch phone interface using Start Phone button, which will allow you to dial\nalready given phone number.\nIntent Filters\nYou have seen how an Intent has been used to call an another activity. Android OS uses filters to pinpoint\nthe set of Activities, Services, and Broadcast receivers that can handle the Intent with help of specified set\nof action, categories, data scheme associated with an Intent. You will use <intent- filter> element in the\nmanifest file to list down actions, categories and data types associated with any activity, service, or\nbroadcast receiver.\nFollowing is an example of a part of AndroidManifest.xml file to specify an activity com.example.My\nApplication.CustomActivity which can be invoked by either of the two mentioned actions, one category,\nand one data \u2212\n<activity android:name=\".CustomActivity\"\nandroid:label=\"@string/app_name\">\n<intent-filter>\n<action android:name=\"android.intent.action.VIEW\" />\n<action android:name=\"com.example.My\nApplication.LAUNCH\" />\n<category\nandroid:name=\"android.intent.category.DEFAULT\" />\n<data android:scheme=\"http\" />\n</intent-filter>\n</activity\n90\nOnce this activity is defined along with above mentioned filters, other activities will be able to invoke this\nactiv y using either the android.intent.action.VIEW, or using the com.example.My\nApp cation.LAUNCH action provided their category is android.intent.category.DEFAULT.\nThe ata> element specifies the data type expected by the activity to be called and for above example\nour custom activity expects the data to start with the \"http://\"\nTher may be a situation that an intent can pass through the filters of more than one activity or service,\nthe u er may be asked which component to activate. An exception is raised if no target can be found.\nTher are following test Android checks before invoking an activity \u2212\n\u2022 A filter <intent-filter> may list more than one action as shown above but this list cannot be empty;\na filter must contain at least one <action> element, otherwise it will block all intents. If more than\none actions are mentioned then Android tries to match one of the mentioned actions before invoking\nthe activity.\n\u2022 A filter <intent-filter> may list zero, one or more than one categories. if there is no category\nmentioned then Android always pass this test but if more than one categories are mentioned then\nfor an intent to pass the category test, every category in the Intent object must match a category in\nthe filter.\n\u2022 Each <data> element can specify a URI and a data type (MIME media type). There are separate\nattributes like scheme, host, port, and path for each part of the URI. An Intent object that\ncontains both a URI and a data type passes the data type part of the test only if its type matches a\ntype listed in the filter.\nExample\nFollo ing example is a modification of the above example. Here we will see how Android resolves\nconfl ct if one intent is invoking two activities defined in , next how to invoke a custom activity using a\nfilter and third one is an exception case if Android does not file appropriate activity defined for an intent.\nStep Description\n1 You will use android studio to create an Android application and name it as My Applicat\npackage com.example.tutorialspoint.myapplication;.\n2 Modify src/Main/Java/MainActivity.java file and add the code to define three listeners corresponding t t\ndefined in layout file.\n3 Add a new src/Main/Java/CustomActivity.java file to have one custom activity which will be invoked\nintents.\n4 Modify layout XML file res/layout/activity_main.xml to add three buttons in linear layout.\n86\n91\n5 Add one layout XML file res/layout/custom_view.xml to add a simple <TextView> to show the d\npassed intent.\nty.\n6 Modify AndroidManifest.xml to add <intent-filter> to define rules for your intent to invoke ivi\ncustom ac\nation\nRun the application to launch Android emulator and verify the result of the changes done in\nthe applic\nFollo ing is the content of the modified main activity file src/MainActivity.java.\npackag e com.example.tutorialspoint.myapplication;\nimpo android.content.Intent;\nimpo android.net.Uri;\nimpo android.support.v.app.AppCompatActivity;\nimpo android.os.Bundle;\nimpo android.view.View;\nimpo android.widget.Button;\npubli class MainActivity extends AppCompatActivity\n{ B ton b1,b2,b3;\n@Ov erride\nprot cted void onCreate(Bundle savedInstanceState) {\nsue r.onCreate(savedInstanceState);\nset ContentView(R.layout.activity_main);\nb1= (Button)findViewById(R.id.button);\nb1. setOnClickListener(new View.OnClickListener()\n{\nverride\nblic void onClick(View v) {\nIntent i = new\nIntent(android.content.Intent.ACTION_VIEW,\nUri.parse(\"http://www.example.com\"));\nstartActivity(i);\n}\n})\nb2 = (Button)findViewById(R.id.button2);\nb2. setOnClickListener(new\nV w.OnClickListener() {\nverride\nblic void onClick(View v) {\nIntent i = new Intent(\"com.example.\ntutorialspoint.myapplication.\nLAUNCH\",Uri.parse(\"http://www.example.com\"));\nstartActivity(i);\n}\n})\n92\nb3 = (Button)findViewById(R.id.button3);\nb3.setOnClickListener(new\nView.OnClickListener() {\n@Override\npublic void onClick(View v) {\nIntent i = new\nIntent(\"com.example. My\nApplication.LAUNCH\",\nUri.parse(\"https://www.example.com\"\n)); startActivity(i);\n}\n});\n}\nFollowing is the content of the modified main activity file src/com.example.My\nApplication/CustomActivity.java.\npackage com.example.tutorialspoint.myapplication;\nimport\nandroid.app.Activity;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.widget.TextView;\n/**\n* Created by TutorialsPoint on 8/23/2016.\n*/\npublic class CustomActivity extends\nActivity { @Override\npublic void onCreate(Bundle\nsavedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.custom_view);\nTextView label = (TextView)\nfindViewById(R.id.show_data); Uri url =\ngetIntent().getData();\nlabel.setText(url.toString());\nFollowing will be the content of res/layout/activity_main.xml file \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\ntools:context=\"com.example.tutorialspoint.myapplication.MainActivit\ny\">\n93\n<TextView\nandroid:id=\"@+id/textView1\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Intent Example\"\nandroid:layout_alignParentTop=\"true\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:textSize=\"30dp\" />\n<TextView\nandroid:id=\"@+id/textView2\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Mrcet\"\nandroid:textColor=\"#ff8ff09\"\nandroid:textSize=\"30dp\"\nandroid:layout_below=\"@+id/textView1\"\nandroid:layout_centerHorizontal=\"true\"/>\n<ImageButton\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/imageButton\"\nandroid:src=\"@drawable/abc\"\nandroid:layout_below=\"@+id/textView2\"\nandroid:layout_centerHorizontal=\"true\"/>\n<EditText\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/editText\"\nandroid:layout_below=\"@+id/imageButton\"\nandroid:layout_alignRight=\"@+id/imageButton\"\nandroid:layout_alignEnd=\"@+id/imageButton\" />\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Start Browser\"\nandroid:id=\"@+id/button\"\nandroid:layout_alignTop=\"@+id/editText\"\nandroid:layout_alignLeft=\"@+id/imageButton\"\nandroid:layout_alignStart=\"@+id/imageButton\"\nandroid:layout_alignEnd=\"@+id/imageButton\" />\n<Button\nandroid:layout_width=\"wrap_content\"\n94\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Start browsing with launch\naction\" android:id=\"@+id/button2\"\nandroid:layout_below=\"@+id/button\"\nandroid:layout_alignLeft=\"@+id/button\"\nandroid:layout_alignStart=\"@+id/button\"\nandroid:layout_alignEnd=\"@+id/button\" />\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Exceptional condition\"\nandroid:id=\"@+id/button3\"\nandroid:layout_below=\"@+id/button2\"\nandroid:layout_alignLeft=\"@+id/button2\n\"\nandroid:layout_alignStart=\"@+id/button\n2\"\nandroid:layout_toStartOf=\"@+id/editTe\nxt\"\nFollowing will be the content of res/layout/custom_view.xml file \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:orientation=\"vertical\" android:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n<TextView\nandroid:id=\"@+id/show_data\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"400dp\"/>\nFollowing will be the content of res/values/strings.xml to define two new constants \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">My Application</string>\n</resources>\nFollowing is the default content of AndroidManifest.xml \u2212\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.tutorialspoint.myapplication\">\n<application\nandroid:allowBackup =\n\"true\"\nandroid:icon =\n\"@mipmap/ic_launcher\" 0\nandroid:label = \"@string/app_name\"\nandroid:supportsRtl = \"true\"\n95\n<intent-filter>\n<action android:name = \"android.intent.action.MAIN\" />\n<category android:name = \"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n<activity android:name=\"com.example.tutorialspoint.myapplication.CustomActivity\">\n<intent-filter>\n<action android:name = \"android.intent.action.VIEW\" />\n<action android:name = \"com.example.tutorialspoint.myapplication.LAUNCH\" />\n<category android:name = \"android.intent.category.DEFAULT\" />\n<data android:scheme = \"http\" />\n</intent-filter>\n</activity>\n</application>\n</manifest>\nLet's try to run your My Application application. I assume you had created your AVD while doing\nenvironment setup. To run the app from Android Studio, open one of your project's activity files and click\nRun icon from the toolbar. Android Studio installs the app on your AVD and starts it and if everything\nis fine with your setup and application, it will display following Emulator window \u2212\n96\nNow let's start with first button \"Start Browser with VIEW Action\". Here we have defined our custom\nactivity with a filter \"android.intent.action.VIEW\", and there is already one default activity against VIEW\naction defined by Android which is launching web browser, So android displays following two options to\nselect the activity you want to launch.\n97\nNow if you select Browser, then Android will launch web browser and open example.com website but if\nyou select IndentDemo option then Android will launch CustomActivity which does nothing but just\ncapture passed data and displays in a text view as follows \u2212\n98\nNow go back using back button and click on \"Start Browser with LAUNCH Action\" button, here Android\napplies filter to choose define activity and it simply launch your custom activity\nAgain, go back using back button and click on \"Exception Condition\" button, here Android tries to find out\na valid filter for the given intent but it does not find a valid activity defined because this time we have used\ndata as https instead of http though we are giving a correct action, so Android raises an exception and\nshows following screen \u2212\nBroadcast Receivers simply respond to broadcast messages from other applications or from the\nsystem itself. These messages are sometime called events or intents. For example, applications\ncan also initiate broadcasts to let other applications know that some data has been downloaded\nto the device and is available for them to use, so this is broadcast receiver who will intercept this\ncommunication and will initiate appropriate action.\nThere are following two important steps to make BroadcastReceiver works for the system broadcasted\nintents \u2212\n\u2022 Creating the Broadcast Receiver.\n99\n\u2022 Registering Broadcast Receiver\nThere is one additional steps in case you are going to implement your custom intents then you will have to\ncreate and broadcast those intents.\nCreating the Broadcast Receiver\nA broadcast receiver is implemented as a subclass of BroadcastReceiver class and overriding the\nonReceive() method where each message is received as a Intent object parameter.\npublic class MyReceiver extends\nBroadcastReceiver { @Override\npublic void onReceive(Context context, Intent intent) {\nToast.makeText(context, \"Intent Detected.\",\nToast.LENGTH_LONG).show();\n}\nRegistering Broadcast Receiver\nAn application listens for specific broadcast intents by registering a broadcast receiver in\nAndroidManifest.xml file. Consider we are going to register MyReceiver for system generated event\nACTION_BOOT_COMPLETED which is fired by the system once the Android system has completed the\nboot process.\nBroadcast-Receiver\n<application\nandroid:icon=\"@drawable/ic_launch\ner\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\"\n>\n<receiver android:name=\"MyReceiver\">\n<intent-filter>\n<action android:name=\"android.intent.action.BOOT_COMPLETED\">\n</action>\n</intent-filter>\n</receiver>\n100\nNow whenever your Android device gets booted, it will be intercepted by\nBroadcastReceiver MyReceiver and implemented logic inside onReceive() will be executed.\nThere are several system generated events defined as final static fields in the Intent class. The following\ntable lists a few important system events.\nSr.No Event Constant & Description\nandroid.intent.action.BATTERY_CHANGED\n1\nSticky broadcast containing the charging state, level, and other information about the battery.\nandroid.intent.action.BATTERY_LOW\n2\nIndicates low battery condition on the device.\nandroid.intent.action.BATTERY_OKAY\n3\nIndicates the battery is now okay after being low.\nandroid.intent.action.BOOT_COMPLETED\n4\nThis is broadcast once, after the system has finished booting.\nandroid.intent.action.BUG_REPORT\n5\nShow activity for reporting a bug.\nandroid.intent.action.CALL\n6\nPerform a call to someone specified by the data.\nandroid.intent.action.CALL_BUTTON\nThe user pressed the \"call\" button to go to the dialer or other appropriate UI for placing a call.\nandroid.intent.action.DATE_CHANGED\n8\nThe date has changed.\nandroid.intent.action.REBOOT\n9\nHave the device reboot.\nBroadcasting Custom Intents\n101\nIf you want your application itself should generate and send custom intents then you will have to create and\nsend those intents by using the sendBroadcast() method inside your activity class. If you use the\nsendStickyBroadcast(Intent) method, the Intent is sticky, meaning the Intent you are sending stays around\nafter the broadcast is complete.\npublic void broadcastIntent(View\nview) { Intent intent = new Intent();\nintent.setAction(\"com.tutorialspoint.CUSTOM_INTE\nNT\"); sendBroadcast(intent);\n}\nThis intent com.tutorialspoint.CUSTOM_INTENT can also be registered in similar way as we have\nregsitered system generated intent.\n<application\nandroid:icon=\"@drawable/ic_launch\ner\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\"\n>\n<receiver android:name=\"MyReceiver\">\n<intent-filter>\n<action android:name=\"com.tutorialspoint.CUSTOM_INTENT\">\n</action>\n</intent-filter>\n</receiver>\nExample\nThis example will explain you how to create BroadcastReceiver to intercept custom intent. Once you are\nfamiliar with custom intent, then you can program your application to intercept system generated intents.\nSo let's follow the following steps to modify the Android application we created in Hello World Example\nchapter \u2212\nStep Description\n1 You will use Android studio to create an Android application and name it as My Application\nunder a package com.example.tutorialspoint.myapplication as explained in the Hello World\nExample chapter.\n2 Modify main activity file MainActivity.java to add broadcastIntent() method.\n3 Create a new java file called MyReceiver.java under the\npackage com.example.tutorialspoint.myapplication to define a BroadcastReceiver.\n102\n4 An application can handle one or more custom and system intents without any restrictions. Every\nintent you want to intercept must be registered in your AndroidManifest.xml file using\n<receiver.../> tag\n5 Modify the default content of res/layout/activity_main.xml file to include a button to broadcast\nintent.\n6 No need to modify the string file, Android studio take care of string.xml file.\nRun the application to launch Android emulator and verify the result of the changes done in the\napplication.\nFollowing is the content of the modified main activity file MainActivity.java. This file can include each of\nthe fundamental life cycle methods. We have added broadcastIntent() method to broadcast a custom intent.\npackage com.example.tutorialspoint.myapplication;\nimport android.app.Activity;\nimport\nandroid.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\npublic class MainActivity extends Activity {\n/** Called when the activity is first created.\n*/ @Override\npublic void onCreate(Bundle\nsavedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\n}\n// broadcast a custom intent.\npublic void broadcastIntent(View\nview){ Intent intent = new Intent();\nintent.setAction(\"com.tutorialspoint.CUSTOM_INTENT\"); sendBroadcast(intent);\n}\n}\nFollowing is the content of MyReceiver.java:\npackage com.example.tutorialspoint.myapplication;\n103\nimport\nandroid.content.BroadcastReceiver;\nimport android.content.Context;\nimport\nandroid.content.Intent;\nimport android.widget.Toast;\n/**\n* Created by TutorialsPoint on 8/23/2016.\n*/\npublic class MyReceiver extends\nBroadcastReceiver{ @Override\npublic void onReceive(Context context, Intent intent) {\nToast.makeText(context, \"Intent Detected.\",\nToast.LENGTH_LONG).show();\nFollowing will the modified content of AndroidManifest.xml file. Here we have added <receiver.../> tag\nto include our service:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.tutorialspoint.myapplication\">\n<application\nandroid:allowBackup=\"true\"\nandroid:icon=\"@mipmap/ic_launch\ner\"\nandroid:label=\"@string/app_name\"\nandroid:supportsRtl=\"true\"\nandroid:theme=\"@style/AppTheme\n\">\n<activity android:name=\".MainActivity\">\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category\nandroid:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n</activity>\n<receiver android:name=\"MyReceiver\">\n<intent-filter>\n<action\nandroid:name=\"com.tutorialspoint.CUSTOM_INTENT\">\n</action>\n</intent-filter>\n</receiver>\n104\nFollowing will be the content of res/layout/activity_main.xml file to include a button to broadcast our\ncustom intent \u2212\n<RelativeLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\ntools:context=\".MainActivity\">\n<TextView\nandroid:id=\"@+id/textView1\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Example of Broadcast\"\nandroid:layout_alignParentTop=\"true\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:textSize=\"30dp\" />\n<TextView\nandroid:id=\"@+id/textView2\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Mrcet \"\nandroid:textColor=\"#ff8ff09\"\nandroid:textSize=\"30dp\"\nandroid:layout_above=\"@+id/imageButton\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:layout_marginBottom=\"40dp\" />\n<ImageButton\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/imageButton\"\nandroid:src=\"@drawable/abc\"\nandroid:layout_centerVertical=\"true\"\nandroid:layout_centerHorizontal=\"true\" />\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/button2\"\nandroid:text=\"Broadcast Intent\"\nandroid:onClick=\"broadcastIntent\"\nandroid:layout_below=\"@+id/imageButton\"\n105\nandroid:layout_centerHorizontal=\"true\" />\n</RelativeLayout>\nLet's try to run our modified Hello World! application we just modified. I assume you had created your\nAVD while doing environment set-up. To run the app from Android studio, open one of your project's\nactivity files and click Run icon from the tool bar. Android Studio installs the app on your AVD and\nstarts it and if everything is fine with your set-up and application, it will display following Emulator window\n\u2212\nNow to broadcast our custom intent, let's click on Broadcast Intent button, this will broadcast our custom\nintent \"com.tutorialspoint.CUSTOM_INTENT\" which will be intercepted by our registered\nBroadcastReceiver i.e. MyReceiver and as per our implemented logic a toast will appear on the bottom of\nthe the simulator as follows \u2212\n106\nYoucantryimplementingother BroadcastReceivertointerceptsystemgeneratedintentslikesystem bootup,\ndate changed, low battery etc.\n107\nUNIT-V\nDatabase: Introduction to SQLite database, creating and opening a database, creating tables, inserting retrieving and\ndeleting data;\nSQLiteisaopensource SQLdatabasethatstoresdatatoatextfileonadevice. Androidcomesinwith built in\nSQLite database implementation.\nSQLitesupportsalltherelationaldatabasefeatures.Inordertoaccessthisdatabase,youdon'tneedto establish\nany kind of connections for it like JDBC,ODBC e.t.c\nDatabase - Package\nThe main package is android.database.sqlite that contains the classes to manage your own databases Database -\nCreation\nInorder to createadatabaseyoujustneed to callthismethodopenOrCreateDatabasewithyourdatabase\nnameandmodeasaparameter. ItreturnsaninstanceofSQLitedatabasewhichyouhaveto receiveinyour\nown object.Its syntax is given below\nSQLiteDatabase mydatabase = openOrCreateDatabase(\"your database name\",MODE_PRIVATE,null); Apart\nfromthis,thereareotherfunctionsavailableinthedatabasepackage,thatdoesthisjob.They are listedbelow\nSr.No Method & Description\n1 openDatabase(String path, SQLiteDatabase.CursorFactory factory, int flags, DatabaseErrorHan\nThismethodonly openstheexisting databasewiththeappropriateflag mode. Thecommonfla\n2 openDatabase(String path, SQLiteDatabase.CursorFactory factory, int flags)\nIt is similar to theabove methodasit alsoopens theexisting database butit does not define a\n3 openOrCreateDatabase(String path, SQLiteDatabase.CursorFactory factory)\nItnotonlyopensbutcreatethedatabase ifitnotexists. ThismethodisequivalenttoopenData\n4 openOrCreateDatabase(File file, SQLiteDatabase.CursorFactory factory)\nThismethodissimilartoabovemethodbutittakesthe Fileobjectasapath ratherthenastrin\nDatabase - Insertion\nwecancreatetableorinsertdataintotableusingexecSQLmethoddefinedinSQLiteDatabaseclass.Itssyntaxis\ngiven below\nmydatabase.execSQL(\"CREATE TABLE IF NOT EXISTS TutorialsPoint(Username VARCHAR,Password\nVARCHAR);\");\nmydatabase.execSQL(\"INSERT INTOTutorialsPoint VALUES('admin','admin');\");\nThis will insert somevalues into our table in our database. Another method that also does the same job but\ntake some additional parameter is given below\n108\nSr.No Method & Description\n1 execSQL(String sql, Object[] bindArgs)\nThismethodnotonlyinsertdata,butalsousedtoupdateormodifyalreadyexistingdatain\nDatabase- Fetching\nWe can rtrieve nything from database using an object of the Cursor class. We will call a method of this class\ncalled ra Queryand itwill return aresultset with thecursorpointing to thetable. Wecan move the cursor\nforward d ret rievethe data.\nCursor rultSet mydatbase.rawQuery(\"Select * from TutorialsPoint\",null); resultSet.moveToFirst();\nStringuse name=resultSet.getString(0);\nString pasword resultSet.getString(1);\nTherear otherf nctionsavailableinthe Cursorclassthatallowsustoeffectivelyretrievethedata. That\nincludes\nSr.No Method & Description\n1 g tColumnCount()\nT is method return the total number of columns of the table.\n2 getColumnIndex(String columnName)\nT ismethodreturnstheindexnumberofacolumnbyspecifyingthenameofthe\nco umn\n3 g tColumnName(int columnIndex)\nT ismethodreturnsthenameofthecolumnbyspecifyingtheindexofthe column\n4 g tColumnNames()\nT is method returns the array of all the column names of the table.\n109\n5 getCount()\nThis method returns the total number of rows in the cursor\n6 getPosition()\nThis method returns the current position of the cursor in the table\n7 isClosed()\nThis method returns true if the cursor is closed and return false otherwise\nDatabase - Helper class\nFor man aging all the operations related to the database , an helper class has been given and is c alled\nSQLiteOp enHelper. Itautomaticallymanagesthecreationandupdateofthedatabase. Itssyntaxis given\nbelow\npublic cla ss DBHelper extends SQLiteOpenHelper {\npublic DB Helper(){\nsuper (context,DATABASE_NAME,null,1);\n}\npublic void onCreate(SQLiteDatabase db) {}\npublic void onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion) {}\n}\nExample\nHereisane xampledemonstratingtheuseof SQLiteDatabase.Itcreatesabasiccontactsapplications that allows\ninsertion , deletion and modification of contacts.\nTo exper iment with this example, you need to run this on an actual device on which camera is\nsupporte d.\nSteps Description\n110\n1 You will use Android studio to create an Android application under a package\ncom.example.sairamkrishna.myapplication.\n2 Modify src/MainActivity.java file to get references of all the XML components and\npopulate the contacts on listView.\n3 Create new src/DBHelper.java that will manage the database work\n4 CreateanewActivityasDisplayContact.javathatwilldisplaythecontactonthe screen\n5 Modify the res/layout/activity_main to add respective XML components\n6 Modify the res/layout/activity_display_contact.xml to add respective XML\ncomponents\n7 Modify the res/values/string.xml to add necessary string components\n8 Modify the res/menu/display_contact.xml to add necessary menu components\n9 Createanewmenuasres/menu/mainmenu.xmltoaddtheinsertcontactoption\n10 Run the application and choose a running android device and install the\napplication on it and verify the results.\n111\nFollowing is the content of the modified MainActivity.java.\npackagecom.example.sairamkrishna.myapplication;\nimport android.content.Context; import\nandroid.content.Intent;\nimport android.support.v.app.ActionBarActivity; import\nandroid.os.Bundle;\nimport android.view.KeyEvent;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.AdapterView; import\nandroid.widget.ArrayAdapter;\nimport android.widget.AdapterView.OnItemClickListener;\nimport android.widget.ListView;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class MainActivity extends ActionBarActivity {\npublicfinalstaticStringEXTRA_MESSAGE=\n\"MESSAGE\"; private ListViewobj;\nDBHelper mydb;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nmydb = new DBHelper(this);\nArrayList array_list = mydb.getAllCotacts();\nArrayAdapter arrayAdapter=new ArrayAdapter(this,android.R.layout.simple_list_item_1,\narray_list);\nobj = (ListView)findViewById(R.id.listView1);\nobj.setAdapter(arrayAdapter);\nobj.setOnItemClickListener(new OnItemClickListener(){\n@Override\npublic void onItemClick(AdapterView<?> arg0, View arg1, int arg2,long arg3) {\n//TODOAuto-generatedmethodstub\nintid_To_Search= arg2 + 1;\nBundledataBundle=newBundle();\n112\ndataBundle.putInt(\"id\", id_To_Search);\nIntent intent = new Intent(getApplicationContext(),DisplayContact.class);\nintent.putExtras(dataBundle);\nstartActivity(intent);\n}\n});\n}\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n//Inflatethemenu;thisaddsitemstotheactionbarifitispresent.\ngetMenuInflater().inflate(R.menu.menu_main,menu);\nreturn true;\n}\n@Override\npublic boolean onOptionsItemSelected(MenuItem item){ super.onOptionsItemSelected(item);\nswitch(item.getItemId()) {\ncase R.id.item1:Bundle dataBundle = new Bundle();\ndataBundle.putInt(\"id\", 0);\nIntentintent=newIntent(getApplicationContext(),DisplayContact.class);\nintent.putExtras(dataBundle);\nstartActivity(intent);\nreturn true;\ndefault:\nreturn super.onOptionsItemSelected(item);\n}\n}\npublic boolean onKeyDown(int keycode, KeyEvent event) { if\n(keycode==KeyEvent.KEYCODE_BACK) {\nmoveTaskToBack(true);\n}\nreturn super.onKeyDown(keycode, event);\n}\n}\nFollowing is the modified content of display contact activity DisplayContact.java package\ncom.example.sairamkrishna.myapplication;\nimport android.os.Bundle; import\nandroid.app.Activity; import\nandroid.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.content.Intent;\n113\nimport android.database.Cursor;\n114\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button; import\nandroid.widget.TextView; import\nandroid.widget.Toast;\npublic class DisplayContact extends Activity { int\nfrom_Where_I_Am_Coming=0;\nprivate DBHelper mydb ;\nTextView name ; TextView phone; TextView email; TextView street;\nTextView place;\nint id_To_Update = 0;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_display_contact); name\n= (TextView) findViewById(R.id.editTextName); phone =\n(TextView)findViewById(R.id.editTextPhone); email =\n(TextView)findViewById(R.id.editTextStreet); street =\n(TextView) findViewById(R.id.editTextEmail); place =\n(TextView) findViewById(R.id.editTextCity);\nmydb = new DBHelper(this);\nBundleextras=getIntent().getExtras();\nif(extras !=null){\nint Value = extras.getInt(\"id\");\nif(Value>0){\n//meansthisistheviewpartnottheaddcontactpart.\nCursor rs = mydb.getData(Value);\nid_To_Update =Value;\nrs.moveToFirst();\nString nam = rs.getString(rs.getColumnIndex(DBHelper.CONTACTS_COLUMN_NAME));\nString phon = rs.getString(rs.getColumnIndex(DBHelper.CONTACTS_COLUMN_PHONE));\nString emai = rs.getString(rs.getColumnIndex(DBHelper.CONTACTS_COLUMN_EMAIL));\nStringstree=rs.getString(rs.getColumnIndex(DBHelper.CONTACTS_COLUMN_STREET));\nString plac = rs.getString(rs.getColumnIndex(DBHelper.CONTACTS_COLUMN_CITY));\nif (!rs.isClosed()) {\nrs.close();\n}\nButton b = (Button)findViewById(R.id.button1);\n115\nb.setVisibility(View.INVISIBLE);\nname.setText((CharSequence)nam);\nname.setFocusable(false);\nname.setClickable(false);\nphone.setText((CharSequence)phon);\nphone.setFocusable(false);\nphone.setClickable(false);\nemail.setText((CharSequence)emai); email.setFocusable(false); email.setClickable(false);\nstreet.setText((CharSequence)stree);\nstreet.setFocusable(false);\nstreet.setClickable(false);\nplace.setText((CharSequence)plac);\nplace.setFocusable(false);\nplace.setClickable(false);\n}\n}\n}\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n//Inflatethemenu;thisaddsitemstotheactionbarifitispresent. Bundle\nextras = getIntent().getExtras();\nif(extras !=null) {\nint Value = extras.getInt(\"id\");\nif(Value>0){\ngetMenuInflater().inflate(R.menu.display_contact, menu);\n} else{\ngetMenuInflater().inflate(R.menu.menu_main menu);\n}\n}\nreturn true;\n}\npublic boolean onOptionsItemSelected(MenuItem item) {\nsuper.onOptionsItemSelected(item);\nswitch(item.getItemId()) {\ncase R.id.Edit_Contact:\nButton b = (Button)findViewById(R.id.button1);\nb.setVisibility(View.VISIBLE);\nname.setEnabled(true);\nname.setFocusableInTouchMode(true);\nname.setClickable(true);\nphone.setEnabled(true);\n116\nphone.setFocusableInTouchMode(true);\nphone.setClickable(true);\nemail.setEnabled(true); email.setFocusableInTouchMode(true); email.setClickable(true);\nstreet.setEnabled(true); street.setFocusableInTouchMode(true);\nstreet.setClickable(true);\nplace.setEnabled(true);\nplace.setFocusableInTouchMode(true);\nplace.setClickable(true);\nreturn true;\ncase R.id.Delete_Contact:\nAlertDialog.Builderbuilder=newAlertDialog.Builder(this);\nbuilder.setMessage(R.string.deleteContact)\n.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() { public void\nonClick(DialogInterface dialog, int id) {\nmydb.deleteContact(id_To_Update); Toast.makeText(getApplicationContext(),\n\"Deleted Successfully\",\nToast.LENGTH_SHORT).show();\nIntentintent = new Intent(getApplicationContext(),MainActivity.class); startActivity(intent);\n}\n})\n.setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {\npublic void onClick(DialogInterface dialog, int id) {\n// User cancelled the dialog\n}\n});\nAlertDialogd= builder.create();\nd.setTitle(\"Are you sure\");\nd.show();\nreturn true;\ndefault:\nreturn super.onOptionsItemSelected(item);\n}\n}\n117\npublic void run(View view) { Bundleextras=getIntent().getExtras();\nif(extras !=null){\nint Value = extras.getInt(\"id\"); if(Value>0){\nif(mydb.updateContact(id_To_Update,name.getText().toString(), phone.getText().toString(),\nemail.getText().toString(),\nstreet.getText().toString(), place.getText().toString())){\nToast.makeText(getApplicationContext(), \"Updated\", Toast.LENGTH_SHORT).show(); Intent intent = new\nIntent(getApplicationContext(),MainActivity.class); startActivity(intent);\n} else{\nToast.makeText(getApplicationContext(), \"not Updated\", Toast.LENGTH_SHORT).show();\n}\n} else{\nif(mydb.insertContact(name.getText().toString(), phone.getText().toString(),\nemail.getText().toString(), street.getText().toString(), place.getText().toString())){\nToast.makeText(getApplicationContext(), \"done\",\nToast.LENGTH_SHORT).show();\n} else{\nToast.makeText(getApplicationContext(), \"notdone\",\nToast.LENGTH_SHORT).show();\n}\nIntentintent=newIntent(getApplicationContext(),MainActivity.class);\nstartActivity(intent);\n}\n}\n}\n}\nFollowing is the content of Database class DBHelper.java\npackage com.example.sairamkrishna.myapplication;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport android.content.ContentValues; import\nandroid.content.Context; import\nandroid.database.Cursor;\nimport android.database.DatabaseUtils;\nimport android.database.sqlite.SQLiteOpenHelper; import\nandroid.database.sqlite.SQLiteDatabase;\npublic class DBHelper extends SQLiteOpenHelper {\npublic static final String DATABASE_NAME =\n\"MyDBName.db\"; public static final String\nCONTACTS_TABLE_NAME = \"contacts\"; public static final\nStringCONTACTS_COLUMN_ID=\"id\";\npublicstaticfinalString CONTACTS_COLUMN_NAME=\n\"name\"; publicstaticfinalStringCONTACTS_COLUMN_EMAIL\n=\"email\"; public static final String\n118\nCONTACTS_COLUMN_STREET = \"street\"; publicstaticfinal\nString CONTACTS_COLUMN_CITY=\"place\"; public static final\nString CONTACTS_COLUMN_PHONE = \"phone\"; private\nHashMaphp;\npublic DBHelper(Context context) {\nsuper(context, DATABASE_NAME , null, 1);\n}\n@Override\npublic void onCreate(SQLiteDatabase db) {\n//TODOAuto-generatedmethodstub\ndb.execSQL(\n\"create table contacts \" +\n\"(id integer primary key, name text,phone text,email text, street text,place text)\"\n);\n}\n@Override\npublic void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n// TODO Auto-generated method stub\ndb.execSQL(\"DROP TABLE IF EXISTS\ncontacts\"); onCreate(db);\n}\npublic boolean insertContact (String name, String phone, String email, String street,String place) { SQLiteDatabase db\n= this.getWritableDatabase();\nContentValues contentValues = new ContentValues();\ncontentValues.put(\"name\", name);\ncontentValues.put(\"phone\", phone);\ncontentValues.put(\"email\", email);\ncontentValues.put(\"street\", street);\ncontentValues.put(\"place\", place);\ndb.insert(\"contacts\", null, contentValues);\nreturn true;\n}\npublic Cursor getData(int id) {\nSQLiteDatabase db = this.getReadableDatabase();\nCursorres= db.rawQuery(\"select*fromcontactswhereid=\"+id+\"\",null);\nreturn res;\n}\npublic int numberOfRows(){\nSQLiteDatabase db = this.getReadableDatabase();\nint numRows = (int) DatabaseUtils.queryNumEntries(db, CONTACTS_TABLE_NAME);\nreturn numRows;\n}\n119\npublic boolean updateContact (Integer id, String name, String phone, String email, String street,String place) {\nSQLiteDatabase db = this.getWritableDatabase();\nContentValues contentValues = new ContentValues();\ncontentValues.put(\"name\", name); contentValues.put(\"phone\", phone);\ncontentValues.put(\"email\", email); contentValues.put(\"street\", street);\ncontentValues.put(\"place\", place);\ndb.update(\"contacts\", contentValues, \"id = ? \", new String[] { Integer.toString(id) } ); return\ntrue;\n}\npublic Integer deleteContact (Integer id) {\nSQLiteDatabase db = this.getWritableDatabase();\nreturn db.delete(\"contacts\",\n\"id = ?\",\nnew String[] { Integer.toString(id) });\n}\npublic ArrayList<String> getAllCotacts() {\nArrayList<String>array_list=newArrayList<String>();\n//hp = new HashMap();\nSQLiteDatabase db = this.getReadableDatabase();\nCursorres= db.rawQuery(\"select*fromcontacts\",null);\nres.moveToFirst();\nwhile(res.isAfterLast() == false){\narray_list.add(res.getString(res.getColumnIndex(CONTACTS_COLUMN_NAME)));\nres.moveToNext();\n}\nreturn array_list;\n}\n}\nFollowing is the content of the res/layout/activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\" android:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\" tools:context=\".MainActivity\">\n120\n<TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\nandroid:id=\"@+id/textView\" android:layout_alignParentTop=\"true\" android:layout_centerHorizontal=\"true\"\nandroid:textSize=\"30dp\"\n<android:text=\"Data Base\"/>\n<TextView android:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Mrcet\"\nandroid:id=\"@+id/textView2\"\nandroid:layout_below=\"@+id/textView\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:textSize=\"35dp\" android:textColor=\"#ff16ff01\" />\n<ImageView\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/imageView\"\nandroid:layout_below=\"@+id/textView2\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:src=\"@drawable/logo\"/>\n<ScrollView android:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id/scrollView\"\nandroid:layout_below=\"@+id/imageView\"\nandroid:layout_alignParentLeft=\"true\"\nandroid:layout_alignParentStart=\"true\"\nandroid:layout_alignParentBottom=\"true\"\nandroid:layout_alignParentRight=\"true\"\nandroid:layout_alignParentEnd=\"true\">\n<ListView\nandroid:id=\"@+id/listView1\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:layout_centerVertical=\"true\" >\n</ListView>\n</ScrollView>\n</RelativeLayout>\nFollowing is the content of the res/layout/activity_display_contact.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/scrollView1\"\nandroid:layout_width=\"match_parent\"\n121\nandroid:layout_height=\"wrap_content\"\ntools:context=\".DisplayContact\" >\n<RelativeLayout\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"30dp\"\nandroid:paddingBottom=\"@dimen/activity_vertical_margin\"\nandroid:paddingLeft=\"@dimen/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen/activity_vertical_margin\">\n<EditText\nandroid:id=\"@+id/editTextName\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignParentLeft=\"true\"\nandroid:layout_marginTop=\"5dp\"\nandroid:layout_marginLeft=\"82dp\"\nandroid:ems=\"10\"\nandroid:inputType=\"text\" >\n</EditText>\n<EditText\nandroid:id=\"@+id/editTextEmail\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignLeft=\"@+id/editTextStreet\"\nandroid:layout_below=\"@+id/editTextStreet\"\nandroid:layout_marginTop=\"22dp\"\nandroid:ems=\"10\"\nandroid:inputType=\"textEmailAddress\"/>\n<TextView android:id=\"@+id/textView1\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignBottom=\"@+id/editTextName\"\nandroid:layout_alignParentLeft=\"true\"\nandroid:text=\"@string/name\"\nandroid:textAppearance=\"?android:attr/textAppearanceMedium\" />\n<Button\nandroid:id=\"@+id/button1\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignLeft=\"@+id/editTextCity\"\nandroid:layout_alignParentBottom=\"true\"\nandroid:layout_marginBottom=\"28dp\"\nandroid:onClick=\"run\"\n122\nandroid:text=\"@string/save\" />\n<TextView\nandroid:id=\"@+id/textView2\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignBottom=\"@+id/editTextEmail\"\nandroid:layout_alignLeft=\"@+id/textView1\"\nandroid:text=\"@string/email\"\nandroid:textAppearance=\"?android:attr/textAppearanceMedium\" />\n<TextView android:id=\"@+id/textView5\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignBottom=\"@+id/editTextPhone\"\nandroid:layout_alignLeft=\"@+id/textView1\"\nandroid:text=\"@string/phone\"\nandroid:textAppearance=\"?android:attr/textAppearanceMedium\" />\n<TextView android:id=\"@+id/textView4\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_above=\"@+id/editTextEmail\"\nandroid:layout_alignLeft=\"@+id/textView5\"\nandroid:text=\"@string/street\"\nandroid:textAppearance=\"?android:attr/textAppearanceMedium\" />\n<EditText\nandroid:id=\"@+id/editTextCity\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignRight=\"@+id/editTextName\"\nandroid:layout_below=\"@+id/editTextEmail\"\nandroid:layout_marginTop=\"30dp\"\nandroid:ems=\"10\"\nandroid:inputType=\"text\" />\n123\n<TextView android:id=\"@+id/textView3\" android:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\" android:layout_alignBaseline=\"@+id/editTextCity\"\nandroid:layout_alignBottom=\"@+id/editTextCity\" android:layout_alignParentLeft=\"true\"\nandroid:layout_toLeftOf=\"@+id/editTextEmail\" android:text=\"@string/country\"\nandroid:textAppearance=\"?android:attr/textAppearanceMedium\" />\n<EditText\nandroid:id=\"@+id/editTextStreet\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignLeft=\"@+id/editTextName\"\nandroid:layout_below=\"@+id/editTextPhone\"\nandroid:ems=\"10\"\nandroid:inputType=\"text\" >\n<requestFocus />\n</EditText>\n<EditText\nandroid:id=\"@+id/editTextPhone\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_alignLeft=\"@+id/editTextStreet\"\nandroid:layout_below=\"@+id/editTextName\"\nandroid:ems=\"10\"\nandroid:inputType=\"phone|text\" />\n</RelativeLayout>\n</ScrollView>\nFollowing is the content of the res/value/string.xml\n<?xml version=\"1.0\"encoding=\"utf-8\"?>\n<resources>\n<string name=\"app_name\">AddressBook</string>\n<string name=\"action_settings\">Settings</string>\n<string name=\"hello_world\">Helloworld!</string>\n<string name=\"Add_New\">AddNew</string>\n<string name=\"edit\">EditContact</string>\n<string name=\"delete\">DeleteContact</string>\n<string name=\"title_activity_display_contact\">DisplayContact</string>\n<string name=\"name\">Name</string>\n<string name=\"phone\">Phone</string>\n<string name=\"email\">Email</string>\n<string name=\"street\">Street</string>\n<string name=\"country\">City/State/Zip</string>\n<string name=\"save\">SaveContact</string>\n<string name=\"deleteContact\">Are you sure, you want to delete it.</string>\n<string name=\"yes\">Yes</string>\n<string name=\"no\">No</string>\n</resources>\n124\nFollowing is the content of the res/menu/main_menu.xml\n<?xml version=\"1.0\"encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n<item android:id=\"@+id/item1\" android:icon=\"@drawable/add\"\nandroid:title=\"@string/Add_New\" >\n</item>\n</menu>\nFollowing is the content of the res/menu/display_contact.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n<item android:id=\"@+id/Edit_Contact\"\nandroid:orderInCategory=\"100\"\nandroid:title=\"@string/edit\"/>\n<item\nandroid:id=\"@+id/Delete_Contact\"\nandroid:orderInCategory=\"100\"\nandroid:title=\"@string/delete\"/>\n</menu>\nThis is the defualt AndroidManifest.xml of this project\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.sairamkrishna.myapplication\" >\n<application\nandroid:allowBackup=\"true\"\nandroid:icon=\"@mipmap/ic_launcher\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\" >\n<activity\nandroid:name=\".MainActivity\"\nandroid:label=\"@string/app_name\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category android:name=\"android.intent.category.LAUNCHER\"/>\n</intent-filter>\n</activity>\n<activity android:name=\".DisplayContact\"/>\n</application>\n</manifest>\n125\nSelectyourmobiledeviceasanoptionandthencheckyourmobiledevicewhichwilldisplayfollowing screen \u2212\n126\nNow open your optional menu, it will show as below image: Optional menu appears different places on\ndifferentversions\n127\nClick on theaddbuttonofthemenuscreentoaddanewcontact.Itwilldisplaythefollowingscreen\u2212\n128\nItwilldisplaythefollowingfields. Pleaseentertherequiredinformationandclickonsavecontact. It willbring\nyou back to main screen.\n129\nNowourcontactsaihasbeenadded.Inorder to seethatwhereisyourdatabaseiscreated. Openyour android\nstudio, connectyourmobile. Gotools/android/android device monitor. Now browse the file explorer tab. Now\nbrowse this folder /data/data/<your.package.name>/databases<database-name>.\n130\n",
  "context": "\u2022 Develop and design apps for mobile devices using SQLiteDatabase.\nUNIT-I\nIntroduction to Android Operating System: Android OS and Features \u2013 Android development",
  "source_file": "resources\\Year 2\\Android Studio\\MOBILE APPLICATION DEVELOPMENT DIGITAL NOTES(R18A1207).pdf",
  "line_numbers": [
    25,
    3701
  ]
}