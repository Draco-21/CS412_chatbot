{
  "title": "spring boot documentation",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "13.5.",
  "code": "14.2. Locating the main application class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n15. Configuration classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n15.1. Importing additional configuration classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n15.2. Importing XML configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n16. Auto-configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n16.1. Gradually replacing auto-configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n16.2. Disabling specific auto-configuration. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n17. Spring Beans and dependency injection. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n18. Using the @SpringBootApplication annotation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n19. Running your application. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n19.1. Running from an IDE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n19.2. Running as a packaged application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n19.3. Using the Maven plugin. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n19.4. Using the Gradle plugin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n19.5. Hot swapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n20. Developer tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n20.1. Property defaults. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n20.2. Automatic restart . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n20.2.1. Excluding resources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n20.2.2. Watching additional paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n20.2.3. Disabling restart. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n20.2.4. Using a trigger file. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n20.2.5. Customizing the restart classloader . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n20.2.6. Known limitations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n20.3. LiveReload. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n20.4. Global settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n20.5. Remote applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n20.5.1. Running the remote client application. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n20.5.2. Remote update . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50\n20.5.3. Remote debug tunnel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n21. Packaging your application for production . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n22. What to read next. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\nSpring Boot features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n23. SpringApplication. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n23.1. Startup failure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n23.2. Customizing the Banner . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n23.3. Customizing SpringApplication. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n23.4. Fluent builder API. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n23.5. Application events and listeners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n23.6. Web environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58\n23.7. Accessing application arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n23.8. Using the ApplicationRunner or CommandLineRunner . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n23.9. Application exit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\n23.10. Admin features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\n24. Externalized Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n24.1. Configuring random values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\n24.2. Accessing command line properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n24.3. Application property files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n24.4. Profile-specific properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\n24.5. Placeholders in properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n24.6. Using YAML instead of Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n24.6.1. Loading YAML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n24.6.2. Exposing YAML as properties in the Spring Environment . . . . . . . . . . . . . . . . . . . . . . . . 66\n24.6.3. Multi-profile YAML documents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n24.6.4. YAML shortcomings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\n24.6.5. Merging YAML lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n24.7. Type-safe Configuration Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n24.7.1. Third-party configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n24.7.2. Relaxed binding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n24.7.3. Properties conversion. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n24.7.4. @ConfigurationProperties Validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n24.7.5. @ConfigurationProperties vs. @Value . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n25. Profiles. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n25.1. Adding active profiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n25.2. Programmatically setting profiles. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\n25.3. Profile-specific configuration files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\n26. Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n26.1. Log format. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n26.2. Console output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n26.2.1. Color-coded output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n26.3. File output. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n26.4. Log Levels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n26.5. Custom log configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n26.6. Logback extensions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n26.6.1. Profile-specific configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n26.6.2. Environment properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n27. Developing web applications. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n27.1. The \u2018Spring Web MVC framework\u2019 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n27.1.1. Spring MVC auto-configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n27.1.2. HttpMessageConverters. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n27.1.3. Custom JSON Serializers and Deserializers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86\n27.1.4. MessageCodesResolver. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86\n27.1.5. Static Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86\n27.1.6. ConfigurableWebBindingInitializer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n27.1.7. Template engines. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n27.1.8. Error Handling. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\nCustom error pages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\nMapping error pages outside of Spring MVC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\nError Handling on WebSphere Application Server. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\n27.1.9. Spring HATEOAS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\n27.1.10. CORS support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\n27.2. JAX-RS and Jersey . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\n27.3. Embedded servlet container support. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n27.3.1. Servlets, Filters, and listeners. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\nRegistering Servlets, Filters, and listeners as Spring beans. . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n27.3.2. Servlet Context Initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\nScanning for Servlets, Filters, and listeners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n27.3.3. The EmbeddedWebApplicationContext . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n27.3.4. Customizing embedded servlet containers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\nProgrammatic customization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\nCustomizing ConfigurableEmbeddedServletContainer directly. . . . . . . . . . . . . . . . . . . . . . . . 97\n27.3.5. JSP limitations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\n28. Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n28.1. OAuth2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100\n28.1.1. Authorization Server . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100\n28.1.2. Resource Server. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100\n28.2. Token Type in User Info . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\n28.3. Customizing the User Info RestTemplate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\n28.3.1. Client. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n28.3.2. Single Sign On. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\n28.4. Actuator Security. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\n29. Working with SQL databases. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n29.1. Configure a DataSource. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n29.1.1. Embedded Database Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n29.1.2. Connection to a production database. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106\n29.1.3. Connection to a JNDI DataSource . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n29.2. Using JdbcTemplate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n29.3. JPA and \u2018Spring Data\u2019 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108\n29.3.1. Entity Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108\n29.3.2. Spring Data JPA Repositories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n29.3.3. Creating and dropping JPA databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\n29.4. Using H2\u2019s web console . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n29.4.1. Changing the H2 console\u2019s path. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n29.4.2. Securing the H2 console. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n29.5. Using jOOQ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n29.5.1. Code Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n29.5.2. Using DSLContext . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n29.5.3. Customizing jOOQ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n30. Working with NoSQL technologies. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n30.1. Redis. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n30.1.1. Connecting to Redis. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n30.2. MongoDB. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n30.2.1. Connecting to a MongoDB database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n30.2.2. MongoTemplate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n30.2.3. Spring Data MongoDB repositories. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n30.2.4. Embedded Mongo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n30.3. Neo4j. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n30.3.1. Connecting to a Neo4j database. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n30.3.2. Using the embedded mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n30.3.3. Neo4jSession. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n30.3.4. Spring Data Neo4j repositories. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\n30.3.5. Repository example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\n30.4. Gemfire . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\n30.5. Solr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\n30.5.1. Connecting to Solr. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\n30.5.2. Spring Data Solr repositories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\n30.6. Elasticsearch. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\n30.6.1. Connecting to Elasticsearch using Jest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\n30.6.2. Connecting to Elasticsearch using Spring Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121\n30.6.3. Spring Data Elasticsearch repositories. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121\n30.7. Cassandra . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\n30.7.1. Connecting to Cassandra . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\n30.7.2. Spring Data Cassandra repositories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\n30.8. Couchbase. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\n30.8.1. Connecting to Couchbase. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n30.8.2. Spring Data Couchbase repositories. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n31. Caching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n31.1. Supported cache providers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n31.1.1. Generic. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\n31.1.2. JCache (JSR-107) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n31.1.3. EhCache 2.x. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n31.1.4. Hazelcast . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n31.1.5. Infinispan . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\n31.1.6. Couchbase . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\n31.1.7. Redis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129\n31.1.8. Caffeine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129\n31.1.9. Simple. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n31.1.10. None . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n32. Messaging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131\n32.1. JMS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131\n32.1.1. ActiveMQ support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131\n32.1.2. Artemis support. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131\n32.1.3. Using a JNDI ConnectionFactory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132\n32.1.4. Sending a message . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132\n32.1.5. Receiving a message . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n32.2. AMQP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\n32.2.1. RabbitMQ support. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\n32.2.2. Sending a message . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\n32.2.3. Receiving a message . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\n32.3. Apache Kafka Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138\n32.4. Sending a Message . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138\n32.5. Receiving a Message. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138\n32.6. Additional Kafka Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139\n33. Calling REST services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n33.1. RestTemplate customization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\n34. Validation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\n35. Sending email . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\n36. Distributed Transactions with JTA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\n36.1. Using an Atomikos transaction manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\n36.2. Using a Bitronix transaction manager. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\n36.3. Using a Narayana transaction manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\n36.4. Using a Java EE managed transaction manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\n36.5. Mixing XA and non-XA JMS connections. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\n36.6. Supporting an alternative embedded transaction manager . . . . . . . . . . . . . . . . . . . . . . . . . 146\n37. Hazelcast. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\n38. Spring Integration. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148\n39. Spring Session . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\n40. Monitoring and management over JMX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\n41. Testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\n41.1. Test scope dependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\n41.2. Testing Spring applications. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\n41.3. Testing Spring Boot applications. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n41.3.1. Detecting test configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\n41.3.2. Excluding test configuration. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153\n41.3.3. Working with random ports. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153\n41.3.4. Mocking and spying beans . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n41.3.5. Auto-configured tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155\n41.3.6. Auto-configured JSON tests. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\n41.3.7. Auto-configured Spring MVC tests. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157\n41.3.8. Auto-configured Data JPA tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159\n41.3.9. Auto-configured JDBC tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\n41.3.10. Auto-configured REST clients. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\n41.3.11. Auto-configured Spring REST Docs tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162\n41.3.12. Using Spock to test Spring Boot applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164\n41.4. Test utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\n41.4.1. ConfigFileApplicationContextInitializer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\n41.4.2. EnvironmentTestUtils. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\n41.4.3. OutputCapture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\n41.4.4. TestRestTemplate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166\n42. WebSockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168\n43. Web Services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169\n44. Creating your own auto-configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170\n44.1. Understanding auto-configured beans . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170\n44.2. Locating auto-configuration candidates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170\n44.3. Condition annotations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171\n44.3.1. Class conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171\n44.3.2. Bean conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171\n44.3.3. Property conditions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171\n44.3.4. Resource conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171\n44.3.5. Web application conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172\n44.3.6. SpEL expression conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172\n44.4. Creating your own starter. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172\n44.4.1. Naming. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172\n44.4.2. Autoconfigure module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172\n44.4.3. Starter module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\n45. What to read next. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174\nSpring Boot Actuator: Production-ready features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174\n46. Enabling production-ready features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175\n47. Endpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176\n47.1. Customizing endpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177\n47.2. Hypermedia for actuator MVC endpoints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178\n47.3. CORS support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178\n47.4. Adding custom endpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178\n47.5. Health information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179\n47.6. Security with HealthIndicators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179\n47.6.1. Auto-configured HealthIndicators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179\n47.6.2. Writing custom HealthIndicators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180\n47.7. Application information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\n47.7.1. Auto-configured InfoContributors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\n47.7.2. Custom application info information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\n47.7.3. Git commit information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\n47.7.4. Build information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\n47.7.5. Writing custom InfoContributors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\n48. Monitoring and management over HTTP. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\n48.1. Securing sensitive endpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\n48.2. Customizing the management endpoint paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\n48.3. Customizing the management server port . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185\n48.4. Configuring management-specific SSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185\n48.5. Customizing the management server address. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\n48.6. Disabling HTTP endpoints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\n48.7. HTTP health endpoint access restrictions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\n49. Monitoring and management over JMX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\n49.1. Customizing MBean names. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\n49.2. Disabling JMX endpoints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\n49.3. Using Jolokia for JMX over HTTP. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\n49.3.1. Customizing Jolokia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\n49.3.2. Disabling Jolokia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\n50. Loggers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190\n50.1. Configure a Logger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190\n51. Metrics. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191\n51.1. System metrics. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192\n51.2. DataSource metrics. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192\n51.3. Cache metrics. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193\n51.4. Tomcat session metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193\n51.5. Recording your own metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193\n51.6. Adding your own public metrics. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\n51.7. Special features with Java 8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\n51.8. Metric writers, exporters and aggregation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195\n51.8.1. Example: Export to Redis. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195\n51.8.2. Example: Export to Open TSDB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196\n51.8.3. Example: Export to Statsd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197\n51.8.4. Example: Export to JMX. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197\n51.9. Aggregating metrics from multiple sources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198\n51.10. Dropwizard Metrics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199\n51.11. Message channel integration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199\n52. Auditing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200\n53. Tracing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201\n53.1. Custom tracing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201\n54. Process monitoring. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\n54.1. Extend configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\n54.2. Programmatically . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\n55. What to read next. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\nDeploying Spring Boot applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\n56. Deploying to the cloud. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204\n56.1. Cloud Foundry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204\n56.1.1. Binding to services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205\n56.2. Heroku. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206\n56.3. OpenShift. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207\n56.4. Boxfuse and Amazon Web Services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\n56.5. Google App Engine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\n57. Installing Spring Boot applications. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\n57.1. Unix/Linux services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\n57.1.1. Installation as an init.d service (System V) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nSecuring an init.d service. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\n57.1.2. Installation as a systemd service. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\n57.1.3. Customizing the startup script. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214\nCustomizing script when it\u2019s written . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214\nCustomizing script when it runs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\n57.2. Microsoft Windows services. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\n58. What to read next. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\nSpring Boot CLI. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\n59. Installing the CLI. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218\n60. Using the CLI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\n60.1. Running applications using the CLI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\n60.1.1. Deduced \u201cgrab\u201d dependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220\n60.1.2. Deduced \u201cgrab\u201d coordinates. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221\n60.1.3. Default import statements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221\n60.1.4. Automatic main method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221\n60.1.5. Custom dependency management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222\n60.2. Testing your code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222\n60.3. Applications with multiple source files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223\n60.4. Packaging your application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223\n60.5. Initialize a new project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224\n60.6. Using the embedded shell. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225\n60.7. Adding extensions to the CLI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225\n61. Developing application with the Groovy beans DSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227\n62. Configuring the CLI with settings.xml. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228\n63. What to read next. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229\nBuild tool plugins. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229\n64. Spring Boot Maven plugin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230\n64.1. Including the plugin. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230\n64.2. Packaging executable jar and war files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231\n65. Spring Boot Gradle plugin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233\n65.1. Including the plugin. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233\n65.2. Gradle dependency management. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233\n65.3. Packaging executable jar and war files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234\n65.4. Running a project in-place . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235\n65.5. Spring Boot plugin configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235\n65.6. Repackage configuration. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236\n65.7. Repackage with custom Gradle configuration. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237\n65.7.1. Configuration options. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238\n65.7.2. Available layouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238\n65.7.3. Using a custom layout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239\n65.8. Understanding how the Gradle plugin works . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239\n65.9. Publishing artifacts to a Maven repository using Gradle . . . . . . . . . . . . . . . . . . . . . . . . . . . . 240\n65.9.1. Configuring Gradle to produce a pom that inherits dependency management . . . . 240\n65.9.2. Configuring Gradle to produce a pom that imports dependency management . . . . 241\n66. Spring Boot AntLib module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242\n66.1. Spring Boot Ant tasks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242\n66.1.1. spring-boot:exejar. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242\n66.1.2. Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243\n66.2. spring-boot:findmainclass . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243\n66.2.1. Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243\n67. Supporting other build systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n67.1. Repackaging archives. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n67.2. Nested libraries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n67.3. Finding a main class. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n67.4. Example repackage implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n68. What to read next. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246\n\u2018How-to\u2019 guides. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246\n69. Spring Boot application. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247\n69.1. Create your own FailureAnalyzer. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247\n69.2. Troubleshoot auto-configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247\n69.3. Customize the Environment or ApplicationContext before it starts. . . . . . . . . . . . . . . . . . . 248\n69.4. Build an ApplicationContext hierarchy (adding a parent or root context). . . . . . . . . . . . . 248\n69.5. Create a non-web application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248\n70. Properties & configuration. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250\n70.1. Automatically expand properties at build time. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250\n70.1.1. Automatic property expansion using Maven . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250\n70.1.2. Automatic property expansion using Gradle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251\n70.2. Externalize the configuration of SpringApplication. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251\n70.3. Change the location of external properties of an application . . . . . . . . . . . . . . . . . . . . . . . . 252\n70.4. Use \u2018short\u2019 command line arguments. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252\n70.5. Use YAML for external properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253\n70.6. Set the active Spring profiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254\n70.7. Change configuration depending on the environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254\n70.8. Discover built-in options for external properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255\n71. Embedded servlet containers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256\n71.1. Add a Servlet, Filter or Listener to an application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256\n71.1.1. Add a Servlet, Filter or Listener using a Spring bean. . . . . . . . . . . . . . . . . . . . . . . . . . . . 256\nDisable registration of a Servlet or Filter. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256\n71.1.2. Add Servlets, Filters, and Listeners using classpath scanning . . . . . . . . . . . . . . . . . . . . 257\n71.2. Change the HTTP port . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\n71.3. Use a random unassigned HTTP port. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\n71.4. Discover the HTTP port at runtime. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\n71.5. Configure SSL. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258\n71.6. Configure Access Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258\n71.7. Use behind a front-end proxy server. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259\n71.7.1. Customize Tomcat\u2019s proxy configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259\n71.8. Configure Tomcat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260\n71.9. Enable Multiple Connectors with Tomcat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260\n71.10. Use Tomcat\u2019s LegacyCookieProcessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261\n71.11. Use Jetty instead of Tomcat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262\n71.12. Configure Jetty. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263\n71.13. Use Undertow instead of Tomcat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263\n71.14. Configure Undertow. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264\n71.15. Enable Multiple Listeners with Undertow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264\n71.16. Use Tomcat 7.x or 8.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264\n71.16.1. Use Tomcat 7.x or 8.0 with Maven . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265\n71.16.2. Use Tomcat 7.x or 8.0 with Gradle. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265\n71.17. Use Jetty 9.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265\n71.17.1. Use Jetty 9.2 with Maven . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265\n71.17.2. Use Jetty 9.2 with Gradle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\n71.18. Use Jetty 8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\n71.18.1. Use Jetty 8 with Maven. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\n71.18.2. Use Jetty 8 with Gradle. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267\n71.19. Create WebSocket endpoints using @ServerEndpoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268\n71.20. Enable HTTP response compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268\n72. Spring MVC. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269\n72.1. Write a JSON REST service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269\n72.2. Write an XML REST service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269\n72.3. Customize the Jackson ObjectMapper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270\n72.4. Customize the @ResponseBody rendering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271\n72.5. Handling Multipart File Uploads. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272\n72.6. Switch off the Spring MVC DispatcherServlet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272\n72.7. Switch off the Default MVC configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272\n72.8. Customize ViewResolvers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272\n72.9. Use Thymeleaf 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273\n73. HTTP clients . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275\n73.1. Configure RestTemplate to use a proxy. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275\n74. Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276\n74.1. Configure Logback for logging. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276\n74.1.1. Configure logback for file only output. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277\n74.2. Configure Log4j for logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277\n74.2.1. Use YAML or JSON to configure Log4j 2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278\n75. Data Access. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279\n75.1. Configure a DataSource. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279\n75.2. Configure Two DataSources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280\n75.3. Use Spring Data repositories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280\n75.4. Separate @Entity definitions from Spring configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281\n75.5. Configure JPA properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281\n75.6. Use a custom EntityManagerFactory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282\n75.7. Use Two EntityManagers. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282\n75.8. Use a traditional persistence.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283\n75.9. Use Spring Data JPA and Mongo repositories. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283\n75.10. Expose Spring Data repositories as REST endpoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283\n75.11. Configure a component that is used by JPA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284\n76. Database initialization. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285\n76.1. Initialize a database using JPA. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285\n76.2. Initialize a database using Hibernate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285\n76.3. Initialize a database using Spring JDBC. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285\n76.4. Initialize a Spring Batch database. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286\n76.5. Use a higher-level database migration tool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286\n76.5.1. Execute Flyway database migrations on startup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286\n76.5.2. Execute Liquibase database migrations on startup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287\n77. Messaging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288\n77.1. Disable transacted JMS session . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288\n78. Batch applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289\n78.1. Execute Spring Batch jobs on startup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289\n79. Actuator. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290\n79.1. Change the HTTP port or address of the actuator endpoints. . . . . . . . . . . . . . . . . . . . . . . . . 290\n79.2. Customize the \u2018whitelabel\u2019 error page. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290\n79.3. Actuator and Jersey . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290\n80. Security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291\n80.1. Switch off the Spring Boot security configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291\n80.2. Change the AuthenticationManager and add user accounts . . . . . . . . . . . . . . . . . . . . . . . . . 291\n80.3. Enable HTTPS when running behind a proxy server. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292\n81. Hot swapping. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293\n81.1. Reload static content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293\n81.2. Reload templates without restarting the container . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293\n81.2.1. Thymeleaf templates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293\n81.2.2. FreeMarker templates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293\n81.2.3. Groovy templates. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293\n81.3. Fast application restarts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293\n81.4. Reload Java classes without restarting the container . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294\n81.4.1. Configuring Spring Loaded for use with Maven . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294\n81.4.2. Configuring Spring Loaded for use with Gradle and IntelliJ IDEA . . . . . . . . . . . . . . . . 294\n82. Build. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296\n82.1. Generate build information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296\n82.2. Generate git information. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297\n82.3. Customize dependency versions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297\n82.4. Create an executable JAR with Maven. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298\n82.5. Use a Spring Boot application as a dependency . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298\n82.6. Extract specific libraries when an executable jar runs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299\n82.7. Create a non-executable JAR with exclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300\n82.8. Remote debug a Spring Boot application started with Maven. . . . . . . . . . . . . . . . . . . . . . . . 302\n82.9. Remote debug a Spring Boot application started with Gradle. . . . . . . . . . . . . . . . . . . . . . . . 302\n82.10. Build an executable archive from Ant without using spring-boot-antlib . . . . . . . . . . . . . 302\n82.11. How to use Java 6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303\n82.11.1. Embedded servlet container compatibility. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303\n82.11.2. Jackson. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304\n82.11.3. JTA API compatibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304\n83. Traditional deployment. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305\n83.1. Create a deployable war file. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305\n83.2. Create a deployable war file for older servlet containers. . . . . . . . . . . . . . . . . . . . . . . . . . . . 306\n83.3. Convert an existing application to Spring Boot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306\n83.4. Deploying a WAR to WebLogic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309\n83.5. Deploying a WAR in an Old (Servlet 2.5) Container . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309\nAppendices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311\nAppendix A: Common application properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312\nAppendix B: Configuration meta-data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348\nMeta-data format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348\nGroup Attributes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350\nProperty Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350\nHint Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352\nRepeated meta-data items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353\nProviding manual hints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353\nValue hint. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353\nValue provider . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354\nAny . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355\nClass reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356\nHandle As. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356\nLogger name . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357\nSpring bean reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359\nSpring profile name . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359\nGenerating your own meta-data using the annotation processor . . . . . . . . . . . . . . . . . . . . . . . . . 360\nNested properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361\nAdding additional meta-data. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 362\nAppendix C: Auto-configuration classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363\nFrom the \u201cspring-boot-autoconfigure\u201d module. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363\nFrom the \u201cspring-boot-actuator\u201d module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366\nAppendix D: Test auto-configuration annotations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 367\nAppendix E: The executable jar format. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369\nNested JARs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369\nThe executable jar file structure. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369\nThe executable war file structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370\nSpring Boot\u2019s \u201cJarFile\u201d class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370\nCompatibility with the standard Java \u201cJarFile\u201d. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371\nLaunching executable jars . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371\nLauncher manifest. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 371\nExploded archives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 372\nPropertiesLauncher Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 372\nExecutable jar restrictions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373\nZip entry compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373\nSystem ClassLoader . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373\nAlternative single jar solutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373\nAppendix F: Dependency versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 374\nSpring Boot Documentation\nThis section provides a brief overview of Spring Boot reference documentation. Think of it as map\nfor the rest of the document. You can read this reference guide in a linear fashion, or you can skip\nsections if something doesn\u2019t interest you.\n1\nChapter 1. About the documentation\nThe Spring Boot reference guide is available as html, pdf and epub documents. The latest copy is\navailable at docs.spring.io/spring-boot/docs/current/reference.\nCopies of this document may be made for your own use and for distribution to others, provided\nthat you do not charge any fee for such copies and further provided that each copy contains this\nCopyright Notice, whether distributed in print or electronically.\n2\nChapter 2. Getting help\nHaving trouble with Spring Boot, We\u2019d like to help!\n\u2022 Try the How-to\u2019s \u2014 they provide solutions to the most common questions.\n\u2022 Learn the Spring basics \u2014 Spring Boot builds on many other Spring projects, check the spring.io\nweb-site for a wealth of reference documentation. If you are just starting out with Spring, try\none of the guides.\n\u2022 Ask a question - we monitor stackoverflow.com for questions tagged with spring-boot.\n\u2022 Report bugs with Spring Boot at github.com/spring-projects/spring-boot/issues.\n\uf05a All of Spring Boot is open source, including the documentation! If you find\nproblems with the docs; or if you just want to improve them, please get involved.\n3\nChapter 3. First steps\nIf you\u2019re just getting started with Spring Boot, or 'Spring' in general, this is the place to start!\n\u2022 From scratch: Overview | Requirements | Installation\n\u2022 Tutorial: Part 1 | Part 2\n\u2022 Running your example: Part 1 | Part 2\n4\nChapter 4. Working with Spring Boot\nReady to actually start using Spring Boot? We\u2019ve got you covered.\n\u2022 Build systems: Maven | Gradle | Ant | Starters\n\u2022 Best practices: Code Structure | @Configuration | @EnableAutoConfiguration | Beans and\nDependency Injection\n\u2022 Running your code IDE | Packaged | Maven | Gradle\n\u2022 Packaging your app: Production jars\n\u2022 Spring Boot CLI: Using the CLI\n5\nChapter 5. Learning about Spring Boot\nfeatures\nNeed more details about Spring Boot\u2019s core features? This is for you!\n\u2022 Core Features: SpringApplication | External Configuration | Profiles | Logging\n\u2022 Web Applications: MVC | Embedded Containers\n\u2022 Working with data: SQL | NO-SQL\n\u2022 Messaging: Overview | JMS\n\u2022 Testing: Overview | Boot Applications | Utils\n\u2022 Extending: Auto-configuration | @Conditions\n6\nChapter 6. Moving to production\nWhen you\u2019re ready to push your Spring Boot application to production, we\u2019ve got some tricks that\nyou might like!\n\u2022 Management endpoints: Overview | Customization\n\u2022 Connection options: HTTP | JMX |\n\u2022 Monitoring: Metrics | Auditing | Tracing | Process\n7\nChapter 7. Advanced topics\nLastly, we have a few topics for the more advanced user.\n\u2022 Deploy Spring Boot Applications: Cloud Deployment | OS Service\n\u2022 Build tool plugins: Maven | Gradle\n\u2022 Appendix: Application Properties | Auto-configuration classes | Executable Jars\nGetting started\nIf you\u2019re just getting started with Spring Boot, or 'Spring' in general, this is the section for you! Here\nwe answer the basic \u201cwhat?\u201d, \u201chow?\u201d and \u201cwhy?\u201d questions. You\u2019ll find a gentle introduction to\nSpring Boot along with installation instructions. We\u2019ll then build our first Spring Boot application,\ndiscussing some core principles as we go.\n8\nChapter 8. Introducing Spring Boot\nSpring Boot makes it easy to create stand-alone, production-grade Spring based Applications that\nyou can \u201cjust run\u201d. We take an opinionated view of the Spring platform and third-party libraries so\nyou can get started with minimum fuss. Most Spring Boot applications need very little Spring\nconfiguration.\nYou can use Spring Boot to create Java applications that can be started using java -jar or more\ntraditional war deployments. We also provide a command line tool that runs \u201cspring scripts\u201d.\nOur primary goals are:\n\u2022 Provide a radically faster and widely accessible getting started experience for all Spring\ndevelopment.\n\u2022 Be opinionated out of the box, but get out of the way quickly as requirements start to diverge\nfrom the defaults.\n\u2022 Provide a range of non-functional features that are common to large classes of projects (e.g.\nembedded servers, security, metrics, health checks, externalized configuration).\n\u2022 Absolutely no code generation and no requirement for XML configuration.\n9\nChapter 9. System Requirements\nBy default, Spring Boot 2.0.0.BUILD-SNAPSHOT requires Java 7 and Spring Framework 5.0.0.BUILD-\nSNAPSHOT or above. You can use Spring Boot with Java 6 with some additional configuration. See\nHow to use Java 6 for more details. Explicit build support is provided for Maven (3.2+) and Gradle 2\n(2.9 or later). Gradle 3 is not supported.\n\uf0eb Although you can use Spring Boot with Java 6 or 7, we generally recommend Java\n8 if at all possible.\n9.1. Servlet containers\nThe following embedded servlet containers are supported out of the box:\nName Servlet Version Java Version\nTomcat 8 3.1 Java 7+\nTomcat 7 3.0 Java 6+\nJetty 9.3 3.1 Java 8+\nJetty 9.2 3.1 Java 7+\nJetty 8 3.0 Java 6+\nUndertow 1.3 3.1 Java 7+\nYou can also deploy Spring Boot applications to any Servlet 3.0+ compatible container.\n10\nChapter 10. Installing Spring Boot\nSpring Boot can be used with \u201cclassic\u201d Java development tools or installed as a command line tool.\nRegardless, you will need Java SDK v1.6 or higher. You should check your current Java installation\nbefore you begin:\n$ java -version\nIf you are new to Java development, or if you just want to experiment with Spring Boot you might\nwant to try the Spring Boot CLI first, otherwise, read on for \u201cclassic\u201d installation instructions.\n\uf0eb Although Spring Boot is compatible with Java 1.6, if possible, you should consider\nusing the latest version of Java.\n10.1. Installation instructions for the Java developer\nYou can use Spring Boot in the same way as any standard Java library. Simply include the\nappropriate spring-boot-*.jar files on your classpath. Spring Boot does not require any special\ntools integration, so you can use any IDE or text editor; and there is nothing special about a Spring\nBoot application, so you can run and debug as you would any other Java program.\nAlthough you could just copy Spring Boot jars, we generally recommend that you use a build tool\nthat supports dependency management (such as Maven or Gradle).\n10.1.1. Maven installation\nSpring Boot is compatible with Apache Maven 3.2 or above. If you don\u2019t already have Maven\ninstalled you can follow the instructions at maven.apache.org.\nOn many operating systems Maven can be installed via a package manager. If\n\uf0eb\nyou\u2019re an OSX Homebrew user try brew install maven. Ubuntu users can run sudo\napt-get install maven.\nSpring Boot dependencies use the org.springframework.boot groupId. Typically your Maven POM file\nwill inherit from the spring-boot-starter-parent project and declare dependencies to one or more\n\u201cStarters\u201d. Spring Boot also provides an optional Maven plugin to create executable jars.\nHere is a typical pom.xml file:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\n\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n11\n<groupId>com.example</groupId>\n<artifactId>myproject</artifactId>\n<version>0.0.1-SNAPSHOT</version>\n<!-- Inherit defaults from Spring Boot -->\n<parent>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-parent</artifactId>\n<version>2.0.0.BUILD-SNAPSHOT</version>\n</parent>\n<!-- Add typical dependencies for a web application -->\n<dependencies>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n</dependencies>\n<!-- Package as an executable jar -->\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n</plugins>\n</build>\n<!-- Add Spring repositories -->\n<!-- (you don't need this if you are using a .RELEASE version) -->\n<repositories>\n<repository>\n<id>spring-snapshots</id>\n<url>http://repo.spring.io/snapshot</url>\n<snapshots><enabled>true</enabled></snapshots>\n</repository>\n<repository>\n<id>spring-milestones</id>\n<url>http://repo.spring.io/milestone</url>\n</repository>\n</repositories>\n<pluginRepositories>\n<pluginRepository>\n<id>spring-snapshots</id>\n<url>http://repo.spring.io/snapshot</url>\n</pluginRepository>\n<pluginRepository>\n<id>spring-milestones</id>\n<url>http://repo.spring.io/milestone</url>\n</pluginRepository>\n12\n</pluginRepositories>\n</project>\nThe spring-boot-starter-parent is a great way to use Spring Boot, but it might not\n\uf0eb be suitable all of the time. Sometimes you may need to inherit from a different\nparent POM, or you might just not like our default settings. See Using Spring Boot\nwithout the parent POM for an alternative solution that uses an import scope.\n10.1.2. Gradle installation\nSpring Boot is compatible with Gradle 2 (2.9 or later). Gradle 2.14.1 is recommended and Gradle 3 is\nnot supported. If you don\u2019t already have Gradle installed you can follow the instructions at\nwww.gradle.org/.\nSpring Boot dependencies can be declared using the org.springframework.boot group. Typically your\nproject will declare dependencies to one or more \u201cStarters\u201d. Spring Boot provides a useful Gradle\nplugin that can be used to simplify dependency declarations and to create executable jars.\nGradle Wrapper\nThe Gradle Wrapper provides a nice way of \u201cobtaining\u201d Gradle when you need to build a\nproject. It\u2019s a small script and library that you commit alongside your code to bootstrap the\nbuild process. See docs.gradle.org/2.14.1/userguide/gradle_wrapper.html for details.\nHere is a typical build.gradle file:\n13\nbuildscript {\nrepositories {\njcenter()\nmaven { url \"http://repo.spring.io/snapshot\" }\nmaven { url \"http://repo.spring.io/milestone\" }\n}\ndependencies {\nclasspath(\"org.springframework.boot:spring-boot-gradle-plugin:2.0.0.BUILD-\nSNAPSHOT\")\n}\n}\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\njar {\nbaseName = 'myproject'\nversion = '0.0.1-SNAPSHOT'\n}\nrepositories {\njcenter()\nmaven { url \"http://repo.spring.io/snapshot\" }\nmaven { url \"http://repo.spring.io/milestone\" }\n}\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-starter-web\")\ntestCompile(\"org.springframework.boot:spring-boot-starter-test\")\n}\n10.2. Installing the Spring Boot CLI\nThe Spring Boot CLI is a command line tool that can be used if you want to quickly prototype with\nSpring. It allows you to run Groovy scripts, which means that you have a familiar Java-like syntax,\nwithout so much boilerplate code.\nYou don\u2019t need to use the CLI to work with Spring Boot but it\u2019s definitely the quickest way to get a\nSpring application off the ground.\n10.2.1. Manual installation\nYou can download the Spring CLI distribution from the Spring software repository:\n\u2022 spring-boot-cli-2.0.0.BUILD-SNAPSHOT-bin.zip\n\u2022 spring-boot-cli-2.0.0.BUILD-SNAPSHOT-bin.tar.gz\nCutting edge snapshot distributions are also available.\n14\nOnce downloaded, follow the INSTALL.txt instructions from the unpacked archive. In summary:\nthere is a spring script (spring.bat for Windows) in a bin/ directory in the .zip file, or alternatively\nyou can use java -jar with the .jar file (the script helps you to be sure that the classpath is set\ncorrectly).\n10.2.2. Installation with SDKMAN!\nSDKMAN! (The Software Development Kit Manager) can be used for managing multiple versions of\nvarious binary SDKs, including Groovy and the Spring Boot CLI. Get SDKMAN! from sdkman.io and\ninstall Spring Boot with\n$ sdk install springboot\n$ spring --version\nSpring Boot v2.0.0.BUILD-SNAPSHOT\nIf you are developing features for the CLI and want easy access to the version you just built, follow\nthese extra instructions.\n$ sdk install springboot dev /path/to/spring-boot/spring-boot-cli/target/spring-boot-\ncli-2.0.0.BUILD-SNAPSHOT-bin/spring-2.0.0.BUILD-SNAPSHOT/\n$ sdk default springboot dev\n$ spring --version\nSpring CLI v2.0.0.BUILD-SNAPSHOT\nThis will install a local instance of spring called the dev instance. It points at your target build\nlocation, so every time you rebuild Spring Boot, spring will be up-to-date.\nYou can see it by doing this:\n$ sdk ls springboot\n================================================================================\nAvailable Springboot Versions\n================================================================================\n> + dev\n* 2.0.0.BUILD-SNAPSHOT\n================================================================================\n+ - local version\n* - installed\n> - currently in use\n================================================================================\n10.2.3. OSX Homebrew installation\nIf you are on a Mac and using Homebrew, all you need to do to install the Spring Boot CLI is:\n15\n$ brew tap pivotal/tap\n$ brew install springboot\nHomebrew will install spring to /usr/local/bin.\n\uf05a If you don\u2019t see the formula, your installation of brew might be out-of-date. Just\nexecute brew update and try again.\n10.2.4. MacPorts installation\nIf you are on a Mac and using MacPorts, all you need to do to install the Spring Boot CLI is:\n$ sudo port install spring-boot-cli\n10.2.5. Command-line completion\nSpring Boot CLI ships with scripts that provide command completion for BASH and zsh shells. You\ncan source the script (also named spring) in any shell, or put it in your personal or system-wide\nbash completion initialization. On a Debian system the system-wide scripts are in /shell-\ncompletion/bash and all scripts in that directory are executed when a new shell starts. To run the\nscript manually, e.g. if you have installed using SDKMAN!\n$ . ~/.sdkman/candidates/springboot/current/shell-completion/bash/spring\n$ spring <HIT TAB HERE>\ngrab help jar run test version\n\uf05a If you install Spring Boot CLI using Homebrew or MacPorts, the command-line\ncompletion scripts are automatically registered with your shell.\n10.2.6. Quick start Spring CLI example\nHere\u2019s a really simple web application that you can use to test your installation. Create a file called\napp.groovy:\n@RestController\nclass ThisWillActuallyRun {\n@RequestMapping(\"/\")\nString home() {\n\"Hello World!\"\n}\n}\n16\nThen simply run it from a shell:\n$ spring run app.groovy\n\uf05a It will take some time when you first run the application as dependencies are\ndownloaded. Subsequent runs will be much quicker.\nOpen localhost:8080 in your favorite web browser and you should see the following output:\nHello World!\n10.3. Upgrading from an earlier version of Spring Boot\nIf you are upgrading from an earlier release of Spring Boot check the \u201crelease notes\u201d hosted on the\nproject wiki. You\u2019ll find upgrade instructions along with a list of \u201cnew and noteworthy\u201d features for\neach release.\nTo upgrade an existing CLI installation use the appropriate package manager command (for\nexample brew upgrade) or, if you manually installed the CLI, follow the standard instructions\nremembering to update your PATH environment variable to remove any older references.\n17\nChapter 11. Developing your first Spring\nBoot application\nLet\u2019s develop a simple \u201cHello World!\u201d web application in Java that highlights some of Spring Boot\u2019s\nkey features. We\u2019ll use Maven to build this project since most IDEs support it.\nThe spring.io web site contains many \u201cGetting Started\u201d guides that use Spring\nBoot. If you\u2019re looking to solve a specific problem; check there first.\n\uf0eb\nYou can shortcut the steps below by going to start.spring.io and choosing the web\nstarter from the dependencies searcher. This will automatically generate a new\nproject structure so that you can start coding right the way. Check the\ndocumentation for more details.\nBefore we begin, open a terminal to check that you have valid versions of Java and Maven installed.\n$ java -version\njava version \"1.7.0_51\"\nJava(TM) SE Runtime Environment (build 1.7.0_51-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)\n$ mvn -v\nApache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T13:58:10-\n07:00)\nMaven home: /Users/user/tools/apache-maven-3.1.1\nJava version: 1.7.0_51, vendor: Oracle Corporation\nThis sample needs to be created in its own folder. Subsequent instructions\n\uf05a\nassume that you have created a suitable folder and that it is your \u201ccurrent\ndirectory\u201d.\n11.1. Creating the POM\nWe need to start by creating a Maven pom.xml file. The pom.xml is the recipe that will be used to build\nyour project. Open your favorite text editor and add the following:\n18\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\n\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.example</groupId>\n<artifactId>myproject</artifactId>\n<version>0.0.1-SNAPSHOT</version>\n<parent>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-parent</artifactId>\n<version>2.0.0.BUILD-SNAPSHOT</version>\n</parent>\n<!-- Additional lines to be added here... -->\n<!-- (you don't need this if you are using a .RELEASE version) -->\n<repositories>\n<repository>\n<id>spring-snapshots</id>\n<url>http://repo.spring.io/snapshot</url>\n<snapshots><enabled>true</enabled></snapshots>\n</repository>\n<repository>\n<id>spring-milestones</id>\n<url>http://repo.spring.io/milestone</url>\n</repository>\n</repositories>\n<pluginRepositories>\n<pluginRepository>\n<id>spring-snapshots</id>\n<url>http://repo.spring.io/snapshot</url>\n</pluginRepository>\n<pluginRepository>\n<id>spring-milestones</id>\n<url>http://repo.spring.io/milestone</url>\n</pluginRepository>\n</pluginRepositories>\n</project>\nThis should give you a working build, you can test it out by running mvn package (you can ignore the\n\u201cjar will be empty - no content was marked for inclusion!\u201d warning for now).\nAt this point you could import the project into an IDE (most modern Java IDE\u2019s\n\uf05a\ninclude built-in support for Maven). For simplicity, we will continue to use a plain\ntext editor for this example.\n19\n11.2. Adding classpath dependencies\nSpring Boot provides a number of \u201cStarters\u201d that make easy to add jars to your classpath. Our\nsample application has already used spring-boot-starter-parent in the parent section of the POM.\nThe spring-boot-starter-parent is a special starter that provides useful Maven defaults. It also\nprovides a dependency-management section so that you can omit version tags for \u201cblessed\u201d\ndependencies.\nOther \u201cStarters\u201d simply provide dependencies that you are likely to need when developing a\nspecific type of application. Since we are developing a web application, we will add a spring-boot-\nstarter-web dependency \u2014 but before that, let\u2019s look at what we currently have.\n$ mvn dependency:tree\n[INFO] com.example:myproject:jar:0.0.1-SNAPSHOT\nThe mvn dependency:tree command prints a tree representation of your project dependencies. You\ncan see that spring-boot-starter-parent provides no dependencies by itself. Let\u2019s edit our pom.xml\nand add the spring-boot-starter-web dependency just below the parent section:\n<dependencies>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n</dependencies>\nIf you run mvn dependency:tree again, you will see that there are now a number of additional\ndependencies, including the Tomcat web server and Spring Boot itself.\n11.3. Writing the code\nTo finish our application we need to create a single Java file. Maven will compile sources from\nsrc/main/java by default so you need to create that folder structure, then add a file named\nsrc/main/java/Example.java:\n20\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@EnableAutoConfiguration\npublic class Example {\n@RequestMapping(\"/\")\nString home() {\nreturn \"Hello World!\";\n}\npublic static void main(String[] args) throws Exception {\nSpringApplication.run(Example.class, args);\n}\n}\nAlthough there isn\u2019t much code here, quite a lot is going on. Let\u2019s step through the important parts.\n11.3.1. The @RestController and @RequestMapping annotations\nThe first annotation on our Example class is @RestController. This is known as a stereotype\nannotation. It provides hints for people reading the code, and for Spring, that the class plays a\nspecific role. In this case, our class is a web @Controller so Spring will consider it when handling\nincoming web requests.\nThe @RequestMapping annotation provides \u201crouting\u201d information. It is telling Spring that any HTTP\nrequest with the path \u201c/\u201d should be mapped to the home method. The @RestController annotation\ntells Spring to render the resulting string directly back to the caller.\nThe @RestController and @RequestMapping annotations are Spring MVC annotations\n\uf0eb\n(they are not specific to Spring Boot). See the MVC section in the Spring Reference\nDocumentation for more details.\n11.3.2. The @EnableAutoConfiguration annotation\nThe second class-level annotation is @EnableAutoConfiguration. This annotation tells Spring Boot to\n\u201cguess\u201d how you will want to configure Spring, based on the jar dependencies that you have added.\nSince spring-boot-starter-web added Tomcat and Spring MVC, the auto-configuration will assume\nthat you are developing a web application and setup Spring accordingly.\n21\nStarters and Auto-Configuration\nAuto-configuration is designed to work well with \u201cStarters\u201d, but the two concepts are not\ndirectly tied. You are free to pick-and-choose jar dependencies outside of the starters and\nSpring Boot will still do its best to auto-configure your application.\n11.3.3. The \u201cmain\u201d method\nThe final part of our application is the main method. This is just a standard method that follows the\nJava convention for an application entry point. Our main method delegates to Spring Boot\u2019s\nSpringApplication class by calling run. SpringApplication will bootstrap our application, starting\nSpring which will in turn start the auto-configured Tomcat web server. We need to pass\nExample.class as an argument to the run method to tell SpringApplication which is the primary\nSpring component. The args array is also passed through to expose any command-line arguments.\n11.4. Running the example\nAt this point our application should work. Since we have used the spring-boot-starter-parent POM\nwe have a useful run goal that we can use to start the application. Type mvn spring-boot:run from\nthe root project directory to start the application:\n$ mvn spring-boot:run\n. ____ _ __ _ _\n/\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n\\\\/ ___)| |_)| | | | | || (_| | ) ) ) )\n' |____| .__|_| |_|_| |_\\__, | / / / /\n=========|_|==============|___/=/_/_/_/\n:: Spring Boot :: (v2.0.0.BUILD-SNAPSHOT)\n....... . . .\n....... . . . (log output here)\n....... . . .\n........ Started Example in 2.222 seconds (JVM running for 6.514)\nIf you open a web browser to localhost:8080 you should see the following output:\nHello World!\nTo gracefully exit the application hit ctrl-c.\n11.5. Creating an executable jar\nLet\u2019s finish our example by creating a completely self-contained executable jar file that we could\nrun in production. Executable jars (sometimes called \u201cfat jars\u201d) are archives containing your\n22\ncompiled classes along with all of the jar dependencies that your code needs to run.\nExecutable jars and Java\nJava does not provide any standard way to load nested jar files (i.e. jar files that are\nthemselves contained within a jar). This can be problematic if you are looking to distribute a\nself-contained application.\nTo solve this problem, many developers use \u201cuber\u201d jars. An uber jar simply packages all\nclasses, from all jars, into a single archive. The problem with this approach is that it becomes\nhard to see which libraries you are actually using in your application. It can also be\nproblematic if the same filename is used (but with different content) in multiple jars.\nSpring Boot takes a different approach and allows you to actually nest jars directly.\nTo create an executable jar we need to add the spring-boot-maven-plugin to our pom.xml. Insert the\nfollowing lines just below the dependencies section:\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n</plugins>\n</build>\nThe spring-boot-starter-parent POM includes <executions> configuration to bind\n\uf05a\nthe repackage goal. If you are not using the parent POM you will need to declare\nthis configuration yourself. See the plugin documentation for details.\nSave your pom.xml and run mvn package from the command line:\n23\n$ mvn package\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building myproject 0.0.1-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO] .... ..\n[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ myproject ---\n[INFO] Building jar: /Users/developer/example/spring-boot-example/target/myproject-\n0.0.1-SNAPSHOT.jar\n[INFO]\n[INFO] --- spring-boot-maven-plugin:2.0.0.BUILD-SNAPSHOT:repackage (default) @\nmyproject ---\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\nIf you look in the target directory you should see myproject-0.0.1-SNAPSHOT.jar. The file should be\naround 10 MB in size. If you want to peek inside, you can use jar tvf:\n$ jar tvf target/myproject-0.0.1-SNAPSHOT.jar\nYou should also see a much smaller file named myproject-0.0.1-SNAPSHOT.jar.original in the target\ndirectory. This is the original jar file that Maven created before it was repackaged by Spring Boot.\nTo run that application, use the java -jar command:\n$ java -jar target/myproject-0.0.1-SNAPSHOT.jar\n. ____ _ __ _ _\n/\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n\\\\/ ___)| |_)| | | | | || (_| | ) ) ) )\n' |____| .__|_| |_|_| |_\\__, | / / / /\n=========|_|==============|___/=/_/_/_/\n:: Spring Boot :: (v2.0.0.BUILD-SNAPSHOT)\n....... . . .\n....... . . . (log output here)\n....... . . .\n........ Started Example in 2.536 seconds (JVM running for 2.864)\nAs before, to gracefully exit the application hit ctrl-c.\n24\nChapter 12. What to read next\nHopefully this section has provided you with some of the Spring Boot basics, and got you on your\nway to writing your own applications. If you\u2019re a task-oriented type of developer you might want to\njump over to spring.io and check out some of the getting started guides that solve specific \u201cHow do I\ndo that with Spring\u201d problems; we also have Spring Boot-specific How-to reference documentation.\nThe Spring Boot repository has also a bunch of samples you can run. The samples are independent\nof the rest of the code (that is you don\u2019t need to build the rest to run or use the samples).\nOtherwise, the next logical step is to read Using Spring Boot. If you\u2019re really impatient, you could\nalso jump ahead and read about Spring Boot features.\nUsing Spring Boot\nThis section goes into more detail about how you should use Spring Boot. It covers topics such as\nbuild systems, auto-configuration and how to run your applications. We also cover some Spring\nBoot best practices. Although there is nothing particularly special about Spring Boot (it is just\nanother library that you can consume), there are a few recommendations that, when followed, will\nmake your development process just a little easier.\nIf you\u2019re just starting out with Spring Boot, you should probably read the Getting Started guide\nbefore diving into this section.\n25\nChapter 13. Build systems\nIt is strongly recommended that you choose a build system that supports dependency management,\nand one that can consume artifacts published to the \u201cMaven Central\u201d repository. We would\nrecommend that you choose Maven or Gradle. It is possible to get Spring Boot to work with other\nbuild systems (Ant for example), but they will not be particularly well supported.\n13.1. Dependency management\nEach release of Spring Boot provides a curated list of dependencies it supports. In practice, you do\nnot need to provide a version for any of these dependencies in your build configuration as Spring\nBoot is managing that for you. When you upgrade Spring Boot itself, these dependencies will be\nupgraded as well in a consistent way.\n\uf05a You can still specify a version and override Spring Boot\u2019s recommendations if you\nfeel that\u2019s necessary.\nThe curated list contains all the spring modules that you can use with Spring Boot as well as a\nrefined list of third party libraries. The list is available as a standard Bills of Materials (spring-boot-\ndependencies) and additional dedicated support for Maven and Gradle are available as well.\n\uf071 Each release of Spring Boot is associated with a base version of the Spring\nFramework so we highly recommend you to not specify its version on your own.\n13.2. Maven\nMaven users can inherit from the spring-boot-starter-parent project to obtain sensible defaults.\nThe parent project provides the following features:\n\u2022 Java 1.6 as the default compiler level.\n\u2022 UTF-8 source encoding.\n\u2022 A Dependency Management section, allowing you to omit <version> tags for common\ndependencies, inherited from the spring-boot-dependencies POM.\n\u2022 Sensible resource filtering.\n\u2022 Sensible plugin configuration (exec plugin, surefire, Git commit ID, shade).\n\u2022 Sensible resource filtering for application.properties and application.yml including profile-\nspecific files (e.g. application-foo.properties and application-foo.yml)\nOn the last point: since the default config files accept Spring style placeholders (${\u2026}) the Maven\nfiltering is changed to use @..@ placeholders (you can override that with a Maven property\nresource.delimiter).\n13.2.1. Inheriting the starter parent\nTo configure your project to inherit from the spring-boot-starter-parent simply set the parent:\n26\n<!-- Inherit defaults from Spring Boot -->\n<parent>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-parent</artifactId>\n<version>2.0.0.BUILD-SNAPSHOT</version>\n</parent>\nYou should only need to specify the Spring Boot version number on this\n\uf05a\ndependency. If you import additional starters, you can safely omit the version\nnumber.\nWith that setup, you can also override individual dependencies by overriding a property in your\nown project. For instance, to upgrade to another Spring Data release train you\u2019d add the following\nto your pom.xml.\n<properties>\n<spring-data-releasetrain.version>Fowler-SR2</spring-data-releasetrain.version>\n</properties>\n\uf0eb\nCheck the spring-boot-dependencies pom for a list of supported properties.\n13.2.2. Using Spring Boot without the parent POM\nNot everyone likes inheriting from the spring-boot-starter-parent POM. You may have your own\ncorporate standard parent that you need to use, or you may just prefer to explicitly declare all your\nMaven configuration.\nIf you don\u2019t want to use the spring-boot-starter-parent, you can still keep the benefit of the\ndependency management (but not the plugin management) by using a scope=import dependency:\n<dependencyManagement>\n<dependencies>\n<dependency>\n<!-- Import dependency management from Spring Boot -->\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-dependencies</artifactId>\n<version>2.0.0.BUILD-SNAPSHOT</version>\n<type>pom</type>\n<scope>import</scope>\n</dependency>\n</dependencies>\n</dependencyManagement>\nThat setup does not allow you to override individual dependencies using a property as explained\nabove. To achieve the same result, you\u2019d need to add an entry in the dependencyManagement of your\nproject before the spring-boot-dependencies entry. For instance, to upgrade to another Spring Data\n27\nrelease train you\u2019d add the following to your pom.xml.\n<dependencyManagement>\n<dependencies>\n<!-- Override Spring Data release train provided by Spring Boot -->\n<dependency>\n<groupId>org.springframework.data</groupId>\n<artifactId>spring-data-releasetrain</artifactId>\n<version>Fowler-SR2</version>\n<scope>import</scope>\n<type>pom</type>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-dependencies</artifactId>\n<version>2.0.0.BUILD-SNAPSHOT</version>\n<type>pom</type>\n<scope>import</scope>\n</dependency>\n</dependencies>\n</dependencyManagement>\n\uf05a In the example above, we specify a BOM but any dependency type can be\noverridden that way.\n13.2.3. Changing the Java version\nThe spring-boot-starter-parent chooses fairly conservative Java compatibility. If you want to follow\nour recommendation and use a later Java version you can add a java.version property:\n<properties>\n<java.version>1.8</java.version>\n</properties>\n13.2.4. Using the Spring Boot Maven plugin\nSpring Boot includes a Maven plugin that can package the project as an executable jar. Add the\nplugin to your <plugins> section if you want to use it:\n28\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n</plugins>\n</build>\nIf you use the Spring Boot starter parent pom, you only need to add the plugin,\n\uf05a\nthere is no need for to configure it unless you want to change the settings defined\nin the parent.\n13.3. Gradle\nGradle users can directly import \u2018starters\u2019 in their dependencies section. Unlike Maven, there is no\n\u201csuper parent\u201d to import to share some configuration.\napply plugin: 'java'\nrepositories {\nmaven { url \"http://repo.spring.io/snapshot\" }\nmaven { url \"http://repo.spring.io/milestone\" }\n}\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-starter-web:2.0.0.BUILD-SNAPSHOT\")\n}\nThe spring-boot-gradle-plugin is also available and provides tasks to create executable jars and run\nprojects from source. It also provides dependency management that, among other capabilities,\nallows you to omit the version number for any dependencies that are managed by Spring Boot:\n29\nbuildscript {\nrepositories {\nmaven { url \"http://repo.spring.io/snapshot\" }\nmaven { url \"http://repo.spring.io/milestone\" }\n}\ndependencies {\nclasspath(\"org.springframework.boot:spring-boot-gradle-plugin:2.0.0.BUILD-\nSNAPSHOT\")\n}\n}\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\nrepositories {\nmaven { url \"http://repo.spring.io/snapshot\" }\nmaven { url \"http://repo.spring.io/milestone\" }\n}\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-starter-web\")\ntestCompile(\"org.springframework.boot:spring-boot-starter-test\")\n}\n13.4. Ant\nIt is possible to build a Spring Boot project using Apache Ant+Ivy. The spring-boot-antlib \u201cAntLib\u201d\nmodule is also available to help Ant create executable jars.\nTo declare dependencies a typical ivy.xml file will look something like this:\n<ivy-module version=\"2.0\">\n<info organisation=\"org.springframework.boot\" module=\"spring-boot-sample-ant\" />\n<configurations>\n<conf name=\"compile\" description=\"everything needed to compile this module\" />\n<conf name=\"runtime\" extends=\"compile\" description=\"everything needed to run\nthis module\" />\n</configurations>\n<dependencies>\n<dependency org=\"org.springframework.boot\" name=\"spring-boot-starter\"\nrev=\"${spring-boot.version}\" conf=\"compile\" />\n</dependencies>\n</ivy-module>\nA typical build.xml will look like this:\n30\n<project\nxmlns:ivy=\"antlib:org.apache.ivy.ant\"\nxmlns:spring-boot=\"antlib:org.springframework.boot.ant\"\nname=\"myapp\" default=\"build\">\n<property name=\"spring-boot.version\" value=\"1.3.0.BUILD-SNAPSHOT\" />\n<target name=\"resolve\" description=\"--> retrieve dependencies with ivy\">\n<ivy:retrieve pattern=\"lib/[conf]/[artifact]-[type]-[revision].[ext]\" />\n</target>\n<target name=\"classpaths\" depends=\"resolve\">\n<path id=\"compile.classpath\">\n<fileset dir=\"lib/compile\" includes=\"*.jar\" />\n</path>\n</target>\n<target name=\"init\" depends=\"classpaths\">\n<mkdir dir=\"build/classes\" />\n</target>\n<target name=\"compile\" depends=\"init\" description=\"compile\">\n<javac srcdir=\"src/main/java\" destdir=\"build/classes\" classpathref=\n\"compile.classpath\" />\n</target>\n<target name=\"build\" depends=\"compile\">\n<spring-boot:exejar destfile=\"build/myapp.jar\" classes=\"build/classes\">\n<spring-boot:lib>\n<fileset dir=\"lib/runtime\" />\n</spring-boot:lib>\n</spring-boot:exejar>\n</target>\n</project>\n\uf0eb See the Build an executable archive from Ant without using spring-boot-antlib\n\u201cHow-to\u201d if you don\u2019t want to use the spring-boot-antlib module.\n13.5. Starters\nStarters are a set of convenient dependency descriptors that you can include in your application.\nYou get a one-stop-shop for all the Spring and related technology that you need, without having to\nhunt through sample code and copy paste loads of dependency descriptors. For example, if you\nwant to get started using Spring and JPA for database access, just include the spring-boot-starter-\ndata-jpa dependency in your project, and you are good to go.\nThe starters contain a lot of the dependencies that you need to get a project up and running quickly\nand with a consistent, supported set of managed transitive dependencies.\n31\nWhat\u2019s in a name\nAll official starters follow a similar naming pattern; spring-boot-starter-*, where * is a\nparticular type of application. This naming structure is intended to help when you need to\nfind a starter. The Maven integration in many IDEs allow you to search dependencies by\nname. For example, with the appropriate Eclipse or STS plugin installed, you can simply hit\nctrl-space in the POM editor and type \u201cspring-boot-starter\u201d for a complete list.\nAs explained in the Creating your own starter section, third party starters should not start\nwith spring-boot as it is reserved for official Spring Boot artifacts. A third-party starter for\nacme will be typically named acme-spring-boot-starter.\nThe following application starters are provided by Spring Boot under the org.springframework.boot\ngroup:\nTable 1. Spring Boot application starters\nName Description Pom\nspring-boot-starter Core starter, including auto- Pom\nconfiguration support, logging\nand YAML\nspring-boot-starter-activemq Starter for JMS messaging using Pom\nApache ActiveMQ\nspring-boot-starter-amqp Starter for using Spring AMQP Pom\nand Rabbit MQ\nspring-boot-starter-aop Starter for aspect-oriented Pom\nprogramming with Spring AOP\nand AspectJ\nspring-boot-starter-artemis Starter for JMS messaging using Pom\nApache Artemis\nspring-boot-starter-batch Starter for using Spring Batch Pom\nspring-boot-starter-cache Starter for using Spring Pom\nFramework\u2019s caching support\nspring-boot-starter-cloud- Starter for using Spring Cloud Pom\nconnectors\nConnectors which simplifies\nconnecting to services in cloud\nplatforms like Cloud Foundry\nand Heroku\nspring-boot-starter-data- Starter for using Cassandra Pom\ncassandra\ndistributed database and\nSpring Data Cassandra\nspring-boot-starter-data- Starter for using Couchbase Pom\ncouchbase\ndocument-oriented database\nand Spring Data Couchbase\n32\nName Description Pom\nspring-boot-starter-data- Starter for using Elasticsearch Pom\nelasticsearch\nsearch and analytics engine\nand Spring Data Elasticsearch\nspring-boot-starter-data-jpa Starter for using Spring Data Pom\nJPA with Hibernate\nspring-boot-starter-data- Starter for using MongoDB Pom\nmongodb\ndocument-oriented database\nand Spring Data MongoDB\nspring-boot-starter-data-neo4j Starter for using Neo4j graph Pom\ndatabase and Spring Data Neo4j\nspring-boot-starter-data-redis Starter for using Redis key- Pom\nvalue data store with Spring\nData Redis and the Jedis client\nspring-boot-starter-data-rest Starter for exposing Spring Pom\nData repositories over REST\nusing Spring Data REST\nspring-boot-starter-data-solr Starter for using the Apache Pom\nSolr search platform with\nSpring Data Solr\nspring-boot-starter-freemarker Starter for building MVC web Pom\napplications using FreeMarker\nviews\nspring-boot-starter-groovy- Starter for building MVC web Pom\ntemplates\napplications using Groovy\nTemplates views\nspring-boot-starter-hateoas Starter for building Pom\nhypermedia-based RESTful web\napplication with Spring MVC\nand Spring HATEOAS\nspring-boot-starter- Starter for using Spring Pom\nintegration\nIntegration\nspring-boot-starter-jdbc Starter for using JDBC with the Pom\nTomcat JDBC connection pool\nspring-boot-starter-jersey Starter for building RESTful Pom\nweb applications using JAX-RS\nand Jersey. An alternative to\nspring-boot-starter-web\nspring-boot-starter-jooq Starter for using jOOQ to access Pom\nSQL databases. An alternative\nto spring-boot-starter-data-jpa\nor spring-boot-starter-jdbc\n33\nName Description Pom\nspring-boot-starter-jta- Starter for JTA transactions Pom\natomikos\nusing Atomikos\nspring-boot-starter-jta- Starter for JTA transactions Pom\nbitronix\nusing Bitronix\nspring-boot-starter-jta- Spring Boot Narayana JTA Pom\nnarayana\nStarter\nspring-boot-starter-mail Starter for using Java Mail and Pom\nSpring Framework\u2019s email\nsending support\nspring-boot-starter-mobile Starter for building web Pom\napplications using Spring\nMobile\nspring-boot-starter-mustache Starter for building MVC web Pom\napplications using Mustache\nviews\nspring-boot-starter-security Starter for using Spring Pom\nSecurity\nspring-boot-starter-social- Starter for using Spring Social Pom\nfacebook\nFacebook\nspring-boot-starter-social- Stater for using Spring Social Pom\nlinkedin\nLinkedIn\nspring-boot-starter-social- Starter for using Spring Social Pom\ntwitter\nTwitter\nspring-boot-starter-test Starter for testing Spring Boot Pom\napplications with libraries\nincluding JUnit, Hamcrest and\nMockito\nspring-boot-starter-thymeleaf Starter for building MVC web Pom\napplications using Thymeleaf\nviews\nspring-boot-starter-validation Starter for using Java Bean Pom\nValidation with Hibernate\nValidator\nspring-boot-starter-web Starter for building web, Pom\nincluding RESTful, applications\nusing Spring MVC. Uses Tomcat\nas the default embedded\ncontainer\nspring-boot-starter-web- Starter for using Spring Web Pom\nservices\nServices\n34\nName Description Pom\nspring-boot-starter-websocket Starter for building WebSocket Pom\napplications using Spring\nFramework\u2019s WebSocket\nsupport\nIn addition to the application starters, the following starters can be used to add production ready\nfeatures:\nTable 2. Spring Boot production starters\nName Description Pom\nspring-boot-starter-actuator Starter for using Spring Boot\u2019s Pom\nActuator which provides\nproduction ready features to\nhelp you monitor and manage\nyour application\nFinally, Spring Boot also includes some starters that can be used if you want to exclude or swap\nspecific technical facets:\nTable 3. Spring Boot technical starters\nName Description Pom\nspring-boot-starter-jetty Starter for using Jetty as the Pom\nembedded servlet container.\nAn alternative to spring-boot-\nstarter-tomcat\nspring-boot-starter-log4j2 Starter for using Log4j2 for Pom\nlogging. An alternative to\nspring-boot-starter-logging\nspring-boot-starter-logging Starter for logging using Pom\nLogback. Default logging starter\nspring-boot-starter-tomcat Starter for using Tomcat as the Pom\nembedded servlet container.\nDefault servlet container\nstarter used by spring-boot-\nstarter-web\nspring-boot-starter-undertow Starter for using Undertow as Pom\nthe embedded servlet\ncontainer. An alternative to\nspring-boot-starter-tomcat\n\uf0eb For a list of additional community contributed starters, see the README file in\nthe spring-boot-starters module on GitHub.\n35\nChapter 14. Structuring your code\nSpring Boot does not require any specific code layout to work, however, there are some best\npractices that help.\n14.1. Using the \u201cdefault\u201d package\nWhen a class doesn\u2019t include a package declaration it is considered to be in the \u201cdefault package\u201d.\nThe use of the \u201cdefault package\u201d is generally discouraged, and should be avoided. It can cause\nparticular problems for Spring Boot applications that use @ComponentScan, @EntityScan or\n@SpringBootApplication annotations, since every class from every jar, will be read.\n\uf0eb We recommend that you follow Java\u2019s recommended package naming\nconventions and use a reversed domain name (for example, com.example.project).\n14.2. Locating the main application class\nWe generally recommend that you locate your main application class in a root package above other\nclasses. The @EnableAutoConfiguration annotation is often placed on your main class, and it\nimplicitly defines a base \u201csearch package\u201d for certain items. For example, if you are writing a JPA\napplication, the package of the @EnableAutoConfiguration annotated class will be used to search for\n@Entity items.\nUsing a root package also allows the @ComponentScan annotation to be used without needing to\nspecify a basePackage attribute. You can also use the @SpringBootApplication annotation if your main\nclass is in the root package.\nHere is a typical layout:\ncom\n+- example\n+- myproject\n+- Application.java\n|\n+- domain\n| +- Customer.java\n| +- CustomerRepository.java\n|\n+- service\n| +- CustomerService.java\n|\n+- web\n+- CustomerController.java\nThe Application.java file would declare the main method, along with the basic @Configuration.\n36\npackage com.example.myproject;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n37\nChapter 15. Configuration classes\nSpring Boot favors Java-based configuration. Although it is possible to call SpringApplication.run()\nwith an XML source, we generally recommend that your primary source is a @Configuration class.\nUsually the class that defines the main method is also a good candidate as the primary\n@Configuration.\nMany Spring configuration examples have been published on the Internet that\n\uf0eb\nuse XML configuration. Always try to use the equivalent Java-based configuration\nif possible. Searching for enable* annotations can be a good starting point.\n15.1. Importing additional configuration classes\nYou don\u2019t need to put all your @Configuration into a single class. The @Import annotation can be used\nto import additional configuration classes. Alternatively, you can use @ComponentScan to\nautomatically pick up all Spring components, including @Configuration classes.\n15.2. Importing XML configuration\nIf you absolutely must use XML based configuration, we recommend that you still start with a\n@Configuration class. You can then use an additional @ImportResource annotation to load XML\nconfiguration files.\n38\nChapter 16. Auto-configuration\nSpring Boot auto-configuration attempts to automatically configure your Spring application based\non the jar dependencies that you have added. For example, If HSQLDB is on your classpath, and you\nhave not manually configured any database connection beans, then we will auto-configure an in-\nmemory database.\nYou need to opt-in to auto-configuration by adding the @EnableAutoConfiguration or\n@SpringBootApplication annotations to one of your @Configuration classes.\n\uf0eb You should only ever add one @EnableAutoConfiguration annotation. We generally\nrecommend that you add it to your primary @Configuration class.\n16.1. Gradually replacing auto-configuration\nAuto-configuration is noninvasive, at any point you can start to define your own configuration to\nreplace specific parts of the auto-configuration. For example, if you add your own DataSource bean,\nthe default embedded database support will back away.\nIf you need to find out what auto-configuration is currently being applied, and why, start your\napplication with the --debug switch. This will enable debug logs for a selection of core loggers and\nlog an auto-configuration report to the console.\n16.2. Disabling specific auto-configuration\nIf you find that specific auto-configure classes are being applied that you don\u2019t want, you can use\nthe exclude attribute of @EnableAutoConfiguration to disable them.\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.boot.autoconfigure.jdbc.*;\nimport org.springframework.context.annotation.*;\n@Configuration\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\npublic class MyConfiguration {\n}\nIf the class is not on the classpath, you can use the excludeName attribute of the annotation and\nspecify the fully qualified name instead. Finally, you can also control the list of auto-configuration\nclasses to exclude via the spring.autoconfigure.exclude property.\n\uf0eb\nYou can define exclusions both at the annotation level and using the property.\n39\nChapter 17. Spring Beans and dependency\ninjection\nYou are free to use any of the standard Spring Framework techniques to define your beans and\ntheir injected dependencies. For simplicity, we often find that using @ComponentScan to find your\nbeans, in combination with @Autowired constructor injection works well.\nIf you structure your code as suggested above (locating your application class in a root package),\nyou can add @ComponentScan without any arguments. All of your application components (\n@Component, @Service, @Repository, @Controller etc.) will be automatically registered as Spring Beans.\nHere is an example @Service Bean that uses constructor injection to obtain a required RiskAssessor\nbean.\npackage com.example.service;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class DatabaseAccountService implements AccountService {\nprivate final RiskAssessor riskAssessor;\n@Autowired\npublic DatabaseAccountService(RiskAssessor riskAssessor) {\nthis.riskAssessor = riskAssessor;\n}\n// ...\n}\n\uf0eb Notice how using constructor injection allows the riskAssessor field to be marked\nas final, indicating that it cannot be subsequently changed.\n40\nChapter 18. Using the\n@SpringBootApplication annotation\nMany Spring Boot developers always have their main class annotated with @Configuration,\n@EnableAutoConfiguration and @ComponentScan. Since these annotations are so frequently used\ntogether (especially if you follow the best practices above), Spring Boot provides a convenient\n@SpringBootApplication alternative.\nThe @SpringBootApplication annotation is equivalent to using @Configuration,\n@EnableAutoConfiguration and @ComponentScan with their default attributes:\npackage com.example.myproject;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n@SpringBootApplication // same as @Configuration @EnableAutoConfiguration\n@ComponentScan\npublic class Application {\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n}\n\uf05a @SpringBootApplication also provides aliases to customize the attributes of\n@EnableAutoConfiguration and @ComponentScan.\n41\nChapter 19. Running your application\nOne of the biggest advantages of packaging your application as jar and using an embedded HTTP\nserver is that you can run your application as you would any other. Debugging Spring Boot\napplications is also easy; you don\u2019t need any special IDE plugins or extensions.\n\uf05a This section only covers jar based packaging, If you choose to package your\napplication as a war file you should refer to your server and IDE documentation.\n19.1. Running from an IDE\nYou can run a Spring Boot application from your IDE as a simple Java application, however, first\nyou will need to import your project. Import steps will vary depending on your IDE and build\nsystem. Most IDEs can import Maven projects directly, for example Eclipse users can select Import\u2026\n\u2192 Existing Maven Projects from the File menu.\nIf you can\u2019t directly import your project into your IDE, you may be able to generate IDE metadata\nusing a build plugin. Maven includes plugins for Eclipse and IDEA; Gradle offers plugins for various\nIDEs.\nIf you accidentally run a web application twice you will see a \u201cPort already in\n\uf0eb\nuse\u201d error. STS users can use the Relaunch button rather than Run to ensure that\nany existing instance is closed.\n19.2. Running as a packaged application\nIf you use the Spring Boot Maven or Gradle plugins to create an executable jar you can run your\napplication using java -jar. For example:\n$ java -jar target/myproject-0.0.1-SNAPSHOT.jar\nIt is also possible to run a packaged application with remote debugging support enabled. This\nallows you to attach a debugger to your packaged application:\n$ java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n \\\n-jar target/myproject-0.0.1-SNAPSHOT.jar\n19.3. Using the Maven plugin\nThe Spring Boot Maven plugin includes a run goal which can be used to quickly compile and run\nyour application. Applications run in an exploded form just like in your IDE.\n$ mvn spring-boot:run\n42\nYou might also want to use the useful operating system environment variable:\n$ export MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=128M\n19.4. Using the Gradle plugin\nThe Spring Boot Gradle plugin also includes a bootRun task which can be used to run your\napplication in an exploded form. The bootRun task is added whenever you import the spring-boot-\ngradle-plugin:\n$ gradle bootRun\nYou might also want to use this useful operating system environment variable:\n$ export JAVA_OPTS=-Xmx1024m -XX:MaxPermSize=128M\n19.5. Hot swapping\nSince Spring Boot applications are just plain Java applications, JVM hot-swapping should work out\nof the box. JVM hot swapping is somewhat limited with the bytecode that it can replace, for a more\ncomplete solution JRebel or the Spring Loaded project can be used. The spring-boot-devtools\nmodule also includes support for quick application restarts.\nSee the Developer tools section below and the Hot swapping \u201cHow-to\u201d for details.\n43\nChapter 20. Developer tools\nSpring Boot includes an additional set of tools that can make the application development\nexperience a little more pleasant. The spring-boot-devtools module can be included in any project\nto provide additional development-time features. To include devtools support, simply add the\nmodule dependency to your build:\nMaven\n<dependencies>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-devtools</artifactId>\n<optional>true</optional>\n</dependency>\n</dependencies>\nGradle\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-devtools\")\n}\nDeveloper tools are automatically disabled when running a fully packaged\napplication. If your application is launched using java -jar or if it\u2019s started using\na special classloader, then it is considered a \u201cproduction application\u201d. Flagging\n\uf05a\nthe dependency as optional is a best practice that prevents devtools from being\ntransitively applied to other modules using your project. Gradle does not support\noptional dependencies out-of-the-box so you may want to have a look to the\npropdeps-plugin in the meantime.\nrepackaged archives do not contain devtools by default. If you want to use certain\n\uf0eb\nremote devtools feature, you\u2019ll need to disable the excludeDevtools build property\nto include it. The property is supported with both the Maven and Gradle plugins.\n20.1. Property defaults\nSeveral of the libraries supported by Spring Boot use caches to improve performance. For example,\nThymeleaf will cache templates to save repeatedly parsing XML source files. Whilst caching is very\nbeneficial in production, it can be counter productive during development. If you make a change to\na template file in your IDE, you\u2019ll likely want to immediately see the result.\nCache options are usually configured by settings in your application.properties file. For example,\nThymeleaf offers the spring.thymeleaf.cache property. Rather than needing to set these properties\nmanually, the spring-boot-devtools module will automatically apply sensible development-time\nconfiguration.\n44\n\uf0eb For a complete list of the properties that are applied see\nDevToolsPropertyDefaultsPostProcessor.\n20.2. Automatic restart\nApplications that use spring-boot-devtools will automatically restart whenever files on the\nclasspath change. This can be a useful feature when working in an IDE as it gives a very fast\nfeedback loop for code changes. By default, any entry on the classpath that points to a folder will be\nmonitored for changes. Note that certain resources such as static assets and view templates do not\nneed to restart the application.\nTriggering a restart\nAs DevTools monitors classpath resources, the only way to trigger a restart is to update the\nclasspath. The way in which you cause the classpath to be updated depends on the IDE that\nyou are using. In Eclipse, saving a modified file will cause the classpath to be updated and\ntrigger a restart. In IntelliJ IDEA, building the project (Build \u2192 Make Project) will have the\nsame effect.\nYou can also start your application via the supported build plugins (i.e. Maven\n\uf05a and Gradle) as long as forking is enabled since DevTools need an isolated\napplication classloader to operate properly. Gradle and Maven do that by default\nwhen they detect DevTools on the classpath.\nAutomatic restart works very well when used with LiveReload. See below for\n\uf0eb details. If you use JRebel automatic restarts will be disabled in favor of dynamic\nclass reloading. Other devtools features (such as LiveReload and property\noverrides) can still be used.\nDevTools relies on the application context\u2019s shutdown hook to close it during a\n\uf05a\nrestart. It will not work correctly if you have disabled the shutdown hook (\nSpringApplication.setRegisterShutdownHook(false)).\nWhen deciding if an entry on the classpath should trigger a restart when it\n\uf05a changes, DevTools automatically ignores projects named spring-boot, spring-\nboot-devtools, spring-boot-autoconfigure, spring-boot-actuator, and spring-boot-\nstarter.\n45\nRestart vs Reload\nThe restart technology provided by Spring Boot works by using two classloaders. Classes that\ndon\u2019t change (for example, those from third-party jars) are loaded into a base classloader.\nClasses that you\u2019re actively developing are loaded into a restart classloader. When the\napplication is restarted, the restart classloader is thrown away and a new one is created. This\napproach means that application restarts are typically much faster than \u201ccold starts\u201d since\nthe base classloader is already available and populated.\nIf you find that restarts aren\u2019t quick enough for your applications, or you encounter\nclassloading issues, you could consider reloading technologies such as JRebel from\nZeroTurnaround. These work by rewriting classes as they are loaded to make them more\namenable to reloading. Spring Loaded provides another option, however it doesn\u2019t support as\nmany frameworks and it isn\u2019t commercially supported.\n20.2.1. Excluding resources\nCertain resources don\u2019t necessarily need to trigger a restart when they are changed. For example,\nThymeleaf templates can just be edited in-place. By default changing resources in /META-INF/maven,\n/META-INF/resources ,/resources ,/static ,/public or /templates will not trigger a restart but will\ntrigger a live reload. If you want to customize these exclusions you can use the\nspring.devtools.restart.exclude property. For example, to exclude only /static and /public you\nwould set the following:\nspring.devtools.restart.exclude=static/**,public/**\n\uf0eb if you want to keep those defaults and add additional exclusions, use the\nspring.devtools.restart.additional-exclude property instead.\n20.2.2. Watching additional paths\nYou may want your application to be restarted or reloaded when you make changes to files that are\nnot on the classpath. To do so, use the spring.devtools.restart.additional-paths property to\nconfigure additional paths to watch for changes. You can use the spring.devtools.restart.exclude\nproperty described above to control whether changes beneath the additional paths will trigger a\nfull restart or just a live reload.\n20.2.3. Disabling restart\nIf you don\u2019t want to use the restart feature you can disable it using the\nspring.devtools.restart.enabled property. In most cases you can set this in your\napplication.properties (this will still initialize the restart classloader but it won\u2019t watch for file\nchanges).\nIf you need to completely disable restart support, for example, because it doesn\u2019t work with a\nspecific library, you need to set a System property before calling SpringApplication.run(\u2026). For\n46\nexample:\npublic static void main(String[] args) {\nSystem.setProperty(\"spring.devtools.restart.enabled\", \"false\");\nSpringApplication.run(MyApp.class, args);\n}\n20.2.4. Using a trigger file\nIf you work with an IDE that continuously compiles changed files, you might prefer to trigger\nrestarts only at specific times. To do this you can use a \u201ctrigger file\u201d, which is a special file that must\nbe modified when you want to actually trigger a restart check. Changing the file only triggers the\ncheck and the restart will only occur if Devtools has detected it has to do something. The trigger file\ncould be updated manually, or via an IDE plugin.\nTo use a trigger file use the spring.devtools.restart.trigger-file property.\n\uf0eb You might want to set spring.devtools.restart.trigger-file as a global setting so\nthat all your projects behave in the same way.\n20.2.5. Customizing the restart classloader\nAs described in the Restart vs Reload section above, restart functionality is implemented by using\ntwo classloaders. For most applications this approach works well, however, sometimes it can cause\nclassloading issues.\nBy default, any open project in your IDE will be loaded using the \u201crestart\u201d classloader, and any\nregular .jar file will be loaded using the \u201cbase\u201d classloader. If you work on a multi-module project,\nand not each module is imported into your IDE, you may need to customize things. To do this you\ncan create a META-INF/spring-devtools.properties file.\nThe spring-devtools.properties file can contain restart.exclude. and restart.include. prefixed\nproperties. The include elements are items that should be pulled up into the \u201crestart\u201d classloader,\nand the exclude elements are items that should be pushed down into the \u201cbase\u201d classloader. The\nvalue of the property is a regex pattern that will be applied to the classpath.\nFor example:\nrestart.exclude.companycommonlibs=/mycorp-common-[\\\\w-]+\\.jar\nrestart.include.projectcommon=/mycorp-myproj-[\\\\w-]+\\.jar\n\uf05a All property keys must be unique. As long as a property starts with\nrestart.include. or restart.exclude. it will be considered.\n\uf0eb All META-INF/spring-devtools.properties from the classpath will be loaded. You\ncan package files inside your project, or in the libraries that the project consumes.\n47\n20.2.6. Known limitations\nRestart functionality does not work well with objects that are deserialized using a standard\nObjectInputStream. If you need to deserialize data, you may need to use Spring\u2019s\nConfigurableObjectInputStream in combination with\nThread.currentThread().getContextClassLoader().\nUnfortunately, several third-party libraries deserialize without considering the context classloader.\nIf you find such a problem, you will need to request a fix with the original authors.\n20.3. LiveReload\nThe spring-boot-devtools module includes an embedded LiveReload server that can be used to\ntrigger a browser refresh when a resource is changed. LiveReload browser extensions are freely\navailable for Chrome, Firefox and Safari from livereload.com.\nIf you don\u2019t want to start the LiveReload server when your application runs you can set the\nspring.devtools.livereload.enabled property to false.\nYou can only run one LiveReload server at a time. Before starting your\n\uf05a\napplication, ensure that no other LiveReload servers are running. If you start\nmultiple applications from your IDE, only the first will have LiveReload support.\n20.4. Global settings\nYou can configure global devtools settings by adding a file named .spring-boot-devtools.properties\nto your $HOME folder (note that the filename starts with \u201c.\u201d). Any properties added to this file will\napply to all Spring Boot applications on your machine that use devtools. For example, to configure\nrestart to always use a trigger file, you would add the following:\n~/.spring-boot-devtools.properties\nspring.devtools.reload.trigger-file=.reloadtrigger\n20.5. Remote applications\nThe Spring Boot developer tools are not just limited to local development. You can also use several\nfeatures when running applications remotely. Remote support is opt-in, to enable it you need to\nmake sure that devtools is included in the repackaged archive:\n48\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<configuration>\n<excludeDevtools>false</excludeDevtools>\n</configuration>\n</plugin>\n</plugins>\n</build>\nThen you need to set a spring.devtools.remote.secret property, for example:\nspring.devtools.remote.secret=mysecret\n\uf071 Enabling spring-boot-devtools on a remote application is a security risk. You\nshould never enable support on a production deployment.\nRemote devtools support is provided in two parts; there is a server side endpoint that accepts\nconnections, and a client application that you run in your IDE. The server component is\nautomatically enabled when the spring.devtools.remote.secret property is set. The client\ncomponent must be launched manually.\n20.5.1. Running the remote client application\nThe remote client application is designed to be run from within you IDE. You need to run\norg.springframework.boot.devtools.RemoteSpringApplication using the same classpath as the remote\nproject that you\u2019re connecting to. The non-option argument passed to the application should be the\nremote URL that you are connecting to.\nFor example, if you are using Eclipse or STS, and you have a project named my-app that you\u2019ve\ndeployed to Cloud Foundry, you would do the following:\n\u2022 Select Run Configurations\u2026 from the Run menu.\n\u2022 Create a new Java Application \u201claunch configuration\u201d.\n\u2022 Browse for the my-app project.\n\u2022 Use org.springframework.boot.devtools.RemoteSpringApplication as the main class.\n\u2022 Add https://myapp.cfapps.io to the Program arguments (or whatever your remote URL is).\nA running remote client will look like this:\n49\n. ____ _ __ _ _\n/\\\\ / ___'_ __ _ _(_)_ __ __ _ ___ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | | _ \\___ _ __ ___| |_ ___ \\ \\ \\ \\\n\\\\/ ___)| |_)| | | | | || (_| []::::::[] / -_) ' \\/ _ \\ _/ -_) ) ) ) )\n' |____| .__|_| |_|_| |_\\__, | |_|_\\___|_|_|_\\___/\\__\\___|/ / / /\n=========|_|==============|___/===================================/_/_/_/\n:: Spring Boot Remote :: 2.0.0.BUILD-SNAPSHOT\n2015-06-10 18:25:06.632 INFO 14938 --- [ main]\no.s.b.devtools.RemoteSpringApplication : Starting RemoteSpringApplication on pwmbp\nwith PID 14938 (/Users/pwebb/projects/spring-boot/code/spring-boot-\ndevtools/target/classes started by pwebb in /Users/pwebb/projects/spring-\nboot/code/spring-boot-samples/spring-boot-sample-devtools)\n2015-06-10 18:25:06.671 INFO 14938 --- [ main]\ns.c.a.AnnotationConfigApplicationContext : Refreshing\norg.springframework.context.annotation.AnnotationConfigApplicationContext@2a17b7b6:\nstartup date [Wed Jun 10 18:25:06 PDT 2015]; root of context hierarchy\n2015-06-10 18:25:07.043 WARN 14938 --- [ main]\no.s.b.d.r.c.RemoteClientConfiguration : The connection to http://localhost:8080 is\ninsecure. You should use a URL starting with 'https://'.\n2015-06-10 18:25:07.074 INFO 14938 --- [ main]\no.s.b.d.a.OptionalLiveReloadServer : LiveReload server is running on port 35729\n2015-06-10 18:25:07.130 INFO 14938 --- [ main]\no.s.b.devtools.RemoteSpringApplication : Started RemoteSpringApplication in 0.74\nseconds (JVM running for 1.105)\nBecause the remote client is using the same classpath as the real application it\n\uf05a can directly read application properties. This is how the\nspring.devtools.remote.secret property is read and passed to the server for\nauthentication.\n\uf0eb It\u2019s always advisable to use https:// as the connection protocol so that traffic is\nencrypted and passwords cannot be intercepted.\nIf you need to use a proxy to access the remote application, configure the\n\uf0eb\nspring.devtools.remote.proxy.host and spring.devtools.remote.proxy.port\nproperties.\n20.5.2. Remote update\nThe remote client will monitor your application classpath for changes in the same way as the local\nrestart. Any updated resource will be pushed to the remote application and (if required) trigger a\nrestart. This can be quite helpful if you are iterating on a feature that uses a cloud service that you\ndon\u2019t have locally. Generally remote updates and restarts are much quicker than a full rebuild and\ndeploy cycle.\n50\n\uf05a Files are only monitored when the remote client is running. If you change a file\nbefore starting the remote client, it won\u2019t be pushed to the remote server.\n20.5.3. Remote debug tunnel\nJava remote debugging is useful when diagnosing issues on a remote application. Unfortunately, it\u2019s\nnot always possible to enable remote debugging when your application is deployed outside of your\ndata center. Remote debugging can also be tricky to setup if you are using a container based\ntechnology such as Docker.\nTo help work around these limitations, devtools supports tunneling of remote debug traffic over\nHTTP. The remote client provides a local server on port 8000 that you can attach a remote debugger\nto. Once a connection is established, debug traffic is sent over HTTP to the remote application. You\ncan use the spring.devtools.remote.debug.local-port property if you want to use a different port.\nYou\u2019ll need to ensure that your remote application is started with remote debugging enabled. Often\nthis can be achieved by configuring JAVA_OPTS. For example, with Cloud Foundry you can add the\nfollowing to your manifest.yml:\n---\nenv:\nJAVA_OPTS: \"-Xdebug -Xrunjdwp:server=y,transport=dt_socket,suspend=n\"\n\uf0eb Notice that you don\u2019t need to pass an address=NNNN option to -Xrunjdwp. If omitted\nJava will simply pick a random free port.\nDebugging a remote service over the Internet can be slow and you might need to\n\uf05a increase timeouts in your IDE. For example, in Eclipse you can select Java \u2192 Debug\nfrom Preferences\u2026 and change the Debugger timeout (ms) to a more suitable\nvalue (60000 works well in most situations).\n51\nChapter 21. Packaging your application for\nproduction\nExecutable jars can be used for production deployment. As they are self-contained, they are also\nideally suited for cloud-based deployment.\nFor additional \u201cproduction ready\u201d features, such as health, auditing and metric REST or JMX end-\npoints; consider adding spring-boot-actuator. See Spring Boot Actuator: Production-ready features\nfor details.\n52\nChapter 22. What to read next\nYou should now have good understanding of how you can use Spring Boot along with some best\npractices that you should follow. You can now go on to learn about specific Spring Boot features in\ndepth, or you could skip ahead and read about the \u201cproduction ready\u201d aspects of Spring Boot.\nSpring Boot features\nThis section dives into the details of Spring Boot. Here you can learn about the key features that you\nwill want to use and customize. If you haven\u2019t already, you might want to read the Getting started\nand Using Spring Boot sections so that you have a good grounding of the basics.\n53\nChapter 23. SpringApplication\nThe SpringApplication class provides a convenient way to bootstrap a Spring application that will\nbe started from a main() method. In many situations you can just delegate to the static\nSpringApplication.run method:\npublic static void main(String[] args) {\nSpringApplication.run(MySpringConfiguration.class, args);\n}\nWhen your application starts you should see something similar to the following:\n. ____ _ __ _ _\n/\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n\\\\/ ___)| |_)| | | | | || (_| | ) ) ) )\n' |____| .__|_| |_|_| |_\\__, | / / / /\n=========|_|==============|___/=/_/_/_/\n:: Spring Boot :: v2.0.0.BUILD-SNAPSHOT\n2013-07-31 00:08:16.117 INFO 56603 --- [ main]\no.s.b.s.app.SampleApplication : Starting SampleApplication v0.1.0 on\nmycomputer with PID 56603 (/apps/myapp.jar started by pwebb)\n2013-07-31 00:08:16.166 INFO 56603 --- [ main]\nationConfigEmbeddedWebApplicationContext : Refreshing\norg.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContex\nt@6e5a8246: startup date [Wed Jul 31 00:08:16 PDT 2013]; root of context hierarchy\n2014-03-04 13:09:54.912 INFO 41370 --- [ main]\n.t.TomcatEmbeddedServletContainerFactory : Server initialized with port: 8080\n2014-03-04 13:09:56.501 INFO 41370 --- [ main]\no.s.b.s.app.SampleApplication : Started SampleApplication in 2.992 seconds\n(JVM running for 3.658)\nBy default INFO logging messages will be shown, including some relevant startup details such as the\nuser that launched the application.\n23.1. Startup failure\nIf your application fails to start, registered FailureAnalyzers get a chance to provide a dedicated\nerror message and a concrete action to fix the problem. For instance if you start a web application\non port 8080 and that port is already in use, you should see something similar to the following:\n54\n***************************\nAPPLICATION FAILED TO START\n***************************\nDescription:\nEmbedded servlet container failed to start. Port 8080 was already in use.\nAction:\nIdentify and stop the process that's listening on port 8080 or configure this\napplication to listen on another port.\n\uf05a Spring Boot provides numerous FailureAnalyzer implementations and you can\nadd your own very easily.\nIf no failure analyzers are able to handle the exception, you can still display the full auto-\nconfiguration report to better understand what went wrong. To do so you need to enable the debug\nproperty or enable DEBUG logging for\norg.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer.\nFor instance, if you are running your application using java -jar you can enable the debug property\nas follows:\n$ java -jar myproject-0.0.1-SNAPSHOT.jar --debug\n23.2. Customizing the Banner\nThe banner that is printed on start up can be changed by adding a banner.txt file to your classpath,\nor by setting banner.location to the location of such a file. If the file has an unusual encoding you\ncan set banner.charset (default is UTF-8). In addition to a text file, you can also add a banner.gif,\nbanner.jpg or banner.png image file to your classpath, or set a banner.image.location property.\nImages will be converted into an ASCII art representation and printed above any text banner.\nInside your banner.txt file you can use any of the following placeholders:\nTable 4. Banner variables\nVariable Description\n${application.version}\nThe version number of your application as\ndeclared in MANIFEST.MF. For example\nImplementation-Version: 1.0 is printed as 1.0.\n${application.formatted-version}\nThe version number of your application as\ndeclared in MANIFEST.MF formatted for display\n(surrounded with brackets and prefixed with v).\nFor example (v1.0).\n55\nVariable Description\n${spring-boot.version}\nThe Spring Boot version that you are using. For\nexample 2.0.0.BUILD-SNAPSHOT.\n${spring-boot.formatted-version}\nThe Spring Boot version that you are using\nformatted for display (surrounded with brackets\nand prefixed with v). For example\n(v2.0.0.BUILD-SNAPSHOT).\n${Ansi.NAME} (or ${AnsiColor.NAME}, Where NAME is the name of an ANSI escape code.\n${AnsiBackground.NAME}, ${AnsiStyle.NAME}) See AnsiPropertySource for details.\n${application.title}\nThe title of your application as declared in\nMANIFEST.MF. For example Implementation-Title:\nMyApp is printed as MyApp.\nThe SpringApplication.setBanner(\u2026) method can be used if you want to generate\n\uf0eb\na banner programmatically. Use the org.springframework.boot.Banner interface\nand implement your own printBanner() method.\nYou can also use the spring.main.banner-mode property to determine if the banner has to be printed\non System.out (console), using the configured logger (log) or not at all (off).\nThe printed banner will be registered as a singleton bean under the name springBootBanner.\nYAML maps off to false so make sure to add quotes if you want to disable the\nbanner in your application.\n\uf05a\nspring:\nmain:\nbanner-mode: \"off\"\n23.3. Customizing SpringApplication\nIf the SpringApplication defaults aren\u2019t to your taste you can instead create a local instance and\ncustomize it. For example, to turn off the banner you would write:\npublic static void main(String[] args) {\nSpringApplication app = new SpringApplication(MySpringConfiguration.class);\napp.setBannerMode(Banner.Mode.OFF);\napp.run(args);\n}\n56\nThe constructor arguments passed to SpringApplication are configuration sources\n\uf05a for spring beans. In most cases these will be references to @Configuration classes,\nbut they could also be references to XML configuration or to packages that should\nbe scanned.\nIt is also possible to configure the SpringApplication using an application.properties file. See\nExternalized Configuration for details.\nFor a complete list of the configuration options, see the SpringApplication Javadoc.\n23.4. Fluent builder API\nIf you need to build an ApplicationContext hierarchy (multiple contexts with a parent/child\nrelationship), or if you just prefer using a \u2018fluent\u2019 builder API, you can use the\nSpringApplicationBuilder.\nThe SpringApplicationBuilder allows you to chain together multiple method calls, and includes\nparent and child methods that allow you to create a hierarchy.\nFor example:\nnew SpringApplicationBuilder()\n.sources(Parent.class)\n.child(Application.class)\n.bannerMode(Banner.Mode.OFF)\n.run(args);\nThere are some restrictions when creating an ApplicationContext hierarchy, e.g.\n\uf05a Web components must be contained within the child context, and the same\nEnvironment will be used for both parent and child contexts. See the\nSpringApplicationBuilder Javadoc for full details.\n23.5. Application events and listeners\nIn addition to the usual Spring Framework events, such as ContextRefreshedEvent, a\nSpringApplication sends some additional application events.\n57\nSome events are actually triggered before the ApplicationContext is created so\nyou cannot register a listener on those as a @Bean. You can register them via the\nSpringApplication.addListeners(\u2026) or SpringApplicationBuilder.listeners(\u2026)\nmethods.\nIf you want those listeners to be registered automatically regardless of the way\n\uf05a\nthe application is created you can add a META-INF/spring.factories file to your\nproject and reference your listener(s) using the\norg.springframework.context.ApplicationListener key.\norg.springframework.context.ApplicationListener=com.example.project.My\nListener\nApplication events are sent in the following order, as your application runs:\n1. An ApplicationStartedEvent is sent at the start of a run, but before any processing except the\nregistration of listeners and initializers.\n2. An ApplicationEnvironmentPreparedEvent is sent when the Environment to be used in the context is\nknown, but before the context is created.\n3. An ApplicationPreparedEvent is sent just before the refresh is started, but after bean definitions\nhave been loaded.\n4. An ApplicationReadyEvent is sent after the refresh and any related callbacks have been\nprocessed to indicate the application is ready to service requests.\n5. An ApplicationFailedEvent is sent if there is an exception on startup.\n\uf0eb You often won\u2019t need to use application events, but it can be handy to know that\nthey exist. Internally, Spring Boot uses events to handle a variety of tasks.\n23.6. Web environment\nA SpringApplication will attempt to create the right type of ApplicationContext on your behalf. By\ndefault, an AnnotationConfigApplicationContext or AnnotationConfigEmbeddedWebApplicationContext\nwill be used, depending on whether you are developing a web application or not.\nThe algorithm used to determine a \u2018web environment\u2019 is fairly simplistic (based on the presence of\na few classes). You can use setWebEnvironment(boolean webEnvironment) if you need to override the\ndefault.\nIt is also possible to take complete control of the ApplicationContext type that will be used by calling\nsetApplicationContextClass(\u2026).\n\uf0eb It is often desirable to call setWebEnvironment(false) when using\nSpringApplication within a JUnit test.\n58\n23.7. Accessing application arguments\nIf you need to access the application arguments that were passed to SpringApplication.run(\u2026) you\ncan inject a org.springframework.boot.ApplicationArguments bean. The ApplicationArguments\ninterface provides access to both the raw String[] arguments as well as parsed option and non-\noption arguments:\nimport org.springframework.boot.*\nimport org.springframework.beans.factory.annotation.*\nimport org.springframework.stereotype.*\n@Component\npublic class MyBean {\n@Autowired\npublic MyBean(ApplicationArguments args) {\nboolean debug = args.containsOption(\"debug\");\nList<String> files = args.getNonOptionArgs();\n// if run with \"--debug logfile.txt\" debug=true, files=[\"logfile.txt\"]\n}\n}\nSpring Boot will also register a CommandLinePropertySource with the Spring\n\uf0eb\nEnvironment. This allows you to also inject single application arguments using the\n@Value annotation.\n23.8. Using the ApplicationRunner or\nCommandLineRunner\nIf you need to run some specific code once the SpringApplication has started, you can implement\nthe ApplicationRunner or CommandLineRunner interfaces. Both interfaces work in the same way and\noffer a single run method which will be called just before SpringApplication.run(\u2026) completes.\nThe CommandLineRunner interfaces provides access to application arguments as a simple string array,\nwhereas the ApplicationRunner uses the ApplicationArguments interface discussed above.\n59\nimport org.springframework.boot.*\nimport org.springframework.stereotype.*\n@Component\npublic class MyBean implements CommandLineRunner {\npublic void run(String... args) {\n// Do something...\n}\n}\nYou can additionally implement the org.springframework.core.Ordered interface or use the\norg.springframework.core.annotation.Order annotation if several CommandLineRunner or\nApplicationRunner beans are defined that must be called in a specific order.\n23.9. Application exit\nEach SpringApplication will register a shutdown hook with the JVM to ensure that the\nApplicationContext is closed gracefully on exit. All the standard Spring lifecycle callbacks (such as\nthe DisposableBean interface, or the @PreDestroy annotation) can be used.\nIn addition, beans may implement the org.springframework.boot.ExitCodeGenerator interface if they\nwish to return a specific exit code when the application ends.\n23.10. Admin features\nIt is possible to enable admin-related features for the application by specifying the\nspring.application.admin.enabled property. This exposes the SpringApplicationAdminMXBean on the\nplatform MBeanServer. You could use this feature to administer your Spring Boot application\nremotely. This could also be useful for any service wrapper implementation.\n\uf0eb If you want to know on which HTTP port the application is running, get the\nproperty with key local.server.port.\n\uf05a Take care when enabling this feature as the MBean exposes a method to\nshutdown the application.\n60\nChapter 24. Externalized Configuration\nSpring Boot allows you to externalize your configuration so you can work with the same\napplication code in different environments. You can use properties files, YAML files, environment\nvariables and command-line arguments to externalize configuration. Property values can be\ninjected directly into your beans using the @Value annotation, accessed via Spring\u2019s Environment\nabstraction or bound to structured objects via @ConfigurationProperties.\nSpring Boot uses a very particular PropertySource order that is designed to allow sensible\noverriding of values. Properties are considered in the following order:\n1. Devtools global settings properties on your home directory (~/.spring-boot-devtools.properties\nwhen devtools is active).\n2. @TestPropertySource annotations on your tests.\n3. @SpringBootTest#properties annotation attribute on your tests.\n4. Command line arguments.\n5. Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or\nsystem property)\n6. ServletConfig init parameters.\n7. ServletContext init parameters.\n8. JNDI attributes from java:comp/env.\n9. Java System properties (System.getProperties()).\n10. OS environment variables.\n11. A RandomValuePropertySource that only has properties in random.*.\n12. Profile-specific application properties outside of your packaged jar (application-\n{profile}.properties and YAML variants)\n13. Profile-specific application properties packaged inside your jar (application-\n{profile}.properties and YAML variants)\n14. Application properties outside of your packaged jar (application.properties and YAML\nvariants).\n15. Application properties packaged inside your jar (application.properties and YAML variants).\n16. @PropertySource annotations on your @Configuration classes.\n17. Default properties (specified using SpringApplication.setDefaultProperties).\nTo provide a concrete example, suppose you develop a @Component that uses a name property:\n61\nimport org.springframework.stereotype.*\nimport org.springframework.beans.factory.annotation.*\n@Component\npublic class MyBean {\n@Value(\"${name}\")\nprivate String name;\n// ...\n}\nOn your application classpath (e.g. inside your jar) you can have an application.properties that\nprovides a sensible default property value for name. When running in a new environment, an\napplication.properties can be provided outside of your jar that overrides the name; and for one-off\ntesting, you can launch with a specific command line switch (e.g. java -jar app.jar --\nname=\"Spring\").\nThe SPRING_APPLICATION_JSON properties can be supplied on the command line\nwith an environment variable. For example in a UN*X shell:\n$ SPRING_APPLICATION_JSON='{\"foo\":{\"bar\":\"spam\"}}' java -jar myapp.jar\nIn this example you will end up with foo.bar=spam in the Spring Environment. You\ncan also supply the JSON as spring.application.json in a System variable:\n\uf0eb\n$ java -Dspring.application.json='{\"foo\":\"bar\"}' -jar myapp.jar\nor command line argument:\n$ java -jar myapp.jar --spring.application.json='{\"foo\":\"bar\"}'\nor as a JNDI variable java:comp/env/spring.application.json.\n24.1. Configuring random values\nThe RandomValuePropertySource is useful for injecting random values (e.g. into secrets or test cases).\nIt can produce integers, longs, uuids or strings, e.g.\n62\nmy.secret=${random.value}\nmy.number=${random.int}\nmy.bignumber=${random.long}\nmy.uuid=${random.uuid}\nmy.number.less.than.ten=${random.int(10)}\nmy.number.in.range=${random.int[1024,65536]}\nThe random.int* syntax is OPEN value (,max) CLOSE where the OPEN,CLOSE are any character and\nvalue,max are integers. If max is provided then value is the minimum value and max is the maximum\n(exclusive).\n24.2. Accessing command line properties\nBy default SpringApplication will convert any command line option arguments (starting with \u2018--\u2019,\ne.g. --server.port=9000) to a property and add it to the Spring Environment. As mentioned above,\ncommand line properties always take precedence over other property sources.\nIf you don\u2019t want command line properties to be added to the Environment you can disable them\nusing SpringApplication.setAddCommandLineProperties(false).\n24.3. Application property files\nSpringApplication will load properties from application.properties files in the following locations\nand add them to the Spring Environment:\n1. A /config subdirectory of the current directory.\n2. The current directory\n3. A classpath /config package\n4. The classpath root\nThe list is ordered by precedence (properties defined in locations higher in the list override those\ndefined in lower locations).\n\uf05a\nYou can also use YAML ('.yml') files as an alternative to '.properties'.\nIf you don\u2019t like application.properties as the configuration file name you can switch to another by\nspecifying a spring.config.name environment property. You can also refer to an explicit location\nusing the spring.config.location environment property (comma-separated list of directory\nlocations, or file paths).\n$ java -jar myproject.jar --spring.config.name=myproject\nor\n63\n$ java -jar myproject.jar\n--spring.config.location=classpath:/default.properties,classpath:/override.properties\nspring.config.name and spring.config.location are used very early to determine\n\uf071\nwhich files have to be loaded so they have to be defined as an environment\nproperty (typically OS env, system property or command line argument).\nIf spring.config.location contains directories (as opposed to files) they should end in / (and will be\nappended with the names generated from spring.config.name before being loaded, including\nprofile-specific file names). Files specified in spring.config.location are used as-is, with no support\nfor profile-specific variants, and will be overridden by any profile-specific properties.\nThe default search path classpath:,classpath:/config,file:,file:config/ is always used,\nirrespective of the value of spring.config.location. This search path is ordered from lowest to\nhighest precedence (file:config/ wins). If you do specify your own locations, they take precedence\nover all of the default locations and use the same lowest to highest precedence ordering. In that\nway you can set up default values for your application in application.properties (or whatever\nother basename you choose with spring.config.name) and override it at runtime with a different\nfile, keeping the defaults.\nIf you use environment variables rather than system properties, most operating\n\uf05a\nsystems disallow period-separated key names, but you can use underscores\ninstead (e.g. SPRING_CONFIG_NAME instead of spring.config.name).\nIf you are running in a container then JNDI properties (in java:comp/env) or\n\uf05a\nservlet context initialization parameters can be used instead of, or as well as,\nenvironment variables or system properties.\n24.4. Profile-specific properties\nIn addition to application.properties files, profile-specific properties can also be defined using the\nnaming convention application-{profile}.properties. The Environment has a set of default profiles\n(by default [default]) which are used if no active profiles are set (i.e. if no profiles are explicitly\nactivated then properties from application-default.properties are loaded).\nProfile-specific properties are loaded from the same locations as standard application.properties,\nwith profile-specific files always overriding the non-specific ones irrespective of whether the\nprofile-specific files are inside or outside your packaged jar.\nIf several profiles are specified, a last wins strategy applies. For example, profiles specified by the\nspring.profiles.active property are added after those configured via the SpringApplication API\nand therefore take precedence.\nIf you have specified any files in spring.config.location, profile-specific variants\n\uf05a\nof those files will not be considered. Use directories in`spring.config.location` if\nyou also want to also use profile-specific properties.\n64\n24.5. Placeholders in properties\nThe values in application.properties are filtered through the existing Environment when they are\nused so you can refer back to previously defined values (e.g. from System properties).\napp.name=MyApp\napp.description=${app.name} is a Spring Boot application\n\uf0eb You can also use this technique to create \u2018short\u2019 variants of existing Spring Boot\nproperties. See the Use \u2018short\u2019 command line arguments how-to for details.\n24.6. Using YAML instead of Properties\nYAML is a superset of JSON, and as such is a very convenient format for specifying hierarchical\nconfiguration data. The SpringApplication class will automatically support YAML as an alternative\nto properties whenever you have the SnakeYAML library on your classpath.\n\uf05a If you use \u2018Starters\u2019 SnakeYAML will be automatically provided via spring-boot-\nstarter.\n24.6.1. Loading YAML\nSpring Framework provides two convenient classes that can be used to load YAML documents. The\nYamlPropertiesFactoryBean will load YAML as Properties and the YamlMapFactoryBean will load YAML\nas a Map.\nFor example, the following YAML document:\nenvironments:\ndev:\nurl: http://dev.bar.com\nname: Developer Setup\nprod:\nurl: http://foo.bar.com\nname: My Cool App\nWould be transformed into these properties:\nenvironments.dev.url=http://dev.bar.com\nenvironments.dev.name=Developer Setup\nenvironments.prod.url=http://foo.bar.com\nenvironments.prod.name=My Cool App\nYAML lists are represented as property keys with [index] dereferencers, for example this YAML:\n65\nmy:\nservers:\n- dev.bar.com\n- foo.bar.com\nWould be transformed into these properties:\nmy.servers[0]=dev.bar.com\nmy.servers[1]=foo.bar.com\nTo bind to properties like that using the Spring DataBinder utilities (which is what\n@ConfigurationProperties does) you need to have a property in the target bean of type\njava.util.List (or Set) and you either need to provide a setter, or initialize it with a mutable value,\ne.g. this will bind to the properties above\n@ConfigurationProperties(prefix=\"my\")\npublic class Config {\nprivate List<String> servers = new ArrayList<String>();\npublic List<String> getServers() {\nreturn this.servers;\n}\n}\n24.6.2. Exposing YAML as properties in the Spring Environment\nThe YamlPropertySourceLoader class can be used to expose YAML as a PropertySource in the Spring\nEnvironment. This allows you to use the familiar @Value annotation with placeholders syntax to\naccess YAML properties.\n24.6.3. Multi-profile YAML documents\nYou can specify multiple profile-specific YAML documents in a single file by using a spring.profiles\nkey to indicate when the document applies. For example:\n66\nserver:\naddress: 192.168.1.100\n---\nspring:\nprofiles: development\nserver:\naddress: 127.0.0.1\n---\nspring:\nprofiles: production\nserver:\naddress: 192.168.1.120\nIn the example above, the server.address property will be 127.0.0.1 if the development profile is\nactive. If the development and production profiles are not enabled, then the value for the property\nwill be 192.168.1.100.\nThe default profiles are activated if none are explicitly active when the application context starts.\nSo in this YAML we set a value for security.user.password that is only available in the \"default\"\nprofile:\nserver:\nport: 8000\n---\nspring:\nprofiles: default\nsecurity:\nuser:\npassword: weak\nwhereas in this example, the password is always set because it isn\u2019t attached to any profile, and it\nwould have to be explicitly reset in all other profiles as necessary:\nserver:\nport: 8000\nsecurity:\nuser:\npassword: weak\nSpring profiles designated using the \"spring.profiles\" element may optionally be negated using the !\ncharacter. If both negated and non-negated profiles are specified for a single document, at least one\nnon-negated profile must match and no negated profiles may match.\n24.6.4. YAML shortcomings\nYAML files can\u2019t be loaded via the @PropertySource annotation. So in the case that you need to load\nvalues that way, you need to use a properties file.\n67\n24.6.5. Merging YAML lists\nAs we have seen above, any YAML content is ultimately transformed to properties. That process\nmay be counter intuitive when overriding \u201clist\u201d properties via a profile.\nFor example, assume a MyPojo object with name and description attributes that are null by default.\nLet\u2019s expose a list of MyPojo from FooProperties:\n@ConfigurationProperties(\"foo\")\npublic class FooProperties {\nprivate final List<MyPojo> list = new ArrayList<>();\npublic List<MyPojo> getList() {\nreturn this.list;\n}\n}\nConsider the following configuration:\nfoo:\nlist:\n- name: my name\ndescription: my description\n---\nspring:\nprofiles: dev\nfoo:\nlist:\n- name: my another name\nIf the dev profile isn\u2019t active, FooProperties.list will contain one MyPojo entry as defined above. If\nthe dev profile is enabled however, the list will still only contain one entry (with name \u201cmy\nanother name\u201d and description null). This configuration will not add a second MyPojo instance to the\nlist, and it won\u2019t merge the items.\nWhen a collection is specified in multiple profiles, the one with highest priority is used (and only\nthat one):\n68\nfoo:\nlist:\n- name: my name\ndescription: my description\n- name: another name\ndescription: another description\n---\nspring:\nprofiles: dev\nfoo:\nlist:\n- name: my another name\nIn the example above, considering that the dev profile is active, FooProperties.list will contain one\nMyPojo entry (with name \u201cmy another name\u201d and description null).\n24.7. Type-safe Configuration Properties\nUsing the @Value(\"${property}\") annotation to inject configuration properties can sometimes be\ncumbersome, especially if you are working with multiple properties or your data is hierarchical in\nnature. Spring Boot provides an alternative method of working with properties that allows strongly\ntyped beans to govern and validate the configuration of your application. For example:\n@ConfigurationProperties(prefix=\"connection\")\npublic class ConnectionProperties {\nprivate String username;\nprivate InetAddress remoteAddress;\n// ... getters and setters\n}\nThe getters and setters are advisable, since binding is via standard Java Beans\nproperty descriptors, just like in Spring MVC. They are mandatory for immutable\ntypes or those that are directly coercible from String. As long as they are\ninitialized, maps, collections, and arrays need a getter but not necessarily a setter\n\uf05a since they can be mutated by the binder. If there is a setter, Maps, collections, and\narrays can be created. Maps and collections can be expanded with only a getter,\nwhereas arrays require a setter. Nested POJO properties can also be created (so a\nsetter is not mandatory) if they have a default constructor, or a constructor\naccepting a single value that can be coerced from String. Some people use Project\nLombok to add getters and setters automatically.\n\uf0eb\nSee also the differences between @Value and @ConfigurationProperties.\n69\nYou also need to list the properties classes to register in the @EnableConfigurationProperties\nannotation:\n@Configuration\n@EnableConfigurationProperties(ConnectionProperties.class)\npublic class MyConfiguration {\n}\nWhen @ConfigurationProperties bean is registered that way, the bean will have a\nconventional name: <prefix>-<fqn>, where <prefix> is the environment key prefix\nspecified in the @ConfigurationProperties annotation and <fqn> the fully qualified\nname of the bean. If the annotation does not provide any prefix, only the fully\n\uf05a\nqualified name of the bean is used.\nThe bean name in the example above will be connection-\ncom.example.ConnectionProperties, assuming that ConnectionProperties sits in the\ncom.example package.\nEven if the configuration above will create a regular bean for ConnectionProperties, we recommend\nthat @ConfigurationProperties only deal with the environment and in particular does not inject\nother beans from the context. Having said that, The @EnableConfigurationProperties annotation is\nalso automatically applied to your project so that any existing bean annotated with\n@ConfigurationProperties will be configured from the Environment properties. You could shortcut\nMyConfiguration above by making sure ConnectionProperties is a already a bean:\n@Component\n@ConfigurationProperties(prefix=\"connection\")\npublic class ConnectionProperties {\n// ... getters and setters\n}\nThis style of configuration works particularly well with the SpringApplication external YAML\nconfiguration:\n# application.yml\nconnection:\nusername: admin\nremoteAddress: 192.168.1.1\n# additional configuration as required\nTo work with @ConfigurationProperties beans you can just inject them in the same way as any other\nbean.\n70\n@Service\npublic class MyService {\nprivate final ConnectionProperties connection;\n@Autowired\npublic MyService(ConnectionProperties connection) {\nthis.connection = connection;\n}\n//...\n@PostConstruct\npublic void openConnection() {\nServer server = new Server();\nthis.connection.configure(server);\n}\n}\n\uf0eb Using @ConfigurationProperties also allows you to generate meta-data files that\ncan be used by IDEs. See the Configuration meta-data appendix for details.\n24.7.1. Third-party configuration\nAs well as using @ConfigurationProperties to annotate a class, you can also use it on public @Bean\nmethods. This can be particularly useful when you want to bind properties to third-party\ncomponents that are outside of your control.\nTo configure a bean from the Environment properties, add @ConfigurationProperties to its bean\nregistration:\n@ConfigurationProperties(prefix = \"foo\")\n@Bean\npublic FooComponent fooComponent() {\n...\n}\nAny property defined with the foo prefix will be mapped onto that FooComponent bean in a similar\nmanner as the ConnectionProperties example above.\n24.7.2. Relaxed binding\nSpring Boot uses some relaxed rules for binding Environment properties to @ConfigurationProperties\nbeans, so there doesn\u2019t need to be an exact match between the Environment property name and the\nbean property name. Common examples where this is useful include dashed separated (e.g.\ncontext-path binds to contextPath), and capitalized (e.g. PORT binds to port) environment properties.\n71\nFor example, given the following @ConfigurationProperties class:\n@ConfigurationProperties(prefix=\"person\")\npublic class OwnerProperties {\nprivate String firstName;\npublic String getFirstName() {\nreturn this.firstName;\n}\npublic void setFirstName(String firstName) {\nthis.firstName = firstName;\n}\n}\nThe following properties names can all be used:\nTable 5. relaxed binding\nProperty Note\nperson.firstName\nStandard camel case syntax.\nperson.first-name Dashed notation, recommended for use in .properties and .yml files.\nperson.first_name Underscore notation, alternative format for use in .properties and .yml files.\nPERSON_FIRST_NAME\nUpper case format. Recommended when using a system environment\nvariables.\n24.7.3. Properties conversion\nSpring will attempt to coerce the external application properties to the right type when it binds to\nthe @ConfigurationProperties beans. If you need custom type conversion you can provide a\nConversionService bean (with bean id conversionService) or custom property editors (via a\nCustomEditorConfigurer bean) or custom Converters (with bean definitions annotated as\n@ConfigurationPropertiesBinding).\nAs this bean is requested very early during the application lifecycle, make sure to\nlimit the dependencies that your ConversionService is using. Typically, any\n\uf05a dependency that you require may not be fully initialized at creation time. You\nmay want to rename your custom ConversionService if it\u2019s not required for\nconfiguration keys coercion and only rely on custom converters qualified with\n@ConfigurationPropertiesBinding.\n24.7.4. @ConfigurationProperties Validation\nSpring Boot will attempt to validate external configuration, by default using JSR-303 (if it is on the\n72\nclasspath). You can simply add JSR-303 javax.validation constraint annotations to your\n@ConfigurationProperties class:\n@ConfigurationProperties(prefix=\"connection\")\npublic class ConnectionProperties {\n@NotNull\nprivate InetAddress remoteAddress;\n// ... getters and setters\n}\nIn order to validate values of nested properties, you must annotate the associated field as @Valid to\ntrigger its validation. For example, building upon the above ConnectionProperties example:\n@ConfigurationProperties(prefix=\"connection\")\npublic class ConnectionProperties {\n@NotNull\n@Valid\nprivate RemoteAddress remoteAddress;\n// ... getters and setters\npublic static class RemoteAddress {\n@NotEmpty\npublic String hostname;\n// ... getters and setters\n}\n}\nYou can also add a custom Spring Validator by creating a bean definition called\nconfigurationPropertiesValidator. The @Bean method should be declared static. The configuration\nproperties validator is created very early in the application\u2019s lifecycle and declaring the @Bean\nmethod as static allows the bean to be created without having to instantiate the @Configuration\nclass. This avoids any problems that may be caused by early instantiation. There is a property\nvalidation sample so you can see how to set things up.\nThe spring-boot-actuator module includes an endpoint that exposes all\n\uf0eb @ConfigurationProperties beans. Simply point your web browser to /configprops\nor use the equivalent JMX endpoint. See the Production ready features. section for\ndetails.\n73\n24.7.5. @ConfigurationProperties vs. @Value\n@Value is a core container feature and it does not provide the same features as type-safe\nConfiguration Properties. The table below summarizes the features that are supported by\n@ConfigurationProperties and @Value:\n@ConfigurationProperti @Value\nFeature\nes\nRelaxed binding Yes No\nMeta-data support Yes No\nSpEL evaluation No Yes\nIf you define a set of configuration keys for your own components, we recommend you to group\nthem in a POJO annotated with @ConfigurationProperties. Please also be aware that since @Value\ndoes not support relaxed binding, it isn\u2019t a great candidate if you need to provide the value using\nenvironment variables.\nFinally, while you can write a SpEL expression in @Value, such expressions are not processed from\nApplication property files.\n74\nChapter 25. Profiles\nSpring Profiles provide a way to segregate parts of your application configuration and make it only\navailable in certain environments. Any @Component or @Configuration can be marked with @Profile\nto limit when it is loaded:\n@Configuration\n@Profile(\"production\")\npublic class ProductionConfiguration {\n// ...\n}\nIn the normal Spring way, you can use a spring.profiles.active Environment property to specify\nwhich profiles are active. You can specify the property in any of the usual ways, for example you\ncould include it in your application.properties:\nspring.profiles.active=dev,hsqldb\nor specify on the command line using the switch --spring.profiles.active=dev,hsqldb.\n25.1. Adding active profiles\nThe spring.profiles.active property follows the same ordering rules as other properties, the\nhighest PropertySource will win. This means that you can specify active profiles in\napplication.properties then replace them using the command line switch.\nSometimes it is useful to have profile-specific properties that add to the active profiles rather than\nreplace them. The spring.profiles.include property can be used to unconditionally add active\nprofiles. The SpringApplication entry point also has a Java API for setting additional profiles (i.e. on\ntop of those activated by the spring.profiles.active property): see the setAdditionalProfiles()\nmethod.\nFor example, when an application with following properties is run using the switch\n--spring.profiles.active=prod the proddb and prodmq profiles will also be activated:\n---\nmy.property: fromyamlfile\n---\nspring.profiles: prod\nspring.profiles.include:\n- proddb\n- prodmq\n75\nRemember that the spring.profiles property can be defined in a YAML document\n\uf05a\nto determine when this particular document is included in the configuration. See\nChange configuration depending on the environment for more details.\n25.2. Programmatically setting profiles\nYou can programmatically set active profiles by calling SpringApplication.setAdditionalProfiles(\u2026\n) before your application runs. It is also possible to activate profiles using Spring\u2019s\nConfigurableEnvironment interface.\n25.3. Profile-specific configuration files\nProfile-specific variants of both application.properties (or application.yml) and files referenced via\n@ConfigurationProperties are considered as files are loaded. See Profile-specific properties for\ndetails.\n76\nChapter 26. Logging\nSpring Boot uses Commons Logging for all internal logging, but leaves the underlying log\nimplementation open. Default configurations are provided for Java Util Logging, Log4J2 and\nLogback. In each case loggers are pre-configured to use console output with optional file output\nalso available.\nBy default, If you use the \u2018Starters\u2019, Logback will be used for logging. Appropriate Logback routing\nis also included to ensure that dependent libraries that use Java Util Logging, Commons Logging,\nLog4J or SLF4J will all work correctly.\nThere are a lot of logging frameworks available for Java. Don\u2019t worry if the above\n\uf0eb\nlist seems confusing. Generally you won\u2019t need to change your logging\ndependencies and the Spring Boot defaults will work just fine.\n26.1. Log format\nThe default log output from Spring Boot looks like this:\n2014-03-05 10:57:51.112 INFO 45469 --- [ main]\norg.apache.catalina.core.StandardEngine : Starting Servlet Engine: Apache\nTomcat/7.0.52\n2014-03-05 10:57:51.253 INFO 45469 --- [ost-startStop-1]\no.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded\nWebApplicationContext\n2014-03-05 10:57:51.253 INFO 45469 --- [ost-startStop-1]\no.s.web.context.ContextLoader : Root WebApplicationContext: initialization\ncompleted in 1358 ms\n2014-03-05 10:57:51.698 INFO 45469 --- [ost-startStop-1]\no.s.b.c.e.ServletRegistrationBean : Mapping servlet: 'dispatcherServlet' to [/]\n2014-03-05 10:57:51.702 INFO 45469 --- [ost-startStop-1]\no.s.b.c.embedded.FilterRegistrationBean : Mapping filter: 'hiddenHttpMethodFilter'\nto: [/*]\nThe following items are output:\n\u2022 Date and Time \u2014 Millisecond precision and easily sortable.\n\u2022 Log Level \u2014 ERROR, WARN, INFO, DEBUG or TRACE.\n\u2022 Process ID.\n\u2022 A --- separator to distinguish the start of actual log messages.\n\u2022 Thread name \u2014 Enclosed in square brackets (may be truncated for console output).\n\u2022 Logger name \u2014 This is usually the source class name (often abbreviated).\n\u2022 The log message.\n77\n\uf05a\nLogback does not have a FATAL level (it is mapped to ERROR)\n26.2. Console output\nThe default log configuration will echo messages to the console as they are written. By default\nERROR, WARN and INFO level messages are logged. You can also enable a \u201cdebug\u201d mode by starting your\napplication with a --debug flag.\n$ java -jar myapp.jar --debug\n\uf05a\nyou can also specify debug=true in your application.properties.\nWhen the debug mode is enabled, a selection of core loggers (embedded container, Hibernate and\nSpring Boot) are configured to output more information. Enabling the debug mode does not\nconfigure your application to log all messages with DEBUG level.\nAlternatively, you can enable a \u201ctrace\u201d mode by starting your application with a --trace flag (or\ntrace=true in your application.properties). This will enable trace logging for a selection of core\nloggers (embedded container, Hibernate schema generation and the whole Spring portfolio).\n26.2.1. Color-coded output\nIf your terminal supports ANSI, color output will be used to aid readability. You can set\nspring.output.ansi.enabled to a supported value to override the auto detection.\nColor coding is configured using the %clr conversion word. In its simplest form the converter will\ncolor the output according to the log level, for example:\n%clr(%5p)\nThe mapping of log level to a color is as follows:\nLevel Color\nFATAL\nRed\nERROR\nRed\nWARN\nYellow\nINFO\nGreen\nDEBUG\nGreen\nTRACE\nGreen\nAlternatively, you can specify the color or style that should be used by providing it as an option to\nthe conversion. For example, to make the text yellow:\n78\n%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){yellow}\nThe following colors and styles are supported:\nblue\n\u2022\ncyan\n\u2022\nfaint\n\u2022\ngreen\n\u2022\nmagenta\n\u2022\nred\n\u2022\nyellow\n\u2022\n26.3. File output\nBy default, Spring Boot will only log to the console and will not write log files. If you want to write\nlog files in addition to the console output you need to set a logging.file or logging.path property\n(for example in your application.properties).\nThe following table shows how the logging.* properties can be used together:\nTable 6. Logging properties\nlogging.file logging.path\nExample Description\n(none) (none) Console only logging.\nmy.log\nSpecific file (none) Writes to the specified log file. Names can be an exact\nlocation or relative to the current directory.\n(none) Specific /var/log Writes spring.log to the specified directory. Names can\ndirectory be an exact location or relative to the current directory.\nLog files will rotate when they reach 10 MB and as with console output, ERROR, WARN and INFO level\nmessages are logged by default.\nThe logging system is initialized early in the application lifecycle and as such\n\uf05a\nlogging properties will not be found in property files loaded via @PropertySource\nannotations.\nLogging properties are independent of the actual logging infrastructure. As a\n\uf0eb\nresult, specific configuration keys (such as logback.configurationFile for\nLogback) are not managed by spring Boot.\n26.4. Log Levels\nAll the supported logging systems can have the logger levels set in the Spring Environment (so for\nexample in application.properties) using \u2018logging.level.*=LEVEL\u2019 where \u2018LEVEL\u2019 is one of TRACE,\nDEBUG, INFO, WARN, ERROR, FATAL, OFF. The root logger can be configured using\n79\nlogging.level.root. Example application.properties:\nlogging.level.root=WARN\nlogging.level.org.springframework.web=DEBUG\nlogging.level.org.hibernate=ERROR\nBy default Spring Boot remaps Thymeleaf INFO messages so that they are logged at\n\uf05a DEBUG level. This helps to reduce noise in the standard log output. See\nLevelRemappingAppender for details of how you can apply remapping in your own\nconfiguration.\n26.5. Custom log configuration\nThe various logging systems can be activated by including the appropriate libraries on the\nclasspath, and further customized by providing a suitable configuration file in the root of the\nclasspath, or in a location specified by the Spring Environment property logging.config.\nYou can force Spring Boot to use a particular logging system using the\norg.springframework.boot.logging.LoggingSystem system property. The value should be the fully-\nqualified class name of a LoggingSystem implementation. You can also disable Spring Boot\u2019s logging\nconfiguration entirely by using a value of none.\nSince logging is initialized before the ApplicationContext is created, it isn\u2019t\n\uf05a possible to control logging from @PropertySources in Spring @Configuration files.\nSystem properties and the conventional Spring Boot external configuration files\nwork just fine.)\nDepending on your logging system, the following files will be loaded:\nLogging System Customization\nLogback logback-spring.xml, logback-spring.groovy,\nlogback.xml or logback.groovy\nLog4j2 log4j2-spring.xml or log4j2.xml\nlogging.properties\nJDK (Java Util Logging)\nWhen possible we recommend that you use the -spring variants for your logging\n\uf05a configuration (for example logback-spring.xml rather than logback.xml). If you\nuse standard configuration locations, Spring cannot completely control log\ninitialization.\nThere are known classloading issues with Java Util Logging that cause problems\n\uf071\nwhen running from an \u2018executable jar\u2019. We recommend that you avoid it if at all\npossible.\n80\nTo help with the customization some other properties are transferred from the Spring Environment\nto System properties:\nSpring Environment System Property Comments\nlogging.exception-conversion- LOG_EXCEPTION_CONVERSION_WORD\nThe conversion word that\u2019s used\nword\nwhen logging exceptions.\nlogging.file LOG_FILE\nUsed in default log configuration\nif defined.\nlogging.path LOG_PATH\nUsed in default log configuration\nif defined.\nlogging.pattern.console CONSOLE_LOG_PATTERN\nThe log pattern to use on the\nconsole (stdout). (Only\nsupported with the default\nlogback setup.)\nlogging.pattern.file FILE_LOG_PATTERN\nThe log pattern to use in a file (if\nLOG_FILE enabled). (Only\nsupported with the default\nlogback setup.)\nlogging.pattern.level LOG_LEVEL_PATTERN\nThe format to use to render the\nlog level (default %5p). (Only\nsupported with the default\nlogback setup.)\nPID PID\nThe current process ID\n(discovered if possible and when\nnot already defined as an OS\nenvironment variable).\nAll the logging systems supported can consult System properties when parsing their configuration\nfiles. See the default configurations in spring-boot.jar for examples.\nIf you want to use a placeholder in a logging property, you should use Spring\n\uf0eb Boot\u2019s syntax and not the syntax of the underlying framework. Notably, if you\u2019re\nusing Logback, you should use : as the delimiter between a property name and its\ndefault value and not :-.\nYou can add MDC and other ad-hoc content to log lines by overriding only the\nLOG_LEVEL_PATTERN (or logging.pattern.level with Logback). For example, if you\nuse logging.pattern.level=user:%X{user} %5p then the default log format will\ncontain an MDC entry for \"user\" if it exists, e.g.\n\uf0eb\n2015-09-30 12:30:04.031 user:juergen INFO 22174 --- [ nio-8080-exec-\n0] demo.Controller\nHandling authenticated request\n81\n26.6. Logback extensions\nSpring Boot includes a number of extensions to Logback which can help with advanced\nconfiguration. You can use these extensions in your logback-spring.xml configuration file.\nYou cannot use extensions in the standard logback.xml configuration file since it\u2019s\n\uf05a\nloaded too early. You need to either use logback-spring.xml or define a\nlogging.config property.\n26.6.1. Profile-specific configuration\nThe <springProfile> tag allows you to optionally include or exclude sections of configuration based\non the active Spring profiles. Profile sections are supported anywhere within the <configuration>\nelement. Use the name attribute to specify which profile accepts the configuration. Multiple profiles\ncan be specified using a comma-separated list.\n<springProfile name=\"staging\">\n<!-- configuration to be enabled when the \"staging\" profile is active -->\n</springProfile>\n<springProfile name=\"dev, staging\">\n<!-- configuration to be enabled when the \"dev\" or \"staging\" profiles are active\n-->\n</springProfile>\n<springProfile name=\"!production\">\n<!-- configuration to be enabled when the \"production\" profile is not active -->\n</springProfile>\n26.6.2. Environment properties\nThe <springProperty> tag allows you to surface properties from the Spring Environment for use\nwithin Logback. This can be useful if you want to access values from your application.properties\nfile in your logback configuration. The tag works in a similar way to Logback\u2019s standard <property>\ntag, but rather than specifying a direct value you specify the source of the property (from the\nEnvironment). You can use the scope attribute if you need to store the property somewhere other\nthan in local scope. If you need a fallback value in case the property is not set in the Environment,\nyou can use the defaultValue attribute.\n<springProperty scope=\"context\" name=\"fluentHost\" source=\"myapp.fluentd.host\"\ndefaultValue=\"localhost\"/>\n<appender name=\"FLUENT\" class=\"ch.qos.logback.more.appenders.DataFluentAppender\">\n<remoteHost>${fluentHost}</remoteHost>\n...\n</appender>\n82\nThe RelaxedPropertyResolver is used to access Environment properties. If specify\n\uf0eb\nthe source in dashed notation (my-property-name) all the relaxed variations will be\ntried (myPropertyName, MY_PROPERTY_NAME etc).\n83\nChapter 27. Developing web applications\nSpring Boot is well suited for web application development. You can easily create a self-contained\nHTTP server using embedded Tomcat, Jetty, or Undertow. Most web applications will use the\nspring-boot-starter-web module to get up and running quickly.\nIf you haven\u2019t yet developed a Spring Boot web application you can follow the \"Hello World!\"\nexample in the Getting started section.\n27.1. The \u2018Spring Web MVC framework\u2019\nThe Spring Web MVC framework (often referred to as simply \u2018Spring MVC\u2019) is a rich \u2018model view\ncontroller\u2019 web framework. Spring MVC lets you create special @Controller or @RestController\nbeans to handle incoming HTTP requests. Methods in your controller are mapped to HTTP using\n@RequestMapping annotations.\nHere is a typical example @RestController to serve JSON data:\n@RestController\n@RequestMapping(value=\"/users\")\npublic class MyRestController {\n@RequestMapping(value=\"/{user}\", method=RequestMethod.GET)\npublic User getUser(@PathVariable Long user) {\n// ...\n}\n@RequestMapping(value=\"/{user}/customers\", method=RequestMethod.GET)\nList<Customer> getUserCustomers(@PathVariable Long user) {\n// ...\n}\n@RequestMapping(value=\"/{user}\", method=RequestMethod.DELETE)\npublic User deleteUser(@PathVariable Long user) {\n// ...\n}\n}\nSpring MVC is part of the core Spring Framework and detailed information is available in the\nreference documentation. There are also several guides available at spring.io/guides that cover\nSpring MVC.\n27.1.1. Spring MVC auto-configuration\nSpring Boot provides auto-configuration for Spring MVC that works well with most applications.\nThe auto-configuration adds the following features on top of Spring\u2019s defaults:\n84\n\u2022 Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.\n\u2022 Support for serving static resources, including support for WebJars (see below).\n\u2022 Automatic registration of Converter, GenericConverter, Formatter beans.\n\u2022 Support for HttpMessageConverters (see below).\n\u2022 Automatic registration of MessageCodesResolver (see below).\n\u2022 Static index.html support.\n\u2022 Custom Favicon support.\n\u2022 Automatic use of a ConfigurableWebBindingInitializer bean (see below).\nIf you want to keep Spring Boot MVC features, and you just want to add additional MVC\nconfiguration (interceptors, formatters, view controllers etc.) you can add your own @Configuration\nclass of type WebMvcConfigurerAdapter, but without @EnableWebMvc. If you wish to provide custom\ninstances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter or\nExceptionHandlerExceptionResolver you can declare a WebMvcRegistrationsAdapter instance\nproviding such components.\nIf you want to take complete control of Spring MVC, you can add your own @Configuration\nannotated with @EnableWebMvc.\n27.1.2. HttpMessageConverters\nSpring MVC uses the HttpMessageConverter interface to convert HTTP requests and responses.\nSensible defaults are included out of the box, for example Objects can be automatically converted\nto JSON (using the Jackson library) or XML (using the Jackson XML extension if available, else using\nJAXB). Strings are encoded using UTF-8 by default.\nIf you need to add or customize converters you can use Spring Boot\u2019s HttpMessageConverters class:\nimport org.springframework.boot.autoconfigure.web.HttpMessageConverters;\nimport org.springframework.context.annotation.*;\nimport org.springframework.http.converter.*;\n@Configuration\npublic class MyConfiguration {\n@Bean\npublic HttpMessageConverters customConverters() {\nHttpMessageConverter<?> additional = ...\nHttpMessageConverter<?> another = ...\nreturn new HttpMessageConverters(additional, another);\n}\n}\nAny HttpMessageConverter bean that is present in the context will be added to the list of converters.\nYou can also override default converters that way.\n85\n27.1.3. Custom JSON Serializers and Deserializers\nIf you\u2019re using Jackson to serialize and deserialize JSON data, you might want to write your own\nJsonSerializer and JsonDeserializer classes. Custom serializers are usually registered with Jackson\nvia a Module, but Spring Boot provides an alternative @JsonComponent annotation which makes it\neasier to directly register Spring Beans.\nYou can use @JsonComponent directly on JsonSerializer or JsonDeserializer implementations. You\ncan also use it on classes that contains serializers/deserializers as inner-classes. For example:\nimport java.io.*;\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport org.springframework.boot.jackson.*;\n@JsonComponent\npublic class Example {\npublic static class Serializer extends JsonSerializer<SomeObject> {\n// ...\n}\npublic static class Deserializer extends JsonDeserializer<SomeObject> {\n// ...\n}\n}\nAll @JsonComponent beans in the ApplicationContext will be automatically registered with Jackson,\nand since @JsonComponent is meta-annotated with @Component, the usual component-scanning rules\napply.\nSpring Boot also provides JsonObjectSerializer and JsonObjectDeserializer base classes which\nprovide useful alternatives to the standard Jackson versions when serializing Objects. See the\nJavadoc for details.\n27.1.4. MessageCodesResolver\nSpring MVC has a strategy for generating error codes for rendering error messages from binding\nerrors: MessageCodesResolver. Spring Boot will create one for you if you set the spring.mvc.message-\ncodes-resolver.format property PREFIX_ERROR_CODE or POSTFIX_ERROR_CODE (see the enumeration in\nDefaultMessageCodesResolver.Format).\n27.1.5. Static Content\nBy default Spring Boot will serve static content from a directory called /static (or /public or\n/resources or /META-INF/resources) in the classpath or from the root of the ServletContext. It uses\nthe ResourceHttpRequestHandler from Spring MVC so you can modify that behavior by adding your\nown WebMvcConfigurerAdapter and overriding the addResourceHandlers method.\n86\nIn a stand-alone web application the default servlet from the container is also enabled, and acts as\na fallback, serving content from the root of the ServletContext if Spring decides not to handle it.\nMost of the time this will not happen (unless you modify the default MVC configuration) because\nSpring will always be able to handle requests through the DispatcherServlet.\nYou can customize the static resource locations using spring.resources.staticLocations (replacing\nthe default values with a list of directory locations). If you do this the default welcome page\ndetection will switch to your custom locations, so if there is an index.html in any of your locations\non startup, it will be the home page of the application.\nIn addition to the \u2018standard\u2019 static resource locations above, a special case is made for Webjars\ncontent. Any resources with a path in /webjars/** will be served from jar files if they are packaged\nin the Webjars format.\nDo not use the src/main/webapp directory if your application will be packaged as a\n\uf0eb\njar. Although this directory is a common standard, it will only work with war\npackaging and it will be silently ignored by most build tools if you generate a jar.\nSpring Boot also supports advanced resource handling features provided by Spring MVC, allowing\nuse cases such as cache busting static resources or using version agnostic URLs for Webjars.\nTo use version agnostic URLs for Webjars, simply add the webjars-locator dependency. Then\ndeclare your Webjar, taking jQuery for example, as \"/webjars/jquery/dist/jquery.min.js\" which\nresults in \"/webjars/jquery/x.y.z/dist/jquery.min.js\" where x.y.z is the Webjar version.\nIf you are using JBoss, you\u2019ll need to declare the webjars-locator-jboss-vfs\n\uf05a\ndependency instead of the webjars-locator; otherwise all Webjars resolve as a\n404.\nTo use cache busting, the following configuration will configure a cache busting solution for all\nstatic resources, effectively adding a content hash in URLs, such as <link href=\"/css/spring-\n2a2d595e6ed9a0b24f027f2b63b134d6.css\"/>:\nspring.resources.chain.strategy.content.enabled=true\nspring.resources.chain.strategy.content.paths=/**\nLinks to resources are rewritten at runtime in template, thanks to a\nResourceUrlEncodingFilter, auto-configured for Thymeleaf and FreeMarker. You\n\uf05a\nshould manually declare this filter when using JSPs. Other template engines\naren\u2019t automatically supported right now, but can be with custom template\nmacros/helpers and the use of the ResourceUrlProvider.\nWhen loading resources dynamically with, for example, a JavaScript module loader, renaming files\nis not an option. That\u2019s why other strategies are also supported and can be combined. A \"fixed\"\nstrategy will add a static version string in the URL, without changing the file name:\n87\nspring.resources.chain.strategy.content.enabled=true\nspring.resources.chain.strategy.content.paths=/**\nspring.resources.chain.strategy.fixed.enabled=true\nspring.resources.chain.strategy.fixed.paths=/js/lib/\nspring.resources.chain.strategy.fixed.version=v12\nWith this configuration, JavaScript modules located under \"/js/lib/\" will use a fixed versioning\nstrategy \"/v12/js/lib/mymodule.js\" while other resources will still use the content one <link\nhref=\"/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css\"/>.\nSee ResourceProperties for more of the supported options.\n\uf0eb This feature has been thoroughly described in a dedicated blog post and in Spring\nFramework\u2019s reference documentation.\n27.1.6. ConfigurableWebBindingInitializer\nSpring MVC uses a WebBindingInitializer to initialize a WebDataBinder for a particular request. If you\ncreate your own ConfigurableWebBindingInitializer @Bean, Spring Boot will automatically configure\nSpring MVC to use it.\n27.1.7. Template engines\nAs well as REST web services, you can also use Spring MVC to serve dynamic HTML content. Spring\nMVC supports a variety of templating technologies including Thymeleaf, FreeMarker and JSPs.\nMany other templating engines also ship their own Spring MVC integrations.\nSpring Boot includes auto-configuration support for the following templating engines:\n\u2022 FreeMarker\n\u2022 Groovy\n\u2022 Thymeleaf\n\u2022 Mustache\n\uf0eb JSPs should be avoided if possible, there are several known limitations when\nusing them with embedded servlet containers.\nWhen you\u2019re using one of these templating engines with the default configuration, your templates\nwill be picked up automatically from src/main/resources/templates.\n88\nIntelliJ IDEA orders the classpath differently depending on how you run your\napplication. Running your application in the IDE via its main method will result\nin a different ordering to when you run your application using Maven or Gradle\n\uf0eb or from its packaged jar. This can cause Spring Boot to fail to find the templates\non the classpath. If you\u2019re affected by this problem you can reorder the classpath\nin the IDE to place the module\u2019s classes and resources first. Alternatively, you can\nconfigure the template prefix to search every templates directory on the\nclasspath: classpath*:/templates/.\n27.1.8. Error Handling\nSpring Boot provides an /error mapping by default that handles all errors in a sensible way, and it\nis registered as a \u2018global\u2019 error page in the servlet container. For machine clients it will produce a\nJSON response with details of the error, the HTTP status and the exception message. For browser\nclients there is a \u2018whitelabel\u2019 error view that renders the same data in HTML format (to customize it\njust add a View that resolves to \u2018error\u2019). To replace the default behaviour completely you can\nimplement ErrorController and register a bean definition of that type, or simply add a bean of type\nErrorAttributes to use the existing mechanism but replace the contents.\nThe BasicErrorController can be used as a base class for a custom\nErrorController. This is particularly useful if you want to add a handler for a new\n\uf0eb content type (the default is to handle text/html specifically and provide a fallback\nfor everything else). To do that just extend BasicErrorController and add a public\nmethod with a @RequestMapping that has a produces attribute, and create a bean of\nyour new type.\nYou can also define a @ControllerAdvice to customize the JSON document to return for a particular\ncontroller and/or exception type.\n89\n@ControllerAdvice(basePackageClasses = FooController.class)\npublic class FooControllerAdvice extends ResponseEntityExceptionHandler {\n@ExceptionHandler(YourException.class)\n@ResponseBody\nResponseEntity<?> handleControllerException(HttpServletRequest request, Throwable\nex) {\nHttpStatus status = getStatus(request);\nreturn new ResponseEntity<>(new CustomErrorType(status.value(), ex.getMessage\n()), status);\n}\nprivate HttpStatus getStatus(HttpServletRequest request) {\nInteger statusCode = (Integer) request.getAttribute(\n\"javax.servlet.error.status_code\");\nif (statusCode == null) {\nreturn HttpStatus.INTERNAL_SERVER_ERROR;\n}\nreturn HttpStatus.valueOf(statusCode);\n}\n}\nIn the example above, if YourException is thrown by a controller defined in the same package as\nFooController, a json representation of the CustomerErrorType POJO will be used instead of the\nErrorAttributes representation.\nCustom error pages\nIf you want to display a custom HTML error page for a given status code, you add a file to an /error\nfolder. Error pages can either be static HTML (i.e. added under any of the static resource folders) or\nbuilt using templates. The name of the file should be the exact status code or a series mask.\nFor example, to map 404 to a static HTML file, your folder structure would look like this:\nsrc/\n+- main/\n+- java/\n| + <source code>\n+- resources/\n+- public/\n+- error/\n| +- 404.html\n+- <other public assets>\nTo map all 5xx errors using a FreeMarker template, you\u2019d have a structure like this:\n90\nsrc/\n+- main/\n+- java/\n| + <source code>\n+- resources/\n+- templates/\n+- error/\n| +- 5xx.ftl\n+- <other templates>\nFor more complex mappings you can also add beans that implement the ErrorViewResolver\ninterface.\npublic class MyErrorViewResolver implements ErrorViewResolver {\n@Override\npublic ModelAndView resolveErrorView(HttpServletRequest request,\nHttpStatus status, Map<String, Object> model) {\n// Use the request or status to optionally return a ModelAndView\nreturn ...\n}\n}\nYou can also use regular Spring MVC features like @ExceptionHandler methods and\n@ControllerAdvice. The ErrorController will then pick up any unhandled exceptions.\nMapping error pages outside of Spring MVC\nFor applications that aren\u2019t using Spring MVC, you can use the ErrorPageRegistrar interface to\ndirectly register ErrorPages. This abstraction works directly with the underlying embedded servlet\ncontainer and will work even if you don\u2019t have a Spring MVC DispatcherServlet.\n91\n@Bean\npublic ErrorPageRegistrar errorPageRegistrar(){\nreturn new MyErrorPageRegistrar();\n}\n// ...\nprivate static class MyErrorPageRegistrar implements ErrorPageRegistrar {\n@Override\npublic void registerErrorPages(ErrorPageRegistry registry) {\nregistry.addErrorPages(new ErrorPage(HttpStatus.BAD_REQUEST, \"/400\"));\n}\n}\nN.B. if you register an ErrorPage with a path that will end up being handled by a Filter (e.g. as is\ncommon with some non-Spring web frameworks, like Jersey and Wicket), then the Filter has to be\nexplicitly registered as an ERROR dispatcher, e.g.\n@Bean\npublic FilterRegistrationBean myFilter() {\nFilterRegistrationBean registration = new FilterRegistrationBean();\nregistration.setFilter(new MyFilter());\n...\nregistration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));\nreturn registration;\n}\n(the default FilterRegistrationBean does not include the ERROR dispatcher type).\nError Handling on WebSphere Application Server\nWhen deployed to a servlet container, a Spring Boot uses its error page filter to forward a request\nwith an error status to the appropriate error page. The request can only be forwarded to the correct\nerror page if the response has not already been committed. By default, WebSphere Application\nServer 8.0 and later commits the response upon successful completion of a servlet\u2019s service method.\nYou should disable this behaviour by setting com.ibm.ws.webcontainer.invokeFlushAfterService to\nfalse\n27.1.9. Spring HATEOAS\nIf you\u2019re developing a RESTful API that makes use of hypermedia, Spring Boot provides auto-\nconfiguration for Spring HATEOAS that works well with most applications. The auto-configuration\nreplaces the need to use @EnableHypermediaSupport and registers a number of beans to ease building\nhypermedia-based applications including a LinkDiscoverers (for client side support) and an\nObjectMapper configured to correctly marshal responses into the desired representation. The\nObjectMapper will be customized based on the spring.jackson.* properties or a\n92\nJackson2ObjectMapperBuilder bean if one exists.\nYou can take control of Spring HATEOAS\u2019s configuration by using @EnableHypermediaSupport. Note\nthat this will disable the ObjectMapper customization described above.\n27.1.10. CORS support\nCross-origin resource sharing (CORS) is a W3C specification implemented by most browsers that\nallows you to specify in a flexible way what kind of cross domain requests are authorized, instead\nof using some less secure and less powerful approaches like IFRAME or JSONP.\nAs of version 4.2, Spring MVC supports CORS out of the box. Using controller method CORS\nconfiguration with @CrossOrigin annotations in your Spring Boot application does not require any\nspecific configuration. Global CORS configuration can be defined by registering a WebMvcConfigurer\nbean with a customized addCorsMappings(CorsRegistry) method:\n@Configuration\npublic class MyConfiguration {\n@Bean\npublic WebMvcConfigurer corsConfigurer() {\nreturn new WebMvcConfigurerAdapter() {\n@Override\npublic void addCorsMappings(CorsRegistry registry) {\nregistry.addMapping(\"/api/**\");\n}\n};\n}\n}\n27.2. JAX-RS and Jersey\nIf you prefer the JAX-RS programming model for REST endpoints you can use one of the available\nimplementations instead of Spring MVC. Jersey 1.x and Apache CXF work quite well out of the box if\nyou just register their Servlet or Filter as a @Bean in your application context. Jersey 2.x has some\nnative Spring support so we also provide auto-configuration support for it in Spring Boot together\nwith a starter.\nTo get started with Jersey 2.x just include the spring-boot-starter-jersey as a dependency and then\nyou need one @Bean of type ResourceConfig in which you register all the endpoints:\n93\n@Component\npublic class JerseyConfig extends ResourceConfig {\npublic JerseyConfig() {\nregister(Endpoint.class);\n}\n}\nJersey\u2019s support for scanning executable archives is rather limited. For example,\nit cannot scan for endpoints in a package found in WEB-INF/classes when running\n\uf071\nan executable war file. To avoid this limitation, the packages method should not\nbe used and endpoints should be registered individually using the register\nmethod as shown above.\nYou can also register an arbitrary number of beans implementing ResourceConfigCustomizer for\nmore advanced customizations.\nAll the registered endpoints should be @Components with HTTP resource annotations (@GET etc.), e.g.\n@Component\n@Path(\"/hello\")\npublic class Endpoint {\n@GET\npublic String message() {\nreturn \"Hello\";\n}\n}\nSince the Endpoint is a Spring @Component its lifecycle is managed by Spring and you can @Autowired\ndependencies and inject external configuration with @Value. The Jersey servlet will be registered\nand mapped to /* by default. You can change the mapping by adding @ApplicationPath to your\nResourceConfig.\nBy default Jersey will be set up as a Servlet in a @Bean of type ServletRegistrationBean named\njerseyServletRegistration. By default, the servlet will be initialized lazily but you can customize it\nwith spring.jersey.servlet.load-on-startup .You can disable or override that bean by creating one\nof your own with the same name. You can also use a Filter instead of a Servlet by setting\nspring.jersey.type=filter (in which case the @Bean to replace or override is\njerseyFilterRegistration). The servlet has an @Order which you can set with\nspring.jersey.filter.order. Both the Servlet and the Filter registrations can be given init\nparameters using spring.jersey.init.* to specify a map of properties.\nThere is a Jersey sample so you can see how to set things up. There is also a Jersey 1.x sample. Note\nthat in the Jersey 1.x sample that the spring-boot maven plugin has been configured to unpack\n94\nsome Jersey jars so they can be scanned by the JAX-RS implementation (because the sample asks for\nthem to be scanned in its Filter registration). You may need to do the same if any of your JAX-RS\nresources are packaged as nested jars.\n27.3. Embedded servlet container support\nSpring Boot includes support for embedded Tomcat, Jetty, and Undertow servers. Most developers\nwill simply use the appropriate \u2018Starter\u2019 to obtain a fully configured instance. By default the\nembedded server will listen for HTTP requests on port 8080.\n27.3.1. Servlets, Filters, and listeners\nWhen using an embedded servlet container you can register Servlets, Filters and all the listeners\nfrom the Servlet spec (e.g. HttpSessionListener) either by using Spring beans or by scanning for\nServlet components.\nRegistering Servlets, Filters, and listeners as Spring beans\nAny Servlet, Filter or Servlet *Listener instance that is a Spring bean will be registered with the\nembedded container. This can be particularly convenient if you want to refer to a value from your\napplication.properties during configuration.\nBy default, if the context contains only a single Servlet it will be mapped to /. In the case of multiple\nServlet beans the bean name will be used as a path prefix. Filters will map to /*.\nIf convention-based mapping is not flexible enough you can use the ServletRegistrationBean,\nFilterRegistrationBean and ServletListenerRegistrationBean classes for complete control.\n27.3.2. Servlet Context Initialization\nEmbedded servlet containers will not directly execute the Servlet 3.0+\njavax.servlet.ServletContainerInitializer interface, or Spring\u2019s\norg.springframework.web.WebApplicationInitializer interface. This is an intentional design decision\nintended to reduce the risk that 3rd party libraries designed to run inside a war will break Spring\nBoot applications.\nIf you need to perform servlet context initialization in a Spring Boot application, you should\nregister a bean that implements the\norg.springframework.boot.context.embedded.ServletContextInitializer interface. The single\nonStartup method provides access to the ServletContext, and can easily be used as an adapter to an\nexisting WebApplicationInitializer if necessary.\nScanning for Servlets, Filters, and listeners\nWhen using an embedded container, automatic registration of @WebServlet, @WebFilter, and\n@WebListener annotated classes can be enabled using @ServletComponentScan.\n\uf0eb @ServletComponentScan will have no effect in a standalone container, where the\ncontainer\u2019s built-in discovery mechanisms will be used instead.\n95\n27.3.3. The EmbeddedWebApplicationContext\nUnder the hood Spring Boot uses a new type of ApplicationContext for embedded servlet container\nsupport. The EmbeddedWebApplicationContext is a special type of WebApplicationContext that\nbootstraps itself by searching for a single EmbeddedServletContainerFactory bean. Usually a\nTomcatEmbeddedServletContainerFactory, JettyEmbeddedServletContainerFactory, or\nUndertowEmbeddedServletContainerFactory will have been auto-configured.\nYou usually won\u2019t need to be aware of these implementation classes. Most\n\uf05a\napplications will be auto-configured and the appropriate ApplicationContext and\nEmbeddedServletContainerFactory will be created on your behalf.\n27.3.4. Customizing embedded servlet containers\nCommon servlet container settings can be configured using Spring Environment properties. Usually\nyou would define the properties in your application.properties file.\nCommon server settings include:\n\u2022 Network settings: listen port for incoming HTTP requests (server.port), interface address to\nbind to server.address, etc.\n\u2022 Session settings: whether the session is persistent (server.session.persistence), session timeout\n(server.session.timeout), location of session data (server.session.store-dir) and session-cookie\nconfiguration (server.session.cookie.*).\n\u2022 Error management: location of the error page (server.error.path), etc.\n\u2022 SSL\n\u2022 HTTP compression\nSpring Boot tries as much as possible to expose common settings but this is not always possible. For\nthose cases, dedicated namespaces offer server-specific customizations (see server.tomcat and\nserver.undertow). For instance, access logs can be configured with specific features of the embedded\nservlet container.\n\uf0eb\nSee the ServerProperties class for a complete list.\nProgrammatic customization\nIf you need to configure your embedded servlet container programmatically you can register a\nSpring bean that implements the EmbeddedServletContainerCustomizer interface.\nEmbeddedServletContainerCustomizer provides access to the ConfigurableEmbeddedServletContainer\nwhich includes numerous customization setter methods.\n96\nimport org.springframework.boot.context.embedded.*;\nimport org.springframework.stereotype.Component;\n@Component\npublic class CustomizationBean implements EmbeddedServletContainerCustomizer {\n@Override\npublic void customize(ConfigurableEmbeddedServletContainer container) {\ncontainer.setPort(9000);\n}\n}\nCustomizing ConfigurableEmbeddedServletContainer directly\nIf the above customization techniques are too limited, you can register the\nTomcatEmbeddedServletContainerFactory, JettyEmbeddedServletContainerFactory or\nUndertowEmbeddedServletContainerFactory bean yourself.\n@Bean\npublic EmbeddedServletContainerFactory servletContainer() {\nTomcatEmbeddedServletContainerFactory factory = new\nTomcatEmbeddedServletContainerFactory();\nfactory.setPort(9000);\nfactory.setSessionTimeout(10, TimeUnit.MINUTES);\nfactory.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, \"/notfound.html\"));\nreturn factory;\n}\nSetters are provided for many configuration options. Several protected method \u2018hooks\u2019 are also\nprovided should you need to do something more exotic. See the source code documentation for\ndetails.\n27.3.5. JSP limitations\nWhen running a Spring Boot application that uses an embedded servlet container (and is packaged\nas an executable archive), there are some limitations in the JSP support.\n\u2022 With Tomcat it should work if you use war packaging, i.e. an executable war will work, and will\nalso be deployable to a standard container (not limited to, but including Tomcat). An executable\njar will not work because of a hard coded file pattern in Tomcat.\n\u2022 With Jetty it should work if you use war packaging, i.e. an executable war will work, and will\nalso be deployable to any standard container.\n\u2022 Undertow does not support JSPs.\n\u2022 Creating a custom error.jsp page won\u2019t override the default view for error handling, custom\nerror pages should be used instead.\n97\nThere is a JSP sample so you can see how to set things up.\n98\nChapter 28. Security\nIf Spring Security is on the classpath then web applications will be secure by default with \u2018basic\u2019\nauthentication on all HTTP endpoints. To add method-level security to a web application you can\nalso add @EnableGlobalMethodSecurity with your desired settings. Additional information can be\nfound in the Spring Security Reference.\nThe default AuthenticationManager has a single user (\u2018user\u2019 username and random password,\nprinted at INFO level when the application starts up)\nUsing default security password: 78fa095d-3f4c-48b1-ad50-e24c31d5cf35\nIf you fine-tune your logging configuration, ensure that the\n\uf05a\norg.springframework.boot.autoconfigure.security category is set to log INFO\nmessages, otherwise the default password will not be printed.\nYou can change the password by providing a security.user.password. This and other useful\nproperties are externalized via SecurityProperties (properties prefix \"security\").\nThe default security configuration is implemented in SecurityAutoConfiguration and in the classes\nimported from there (SpringBootWebSecurityConfiguration for web security and\nAuthenticationManagerConfiguration for authentication configuration which is also relevant in non-\nweb applications). To switch off the default web application security configuration completely you\ncan add a bean with @EnableWebSecurity (this does not disable the authentication manager\nconfiguration or Actuator\u2019s security). To customize it you normally use external properties and\nbeans of type WebSecurityConfigurerAdapter (e.g. to add form-based login). To also switch off the\nauthentication manager configuration you can add a bean of type AuthenticationManager, or else\nconfigure the global AuthenticationManager by autowiring an AuthenticationManagerBuilder into a\nmethod in one of your @Configuration classes. There are several secure applications in the Spring\nBoot samples to get you started with common use cases.\nThe basic features you get out of the box in a web application are:\n\u2022 An AuthenticationManager bean with in-memory store and a single user (see\nSecurityProperties.User for the properties of the user).\n\u2022 Ignored (insecure) paths for common static resource locations (/css/**, /js/**, /images/**,\n/webjars/** and **/favicon.ico).\n\u2022 HTTP Basic security for all other endpoints.\n\u2022 Security events published to Spring\u2019s ApplicationEventPublisher (successful and unsuccessful\nauthentication and access denied).\n\u2022 Common low-level features (HSTS, XSS, CSRF, caching) provided by Spring Security are on by\ndefault.\nAll of the above can be switched on and off or modified using external properties (security.*). To\noverride the access rules without changing any other auto-configured features add a @Bean of type\nWebSecurityConfigurerAdapter with @Order(SecurityProperties.ACCESS_OVERRIDE_ORDER) and\n99\nconfigure it to meet your needs.\nBy default, a WebSecurityConfigurerAdapter will match any path. If you don\u2019t want\n\uf05a\nto completely override Spring Boot\u2019s auto-configured access rules, your adapter\nmust explicitly configure the paths that you do want to override.\n28.1. OAuth2\nIf you have spring-security-oauth2 on your classpath you can take advantage of some auto-\nconfiguration to make it easy to set up Authorization or Resource Server. For full details, see the\nSpring Security OAuth 2 Developers Guide.\n28.1.1. Authorization Server\nTo create an Authorization Server and grant access tokens you need to use\n@EnableAuthorizationServer and provide security.oauth2.client.client-id and\nsecurity.oauth2.client.client-secret] properties. The client will be registered for you in an in-\nmemory repository.\nHaving done that you will be able to use the client credentials to create an access token, for\nexample:\n$ curl client:secret@localhost:8080/oauth/token -d grant_type=password -d\nusername=user -d password=pwd\nThe basic auth credentials for the /token endpoint are the client-id and client-secret. The user\ncredentials are the normal Spring Security user details (which default in Spring Boot to \u201cuser\u201d and\na random password).\nTo switch off the auto-configuration and configure the Authorization Server features yourself just\nadd a @Bean of type AuthorizationServerConfigurer.\n28.1.2. Resource Server\nTo use the access token you need a Resource Server (which can be the same as the Authorization\nServer). Creating a Resource Server is easy, just add @EnableResourceServer and provide some\nconfiguration to allow the server to decode access tokens. If your application is also an\nAuthorization Server it already knows how to decode tokens, so there is nothing else to do. If your\napp is a standalone service then you need to give it some more configuration, one of the following\noptions:\n\u2022 security.oauth2.resource.user-info-uri to use the /me resource (e.g.\nhttps://uaa.run.pivotal.io/userinfo on PWS)\n\u2022 security.oauth2.resource.token-info-uri to use the token decoding endpoint (e.g.\nhttps://uaa.run.pivotal.io/check_token on PWS).\nIf you specify both the user-info-uri and the token-info-uri then you can set a flag to say that one\n100\nis preferred over the other (prefer-token-info=true is the default).\nAlternatively (instead of user-info-uri or token-info-uri) if the tokens are JWTs you can configure\na security.oauth2.resource.jwt.key-value to decode them locally (where the key is a verification\nkey). The verification key value is either a symmetric secret or PEM-encoded RSA public key. If you\ndon\u2019t have the key and it\u2019s public you can provide a URI where it can be downloaded (as a JSON\nobject with a \u201cvalue\u201d field) with security.oauth2.resource.jwt.key-uri. E.g. on PWS:\n$ curl https://uaa.run.pivotal.io/token_key\n{\"alg\":\"SHA256withRSA\",\"value\":\"-----BEGIN PUBLIC KEY-----\\nMIIBI...\\n-----END PUBLIC\nKEY-----\\n\"}\nIf you use the security.oauth2.resource.jwt.key-uri the authorization server\n\uf071\nneeds to be running when your application starts up. It will log a warning if it\ncan\u2019t find the key, and tell you what to do to fix it.\n28.2. Token Type in User Info\nGoogle, and certain other 3rd party identity providers, are more strict about the token type name\nthat is sent in the headers to the user info endpoint. The default is \u201cBearer\u201d which suits most\nproviders and matches the spec, but if you need to change it you can set\nsecurity.oauth2.resource.token-type.\n28.3. Customizing the User Info RestTemplate\nIf you have a user-info-uri, the resource server features use an OAuth2RestTemplate internally to\nfetch user details for authentication. This is provided as a qualified @Bean with id\nuserInfoRestTemplate, but you shouldn\u2019t need to know that to just use it. The default should be fine\nfor most providers, but occasionally you might need to add additional interceptors, or change the\nrequest authenticator (which is how the token gets attached to outgoing requests). To add a\ncustomization just create a bean of type UserInfoRestTemplateCustomizer - it has a single method\nthat will be called after the bean is created but before it is initialized. The rest template that is being\ncustomized here is only used internally to carry out authentication.\n101\nTo set an RSA key value in YAML use the \u201cpipe\u201d continuation marker to split it\nover multiple lines (\u201c|\u201d) and remember to indent the key value (it\u2019s a standard\nYAML language feature). Example:\nsecurity:\n\uf0eb oauth2:\nresource:\njwt:\nkeyValue: |\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC...\n-----END PUBLIC KEY-----\n28.3.1. Client\nTo make your web-app into an OAuth2 client you can simply add @EnableOAuth2Client and Spring\nBoot will create a OAuth2ClientContext and OAuth2ProtectedResourceDetails that are necessary to\ncreate an OAuth2RestOperations. Spring Boot does not automatically create such bean but you can\neasily create your own:\n@Bean\npublic OAuth2RestTemplate oauth2RestTemplate(OAuth2ClientContext oauth2ClientContext,\nOAuth2ProtectedResourceDetails details) {\nreturn new OAuth2RestTemplate(details, oauth2ClientContext);\n}\n\uf05a You may want to add a qualifier and review your configuration as more than one\nRestTemplate may be defined in your application.\nThis configuration uses security.oauth2.client.* as credentials (the same as you might be using in\nthe Authorization Server), but in addition it will need to know the authorization and token URIs in\nthe Authorization Server. For example:\napplication.yml\nsecurity:\noauth2:\nclient:\nclientId: bd1c0a783ccdd1c9b9e4\nclientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1\naccessTokenUri: https://github.com/login/oauth/access_token\nuserAuthorizationUri: https://github.com/login/oauth/authorize\nclientAuthenticationScheme: form\nAn application with this configuration will redirect to Github for authorization when you attempt\nto use the OAuth2RestTemplate. If you are already signed into Github you won\u2019t even notice that it\n102\nhas authenticated. These specific credentials will only work if your application is running on port\n8080 (register your own client app in Github or other provider for more flexibility).\nTo limit the scope that the client asks for when it obtains an access token you can set\nsecurity.oauth2.client.scope (comma separated or an array in YAML). By default the scope is\nempty and it is up to Authorization Server to decide what the defaults should be, usually depending\non the settings in the client registration that it holds.\nThere is also a setting for security.oauth2.client.client-authentication-scheme\nwhich defaults to \u201cheader\u201d (but you might need to set it to \u201cform\u201d if, like Github\n\uf05a\nfor instance, your OAuth2 provider doesn\u2019t like header authentication). In fact,\nthe security.oauth2.client.* properties are bound to an instance of\nAuthorizationCodeResourceDetails so all its properties can be specified.\nIn a non-web application you can still create an OAuth2RestOperations and it is still\nwired into the security.oauth2.client.* configuration. In this case it is a \u201cclient\n\uf0eb credentials token grant\u201d you will be asking for if you use it (and there is no need\nto use @EnableOAuth2Client or @EnableOAuth2Sso). To prevent that infrastructure to\nbe defined, just remove the security.oauth2.client.client-id from your\nconfiguration (or make it the empty string).\n28.3.2. Single Sign On\nAn OAuth2 Client can be used to fetch user details from the provider (if such features are available)\nand then convert them into an Authentication token for Spring Security. The Resource Server above\nsupport this via the user-info-uri property This is the basis for a Single Sign On (SSO) protocol\nbased on OAuth2, and Spring Boot makes it easy to participate by providing an annotation\n@EnableOAuth2Sso. The Github client above can protect all its resources and authenticate using the\nGithub /user/ endpoint, by adding that annotation and declaring where to find the endpoint (in\naddition to the security.oauth2.client.* configuration already listed above):\napplication.yml\nsecurity:\noauth2:\n...\nresource:\nuserInfoUri: https://api.github.com/user\npreferTokenInfo: false\nSince all paths are secure by default, there is no \u201chome\u201d page that you can show to unauthenticated\nusers and invite them to login (by visiting the /login path, or the path specified by\nsecurity.oauth2.sso.login-path).\nTo customize the access rules or paths to protect, so you can add a \u201chome\u201d page for instance,\n@EnableOAuth2Sso can be added to a WebSecurityConfigurerAdapter and the annotation will cause it to\nbe decorated and enhanced with the necessary pieces to get the /login path working. For example,\nhere we simply allow unauthenticated access to the home page at \"/\" and keep the default for\n103\neverything else:\n@Configuration\npublic class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {\n@Override\npublic void init(WebSecurity web) {\nweb.ignore(\"/\");\n}\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\nhttp.antMatcher(\"/**\").authorizeRequests().anyRequest().authenticated();\n}\n}\n28.4. Actuator Security\nIf the Actuator is also in use, you will find:\n\u2022 The management endpoints are secure even if the application endpoints are insecure.\n\u2022 Security events are transformed into AuditEvents and published to the AuditService.\n\u2022 The default user will have the ADMIN role as well as the USER role.\nThe Actuator security features can be modified using external properties (management.security.*).\nTo override the application access rules add a @Bean of type WebSecurityConfigurerAdapter and use\n@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER) if you don\u2019t want to override the actuator access\nrules, or @Order(ManagementServerProperties.ACCESS_OVERRIDE_ORDER) if you do want to override the\nactuator access rules.\n104\nChapter 29. Working with SQL databases\nThe Spring Framework provides extensive support for working with SQL databases. From direct\nJDBC access using JdbcTemplate to complete \u2018object relational mapping\u2019 technologies such as\nHibernate. Spring Data provides an additional level of functionality, creating Repository\nimplementations directly from interfaces and using conventions to generate queries from your\nmethod names.\n29.1. Configure a DataSource\nJava\u2019s javax.sql.DataSource interface provides a standard method of working with database\nconnections. Traditionally a DataSource uses a URL along with some credentials to establish a\ndatabase connection.\n29.1.1. Embedded Database Support\nIt\u2019s often convenient to develop applications using an in-memory embedded database. Obviously,\nin-memory databases do not provide persistent storage; you will need to populate your database\nwhen your application starts and be prepared to throw away data when your application ends.\n\uf0eb\nThe \u2018How-to\u2019 section includes a section on how to initialize a database\nSpring Boot can auto-configure embedded H2, HSQL and Derby databases. You don\u2019t need to\nprovide any connection URLs, simply include a build dependency to the embedded database that\nyou want to use.\nIf you are using this feature in your tests, you may notice that the same database\nis reused by your whole test suite regardless of the number of application\n\uf05a\ncontexts that you use. If you want to make sure that each context has a separate\nembedded database, you should set spring.datasource.generate-unique-name to\ntrue.\nFor example, typical POM dependencies would be:\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n<dependency>\n<groupId>org.hsqldb</groupId>\n<artifactId>hsqldb</artifactId>\n<scope>runtime</scope>\n</dependency>\n105\nYou need a dependency on spring-jdbc for an embedded database to be auto-\n\uf05a\nconfigured. In this example it\u2019s pulled in transitively via spring-boot-starter-\ndata-jpa.\nIf, for whatever reason, you do configure the connection URL for an embedded\ndatabase, care should be taken to ensure that the database\u2019s automatic shutdown\nis disabled. If you\u2019re using H2 you should use DB_CLOSE_ON_EXIT=FALSE to do so. If\n\uf0eb\nyou\u2019re using HSQLDB, you should ensure that shutdown=true is not used. Disabling\nthe database\u2019s automatic shutdown allows Spring Boot to control when the\ndatabase is closed, thereby ensuring that it happens once access to the database is\nno longer needed.\n29.1.2. Connection to a production database\nProduction database connections can also be auto-configured using a pooling DataSource. Here\u2019s the\nalgorithm for choosing a specific implementation:\n\u2022 We prefer the Tomcat pooling DataSource for its performance and concurrency, so if that is\navailable we always choose it.\n\u2022 Otherwise, if HikariCP is available we will use it.\n\u2022 If neither the Tomcat pooling datasource nor HikariCP are available and if Commons DBCP2 is\navailable we will use it.\nIf you use the spring-boot-starter-jdbc or spring-boot-starter-data-jpa \u2018starters\u2019 you will\nautomatically get a dependency to tomcat-jdbc.\nYou can bypass that algorithm completely and specify the connection pool to use\n\uf05a via the spring.datasource.type property. This is especially important if you are\nrunning your application in a Tomcat container as tomcat-jdbc is provided by\ndefault.\n\uf0eb Additional connection pools can always be configured manually. If you define\nyour own DataSource bean, auto-configuration will not occur.\nDataSource configuration is controlled by external configuration properties in spring.datasource.*.\nFor example, you might declare the following section in application.properties:\nspring.datasource.url=jdbc:mysql://localhost/test\nspring.datasource.username=dbuser\nspring.datasource.password=dbpass\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\uf05a You should at least specify the url using the spring.datasource.url property or\nSpring Boot will attempt to auto-configure an embedded database.\n106\n\uf0eb You often won\u2019t need to specify the driver-class-name since Spring boot can\ndeduce it for most databases from the url.\nFor a pooling DataSource to be created we need to be able to verify that a valid\n\uf05a Driver class is available, so we check for that before doing anything. I.e. if you set\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver then that class has to\nbe loadable.\nSee DataSourceProperties for more of the supported options. These are the standard options that\nwork regardless of the actual implementation. It is also possible to fine-tune implementation-\nspecific settings using their respective prefix (spring.datasource.tomcat.*,\nspring.datasource.hikari.*, and spring.datasource.dbcp2.*). Refer to the documentation of the\nconnection pool implementation you are using for more details.\nFor instance, if you are using the Tomcat connection pool you could customize many additional\nsettings:\n# Number of ms to wait before throwing an exception if no connection is available.\nspring.datasource.tomcat.max-wait=10000\n# Maximum number of active connections that can be allocated from this pool at the\nsame time.\nspring.datasource.tomcat.max-active=50\n# Validate the connection before borrowing it from the pool.\nspring.datasource.tomcat.test-on-borrow=true\n29.1.3. Connection to a JNDI DataSource\nIf you are deploying your Spring Boot application to an Application Server you might want to\nconfigure and manage your DataSource using your Application Servers built-in features and access\nit using JNDI.\nThe spring.datasource.jndi-name property can be used as an alternative to the\nspring.datasource.url, spring.datasource.username and spring.datasource.password properties to\naccess the DataSource from a specific JNDI location. For example, the following section in\napplication.properties shows how you can access a JBoss AS defined DataSource:\nspring.datasource.jndi-name=java:jboss/datasources/customers\n29.2. Using JdbcTemplate\nSpring\u2019s JdbcTemplate and NamedParameterJdbcTemplate classes are auto-configured and you can\n@Autowire them directly into your own beans:\n107\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n@Component\npublic class MyBean {\nprivate final JdbcTemplate jdbcTemplate;\n@Autowired\npublic MyBean(JdbcTemplate jdbcTemplate) {\nthis.jdbcTemplate = jdbcTemplate;\n}\n// ...\n}\n29.3. JPA and \u2018Spring Data\u2019\nThe Java Persistence API is a standard technology that allows you to \u2018map\u2019 objects to relational\ndatabases. The spring-boot-starter-data-jpa POM provides a quick way to get started. It provides\nthe following key dependencies:\n\u2022 Hibernate \u2014 One of the most popular JPA implementations.\n\u2022 Spring Data JPA \u2014 Makes it easy to implement JPA-based repositories.\n\u2022 Spring ORMs \u2014 Core ORM support from the Spring Framework.\nWe won\u2019t go into too many details of JPA or Spring Data here. You can follow the\n\uf0eb\n\u2018Accessing Data with JPA\u2019 guide from spring.io and read the Spring Data JPA and\nHibernate reference documentation.\nBy default, Spring Boot uses Hibernate 5.0.x. However it\u2019s also possible to use\n\uf05a\n4.3.x or 5.2.x if you wish. Please refer to the Hibernate 4 and Hibernate 5.2\nsamples to see how to do so.\n29.3.1. Entity Classes\nTraditionally, JPA \u2018Entity\u2019 classes are specified in a persistence.xml file. With Spring Boot this file is\nnot necessary and instead \u2018Entity Scanning\u2019 is used. By default all packages below your main\nconfiguration class (the one annotated with @EnableAutoConfiguration or @SpringBootApplication)\nwill be searched.\nAny classes annotated with @Entity, @Embeddable or @MappedSuperclass will be considered. A typical\nentity class would look something like this:\n108\npackage com.example.myapp.domain;\nimport java.io.Serializable;\nimport javax.persistence.*;\n@Entity\npublic class City implements Serializable {\n@Id\n@GeneratedValue\nprivate Long id;\n@Column(nullable = false)\nprivate String name;\n@Column(nullable = false)\nprivate String state;\n// ... additional members, often include @OneToMany mappings\nprotected City() {\n// no-args constructor required by JPA spec\n// this one is protected since it shouldn't be used directly\n}\npublic City(String name, String state) {\nthis.name = name;\nthis.country = country;\n}\npublic String getName() {\nreturn this.name;\n}\npublic String getState() {\nreturn this.state;\n}\n// ... etc\n}\n\uf0eb You can customize entity scanning locations using the @EntityScan annotation. See\nthe Separate @Entity definitions from Spring configuration how-to.\n29.3.2. Spring Data JPA Repositories\nSpring Data JPA repositories are interfaces that you can define to access data. JPA queries are\ncreated automatically from your method names. For example, a CityRepository interface might\n109\ndeclare a findAllByState(String state) method to find all cities in a given state.\nFor more complex queries you can annotate your method using Spring Data\u2019s Query annotation.\nSpring Data repositories usually extend from the Repository or CrudRepository interfaces. If you are\nusing auto-configuration, repositories will be searched from the package containing your main\nconfiguration class (the one annotated with @EnableAutoConfiguration or @SpringBootApplication)\ndown.\nHere is a typical Spring Data repository:\npackage com.example.myapp.domain;\nimport org.springframework.data.domain.*;\nimport org.springframework.data.repository.*;\npublic interface CityRepository extends Repository<City, Long> {\nPage<City> findAll(Pageable pageable);\nCity findByNameAndCountryAllIgnoringCase(String name, String country);\n}\n\uf0eb We have barely scratched the surface of Spring Data JPA. For complete details\ncheck their reference documentation.\n29.3.3. Creating and dropping JPA databases\nBy default, JPA databases will be automatically created only if you use an embedded database (H2,\nHSQL or Derby). You can explicitly configure JPA settings using spring.jpa.* properties. For\nexample, to create and drop tables you can add the following to your application.properties.\nspring.jpa.hibernate.ddl-auto=create-drop\nHibernate\u2019s own internal property name for this (if you happen to remember it\n\uf05a better) is hibernate.hbm2ddl.auto. You can set it, along with other Hibernate\nnative properties, using spring.jpa.properties.* (the prefix is stripped before\nadding them to the entity manager). Example:\nspring.jpa.properties.hibernate.globally_quoted_identifiers=true\npasses hibernate.globally_quoted_identifiers to the Hibernate entity manager.\nBy default the DDL execution (or validation) is deferred until the ApplicationContext has started.\nThere is also a spring.jpa.generate-ddl flag, but it is not used if Hibernate autoconfig is active\n110\nbecause the ddl-auto settings are more fine-grained.\n29.4. Using H2\u2019s web console\nThe H2 database provides a browser-based console that Spring Boot can auto-configure for you. The\nconsole will be auto-configured when the following conditions are met:\n\u2022 You are developing a web application\n\u2022 com.h2database:h2 is on the classpath\n\u2022 You are using Spring Boot\u2019s developer tools\nIf you are not using Spring Boot\u2019s developer tools, but would still like to make use\nof H2\u2019s console, then you can do so by configuring the spring.h2.console.enabled\n\uf0eb\nproperty with a value of true. The H2 console is only intended for use during\ndevelopment so care should be taken to ensure that spring.h2.console.enabled is\nnot set to true in production.\n29.4.1. Changing the H2 console\u2019s path\nBy default the console will be available at /h2-console. You can customize the console\u2019s path using\nthe spring.h2.console.path property.\n29.4.2. Securing the H2 console\nWhen Spring Security is on the classpath and basic auth is enabled, the H2 console will be\nautomatically secured using basic auth. The following properties can be used to customize the\nsecurity configuration:\nsecurity.user.role\n\u2022\nsecurity.basic.authorize-mode\n\u2022\nsecurity.basic.enabled\n\u2022\n29.5. Using jOOQ\nJava Object Oriented Querying (jOOQ) is a popular product from Data Geekery which generates\nJava code from your database, and lets you build type safe SQL queries through its fluent API. Both\nthe commercial and open source editions can be used with Spring Boot.\n29.5.1. Code Generation\nIn order to use jOOQ type-safe queries, you need to generate Java classes from your database\nschema. You can follow the instructions in the jOOQ user manual. If you are using the jooq-codegen-\nmaven plugin (and you also use the spring-boot-starter-parent \u201cparent POM\u201d) you can safely omit\nthe plugin\u2019s <version> tag. You can also use Spring Boot defined version variables (e.g. h2.version) to\ndeclare the plugin\u2019s database dependency. Here\u2019s an example:\n111\n<plugin>\n<groupId>org.jooq</groupId>\n<artifactId>jooq-codegen-maven</artifactId>\n<executions>\n...\n</executions>\n<dependencies>\n<dependency>\n<groupId>com.h2database</groupId>\n<artifactId>h2</artifactId>\n<version>${h2.version}</version>\n</dependency>\n</dependencies>\n<configuration>\n<jdbc>\n<driver>org.h2.Driver</driver>\n<url>jdbc:h2:~/yourdatabase</url>\n</jdbc>\n<generator>\n...\n</generator>\n</configuration>\n</plugin>\n29.5.2. Using DSLContext\nThe fluent API offered by jOOQ is initiated via the org.jooq.DSLContext interface. Spring Boot will\nauto-configure a DSLContext as a Spring Bean and connect it to your application DataSource. To use\nthe DSLContext you can just @Autowire it:\n@Component\npublic class JooqExample implements CommandLineRunner {\nprivate final DSLContext create;\n@Autowired\npublic JooqExample(DSLContext dslContext) {\nthis.create = dslContext;\n}\n}\n\uf0eb The jOOQ manual tends to use a variable named create to hold the DSLContext,\nwe\u2019ve done the same for this example.\nYou can then use the DSLContext to construct your queries:\n112\npublic List<GregorianCalendar> authorsBornAfter1980() {\nreturn this.create.selectFrom(AUTHOR)\n.where(AUTHOR.DATE_OF_BIRTH.greaterThan(new GregorianCalendar(1980, 0, 1)))\n.fetch(AUTHOR.DATE_OF_BIRTH);\n}\n29.5.3. Customizing jOOQ\nYou can customize the SQL dialect used by jOOQ by setting spring.jooq.sql-dialect in your\napplication.properties. For example, to specify Postgres you would add:\nspring.jooq.sql-dialect=Postgres\nMore advanced customizations can be achieved by defining your own @Bean definitions which will\nbe used when the jOOQ Configuration is created. You can define beans for the following jOOQ\nTypes:\nConnectionProvider\n\u2022\nTransactionProvider\n\u2022\nRecordMapperProvider\n\u2022\nRecordListenerProvider\n\u2022\nExecuteListenerProvider\n\u2022\nVisitListenerProvider\n\u2022\nYou can also create your own org.jooq.Configuration @Bean if you want to take complete control of\nthe jOOQ configuration.\n113\nChapter 30. Working with NoSQL\ntechnologies\nSpring Data provides additional projects that help you access a variety of NoSQL technologies\nincluding MongoDB, Neo4J, Elasticsearch, Solr, Redis, Gemfire, Couchbase and Cassandra. Spring\nBoot provides auto-configuration for Redis, MongoDB, Neo4j, Elasticsearch, Solr and Cassandra; you\ncan make use of the other projects, but you will need to configure them yourself. Refer to the\nappropriate reference documentation at projects.spring.io/spring-data.\n30.1. Redis\nRedis is a cache, message broker and richly-featured key-value store. Spring Boot offers basic auto-\nconfiguration for the Jedis client library and abstractions on top of it provided by Spring Data Redis.\nThere is a spring-boot-starter-data-redis \u2018Starter\u2019 for collecting the dependencies in a convenient\nway.\n30.1.1. Connecting to Redis\nYou can inject an auto-configured RedisConnectionFactory, StringRedisTemplate or vanilla\nRedisTemplate instance as you would any other Spring Bean. By default the instance will attempt to\nconnect to a Redis server using localhost:6379:\n@Component\npublic class MyBean {\nprivate StringRedisTemplate template;\n@Autowired\npublic MyBean(StringRedisTemplate template) {\nthis.template = template;\n}\n// ...\n}\nIf you add a @Bean of your own of any of the auto-configured types it will replace the default (except\nin the case of RedisTemplate the exclusion is based on the bean name \u2018redisTemplate\u2019 not its type). If\ncommons-pool2 is on the classpath you will get a pooled connection factory by default.\n30.2. MongoDB\nMongoDB is an open-source NoSQL document database that uses a JSON-like schema instead of\ntraditional table-based relational data. Spring Boot offers several conveniences for working with\nMongoDB, including the spring-boot-starter-data-mongodb \u2018Starter\u2019.\n114\n30.2.1. Connecting to a MongoDB database\nYou can inject an auto-configured org.springframework.data.mongodb.MongoDbFactory to access\nMongo databases. By default the instance will attempt to connect to a MongoDB server using the\nURL mongodb://localhost/test:\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport com.mongodb.DB;\n@Component\npublic class MyBean {\nprivate final MongoDbFactory mongo;\n@Autowired\npublic MyBean(MongoDbFactory mongo) {\nthis.mongo = mongo;\n}\n// ...\npublic void example() {\nDB db = mongo.getDb();\n// ...\n}\n}\nYou can set spring.data.mongodb.uri property to change the URL and configure additional settings\nsuch as the replica set:\nspring.data.mongodb.uri=mongodb://user:secret@mongo1.example.com:12345,mongo2.example.\ncom:23456/test\nAlternatively, as long as you\u2019re using Mongo 2.x, specify a host/port. For example, you might declare\nthe following in your application.properties:\nspring.data.mongodb.host=mongoserver\nspring.data.mongodb.port=27017\nspring.data.mongodb.host and spring.data.mongodb.port are not supported if\n\uf05a\nyou\u2019re using the Mongo 3.0 Java driver. In such cases, spring.data.mongodb.uri\nshould be used to provide all of the configuration.\n\uf0eb If spring.data.mongodb.port is not specified the default of 27017 is used. You could\nsimply delete this line from the sample above.\n115\n\uf0eb If you aren\u2019t using Spring Data Mongo you can inject com.mongodb.Mongo beans\ninstead of using MongoDbFactory.\nYou can also declare your own MongoDbFactory or Mongo bean if you want to take complete control of\nestablishing the MongoDB connection.\n30.2.2. MongoTemplate\nSpring Data Mongo provides a MongoTemplate class that is very similar in its design to Spring\u2019s\nJdbcTemplate. As with JdbcTemplate Spring Boot auto-configures a bean for you to simply inject:\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.stereotype.Component;\n@Component\npublic class MyBean {\nprivate final MongoTemplate mongoTemplate;\n@Autowired\npublic MyBean(MongoTemplate mongoTemplate) {\nthis.mongoTemplate = mongoTemplate;\n}\n// ...\n}\nSee the MongoOperations Javadoc for complete details.\n30.2.3. Spring Data MongoDB repositories\nSpring Data includes repository support for MongoDB. As with the JPA repositories discussed\nearlier, the basic principle is that queries are constructed for you automatically based on method\nnames.\nIn fact, both Spring Data JPA and Spring Data MongoDB share the same common infrastructure; so\nyou could take the JPA example from earlier and, assuming that City is now a Mongo data class\nrather than a JPA @Entity, it will work in the same way.\n116\npackage com.example.myapp.domain;\nimport org.springframework.data.domain.*;\nimport org.springframework.data.repository.*;\npublic interface CityRepository extends Repository<City, Long> {\nPage<City> findAll(Pageable pageable);\nCity findByNameAndCountryAllIgnoringCase(String name, String country);\n}\n\uf0eb For complete details of Spring Data MongoDB, including its rich object mapping\ntechnologies, refer to their reference documentation.\n30.2.4. Embedded Mongo\nSpring Boot offers auto-configuration for Embedded Mongo. To use it in your Spring Boot\napplication add a dependency on de.flapdoodle.embed:de.flapdoodle.embed.mongo.\nThe port that Mongo will listen on can be configured using the spring.data.mongodb.port property.\nTo use a randomly allocated free port use a value of zero. The MongoClient created by\nMongoAutoConfiguration will be automatically configured to use the randomly allocated port.\nIf you have SLF4J on the classpath, output produced by Mongo will be automatically routed to a\nlogger named org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongo.\nYou can declare your own IMongodConfig and IRuntimeConfig beans to take control of the Mongo\ninstance\u2019s configuration and logging routing.\n30.3. Neo4j\nNeo4j is an open-source NoSQL graph database that uses a rich data model of nodes related by first\nclass relationships which is better suited for connected big data than traditional rdbms approaches.\nSpring Boot offers several conveniences for working with Neo4j, including the spring-boot-starter-\ndata-neo4j \u2018Starter\u2019.\n30.3.1. Connecting to a Neo4j database\nYou can inject an auto-configured Neo4jSession, Session or Neo4jOperations instance as you would\nany other Spring Bean. By default the instance will attempt to connect to a Neo4j server using\nlocalhost:7474:\n117\n@Component\npublic class MyBean {\nprivate final Neo4jTemplate neo4jTemplate;\n@Autowired\npublic MyBean(Neo4jTemplate neo4jTemplate) {\nthis.neo4jTemplate = neo4jTemplate;\n}\n// ...\n}\nYou can take full control of the configuration by adding a org.neo4j.ogm.config.Configuration @Bean\nof your own. Also, adding a @Bean of type Neo4jOperations disables the auto-configuration.\nYou can configure the user and credentials to use via the spring.data.neo4j.* properties:\nspring.data.neo4j.uri=http://my-server:7474\nspring.data.neo4j.username=neo4j\nspring.data.neo4j.password=secret\n30.3.2. Using the embedded mode\nIf you add org.neo4j:neo4j-ogm-embedded-driver to the dependencies of your application, Spring\nBoot will automatically configure an in-process embedded instance of Neo4j that will not persist\nany data when your application shuts down. You can explicitly disable that mode using\nspring.data.neo4j.embedded.enabled=false. You can also enable persistence for the embedded mode:\nspring.data.neo4j.uri=file://var/tmp/graph.db\n30.3.3. Neo4jSession\nBy default, the lifetime of the session is scoped to the application. If you are running a web\napplication, you can change it so that the session is bound to the thread for the entire processing of\nthe request (i.e. the \"Open Session in View\" pattern):\nspring.data.neo4j.open-in-view=true\n30.3.4. Spring Data Neo4j repositories\nSpring Data includes repository support for Neo4j.\nIn fact, both Spring Data JPA and Spring Data Neo4j share the same common infrastructure; so you\n118\ncould take the JPA example from earlier and, assuming that City is now a Neo4j OGM @NodeEntity\nrather than a JPA @Entity, it will work in the same way.\n\uf0eb\nYou can customize entity scanning locations using the @EntityScan annotation.\nTo enable repository support (and optionally support for @Transactional), add the following two\nannotations to your Spring configuration:\n@EnableNeo4jRepositories(basePackages = \"com.example.myapp.repository\")\n@EnableTransactionManagement\n30.3.5. Repository example\npackage com.example.myapp.domain;\nimport org.springframework.data.domain.*;\nimport org.springframework.data.repository.*;\npublic interface CityRepository extends GraphRepository<City> {\nPage<City> findAll(Pageable pageable);\nCity findByNameAndCountry(String name, String country);\n}\n\uf0eb For complete details of Spring Data Neo4j, including its rich object mapping\ntechnologies, refer to their reference documentation.\n30.4. Gemfire\nSpring Data Gemfire provides convenient Spring-friendly tools for accessing the Pivotal Gemfire\ndata management platform. There is a spring-boot-starter-data-gemfire \u2018Starter\u2019 for collecting the\ndependencies in a convenient way. There is currently no auto-configuration support for Gemfire,\nbut you can enable Spring Data Repositories with a single annotation (@EnableGemfireRepositories).\n30.5. Solr\nApache Solr is a search engine. Spring Boot offers basic auto-configuration for the Solr 5 client\nlibrary and abstractions on top of it provided by Spring Data Solr. There is a spring-boot-starter-\ndata-solr \u2018Starter\u2019 for collecting the dependencies in a convenient way.\n30.5.1. Connecting to Solr\nYou can inject an auto-configured SolrClient instance as you would any other Spring bean. By\n119\ndefault the instance will attempt to connect to a server using localhost:8983/solr:\n@Component\npublic class MyBean {\nprivate SolrClient solr;\n@Autowired\npublic MyBean(SolrClient solr) {\nthis.solr = solr;\n}\n// ...\n}\nIf you add a @Bean of your own of type SolrClient it will replace the default.\n30.5.2. Spring Data Solr repositories\nSpring Data includes repository support for Apache Solr. As with the JPA repositories discussed\nearlier, the basic principle is that queries are constructed for you automatically based on method\nnames.\nIn fact, both Spring Data JPA and Spring Data Solr share the same common infrastructure; so you\ncould take the JPA example from earlier and, assuming that City is now a @SolrDocument class rather\nthan a JPA @Entity, it will work in the same way.\n\uf0eb\nFor complete details of Spring Data Solr, refer to their reference documentation.\n30.6. Elasticsearch\nElasticsearch is an open source, distributed, real-time search and analytics engine. Spring Boot\noffers basic auto-configuration for the Elasticsearch and abstractions on top of it provided by\nSpring Data Elasticsearch. There is a spring-boot-starter-data-elasticsearch \u2018Starter\u2019 for collecting\nthe dependencies in a convenient way. Spring Boot also supports Jest.\n30.6.1. Connecting to Elasticsearch using Jest\nIf you have Jest on the classpath, you can inject an auto-configured JestClient targeting\nlocalhost:9200 by default. You can further tune how the client is configured:\nspring.elasticsearch.jest.uris=http://search.example.com:9200\nspring.elasticsearch.jest.read-timeout=10000\nspring.elasticsearch.jest.username=user\nspring.elasticsearch.jest.password=secret\n120\nTo take full control over the registration, define a JestClient bean.\n30.6.2. Connecting to Elasticsearch using Spring Data\nYou can inject an auto-configured ElasticsearchTemplate or Elasticsearch Client instance as you\nwould any other Spring Bean. By default the instance will embed a local in-memory server (a Node\nin Elasticsearch terms) and use the current working directory as the home directory for the server.\nIn this setup, the first thing to do is to tell Elasticsearch where to store its files:\nspring.data.elasticsearch.properties.path.home=/foo/bar\nAlternatively, you can switch to a remote server (i.e. a TransportClient) by setting\nspring.data.elasticsearch.cluster-nodes to a comma-separated \u2018host:port\u2019 list.\nspring.data.elasticsearch.cluster-nodes=localhost:9300\n@Component\npublic class MyBean {\nprivate ElasticsearchTemplate template;\n@Autowired\npublic MyBean(ElasticsearchTemplate template) {\nthis.template = template;\n}\n// ...\n}\nIf you add a @Bean of your own of type ElasticsearchTemplate it will replace the default.\n30.6.3. Spring Data Elasticsearch repositories\nSpring Data includes repository support for Elasticsearch. As with the JPA repositories discussed\nearlier, the basic principle is that queries are constructed for you automatically based on method\nnames.\nIn fact, both Spring Data JPA and Spring Data Elasticsearch share the same common infrastructure;\nso you could take the JPA example from earlier and, assuming that City is now an Elasticsearch\n@Document class rather than a JPA @Entity, it will work in the same way.\n\uf0eb For complete details of Spring Data Elasticsearch, refer to their reference\ndocumentation.\n121\n30.7. Cassandra\nCassandra is an open source, distributed database management system designed to handle large\namounts of data across many commodity servers. Spring Boot offers auto-configuration for\nCassandra and abstractions on top of it provided by Spring Data Cassandra. There is a spring-boot-\nstarter-data-cassandra \u2018Starter\u2019 for collecting the dependencies in a convenient way.\n30.7.1. Connecting to Cassandra\nYou can inject an auto-configured CassandraTemplate or a Cassandra Session instance as you would\nwith any other Spring Bean. The spring.data.cassandra.* properties can be used to customize the\nconnection. Generally you will provide keyspace-name and contact-points properties:\nspring.data.cassandra.keyspace-name=mykeyspace\nspring.data.cassandra.contact-points=cassandrahost1,cassandrahost2\n@Component\npublic class MyBean {\nprivate CassandraTemplate template;\n@Autowired\npublic MyBean(CassandraTemplate template) {\nthis.template = template;\n}\n// ...\n}\nIf you add a @Bean of your own of type CassandraTemplate it will replace the default.\n30.7.2. Spring Data Cassandra repositories\nSpring Data includes basic repository support for Cassandra. Currently this is more limited than the\nJPA repositories discussed earlier, and will need to annotate finder methods with @Query.\n\uf0eb For complete details of Spring Data Cassandra, refer to their reference\ndocumentation.\n30.8. Couchbase\nCouchbase is an open-source, distributed multi-model NoSQL document-oriented database that is\noptimized for interactive applications. Spring Boot offers auto-configuration for Couchbase and\nabstractions on top of it provided by Spring Data Couchbase. There is a spring-boot-starter-data-\ncouchbase \u2018Starter\u2019 for collecting the dependencies in a convenient way.\n122\n30.8.1. Connecting to Couchbase\nYou can very easily get a Bucket and Cluster by adding the Couchbase SDK and some configuration.\nThe spring.couchbase.* properties can be used to customize the connection. Generally you will\nprovide the bootstrap hosts, bucket name and password:\nspring.couchbase.bootstrap-hosts=my-host-1,192.168.1.123\nspring.couchbase.bucket.name=my-bucket\nspring.couchbase.bucket.password=secret\nYou need to provide at least the bootstrap host(s), in which case the bucket name\n\uf0eb is default and the password is the empty String. Alternatively, you can define\nyour own org.springframework.data.couchbase.config.CouchbaseConfigurer @Bean\nto take control over the whole configuration.\nIt is also possible to customize some of the CouchbaseEnvironment settings. For instance the following\nconfiguration changes the timeout to use to open a new Bucket and enables SSL support:\nspring.couchbase.env.timeouts.connect=3000\nspring.couchbase.env.ssl.key-store=/location/of/keystore.jks\nspring.couchbase.env.ssl.key-store-password=secret\nCheck the spring.couchbase.env.* properties for more details.\n30.8.2. Spring Data Couchbase repositories\nSpring Data includes repository support for Couchbase. For complete details of Spring Data\nCouchbase, refer to their reference documentation.\nYou can inject an auto-configured CouchbaseTemplate instance as you would with any other Spring\nBean as long as a default CouchbaseConfigurer is available (that happens when you enable the\ncouchbase support as explained above). If you want to bypass the auto-configuration for Spring\nData Couchbase, provide your own\norg.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration implementation.\n123\n@Component\npublic class MyBean {\nprivate final CouchbaseTemplate template;\n@Autowired\npublic MyBean(CouchbaseTemplate template) {\nthis.template = template;\n}\n// ...\n}\nIf you add a @Bean of your own of type CouchbaseTemplate named couchbaseTemplate it will replace\nthe default.\n124\nChapter 31. Caching\nThe Spring Framework provides support for transparently adding caching to an application. At its\ncore, the abstraction applies caching to methods, reducing thus the number of executions based on\nthe information available in the cache. The caching logic is applied transparently, without any\ninterference to the invoker.\n\uf05a\nCheck the relevant section of the Spring Framework reference for more details.\nIn a nutshell, adding caching to an operation of your service is as easy as adding the relevant\nannotation to its method:\nimport javax.cache.annotation.CacheResult;\nimport org.springframework.stereotype.Component;\n@Component\npublic class MathService {\n@CacheResult\npublic int computePiDecimal(int i) {\n// ...\n}\n}\nYou can either use the standard JSR-107 (JCache) annotations or Spring\u2019s own\n\uf05a\ncaching annotations transparently. We strongly advise you however to not mix\nand match them.\n\uf0eb\nIt is also possible to update or evict data from the cache transparently.\n31.1. Supported cache providers\nThe cache abstraction does not provide an actual store and relies on abstraction materialized by the\norg.springframework.cache.Cache and org.springframework.cache.CacheManager interfaces. Spring\nBoot auto-configures a suitable CacheManager according to the implementation as long as the caching\nsupport is enabled via the @EnableCaching annotation.\n\uf05a If you are using the cache infrastructure with beans that are not interface-based,\nmake sure to enable the proxyTargetClass attribute of @EnableCaching.\n125\nUse the spring-boot-starter-cache \u2018Starter\u2019 to quickly add basic caching\n\uf0eb dependencies. The starter brings spring-context-support: if you are adding\ndependencies manually, you must include it if you intend to use the JCache,\nEhCache 2.x or Guava support.\nIf you haven\u2019t defined a bean of type CacheManager or a CacheResolver named cacheResolver (see\nCachingConfigurer), Spring Boot tries to detect the following providers (in this order):\n\u2022 Generic\n\u2022 JCache (JSR-107) (EhCache 3, Hazelcast, Infinispan, etc)\n\u2022 EhCache 2.x\n\u2022 Hazelcast\n\u2022 Infinispan\n\u2022 Couchbase\n\u2022 Redis\n\u2022 Caffeine\n\u2022 Simple\nIt is also possible to force the cache provider to use via the spring.cache.type\n\uf0eb\nproperty. Use this property if you need to disable caching altogether in certain\nenvironment (e.g. tests).\nIf the CacheManager is auto-configured by Spring Boot, you can further tune its configuration before\nit is fully initialized by exposing a bean implementing the CacheManagerCustomizer interface. The\nfollowing sets the cache names to use.\n@Bean\npublic CacheManagerCustomizer<ConcurrentMapCacheManager> cacheManagerCustomizer() {\nreturn new CacheManagerCustomizer<ConcurrentMapCacheManager>() {\n@Override\npublic void customize(ConcurrentMapCacheManager cacheManager) {\ncacheManager.setCacheNames(Arrays.asList(\"one\", \"two\"));\n}\n};\n}\nIn the example above, a ConcurrentMapCacheManager is expected to be configured. If\n\uf05a that is not the case, the customizer won\u2019t be invoked at all. You can have as many\ncustomizers as you want and you can also order them as usual using @Order or\nOrdered.\n31.1.1. Generic\nGeneric caching is used if the context defines at least one org.springframework.cache.Cache bean, a\n126\nCacheManager wrapping them is configured.\n31.1.2. JCache (JSR-107)\nJCache is bootstrapped via the presence of a javax.cache.spi.CachingProvider on the classpath (i.e. a\nJSR-107 compliant caching library) and the JCacheCacheManager provided by the spring-boot-\nstarter-cache \u2018Starter\u2019. There are various compliant libraries out there and Spring Boot provides\ndependency management for Ehcache 3, Hazelcast and Infinispan. Any other compliant library can\nbe added as well.\nIt might happen that more than one provider is present, in which case the provider must be\nexplicitly specified. Even if the JSR-107 standard does not enforce a standardized way to define the\nlocation of the configuration file, Spring Boot does its best to accommodate with implementation\ndetails.\n# Only necessary if more than one provider is present\nspring.cache.jcache.provider=com.acme.MyCachingProvider\nspring.cache.jcache.config=classpath:acme.xml\nSince a cache library may offer both a native implementation and JSR-107\n\uf05a\nsupport Spring Boot will prefer the JSR-107 support so that the same features are\navailable if you switch to a different JSR-107 implementation.\nThere are several ways to customize the underlying javax.cache.cacheManager:\n\u2022 Caches can be created on startup via the spring.cache.cache-names property. If a custom\njavax.cache.configuration.Configuration bean is defined, it is used to customize them.\n\u2022 org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer beans are invoked with\nthe reference of the CacheManager for full customization.\nIf a standard javax.cache.CacheManager bean is defined, it is wrapped\n\uf0eb\nautomatically in a org.springframework.cache.CacheManager implementation that\nthe abstraction expects. No further customization is applied on it.\n31.1.3. EhCache 2.x\nEhCache 2.x is used if a file named ehcache.xml can be found at the root of the classpath. If EhCache\n2.x, the EhCacheCacheManager provided by the spring-boot-starter-cache \u2018Starter\u2019 and such file is\npresent it is used to bootstrap the cache manager. An alternate configuration file can be provided\nas well using:\nspring.cache.ehcache.config=classpath:config/another-config.xml\n31.1.4. Hazelcast\nSpring Boot has a general support for Hazelcast. If a HazelcastInstance has been auto-configured, it\n127\nis automatically wrapped in a CacheManager.\nIf for some reason you need a different HazelcastInstance for caching, you can request Spring Boot\nto create a separate one that will be only used by the CacheManager:\nspring.cache.hazelcast.config=classpath:config/my-cache-hazelcast.xml\n\uf0eb If a separate HazelcastInstance is created that way, it is not registered in the\napplication context.\n31.1.5. Infinispan\nInfinispan has no default configuration file location so it must be specified explicitly (or the default\nbootstrap is used).\nspring.cache.infinispan.config=infinispan.xml\nCaches can be created on startup via the spring.cache.cache-names property. If a custom\nConfigurationBuilder bean is defined, it is used to customize them.\n31.1.6. Couchbase\nIf the Couchbase java client and the couchbase-spring-cache implementation are available and\nCouchbase is configured, a CouchbaseCacheManager will be auto-configured. It is also possible to\ncreate additional caches on startup using the spring.cache.cache-names property. These will operate\non the Bucket that was auto-configured. You can also create additional caches on another Bucket\nusing the customizer: assume you need two caches on the \"main\" Bucket (foo and bar) and one biz\ncache with a custom time to live of 2sec on the another Bucket. First, you can create the two first\ncaches simply via configuration:\nspring.cache.cache-names=foo,bar\nThen define this extra @Configuration to configure the extra Bucket and the biz cache:\n128\n@Configuration\npublic class CouchbaseCacheConfiguration {\nprivate final Cluster cluster;\npublic CouchbaseCacheConfiguration(Cluster cluster) {\nthis.cluster = cluster;\n}\n@Bean\npublic Bucket anotherBucket() {\nreturn this.cluster.openBucket(\"another\", \"secret\");\n}\n@Bean\npublic CacheManagerCustomizer<CouchbaseCacheManager> cacheManagerCustomizer() {\nreturn c -> {\nc.prepareCache(\"biz\", CacheBuilder.newInstance(anotherBucket())\n.withExpirationInMillis(2000));\n};\n}\n}\nThis sample configuration reuses the Cluster that was created via auto-configuration.\n31.1.7. Redis\nIf Redis is available and configured, the RedisCacheManager is auto-configured. It is also possible to\ncreate additional caches on startup using the spring.cache.cache-names property.\nBy default, a key prefix is added to prevent that if two separate caches use the\n\uf05a same key, Redis would have overlapping keys and be likely to return invalid\nvalues. We strongly recommend to keep this setting enabled if you create your\nown RedisCacheManager.\n31.1.8. Caffeine\nCaffeine is a Java 8 rewrite of Guava\u2019s cache that supersede the Guava support. If Caffeine is\npresent, a CaffeineCacheManager (provided by the spring-boot-starter-cache \u2018Starter\u2019) is auto-\nconfigured. Caches can be created on startup using the spring.cache.cache-names property and\ncustomized by one of the following (in this order):\n1. A cache spec defined by spring.cache.caffeine.spec\n2. A com.github.benmanes.caffeine.cache.CaffeineSpec bean is defined\n3. A com.github.benmanes.caffeine.cache.Caffeine bean is defined\nFor instance, the following configuration creates a foo and bar caches with a maximum size of 500\n129\nand a time to live of 10 minutes\nspring.cache.cache-names=foo,bar\nspring.cache.caffeine.spec=maximumSize=500,expireAfterAccess=600s\nBesides, if a com.github.benmanes.caffeine.cache.CacheLoader bean is defined, it is automatically\nassociated to the CaffeineCacheManager. Since the CacheLoader is going to be associated to all caches\nmanaged by the cache manager, it must be defined as CacheLoader<Object, Object>. Any other\ngeneric type will be ignored by the auto-configuration.\n31.1.9. Simple\nIf none of these options worked out, a simple implementation using ConcurrentHashMap as cache\nstore is configured. This is the default if no caching library is present in your application.\n31.1.10. None\nWhen @EnableCaching is present in your configuration, a suitable cache configuration is expected as\nwell. If you need to disable caching altogether in certain environments, force the cache type to none\nto use a no-op implementation:\nspring.cache.type=none\n130\nChapter 32. Messaging\nThe Spring Framework provides extensive support for integrating with messaging systems: from\nsimplified use of the JMS API using JmsTemplate to a complete infrastructure to receive messages\nasynchronously. Spring AMQP provides a similar feature set for the \u2018Advanced Message Queuing\nProtocol\u2019 and Spring Boot also provides auto-configuration options for RabbitTemplate and\nRabbitMQ. There is also support for STOMP messaging natively in Spring WebSocket and Spring\nBoot has support for that through starters and a small amount of auto-configuration. Spring Boot\nalso has support for Apache Kafka.\n32.1. JMS\nThe javax.jms.ConnectionFactory interface provides a standard method of creating a\njavax.jms.Connection for interacting with a JMS broker. Although Spring needs a ConnectionFactory\nto work with JMS, you generally won\u2019t need to use it directly yourself and you can instead rely on\nhigher level messaging abstractions (see the relevant section of the Spring Framework reference\ndocumentation for details). Spring Boot also auto-configures the necessary infrastructure to send\nand receive messages.\n32.1.1. ActiveMQ support\nSpring Boot can also configure a ConnectionFactory when it detects that ActiveMQ is available on the\nclasspath. If the broker is present, an embedded broker is started and configured automatically (as\nlong as no broker URL is specified through configuration).\nIf you are using spring-boot-starter-activemq the necessary dependencies to\n\uf05a\nconnect or embed an ActiveMQ instance are provided, as well as the Spring\ninfrastructure to integrate with JMS.\nActiveMQ configuration is controlled by external configuration properties in spring.activemq.*. For\nexample, you might declare the following section in application.properties:\nspring.activemq.broker-url=tcp://192.168.1.210:9876\nspring.activemq.user=admin\nspring.activemq.password=secret\nSee ActiveMQProperties for more of the supported options.\nBy default, ActiveMQ creates a destination if it does not exist yet, so destinations are resolved\nagainst their provided names.\n32.1.2. Artemis support\nSpring Boot can auto-configure a ConnectionFactory when it detects that Artemis is available on the\nclasspath. If the broker is present, an embedded broker is started and configured automatically\n(unless the mode property has been explicitly set). The supported modes are: embedded (to make\n131\nexplicit that an embedded broker is required and should lead to an error if the broker is not\navailable in the classpath), and native to connect to a broker using the netty transport protocol.\nWhen the latter is configured, Spring Boot configures a ConnectionFactory connecting to a broker\nrunning on the local machine with the default settings.\nIf you are using spring-boot-starter-artemis the necessary dependencies to\n\uf05a connect to an existing Artemis instance are provided, as well as the Spring\ninfrastructure to integrate with JMS. Adding org.apache.activemq:artemis-jms-\nserver to your application allows you to use the embedded mode.\nArtemis configuration is controlled by external configuration properties in spring.artemis.*. For\nexample, you might declare the following section in application.properties:\nspring.artemis.mode=native\nspring.artemis.host=192.168.1.210\nspring.artemis.port=9876\nspring.artemis.user=admin\nspring.artemis.password=secret\nWhen embedding the broker, you can choose if you want to enable persistence, and the list of\ndestinations that should be made available. These can be specified as a comma-separated list to\ncreate them with the default options; or you can define bean(s) of type\norg.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration or\norg.apache.activemq.artemis.jms.server.config.TopicConfiguration, for advanced queue and topic\nconfigurations respectively.\nSee ArtemisProperties for more of the supported options.\nNo JNDI lookup is involved at all and destinations are resolved against their names, either using the\n\u2018name\u2019 attribute in the Artemis configuration or the names provided through configuration.\n32.1.3. Using a JNDI ConnectionFactory\nIf you are running your application in an Application Server Spring Boot will attempt to locate a\nJMS ConnectionFactory using JNDI. By default the locations java:/JmsXA and\njava:/XAConnectionFactory will be checked. You can use the spring.jms.jndi-name property if you\nneed to specify an alternative location:\nspring.jms.jndi-name=java:/MyConnectionFactory\n32.1.4. Sending a message\nSpring\u2019s JmsTemplate is auto-configured and you can autowire it directly into your own beans:\n132\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.stereotype.Component;\n@Component\npublic class MyBean {\nprivate final JmsTemplate jmsTemplate;\n@Autowired\npublic MyBean(JmsTemplate jmsTemplate) {\nthis.jmsTemplate = jmsTemplate;\n}\n// ...\n}\nJmsMessagingTemplate can be injected in a similar manner. If a\n\uf05a\nDestinationResolver or MessageConverter beans are defined, they are associated\nautomatically to the auto-configured JmsTemplate.\n32.1.5. Receiving a message\nWhen the JMS infrastructure is present, any bean can be annotated with @JmsListener to create a\nlistener endpoint. If no JmsListenerContainerFactory has been defined, a default one is configured\nautomatically. If a DestinationResolver or MessageConverter beans are defined, they are associated\nautomatically to the default factory.\nThe default factory is transactional by default. If you are running in an infrastructure where a\nJtaTransactionManager is present, it will be associated to the listener container by default. If not, the\nsessionTransacted flag will be enabled. In that latter scenario, you can associate your local data\nstore transaction to the processing of an incoming message by adding @Transactional on your\nlistener method (or a delegate thereof). This will make sure that the incoming message is\nacknowledged once the local transaction has completed. This also includes sending response\nmessages that have been performed on the same JMS session.\nThe following component creates a listener endpoint on the someQueue destination:\n133\n@Component\npublic class MyBean {\n@JmsListener(destination = \"someQueue\")\npublic void processMessage(String content) {\n// ...\n}\n}\n\uf0eb\nCheck the Javadoc of @EnableJms for more details.\nIf you need to create more JmsListenerContainerFactory instances or if you want to override the\ndefault, Spring Boot provides a DefaultJmsListenerContainerFactoryConfigurer that you can use to\ninitialize a DefaultJmsListenerContainerFactory with the same settings as the one that is auto-\nconfigured.\nFor instance, the following exposes another factory that uses a specific MessageConverter:\n@Configuration\nstatic class JmsConfiguration {\n@Bean\npublic DefaultJmsListenerContainerFactory myFactory(\nDefaultJmsListenerContainerFactoryConfigurer configurer) {\nDefaultJmsListenerContainerFactory factory =\nnew DefaultJmsListenerContainerFactory();\nconfigurer.configure(factory, connectionFactory());\nfactory.setMessageConverter(myMessageConverter());\nreturn factory;\n}\n}\nThen you can use in any @JmsListener-annotated method as follows:\n@Component\npublic class MyBean {\n@JmsListener(destination = \"someQueue\", <strong>containerFactory=\"myFactory\"<\n/strong>)\npublic void processMessage(String content) {\n// ...\n}\n}\n134\n32.2. AMQP\nThe Advanced Message Queuing Protocol (AMQP) is a platform-neutral, wire-level protocol for\nmessage-oriented middleware. The Spring AMQP project applies core Spring concepts to the\ndevelopment of AMQP-based messaging solutions. Spring Boot offers several conveniences for\nworking with AMQP via RabbitMQ, including the spring-boot-starter-amqp \u2018Starter\u2019.\n32.2.1. RabbitMQ support\nRabbitMQ is a lightweight, reliable, scalable and portable message broker based on the AMQP\nprotocol. Spring uses RabbitMQ to communicate using the AMQP protocol.\nRabbitMQ configuration is controlled by external configuration properties in spring.rabbitmq.*. For\nexample, you might declare the following section in application.properties:\nspring.rabbitmq.host=localhost\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=secret\nSee RabbitProperties for more of the supported options.\n\uf0eb\nCheck Understanding AMQP, the protocol used by RabbitMQ for more details.\n32.2.2. Sending a message\nSpring\u2019s AmqpTemplate and AmqpAdmin are auto-configured and you can autowire them directly into\nyour own beans:\n135\nimport org.springframework.amqp.core.AmqpAdmin;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n@Component\npublic class MyBean {\nprivate final AmqpAdmin amqpAdmin;\nprivate final AmqpTemplate amqpTemplate;\n@Autowired\npublic MyBean(AmqpAdmin amqpAdmin, AmqpTemplate amqpTemplate) {\nthis.amqpAdmin = amqpAdmin;\nthis.amqpTemplate = amqpTemplate;\n}\n// ...\n}\nRabbitMessagingTemplate can be injected in a similar manner. If a\n\uf05a\nMessageConverter bean is defined, it is associated automatically to the auto-\nconfigured AmqpTemplate.\nAny org.springframework.amqp.core.Queue that is defined as a bean will be automatically used to\ndeclare a corresponding queue on the RabbitMQ instance if necessary.\nYou can enable retries on the AmqpTemplate to retry operations, for example in the event the broker\nconnection is lost. Retries are disabled by default.\n32.2.3. Receiving a message\nWhen the Rabbit infrastructure is present, any bean can be annotated with @RabbitListener to\ncreate a listener endpoint. If no RabbitListenerContainerFactory has been defined, a default one is\nconfigured automatically. If a MessageConverter beans is defined, it is associated automatically to\nthe default factory.\nThe following component creates a listener endpoint on the someQueue queue:\n136\n@Component\npublic class MyBean {\n@RabbitListener(queues = \"someQueue\")\npublic void processMessage(String content) {\n// ...\n}\n}\n\uf0eb\nCheck the Javadoc of @EnableRabbit for more details.\nIf you need to create more RabbitListenerContainerFactory instances or if you want to override the\ndefault, Spring Boot provides a SimpleRabbitListenerContainerFactoryConfigurer that you can use to\ninitialize a SimpleRabbitListenerContainerFactory with the same settings as the one that is auto-\nconfigured.\nFor instance, the following exposes another factory that uses a specific MessageConverter:\n@Configuration\nstatic class RabbitConfiguration {\n@Bean\npublic SimpleRabbitListenerContainerFactory myFactory(\nSimpleRabbitListenerContainerFactoryConfigurer configurer) {\nSimpleRabbitListenerContainerFactory factory =\nnew SimpleRabbitListenerContainerFactory();\nconfigurer.configure(factory, connectionFactory);\nfactory.setMessageConverter(myMessageConverter());\nreturn factory;\n}\n}\nThen you can use in any @RabbitListener-annotated method as follows:\n@Component\npublic class MyBean {\n@RabbitListener(queues = \"someQueue\", <strong>containerFactory=\"myFactory\"</\nstrong>)\npublic void processMessage(String content) {\n// ...\n}\n}\n137\nYou can enable retries to handle situations where your listener throws an exception. When retries\nare exhausted, the message will be rejected and either dropped or routed to a dead-letter exchange\nif the broker is configured so. Retries are disabled by default.\nIf retries are not enabled and the listener throws an exception, by default the\ndelivery will be retried indefinitely. You can modify this behavior in two ways; set\n\uf06a the defaultRequeueRejected property to false and zero re-deliveries will be\nattempted; or, throw an AmqpRejectAndDontRequeueException to signal the message\nshould be rejected. This is the mechanism used when retries are enabled and the\nmaximum delivery attempts are reached.\n32.3. Apache Kafka Support\nApache Kafka is supported by providing auto-configuration of the spring-kafka project.\nKafka configuration is controlled by external configuration properties in spring.kafka.*. For\nexample, you might declare the following section in application.properties:\nspring.kafka.bootstrap-servers=localhost:9092\nspring.kafka.consumer.group-id=myGroup\nSee KafkaProperties for more of the supported options.\n32.4. Sending a Message\nSpring\u2019s KafkaTemplate is auto-configured and you can autowire them directly in your own beans:\n@Component\npublic class MyBean {\nprivate final KafkaTemplate kafkaTemplate;\n@Autowired\npublic MyBean(KafkaTemplate kafkaTemplate) {\nthis.kafkaTemplate = kafkaTemplate;\n}\n// ...\n}\n32.5. Receiving a Message\nWhen the Apache Kafka infrastructure is present, any bean can be annotated with @KafkaListener\nto create a listener endpoint. If no KafkaListenerContainerFactory has been defined, a default one is\nconfigured automatically with keys defined in spring.kafka.listener.*.\n138\nThe following component creates a listener endpoint on the someTopic topic:\n@Component\npublic class MyBean {\n@KafkaListener(topics = \"someTopic\")\npublic void processMessage(String content) {\n// ...\n}\n}\n32.6. Additional Kafka Properties\nThe properties supported by auto configuration are shown in Common application properties. Note\nthat these properties (hyphenated or camelCase) map directly to the Apache Kafka dotted\nproperties for the most part, refer to the Apache Kafka documentation for details.\nThe first few of these properties apply to both producers and consumers, but can be specified at the\nproducer or consumer level if you wish to use different values for each. Apache Kafka designates\nproperties with an importance: HIGH, MEDIUM and LOW. Spring Boot auto configuration supports\nall HIGH importance properties, some selected MEDIUM and LOW, and any that do not have a\ndefault value.\nOnly a subset of the properties supported by Kafka are available via the KafkaProperties class. If\nyou wish to configure the producer or consumer with additional properties, you can override the\nproducer factory and/or consumer factory bean, adding additional properties, for example:\n@Bean\npublic ProducerFactory<?, ?> kafkaProducerFactory(KafkaProperties properties) {\nMap<String, Object> producerProperties = properties.buildProducerProperties();\nproducerProperties.put(\"some.property\", \"some.value\");\nreturn new DefaultKafkaProducerFactory<Object, Object>(producerProperties);\n}\n139\nChapter 33. Calling REST services\nIf you need to call remote REST services from your application, you can use Spring Framework\u2019s\nRestTemplate class. Since RestTemplate instances often need to be customized before being used,\nSpring Boot does not provide any single auto-configured RestTemplate bean. It does, however, auto-\nconfigure a RestTemplateBuilder which can be used to create RestTemplate instances when needed.\nThe auto-configured RestTemplateBuilder will ensure that sensible HttpMessageConverters are\napplied to RestTemplate instances.\nHere\u2019s a typical example:\n@Service\npublic class MyBean {\nprivate final RestTemplate restTemplate;\npublic MyBean(RestTemplateBuilder restTemplateBuilder) {\nthis.restTemplate = restTemplateBuilder.build();\n}\npublic Details someRestCall(String name) {\nreturn this.restTemplate.getForObject(\"/{name}/details\", Details.class, name);\n}\n}\nRestTemplateBuilder includes a number of useful methods that can be used to\n\uf0eb\nquickly configure a RestTemplate. For example, to add BASIC auth support you can\nuse builder.basicAuthorization(\"user\", \"password\").build().\n33.1. RestTemplate customization\nThere are three main approaches to RestTemplate customization, depending on how broadly you\nwant the customizations to apply.\nTo make the scope of any customizations as narrow as possible, inject the auto-configured\nRestTemplateBuilder and then call its methods as required. Each method call returns a new\nRestTemplateBuilder instance so the customizations will only affect this use of the builder.\nTo make an application-wide, additive customization a RestTemplateCustomizer bean can be used.\nAll such beans are automatically registered with the auto-configured RestTemplateBuilder and will\nbe applied to any templates that are built with it.\nHere\u2019s an example of a customizer that configures the use of a proxy for all hosts except\n192.168.0.5:\n140\nstatic class ProxyCustomizer implements RestTemplateCustomizer {\n@Override\npublic void customize(RestTemplate restTemplate) {\nHttpHost proxy = new HttpHost(\"proxy.example.com\");\nHttpClient httpClient = HttpClientBuilder.create()\n.setRoutePlanner(new DefaultProxyRoutePlanner(proxy) {\n@Override\npublic HttpHost determineProxy(HttpHost target,\nHttpRequest request, HttpContext context)\nthrows HttpException {\nif (target.getHostName().equals(\"192.168.0.5\")) {\nreturn null;\n}\nreturn super.determineProxy(target, request, context);\n}\n}).build();\nrestTemplate.setRequestFactory(\nnew HttpComponentsClientHttpRequestFactory(httpClient));\n}\n}\nLastly, the most extreme (and rarely used) option is to create your own RestTemplateBuilder bean.\nThis will switch off the auto-configuration of a RestTemplateBuilder and will prevent any\nRestTemplateCustomizer beans from being used.\n141\nChapter 34. Validation\nThe method validation feature supported by Bean Validation 1.1 is automatically enabled as long as\na JSR-303 implementation (e.g. Hibernate validator) is on the classpath. This allows bean methods to\nbe annotated with javax.validation constraints on their parameters and/or on their return value.\nTarget classes with such annotated methods need to be annotated with the @Validated annotation at\nthe type level for their methods to be searched for inline constraint annotations.\nFor instance, the following service triggers the validation of the first argument, making sure its size\nis between 8 and 10\n@Service\n@Validated\npublic class MyBean {\npublic Archive findByCodeAndAuthor(@Size(min = 8, max = 10) String code,\nAuthor author) {\n...\n}\n}\n142\nChapter 35. Sending email\nThe Spring Framework provides an easy abstraction for sending email using the JavaMailSender\ninterface and Spring Boot provides auto-configuration for it as well as a starter module.\n\uf0eb Check the reference documentation for a detailed explanation of how you can use\nJavaMailSender.\nIf spring.mail.host and the relevant libraries (as defined by spring-boot-starter-mail) are\navailable, a default JavaMailSender is created if none exists. The sender can be further customized\nby configuration items from the spring.mail namespace, see the MailProperties for more details.\n143\nChapter 36. Distributed Transactions with\nJTA\nSpring Boot supports distributed JTA transactions across multiple XA resources using either an\nAtomikos or Bitronix embedded transaction manager. JTA transactions are also supported when\ndeploying to a suitable Java EE Application Server.\nWhen a JTA environment is detected, Spring\u2019s JtaTransactionManager will be used to manage\ntransactions. Auto-configured JMS, DataSource and JPA beans will be upgraded to support XA\ntransactions. You can use standard Spring idioms such as @Transactional to participate in a\ndistributed transaction. If you are within a JTA environment and still want to use local transactions\nyou can set the spring.jta.enabled property to false to disable the JTA auto-configuration.\n36.1. Using an Atomikos transaction manager\nAtomikos is a popular open source transaction manager which can be embedded into your Spring\nBoot application. You can use the spring-boot-starter-jta-atomikos Starter to pull in the\nappropriate Atomikos libraries. Spring Boot will auto-configure Atomikos and ensure that\nappropriate depends-on settings are applied to your Spring beans for correct startup and shutdown\nordering.\nBy default Atomikos transaction logs will be written to a transaction-logs directory in your\napplication home directory (the directory in which your application jar file resides). You can\ncustomize this directory by setting a spring.jta.log-dir property in your application.properties\nfile. Properties starting spring.jta.atomikos.properties can also be used to customize the Atomikos\nUserTransactionServiceImp. See the AtomikosProperties Javadoc for complete details.\nTo ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Atomikos instance must be configured with a unique ID.\n\uf05a By default this ID is the IP address of the machine on which Atomikos is running.\nTo ensure uniqueness in production, you should configure the\nspring.jta.transaction-manager-id property with a different value for each\ninstance of your application.\n36.2. Using a Bitronix transaction manager\nBitronix is popular open source JTA transaction manager implementation. You can use the spring-\nboot-starter-jta-bitronix starter to add the appropriate Bitronix dependencies to your project. As\nwith Atomikos, Spring Boot will automatically configure Bitronix and post-process your beans to\nensure that startup and shutdown ordering is correct.\nBy default Bitronix transaction log files (part1.btm and part2.btm) will be written to a transaction-\nlogs directory in your application home directory. You can customize this directory by using the\nspring.jta.log-dir property. Properties starting spring.jta.bitronix.properties are also bound to\nthe bitronix.tm.Configuration bean, allowing for complete customization. See the Bitronix\ndocumentation for details.\n144\nTo ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Bitronix instance must be configured with a unique ID.\n\uf05a By default this ID is the IP address of the machine on which Bitronix is running.\nTo ensure uniqueness in production, you should configure the\nspring.jta.transaction-manager-id property with a different value for each\ninstance of your application.\n36.3. Using a Narayana transaction manager\nNarayana is popular open source JTA transaction manager implementation supported by JBoss. You\ncan use the spring-boot-starter-jta-narayana starter to add the appropriate Narayana\ndependencies to your project. As with Atomikos and Bitronix, Spring Boot will automatically\nconfigure Narayana and post-process your beans to ensure that startup and shutdown ordering is\ncorrect.\nBy default Narayana transaction logs will be written to a transaction-logs directory in your\napplication home directory (the directory in which your application jar file resides). You can\ncustomize this directory by setting a spring.jta.log-dir property in your application.properties\nfile. Properties starting spring.jta.narayana.properties can also be used to customize the Narayana\nconfiguration. See the NarayanaProperties Javadoc for complete details.\nTo ensure that multiple transaction managers can safely coordinate the same\nresource managers, each Narayana instance must be configured with a unique\n\uf05a\nID. By default this ID is set to 1. To ensure uniqueness in production, you should\nconfigure the spring.jta.transaction-manager-id property with a different value\nfor each instance of your application.\n36.4. Using a Java EE managed transaction manager\nIf you are packaging your Spring Boot application as a war or ear file and deploying it to a Java EE\napplication server, you can use your application servers built-in transaction manager. Spring Boot\nwill attempt to auto-configure a transaction manager by looking at common JNDI locations\n(java:comp/UserTransaction, java:comp/TransactionManager etc). If you are using a transaction service\nprovided by your application server, you will generally also want to ensure that all resources are\nmanaged by the server and exposed over JNDI. Spring Boot will attempt to auto-configure JMS by\nlooking for a ConnectionFactory at the JNDI path java:/JmsXA or java:/XAConnectionFactory and you\ncan use the spring.datasource.jndi-name property to configure your DataSource.\n36.5. Mixing XA and non-XA JMS connections\nWhen using JTA, the primary JMS ConnectionFactory bean will be XA aware and participate in\ndistributed transactions. In some situations you might want to process certain JMS messages using\na non-XA ConnectionFactory. For example, your JMS processing logic might take longer than the XA\ntimeout.\nIf you want to use a non-XA ConnectionFactory you can inject the nonXaJmsConnectionFactory bean\n145\nrather than the @Primary jmsConnectionFactory bean. For consistency the jmsConnectionFactory bean\nis also provided using the bean alias xaJmsConnectionFactory.\nFor example:\n// Inject the primary (XA aware) ConnectionFactory\n@Autowired\nprivate ConnectionFactory defaultConnectionFactory;\n// Inject the XA aware ConnectionFactory (uses the alias and injects the same as\nabove)\n@Autowired\n@Qualifier(\"xaJmsConnectionFactory\")\nprivate ConnectionFactory xaConnectionFactory;\n// Inject the non-XA aware ConnectionFactory\n@Autowired\n@Qualifier(\"nonXaJmsConnectionFactory\")\nprivate ConnectionFactory nonXaConnectionFactory;\n36.6. Supporting an alternative embedded transaction\nmanager\nThe XAConnectionFactoryWrapper and XADataSourceWrapper interfaces can be used to support\nalternative embedded transaction managers. The interfaces are responsible for wrapping\nXAConnectionFactory and XADataSource beans and exposing them as regular ConnectionFactory and\nDataSource beans which will transparently enroll in the distributed transaction. DataSource and\nJMS auto-configuration will use JTA variants as long as you have a JtaTransactionManager bean and\nappropriate XA wrapper beans registered within your ApplicationContext.\nThe BitronixXAConnectionFactoryWrapper and BitronixXADataSourceWrapper provide good\nexamples of how to write XA wrappers.\n146\nChapter 37. Hazelcast\nIf hazelcast is on the classpath, Spring Boot will auto-configure an HazelcastInstance that you can\ninject in your application. The HazelcastInstance is only created if a configuration is found.\nYou can define a com.hazelcast.config.Config bean and we\u2019ll use that. If your configuration defines\nan instance name, we\u2019ll try to locate an existing instance rather than creating a new one.\nYou could also specify the hazelcast.xml configuration file to use via configuration:\nspring.hazelcast.config=classpath:config/my-hazelcast.xml\nOtherwise, Spring Boot tries to find the Hazelcast configuration from the default locations, that is\nhazelcast.xml in the working directory or at the root of the classpath. We also check if the\nhazelcast.config system property is set. Check the Hazelcast documentation for more details.\nSpring Boot also has an explicit caching support for Hazelcast. The\n\uf05a\nHazelcastInstance is automatically wrapped in a CacheManager implementation if\ncaching is enabled.\n147\nChapter 38. Spring Integration\nSpring Boot offers several conveniences for working with Spring Integration, including the spring-\nboot-starter-integration \u2018Starter\u2019. Spring Integration provides abstractions over messaging and\nalso other transports such as HTTP, TCP etc. If Spring Integration is available on your classpath it\nwill be initialized through the @EnableIntegration annotation. Message processing statistics will be\npublished over JMX if 'spring-integration-jmx' is also on the classpath. See the\nIntegrationAutoConfiguration class for more details.\n148\nChapter 39. Spring Session\nSpring Boot provides Spring Session auto-configuration for a wide range of stores:\n\u2022 JDBC\n\u2022 MongoDB\n\u2022 Redis\n\u2022 Hazelcast\n\u2022 HashMap\nIf Spring Session is available, you only need to choose the StoreType that you wish to use to store the\nsessions. For instance to use JDBC as backend store, you\u2019d configure your application as follows:\nspring.session.store-type=jdbc\n\uf05a For backward compatibility if Redis is available Spring Session will be\nautomatically configured to use Redis.\n\uf0eb\nYou can disable Spring Session by setting the store-type to none.\nEach store has specific additional settings. For instance it is possible to customize the name of the\ntable for the jdbc store:\nspring.session.jdbc.table-name=SESSIONS\n149\nChapter 40. Monitoring and management\nover JMX\nJava Management Extensions (JMX) provide a standard mechanism to monitor and manage\napplications. By default Spring Boot will create an MBeanServer with bean id \u2018mbeanServer\u2019 and\nexpose any of your beans that are annotated with Spring JMX annotations (@ManagedResource,\n@ManagedAttribute, @ManagedOperation).\nSee the JmxAutoConfiguration class for more details.\n150\nChapter 41. Testing\nSpring Boot provides a number of utilities and annotations to help when testing your application.\nTest support is provided by two modules; spring-boot-test contains core items, and spring-boot-\ntest-autoconfigure supports auto-configuration for tests.\nMost developers will just use the spring-boot-starter-test \u2018Starter\u2019 which imports both Spring Boot\ntest modules as well has JUnit, AssertJ, Hamcrest and a number of other useful libraries.\n41.1. Test scope dependencies\nIf you use the spring-boot-starter-test \u2018Starter\u2019 (in the test scope), you will find the following\nprovided libraries:\n\u2022 JUnit \u2014 The de-facto standard for unit testing Java applications.\n\u2022 Spring Test & Spring Boot Test \u2014 Utilities and integration test support for Spring Boot\napplications.\n\u2022 AssertJ \u2014 A fluent assertion library.\n\u2022 Hamcrest \u2014 A library of matcher objects (also known as constraints or predicates).\n\u2022 Mockito \u2014 A Java mocking framework.\n\u2022 JSONassert \u2014 An assertion library for JSON.\n\u2022 JsonPath \u2014 XPath for JSON.\nThese are common libraries that we generally find useful when writing tests. You are free to add\nadditional test dependencies of your own if these don\u2019t suit your needs.\n41.2. Testing Spring applications\nOne of the major advantages of dependency injection is that it should make your code easier to unit\ntest. You can simply instantiate objects using the new operator without even involving Spring. You\ncan also use mock objects instead of real dependencies.\nOften you need to move beyond \u2018unit testing\u2019 and start \u2018integration testing\u2019 (with a Spring\nApplicationContext actually involved in the process). It\u2019s useful to be able to perform integration\ntesting without requiring deployment of your application or needing to connect to other\ninfrastructure.\nThe Spring Framework includes a dedicated test module for just such integration testing. You can\ndeclare a dependency directly to org.springframework:spring-test or use the spring-boot-starter-\ntest \u2018Starter\u2019 to pull it in transitively.\nIf you have not used the spring-test module before you should start by reading the relevant section\nof the Spring Framework reference documentation.\n151\n41.3. Testing Spring Boot applications\nA Spring Boot application is just a Spring ApplicationContext, so nothing very special has to be done\nto test it beyond what you would normally do with a vanilla Spring context. One thing to watch out\nfor though is that the external properties, logging and other features of Spring Boot are only\ninstalled in the context by default if you use SpringApplication to create it.\nSpring Boot provides a @SpringBootTest annotation which can be used as an alternative to the\nstandard spring-test @ContextConfiguration annotation when you need Spring Boot features. The\nannotation works by creating the ApplicationContext used in your tests via SpringApplication.\nYou can use the webEnvironment attribute of @SpringBootTest to further refine how your tests will\nrun:\n\u2022 MOCK \u2014 Loads a WebApplicationContext and provides a mock servlet environment. Embedded\nservlet containers are not started when using this annotation. If servlet APIs are not on your\nclasspath this mode will transparently fallback to creating a regular non-web\nApplicationContext. Can be used in conjunction with @AutoConfigureMockMvc for MockMvc-based\ntesting of your application.\n\u2022 RANDOM_PORT \u2014 Loads an EmbeddedWebApplicationContext and provides a real servlet environment.\nEmbedded servlet containers are started and listening on a random port.\n\u2022 DEFINED_PORT \u2014 Loads an EmbeddedWebApplicationContext and provides a real servlet\nenvironment. Embedded servlet containers are started and listening on a defined port (i.e from\nyour application.properties or on the default port 8080).\n\u2022 NONE \u2014 Loads an ApplicationContext using SpringApplication but does not provide any servlet\nenvironment (mock or otherwise).\n\uf05a In addition to @SpringBootTest a number of other annotations are also provided\nfor testing more specific slices of an application. See below for details.\n\uf0eb Don\u2019t forget to also add @RunWith(SpringRunner.class) to your test, otherwise the\nannotations will be ignored.\n41.3.1. Detecting test configuration\nIf you\u2019re familiar with the Spring Test Framework, you may be used to using\n@ContextConfiguration(classes=\u2026) in order to specify which Spring @Configuration to load.\nAlternatively, you might have often used nested @Configuration classes within your test.\nWhen testing Spring Boot applications this is often not required. Spring Boot\u2019s @*Test annotations\nwill search for your primary configuration automatically whenever you don\u2019t explicitly define one.\nThe search algorithm works up from the package that contains the test until it finds a\n@SpringBootApplication or @SpringBootConfiguration annotated class. As long as you\u2019ve structured\nyour code in a sensible way your main configuration is usually found.\nIf you want to customize the primary configuration, you can use a nested @TestConfiguration class.\n152\nUnlike a nested @Configuration class which would be used instead of a your application\u2019s primary\nconfiguration, a nested @TestConfiguration class will be used in addition to your application\u2019s\nprimary configuration.\nSpring\u2019s test framework will cache application contexts between tests. Therefore,\n\uf05a as long as your tests share the same configuration (no matter how it\u2019s\ndiscovered), the potentially time consuming process of loading the context will\nonly happen once.\n41.3.2. Excluding test configuration\nIf your application uses component scanning, for example if you use @SpringBootApplication or\n@ComponentScan, you may find components or configurations created only for specific tests\naccidentally get picked up everywhere.\nTo help prevent this, Spring Boot provides @TestComponent and @TestConfiguration annotations that\ncan be used on classes in src/test/java to indicate that they should not be picked up by scanning.\n@TestComponent and @TestConfiguration are only needed on top level classes. If you\n\uf05a\ndefine @Configuration or @Component as inner-classes within a test (any class that\nhas @Test methods or @RunWith), they will be automatically filtered.\n\uf05a If you directly use @ComponentScan (i.e. not via @SpringBootApplication) you will\nneed to register the TypeExcludeFilter with it. See the Javadoc for details.\n41.3.3. Working with random ports\nIf you need to start a full running server for tests, we recommend that you use random ports. If you\nuse @SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT) an available port will be picked at\nrandom each time your test runs.\nThe @LocalServerPort annotation can be used to inject the actual port used into your test. For\nconvenience, tests that need to make REST calls to the started server can additionally @Autowire a\nTestRestTemplate which will resolve relative links to the running server.\n153\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\npublic class RandomPortExampleTests {\n@Autowired\nprivate TestRestTemplate restTemplate;\n@Test\npublic void exampleTest() {\nString body = this.restTemplate.getForObject(\"/\", String.class);\nassertThat(body).isEqualTo(\"Hello World\");\n}\n}\n41.3.4. Mocking and spying beans\nIt\u2019s sometimes necessary to mock certain components within your application context when\nrunning tests. For example, you may have a facade over some remote service that\u2019s unavailable\nduring development. Mocking can also be useful when you want to simulate failures that might be\nhard to trigger in a real environment.\nSpring Boot includes a @MockBean annotation that can be used to define a Mockito mock for a bean\ninside your ApplicationContext. You can use the annotation to add new beans, or replace a single\nexisting bean definition. The annotation can be used directly on test classes, on fields within your\ntest, or on @Configuration classes and fields. When used on a field, the instance of the created mock\nwill also be injected. Mock beans are automatically reset after each test method.\nHere\u2019s a typical example where we replace an existing RemoteService bean with a mock\nimplementation:\n154\nimport org.junit.*;\nimport org.junit.runner.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.test.context.*;\nimport org.springframework.boot.test.mock.mockito.*;\nimport org.springframework.test.context.junit4.*;\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.BDDMockito.*;\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MyTests {\n@MockBean\nprivate RemoteService remoteService;\n@Autowired\nprivate Reverser reverser;\n@Test\npublic void exampleTest() {\n// RemoteService has been injected into the reverser bean\ngiven(this.remoteService.someCall()).willReturn(\"mock\");\nString reverse = reverser.reverseSomeCall();\nassertThat(reverse).isEqualTo(\"kcom\");\n}\n}\nAdditionally you can also use @SpyBean to wrap any existing bean with a Mockito spy. See the\nJavadoc for full details.\n41.3.5. Auto-configured tests\nSpring Boot\u2019s auto-configuration system works well for applications, but can sometimes be a little\ntoo much for tests. It\u2019s often helpful to load only the parts of the configuration that are required to\ntest a \u2018slice\u2019 of your application. For example, you might want to test that Spring MVC controllers\nare mapping URLs correctly, and you don\u2019t want to involve database calls in those tests; or you\nmight be wanting to test JPA entities, and you\u2019re not interested in web layer when those tests run.\nThe spring-boot-test-autoconfigure module includes a number of annotations that can be used to\nautomatically configure such \u2018slices\u2019. Each of them works in a similar way, providing a @\u2026Test\nannotation that loads the ApplicationContext and one or more @AutoConfigure\u2026 annotations that\ncan be used to customize auto-configuration settings.\n155\nIt\u2019s also possible to use the @AutoConfigure\u2026 annotations with the standard\n\uf0eb\n@SpringBootTest annotation. You can use this combination if you\u2019re not interested\nin \u2018slicing\u2019 your application but you want some of the auto-configured test beans.\n41.3.6. Auto-configured JSON tests\nTo test that Object JSON serialization and deserialization is working as expected you can use the\n@JsonTest annotation. @JsonTest will auto-configure Jackson ObjectMapper, any @JsonComponent beans\nand any Jackson Modules. It also configures Gson if you happen to be using that instead of, or as well\nas, Jackson. If you need to configure elements of the auto-configuration you can use the\n@AutoConfigureJsonTesters annotation.\nSpring Boot includes AssertJ based helpers that work with the JSONassert and JsonPath libraries to\ncheck that JSON is as expected. The JacksonTester, GsonTester and BasicJsonTester classes can be\nused for Jackson, Gson and Strings respectively. Any helper fields on the test class can be @Autowired\nwhen using @JsonTest.\n156\nimport org.junit.*;\nimport org.junit.runner.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.test.autoconfigure.json.*;\nimport org.springframework.boot.test.context.*;\nimport org.springframework.boot.test.json.*;\nimport org.springframework.test.context.junit4.*;\nimport static org.assertj.core.api.Assertions.*;\n@RunWith(SpringRunner.class)\n@JsonTest\npublic class MyJsonTests {\n@Autowired\nprivate JacksonTester<VehicleDetails> json;\n@Test\npublic void testSerialize() throws Exception {\nVehicleDetails details = new VehicleDetails(\"Honda\", \"Civic\");\n// Assert against a `.json` file in the same package as the test\nassertThat(this.json.write(details)).isEqualToJson(\"expected.json\");\n// Or use JSON path based assertions\nassertThat(this.json.write(details)).hasJsonPathStringValue(\"@.make\");\nassertThat(this.json.write(details)).extractingJsonPathStringValue(\"@.make\")\n.isEqualTo(\"Honda\");\n}\n@Test\npublic void testDeserialize() throws Exception {\nString content = \"{\\\"make\\\":\\\"Ford\\\",\\\"model\\\":\\\"Focus\\\"}\";\nassertThat(this.json.parse(content))\n.isEqualTo(new VehicleDetails(\"Ford\", \"Focus\"));\nassertThat(this.json.parseObject(content).getMake()).isEqualTo(\"Ford\");\n}\n}\nJSON helper classes can also be used directly in standard unit tests. Simply call\n\uf05a\nthe initFields method of the helper in your @Before method if you aren\u2019t using\n@JsonTest.\nA list of the auto-configuration that is enabled by @JsonTest can be found in the appendix.\n41.3.7. Auto-configured Spring MVC tests\nTo test Spring MVC controllers are working as expected you can use the @WebMvcTest annotation.\n@WebMvcTest will auto-configure the Spring MVC infrastructure and limit scanned beans to\n@Controller, @ControllerAdvice, @JsonComponent, Filter, WebMvcConfigurer and\n157\nHandlerMethodArgumentResolver. Regular @Component beans will not be scanned when using this\nannotation.\nOften @WebMvcTest will be limited to a single controller and used in combination with @MockBean to\nprovide mock implementations for required collaborators.\n@WebMvcTest also auto-configures MockMvc. Mock MVC offers a powerful way to quickly test MVC\ncontrollers without needing to start a full HTTP server.\n\uf0eb You can also auto-configure MockMvc in a non-@WebMvcTest (e.g. SpringBootTest) by\nannotating it with @AutoConfigureMockMvc.\nimport org.junit.*;\nimport org.junit.runner.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.test.autoconfigure.web.servlet.*;\nimport org.springframework.boot.test.mock.mockito.*;\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.BDDMockito.*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n@RunWith(SpringRunner.class)\n@WebMvcTest(UserVehicleController.class)\npublic class MyControllerTests {\n@Autowired\nprivate MockMvc mvc;\n@MockBean\nprivate UserVehicleService userVehicleService;\n@Test\npublic void testExample() throws Exception {\ngiven(this.userVehicleService.getVehicleDetails(\"sboot\"))\n.willReturn(new VehicleDetails(\"Honda\", \"Civic\"));\nthis.mvc.perform(get(\"/sboot/vehicle\").accept(MediaType.TEXT_PLAIN))\n.andExpect(status().isOk()).andExpect(content().string(\"Honda Civic\")\n);\n}\n}\nIf you need to configure elements of the auto-configuration (for example when\n\uf0eb\nservlet filters should be applied) you can use attributes in the\n@AutoConfigureMockMvc annotation.\nIf you use HtmlUnit or Selenium, auto-configuration will also provide a WebClient bean and/or a\n158\nWebDriver bean. Here is an example that uses HtmlUnit:\nimport com.gargoylesoftware.htmlunit.*;\nimport org.junit.*;\nimport org.junit.runner.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.test.autoconfigure.web.servlet.*;\nimport org.springframework.boot.test.mock.mockito.*;\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.BDDMockito.*;\n@RunWith(SpringRunner.class)\n@WebMvcTest(UserVehicleController.class)\npublic class MyHtmlUnitTests {\n@Autowired\nprivate WebClient webClient;\n@MockBean\nprivate UserVehicleService userVehicleService;\n@Test\npublic void testExample() throws Exception {\ngiven(this.userVehicleService.getVehicleDetails(\"sboot\"))\n.willReturn(new VehicleDetails(\"Honda\", \"Civic\"));\nHtmlPage page = this.webClient.getPage(\"/sboot/vehicle.html\");\nassertThat(page.getBody().getTextContent()).isEqualTo(\"Honda Civic\");\n}\n}\nBy default Spring Boot will put WebDriver beans in a special \u201cscope\u201d to ensure that\n\uf05a the driver is quit after each test, and that a new instance is injected. If you don\u2019t\nwant this behavior you can add @Scope(\"singleton\") to your WebDriver @Bean\ndefinition.\nA list of the auto-configuration that is enabled by @WebMvcTest can be found in the appendix.\n41.3.8. Auto-configured Data JPA tests\n@DataJpaTest can be used if you want to test JPA applications. By default it will configure an in-\nmemory embedded database, scan for @Entity classes and configure Spring Data JPA repositories.\nRegular @Component beans will not be loaded into the ApplicationContext.\nData JPA tests are transactional and rollback at the end of each test by default, see the relevant\nsection in the Spring Reference Documentation for more details. If that\u2019s not what you want, you\ncan disable transaction management for a test or for the whole class as follows:\n159\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n@RunWith(SpringRunner.class)\n@DataJpaTest\n@Transactional(propagation = Propagation.NOT_SUPPORTED)\npublic class ExampleNonTransactionalTests {\n}\nData JPA tests may also inject a TestEntityManager bean which provides an alternative to the\nstandard JPA EntityManager specifically designed for tests. If you want to use TestEntityManager\noutside of @DataJpaTests you can also use the @AutoConfigureTestEntityManager annotation. A\nJdbcTemplate is also available if you need that.\nimport org.junit.*;\nimport org.junit.runner.*;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.*;\nimport static org.assertj.core.api.Assertions.*;\n@RunWith(SpringRunner.class)\n@DataJpaTest\npublic class ExampleRepositoryTests {\n@Autowired\nprivate TestEntityManager entityManager;\n@Autowired\nprivate UserRepository repository;\n@Test\npublic void testExample() throws Exception {\nthis.entityManager.persist(new User(\"sboot\", \"1234\"));\nUser user = this.repository.findByUsername(\"sboot\");\nassertThat(user.getUsername()).isEqualTo(\"sboot\");\nassertThat(user.getVin()).isEqualTo(\"1234\");\n}\n}\nIn-memory embedded databases generally work well for tests since they are fast and don\u2019t require\nany developer installation. If, however, you prefer to run tests against a real database you can use\nthe @AutoConfigureTestDatabase annotation:\n160\n@RunWith(SpringRunner.class)\n@DataJpaTest\n@AutoConfigureTestDatabase(replace=Replace.NONE)\npublic class ExampleRepositoryTests {\n// ...\n}\nA list of the auto-configuration that is enabled by @DataJpaTest can be found in the appendix.\n41.3.9. Auto-configured JDBC tests\n@JdbcTest is similar to @DataJpaTest but for pure jdbc-related tests. By default it will also configure\nan in-memory embedded database and a JdbcTemplate. Regular @Component beans will not be loaded\ninto the ApplicationContext.\nJDBC tests are transactional and rollback at the end of each test by default, see the relevant section\nin the Spring Reference Documentation for more details. If that\u2019s not what you want, you can\ndisable transaction management for a test or for the whole class as follows:\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.transaction.annotation.Propagation;\nimport org.springframework.transaction.annotation.Transactional;\n@RunWith(SpringRunner.class)\n@JdbcTest\n@Transactional(propagation = Propagation.NOT_SUPPORTED)\npublic class ExampleNonTransactionalTests {\n}\nIf you prefer your test to run against a real database, you can use the @AutoConfigureTestDatabase\nannotation the same way as for DataJpaTest.\nA list of the auto-configuration that is enabled by @JdbcTest can be found in the appendix.\n41.3.10. Auto-configured REST clients\nThe @RestClientTest annotation can be used if you want to test REST clients. By default it will auto-\nconfigure Jackson and GSON support, configure a RestTemplateBuilder and add support for\nMockRestServiceServer. The specific beans that you want to test should be specified using value or\ncomponents attribute of @RestClientTest:\n161\n@RunWith(SpringRunner.class)\n@RestClientTest(RemoteVehicleDetailsService.class)\npublic class ExampleRestClientTest {\n@Autowired\nprivate RemoteVehicleDetailsService service;\n@Autowired\nprivate MockRestServiceServer server;\n@Test\npublic void getVehicleDetailsWhenResultIsSuccessShouldReturnDetails()\nthrows Exception {\nthis.server.expect(requestTo(\"/greet/details\"))\n.andRespond(withSuccess(\"hello\", MediaType.TEXT_PLAIN));\nString greeting = this.service.callRestService();\nassertThat(greeting).isEqualTo(\"hello\");\n}\n}\nA list of the auto-configuration that is enabled by @RestClientTest can be found in the appendix.\n41.3.11. Auto-configured Spring REST Docs tests\nThe @AutoConfigureRestDocs annotation can be used if you want to use Spring REST Docs in your\ntests. It will automatically configure MockMvc to use Spring REST Docs and remove the need for\nSpring REST Docs' JUnit rule.\n162\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.servlet.MockMvc;\nimport static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n@RunWith(SpringRunner.class)\n@WebMvcTest(UserController.class)\n@AutoConfigureRestDocs(\"target/generated-snippets\")\npublic class UserDocumentationTests {\n@Autowired\nprivate MockMvc mvc;\n@Test\npublic void listUsers() throws Exception {\nthis.mvc.perform(get(\"/users\").accept(MediaType.TEXT_PLAIN))\n.andExpect(status().isOk())\n.andDo(document(\"list-users\"));\n}\n}\nIn addition to configuring the output directory, @AutoConfigureRestDocs can also configure the host,\nscheme, and port that will appear in any documented URIs. If you require more control over Spring\nREST Docs' configuration a RestDocsMockMvcConfigurationCustomizer bean can be used:\n@TestConfiguration\nstatic class CustomizationConfiguration\nimplements RestDocsMockMvcConfigurationCustomizer {\n@Override\npublic void customize(MockMvcRestDocumentationConfigurer configurer) {\nconfigurer.snippets().withTemplateFormat(TemplateFormats.markdown());\n}\n}\nIf you want to make use of Spring REST Docs' support for a parameterized output directory, you can\ncreate a RestDocumentationResultHandler bean. The auto-configuration will call alwaysDo with this\nresult handler, thereby causing each MockMvc call to automatically generate the default snippets:\n163\n@TestConfiguration\nstatic class ResultHandlerConfiguration {\n@Bean\npublic RestDocumentationResultHandler restDocumentation() {\nreturn MockMvcRestDocumentation.document(\"{method-name}\");\n}\n}\n41.3.12. Using Spock to test Spring Boot applications\nIf you wish to use Spock to test a Spring Boot application you should add a dependency on Spock\u2019s\nspock-spring module to your application\u2019s build. spock-spring integrates Spring\u2019s test framework\ninto Spock. Exactly how you can use Spock to test a Spring Boot application depends on the version\nof Spock that you are using.\nSpring Boot provides dependency management for Spock 1.0. If you wish to use\n\uf05a\nSpock 1.1 you should override the spock.version property in your build.gradle or\npom.xml file.\nWhen using Spock 1.1, the annotations described above can only be used and you can annotate\nyour Specification with @SpringBootTest to suit the needs of your tests.\nWhen using Spock 1.0, @SpringBootTest will not work for a web project. You need to use\n@SpringApplicationConfiguration and @WebIntegrationTest(randomPort = true). Being unable to use\n@SpringBootTest means that you also lose the auto-configured TestRestTemplate bean. You can create\nan equivalent bean yourself using the following configuration:\n@Configuration\nstatic class TestRestTemplateConfiguration {\n@Bean\npublic TestRestTemplate testRestTemplate(\nObjectProvider<RestTemplateBuilder> builderProvider,\nEnvironment environment) {\nRestTemplateBuilder builder = builderProvider.getIfAvailable();\nTestRestTemplate template = builder == null ? new TestRestTemplate()\n: new TestRestTemplate(builder.build());\ntemplate.setUriTemplateHandler(new LocalHostUriTemplateHandler(environment));\nreturn template;\n}\n}\n164\n41.4. Test utilities\nA few test utility classes are packaged as part of spring-boot that are generally useful when testing\nyour application.\n41.4.1. ConfigFileApplicationContextInitializer\nConfigFileApplicationContextInitializer is an ApplicationContextInitializer that can apply to your\ntests to load Spring Boot application.properties files. You can use this when you don\u2019t need the full\nfeatures provided by @SpringBootTest.\n@ContextConfiguration(classes = Config.class,\ninitializers = ConfigFileApplicationContextInitializer.class)\nUsing ConfigFileApplicationContextInitializer alone won\u2019t provide support for\n@Value(\"${\u2026}\") injection. Its only job is to ensure that application.properties\n\uf05a\nfiles are loaded into Spring\u2019s Environment. For @Value support you need to either\nadditionally configure a PropertySourcesPlaceholderConfigurer or use\n@SpringBootTest where one will be auto-configured for you.\n41.4.2. EnvironmentTestUtils\nEnvironmentTestUtils allows you to quickly add properties to a ConfigurableEnvironment or\nConfigurableApplicationContext. Simply call it with key=value strings:\nEnvironmentTestUtils.addEnvironment(env, \"org=Spring\", \"name=Boot\");\n41.4.3. OutputCapture\nOutputCapture is a JUnit Rule that you can use to capture System.out and System.err output. Simply\ndeclare the capture as a @Rule then use toString() for assertions:\n165\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.springframework.boot.test.rule.OutputCapture;\nimport static org.hamcrest.Matchers.*;\nimport static org.junit.Assert.*;\npublic class MyTest {\n@Rule\npublic OutputCapture capture = new OutputCapture();\n@Test\npublic void testName() throws Exception {\nSystem.out.println(\"Hello World!\");\nassertThat(capture.toString(), containsString(\"World\"));\n}\n}\n41.4.4. TestRestTemplate\nTestRestTemplate is a convenience alternative to Spring\u2019s RestTemplate that is useful in integration\ntests. You can get a vanilla template or one that sends Basic HTTP authentication (with a username\nand password). In either case the template will behave in a test-friendly way: not following\nredirects (so you can assert the response location), ignoring cookies (so the template is stateless),\nand not throwing exceptions on server-side errors. It is recommended, but not mandatory, to use\nApache HTTP Client (version 4.3.2 or better), and if you have that on your classpath the\nTestRestTemplate will respond by configuring the client appropriately.\npublic class MyTest {\nprivate TestRestTemplate template = new TestRestTemplate();\n@Test\npublic void testRequest() throws Exception {\nHttpHeaders headers = template.getForEntity(\"http://myhost.com\", String.class\n).getHeaders();\nassertThat(headers.getLocation().toString(), containsString(\"myotherhost\"));\n}\n}\nIf you are using the @SpringBootTest annotation with WebEnvironment.RANDOM_PORT or\nWebEnvironment.DEFINED_PORT, you can just inject a fully configured TestRestTemplate and start using\nit. If necessary, additional customizations can be applied via the RestTemplateBuilder bean:\n166\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MyTest {\n@Autowired\nprivate TestRestTemplate template;\n@Test\npublic void testRequest() throws Exception {\nHttpHeaders headers = template.getForEntity(\"http://myhost.com\", String.class\n).getHeaders();\nassertThat(headers.getLocation().toString(), containsString(\"myotherhost\"));\n}\n@TestConfiguration\nstatic class Config {\n@Bean\npublic RestTemplateBuilder restTemplateBuilder() {\nreturn new RestTemplateBuilder()\n.additionalMessageConverters(...)\n.customizers(...);\n}\n}\n}\n167\nChapter 42. WebSockets\nSpring Boot provides WebSockets auto-configuration for embedded Tomcat (8 and 7), Jetty 9 and\nUndertow. If you\u2019re deploying a war file to a standalone container, Spring Boot assumes that the\ncontainer will be responsible for the configuration of its WebSocket support.\nSpring Framework provides rich WebSocket support that can be easily accessed via the spring-\nboot-starter-websocket module.\n168\nChapter 43. Web Services\nSpring Boot provides Web Services auto-configuration so that all is required is defining your\nEndpoints.\nThe Spring Web Services features can be easily accessed via the spring-boot-starter-webservices\nmodule.\n169\nChapter 44. Creating your own auto-\nconfiguration\nIf you work in a company that develops shared libraries, or if you work on an open-source or\ncommercial library, you might want to develop your own auto-configuration. Auto-configuration\nclasses can be bundled in external jars and still be picked-up by Spring Boot.\nAuto-configuration can be associated to a \"starter\" that provides the auto-configuration code as well\nas the typical libraries that you would use with it. We will first cover what you need to know to\nbuild your own auto-configuration and we will move on to the typical steps required to create a\ncustom starter.\n\uf0eb\nA demo project is available to showcase how you can create a starter step by step.\n44.1. Understanding auto-configured beans\nUnder the hood, auto-configuration is implemented with standard @Configuration classes.\nAdditional @Conditional annotations are used to constrain when the auto-configuration should\napply. Usually auto-configuration classes use @ConditionalOnClass and @ConditionalOnMissingBean\nannotations. This ensures that auto-configuration only applies when relevant classes are found and\nwhen you have not declared your own @Configuration.\nYou can browse the source code of spring-boot-autoconfigure to see the @Configuration classes that\nwe provide (see the META-INF/spring.factories file).\n44.2. Locating auto-configuration candidates\nSpring Boot checks for the presence of a META-INF/spring.factories file within your published jar.\nThe file should list your configuration classes under the EnableAutoConfiguration key.\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.mycorp.libx.autoconfigure.LibXAutoConfiguration,\\\ncom.mycorp.libx.autoconfigure.LibXWebAutoConfiguration\nYou can use the @AutoConfigureAfter or @AutoConfigureBefore annotations if your configuration\nneeds to be applied in a specific order. For example, if you provide web-specific configuration, your\nclass may need to be applied after WebMvcAutoConfiguration.\nIf you want to order certain auto-configurations that shouldn\u2019t have any direct knowledge of each\nother, you can also use @AutoconfigureOrder. That annotation has the same semantic as the regular\n@Order annotation but provides a dedicated order for auto-configuration classes.\nAuto-configurations have to be loaded that way only. Make sure that they are\n\uf05a\ndefined in a specific package space and that they are never the target of\ncomponent scan in particular.\n170\n44.3. Condition annotations\nYou almost always want to include one or more @Conditional annotations on your auto-\nconfiguration class. The @ConditionalOnMissingBean is one common example that is used to allow\ndevelopers to \u2018override\u2019 auto-configuration if they are not happy with your defaults.\nSpring Boot includes a number of @Conditional annotations that you can reuse in your own code by\nannotating @Configuration classes or individual @Bean methods.\n44.3.1. Class conditions\nThe @ConditionalOnClass and @ConditionalOnMissingClass annotations allows configuration to be\nincluded based on the presence or absence of specific classes. Due to the fact that annotation\nmetadata is parsed using ASM you can actually use the value attribute to refer to the real class, even\nthough that class might not actually appear on the running application classpath. You can also use\nthe name attribute if you prefer to specify the class name using a String value.\n44.3.2. Bean conditions\nThe @ConditionalOnBean and @ConditionalOnMissingBean annotations allow a bean to be included\nbased on the presence or absence of specific beans. You can use the value attribute to specify beans\nby type, or name to specify beans by name. The search attribute allows you to limit the\nApplicationContext hierarchy that should be considered when searching for beans.\nYou need to be very careful about the order that bean definitions are added as\nthese conditions are evaluated based on what has been processed so far. For this\n\uf0eb\nreason, we recommend only using @ConditionalOnBean and\n@ConditionalOnMissingBean annotations on auto-configuration classes (since these\nare guaranteed to load after any user-define beans definitions have been added).\n@ConditionalOnBean and @ConditionalOnMissingBean do not prevent @Configuration\n\uf05a\nclasses from being created. Using these conditions at the class level is equivalent\nto marking each contained @Bean method with the annotation.\n44.3.3. Property conditions\nThe @ConditionalOnProperty annotation allows configuration to be included based on a Spring\nEnvironment property. Use the prefix and name attributes to specify the property that should be\nchecked. By default any property that exists and is not equal to false will be matched. You can also\ncreate more advanced checks using the havingValue and matchIfMissing attributes.\n44.3.4. Resource conditions\nThe @ConditionalOnResource annotation allows configuration to be included only when a specific\nresource is present. Resources can be specified using the usual Spring conventions, for example,\nfile:/home/user/test.dat.\n171\n44.3.5. Web application conditions\nThe @ConditionalOnWebApplication and @ConditionalOnNotWebApplication annotations allow\nconfiguration to be included depending on whether the application is a 'web application'. A web\napplication is any application that is using a Spring WebApplicationContext, defines a session scope\nor has a StandardServletEnvironment.\n44.3.6. SpEL expression conditions\nThe @ConditionalOnExpression annotation allows configuration to be included based on the result of\na SpEL expression.\n44.4. Creating your own starter\nA full Spring Boot starter for a library may contain the following components:\n\u2022 The autoconfigure module that contains the auto-configuration code.\n\u2022 The starter module that provides a dependency to the autoconfigure module as well as the\nlibrary and any additional dependencies that are typically useful. In a nutshell, adding the\nstarter should be enough to start using that library.\n\uf0eb You may combine the auto-configuration code and the dependency management\nin a single module if you don\u2019t need to separate those two concerns.\n44.4.1. Naming\nPlease make sure to provide a proper namespace for your starter. Do not start your module names\nwith spring-boot, even if you are using a different Maven groupId. We may offer an official support\nfor the thing you\u2019re auto-configuring in the future.\nHere is a rule of thumb. Let\u2019s assume that you are creating a starter for \"acme\", name the auto-\nconfigure module acme-spring-boot-autoconfigure and the starter acme-spring-boot-starter. If you\nonly have one module combining the two, use acme-spring-boot-starter.\nBesides, if your starter provides configuration keys, use a proper namespace for them. In\nparticular, do not include your keys in the namespaces that Spring Boot uses (e.g. server,\nmanagement, spring, etc). These are \"ours\" and we may improve/modify them in the future in such a\nway it could break your things.\nMake sure to trigger meta-data generation so that IDE assistance is available for your keys as well.\nYou may want to review the generated meta-data (META-INF/spring-configuration-metadata.json) to\nmake sure your keys are properly documented.\n44.4.2. Autoconfigure module\nThe autoconfigure module contains everything that is necessary to get started with the library. It\nmay also contain configuration keys definition (@ConfigurationProperties) and any callback\ninterface that can be used to further customize how the components are initialized.\n172\nYou should mark the dependencies to the library as optional so that you can\n\uf0eb\ninclude the autoconfigure module in your projects more easily. If you do it that\nway, the library won\u2019t be provided and Spring Boot will back off by default.\n44.4.3. Starter module\nThe starter is an empty jar, really. Its only purpose is to provide the necessary dependencies to\nwork with the library; see it as an opinionated view of what is required to get started.\nDo not make assumptions about the project in which your starter is added. If the library you are\nauto-configuring typically requires other starters, mention them as well. Providing a proper set of\ndefault dependencies may be hard if the number of optional dependencies is high as you should\navoid bringing unnecessary dependencies for a typical usage of the library.\n173\nChapter 45. What to read next\nIf you want to learn more about any of the classes discussed in this section you can check out the\nSpring Boot API documentation or you can browse the source code directly. If you have specific\nquestions, take a look at the how-to section.\nIf you are comfortable with Spring Boot\u2019s core features, you can carry on and read about\nproduction-ready features.\nSpring Boot Actuator: Production-\nready features\nSpring Boot includes a number of additional features to help you monitor and manage your\napplication when it\u2019s pushed to production. You can choose to manage and monitor your\napplication using HTTP endpoints or with JMX. Auditing, health and metrics gathering can be\nautomatically applied to your application.\nActuator HTTP endpoints are only available with a Spring MVC-based application. In particular, it\nwill not work with Jersey unless you enable Spring MVC as well.\n174\nChapter 46. Enabling production-ready\nfeatures\nThe spring-boot-actuator module provides all of Spring Boot\u2019s production-ready features. The\nsimplest way to enable the features is to add a dependency to the spring-boot-starter-actuator\n\u2018Starter\u2019.\nDefinition of Actuator\nAn actuator is a manufacturing term, referring to a mechanical device for moving or\ncontrolling something. Actuators can generate a large amount of motion from a small change.\nTo add the actuator to a Maven based project, add the following \u2018Starter\u2019 dependency:\n<dependencies>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n</dependencies>\nFor Gradle, use the declaration:\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-starter-actuator\")\n}\n175\nChapter 47. Endpoints\nActuator endpoints allow you to monitor and interact with your application. Spring Boot includes a\nnumber of built-in endpoints and you can also add your own. For example the health endpoint\nprovides basic application health information.\nThe way that endpoints are exposed will depend on the type of technology that you choose. Most\napplications choose HTTP monitoring, where the ID of the endpoint is mapped to a URL. For\nexample, by default, the health endpoint will be mapped to /health.\nThe following technology agnostic endpoints are available:\nID Description Sensitive\nDefault\nactuator\nProvides a hypermedia-based \u201cdiscovery page\u201d for the other true\nendpoints. Requires Spring HATEOAS to be on the classpath.\nautoconfig\nDisplays an auto-configuration report showing all auto- true\nconfiguration candidates and the reason why they \u2018were\u2019 or\n\u2018were not\u2019 applied.\nbeans\nDisplays a complete list of all the Spring beans in your true\napplication.\nconfigprops Displays a collated list of all @ConfigurationProperties. true\ndump\nPerforms a thread dump. true\nenv Exposes properties from Spring\u2019s ConfigurableEnvironment. true\nflyway\nShows any Flyway database migrations that have been true\napplied.\nhealth\nShows application health information (when the application false\nis secure, a simple \u2018status\u2019 when accessed over an\nunauthenticated connection or full message details when\nauthenticated).\ninfo\nDisplays arbitrary application info. false\nloggers\nShows and modifies the configuration of loggers in the true\napplication.\nliquibase\nShows any Liquibase database migrations that have been true\napplied.\nmetrics\nShows \u2018metrics\u2019 information for the current application. true\nmappings Displays a collated list of all @RequestMapping paths. true\nshutdown\nAllows the application to be gracefully shutdown (not true\nenabled by default).\ntrace\nDisplays trace information (by default the last 100 HTTP true\nrequests).\n176\nIf you are using Spring MVC, the following additional endpoints can also be used:\nID Description Sensitive\nDefault\ndocs\nDisplays documentation, including example requests and false\nresponses, for the Actuator\u2019s endpoints. Requires spring-\nboot-actuator-docs to be on the classpath.\nheapdump Returns a GZip compressed hprof heap dump file. true\njolokia\nExposes JMX beans over HTTP (when Jolokia is on the true\nclasspath).\nlogfile Returns the contents of the logfile (if logging.file or true\nlogging.path properties have been set). Supports the use of\nthe HTTP Range header to retrieve part of the log file\u2019s\ncontent.\nDepending on how an endpoint is exposed, the sensitive property may be used as\n\uf05a a security hint. For example, sensitive endpoints will require a\nusername/password when they are accessed over HTTP (or simply disabled if\nweb security is not enabled).\n47.1. Customizing endpoints\nEndpoints can be customized using Spring properties. You can change if an endpoint is enabled, if it\nis considered sensitive and even its id.\nFor example, here is an application.properties that changes the sensitivity and id of the beans\nendpoint and also enables shutdown.\nendpoints.beans.id=springbeans\nendpoints.beans.sensitive=false\nendpoints.shutdown.enabled=true\n\uf05a The prefix \u201fendpoints + . + name\u201d is used to uniquely identify the endpoint that is\nbeing configured.\nBy default, all endpoints except for shutdown are enabled. If you prefer to specifically \u201copt-in\u201d\nendpoint enablement you can use the endpoints.enabled property. For example, the following will\ndisable all endpoints except for info:\nendpoints.enabled=false\nendpoints.info.enabled=true\nLikewise, you can also choose to globally set the \u201csensitive\u201d flag of all endpoints. By default, the\nsensitive flag depends on the type of endpoint (see the table above). For example, to mark all\n177\nendpoints as sensitive except info:\nendpoints.sensitive=true\nendpoints.info.sensitive=false\n47.2. Hypermedia for actuator MVC endpoints\nIf endpoints.hypermedia.enabled is set to true and Spring HATEOAS is on the classpath (e.g. through\nthe spring-boot-starter-hateoas or if you are using Spring Data REST) then the HTTP endpoints\nfrom the Actuator are enhanced with hypermedia links, and a \u201cdiscovery page\u201d is added with links\nto all the endpoints. The \u201cdiscovery page\u201d is available on /actuator by default. It is implemented as\nan endpoint, allowing properties to be used to configure its path (endpoints.actuator.path) and\nwhether or not it is enabled (endpoints.actuator.enabled).\nWhen a custom management context path is configured, the \u201cdiscovery page\u201d will automatically\nmove from /actuator to the root of the management context. For example, if the management\ncontext path is /management then the discovery page will be available from /management.\nIf the HAL Browser is on the classpath via its webjar (org.webjars:hal-browser), or via the spring-\ndata-rest-hal-browser then an HTML \u201cdiscovery page\u201d, in the form of the HAL Browser, is also\nprovided.\n47.3. CORS support\nCross-origin resource sharing (CORS) is a W3C specification that allows you to specify in a flexible\nway what kind of cross domain requests are authorized. Actuator\u2019s MVC endpoints can be\nconfigured to support such scenarios.\nCORS support is disabled by default and is only enabled once the endpoints.cors.allowed-origins\nproperty has been set. The configuration below permits GET and POST calls from the example.com\ndomain:\nendpoints.cors.allowed-origins=http://example.com\nendpoints.cors.allowed-methods=GET,POST\n\uf0eb\nCheck EndpointCorsProperties for a complete list of options.\n47.4. Adding custom endpoints\nIf you add a @Bean of type Endpoint then it will automatically be exposed over JMX and HTTP (if\nthere is an server available). An HTTP endpoints can be customized further by creating a bean of\ntype MvcEndpoint. Your MvcEndpoint is not a @Controller but it can use @RequestMapping (and\n@Managed*) to expose resources.\n178\nIf you are doing this as a library feature consider adding a configuration class\nannotated with @ManagementContextConfiguration to /META-INF/spring.factories\nunder the key\n\uf0eb org.springframework.boot.actuate.autoconfigure.ManagementContextConfiguration.\nIf you do that then the endpoint will move to a child context with all the other\nMVC endpoints if your users ask for a separate management port or address. A\nconfiguration declared this way can be a WebConfigurerAdapter if it wants to add\nstatic resources (for instance) to the management endpoints.\n47.5. Health information\nHealth information can be used to check the status of your running application. It is often used by\nmonitoring software to alert someone if a production system goes down. The default information\nexposed by the health endpoint depends on how it is accessed. For an unauthenticated connection\nin a secure application a simple \u2018status\u2019 message is returned, and for an authenticated connection\nadditional details are also displayed (see HTTP health endpoint access restrictions for HTTP details).\nHealth information is collected from all HealthIndicator beans defined in your ApplicationContext.\nSpring Boot includes a number of auto-configured HealthIndicators and you can also write your\nown.\n47.6. Security with HealthIndicators\nInformation returned by HealthIndicators is often somewhat sensitive in nature. For example, you\nprobably don\u2019t want to publish details of your database server to the world. For this reason, by\ndefault, only the health status is exposed over an unauthenticated HTTP connection. If you are\nhappy for complete health information to always be exposed you can set\nendpoints.health.sensitive to false.\nHealth responses are also cached to prevent \u201cdenial of service\u201d attacks. Use the\nendpoints.health.time-to-live property if you want to change the default cache period of 1000\nmilliseconds.\n47.6.1. Auto-configured HealthIndicators\nThe following HealthIndicators are auto-configured by Spring Boot when appropriate:\nName Description\nCassandraHealthInd\nChecks that a Cassandra database is up.\nicator\nDiskSpaceHealthInd\nChecks for low disk space.\nicator\nDataSourceHealthIn Checks that a connection to DataSource can be obtained.\ndicator\nElasticsearchHealt\nChecks that an Elasticsearch cluster is up.\nhIndicator\n179\nName Description\nJmsHealthIndicator\nChecks that a JMS broker is up.\nMailHealthIndicato\nChecks that a mail server is up.\nr\nMongoHealthIndicat\nChecks that a Mongo database is up.\nor\nRabbitHealthIndica\nChecks that a Rabbit server is up.\ntor\nRedisHealthIndicat\nChecks that a Redis server is up.\nor\nSolrHealthIndicato\nChecks that a Solr server is up.\nr\n\uf0eb It is possible to disable them all using the management.health.defaults.enabled\nproperty.\n47.6.2. Writing custom HealthIndicators\nTo provide custom health information you can register Spring beans that implement the\nHealthIndicator interface. You need to provide an implementation of the health() method and\nreturn a Health response. The Health response should include a status and can optionally include\nadditional details to be displayed.\nimport org.springframework.boot.actuate.health.Health;\nimport org.springframework.boot.actuate.health.HealthIndicator;\nimport org.springframework.stereotype.Component;\n@Component\npublic class MyHealthIndicator implements HealthIndicator {\n@Override\npublic Health health() {\nint errorCode = check(); // perform some specific health check\nif (errorCode != 0) {\nreturn Health.down().withDetail(\"Error Code\", errorCode).build();\n}\nreturn Health.up().build();\n}\n}\nThe identifier for a given HealthIndicator is the name of the bean without the\n\uf05a\nHealthIndicator suffix if it exists. In the example above, the health information\nwill be available in an entry named my.\nIn addition to Spring Boot\u2019s predefined Status types, it is also possible for Health to return a custom\n180\nStatus that represents a new system state. In such cases a custom implementation of the\nHealthAggregator interface also needs to be provided, or the default implementation has to be\nconfigured using the management.health.status.order configuration property.\nFor example, assuming a new Status with code FATAL is being used in one of your HealthIndicator\nimplementations. To configure the severity order add the following to your application properties:\nmanagement.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP\nYou might also want to register custom status mappings with the HealthMvcEndpoint if you access the\nhealth endpoint over HTTP. For example you could map FATAL to HttpStatus.SERVICE_UNAVAILABLE.\n47.7. Application information\nApplication information exposes various information collected from all InfoContributor beans\ndefined in your ApplicationContext. Spring Boot includes a number of auto-configured\nInfoContributors and you can also write your own.\n47.7.1. Auto-configured InfoContributors\nThe following InfoContributors are auto-configured by Spring Boot when appropriate:\nName Description\nEnvironmentInfoCon Expose any key from the Environment under the info key.\ntributor\nGitInfoContributor Expose git information if a git.properties file is available.\nBuildInfoContribut Expose build information if a META-INF/build-info.properties file is available.\nor\n\uf0eb It is possible to disable them all using the management.info.defaults.enabled\nproperty.\n47.7.2. Custom application info information\nYou can customize the data exposed by the info endpoint by setting info.* Spring properties. All\nEnvironment properties under the info key will be automatically exposed. For example, you could\nadd the following to your application.properties:\ninfo.app.encoding=UTF-8\ninfo.app.java.source=1.8\ninfo.app.java.target=1.8\n181\nRather than hardcoding those values you could also expand info properties at\nbuild time.\nAssuming you are using Maven, you could rewrite the example above as follows:\n\uf0eb\ninfo.app.encoding=@project.build.sourceEncoding@\ninfo.app.java.source=@java.version@\ninfo.app.java.target=@java.version@\n47.7.3. Git commit information\nAnother useful feature of the info endpoint is its ability to publish information about the state of\nyour git source code repository when the project was built. If a GitProperties bean is available, the\ngit.branch, git.commit.id and git.commit.time properties will be exposed.\n\uf0eb A GitProperties bean is auto-configured if a git.properties file is available at the\nroot of the classpath. See Generate git information for more details.\nIf you want to display the full git information (i.e. the full content of git.properties), use the\nmanagement.info.git.mode property:\nmanagement.info.git.mode=full\n47.7.4. Build information\nThe info endpoint can also publish information about your build if a BuildProperties bean is\navailable. This happens if a META-INF/build-info.properties file is available in the classpath.\n\uf0eb The Maven and Gradle plugins can both generate that file, see Generate build\ninformation for more details.\n47.7.5. Writing custom InfoContributors\nTo provide custom application information you can register Spring beans that implement the\nInfoContributor interface.\nThe example below contributes an example entry with a single value:\n182\nimport java.util.Collections;\nimport org.springframework.boot.actuate.info.Info;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.stereotype.Component;\n@Component\npublic class ExampleInfoContributor implements InfoContributor {\n@Override\npublic void contribute(Info.Builder builder) {\nbuilder.withDetail(\"example\",\nCollections.singletonMap(\"key\", \"value\"));\n}\n}\nIf you hit the info endpoint you should see a response that contains the following additional entry:\n{\n\"example\": {\n\"key\" : \"value\"\n}\n}\n183\nChapter 48. Monitoring and management\nover HTTP\nIf you are developing a Spring MVC application, Spring Boot Actuator will auto-configure all\nenabled endpoints to be exposed over HTTP. The default convention is to use the id of the endpoint\nas the URL path. For example, health is exposed as /health.\n48.1. Securing sensitive endpoints\nIf you add \u2018Spring Security\u2019 to your project, all sensitive endpoints exposed over HTTP will be\nprotected. By default \u2018basic\u2019 authentication will be used with the username user and a generated\npassword (which is printed on the console when the application starts).\n\uf0eb Generated passwords are logged as the application starts. Search for \u2018Using\ndefault security password\u2019.\nYou can use Spring properties to change the username and password and to change the security\nrole(s) required to access the endpoints. For example, you might set the following in your\napplication.properties:\nsecurity.user.name=admin\nsecurity.user.password=secret\nmanagement.security.roles=SUPERUSER\nIf you don\u2019t use Spring Security and your HTTP endpoints are exposed publicly,\n\uf0eb you should carefully consider which endpoints you enable. See Customizing\nendpoints for details of how you can set endpoints.enabled to false then \u201copt-in\u201d\nonly specific endpoints.\n48.2. Customizing the management endpoint paths\nSometimes it is useful to group all management endpoints under a single path. For example, your\napplication might already use /info for another purpose. You can use the management.context-path\nproperty to set a prefix for your management endpoint:\nmanagement.context-path=/manage\nThe application.properties example above will change the endpoint from /{id} to /manage/{id}\n(e.g. /manage/info).\nYou can also change the \u201cid\u201d of an endpoint (using endpoints.{name}.id) which then changes the\ndefault resource path for the MVC endpoint. Legal endpoint ids are composed only of alphanumeric\ncharacters (because they can be exposed in a number of places, including JMX object names, where\nspecial characters are forbidden). The MVC path can be changed separately by configuring\n184\nendpoints.{name}.path, and there is no validation on those values (so you can use anything that is\nlegal in a URL path). For example, to change the location of the /health endpoint to /ping/me you can\nset endpoints.health.path=/ping/me.\nIf you provide a custom MvcEndpoint remember to include a settable path\nproperty, and default it to /{id} if you want your code to behave like the standard\n\uf0eb\nMVC endpoints. (Take a look at the HealthMvcEndpoint to see how you might do\nthat.) If your custom endpoint is an Endpoint (not an MvcEndpoint) then Spring\nBoot will take care of the path for you.\n48.3. Customizing the management server port\nExposing management endpoints using the default HTTP port is a sensible choice for cloud based\ndeployments. If, however, your application runs inside your own data center you may prefer to\nexpose endpoints using a different HTTP port.\nThe management.port property can be used to change the HTTP port.\nmanagement.port=8081\nSince your management port is often protected by a firewall, and not exposed to the public you\nmight not need security on the management endpoints, even if your main application is secure. In\nthat case you will have Spring Security on the classpath, and you can disable management security\nlike this:\nmanagement.security.enabled=false\n(If you don\u2019t have Spring Security on the classpath then there is no need to explicitly disable the\nmanagement security in this way, and it might even break the application.)\n48.4. Configuring management-specific SSL\nWhen configured to use a custom port, the management server can also be configured with its own\nSSL using the various management.ssl.* properties. For example, this allows a management server\nto be available via HTTP while the main application uses HTTPS:\nserver.port=8443\nserver.ssl.enabled=true\nserver.ssl.key-store=classpath:store.jks\nserver.ssl.key-password=secret\nmanagement.port=8080\nmanagement.ssl.enable=false\nAlternatively, both the main server and the management server can use SSL but with different key\nstores:\n185\nserver.port=8443\nserver.ssl.enabled=true\nserver.ssl.key-store=classpath:main.jks\nserver.ssl.key-password=secret\nmanagement.port=8080\nmanagement.ssl.enable=true\nmanagement.ssl.key-store=classpath:management.jks\nmanagement.ssl.key-password=secret\n48.5. Customizing the management server address\nYou can customize the address that the management endpoints are available on by setting the\nmanagement.address property. This can be useful if you want to listen only on an internal or ops-\nfacing network, or to only listen for connections from localhost.\n\uf05a You can only listen on a different address if the port is different to the main\nserver port.\nHere is an example application.properties that will not allow remote management connections:\nmanagement.port=8081\nmanagement.address=127.0.0.1\n48.6. Disabling HTTP endpoints\nIf you don\u2019t want to expose endpoints over HTTP you can set the management port to -1:\nmanagement.port=-1\n48.7. HTTP health endpoint access restrictions\nThe information exposed by the health endpoint varies depending on whether or not it\u2019s accessed\nanonymously, and whether or not the enclosing application is secure. By default, when accessed\nanonymously in a secure application, any details about the server\u2019s health are hidden and the\nendpoint will simply indicate whether or not the server is up or down. Furthermore the response is\ncached for a configurable period to prevent the endpoint being used in a denial of service attack.\nThe endpoints.health.time-to-live property is used to configure the caching period in milliseconds.\nIt defaults to 1000, i.e. one second.\nThe above-described restrictions can be enhanced, thereby allowing only authenticated users full\naccess to the health endpoint in a secure application. To do so, set endpoints.health.sensitive to\ntrue. Here\u2019s a summary of behavior (with default sensitive flag value \u201cfalse\u201d indicated in bold):\n186\nmanagement.security.en endpoints.health.sensi\nUnauthenticated Authenticated\nabled tive\nfalse false Full content Full content\nfalse true Status only Full content\ntrue false Status only Full content\ntrue true No content Full content\n187\nChapter 49. Monitoring and management\nover JMX\nJava Management Extensions (JMX) provide a standard mechanism to monitor and manage\napplications. By default Spring Boot will expose management endpoints as JMX MBeans under the\norg.springframework.boot domain.\n49.1. Customizing MBean names\nThe name of the MBean is usually generated from the id of the endpoint. For example the health\nendpoint is exposed as org.springframework.boot/Endpoint/healthEndpoint.\nIf your application contains more than one Spring ApplicationContext you may find that names\nclash. To solve this problem you can set the endpoints.jmx.unique-names property to true so that\nMBean names are always unique.\nYou can also customize the JMX domain under which endpoints are exposed. Here is an example\napplication.properties:\nendpoints.jmx.domain=myapp\nendpoints.jmx.unique-names=true\n49.2. Disabling JMX endpoints\nIf you don\u2019t want to expose endpoints over JMX you can set the endpoints.jmx.enabled property to\nfalse:\nendpoints.jmx.enabled=false\n49.3. Using Jolokia for JMX over HTTP\nJolokia is a JMX-HTTP bridge giving an alternative method of accessing JMX beans. To use Jolokia,\nsimply include a dependency to org.jolokia:jolokia-core. For example, using Maven you would\nadd the following:\n<dependency>\n<groupId>org.jolokia</groupId>\n<artifactId>jolokia-core</artifactId>\n</dependency>\nJolokia can then be accessed using /jolokia on your management HTTP server.\n188\n49.3.1. Customizing Jolokia\nJolokia has a number of settings that you would traditionally configure using servlet parameters.\nWith Spring Boot you can use your application.properties, simply prefix the parameter with\njolokia.config.:\njolokia.config.debug=true\n49.3.2. Disabling Jolokia\nIf you are using Jolokia but you don\u2019t want Spring Boot to configure it, simply set the\nendpoints.jolokia.enabled property to false:\nendpoints.jolokia.enabled=false\n189\nChapter 50. Loggers\nSpring Boot Actuator includes the ability to view and configure the log levels of your application at\nruntime. You can view either the entire list or an individual logger\u2019s configuration which is made\nup of both the explicitly configured logging level as well as the effective logging level given to it by\nthe logging framework. These levels can be:\nTRACE\n\u2022\nDEBUG\n\u2022\nINFO\n\u2022\nWARN\n\u2022\nERROR\n\u2022\nFATAL\n\u2022\nOFF\n\u2022\nnull\n\u2022\nwith null indicating that there is no explicit configuration.\n50.1. Configure a Logger\nIn order to configure a given logger, you POST a partial entity to the resource\u2019s URI:\n{\n\"configuredLevel\": \"DEBUG\"\n}\n190\nChapter 51. Metrics\nSpring Boot Actuator includes a metrics service with \u2018gauge\u2019 and \u2018counter\u2019 support. A \u2018gauge\u2019\nrecords a single value; and a \u2018counter\u2019 records a delta (an increment or decrement). Spring Boot\nActuator also provides a PublicMetrics interface that you can implement to expose metrics that you\ncannot record via one of those two mechanisms. Look at SystemPublicMetrics for an example.\nMetrics for all HTTP requests are automatically recorded, so if you hit the metrics endpoint you\nshould see a response similar to this:\n{\n\"counter.status.200.root\": 20,\n\"counter.status.200.metrics\": 3,\n\"counter.status.200.star-star\": 5,\n\"counter.status.401.root\": 4,\n\"gauge.response.star-star\": 6,\n\"gauge.response.root\": 2,\n\"gauge.response.metrics\": 3,\n\"classes\": 5808,\n\"classes.loaded\": 5808,\n\"classes.unloaded\": 0,\n\"heap\": 3728384,\n\"heap.committed\": 986624,\n\"heap.init\": 262144,\n\"heap.used\": 52765,\n\"nonheap\": 0,\n\"nonheap.committed\": 77568,\n\"nonheap.init\": 2496,\n\"nonheap.used\": 75826,\n\"mem\": 986624,\n\"mem.free\": 933858,\n\"processors\": 8,\n\"threads\": 15,\n\"threads.daemon\": 11,\n\"threads.peak\": 15,\n\"threads.totalStarted\": 42,\n\"uptime\": 494836,\n\"instance.uptime\": 489782,\n\"datasource.primary.active\": 5,\n\"datasource.primary.usage\": 0.25\n}\nHere we can see basic memory, heap, class loading, processor and thread pool information along with\nsome HTTP metrics. In this instance the root (\u2018/\u2019) and /metrics URLs have returned HTTP 200\nresponses 20 and 3 times respectively. It also appears that the root URL returned HTTP 401\n(unauthorized) 4 times. The double asterisks (star-star) comes from a request matched by Spring\nMVC as /** (normally a static resource).\nThe gauge shows the last response time for a request. So the last request to root took 2ms to respond\n191\nand the last to /metrics took 3ms.\n\uf05a In this example we are actually accessing the endpoint over HTTP using the\n/metrics URL, this explains why metrics appears in the response.\n51.1. System metrics\nThe following system metrics are exposed by Spring Boot:\n\u2022 The total system memory in KB (mem)\n\u2022 The amount of free memory in KB (mem.free)\n\u2022 The number of processors (processors)\n\u2022 The system uptime in milliseconds (uptime)\n\u2022 The application context uptime in milliseconds (instance.uptime)\n\u2022 The average system load (systemload.average)\n\u2022 Heap information in KB (heap, heap.committed, heap.init, heap.used)\n\u2022 Thread information (threads, thread.peak, thread.daemon)\n\u2022 Class load information (classes, classes.loaded, classes.unloaded)\n\u2022 Garbage collection information (gc.xxx.count, gc.xxx.time)\n51.2. DataSource metrics\nThe following metrics are exposed for each supported DataSource defined in your application:\n\u2022 The number of active connections (datasource.xxx.active)\n\u2022 The current usage of the connection pool (datasource.xxx.usage).\nAll data source metrics share the datasource. prefix. The prefix is further qualified for each data\nsource:\n\u2022 If the data source is the primary data source (that is either the only available data source or the\none flagged @Primary amongst the existing ones), the prefix is datasource.primary.\n\u2022 If the data source bean name ends with DataSource, the prefix is the name of the bean without\nDataSource (i.e. datasource.batch for batchDataSource).\n\u2022 In all other cases, the name of the bean is used.\nIt is possible to override part or all of those defaults by registering a bean with a customized\nversion of DataSourcePublicMetrics. By default, Spring Boot provides metadata for all supported\ndata sources; you can add additional DataSourcePoolMetadataProvider beans if your favorite data\nsource isn\u2019t supported out of the box. See DataSourcePoolMetadataProvidersConfiguration for\nexamples.\n192\n51.3. Cache metrics\nThe following metrics are exposed for each supported cache defined in your application:\n\u2022 The current size of the cache (cache.xxx.size)\n\u2022 Hit ratio (cache.xxx.hit.ratio)\n\u2022 Miss ratio (cache.xxx.miss.ratio)\nCache providers do not expose the hit/miss ratio in a consistent way. While some\n\uf05a expose an aggregated value (i.e. the hit ratio since the last time the stats were\ncleared), others expose a temporal value (i.e. the hit ratio of the last second).\nCheck your caching provider documentation for more details.\nIf two different cache managers happen to define the same cache, the name of the cache is prefixed\nby the name of the CacheManager bean.\nIt is possible to override part or all of those defaults by registering a bean with a customized\nversion of CachePublicMetrics. By default, Spring Boot provides cache statistics for EhCache,\nHazelcast, Infinispan, JCache and Caffeine. You can add additional CacheStatisticsProvider beans if\nyour favorite caching library isn\u2019t supported out of the box. See CacheStatisticsAutoConfiguration\nfor examples.\n51.4. Tomcat session metrics\nIf you are using Tomcat as your embedded servlet container, session metrics will automatically be\nexposed. The httpsessions.active and httpsessions.max keys provide the number of active and\nmaximum sessions.\n51.5. Recording your own metrics\nTo record your own metrics inject a CounterService and/or GaugeService into your bean. The\nCounterService exposes increment, decrement and reset methods; the GaugeService provides a submit\nmethod.\nHere is a simple example that counts the number of times that a method is invoked:\n193\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.metrics.CounterService;\nimport org.springframework.stereotype.Service;\n@Service\npublic class MyService {\nprivate final CounterService counterService;\n@Autowired\npublic MyService(CounterService counterService) {\nthis.counterService = counterService;\n}\npublic void exampleMethod() {\nthis.counterService.increment(\"services.system.myservice.invoked\");\n}\n}\nYou can use any string as a metric name but you should follow guidelines of your\n\uf0eb\nchosen store/graphing technology. Some good guidelines for Graphite are\navailable on Matt Aimonetti\u2019s Blog.\n51.6. Adding your own public metrics\nTo add additional metrics that are computed every time the metrics endpoint is invoked, simply\nregister additional PublicMetrics implementation bean(s). By default, all such beans are gathered\nby the endpoint. You can easily change that by defining your own MetricsEndpoint.\n51.7. Special features with Java 8\nThe default implementation of GaugeService and CounterService provided by Spring Boot depends\non the version of Java that you are using. With Java 8 (or better) the implementation switches to a\nhigh-performance version optimized for fast writes, backed by atomic in-memory buffers, rather\nthan by the immutable but relatively expensive Metric<?> type (counters are approximately 5 times\nfaster and gauges approximately twice as fast as the repository-based implementations). The\nDropwizard metrics services (see below) are also very efficient even for Java 7 (they have backports\nof some of the Java 8 concurrency libraries), but they do not record timestamps for metric values. If\nperformance of metric gathering is a concern then it is always advisable to use one of the high-\nperformance options, and also to only read metrics infrequently, so that the writes are buffered\nlocally and only read when needed.\n\uf05a The old MetricRepository and its InMemoryMetricRepository implementation are\nnot used by default if you are on Java 8 or if you are using Dropwizard metrics.\n194\n51.8. Metric writers, exporters and aggregation\nSpring Boot provides a couple of implementations of a marker interface called Exporter which can\nbe used to copy metric readings from the in-memory buffers to a place where they can be analyzed\nand displayed. Indeed, if you provide a @Bean that implements the MetricWriter interface (or\nGaugeWriter for simple use cases) and mark it @ExportMetricWriter, then it will automatically be\nhooked up to an Exporter and fed metric updates every 5 seconds (configured via\nspring.metrics.export.delay-millis). In addition, any MetricReader that you define and mark as\n@ExportMetricReader will have its values exported by the default exporter.\nThe default exporter is a MetricCopyExporter which tries to optimize itself by not copying values that\nhaven\u2019t changed since it was last called (the optimization can be switched off using a flag\nspring.metrics.export.send-latest). Note also that the Dropwizard MetricRegistry has no support\nfor timestamps, so the optimization is not available if you are using Dropwizard metrics (all metrics\nwill be copied on every tick).\nThe default values for the export trigger (delay-millis, includes, excludes and send-latest) can be\nset as spring.metrics.export.*. Individual values for specific MetricWriters can be set as\nspring.metrics.export.triggers.<name>.* where <name> is a bean name (or pattern for matching\nbean names).\nThe automatic export of metrics is disabled if you switch off the default\n\uf071 MetricRepository (e.g. by using Dropwizard metrics). You can get back the same\nfunctionality be declaring a bean of your own of type MetricReader and declaring\nit to be @ExportMetricReader.\n51.8.1. Example: Export to Redis\nIf you provide a @Bean of type RedisMetricRepository and mark it @ExportMetricWriter the metrics\nare exported to a Redis cache for aggregation. The RedisMetricRepository has two important\nparameters to configure it for this purpose: prefix and key (passed into its constructor). It is best to\nuse a prefix that is unique to the application instance (e.g. using a random value and maybe the\nlogical name of the application to make it possible to correlate with other instances of the same\napplication). The \u201ckey\u201d is used to keep a global index of all metric names, so it should be unique\n\u201cglobally\u201d, whatever that means for your system (e.g. two instances of the same system could share\na Redis cache if they have distinct keys).\nExample:\n@Bean\n@ExportMetricWriter\nMetricWriter metricWriter(MetricExportProperties export) {\nreturn new RedisMetricRepository(connectionFactory,\nexport.getRedis().getPrefix(), export.getRedis().getKey());\n}\n195\napplication.properties\nspring.metrics.export.redis.prefix:\nmetrics.mysystem.${spring.application.name:application}.${random.value:0000}\nspring.metrics.export.redis.key: keys.metrics.mysystem\nThe prefix is constructed with the application name and id at the end, so it can easily be used to\nidentify a group of processes with the same logical name later.\nIt\u2019s important to set both the key and the prefix. The key is used for all repository\noperations, and can be shared by multiple repositories. If multiple repositories\nshare a key (like in the case where you need to aggregate across them), then you\n\uf05a normally have a read-only \u201cmaster\u201d repository that has a short, but identifiable,\nprefix (like \u201cmetrics.mysystem\u201d), and many write-only repositories with prefixes\nthat start with the master prefix (like metrics.mysystem.* in the example above). It\nis efficient to read all the keys from a \u201cmaster\u201d repository like that, but inefficient\nto read a subset with a longer prefix (e.g. using one of the writing repositories).\nThe example above uses MetricExportProperties to inject and extract the key and\n\uf0eb prefix. This is provided to you as a convenience by Spring Boot, configured with\nsensible defaults. There is nothing to stop you using your own values as long as\nthey follow the recommendations.\n51.8.2. Example: Export to Open TSDB\nIf you provide a @Bean of type OpenTsdbGaugeWriter and mark it @ExportMetricWriter metrics are\nexported to Open TSDB for aggregation. The OpenTsdbGaugeWriter has a url property that you need\nto set to the Open TSDB \u201c/put\u201d endpoint, e.g. localhost:4242/api/put). It also has a namingStrategy\nthat you can customize or configure to make the metrics match the data structure you need on the\nserver. By default it just passes through the metric name as an Open TSDB metric name, and adds\nthe tags \u201cdomain\u201d (with value \u201corg.springframework.metrics\u201d) and \u201cprocess\u201d (with the value equal\nto the object hash of the naming strategy). Thus, after running the application and generating some\nmetrics you can inspect the metrics in the TSD UI (localhost:4242 by default).\nExample:\n196\ncurl localhost:4242/api/query?start=1h-ago&m=max:counter.status.200.root\n[\n{\n\"metric\": \"counter.status.200.root\",\n\"tags\": {\n\"domain\": \"org.springframework.metrics\",\n\"process\": \"b968a76\"\n},\n\"aggregateTags\": [],\n\"dps\": {\n\"1430492872\": 2,\n\"1430492875\": 6\n}\n}\n]\n51.8.3. Example: Export to Statsd\nTo export metrics to Statsd, make sure first that you have added com.timgroup:java-statsd-client as\na dependency of your project (Spring Boot provides a dependency management for it). Then add a\nspring.metrics.export.statsd.host value to your application.properties file. Connections will be\nopened to port 8125 unless a spring.metrics.export.statsd.port override is provided. You can use\nspring.metrics.export.statsd.prefix if you want a custom prefix.\nAlternatively, you can provide a @Bean of type StatsdMetricWriter and mark it @ExportMetricWriter:\n@Value(\"${spring.application.name:application}.${random.value:0000}\")\nprivate String prefix = \"metrics\";\n@Bean\n@ExportMetricWriter\nMetricWriter metricWriter() {\nreturn new StatsdMetricWriter(prefix, \"localhost\", 8125);\n}\n51.8.4. Example: Export to JMX\nIf you provide a @Bean of type JmxMetricWriter marked @ExportMetricWriter the metrics are exported\nas MBeans to the local server (the MBeanExporter is provided by Spring Boot JMX auto-configuration\nas long as it is switched on). Metrics can then be inspected, graphed, alerted etc. using any tool that\nunderstands JMX (e.g. JConsole or JVisualVM).\nExample:\n197\n@Bean\n@ExportMetricWriter\nMetricWriter metricWriter(MBeanExporter exporter) {\nreturn new JmxMetricWriter(exporter);\n}\nEach metric is exported as an individual MBean. The format for the ObjectNames is given by an\nObjectNamingStrategy which can be injected into the JmxMetricWriter (the default breaks up the\nmetric name and tags the first two period-separated sections in a way that should make the metrics\ngroup nicely in JVisualVM or JConsole).\n51.9. Aggregating metrics from multiple sources\nThere is an AggregateMetricReader that you can use to consolidate metrics from different physical\nsources. Sources for the same logical metric just need to publish them with a period-separated\nprefix, and the reader will aggregate (by truncating the metric names, and dropping the prefix).\nCounters are summed and everything else (i.e. gauges) take their most recent value.\nThis is very useful if multiple application instances are feeding to a central (e.g. Redis) repository\nand you want to display the results. Particularly recommended in conjunction with a\nMetricReaderPublicMetrics for hooking up to the results to the \u201c/metrics\u201d endpoint.\nExample:\n@Autowired\nprivate MetricExportProperties export;\n@Bean\npublic PublicMetrics metricsAggregate() {\nreturn new MetricReaderPublicMetrics(aggregatesMetricReader());\n}\nprivate MetricReader globalMetricsForAggregation() {\nreturn new RedisMetricRepository(this.connectionFactory,\nthis.export.getRedis().getAggregatePrefix(), this.export.getRedis().getKey());\n}\nprivate MetricReader aggregatesMetricReader() {\nAggregateMetricReader repository = new AggregateMetricReader(\nglobalMetricsForAggregation());\nreturn repository;\n}\nThe example above uses MetricExportProperties to inject and extract the key and\n\uf05a\nprefix. This is provided to you as a convenience by Spring Boot, and the defaults\nwill be sensible. They are set up in MetricExportAutoConfiguration.\n198\nThe MetricReaders above are not @Beans and are not marked as\n\uf05a\n@ExportMetricReader because they are just collecting and analyzing data from\nother repositories, and don\u2019t want to export their values.\n51.10. Dropwizard Metrics\nA default MetricRegistry Spring bean will be created when you declare a dependency to the\nio.dropwizard.metrics:metrics-core library; you can also register you own @Bean instance if you\nneed customizations. Users of the Dropwizard \u2018Metrics\u2019 library will find that Spring Boot metrics\nare automatically published to com.codahale.metrics.MetricRegistry. Metrics from the\nMetricRegistry are also automatically exposed via the /metrics endpoint\nWhen Dropwizard metrics are in use, the default CounterService and GaugeService are replaced with\na DropwizardMetricServices, which is a wrapper around the MetricRegistry (so you can @Autowired\none of those services and use it as normal). You can also create \u201cspecial\u201d Dropwizard metrics by\nprefixing your metric names with the appropriate type (i.e. timer.*, histogram.* for gauges, and\nmeter.* for counters).\n51.11. Message channel integration\nIf a MessageChannel bean called metricsChannel exists, then a MetricWriter will be created that writes\nmetrics to that channel. The writer is automatically hooked up to an exporter (as for all writers), so\nall metric values will appear on the channel, and additional analysis or actions can be taken by\nsubscribers (it\u2019s up to you to provide the channel and any subscribers you need).\n199\nChapter 52. Auditing\nSpring Boot Actuator has a flexible audit framework that will publish events once Spring Security is\nin play (\u2018authentication success\u2019, \u2018failure\u2019 and \u2018access denied\u2019 exceptions by default). This can be\nvery useful for reporting, and also to implement a lock-out policy based on authentication failures.\nTo customize published security events you can provide your own implementations of\nAbstractAuthenticationAuditListener and AbstractAuthorizationAuditListener.\nYou can also choose to use the audit services for your own business events. To do that you can\neither inject the existing AuditEventRepository into your own components and use that directly, or\nyou can simply publish AuditApplicationEvent via the Spring ApplicationEventPublisher (using\nApplicationEventPublisherAware).\n200\nChapter 53. Tracing\nTracing is automatically enabled for all HTTP requests. You can view the trace endpoint and obtain\nbasic information about the last 100 requests:\n[{\n\"timestamp\": 1394343677415,\n\"info\": {\n\"method\": \"GET\",\n\"path\": \"/trace\",\n\"headers\": {\n\"request\": {\n\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n\"Connection\": \"keep-alive\",\n\"Accept-Encoding\": \"gzip, deflate\",\n\"User-Agent\": \"Mozilla/5.0 Gecko/Firefox\",\n\"Accept-Language\": \"en-US,en;q=0.5\",\n\"Cookie\": \"_ga=GA1.1.827067509.1390890128; ...\"\n\"Authorization\": \"Basic ...\",\n\"Host\": \"localhost:8080\"\n},\n\"response\": {\n\"Strict-Transport-Security\": \"max-age=31536000 ; includeSubDomains\",\n\"X-Application-Context\": \"application:8080\",\n\"Content-Type\": \"application/json;charset=UTF-8\",\n\"status\": \"200\"\n}\n}\n}\n},{\n\"timestamp\": 1394343684465,\n...\n}]\n53.1. Custom tracing\nIf you need to trace additional events you can inject a TraceRepository into your Spring beans. The\nadd method accepts a single Map structure that will be converted to JSON and logged.\nBy default an InMemoryTraceRepository will be used that stores the last 100 events. You can define\nyour own instance of the InMemoryTraceRepository bean if you need to expand the capacity. You can\nalso create your own alternative TraceRepository implementation if needed.\n201\nChapter 54. Process monitoring\nIn Spring Boot Actuator you can find a couple of classes to create files that are useful for process\nmonitoring:\n\u2022 ApplicationPidFileWriter creates a file containing the application PID (by default in the\napplication directory with the file name application.pid).\n\u2022 EmbeddedServerPortFileWriter creates a file (or files) containing the ports of the embedded\nserver (by default in the application directory with the file name application.port).\nThese writers are not activated by default, but you can enable them in one of the ways described\nbelow.\n54.1. Extend configuration\nIn META-INF/spring.factories file you can activate the listener(s) that writes a PID file. Example:\norg.springframework.context.ApplicationListener=\\\norg.springframework.boot.actuate.system.ApplicationPidFileWriter,\norg.springframework.boot.actuate.system.EmbeddedServerPortFileWriter\n54.2. Programmatically\nYou can also activate a listener by invoking the SpringApplication.addListeners(\u2026) method and\npassing the appropriate Writer object. This method also allows you to customize the file name and\npath via the Writer constructor.\n202\nChapter 55. What to read next\nIf you want to explore some of the concepts discussed in this chapter, you can take a look at the\nactuator sample applications. You also might want to read about graphing tools such as Graphite.\nOtherwise, you can continue on, to read about \u2018deployment options\u2019 or jump ahead for some in-\ndepth information about Spring Boot\u2019s build tool plugins.\nDeploying Spring Boot applications\nSpring Boot\u2019s flexible packaging options provide a great deal of choice when it comes to deploying\nyour application. You can easily deploy Spring Boot applications to a variety of cloud platforms, to a\ncontainer images (such as Docker) or to virtual/real machines.\nThis section covers some of the more common deployment scenarios.\n203\nChapter 56. Deploying to the cloud\nSpring Boot\u2019s executable jars are ready-made for most popular cloud PaaS (platform-as-a-service)\nproviders. These providers tend to require that you \u201cbring your own container\u201d; they manage\napplication processes (not Java applications specifically), so they need some intermediary layer that\nadapts your application to the cloud\u2019s notion of a running process.\nTwo popular cloud providers, Heroku and Cloud Foundry, employ a \u201cbuildpack\u201d approach. The\nbuildpack wraps your deployed code in whatever is needed to start your application: it might be a\nJDK and a call to java, it might be an embedded web server, or it might be a full-fledged application\nserver. A buildpack is pluggable, but ideally you should be able to get by with as few customizations\nto it as possible. This reduces the footprint of functionality that is not under your control. It\nminimizes divergence between development and production environments.\nIdeally, your application, like a Spring Boot executable jar, has everything that it needs to run\npackaged within it.\nIn this section we\u2019ll look at what it takes to get the simple application that we developed in the\n\u201cGetting Started\u201d section up and running in the Cloud.\n56.1. Cloud Foundry\nCloud Foundry provides default buildpacks that come into play if no other buildpack is specified.\nThe Cloud Foundry Java buildpack has excellent support for Spring applications, including Spring\nBoot. You can deploy stand-alone executable jar applications, as well as traditional .war packaged\napplications.\nOnce you\u2019ve built your application (using, for example, mvn clean package) and installed the cf\ncommand line tool, simply deploy your application using the cf push command as follows,\nsubstituting the path to your compiled .jar. Be sure to have logged in with your cf command line\nclient before pushing an application.\n$ cf push acloudyspringtime -p target/demo-0.0.1-SNAPSHOT.jar\nSee the cf push documentation for more options. If there is a Cloud Foundry manifest.yml file\npresent in the same directory, it will be consulted.\n\uf05a Here we are substituting acloudyspringtime for whatever value you give cf as the\nname of your application.\nAt this point cf will start uploading your application:\n204\nUploading acloudyspringtime... OK\nPreparing to start acloudyspringtime... OK\n-----> Downloaded app package (8.9M)\n-----> Java Buildpack source: system\n-----> Downloading Open JDK 1.7.0_51 from .../x86_64/openjdk-1.7.0_51.tar.gz (1.8s)\nExpanding Open JDK to .java-buildpack/open_jdk (1.2s)\n-----> Downloading Spring Auto Reconfiguration from 0.8.7 .../auto-reconfiguration-\n0.8.7.jar (0.1s)\n-----> Uploading droplet (44M)\nChecking status of app 'acloudyspringtime'...\n0 of 1 instances running (1 starting)\n...\n0 of 1 instances running (1 down)\n...\n0 of 1 instances running (1 starting)\n...\n1 of 1 instances running (1 running)\nApp started\nCongratulations! The application is now live!\nIt\u2019s easy to then verify the status of the deployed application:\n$ cf apps\nGetting applications in ...\nOK\nname requested state instances memory disk urls\n...\nacloudyspringtime started 1/1 512M 1G\nacloudyspringtime.cfapps.io\n...\nOnce Cloud Foundry acknowledges that your application has been deployed, you should be able to\nhit the application at the URI given, in this case http://acloudyspringtime.cfapps.io/.\n56.1.1. Binding to services\nBy default, metadata about the running application as well as service connection information is\nexposed to the application as environment variables (for example: $VCAP_SERVICES). This\narchitecture decision is due to Cloud Foundry\u2019s polyglot (any language and platform can be\nsupported as a buildpack) nature; process-scoped environment variables are language agnostic.\nEnvironment variables don\u2019t always make for the easiest API so Spring Boot automatically extracts\nthem and flattens the data into properties that can be accessed through Spring\u2019s Environment\nabstraction:\n205\n@Component\nclass MyBean implements EnvironmentAware {\nprivate String instanceId;\n@Override\npublic void setEnvironment(Environment environment) {\nthis.instanceId = environment.getProperty(\"vcap.application.instance_id\");\n}\n// ...\n}\nAll Cloud Foundry properties are prefixed with vcap. You can use vcap properties to access\napplication information (such as the public URL of the application) and service information (such\nas database credentials). See CloudFoundryVcapEnvironmentPostProcessor Javadoc for complete\ndetails.\nThe Spring Cloud Connectors project is a better fit for tasks such as configuring a\n\uf0eb\nDataSource. Spring Boot includes auto-configuration support and a spring-boot-\nstarter-cloud-connectors starter.\n56.2. Heroku\nHeroku is another popular PaaS platform. To customize Heroku builds, you provide a Procfile,\nwhich provides the incantation required to deploy an application. Heroku assigns a port for the\nJava application to use and then ensures that routing to the external URI works.\nYou must configure your application to listen on the correct port. Here\u2019s the Procfile for our starter\nREST application:\nweb: java -Dserver.port=$PORT -jar target/demo-0.0.1-SNAPSHOT.jar\nSpring Boot makes -D arguments available as properties accessible from a Spring Environment\ninstance. The server.port configuration property is fed to the embedded Tomcat, Jetty or Undertow\ninstance which then uses it when it starts up. The $PORT environment variable is assigned to us by\nthe Heroku PaaS.\nHeroku by default will use Java 1.8. This is fine as long as your Maven or Gradle build is set to use\nthe same version (Maven users can use the java.version property). If you want to use JDK 1.7, create\na new file adjacent to your pom.xml and Procfile, called system.properties. In this file add the\nfollowing:\njava.runtime.version=1.7\n206\nThis should be everything you need. The most common workflow for Heroku deployments is to git\npush the code to production.\n$ git push heroku master\nInitializing repository, done.\nCounting objects: 95, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (78/78), done.\nWriting objects: 100% (95/95), 8.66 MiB | 606.00 KiB/s, done.\nTotal 95 (delta 31), reused 0 (delta 0)\n-----> Java app detected\n-----> Installing OpenJDK 1.8... done\n-----> Installing Maven 3.3.1... done\n-----> Installing settings.xml... done\n-----> Executing: mvn -B -DskipTests=true clean install\n[INFO] Scanning for projects...\nDownloading: http://repo.spring.io/...\nDownloaded: http://repo.spring.io/... (818 B at 1.8 KB/sec)\n....\nDownloaded: http://s3pository.heroku.com/jvm/... (152 KB at 595.3 KB/sec)\n[INFO] Installing /tmp/build_0c35a5d2-a067-4abc-a232-14b1fb7a8229/target/...\n[INFO] Installing /tmp/build_0c35a5d2-a067-4abc-a232-14b1fb7a8229/pom.xml ...\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 59.358s\n[INFO] Finished at: Fri Mar 07 07:28:25 UTC 2014\n[INFO] Final Memory: 20M/493M\n[INFO] ------------------------------------------------------------------------\n-----> Discovering process types\nProcfile declares types -> web\n-----> Compressing... done, 70.4MB\n-----> Launching... done, v6\nhttp://agile-sierra-1405.herokuapp.com/ deployed to Heroku\nTo git@heroku.com:agile-sierra-1405.git\n* [new branch] master -> master\nYour application should now be up and running on Heroku.\n56.3. OpenShift\nOpenShift is the RedHat public (and enterprise) PaaS solution. Like Heroku, it works by running\nscripts triggered by git commits, so you can script the launching of a Spring Boot application in\n207\npretty much any way you like as long as the Java runtime is available (which is a standard feature\nyou can ask for at OpenShift). To do this you can use the DIY Cartridge and hooks in your repository\nunder .openshift/action_hooks:\nThe basic model is to:\n1. Ensure Java and your build tool are installed remotely, e.g. using a pre_build hook (Java and\nMaven are installed by default, Gradle is not)\n2. Use a build hook to build your jar (using Maven or Gradle), e.g.\n#!/bin/bash\ncd $OPENSHIFT_REPO_DIR\nmvn package -s .openshift/settings.xml -DskipTests=true\n3. Add a start hook that calls java -jar \u2026\n#!/bin/bash\ncd $OPENSHIFT_REPO_DIR\nnohup java -jar target/*.jar --server.port=${OPENSHIFT_DIY_PORT}\n--server.address=${OPENSHIFT_DIY_IP} &\n4. Use a stop hook (since the start is supposed to return cleanly), e.g.\n#!/bin/bash\nsource $OPENSHIFT_CARTRIDGE_SDK_BASH\nPID=$(ps -ef | grep java.*\\.jar | grep -v grep | awk '{ print $2 }')\nif [ -z \"$PID\" ]\nthen\nclient_result \"Application is already stopped\"\nelse\nkill $PID\nfi\n5. Embed service bindings from environment variables provided by the platform in your\napplication.properties, e.g.\nspring.datasource.url:\njdbc:mysql://${OPENSHIFT_MYSQL_DB_HOST}:${OPENSHIFT_MYSQL_DB_PORT}/${OPENSHIFT_APP_\nNAME}\nspring.datasource.username: ${OPENSHIFT_MYSQL_DB_USERNAME}\nspring.datasource.password: ${OPENSHIFT_MYSQL_DB_PASSWORD}\nThere\u2019s a blog on running Gradle in OpenShift on their website that will get you started with a\ngradle build to run the app.\n208\n56.4. Boxfuse and Amazon Web Services\nBoxfuse works by turning your Spring Boot executable jar or war into a minimal VM image that can\nbe deployed unchanged either on VirtualBox or on AWS. Boxfuse comes with deep integration for\nSpring Boot and will use the information from your Spring Boot configuration file to automatically\nconfigure ports and health check URLs. Boxfuse leverages this information both for the images it\nproduces as well as for all the resources it provisions (instances, security groups, elastic load\nbalancers, etc).\nOnce you have created a Boxfuse account, connected it to your AWS account, and installed the\nlatest version of the Boxfuse Client, you can deploy your Spring Boot application to AWS as follows\n(ensure the application has been built by Maven or Gradle first using, for example, mvn clean\npackage):\n$ boxfuse run myapp-1.0.jar -env=prod\nSee the boxfuse run documentation for more options. If there is a\nboxfuse.com/docs/commandline/#configuration [boxfuse.conf] file present in the current directory,\nit will be consulted.\nBy default Boxfuse will activate a Spring profile named boxfuse on startup and if\nyour executable jar or war contains an\n\uf0eb\nboxfuse.com/docs/payloads/springboot.html#configuration [application-\nboxfuse.properties] file, Boxfuse will base its configuration based on the\nproperties it contains.\nAt this point boxfuse will create an image for your application, upload it, and then configure and\nstart the necessary resources on AWS:\n209\nFusing Image for myapp-1.0.jar ...\nImage fused in 00:06.838s (53937 K) -> axelfontaine/myapp:1.0\nCreating axelfontaine/myapp ...\nPushing axelfontaine/myapp:1.0 ...\nVerifying axelfontaine/myapp:1.0 ...\nCreating Elastic IP ...\nMapping myapp-axelfontaine.boxfuse.io to 52.28.233.167 ...\nWaiting for AWS to create an AMI for axelfontaine/myapp:1.0 in eu-central-1 (this may\ntake up to 50 seconds) ...\nAMI created in 00:23.557s -> ami-d23f38cf\nCreating security group boxfuse-sg_axelfontaine/myapp:1.0 ...\nLaunching t2.micro instance of axelfontaine/myapp:1.0 (ami-d23f38cf) in eu-central-1\n...\nInstance launched in 00:30.306s -> i-92ef9f53\nWaiting for AWS to boot Instance i-92ef9f53 and Payload to start at\nhttp://52.28.235.61/ ...\nPayload started in 00:29.266s -> http://52.28.235.61/\nRemapping Elastic IP 52.28.233.167 to i-92ef9f53 ...\nWaiting 15s for AWS to complete Elastic IP Zero Downtime transition ...\nDeployment completed successfully. axelfontaine/myapp:1.0 is up and running at\nhttp://myapp-axelfontaine.boxfuse.io/\nYour application should now be up and running on AWS.\nThere\u2019s a blog on deploying Spring Boot apps on EC2 as well as documentation for the Boxfuse\nSpring Boot integration on their website that will get you started with a Maven build to run the app.\n56.5. Google App Engine\nGoogle App Engine is tied to the Servlet 2.5 API, so you can\u2019t deploy a Spring Application there\nwithout some modifications. See the Servlet 2.5 section of this guide.\n210\nChapter 57. Installing Spring Boot\napplications\nIn additional to running Spring Boot applications using java -jar it is also possible to make fully\nexecutable applications for Unix systems. This makes it very easy to install and manage Spring Boot\napplications in common production environments.\nTo create a \u2018fully executable\u2019 jar with Maven use the following plugin configuration:\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<configuration>\n<executable>true</executable>\n</configuration>\n</plugin>\nWith Gradle, the equivalent configuration would be:\napply plugin: 'org.springframework.boot'\nspringBoot {\nexecutable = true\n}\nYou can then run your application by typing ./my-application.jar (where my-application is the\nname of your artifact).\nFully executable jars work by embedding an extra script at the front of the file.\n\uf05a\nNot all tools currently accept this format so you may not always be able to use\nthis technique.\nThe default script supports most Linux distributions and is tested on CentOS and\n\uf05a\nUbuntu. Other platforms, such as OS X and FreeBSD, will require the use of a\ncustom embeddedLaunchScript.\n\uf05a When a fully executable jar is run, it uses the jar\u2019s directory as the working\ndirectory.\n57.1. Unix/Linux services\nSpring Boot application can be easily started as Unix/Linux services using either init.d or systemd.\n211\n57.1.1. Installation as an init.d service (System V)\nIf you\u2019ve configured Spring Boot\u2019s Maven or Gradle plugin to generate a fully executable jar, and\nyou\u2019re not using a custom embeddedLaunchScript, then your application can be used as an init.d\nservice. Simply symlink the jar to init.d to support the standard start, stop, restart and status\ncommands.\nThe script supports the following features:\n\u2022 Starts the services as the user that owns the jar file\n\u2022 Tracks application\u2019s PID using /var/run/<appname>/<appname>.pid\n\u2022 Writes console logs to /var/log/<appname>.log\nAssuming that you have a Spring Boot application installed in /var/myapp, to install a Spring Boot\napplication as an init.d service simply create a symlink:\n$ sudo ln -s /var/myapp/myapp.jar /etc/init.d/myapp\nOnce installed, you can start and stop the service in the usual way. For example, on a Debian based\nsystem:\n$ service myapp start\n\uf0eb If your application fails to start, check the log file written to\n/var/log/<appname>.log for errors.\nYou can also flag the application to start automatically using your standard operating system tools.\nFor example, on Debian:\n$ update-rc.d myapp defaults <priority>\nSecuring an init.d service\nThe following is a set of guidelines on how to secure a Spring Boot application\n\uf05a that\u2019s being run as an init.d service. It is not intended to be an exhaustive list of\neverything that should be done to harden an application and the environment in\nwhich it runs.\nWhen executed as root, as is the case when root is being used to start an init.d service, the default\nexecutable script will run the application as the user which owns the jar file. You should never run\na Spring Boot application as root so your application\u2019s jar file should never be owned by root.\nInstead, create a specific user to run your application and use chown to make it the owner of the jar\nfile. For example:\n212\n$ chown bootapp:bootapp your-app.jar\nIn this case, the default executable script will run the application as the bootapp user.\nTo reduce the chances of the application\u2019s user account being compromised, you\n\uf0eb\nshould consider preventing it from using a login shell. Set the account\u2019s shell to\n/usr/sbin/nologin, for example.\nYou should also take steps to prevent the modification of your application\u2019s jar file. Firstly,\nconfigure its permissions so that it cannot be written and can only be read or executed by its\nowner:\n$ chmod 500 your-app.jar\nSecondly, you should also take steps to limit the damage if your application or the account that\u2019s\nrunning it is compromised. If an attacker does gain access, they could make the jar file writable and\nchange its contents. One way to protect against this is to make it immutable using chattr:\n$ sudo chattr +i your-app.jar\nThis will prevent any user, including root, from modifying the jar.\nIf root is used to control the application\u2019s service and you use a .conf file to customize its startup,\nthe .conf file will be read and evaluated by the root user. It should be secured accordingly. Use\nchmod so that the file can only be read by the owner and use chown to make root the owner:\n$ chmod 400 your-app.conf\n$ sudo chown root:root your-app.conf\n57.1.2. Installation as a systemd service\nSystemd is the successor of the System V init system, and is now being used by many modern Linux\ndistributions. Although you can continue to use init.d scripts with systemd, it is also possible to\nlaunch Spring Boot applications using systemd \u2018service\u2019 scripts.\nAssuming that you have a Spring Boot application installed in /var/myapp, to install a Spring Boot\napplication as a systemd service create a script named myapp.service using the following example\nand place it in /etc/systemd/system directory:\n213\n[Unit]\nDescription=myapp\nAfter=syslog.target\n[Service]\nUser=myapp\nExecStart=/var/myapp/myapp.jar\nSuccessExitStatus=143\n[Install]\nWantedBy=multi-user.target\n\uf0eb Remember to change the Description, User and ExecStart fields for your\napplication.\n\uf0eb Note that ExecStart field does not declare the script action command, which\nmeans that run command is used by default.\nNote that unlike when running as an init.d service, user that runs the application, PID file and\nconsole log file are managed by systemd itself and therefore must be configured using appropriate\nfields in \u2018service\u2019 script. Consult the service unit configuration man page for more details.\nTo flag the application to start automatically on system boot use the following command:\n$ systemctl enable myapp.service\nRefer to man systemctl for more details.\n57.1.3. Customizing the startup script\nThe default embedded startup script written by the Maven or Gradle plugin can be customized in a\nnumber of ways. For most people, using the default script along with a few customizations is\nusually enough. If you find you can\u2019t customize something that you need to, you can always use the\nembeddedLaunchScript option to write your own file entirely.\nCustomizing script when it\u2019s written\nIt often makes sense to customize elements of the start script as it\u2019s written into the jar file. For\nexample, init.d scripts can provide a \u201cdescription\u201d and, since you know this up front (and it won\u2019t\nchange), you may as well provide it when the jar is generated.\nTo customize written elements, use the embeddedLaunchScriptProperties option of the Spring Boot\nMaven or Gradle plugins.\nThe following property substitutions are supported with the default script:\n214\nName Description\nmode The script mode. Defaults to auto.\ninitInfoProv The Provides section of \u201cINIT INFO\u201d. Defaults to spring-boot-application for Gradle\nides\nand to ${project.artifactId} for Maven.\ninitInfoShor The Short-Description section of \u201cINIT INFO\u201d. Defaults to Spring Boot Application\ntDescription\nfor Gradle and to ${project.name} for Maven.\ninitInfoDesc The Description section of \u201cINIT INFO\u201d. Defaults to Spring Boot Application for\nription\nGradle and to ${project.description} (falling back to ${project.name}) for Maven.\ninitInfoChkc The chkconfig section of \u201cINIT INFO\u201d. Defaults to 2345 99 01.\nonfig\nconfFolder The default value for CONF_FOLDER. Defaults to the folder containing the jar.\nlogFolder The default value for LOG_FOLDER. Only valid for an init.d service.\nlogFilename The default value for LOG_FILENAME. Only valid for an init.d service.\npidFolder The default value for PID_FOLDER. Only valid for an init.d service.\npidFilename The default value for the name of the pid file in PID_FOLDER. Only valid for an init.d\nservice.\nuseStartStop If the start-stop-daemon command, when it\u2019s available, should be used to control the\nDaemon\nprocess. Defaults to true.\nCustomizing script when it runs\nFor items of the script that need to be customized after the jar has been written you can use\nenvironment variables or a config file.\nThe following environment properties are supported with the default script:\nVariable Description\nMODE\nThe \u201cmode\u201d of operation. The default depends on the way the jar was built, but will\nusually be auto (meaning it tries to guess if it is an init script by checking if it is a\nsymlink in a directory called init.d). You can explicitly set it to service so that the\nstop|start|status|restart commands work, or to run if you just want to run the\nscript in the foreground.\nUSE_START_ST If the start-stop-daemon command, when it\u2019s available, should be used to control the\nOP_DAEMON\nprocess. Defaults to true.\nPID_FOLDER The root name of the pid folder (/var/run by default).\nLOG_FOLDER The name of the folder to put log files in (/var/log by default).\nCONF_FOLDER\nThe name of the folder to read .conf files from (same folder as jar-file by default).\nLOG_FILENAME The name of the log file in the LOG_FOLDER (<appname>.log by default).\n215\nVariable Description\nAPP_NAME\nThe name of the app. If the jar is run from a symlink the script guesses the app\nname, but if it is not a symlink, or you want to explicitly set the app name this can\nbe useful.\nRUN_ARGS\nThe arguments to pass to the program (the Spring Boot app).\nJAVA_HOME The location of the java executable is discovered by using the PATH by default, but\nyou can set it explicitly if there is an executable file at $JAVA_HOME/bin/java.\nJAVA_OPTS\nOptions that are passed to the JVM when it is launched.\nJARFILE\nThe explicit location of the jar file, in case the script is being used to launch a jar\nthat it is not actually embedded in.\nDEBUG if not empty will set the -x flag on the shell process, making it easy to see the logic in\nthe script.\nThe PID_FOLDER, LOG_FOLDER and LOG_FILENAME variables are only valid for an init.d\n\uf05a\nservice. With systemd the equivalent customizations are made using \u2018service\u2019\nscript. Check the service unit configuration man page for more details.\nWith the exception of JARFILE and APP_NAME, the above settings can be configured using a .conf file.\nThe file is expected next to the jar file and have the same name but suffixed with .conf rather than\n.jar. For example, a jar named /var/myapp/myapp.jar will use the configuration file named\n/var/myapp/myapp.conf.\nmyapp.conf\nJAVA_OPTS=-Xmx1024M\nLOG_FOLDER=/custom/log/folder\n\uf0eb You can use a CONF_FOLDER environment variable to customize the location of the\nconfig file if you don\u2019t like it living next to the jar.\nTo learn about securing this file appropriately, please refer to the guidelines for securing an init.d\nservice.\n57.2. Microsoft Windows services\nSpring Boot application can be started as Windows service using winsw.\nA sample maintained separately to the core of Spring Boot describes step-by-step how you can\ncreate a Windows service for your Spring Boot application.\n216\nChapter 58. What to read next\nCheck out the Cloud Foundry, Heroku, OpenShift and Boxfuse web sites for more information about\nthe kinds of features that a PaaS can offer. These are just four of the most popular Java PaaS\nproviders, since Spring Boot is so amenable to cloud-based deployment you\u2019re free to consider\nother providers as well.\nThe next section goes on to cover the Spring Boot CLI; or you can jump ahead to read about build\ntool plugins.\nSpring Boot CLI\nThe Spring Boot CLI is a command line tool that can be used if you want to quickly develop with\nSpring. It allows you to run Groovy scripts, which means that you have a familiar Java-like syntax,\nwithout so much boilerplate code. You can also bootstrap a new project or write your own\ncommand for it.\n217\nChapter 59. Installing the CLI\nThe Spring Boot CLI can be installed manually; using SDKMAN! (the SDK Manager) or using\nHomebrew or MacPorts if you are an OSX user. See Installing the Spring Boot CLI in the \u201cGetting\nstarted\u201d section for comprehensive installation instructions.\n218\nChapter 60. Using the CLI\nOnce you have installed the CLI you can run it by typing spring. If you run spring without any\narguments, a simple help screen is displayed:\n$ spring\nusage: spring [--help] [--version]\n<command> [<args>]\nAvailable commands are:\nrun [options] <files> [--] [args]\nRun a spring groovy script\n... more command help is shown here\nYou can use help to get more details about any of the supported commands. For example:\n$ spring help run\nspring run - Run a spring groovy script\nusage: spring run [options] <files> [--] [args]\nOption Description\n------ -----------\n--autoconfigure [Boolean] Add autoconfigure compiler\ntransformations (default: true)\n--classpath, -cp Additional classpath entries\n-e, --edit Open the file with the default system\neditor\n--no-guess-dependencies Do not attempt to guess dependencies\n--no-guess-imports Do not attempt to guess imports\n-q, --quiet Quiet logging\n-v, --verbose Verbose logging of dependency\nresolution\n--watch Watch the specified file for changes\nThe version command provides a quick way to check which version of Spring Boot you are using.\n$ spring version\nSpring CLI v2.0.0.BUILD-SNAPSHOT\n60.1. Running applications using the CLI\nYou can compile and run Groovy source code using the run command. The Spring Boot CLI is\ncompletely self-contained so you don\u2019t need any external Groovy installation.\n219\nHere is an example \u201chello world\u201d web application written in Groovy:\nhello.groovy\n@RestController\nclass WebApplication {\n@RequestMapping(\"/\")\nString home() {\n\"Hello World!\"\n}\n}\nTo compile and run the application type:\n$ spring run hello.groovy\nTo pass command line arguments to the application, you need to use a -- to separate them from the\n\u201cspring\u201d command arguments, e.g.\n$ spring run hello.groovy -- --server.port=9000\nTo set JVM command line arguments you can use the JAVA_OPTS environment variable, e.g.\n$ JAVA_OPTS=-Xmx1024m spring run hello.groovy\n60.1.1. Deduced \u201cgrab\u201d dependencies\nStandard Groovy includes a @Grab annotation which allows you to declare dependencies on a third-\nparty libraries. This useful technique allows Groovy to download jars in the same way as Maven or\nGradle would, but without requiring you to use a build tool.\nSpring Boot extends this technique further, and will attempt to deduce which libraries to \u201cgrab\u201d\nbased on your code. For example, since the WebApplication code above uses @RestController\nannotations, \u201cTomcat\u201d and \u201cSpring MVC\u201d will be grabbed.\nThe following items are used as \u201cgrab hints\u201d:\nItems Grabs\nJdbcTemplate, NamedParameterJdbcTemplate, JDBC Application.\nDataSource\n@EnableJms\nJMS Application.\n@EnableCaching\nCaching abstraction.\n220\nItems Grabs\n@Test\nJUnit.\n@EnableRabbit\nRabbitMQ.\n@EnableReactor\nProject Reactor.\nextends Specification Spock test.\n@EnableBatchProcessing\nSpring Batch.\n@MessageEndpoint @EnableIntegrationPatterns Spring Integration.\n@EnableDeviceResolver\nSpring Mobile.\n@Controller @RestController @EnableWebMvc Spring MVC + Embedded Tomcat.\n@EnableWebSecurity\nSpring Security.\n@EnableTransactionManagement\nSpring Transaction Management.\n\uf0eb See subclasses of CompilerAutoConfiguration in the Spring Boot CLI source code to\nunderstand exactly how customizations are applied.\n60.1.2. Deduced \u201cgrab\u201d coordinates\nSpring Boot extends Groovy\u2019s standard @Grab support by allowing you to specify a dependency\nwithout a group or version, for example @Grab('freemarker'). This will consult Spring Boot\u2019s default\ndependency metadata to deduce the artifact\u2019s group and version. Note that the default metadata is\ntied to the version of the CLI that you\u2019re using \u2013 it will only change when you move to a new\nversion of the CLI, putting you in control of when the versions of your dependencies may change. A\ntable showing the dependencies and their versions that are included in the default metadata can be\nfound in the appendix.\n60.1.3. Default import statements\nTo help reduce the size of your Groovy code, several import statements are automatically included.\nNotice how the example above refers to @Component, @RestController and @RequestMapping without\nneeding to use fully-qualified names or import statements.\n\uf0eb Many Spring annotations will work without using import statements. Try running\nyour application to see what fails before adding imports.\n60.1.4. Automatic main method\nUnlike the equivalent Java application, you do not need to include a public static void\nmain(String[] args) method with your Groovy scripts. A SpringApplication is automatically created,\nwith your compiled code acting as the source.\n221\n60.1.5. Custom dependency management\nBy default, the CLI uses the dependency management declared in spring-boot-dependencies when\nresolving @Grab dependencies. Additional dependency management, that will override the default\ndependency management, can be configured using the @DependencyManagementBom annotation. The\nannotation\u2019s value should specify the coordinates (groupId:artifactId:version) of one or more\nMaven BOMs.\nFor example, the following declaration:\n@DependencyManagementBom(\"com.example.custom-bom:1.0.0\")\nWill pick up custom-bom-1.0.0.pom in a Maven repository under com/example/custom-versions/1.0.0/.\nWhen multiple BOMs are specified they are applied in the order that they\u2019re declared. For example:\n@DependencyManagementBom([\"com.example.custom-bom:1.0.0\",\n\"com.example.another-bom:1.0.0\"])\nindicates that dependency management in another-bom will override the dependency management\nin custom-bom.\nYou can use @DependencyManagementBom anywhere that you can use @Grab, however, to ensure\nconsistent ordering of the dependency management, you can only use @DependencyManagementBom at\nmost once in your application. A useful source of dependency management (that is a superset of\nSpring Boot\u2019s dependency management) is the Spring IO Platform, e.g.\n@DependencyManagementBom('io.spring.platform:platform-bom:1.1.2.RELEASE').\n60.2. Testing your code\nThe test command allows you to compile and run tests for your application. Typical usage looks\nlike this:\n$ spring test app.groovy tests.groovy\nTotal: 1, Success: 1, : Failures: 0\nPassed? true\nIn this example, tests.groovy contains JUnit @Test methods or Spock Specification classes. All the\ncommon framework annotations and static methods should be available to you without having to\nimport them.\nHere is the tests.groovy file that we used above (with a JUnit test):\n222\nclass ApplicationTests {\n@Test\nvoid homeSaysHello() {\nassertEquals(\"Hello World!\", new WebApplication().home())\n}\n}\n\uf0eb If you have more than one test source files, you might prefer to organize them\ninto a test directory.\n60.3. Applications with multiple source files\nYou can use \u201cshell globbing\u201d with all commands that accept file input. This allows you to easily use\nmultiple files from a single directory, e.g.\n$ spring run *.groovy\nThis technique can also be useful if you want to segregate your \u201ctest\u201d or \u201cspec\u201d code from the main\napplication code:\n$ spring test app/*.groovy test/*.groovy\n60.4. Packaging your application\nYou can use the jar command to package your application into a self-contained executable jar file.\nFor example:\n$ spring jar my-app.jar *.groovy\nThe resulting jar will contain the classes produced by compiling the application and all of the\napplication\u2019s dependencies so that it can then be run using java -jar. The jar file will also contain\nentries from the application\u2019s classpath. You can add explicit paths to the jar using --include and\n--exclude (both are comma-separated, and both accept prefixes to the values \u201c+\u201d and \u201c-\u201d to signify\nthat they should be removed from the defaults). The default includes are\npublic/**, resources/**, static/**, templates/**, META-INF/**, *\nand the default excludes are\n223\n.*, repository/**, build/**, target/**, **/*.jar, **/*.groovy\nSee the output of spring help jar for more information.\n60.5. Initialize a new project\nThe init command allows you to create a new project using start.spring.io without leaving the\nshell. For example:\n$ spring init --dependencies=web,data-jpa my-project\nUsing service at https://start.spring.io\nProject extracted to '/Users/developer/example/my-project'\nThis creates a my-project directory with a Maven-based project using spring-boot-starter-web and\nspring-boot-starter-data-jpa. You can list the capabilities of the service using the --list flag\n$ spring init --list\n=======================================\nCapabilities of https://start.spring.io\n=======================================\nAvailable dependencies:\n-----------------------\nactuator - Actuator: Production ready features to help you monitor and manage your\napplication\n...\nweb - Web: Support for full-stack web development, including Tomcat and spring-webmvc\nwebsocket - Websocket: Support for WebSocket development\nws - WS: Support for Spring Web Services\nAvailable project types:\n------------------------\ngradle-build - Gradle Config [format:build, build:gradle]\ngradle-project - Gradle Project [format:project, build:gradle]\nmaven-build - Maven POM [format:build, build:maven]\nmaven-project - Maven Project [format:project, build:maven] (default)\n...\nThe init command supports many options, check the help output for more details. For instance, the\nfollowing command creates a gradle project using Java 8 and war packaging:\n224\n$ spring init --build=gradle --java-version=1.8 --dependencies=websocket\n--packaging=war sample-app.zip\nUsing service at https://start.spring.io\nContent saved to 'sample-app.zip'\n60.6. Using the embedded shell\nSpring Boot includes command-line completion scripts for BASH and zsh shells. If you don\u2019t use\neither of these shells (perhaps you are a Windows user) then you can use the shell command to\nlaunch an integrated shell.\n$ spring shell\nSpring Boot (v2.0.0.BUILD-SNAPSHOT)\nHit TAB to complete. Type \\'help' and hit RETURN for help, and \\'exit' to quit.\nFrom inside the embedded shell you can run other commands directly:\n$ version\nSpring CLI v2.0.0.BUILD-SNAPSHOT\nThe embedded shell supports ANSI color output as well as tab completion. If you need to run a\nnative command you can use the ! prefix. Hitting ctrl-c will exit the embedded shell.\n60.7. Adding extensions to the CLI\nYou can add extensions to the CLI using the install command. The command takes one or more\nsets of artifact coordinates in the format group:artifact:version. For example:\n$ spring install com.example:spring-boot-cli-extension:1.0.0.RELEASE\nIn addition to installing the artifacts identified by the coordinates you supply, all of the artifacts'\ndependencies will also be installed.\nTo uninstall a dependency use the uninstall command. As with the install command, it takes one\nor more sets of artifact coordinates in the format group:artifact:version. For example:\n$ spring uninstall com.example:spring-boot-cli-extension:1.0.0.RELEASE\nIt will uninstall the artifacts identified by the coordinates you supply and their dependencies.\nTo uninstall all additional dependencies you can use the --all option. For example:\n225\n$ spring uninstall --all\n226\nChapter 61. Developing application with the\nGroovy beans DSL\nSpring Framework 4.0 has native support for a beans{} \u201cDSL\u201d (borrowed from Grails), and you can\nembed bean definitions in your Groovy application scripts using the same format. This is\nsometimes a good way to include external features like middleware declarations. For example:\n@Configuration\nclass Application implements CommandLineRunner {\n@Autowired\nSharedService service\n@Override\nvoid run(String... args) {\nprintln service.message\n}\n}\nimport my.company.SharedService\nbeans {\nservice(SharedService) {\nmessage = \"Hello World\"\n}\n}\nYou can mix class declarations with beans{} in the same file as long as they stay at the top level, or\nyou can put the beans DSL in a separate file if you prefer.\n227\nChapter 62. Configuring the CLI with\nsettings.xml\nThe Spring Boot CLI uses Aether, Maven\u2019s dependency resolution engine, to resolve dependencies.\nThe CLI makes use of the Maven configuration found in ~/.m2/settings.xml to configure Aether. The\nfollowing configuration settings are honored by the CLI:\n\u2022 Offline\n\u2022 Mirrors\n\u2022 Servers\n\u2022 Proxies\n\u2022 Profiles\n\u2022 Activation\n\u2022 Repositories\n\u2022 Active profiles\nPlease refer to Maven\u2019s settings documentation for further information.\n228\nChapter 63. What to read next\nThere are some sample groovy scripts available from the GitHub repository that you can use to try\nout the Spring Boot CLI. There is also extensive Javadoc throughout the source code.\nIf you find that you reach the limit of the CLI tool, you will probably want to look at converting\nyour application to full Gradle or Maven built \u201cgroovy project\u201d. The next section covers Spring\nBoot\u2019s Build tool plugins that you can use with Gradle or Maven.\nBuild tool plugins\nSpring Boot provides build tool plugins for Maven and Gradle. The plugins offer a variety of\nfeatures, including the packaging of executable jars. This section provides more details on both\nplugins, as well as some help should you need to extend an unsupported build system. If you are\njust getting started, you might want to read \u201cBuild systems\u201d from the Using Spring Boot section first.\n229\nChapter 64. Spring Boot Maven plugin\nThe Spring Boot Maven Plugin provides Spring Boot support in Maven, allowing you to package\nexecutable jar or war archives and run an application \u201cin-place\u201d. To use it you must be using\nMaven 3.2 (or better).\n\uf05a\nRefer to the Spring Boot Maven Plugin Site for complete plugin documentation.\n64.1. Including the plugin\nTo use the Spring Boot Maven Plugin simply include the appropriate XML in the plugins section of\nyour pom.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\n\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<!-- ... -->\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<version>2.0.0.BUILD-SNAPSHOT</version>\n<executions>\n<execution>\n<goals>\n<goal>repackage</goal>\n</goals>\n</execution>\n</executions>\n</plugin>\n</plugins>\n</build>\n</project>\nThis configuration will repackage a jar or war that is built during the package phase of the Maven\nlifecycle. The following example shows both the repackaged jar, as well as the original jar, in the\ntarget directory:\n$ mvn package\n$ ls target/*.jar\ntarget/myproject-1.0.0.jar target/myproject-1.0.0.jar.original\n230\nIf you don\u2019t include the <execution/> configuration as above, you can run the plugin on its own (but\nonly if the package goal is used as well). For example:\n$ mvn package spring-boot:repackage\n$ ls target/*.jar\ntarget/myproject-1.0.0.jar target/myproject-1.0.0.jar.original\nIf you are using a milestone or snapshot release you will also need to add appropriate\npluginRepository elements:\n<pluginRepositories>\n<pluginRepository>\n<id>spring-snapshots</id>\n<url>http://repo.spring.io/snapshot</url>\n</pluginRepository>\n<pluginRepository>\n<id>spring-milestones</id>\n<url>http://repo.spring.io/milestone</url>\n</pluginRepository>\n</pluginRepositories>\n64.2. Packaging executable jar and war files\nOnce spring-boot-maven-plugin has been included in your pom.xml it will automatically attempt to\nrewrite archives to make them executable using the spring-boot:repackage goal. You should\nconfigure your project to build a jar or war (as appropriate) using the usual packaging element:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\n\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<!-- ... -->\n<packaging>jar</packaging>\n<!-- ... -->\n</project>\nYour existing archive will be enhanced by Spring Boot during the package phase. The main class that\nyou want to launch can either be specified using a configuration option, or by adding a Main-Class\nattribute to the manifest in the usual way. If you don\u2019t specify a main class the plugin will search for\na class with a public static void main(String[] args) method.\nTo build and run a project artifact, you can type the following:\n231\n$ mvn package\n$ java -jar target/mymodule-0.0.1-SNAPSHOT.jar\nTo build a war file that is both executable and deployable into an external container you need to\nmark the embedded container dependencies as \u201cprovided\u201d, e.g:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\n\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<!-- ... -->\n<packaging>war</packaging>\n<!-- ... -->\n<dependencies>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-tomcat</artifactId>\n<scope>provided</scope>\n</dependency>\n<!-- ... -->\n</dependencies>\n</project>\n\uf0eb See the \u201cCreate a deployable war file\u201d section for more details on how to create a\ndeployable war file.\nAdvanced configuration options and examples are available in the plugin info page.\n232\nChapter 65. Spring Boot Gradle plugin\nThe Spring Boot Gradle Plugin provides Spring Boot support in Gradle, allowing you to package\nexecutable jar or war archives, run Spring Boot applications and use the dependency management\nprovided by spring-boot-dependencies.\n65.1. Including the plugin\nTo use the Spring Boot Gradle Plugin simply include a buildscript dependency and apply the\nspring-boot plugin:\nbuildscript {\ndependencies {\nclasspath(\"org.springframework.boot:spring-boot-gradle-plugin:2.0.0.BUILD-\nSNAPSHOT\")\n}\n}\napply plugin: 'org.springframework.boot'\nIf you are using a milestone or snapshot release you will also need to add appropriate repositories\nreference:\nbuildscript {\nrepositories {\nmaven.url \"http://repo.spring.io/snapshot\"\nmaven.url \"http://repo.spring.io/milestone\"\n}\n// ...\n}\n65.2. Gradle dependency management\nThe spring-boot plugin automatically applies the Dependency Management Plugin and configures it\nto import the spring-boot-starter-parent bom. This provides a similar dependency management\nexperience to the one that is enjoyed by Maven users. For example, it allows you to omit version\nnumbers when declaring dependencies that are managed in the bom. To make use of this\nfunctionality, simply declare dependencies in the usual way, but leave the version number empty:\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-starter-web\")\ncompile(\"org.thymeleaf:thymeleaf-spring4\")\ncompile(\"nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect\")\n}\n233\nThe version of the spring-boot gradle plugin that you declare determines the\nversion of the spring-boot-starter-parent bom that is imported (this ensures that\n\uf05a\nbuilds are always repeatable). You should always set the version of the spring-\nboot gradle plugin to the actual Spring Boot version that you wish to use. Details\nof the versions that are provided can be found in the appendix.\nThe dependency management plugin will only supply a version where one is not specified. To use a\nversion of an artifact that differs from the one that the plugin would provide, simply specify the\nversion when you declare the dependency as you usually would. For example:\ndependencies {\ncompile(\"org.thymeleaf:thymeleaf-spring4:2.1.1.RELEASE\")\n}\nTo learn more about the capabilities of the Dependency Management Plugin, please refer to its\ndocumentation.\n65.3. Packaging executable jar and war files\nOnce the spring-boot plugin has been applied to your project it will automatically attempt to\nrewrite archives to make them executable using the bootRepackage task. You should configure your\nproject to build a jar or war (as appropriate) in the usual way.\nThe main class that you want to launch can either be specified using a configuration option, or by\nadding a Main-Class attribute to the manifest. If you don\u2019t specify a main class the plugin will search\nfor a class with a public static void main(String[] args) method.\n\uf0eb\nCheck Repackage configuration for a full list of configuration options.\nTo build and run a project artifact, you can type the following:\n$ gradle build\n$ java -jar build/libs/mymodule-0.0.1-SNAPSHOT.jar\nTo build a war file that is both executable and deployable into an external container, you need to\nmark the embedded container dependencies as belonging to the war plugin\u2019s providedRuntime\nconfiguration, e.g.:\n234\n...\napply plugin: 'war'\nwar {\nbaseName = 'myapp'\nversion = '0.5.0'\n}\nrepositories {\njcenter()\nmaven { url \"http://repo.spring.io/libs-snapshot\" }\n}\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-starter-web\")\nprovidedRuntime(\"org.springframework.boot:spring-boot-starter-tomcat\")\n...\n}\n\uf0eb See the \u201cCreate a deployable war file\u201d section for more details on how to create a\ndeployable war file.\n65.4. Running a project in-place\nTo run a project in place without building a jar first you can use the \u201cbootRun\u201d task:\n$ gradle bootRun\nIf devtools has been added to your project it will automatically monitor your application for\nchanges. Alternatively, you can also run the application so that your static classpath resources (i.e.\nin src/main/resources by default) are reloadable in the live application, which can be helpful at\ndevelopment time.\nbootRun {\naddResources = true\n}\nMaking static classpath resources reloadable means that bootRun does not use the output of the\nprocessResources task, i.e., when invoked using bootRun, your application will use the resources in\ntheir unprocessed form.\n65.5. Spring Boot plugin configuration\nThe gradle plugin automatically extends your build script DSL with a springBoot element for global\nconfiguration of the Boot plugin. Set the appropriate properties as you would with any other Gradle\n235\nextension (see below for a list of configuration options):\nspringBoot {\nbackupSource = false\n}\n65.6. Repackage configuration\nThe plugin adds a bootRepackage task which you can also configure directly, e.g.:\nbootRepackage {\nmainClass = 'demo.Application'\n}\nThe following configuration options are available:\nName Description\nenabled\nBoolean flag to switch the repackager off (sometimes useful if you\nwant the other Boot features but not this one)\nmainClass\nThe main class that should be run. If not specified, and you have\napplied the application plugin, the mainClassName project\nproperty will be used. If the application plugin has not been\napplied or no mainClassName has been specified, the archive will\nbe searched for a suitable class. \"Suitable\" means a unique class\nwith a well-formed main() method (if more than one is found the\nbuild will fail). If you have applied the application plugin, the\nmain class can also be specified via its \"run\" task (main property)\nand/or its \"startScripts\" task (mainClassName property) as an\nalternative to using the \"springBoot\" configuration.\nclassifier\nA file name segment (before the extension) to add to the archive,\nso that the original is preserved in its original location. Defaults\nto null in which case the archive is repackaged in place. The\ndefault is convenient for many purposes, but if you want to use\nthe original jar as a dependency in another project you must use\na classifier to define the executable archive.\nwithJarTask The name or value of the Jar task (defaults to all tasks of type Jar)\nwhich is used to locate the archive to repackage.\ncustomConfiguration\nThe name of the custom configuration which is used to populate\nthe nested lib directory (without specifying this you get all\ncompile and runtime dependencies).\nexecutable\nBoolean flag to indicate if jar files are fully executable on Unix\nlike operating systems. Defaults to false.\n236\nName Description\nembeddedLaunchScript\nThe embedded launch script to prepend to the front of the jar if it\nis fully executable. If not specified the 'Spring Boot' default script\nwill be used.\nembeddedLaunchScriptProperties\nAdditional properties that to be expanded in the launch script.\nThe default script supports a mode property which can contain\nthe values auto, service or run.\nexcludeDevtools\nBoolean flag to indicate if the devtools jar should be excluded\nfrom the repackaged archives. Defaults to true.\n65.7. Repackage with custom Gradle configuration\nSometimes it may be more appropriate to not package default dependencies resolved from compile,\nruntime and provided scopes. If the created executable jar file is intended to be run as it is, you need\nto have all dependencies nested inside it; however, if the plan is to explode a jar file and run the\nmain class manually, you may already have some of the libraries available via CLASSPATH. This is a\nsituation where you can repackage your jar with a different set of dependencies.\nUsing a custom configuration will automatically disable dependency resolving from compile,\nruntime and provided scopes. Custom configuration can be either defined globally (inside the\nspringBoot section) or per task.\ntask clientJar(type: Jar) {\nappendix = 'client'\nfrom sourceSets.main.output\nexclude('**/*Something*')\n}\ntask clientBoot(type: BootRepackage, dependsOn: clientJar) {\nwithJarTask = clientJar\ncustomConfiguration = \"mycustomconfiguration\"\n}\nIn above example, we created a new clientJar Jar task to package a customized file set from your\ncompiled sources. Then we created a new clientBoot BootRepackage task and instructed it to work\nwith only clientJar task and mycustomconfiguration.\nconfigurations {\nmycustomconfiguration.exclude group: 'log4j'\n}\ndependencies {\nmycustomconfiguration configurations.runtime\n}\n237\nThe configuration that we are referring to in BootRepackage is a normal Gradle configuration. In the\nabove example we created a new configuration named mycustomconfiguration instructing it to\nderive from a runtime and exclude the log4j group. If the clientBoot task is executed, the\nrepackaged boot jar will have all dependencies from runtime but no log4j jars.\n65.7.1. Configuration options\nThe following configuration options are available:\nName Description\nmainClass\nThe main class that should be run by the executable archive.\nprovidedConfiguration\nThe name of the provided configuration (defaults to\nprovidedRuntime).\nbackupSource\nIf the original source archive should be backed-up before being\nrepackaged (defaults to true).\ncustomConfiguration\nThe name of the custom configuration.\nlayout\nThe type of archive, corresponding to how the dependencies are\nlaid out inside (defaults to a guess based on the archive type). See\navailable layouts for more details.\n'layoutFactory` A layout factory that can be used if a custom layout is required.\nAlternative layouts can be provided by 3rd parties. Layout\nfactories are only used when layout is not specified.\nrequiresUnpack\nA list of dependencies (in the form \u201cgroupId:artifactId\u201d that must\nbe unpacked from fat jars in order to run. Items are still\npackaged into the fat jar, but they will be automatically\nunpacked when it runs.\n65.7.2. Available layouts\nThe layout attribute configures the format of the archive and whether the bootstrap loader should\nbe included or not. The following layouts are available:\nName Description Executable\nJAR\nRegular executable JAR layout. Yes\nWAR Executable WAR layout. provided dependencies are Yes\nplaced in WEB-INF/lib-provided to avoid any clash when\nthe war is deployed in a servlet container.\nZIP (alias to DIR) Similar to JAR layout, using PropertiesLauncher. Yes\nMODULE Bundle dependencies (excluding those with provided No\nscope) and project resources.\nNONE\nBundle all dependencies and project resources. No\n238\n65.7.3. Using a custom layout\nIf you have custom requirements for how to arrange the dependencies and loader classes inside the\nrepackaged jar, you can use a custom layout. Any library which defines one or more LayoutFactory\nimplementations can be added to the build script dependencies and then the layout factory\nbecomes available in the springBoot configuration. For example:\nbuildscript {\nrepositories {\nmavenCentral()\n}\ndependencies {\nclasspath(\"org.springframework.boot:spring-boot-gradle-plugin:2.0.0.BUILD-\nSNAPSHOT\")\nclasspath(\"com.example:custom-layout:1.0.0\")\n}\n}\nspringBoot {\nlayoutFactory = new com.example.CustomLayoutFactory()\n}\nIf there is only one custom LayoutFactory on the build classpath and it is listed in\n\uf05a META-INF/spring.factories then it is unnecessary to explicitly set it in the\nspringBoot configuration. Layout factories are only used when no explicit layout\nis specified.\n65.8. Understanding how the Gradle plugin works\nWhen spring-boot is applied to your Gradle project a default task named bootRepackage is created\nautomatically. The bootRepackage task depends on Gradle assemble task, and when executed, it tries\nto find all jar artifacts whose qualifier is empty (i.e. tests and sources jars are automatically\nskipped).\nDue to the fact that bootRepackage finds 'all' created jar artifacts, the order of Gradle task execution\nis important. Most projects only create a single jar file, so usually this is not an issue; however, if\nyou are planning to create a more complex project setup, with custom Jar and BootRepackage tasks,\nthere are few tweaks to consider.\nIf you are 'just' creating custom jar files from your project you can simply disable default jar and\nbootRepackage tasks:\njar.enabled = false\nbootRepackage.enabled = false\nAnother option is to instruct the default bootRepackage task to only work with a default jar task.\n239\nbootRepackage.withJarTask = jar\nIf you have a default project setup where the main jar file is created and repackaged, 'and' you still\nwant to create additional custom jars, you can combine your custom repackage tasks together and\nuse dependsOn so that the bootJars task will run after the default bootRepackage task is executed:\ntask bootJars\nbootJars.dependsOn = [clientBoot1,clientBoot2,clientBoot3]\nbuild.dependsOn(bootJars)\nAll the above tweaks are usually used to avoid situations where an already created boot jar is\nrepackaged again. Repackaging an existing boot jar will not break anything, but you may find that\nit includes unnecessary dependencies.\n65.9. Publishing artifacts to a Maven repository using\nGradle\nIf you are declaring dependencies without versions and you want to publish artifacts to a Maven\nrepository you will need to configure the Maven publication with details of Spring Boot\u2019s\ndependency management. This can be achieved by configuring it to publish poms that inherit from\nspring-boot-starter-parent or that import dependency management from spring-boot-\ndependencies. The exact details of this configuration depend on how you\u2019re using Gradle and how\nyou\u2019re trying to publish the artifacts.\n65.9.1. Configuring Gradle to produce a pom that inherits dependency\nmanagement\nThe following is an example of configuring Gradle to generate a pom that inherits from spring-\nboot-starter-parent. Please refer to the Gradle User Guide for further information.\nuploadArchives {\nrepositories {\nmavenDeployer {\npom {\nproject {\nparent {\ngroupId \"org.springframework.boot\"\nartifactId \"spring-boot-starter-parent\"\nversion \"2.0.0.BUILD-SNAPSHOT\"\n}\n}\n}\n}\n}\n}\n240\n65.9.2. Configuring Gradle to produce a pom that imports dependency\nmanagement\nThe following is an example of configuring Gradle to generate a pom that imports the dependency\nmanagement provided by spring-boot-dependencies. Please refer to the Gradle User Guide for\nfurther information.\nuploadArchives {\nrepositories {\nmavenDeployer {\npom {\nproject {\ndependencyManagement {\ndependencies {\ndependency {\ngroupId \"org.springframework.boot\"\nartifactId \"spring-boot-dependencies\"\nversion \"2.0.0.BUILD-SNAPSHOT\"\ntype \"pom\"\nscope \"import\"\n}\n}\n}\n}\n}\n}\n}\n}\n241\nChapter 66. Spring Boot AntLib module\nThe Spring Boot AntLib module provides basic Spring Boot support for Apache Ant. You can use the\nmodule to create executable jars. To use the module you need to declare an additional spring-boot\nnamespace in your build.xml:\n<project xmlns:ivy=\"antlib:org.apache.ivy.ant\"\nxmlns:spring-boot=\"antlib:org.springframework.boot.ant\"\nname=\"myapp\" default=\"build\">\n...\n</project>\nYou\u2019ll need to remember to start Ant using the -lib option, for example:\n$ ant -lib <folder containing spring-boot-antlib-2.0.0.BUILD-SNAPSHOT.jar>\n\uf0eb The \u201cUsing Spring Boot\u201d section includes a more complete example of using\nApache Ant with spring-boot-antlib\n66.1. Spring Boot Ant tasks\nOnce the spring-boot-antlib namespace has been declared, the following additional tasks are\navailable.\n66.1.1. spring-boot:exejar\nThe exejar task can be used to creates a Spring Boot executable jar. The following attributes are\nsupported by the task:\nAttribute Description Required\ndestfile\nThe destination jar file to create Yes\nclasses\nThe root directory of Java class files Yes\nstart-class\nThe main application class to run No (default is first class found declaring\na main method)\nThe following nested elements can be used with the task:\nElement Description\nresources\nOne or more Resource Collections describing a set of Resources that should be\nadded to the content of the created jar file.\nlib\nOne or more Resource Collections that should be added to the set of jar\nlibraries that make up the runtime dependency classpath of the application.\n242\n66.1.2. Examples\nSpecify start-class\n<spring-boot:exejar destfile=\"target/my-application.jar\"\nclasses=\"target/classes\" start-class=\"com.foo.MyApplication\">\n<resources>\n<fileset dir=\"src/main/resources\" />\n</resources>\n<lib>\n<fileset dir=\"lib\" />\n</lib>\n</spring-boot:exejar>\nDetect start-class\n<exejar destfile=\"target/my-application.jar\" classes=\"target/classes\">\n<lib>\n<fileset dir=\"lib\" />\n</lib>\n</exejar>\n66.2. spring-boot:findmainclass\nThe findmainclass task is used internally by exejar to locate a class declaring a main. You can also\nuse this task directly in your build if needed. The following attributes are supported\nAttribute Description Required\nclassesroot The root directory of Java class files Yes (unless mainclass is specified)\nmainclass Can be used to short-circuit the main No\nclass search\nproperty\nThe Ant property that should be set No (result will be logged if unspecified)\nwith the result\n66.2.1. Examples\nFind and log\n<findmainclass classesroot=\"target/classes\" />\nFind and set\n<findmainclass classesroot=\"target/classes\" property=\"main-class\" />\n243\nOverride and set\n<findmainclass mainclass=\"com.foo.MainClass\" property=\"main-class\" />\n244\nChapter 67. Supporting other build systems\nIf you want to use a build tool other than Maven, Gradle or Ant, you will likely need to develop your\nown plugin. Executable jars need to follow a specific format and certain entries need to be written\nin an uncompressed form (see the executable jar format section in the appendix for details).\nThe Spring Boot Maven and Gradle plugins both make use of spring-boot-loader-tools to actually\ngenerate jars. You are also free to use this library directly yourself if you need to.\n67.1. Repackaging archives\nTo repackage an existing archive so that it becomes a self-contained executable archive use\norg.springframework.boot.loader.tools.Repackager. The Repackager class takes a single constructor\nargument that refers to an existing jar or war archive. Use one of the two available repackage()\nmethods to either replace the original file or write to a new destination. Various settings can also be\nconfigured on the repackager before it is run.\n67.2. Nested libraries\nWhen repackaging an archive you can include references to dependency files using the\norg.springframework.boot.loader.tools.Libraries interface. We don\u2019t provide any concrete\nimplementations of Libraries here as they are usually build system specific.\nIf your archive already includes libraries you can use Libraries.NONE.\n67.3. Finding a main class\nIf you don\u2019t use Repackager.setMainClass() to specify a main class, the repackager will use ASM to\nread class files and attempt to find a suitable class with a public static void main(String[] args)\nmethod. An exception is thrown if more than one candidate is found.\n67.4. Example repackage implementation\nHere is a typical example repackage:\nRepackager repackager = new Repackager(sourceJarFile);\nrepackager.setBackupSource(false);\nrepackager.repackage(new Libraries() {\n@Override\npublic void doWithLibraries(LibraryCallback callback) throws IOException {\n// Build system specific implementation, callback for each dependency\n// callback.library(new Library(nestedFile, LibraryScope.COMPILE));\n}\n});\n245\nChapter 68. What to read next\nIf you\u2019re interested in how the build tool plugins work you can look at the spring-boot-tools\nmodule on GitHub. More technical details of the executable jar format are covered in the appendix.\nIf you have specific build-related questions you can check out the \u201chow-to\u201d guides.\n\u2018How-to\u2019 guides\nThis section provides answers to some common \u2018how do I do that\u2026\u2019 type of questions that often\narise when using Spring Boot. This is by no means an exhaustive list, but it does cover quite a lot.\nIf you are having a specific problem that we don\u2019t cover here, you might want to check out\nstackoverflow.com to see if someone has already provided an answer; this is also a great place to\nask new questions (please use the spring-boot tag).\nWe\u2019re also more than happy to extend this section; If you want to add a \u2018how-to\u2019 you can send us a\npull request.\n246\nChapter 69. Spring Boot application\n69.1. Create your own FailureAnalyzer\nFailureAnalyzer is a great way to intercept an exception on startup and turn it into a human-\nreadable message, wrapped into a FailureAnalysis. Spring Boot provides such analyzer for\napplication context related exceptions, JSR-303 validations and more. It is actually very easy to\ncreate your own.\nAbstractFailureAnalyzer is a convenient extension of FailureAnalyzer that checks the presence of a\nspecified exception type in the exception to handle. You can extend from that so that your\nimplementation gets a chance to handle the exception only when it is actually present. If for\nwhatever reason you can\u2019t handle the exception, return null to give another implementation a\nchance to handle the exception.\nFailureAnalyzer implementations are to be registered in a META-INF/spring.factories: the following\nregisters ProjectConstraintViolationFailureAnalyzer:\norg.springframework.boot.diagnostics.FailureAnalyzer=\\\ncom.example.ProjectConstraintViolationFailureAnalyzer\n69.2. Troubleshoot auto-configuration\nThe Spring Boot auto-configuration tries its best to \u2018do the right thing\u2019, but sometimes things fail\nand it can be hard to tell why.\nThere is a really useful ConditionEvaluationReport available in any Spring Boot ApplicationContext.\nYou will see it if you enable DEBUG logging output. If you use the spring-boot-actuator there is also\nan autoconfig endpoint that renders the report in JSON. Use that to debug the application and see\nwhat features have been added (and which not) by Spring Boot at runtime.\nMany more questions can be answered by looking at the source code and the Javadoc. Some rules\nof thumb:\n\u2022 Look for classes called *AutoConfiguration and read their sources, in particular the\n@Conditional* annotations to find out what features they enable and when. Add --debug to the\ncommand line or a System property -Ddebug to get a log on the console of all the auto-\nconfiguration decisions that were made in your app. In a running Actuator app look at the\nautoconfig endpoint (\u2018/autoconfig\u2019 or the JMX equivalent) for the same information.\n\u2022 Look for classes that are @ConfigurationProperties (e.g. ServerProperties) and read from there\nthe available external configuration options. The @ConfigurationProperties has a name attribute\nwhich acts as a prefix to external properties, thus ServerProperties has prefix=\"server\" and its\nconfiguration properties are server.port, server.address etc. In a running Actuator app look at\nthe configprops endpoint.\n\u2022 Look for use of RelaxedPropertyResolver to pull configuration values explicitly out of the\nEnvironment. It often is used with a prefix.\n247\n\u2022 Look for @Value annotations that bind directly to the Environment. This is less flexible than the\nRelaxedPropertyResolver approach, but does allow some relaxed binding, specifically for OS\nenvironment variables (so CAPITALS_AND_UNDERSCORES are synonyms for period.separated).\n\u2022 Look for @ConditionalOnExpression annotations that switch features on and off in response to\nSpEL expressions, normally evaluated with placeholders resolved from the Environment.\n69.3. Customize the Environment or\nApplicationContext before it starts\nA SpringApplication has ApplicationListeners and ApplicationContextInitializers that are used to\napply customizations to the context or environment. Spring Boot loads a number of such\ncustomizations for use internally from META-INF/spring.factories. There is more than one way to\nregister additional ones:\n\u2022 Programmatically per application by calling the addListeners and addInitializers methods on\nSpringApplication before you run it.\n\u2022 Declaratively per application by setting context.initializer.classes or\ncontext.listener.classes.\n\u2022 Declaratively for all applications by adding a META-INF/spring.factories and packaging a jar file\nthat the applications all use as a library.\nThe SpringApplication sends some special ApplicationEvents to the listeners (even some before the\ncontext is created), and then registers the listeners for events published by the ApplicationContext\nas well. See Application events and listeners in the \u2018Spring Boot features\u2019 section for a complete list.\nIt is also possible to customize the Environment before the application context is refreshed using\nEnvironmentPostProcessor. Each implementation should be registered in META-INF/spring.factories:\norg.springframework.boot.env.EnvironmentPostProcessor=com.example.YourEnvironmentPostP\nrocessor\n69.4. Build an ApplicationContext hierarchy (adding a\nparent or root context)\nYou can use the ApplicationBuilder class to create parent/child ApplicationContext hierarchies. See\nFluent builder API in the \u2018Spring Boot features\u2019 section for more information.\n69.5. Create a non-web application\nNot all Spring applications have to be web applications (or web services). If you want to execute\nsome code in a main method, but also bootstrap a Spring application to set up the infrastructure to\nuse, then it\u2019s easy with the SpringApplication features of Spring Boot. A SpringApplication changes\nits ApplicationContext class depending on whether it thinks it needs a web application or not. The\nfirst thing you can do to help it is to just leave the servlet API dependencies off the classpath. If you\n248\ncan\u2019t do that (e.g. you are running 2 applications from the same code base) then you can explicitly\ncall setWebEnvironment(false) on your SpringApplication instance, or set the\napplicationContextClass property (through the Java API or with external properties). Application\ncode that you want to run as your business logic can be implemented as a CommandLineRunner and\ndropped into the context as a @Bean definition.\n249\nChapter 70. Properties & configuration\n70.1. Automatically expand properties at build time\nRather than hardcoding some properties that are also specified in your project\u2019s build\nconfiguration, you can automatically expand them using the existing build configuration instead.\nThis is possible in both Maven and Gradle.\n70.1.1. Automatic property expansion using Maven\nYou can automatically expand properties from the Maven project using resource filtering. If you\nuse the spring-boot-starter-parent you can then refer to your Maven \u2018project properties\u2019 via @..@\nplaceholders, e.g.\napp.encoding=@project.build.sourceEncoding@\napp.java.version=@java.version@\nThe spring-boot:run can add src/main/resources directly to the classpath (for hot\n\uf0eb reloading purposes) if you enable the addResources flag. This circumvents the\nresource filtering and this feature. You can use the exec:java goal instead or\ncustomize the plugin\u2019s configuration, see the plugin usage page for more details.\nIf you don\u2019t use the starter parent, in your pom.xml you need (inside the <build/> element):\n<resources>\n<resource>\n<directory>src/main/resources</directory>\n<filtering>true</filtering>\n</resource>\n</resources>\nand (inside <plugins/>):\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-resources-plugin</artifactId>\n<version>2.7</version>\n<configuration>\n<delimiters>\n<delimiter>@</delimiter>\n</delimiters>\n<useDefaultDelimiters>false</useDefaultDelimiters>\n</configuration>\n</plugin>\n250\nThe useDefaultDelimiters property is important if you are using standard Spring\n\uf05a\nplaceholders in your configuration (e.g. ${foo}). These may be expanded by the\nbuild if that property is not set to false.\n70.1.2. Automatic property expansion using Gradle\nYou can automatically expand properties from the Gradle project by configuring the Java plugin\u2019s\nprocessResources task to do so:\nprocessResources {\nexpand(project.properties)\n}\nYou can then refer to your Gradle project\u2019s properties via placeholders, e.g.\napp.name=${name}\napp.description=${description}\nGradle\u2019s expand method uses Groovy\u2019s SimpleTemplateEngine which transforms\n\uf05a ${..} tokens. The ${..} style conflicts with Spring\u2019s own property placeholder\nmechanism. To use Spring property placeholders together with automatic\nexpansion the Spring property placeholders need to be escaped like \\${..}.\n70.2. Externalize the configuration of\nSpringApplication\nA SpringApplication has bean properties (mainly setters) so you can use its Java API as you create\nthe application to modify its behavior. Or you can externalize the configuration using properties in\nspring.main.*. E.g. in application.properties you might have.\nspring.main.web-environment=false\nspring.main.banner-mode=off\nand then the Spring Boot banner will not be printed on startup, and the application will not be a\nweb application.\n\uf05a The example above also demonstrates how flexible binding allows the use of\nunderscores (_) as well as dashes (-) in property names.\nProperties defined in external configuration overrides the values specified via the Java API with the\nnotable exception of the sources used to create the ApplicationContext. Let\u2019s consider this\napplication\n251\nnew SpringApplicationBuilder()\n.bannerMode(Banner.Mode.OFF)\n.sources(demo.MyApp.class)\n.run(args);\nused with the following configuration:\nspring.main.sources=com.acme.Config,com.acme.ExtraConfig\nspring.main.banner-mode=console\nThe actual application will now show the banner (as overridden by configuration) and use three\nsources for the ApplicationContext (in that order): demo.MyApp, com.acme.Config,\ncom.acme.ExtraConfig.\n70.3. Change the location of external properties of an\napplication\nBy default properties from different sources are added to the Spring Environment in a defined order\n(see Externalized Configuration in the \u2018Spring Boot features\u2019 section for the exact order).\nA nice way to augment and modify this is to add @PropertySource annotations to your application\nsources. Classes passed to the SpringApplication static convenience methods, and those added using\nsetSources() are inspected to see if they have @PropertySources, and if they do, those properties are\nadded to the Environment early enough to be used in all phases of the ApplicationContext lifecycle.\nProperties added in this way have lower priority than any added using the default locations (e.g.\napplication.properties), system properties, environment variables or the command line.\nYou can also provide System properties (or environment variables) to change the behavior:\n\u2022 spring.config.name (SPRING_CONFIG_NAME), defaults to application as the root of the file name.\n\u2022 spring.config.location (SPRING_CONFIG_LOCATION) is the file to load (e.g. a classpath resource or a\nURL). A separate Environment property source is set up for this document and it can be\noverridden by system properties, environment variables or the command line.\nNo matter what you set in the environment, Spring Boot will always load application.properties as\ndescribed above. If YAML is used then files with the \u2018.yml\u2019 extension are also added to the list by\ndefault.\nSpring Boot logs the configuration files that are loaded at DEBUG level and the candidates it has not\nfound at TRACE level.\nSee ConfigFileApplicationListener for more detail.\n70.4. Use \u2018short\u2019 command line arguments\nSome people like to use (for example) --port=9000 instead of --server.port=9000 to set configuration\n252\nproperties on the command line. You can easily enable this by using placeholders in\napplication.properties, e.g.\nserver.port=${port:8080}\nIf you are inheriting from the spring-boot-starter-parent POM, the default filter\ntoken of the maven-resources-plugins has been changed from ${*} to @ (i.e.\n\uf0eb @maven.token@ instead of ${maven.token}) to prevent conflicts with Spring-style\nplaceholders. If you have enabled maven filtering for the application.properties\ndirectly, you may want to also change the default filter token to use other\ndelimiters.\nIn this specific case the port binding will work in a PaaS environment like Heroku\n\uf05a and Cloud Foundry, since in those two platforms the PORT environment variable is\nset automatically and Spring can bind to capitalized synonyms for Environment\nproperties.\n70.5. Use YAML for external properties\nYAML is a superset of JSON and as such is a very convenient syntax for storing external properties\nin a hierarchical format. E.g.\nspring:\napplication:\nname: cruncher\ndatasource:\ndriverClassName: com.mysql.jdbc.Driver\nurl: jdbc:mysql://localhost/test\nserver:\nport: 9000\nCreate a file called application.yml and stick it in the root of your classpath, and also add snakeyaml\nto your dependencies (Maven coordinates org.yaml:snakeyaml, already included if you use the\nspring-boot-starter). A YAML file is parsed to a Java Map<String,Object> (like a JSON object), and\nSpring Boot flattens the map so that it is 1-level deep and has period-separated keys, a lot like\npeople are used to with Properties files in Java.\nThe example YAML above corresponds to an application.properties file\nspring.application.name=cruncher\nspring.datasource.driverClassName=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost/test\nserver.port=9000\nSee Using YAML instead of Properties in the \u2018Spring Boot features\u2019 section for more information\n253\nabout YAML.\n70.6. Set the active Spring profiles\nThe Spring Environment has an API for this, but normally you would set a System property\n(spring.profiles.active) or an OS environment variable (SPRING_PROFILES_ACTIVE). E.g. launch your\napplication with a -D argument (remember to put it before the main class or jar archive):\n$ java -jar -Dspring.profiles.active=production demo-0.0.1-SNAPSHOT.jar\nIn Spring Boot you can also set the active profile in application.properties, e.g.\nspring.profiles.active=production\nA value set this way is replaced by the System property or environment variable setting, but not by\nthe SpringApplicationBuilder.profiles() method. Thus the latter Java API can be used to augment\nthe profiles without changing the defaults.\nSee Profiles in the \u2018Spring Boot features\u2019 section for more information.\n70.7. Change configuration depending on the\nenvironment\nA YAML file is actually a sequence of documents separated by --- lines, and each document is\nparsed separately to a flattened map.\nIf a YAML document contains a spring.profiles key, then the profiles value (comma-separated list\nof profiles) is fed into the Spring Environment.acceptsProfiles() and if any of those profiles is active\nthat document is included in the final merge (otherwise not).\nExample:\n254\nserver:\nport: 9000\n---\nspring:\nprofiles: development\nserver:\nport: 9001\n---\nspring:\nprofiles: production\nserver:\nport: 0\nIn this example the default port is 9000, but if the Spring profile \u2018development\u2019 is active then the\nport is 9001, and if \u2018production\u2019 is active then it is 0.\nThe YAML documents are merged in the order they are encountered (so later values override\nearlier ones).\nTo do the same thing with properties files you can use application-${profile}.properties to specify\nprofile-specific values.\n70.8. Discover built-in options for external properties\nSpring Boot binds external properties from application.properties (or .yml) (and other places) into\nan application at runtime. There is not (and technically cannot be) an exhaustive list of all\nsupported properties in a single location because contributions can come from additional jar files\non your classpath.\nA running application with the Actuator features has a configprops endpoint that shows all the\nbound and bindable properties available through @ConfigurationProperties.\nThe appendix includes an application.properties example with a list of the most common\nproperties supported by Spring Boot. The definitive list comes from searching the source code for\n@ConfigurationProperties and @Value annotations, as well as the occasional use of\nRelaxedPropertyResolver.\n255\nChapter 71. Embedded servlet containers\n71.1. Add a Servlet, Filter or Listener to an application\nThere are two ways to add Servlet, Filter, ServletContextListener and the other listeners supported\nby the Servlet spec to your application. You can either provide Spring beans for them, or enable\nscanning for Servlet components.\n71.1.1. Add a Servlet, Filter or Listener using a Spring bean\nTo add a Servlet, Filter, or Servlet *Listener provide a @Bean definition for it. This can be very\nuseful when you want to inject configuration or dependencies. However, you must be very careful\nthat they don\u2019t cause eager initialization of too many other beans because they have to be installed\nin the container very early in the application lifecycle (e.g. it\u2019s not a good idea to have them depend\non your DataSource or JPA configuration). You can work around restrictions like that by initializing\nthem lazily when first used instead of on initialization.\nIn the case of Filters and Servlets you can also add mappings and init parameters by adding a\nFilterRegistrationBean or ServletRegistrationBean instead of or as well as the underlying\ncomponent.\nIf no dispatcherType is specified on a filter registration, it will match FORWARD\n,INCLUDE and REQUEST. If async has been enabled, it will match ASYNC as well.\nIf you are migrating a filter that has no dispatcher element in web.xml you will\nneed to specify a dispatcherType yourself:\n@Bean\n\uf05a\npublic FilterRegistrationBean myFilterRegistration() {\nFilterRegistrationBean registration = new FilterRegistrationBean(\n);\nregistration.setDispatcherTypes(DispatcherType.REQUEST);\n....\nreturn registration;\n}\nDisable registration of a Servlet or Filter\nAs described above any Servlet or Filter beans will be registered with the servlet container\nautomatically. To disable registration of a particular Filter or Servlet bean create a registration\nbean for it and mark it as disabled. For example:\n256\n@Bean\npublic FilterRegistrationBean registration(MyFilter filter) {\nFilterRegistrationBean registration = new FilterRegistrationBean(filter);\nregistration.setEnabled(false);\nreturn registration;\n}\n71.1.2. Add Servlets, Filters, and Listeners using classpath scanning\n@WebServlet, @WebFilter, and @WebListener annotated classes can be automatically registered with an\nembedded servlet container by annotating a @Configuration class with @ServletComponentScan and\nspecifying the package(s) containing the components that you want to register. By default,\n@ServletComponentScan will scan from the package of the annotated class.\n71.2. Change the HTTP port\nIn a standalone application the main HTTP port defaults to 8080, but can be set with server.port\n(e.g. in application.properties or as a System property). Thanks to relaxed binding of Environment\nvalues you can also use SERVER_PORT (e.g. as an OS environment variable).\nTo switch off the HTTP endpoints completely, but still create a WebApplicationContext, use\nserver.port=-1 (this is sometimes useful for testing).\nFor more details look at Customizing embedded servlet containers in the \u2018Spring Boot features\u2019\nsection, or the ServerProperties source code.\n71.3. Use a random unassigned HTTP port\nTo scan for a free port (using OS natives to prevent clashes) use server.port=0.\n71.4. Discover the HTTP port at runtime\nYou can access the port the server is running on from log output or from the\nEmbeddedWebApplicationContext via its EmbeddedServletContainer. The best way to get that and be sure\nthat it has initialized is to add a @Bean of type\nApplicationListener<EmbeddedServletContainerInitializedEvent> and pull the container out of the\nevent when it is published.\nTests that use @SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT) can also inject the\nactual port into a field using the @LocalServerPort annotation. For example:\n257\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)\npublic class MyWebIntegrationTests {\n@Autowired\nEmbeddedWebApplicationContext server;\n@LocalServerPort\nint port;\n// ...\n}\n@LocalServerPort is a meta-annotation for @Value(\"${local.server.port}\"). Don\u2019t\n\uf05a try to inject the port in a regular application. As we just saw, the value is only set\nonce the container has initialized; contrary to a test, application code callbacks\nare processed early (i.e. before the value is actually available).\n71.5. Configure SSL\nSSL can be configured declaratively by setting the various server.ssl.* properties, typically in\napplication.properties or application.yml. For example:\nserver.port=8443\nserver.ssl.key-store=classpath:keystore.jks\nserver.ssl.key-store-password=secret\nserver.ssl.key-password=another-secret\nSee Ssl for details of all of the supported properties.\nUsing configuration like the example above means the application will no longer support plain\nHTTP connector at port 8080. Spring Boot doesn\u2019t support the configuration of both an HTTP\nconnector and an HTTPS connector via application.properties. If you want to have both then you\u2019ll\nneed to configure one of them programmatically. It\u2019s recommended to use application.properties\nto configure HTTPS as the HTTP connector is the easier of the two to configure programmatically.\nSee the spring-boot-sample-tomcat-multi-connectors sample project for an example.\n71.6. Configure Access Logging\nAccess logs can be configured for Tomcat and Undertow via their respective namespaces.\nFor instance, the following logs access on Tomcat with a custom pattern.\n258\nserver.tomcat.basedir=my-tomcat\nserver.tomcat.accesslog.enabled=true\nserver.tomcat.accesslog.pattern=%t %a \"%r\" %s (%D ms)\nThe default location for logs is a logs directory relative to the tomcat base dir and\n\uf05a said directory is a temp directory by default so you may want to fix Tomcat\u2019s base\ndirectory or use an absolute path for the logs. In the example above, the logs will\nbe available in my-tomcat/logs relative to the working directory of the application.\nAccess logging for undertow can be configured in a similar fashion\nserver.undertow.accesslog.enabled=true\nserver.undertow.accesslog.pattern=%t %a \"%r\" %s (%D ms)\nLogs are stored in a logs directory relative to the working directory of the application. This can be\ncustomized via server.undertow.accesslog.directory.\n71.7. Use behind a front-end proxy server\nYour application might need to send 302 redirects or render content with absolute links back to\nitself. When running behind a proxy, the caller wants a link to the proxy, and not to the physical\naddress of the machine hosting your app. Typically such situations are handled via a contract with\nthe proxy, which will add headers to tell the back end how to construct links to itself.\nIf the proxy adds conventional X-Forwarded-For and X-Forwarded-Proto headers (most do this out of\nthe box) the absolute links should be rendered correctly as long as server.use-forward-headers is set\nto true in your application.properties.\nIf your application is running in Cloud Foundry or Heroku the server.use-\n\uf05a\nforward-headers property will default to true if not specified. In all other instances\nit defaults to false.\n71.7.1. Customize Tomcat\u2019s proxy configuration\nIf you are using Tomcat you can additionally configure the names of the headers used to carry\n\u201cforwarded\u201d information:\nserver.tomcat.remote-ip-header=x-your-remote-ip-header\nserver.tomcat.protocol-header=x-your-protocol-header\nTomcat is also configured with a default regular expression that matches internal proxies that are\nto be trusted. By default, IP addresses in 10/8, 192.168/16, 169.254/16 and 127/8 are trusted. You can\ncustomize the valve\u2019s configuration by adding an entry to application.properties, e.g.\n259\nserver.tomcat.internal-proxies=192\\\\.168\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\nThe double backslashes are only required when you\u2019re using a properties file for\n\uf05a configuration. If you are using YAML, single backslashes are sufficient and a\nvalue that\u2019s equivalent to the one shown above would be\n192\\.168\\.\\d{1,3}\\.\\d{1,3}.\n\uf05a You can trust all proxies by setting the internal-proxies to empty (but don\u2019t do\nthis in production).\nYou can take complete control of the configuration of Tomcat\u2019s RemoteIpValve by switching the\nautomatic one off (i.e. set server.use-forward-headers=false) and adding a new valve instance in a\nTomcatEmbeddedServletContainerFactory bean.\n71.8. Configure Tomcat\nGenerally you can follow the advice from Discover built-in options for external properties about\n@ConfigurationProperties (ServerProperties is the main one here), but also look at\nEmbeddedServletContainerCustomizer and various Tomcat-specific *Customizers that you can add in\none of those. The Tomcat APIs are quite rich so once you have access to the\nTomcatEmbeddedServletContainerFactory you can modify it in a number of ways. Or the nuclear\noption is to add your own TomcatEmbeddedServletContainerFactory.\n71.9. Enable Multiple Connectors with Tomcat\nAdd a org.apache.catalina.connector.Connector to the TomcatEmbeddedServletContainerFactory which\ncan allow multiple connectors, e.g. HTTP and HTTPS connector:\n260\n@Bean\npublic EmbeddedServletContainerFactory servletContainer() {\nTomcatEmbeddedServletContainerFactory tomcat = new\nTomcatEmbeddedServletContainerFactory();\ntomcat.addAdditionalTomcatConnectors(createSslConnector());\nreturn tomcat;\n}\nprivate Connector createSslConnector() {\nConnector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\nHttp11NioProtocol protocol = (Http11NioProtocol) connector.getProtocolHandler();\ntry {\nFile keystore = new ClassPathResource(\"keystore\").getFile();\nFile truststore = new ClassPathResource(\"keystore\").getFile();\nconnector.setScheme(\"https\");\nconnector.setSecure(true);\nconnector.setPort(8443);\nprotocol.setSSLEnabled(true);\nprotocol.setKeystoreFile(keystore.getAbsolutePath());\nprotocol.setKeystorePass(\"changeit\");\nprotocol.setTruststoreFile(truststore.getAbsolutePath());\nprotocol.setTruststorePass(\"changeit\");\nprotocol.setKeyAlias(\"apitester\");\nreturn connector;\n}\ncatch (IOException ex) {\nthrow new IllegalStateException(\"can't access keystore: [\" + \"keystore\"\n+ \"] or truststore: [\" + \"keystore\" + \"]\", ex);\n}\n}\n71.10. Use Tomcat\u2019s LegacyCookieProcessor\nThe embedded Tomcat used by Spring Boot does not support \"Version 0\" of the Cookie format out of\nthe box, and you may see the following error:\njava.lang.IllegalArgumentException: An invalid character [32] was present in the\nCookie value\nIf at all possible, you should consider updating your code to only store values compliant with later\nCookie specifications. If, however, you\u2019re unable to change the way that cookies are written, you\ncan instead configure Tomcat to use a LegacyCookieProcessor. To switch to the LegacyCookieProcessor\nuse an EmbeddedServletContainerCustomizer bean that adds a TomcatContextCustomizer:\n261\n@Bean\npublic EmbeddedServletContainerCustomizer cookieProcessorCustomizer() {\nreturn new EmbeddedServletContainerCustomizer() {\n@Override\npublic void customize(ConfigurableEmbeddedServletContainer container) {\nif (container instanceof TomcatEmbeddedServletContainerFactory) {\n((TomcatEmbeddedServletContainerFactory) container)\n.addContextCustomizers(new TomcatContextCustomizer() {\n@Override\npublic void customize(Context context) {\ncontext.setCookieProcessor(new LegacyCookieProcessor());\n}\n});\n}\n}\n};\n}\n71.11. Use Jetty instead of Tomcat\nThe Spring Boot starters (spring-boot-starter-web in particular) use Tomcat as an embedded\ncontainer by default. You need to exclude those dependencies and include the Jetty one instead.\nSpring Boot provides Tomcat and Jetty dependencies bundled together as separate starters to help\nmake this process as easy as possible.\nExample in Maven:\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n<exclusions>\n<exclusion>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-tomcat</artifactId>\n</exclusion>\n</exclusions>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-jetty</artifactId>\n</dependency>\nExample in Gradle:\n262\nconfigurations {\ncompile.exclude module: \"spring-boot-starter-tomcat\"\n}\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-starter-web:2.0.0.BUILD-SNAPSHOT\")\ncompile(\"org.springframework.boot:spring-boot-starter-jetty:2.0.0.BUILD-SNAPSHOT\")\n// ...\n}\n71.12. Configure Jetty\nGenerally you can follow the advice from Discover built-in options for external properties about\n@ConfigurationProperties (ServerProperties is the main one here), but also look at\nEmbeddedServletContainerCustomizer. The Jetty APIs are quite rich so once you have access to the\nJettyEmbeddedServletContainerFactory you can modify it in a number of ways. Or the nuclear option\nis to add your own JettyEmbeddedServletContainerFactory.\n71.13. Use Undertow instead of Tomcat\nUsing Undertow instead of Tomcat is very similar to using Jetty instead of Tomcat. You need to\nexclude the Tomcat dependencies and include the Undertow starter instead.\nExample in Maven:\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n<exclusions>\n<exclusion>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-tomcat</artifactId>\n</exclusion>\n</exclusions>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-undertow</artifactId>\n</dependency>\nExample in Gradle:\n263\nconfigurations {\ncompile.exclude module: \"spring-boot-starter-tomcat\"\n}\ndependencies {\ncompile(\"org.springframework.boot:spring-boot-starter-web:2.0.0.BUILD-SNAPSHOT\")\ncompile(\"org.springframework.boot:spring-boot-starter-undertow:2.0.0.BUILD-\nSNAPSHOT\")\n// ...\n}\n71.14. Configure Undertow\nGenerally you can follow the advice from Discover built-in options for external properties about\n@ConfigurationProperties (ServerProperties and ServerProperties.Undertow are the main ones here),\nbut also look at EmbeddedServletContainerCustomizer. Once you have access to the\nUndertowEmbeddedServletContainerFactory you can use an UndertowBuilderCustomizer to modify\nUndertow\u2019s configuration to meet your needs. Or the nuclear option is to add your own\nUndertowEmbeddedServletContainerFactory.\n71.15. Enable Multiple Listeners with Undertow\nAdd an UndertowBuilderCustomizer to the UndertowEmbeddedServletContainerFactory and add a\nlistener to the Builder:\n@Bean\npublic UndertowEmbeddedServletContainerFactory embeddedServletContainerFactory() {\nUndertowEmbeddedServletContainerFactory factory = new\nUndertowEmbeddedServletContainerFactory();\nfactory.addBuilderCustomizers(new UndertowBuilderCustomizer() {\n@Override\npublic void customize(Builder builder) {\nbuilder.addHttpListener(8080, \"0.0.0.0\");\n}\n});\nreturn factory;\n}\n71.16. Use Tomcat 7.x or 8.0\nTomcat 7 & 8.0 work with Spring Boot, but the default is to use Tomcat 8.5. If you cannot use Tomcat\n8.5 (for example, because you are using Java 1.6) you will need to change your classpath to\nreference a different version.\n264\n71.16.1. Use Tomcat 7.x or 8.0 with Maven\nIf you are using the starters and parent you can change the Tomcat version property and\nadditionally import tomcat-juli. E.g. for a simple webapp or service:\n<properties>\n<tomcat.version>7.0.59</tomcat.version>\n</properties>\n<dependencies>\n...\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n<groupId>org.apache.tomcat</groupId>\n<artifactId>tomcat-juli</artifactId>\n<version>${tomcat.version}</version>\n</dependency>\n...\n</dependencies>\n71.16.2. Use Tomcat 7.x or 8.0 with Gradle\nWith Gradle, you can change the Tomcat version by setting the tomcat.version property and then\nadditionally include tomcat-juli:\next['tomcat.version'] = '7.0.59'\ndependencies {\ncompile 'org.springframework.boot:spring-boot-starter-web'\ncompile group:'org.apache.tomcat', name:'tomcat-juli', version:property(\n'tomcat.version')\n}\n71.17. Use Jetty 9.2\nJetty 9.2 works with Spring Boot, but the default is to use Jetty 9.3. If you cannot use Jetty 9.3 (for\nexample, because you are using Java 7) you will need to change your classpath to reference Jetty\n9.2.\n71.17.1. Use Jetty 9.2 with Maven\nIf you are using the starters and parent you can just add the Jetty starter and override the\njetty.version property:\n265\n<properties>\n<jetty.version>9.2.17.v20160517</jetty.version>\n</properties>\n<dependencies>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n<exclusions>\n<exclusion>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-tomcat</artifactId>\n</exclusion>\n</exclusions>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-jetty</artifactId>\n</dependency>\n</dependencies>\n71.17.2. Use Jetty 9.2 with Gradle\nYou can set the jetty.version property. For example, for a simple webapp or service:\next['jetty.version'] = '9.2.17.v20160517'\ndependencies {\ncompile ('org.springframework.boot:spring-boot-starter-web') {\nexclude group: 'org.springframework.boot', module: 'spring-boot-starter-\ntomcat'\n}\ncompile ('org.springframework.boot:spring-boot-starter-jetty')\n}\n71.18. Use Jetty 8\nJetty 8 works with Spring Boot, but the default is to use Jetty 9.3. If you cannot use Jetty 9.3 (for\nexample, because you are using Java 1.6) you will need to change your classpath to reference Jetty\n8. You will also need to exclude Jetty\u2019s WebSocket-related dependencies.\n71.18.1. Use Jetty 8 with Maven\nIf you are using the starters and parent you can just add the Jetty starter with the required\nWebSocket exclusion and change the version properties, e.g. for a simple webapp or service:\n266\n<properties>\n<jetty.version>8.1.15.v20140411</jetty.version>\n<jetty-jsp.version>2.2.0.v201112011158</jetty-jsp.version>\n</properties>\n<dependencies>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n<exclusions>\n<exclusion>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-tomcat</artifactId>\n</exclusion>\n</exclusions>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-jetty</artifactId>\n<exclusions>\n<exclusion>\n<groupId>org.eclipse.jetty.websocket</groupId>\n<artifactId>*</artifactId>\n</exclusion>\n</exclusions>\n</dependency>\n</dependencies>\n71.18.2. Use Jetty 8 with Gradle\nYou can set the jetty.version property and exclude the WebSocket dependency, e.g. for a simple\nwebapp or service:\next['jetty.version'] = '8.1.15.v20140411'\ndependencies {\ncompile ('org.springframework.boot:spring-boot-starter-web') {\nexclude group: 'org.springframework.boot', module: 'spring-boot-starter-\ntomcat'\n}\ncompile ('org.springframework.boot:spring-boot-starter-jetty') {\nexclude group: 'org.eclipse.jetty.websocket'\n}\n}\n267\n71.19. Create WebSocket endpoints using\n@ServerEndpoint\nIf you want to use @ServerEndpoint in a Spring Boot application that used an embedded container,\nyou must declare a single ServerEndpointExporter @Bean:\n@Bean\npublic ServerEndpointExporter serverEndpointExporter() {\nreturn new ServerEndpointExporter();\n}\nThis bean will register any @ServerEndpoint annotated beans with the underlying WebSocket\ncontainer. When deployed to a standalone servlet container this role is performed by a servlet\ncontainer initializer and the ServerEndpointExporter bean is not required.\n71.20. Enable HTTP response compression\nHTTP response compression is supported by Jetty, Tomcat, and Undertow. It can be enabled via\napplication.properties:\nserver.compression.enabled=true\nBy default, responses must be at least 2048 bytes in length for compression to be performed. This\ncan be configured using the server.compression.min-response-size property.\nBy default, responses will only be compressed if their content type is one of the following:\ntext/html\n\u2022\ntext/xml\n\u2022\ntext/plain\n\u2022\ntext/css\n\u2022\nThis can be configured using the server.compression.mime-types property.\n268\nChapter 72. Spring MVC\n72.1. Write a JSON REST service\nAny Spring @RestController in a Spring Boot application should render JSON response by default as\nlong as Jackson2 is on the classpath. For example:\n@RestController\npublic class MyController {\n@RequestMapping(\"/thing\")\npublic MyThing thing() {\nreturn new MyThing();\n}\n}\nAs long as MyThing can be serialized by Jackson2 (e.g. a normal POJO or Groovy object) then\nlocalhost:8080/thing will serve a JSON representation of it by default. Sometimes in a browser you\nmight see XML responses because browsers tend to send accept headers that prefer XML.\n72.2. Write an XML REST service\nIf you have the Jackson XML extension (jackson-dataformat-xml) on the classpath, it will be used to\nrender XML responses and the very same example as we used for JSON would work. To use it, add\nthe following dependency to your project:\n<dependency>\n<groupId>com.fasterxml.jackson.dataformat</groupId>\n<artifactId>jackson-dataformat-xml</artifactId>\n</dependency>\nYou may also want to add a dependency on Woodstox. It\u2019s faster than the default StAX\nimplementation provided by the JDK and also adds pretty print support and improved namespace\nhandling:\n<dependency>\n<groupId>org.codehaus.woodstox</groupId>\n<artifactId>woodstox-core-asl</artifactId>\n</dependency>\nIf Jackson\u2019s XML extension is not available, JAXB (provided by default in the JDK) will be used, with\nthe additional requirement to have MyThing annotated as @XmlRootElement:\n269\n@XmlRootElement\npublic class MyThing {\nprivate String name;\n// .. getters and setters\n}\nTo get the server to render XML instead of JSON you might have to send an Accept: text/xml header\n(or use a browser).\n72.3. Customize the Jackson ObjectMapper\nSpring MVC (client and server side) uses HttpMessageConverters to negotiate content conversion in\nan HTTP exchange. If Jackson is on the classpath you already get the default converter(s) provided\nby Jackson2ObjectMapperBuilder, an instance of which is auto-configured for you.\nThe ObjectMapper (or XmlMapper for Jackson XML converter) instance created by default has the\nfollowing customized properties:\n\u2022 MapperFeature.DEFAULT_VIEW_INCLUSION is disabled\n\u2022 DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES is disabled\nSpring Boot has also some features to make it easier to customize this behavior.\nYou can configure the ObjectMapper and XmlMapper instances using the environment. Jackson\nprovides an extensive suite of simple on/off features that can be used to configure various aspects\nof its processing. These features are described in six enums in Jackson which map onto properties\nin the environment:\nJackson enum Environment property\ncom.fasterxml.jackson.databind.Deserialization spring.jackson.deserialization.<feature_name>=\nFeature true|false\ncom.fasterxml.jackson.core.JsonGenerator.Featu spring.jackson.generator.<feature_name>=true|f\nre alse\ncom.fasterxml.jackson.databind.MapperFeature spring.jackson.mapper.<feature_name>=true|fals\ne\ncom.fasterxml.jackson.core.JsonParser.Feature spring.jackson.parser.<feature_name>=true|fals\ne\ncom.fasterxml.jackson.databind.SerializationFe spring.jackson.serialization.<feature_name>=tr\nature ue|false\ncom.fasterxml.jackson.annotation.JsonInclude.I spring.jackson.default-property-\nnclude inclusion=always|non_null|non_absent|non_defau\nlt|non_empty\nFor example, to enable pretty print, set spring.jackson.serialization.indent_output=true. Note that,\nthanks to the use of relaxed binding, the case of indent_output doesn\u2019t have to match the case of the\ncorresponding enum constant which is INDENT_OUTPUT.\n270\nThis environment-based configuration is applied to the auto-configured\nJackson2ObjectMapperBuilder bean, and will apply to any mappers created using the builder,\nincluding the auto-configured ObjectMapper bean.\nThe context\u2019s Jackson2ObjectMapperBuilder can be customized by one or more\nJackson2ObjectMapperBuilderCustomizer beans. Such customizer beans can be ordered and Boot\u2019s\nown customizer has an order of 0, allowing additional customization to be applied both before and\nafter Boot\u2019s customization.\nAny beans of type com.fasterxml.jackson.databind.Module will be automatically registered with the\nauto-configured Jackson2ObjectMapperBuilder and applied to any ObjectMapper instances that it\ncreates. This provides a global mechanism for contributing custom modules when you add new\nfeatures to your application.\nIf you want to replace the default ObjectMapper completely, either define a @Bean of that type and\nmark it as @Primary, or, if you prefer the builder-based approach, define a\nJackson2ObjectMapperBuilder @Bean. Note that in either case this will disable all auto-configuration of\nthe `ObjectMapper.\nIf you provide any @Beans of type MappingJackson2HttpMessageConverter then they will replace the\ndefault value in the MVC configuration. Also, a convenience bean is provided of type\nHttpMessageConverters (always available if you use the default MVC configuration) which has some\nuseful methods to access the default and user-enhanced message converters.\nSee also the Customize the @ResponseBody rendering section and the WebMvcAutoConfiguration\nsource code for more details.\n72.4. Customize the @ResponseBody rendering\nSpring uses HttpMessageConverters to render @ResponseBody (or responses from @RestController). You\ncan contribute additional converters by simply adding beans of that type in a Spring Boot context.\nIf a bean you add is of a type that would have been included by default anyway (like\nMappingJackson2HttpMessageConverter for JSON conversions) then it will replace the default value. A\nconvenience bean is provided of type HttpMessageConverters (always available if you use the default\nMVC configuration) which has some useful methods to access the default and user-enhanced\nmessage converters (useful, for example if you want to manually inject them into a custom\nRestTemplate).\nAs in normal MVC usage, any WebMvcConfigurerAdapter beans that you provide can also contribute\nconverters by overriding the configureMessageConverters method, but unlike with normal MVC, you\ncan supply only additional converters that you need (because Spring Boot uses the same\nmechanism to contribute its defaults). Finally, if you opt-out of the Spring Boot default MVC\nconfiguration by providing your own @EnableWebMvc configuration, then you can take control\ncompletely and do everything manually using getMessageConverters from\nWebMvcConfigurationSupport.\nSee the WebMvcAutoConfiguration source code for more details.\n271\n72.5. Handling Multipart File Uploads\nSpring Boot embraces the Servlet 3 javax.servlet.http.Part API to support uploading files. By\ndefault Spring Boot configures Spring MVC with a maximum file of 1MB per file and a maximum of\n10MB of file data in a single request. You may override these values, as well as the location to which\nintermediate data is stored (e.g., to the /tmp directory) and the threshold past which data is flushed\nto disk by using the properties exposed in the MultipartProperties class. If you want to specify that\nfiles be unlimited, for example, set the spring.http.multipart.max-file-size property to -1.\nThe multipart support is helpful when you want to receive multipart encoded file data as a\n@RequestParam-annotated parameter of type MultipartFile in a Spring MVC controller handler\nmethod.\nSee the MultipartAutoConfiguration source for more details.\n72.6. Switch off the Spring MVC DispatcherServlet\nSpring Boot wants to serve all content from the root of your application / down. If you would rather\nmap your own servlet to that URL you can do it, but of course you may lose some of the other Boot\nMVC features. To add your own servlet and map it to the root resource just declare a @Bean of type\nServlet and give it the special bean name dispatcherServlet (You can also create a bean of a\ndifferent type with that name if you want to switch it off and not replace it).\n72.7. Switch off the Default MVC configuration\nThe easiest way to take complete control over MVC configuration is to provide your own\n@Configuration with the @EnableWebMvc annotation. This will leave all MVC configuration in your\nhands.\n72.8. Customize ViewResolvers\nA ViewResolver is a core component of Spring MVC, translating view names in @Controller to actual\nView implementations. Note that ViewResolvers are mainly used in UI applications, rather than\nREST-style services (a View is not used to render a @ResponseBody). There are many implementations\nof ViewResolver to choose from, and Spring on its own is not opinionated about which ones you\nshould use. Spring Boot, on the other hand, installs one or two for you depending on what it finds\non the classpath and in the application context. The DispatcherServlet uses all the resolvers it finds\nin the application context, trying each one in turn until it gets a result, so if you are adding your\nown you have to be aware of the order and in which position your resolver is added.\nWebMvcAutoConfiguration adds the following ViewResolvers to your context:\n\u2022 An InternalResourceViewResolver with bean id \u2018defaultViewResolver\u2019. This one locates physical\nresources that can be rendered using the DefaultServlet (e.g. static resources and JSP pages if\nyou are using those). It applies a prefix and a suffix to the view name and then looks for a\nphysical resource with that path in the servlet context (defaults are both empty, but accessible\nfor external configuration via spring.mvc.view.prefix and spring.mvc.view.suffix). It can be\n272\noverridden by providing a bean of the same type.\n\u2022 A BeanNameViewResolver with id \u2018beanNameViewResolver\u2019. This is a useful member of the view\nresolver chain and will pick up any beans with the same name as the View being resolved. It\nshouldn\u2019t be necessary to override or replace it.\n\u2022 A ContentNegotiatingViewResolver with id \u2018viewResolver\u2019 is only added if there are actually\nbeans of type View present. This is a \u2018master\u2019 resolver, delegating to all the others and\nattempting to find a match to the \u2018Accept\u2019 HTTP header sent by the client. There is a useful blog\nabout ContentNegotiatingViewResolver that you might like to study to learn more, and also look\nat the source code for detail. You can switch off the auto-configured\nContentNegotiatingViewResolver by defining a bean named \u2018viewResolver\u2019.\n\u2022 If you use Thymeleaf you will also have a ThymeleafViewResolver with id\n\u2018thymeleafViewResolver\u2019. It looks for resources by surrounding the view name with a prefix and\nsuffix (externalized to spring.thymeleaf.prefix and spring.thymeleaf.suffix, defaults\n\u2018classpath:/templates/\u2019 and \u2018.html\u2019 respectively). It can be overridden by providing a bean of the\nsame name.\n\u2022 If you use FreeMarker you will also have a FreeMarkerViewResolver with id\n\u2018freeMarkerViewResolver\u2019. It looks for resources in a loader path (externalized to\nspring.freemarker.templateLoaderPath, default \u2018classpath:/templates/\u2019) by surrounding the view\nname with a prefix and suffix (externalized to spring.freemarker.prefix and\nspring.freemarker.suffix, with empty and \u2018.ftl\u2019 defaults respectively). It can be overridden by\nproviding a bean of the same name.\n\u2022 If you use Groovy templates (actually if groovy-templates is on your classpath) you will also\nhave a GroovyMarkupViewResolver with id \u2018groovyMarkupViewResolver\u2019. It looks for resources in\na loader path by surrounding the view name with a prefix and suffix (externalized to\nspring.groovy.template.prefix and spring.groovy.template.suffix, defaults\n\u2018classpath:/templates/\u2019 and \u2018.tpl\u2019 respectively). It can be overridden by providing a bean of the\nsame name.\nCheck out WebMvcAutoConfiguration, ThymeleafAutoConfiguration, FreeMarkerAutoConfiguration and\nGroovyTemplateAutoConfiguration\n72.9. Use Thymeleaf 3\nBy default, spring-boot-starter-thymeleaf uses Thymeleaf 2.1. If you are using the spring-boot-\nstarter-parent, you can use Thymeleaf 3 by overriding the thymeleaf.version and thymeleaf-layout-\ndialect.version properties, for example:\n<properties>\n<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>\n<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>\n</properties>\n\uf05a if you are managing dependencies yourself, look at spring-boot-dependencies for\nthe list of artifacts that are related to those two versions.\n273\nTo avoid a warning message about the HTML 5 template mode being deprecated and the HTML\ntemplate mode being used instead, you may also want to explicitly configure spring.thymeleaf.mode\nto be HTML, for example:\nspring.thymeleaf.mode: HTML\nPlease refer to the Thymeleaf 3 sample to see this in action.\nIf you are using any of the other auto-configured Thymeleaf Extras (Spring Security, Data Attribute,\nor Java 8 Time) you should also override each of their versions to one that is compatible with\nThymeleaf 3.0.\n274\nChapter 73. HTTP clients\n73.1. Configure RestTemplate to use a proxy\nAs described in RestTemplate customization, a RestTemplateCustomizer can be used with\nRestTemplateBuilder to build a customized RestTemplate. This is the recommended approach for\ncreating a RestTemplate configured to use a proxy.\nThe exact details of the proxy configuration depend on the underlying client request factory that is\nbeing used. Here\u2019s an example of configuring HttpComponentsClientRequestFactory with an\nHttpClient that uses a proxy for all hosts except 192.168.0.5.\nstatic class ProxyCustomizer implements RestTemplateCustomizer {\n@Override\npublic void customize(RestTemplate restTemplate) {\nHttpHost proxy = new HttpHost(\"proxy.example.com\");\nHttpClient httpClient = HttpClientBuilder.create()\n.setRoutePlanner(new DefaultProxyRoutePlanner(proxy) {\n@Override\npublic HttpHost determineProxy(HttpHost target,\nHttpRequest request, HttpContext context)\nthrows HttpException {\nif (target.getHostName().equals(\"192.168.0.5\")) {\nreturn null;\n}\nreturn super.determineProxy(target, request, context);\n}\n}).build();\nrestTemplate.setRequestFactory(\nnew HttpComponentsClientHttpRequestFactory(httpClient));\n}\n}\n275\nChapter 74. Logging\nSpring Boot has no mandatory logging dependency, except for the Commons Logging API, of which\nthere are many implementations to choose from. To use Logback you need to include it and jcl-\nover-slf4j (which implements the Commons Logging API) on the classpath. The simplest way to do\nthat is through the starters which all depend on spring-boot-starter-logging. For a web application\nyou only need spring-boot-starter-web since it depends transitively on the logging starter. For\nexample, using Maven:\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\nSpring Boot has a LoggingSystem abstraction that attempts to configure logging based on the content\nof the classpath. If Logback is available it is the first choice.\nIf the only change you need to make to logging is to set the levels of various loggers then you can do\nthat in application.properties using the \"logging.level\" prefix, e.g.\nlogging.level.org.springframework.web=DEBUG\nlogging.level.org.hibernate=ERROR\nYou can also set the location of a file to log to (in addition to the console) using \"logging.file\".\nTo configure the more fine-grained settings of a logging system you need to use the native\nconfiguration format supported by the LoggingSystem in question. By default Spring Boot picks up\nthe native configuration from its default location for the system (e.g. classpath:logback.xml for\nLogback), but you can set the location of the config file using the \"logging.config\" property.\n74.1. Configure Logback for logging\nIf you put a logback.xml in the root of your classpath it will be picked up from there (or logback-\nspring.xml to take advantage of the templating features provided by Boot). Spring Boot provides a\ndefault base configuration that you can include if you just want to set levels, e.g.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n<include resource=\"org/springframework/boot/logging/logback/base.xml\"/>\n<logger name=\"org.springframework.web\" level=\"DEBUG\"/>\n</configuration>\nIf you look at that base.xml in the spring-boot jar, you will see that it uses some useful System\nproperties which the LoggingSystem takes care of creating for you. These are:\n276\n\u2022 ${PID} the current process ID.\n\u2022 ${LOG_FILE} if logging.file was set in Boot\u2019s external configuration.\n\u2022 ${LOG_PATH} if logging.path was set (representing a directory for log files to live in).\n\u2022 ${LOG_EXCEPTION_CONVERSION_WORD} if logging.exception-conversion-word was set in Boot\u2019s\nexternal configuration.\nSpring Boot also provides some nice ANSI colour terminal output on a console (but not in a log file)\nusing a custom Logback converter. See the default base.xml configuration for details.\nIf Groovy is on the classpath you should be able to configure Logback with logback.groovy as well (it\nwill be given preference if present).\n74.1.1. Configure logback for file only output\nIf you want to disable console logging and write output only to a file you need a custom logback-\nspring.xml that imports file-appender.xml but not console-appender.xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n<include resource=\"org/springframework/boot/logging/logback/defaults.xml\" />\n<property name=\"LOG_FILE\" value=\"${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-\n${java.io.tmpdir:-/tmp}}/}spring.log}\"/>\n<include resource=\"org/springframework/boot/logging/logback/file-appender.xml\" />\n<root level=\"INFO\">\n<appender-ref ref=\"FILE\" />\n</root>\n</configuration>\nYou also need to add logging.file to your application.properties:\nlogging.file=myapplication.log\n74.2. Configure Log4j for logging\nSpring Boot supports Log4j 2 for logging configuration if it is on the classpath. If you are using the\nstarters for assembling dependencies that means you have to exclude Logback and then include\nlog4j 2 instead. If you aren\u2019t using the starters then you need to provide jcl-over-slf4j (at least) in\naddition to Log4j 2.\nThe simplest path is probably through the starters, even though it requires some jiggling with\nexcludes, .e.g. in Maven:\n277\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter</artifactId>\n<exclusions>\n<exclusion>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-logging</artifactId>\n</exclusion>\n</exclusions>\n</dependency>\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\nThe use of the Log4j starters gathers together the dependencies for common\n\uf05a logging requirements (e.g. including having Tomcat use java.util.logging but\nconfiguring the output using Log4j 2). See the Actuator Log4j 2 samples for more\ndetail and to see it in action.\n74.2.1. Use YAML or JSON to configure Log4j 2\nIn addition to its default XML configuration format, Log4j 2 also supports YAML and JSON\nconfiguration files. To configure Log4j 2 to use an alternative configuration file format, add the\nappropriate dependencies to the classpath and name your configuration files to match your chosen\nfile format:\nFormat Dependencies File names\nYAML com.fasterxml.jackson.core:jackson-databind log4j2.yaml\ncom.fasterxml.jackson.dataformat:jackson-dataformat-yaml log4j2.yml\nJSON com.fasterxml.jackson.core:jackson-databind log4j2.json\nlog4j2.jsn\n278\nChapter 75. Data Access\n75.1. Configure a DataSource\nTo override the default settings just define a @Bean of your own of type DataSource. As explained in\nThird-party configuration you can easily bind it to a set of Environment properties:\n@Bean\n@ConfigurationProperties(prefix=\"datasource.fancy\")\npublic DataSource dataSource() {\nreturn new FancyDataSource();\n}\ndatasource.fancy.jdbcUrl=jdbc:h2:mem:mydb\ndatasource.fancy.username=sa\ndatasource.fancy.poolSize=30\nSpring Boot also provides a utility builder class DataSourceBuilder that can be used to create one of\nthe standard data sources (if it is on the classpath), or you can just create your own. If you want to\nreuse the customizations of DataSourceProperties, you can easily initialize a DataSourceBuilder from\nit:\n@Bean\n@ConfigurationProperties(prefix=\"datasource.mine\")\npublic DataSource dataSource(DataSourceProperties properties) {\nreturn properties.initializeDataSourceBuilder()\n// additional customizations\n.build();\n}\nspring.datasource.url=jdbc:h2:mem:mydb\nspring.datasource.username=sa\ndatasource.mine.poolSize=30\nIn this scenario, you keep the standard properties exposed by Spring Boot with your custom\nDataSource arrangement. By adding @ConfigurationProperties, you can also expose additional\nimplementation-specific settings in a dedicated namespace.\nSee Configure a DataSource in the \u2018Spring Boot features\u2019 section and the\nDataSourceAutoConfiguration class for more details.\n279\nYou could also do that if you want to configure a JNDI data-source.\n@Bean(destroyMethod=\"\")\n@ConfigurationProperties(prefix=\"datasource.mine\")\n\uf0eb public DataSource dataSource() throws Exception {\nJndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup(\n);\nreturn dataSourceLookup.getDataSource(\"java:comp/env/jdbc/YourDS\"\n);\n}\n75.2. Configure Two DataSources\nCreating more than one data source works the same as creating the first one. You might want to\nmark one of them as @Primary if you are using the default auto-configuration for JDBC or JPA (then\nthat one will be picked up by any @Autowired injections).\n@Bean\n@Primary\n@ConfigurationProperties(prefix=\"datasource.primary\")\npublic DataSource primaryDataSource() {\nreturn DataSourceBuilder.create().build();\n}\n@Bean\n@ConfigurationProperties(prefix=\"datasource.secondary\")\npublic DataSource secondaryDataSource() {\nreturn DataSourceBuilder.create().build();\n}\n75.3. Use Spring Data repositories\nSpring Data can create implementations for you of @Repository interfaces of various flavors. Spring\nBoot will handle all of that for you as long as those @Repositories are included in the same package\n(or a sub-package) of your @EnableAutoConfiguration class.\nFor many applications all you will need is to put the right Spring Data dependencies on your\nclasspath (there is a spring-boot-starter-data-jpa for JPA and a spring-boot-starter-data-mongodb\nfor Mongodb), create some repository interfaces to handle your @Entity objects. Examples are in the\nJPA sample or the Mongodb sample.\nSpring Boot tries to guess the location of your @Repository definitions, based on the\n@EnableAutoConfiguration it finds. To get more control, use the @EnableJpaRepositories annotation\n(from Spring Data JPA).\n280\n75.4. Separate @Entity definitions from Spring\nconfiguration\nSpring Boot tries to guess the location of your @Entity definitions, based on the\n@EnableAutoConfiguration it finds. To get more control, you can use the @EntityScan annotation, e.g.\n@Configuration\n@EnableAutoConfiguration\n@EntityScan(basePackageClasses=City.class)\npublic class Application {\n//...\n}\n75.5. Configure JPA properties\nSpring Data JPA already provides some vendor-independent configuration options (e.g. for SQL\nlogging) and Spring Boot exposes those, and a few more for hibernate as external configuration\nproperties. The most common options to set are:\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.hibernate.naming.physical-strategy=com.example.MyPhysicalNamingStrategy\nspring.jpa.database=H2\nspring.jpa.show-sql=true\nThe ddl-auto setting is a special case in that it has different defaults depending on whether you are\nusing an embedded database (create-drop) or not (none). In addition all properties in\nspring.jpa.properties.* are passed through as normal JPA properties (with the prefix stripped)\nwhen the local EntityManagerFactory is created.\nSpring Boot provides a consistent naming strategy regardless of the Hibernate generation that you\nare using. If you are using Hibernate 4, you can customize it using\nspring.jpa.hibernate.naming.strategy; Hibernate 5 defines a Physical and Implicit naming\nstrategies: Spring Boot configures SpringPhysicalNamingStrategy by default. This implementation\nprovides the same table structure as Hibernate 4. If you\u2019d rather use Hibernate 5\u2019s default instead,\nset the following property:\nspring.jpa.hibernate.naming.physical-\nstrategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\nSee HibernateJpaAutoConfiguration and JpaBaseConfiguration for more details.\n281\n75.6. Use a custom EntityManagerFactory\nTo take full control of the configuration of the EntityManagerFactory, you need to add a @Bean named\n\u2018entityManagerFactory\u2019. Spring Boot auto-configuration switches off its entity manager based on the\npresence of a bean of that type.\n75.7. Use Two EntityManagers\nEven if the default EntityManagerFactory works fine, you will need to define a new one because\notherwise the presence of the second bean of that type will switch off the default. To make it easy to\ndo that you can use the convenient EntityManagerBuilder provided by Spring Boot, or if you prefer\nyou can just use the LocalContainerEntityManagerFactoryBean directly from Spring ORM.\nExample:\n// add two data sources configured as above\n@Bean\npublic LocalContainerEntityManagerFactoryBean customerEntityManagerFactory(\nEntityManagerFactoryBuilder builder) {\nreturn builder\n.dataSource(customerDataSource())\n.packages(Customer.class)\n.persistenceUnit(\"customers\")\n.build();\n}\n@Bean\npublic LocalContainerEntityManagerFactoryBean orderEntityManagerFactory(\nEntityManagerFactoryBuilder builder) {\nreturn builder\n.dataSource(orderDataSource())\n.packages(Order.class)\n.persistenceUnit(\"orders\")\n.build();\n}\nThe configuration above almost works on its own. To complete the picture you need to configure\nTransactionManagers for the two EntityManagers as well. One of them could be picked up by the\ndefault JpaTransactionManager in Spring Boot if you mark it as @Primary. The other would have to be\nexplicitly injected into a new instance. Or you might be able to use a JTA transaction manager\nspanning both.\nIf you are using Spring Data, you need to configure @EnableJpaRepositories accordingly:\n282\n@Configuration\n@EnableJpaRepositories(basePackageClasses = Customer.class,\nentityManagerFactoryRef = \"customerEntityManagerFactory\")\npublic class CustomerConfiguration {\n...\n}\n@Configuration\n@EnableJpaRepositories(basePackageClasses = Order.class,\nentityManagerFactoryRef = \"orderEntityManagerFactory\")\npublic class OrderConfiguration {\n...\n}\n75.8. Use a traditional persistence.xml\nSpring doesn\u2019t require the use of XML to configure the JPA provider, and Spring Boot assumes you\nwant to take advantage of that feature. If you prefer to use persistence.xml then you need to define\nyour own @Bean of type LocalEntityManagerFactoryBean (with id \u2018entityManagerFactory\u2019, and set the\npersistence unit name there.\nSee JpaBaseConfiguration for the default settings.\n75.9. Use Spring Data JPA and Mongo repositories\nSpring Data JPA and Spring Data Mongo can both create Repository implementations for you\nautomatically. If they are both present on the classpath, you might have to do some extra\nconfiguration to tell Spring Boot which one (or both) you want to create repositories for you. The\nmost explicit way to do that is to use the standard Spring Data @Enable*Repositories and tell it the\nlocation of your Repository interfaces (where \u2018*\u2019 is \u2018Jpa\u2019 or \u2018Mongo\u2019 or both).\nThere are also flags spring.data.*.repositories.enabled that you can use to switch the auto-\nconfigured repositories on and off in external configuration. This is useful for instance in case you\nwant to switch off the Mongo repositories and still use the auto-configured MongoTemplate.\nThe same obstacle and the same features exist for other auto-configured Spring Data repository\ntypes (Elasticsearch, Solr). Just change the names of the annotations and flags respectively.\n75.10. Expose Spring Data repositories as REST\nendpoint\nSpring Data REST can expose the Repository implementations as REST endpoints for you as long as\nSpring MVC has been enabled for the application.\nSpring Boot exposes as set of useful properties from the spring.data.rest namespace that customize\nthe RepositoryRestConfiguration. If you need to provide additional customization, you should use a\nRepositoryRestConfigurer bean.\n283\n75.11. Configure a component that is used by JPA\nIf you want to configure a component that will be used by JPA then you need to ensure that the\ncomponent is initialized before JPA. Where the component is auto-configured Spring Boot will take\ncare of this for you. For example, when Flyway is auto-configured, Hibernate is configured to\ndepend upon Flyway so that the latter has a chance to initialize the database before Hibernate tries\nto use it.\nIf you are configuring a component yourself, you can use an\nEntityManagerFactoryDependsOnPostProcessor subclass as a convenient way of setting up the\nnecessary dependencies. For example, if you are using Hibernate Search with Elasticsearch as its\nindex manager then any EntityManagerFactory beans must be configured to depend on the\nelasticsearchClient bean:\n/**\n* {@link EntityManagerFactoryDependsOnPostProcessor} that ensures that\n* {@link EntityManagerFactory} beans depend on the {@code elasticsearchClient} bean.\n*/\n@Configuration\nstatic class ElasticsearchJpaDependencyConfiguration\nextends EntityManagerFactoryDependsOnPostProcessor {\nElasticsearchJpaDependencyConfiguration() {\nsuper(\"elasticsearchClient\");\n}\n}\n284\nChapter 76. Database initialization\nAn SQL database can be initialized in different ways depending on what your stack is. Or of course\nyou can do it manually as long as the database is a separate process.\n76.1. Initialize a database using JPA\nJPA has features for DDL generation, and these can be set up to run on startup against the database.\nThis is controlled through two external properties:\n\u2022 spring.jpa.generate-ddl (boolean) switches the feature on and off and is vendor independent.\n\u2022 spring.jpa.hibernate.ddl-auto (enum) is a Hibernate feature that controls the behavior in a\nmore fine-grained way. See below for more detail.\n76.2. Initialize a database using Hibernate\nYou can set spring.jpa.hibernate.ddl-auto explicitly and the standard Hibernate property values\nare none, validate, update, create, create-drop. Spring Boot chooses a default value for you based on\nwhether it thinks your database is embedded (default create-drop) or not (default none). An\nembedded database is detected by looking at the Connection type: hsqldb, h2 and derby are\nembedded, the rest are not. Be careful when switching from in-memory to a \u2018real\u2019 database that you\ndon\u2019t make assumptions about the existence of the tables and data in the new platform. You either\nhave to set ddl-auto explicitly, or use one of the other mechanisms to initialize the database.\n\uf05a You can output the schema creation by enabling the org.hibernate.SQL logger.\nThis is done for you automatically if you enable the debug mode.\nIn addition, a file named import.sql in the root of the classpath will be executed on startup if\nHibernate creates the schema from scratch (that is if the ddl-auto property is set to create or\ncreate-drop). This can be useful for demos and for testing if you are careful, but probably not\nsomething you want to be on the classpath in production. It is a Hibernate feature (nothing to do\nwith Spring).\n76.3. Initialize a database using Spring JDBC\nSpring JDBC has a DataSource initializer feature. Spring Boot enables it by default and loads SQL\nfrom the standard locations schema.sql and data.sql (in the root of the classpath). In addition\nSpring Boot will load the schema-${platform}.sql and data-${platform}.sql files (if present), where\nplatform is the value of spring.datasource.platform, e.g. you might choose to set it to the vendor\nname of the database (hsqldb, h2, oracle, mysql, postgresql etc.). Spring Boot enables the fail-fast\nfeature of the Spring JDBC initializer by default, so if the scripts cause exceptions the application\nwill fail to start. The script locations can be changed by setting spring.datasource.schema and\nspring.datasource.data, and neither location will be processed if\nspring.datasource.initialize=false.\nTo disable the fail-fast you can set spring.datasource.continue-on-error=true. This can be useful\n285\nonce an application has matured and been deployed a few times, since the scripts can act as \u2018poor\nman\u2019s migrations\u2019 \u2014 inserts that fail mean that the data is already there, so there would be no need\nto prevent the application from running, for instance.\nIf you want to use the schema.sql initialization in a JPA app (with Hibernate) then ddl-auto=create-\ndrop will lead to errors if Hibernate tries to create the same tables. To avoid those errors set ddl-\nauto explicitly to \"\" (preferable) or \"none\". Whether or not you use ddl-auto=create-drop you can\nalways use data.sql to initialize new data.\n76.4. Initialize a Spring Batch database\nIf you are using Spring Batch then it comes pre-packaged with SQL initialization scripts for most\npopular database platforms. Spring Boot will detect your database type, and execute those scripts\nby default, and in this case will switch the fail fast setting to false (errors are logged but do not\nprevent the application from starting). This is because the scripts are known to be reliable and\ngenerally do not contain bugs, so errors are ignorable, and ignoring them makes the scripts\nidempotent. You can switch off the initialization explicitly using\nspring.batch.initializer.enabled=false.\n76.5. Use a higher-level database migration tool\nSpring Boot supports two higher-level migration tools: Flyway and Liquibase.\n76.5.1. Execute Flyway database migrations on startup\nTo automatically run Flyway database migrations on startup, add the org.flywaydb:flyway-core to\nyour classpath.\nThe migrations are scripts in the form V<VERSION>__<NAME>.sql (with <VERSION> an underscore-\nseparated version, e.g. \u20181\u2019 or \u20182_1\u2019). By default they live in a folder classpath:db/migration but you\ncan modify that using flyway.locations (a list). See the Flyway class from flyway-core for details of\navailable settings like schemas etc. In addition Spring Boot provides a small set of properties in\nFlywayProperties that can be used to disable the migrations, or switch off the location checking.\nSpring Boot will call Flyway.migrate() to perform the database migration. If you would like more\ncontrol, provide a @Bean that implements FlywayMigrationStrategy.\n\uf0eb If you want to make use of Flyway callbacks, those scripts should also live in the\nclasspath:db/migration folder.\nBy default Flyway will autowire the (@Primary) DataSource in your context and use that for\nmigrations. If you like to use a different DataSource you can create one and mark its @Bean as\n@FlywayDataSource - if you do that remember to create another one and mark it as @Primary if you\nwant two data sources. Or you can use Flyway\u2019s native DataSource by setting\nflyway.[url,user,password] in external properties.\nThere is a Flyway sample so you can see how to set things up.\n286\n76.5.2. Execute Liquibase database migrations on startup\nTo automatically run Liquibase database migrations on startup, add the org.liquibase:liquibase-\ncore to your classpath.\nThe master change log is by default read from db/changelog/db.changelog-master.yaml but can be set\nusing liquibase.change-log. In addition to YAML, Liquibase also supports JSON, XML, and SQL\nchange log formats.\nSee LiquibaseProperties for details of available settings like contexts, default schema etc.\nThere is a Liquibase sample so you can see how to set things up.\n287\nChapter 77. Messaging\n77.1. Disable transacted JMS session\nIf your JMS broker does not support transacted session, you will have to disable the support of\ntransactions altogether. If you create your own JmsListenerContainerFactory there is nothing to do\nsince it won\u2019t be transacted by default. If you want to use the\nDefaultJmsListenerContainerFactoryConfigurer to reuse Spring Boot\u2019s default, you can disable\ntransacted session as follows:\n@Bean\npublic DefaultJmsListenerContainerFactory jmsListenerContainerFactory(\nConnectionFactory connectionFactory,\nDefaultJmsListenerContainerFactoryConfigurer configurer) {\nDefaultJmsListenerContainerFactory listenerFactory =\nnew DefaultJmsListenerContainerFactory();\nconfigurer.configure(listenerFactory, connectionFactory);\nlistenerFactory.setTransactionManager(null);\nlistenerFactory.setSessionTransacted(false);\nreturn listenerFactory;\n}\nThis overrides the default factory and this should be applied to any other factory that your\napplication defines, if any.\n288\nChapter 78. Batch applications\n78.1. Execute Spring Batch jobs on startup\nSpring Batch auto-configuration is enabled by adding @EnableBatchProcessing (from Spring Batch)\nsomewhere in your context.\nBy default it executes all Jobs in the application context on startup (see\nJobLauncherCommandLineRunner for details). You can narrow down to a specific job or jobs by\nspecifying spring.batch.job.names (comma-separated job name patterns).\nIf the application context includes a JobRegistry then the jobs in spring.batch.job.names are looked\nup in the registry instead of being autowired from the context. This is a common pattern with more\ncomplex systems where multiple jobs are defined in child contexts and registered centrally.\nSee BatchAutoConfiguration and @EnableBatchProcessing for more details.\n289\nChapter 79. Actuator\n79.1. Change the HTTP port or address of the actuator\nendpoints\nIn a standalone application the Actuator HTTP port defaults to the same as the main HTTP port. To\nmake the application listen on a different port set the external property management.port. To listen\non a completely different network address (e.g. if you have an internal network for management\nand an external one for user applications) you can also set management.address to a valid IP address\nthat the server is able to bind to.\nFor more detail look at the ManagementServerProperties source code and Customizing the\nmanagement server port in the \u2018Production-ready features\u2019 section.\n79.2. Customize the \u2018whitelabel\u2019 error page\nSpring Boot installs a \u2018whitelabel\u2019 error page that you will see in browser client if you encounter a\nserver error (machine clients consuming JSON and other media types should see a sensible\nresponse with the right error code).\nSet server.error.whitelabel.enabled=false to switch the default error page off\n\uf05a which will restore the default of the servlet container that you are using. Note\nthat Spring Boot will still attempt to resolve the error view so you\u2019d probably add\nyou own error page rather than disabling it completely.\nOverriding the error page with your own depends on the templating technology that you are using.\nFor example, if you are using Thymeleaf you would add an error.html template and if you are using\nFreeMarker you would add an error.ftl template. In general what you need is a View that resolves\nwith a name of error, and/or a @Controller that handles the /error path. Unless you replaced some\nof the default configuration you should find a BeanNameViewResolver in your ApplicationContext so a\n@Bean with id error would be a simple way of doing that. Look at ErrorMvcAutoConfiguration for\nmore options.\nSee also the section on Error Handling for details of how to register handlers in the servlet\ncontainer.\n79.3. Actuator and Jersey\nActuator HTTP endpoints are only available for Spring MVC-based applications. If you want to use\nJersey and still use the actuator you will need to enable Spring MVC (by depending on spring-boot-\nstarter-web, for example). By default, both Jersey and the Spring MVC dispatcher servlet are\nmapped to the same path (/). You will need to change the path for one of them (by configuring\nserver.servlet-path for Spring MVC or spring.jersey.application-path for Jersey). For example, if\nyou add server.servlet-path=/system into application.properties, the actuator HTTP endpoints will\nbe available under /system.\n290\nChapter 80. Security\n80.1. Switch off the Spring Boot security configuration\nIf you define a @Configuration with @EnableWebSecurity anywhere in your application it will switch\noff the default webapp security settings in Spring Boot (but leave the Actuator\u2019s security enabled).\nTo tweak the defaults try setting properties in security.* (see SecurityProperties for details of\navailable settings) and SECURITY section of Common application properties.\n80.2. Change the AuthenticationManager and add user\naccounts\nIf you provide a @Bean of type AuthenticationManager the default one will not be created, so you have\nthe full feature set of Spring Security available (e.g. various authentication options).\nSpring Security also provides a convenient AuthenticationManagerBuilder which can be used to\nbuild an AuthenticationManager with common options. The recommended way to use this in a\nwebapp is to inject it into a void method in a WebSecurityConfigurerAdapter, e.g.\n@Configuration\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n@Autowired\npublic void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\nauth.inMemoryAuthentication()\n.withUser(\"barry\").password(\"password\").roles(\"USER\"); // ... etc.\n}\n// ... other stuff for application security\n}\nYou will get the best results if you put this in a nested class, or a standalone class (i.e. not mixed in\nwith a lot of other @Beans that might be allowed to influence the order of instantiation). The secure\nweb sample is a useful template to follow.\nIf you experience instantiation issues (e.g. using JDBC or JPA for the user detail store) it might be\nworth extracting the AuthenticationManagerBuilder callback into a\nGlobalAuthenticationConfigurerAdapter (in the init() method so it happens before the\nauthentication manager is needed elsewhere), e.g.\n291\n@Configuration\npublic class AuthenticationManagerConfiguration extends\nGlobalAuthenticationConfigurerAdapter {\n@Override\npublic void init(AuthenticationManagerBuilder auth) {\nauth.inMemoryAuthentication() // ... etc.\n}\n}\n80.3. Enable HTTPS when running behind a proxy\nserver\nEnsuring that all your main endpoints are only available over HTTPS is an important chore for any\napplication. If you are using Tomcat as a servlet container, then Spring Boot will add Tomcat\u2019s own\nRemoteIpValve automatically if it detects some environment settings, and you should be able to rely\non the HttpServletRequest to report whether it is secure or not (even downstream of a proxy server\nthat handles the real SSL termination). The standard behavior is determined by the presence or\nabsence of certain request headers (x-forwarded-for and x-forwarded-proto), whose names are\nconventional, so it should work with most front end proxies. You can switch on the valve by adding\nsome entries to application.properties, e.g.\nserver.tomcat.remote_ip_header=x-forwarded-for\nserver.tomcat.protocol_header=x-forwarded-proto\n(The presence of either of those properties will switch on the valve. Or you can add the\nRemoteIpValve yourself by adding a TomcatEmbeddedServletContainerFactory bean.)\nSpring Security can also be configured to require a secure channel for all (or some requests). To\nswitch that on in a Spring Boot application you just need to set security.require_ssl to true in\napplication.properties.\n292\nChapter 81. Hot swapping\n81.1. Reload static content\nThere are several options for hot reloading. The recommended approach is to use spring-boot-\ndevtools as it provides additional development-time features such as support for fast application\nrestarts and LiveReload as well as sensible development-time configuration (e.g. template caching).\nAlternatively, running in an IDE (especially with debugging on) is a good way to do development\n(all modern IDEs allow reloading of static resources and usually also hot-swapping of Java class\nchanges).\nFinally, the Maven and Gradle plugins can be configured (see the addResources property) to support\nrunning from the command line with reloading of static files. You can use that with an external\ncss/js compiler process if you are writing that code with higher level tools.\n81.2. Reload templates without restarting the\ncontainer\nMost of the templating technologies supported by Spring Boot include a configuration option to\ndisable caching (see below for details). If you\u2019re using the spring-boot-devtools module these\nproperties will be automatically configured for you at development time.\n81.2.1. Thymeleaf templates\nIf you are using Thymeleaf, then set spring.thymeleaf.cache to false. See\nThymeleafAutoConfiguration for other Thymeleaf customization options.\n81.2.2. FreeMarker templates\nIf you are using FreeMarker, then set spring.freemarker.cache to false. See\nFreeMarkerAutoConfiguration for other FreeMarker customization options.\n81.2.3. Groovy templates\nIf you are using Groovy templates, then set spring.groovy.template.cache to false. See\nGroovyTemplateAutoConfiguration for other Groovy customization options.\n81.3. Fast application restarts\nThe spring-boot-devtools module includes support for automatic application restarts. Whilst not as\nfast a technologies such as JRebel or Spring Loaded it\u2019s usually significantly faster than a \u201ccold\nstart\u201d. You should probably give it a try before investigating some of the more complex reload\noptions discussed below.\nFor more details see the Developer tools section.\n293\n81.4. Reload Java classes without restarting the\ncontainer\nModern IDEs (Eclipse, IDEA, etc.) all support hot swapping of bytecode, so if you make a change that\ndoesn\u2019t affect class or method signatures it should reload cleanly with no side effects.\nSpring Loaded goes a little further in that it can reload class definitions with changes in the method\nsignatures. With some customization it can force an ApplicationContext to refresh itself (but there is\nno general mechanism to ensure that would be safe for a running application anyway, so it would\nonly ever be a development time trick probably).\n81.4.1. Configuring Spring Loaded for use with Maven\nTo use Spring Loaded with the Maven command line, just add it as a dependency in the Spring Boot\nplugin declaration, e.g.\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<dependencies>\n<dependency>\n<groupId>org.springframework</groupId>\n<artifactId>springloaded</artifactId>\n<version>1.2.0.RELEASE</version>\n</dependency>\n</dependencies>\n</plugin>\nThis normally works pretty well with Eclipse and IntelliJ IDEA as long as they have their build\nconfiguration aligned with the Maven defaults (Eclipse m2e does this out of the box).\n81.4.2. Configuring Spring Loaded for use with Gradle and IntelliJ IDEA\nYou need to jump through a few hoops if you want to use Spring Loaded in combination with\nGradle and IntelliJ IDEA. By default, IntelliJ IDEA will compile classes into a different location than\nGradle, causing Spring Loaded monitoring to fail.\nTo configure IntelliJ IDEA correctly you can use the idea Gradle plugin:\n294\nbuildscript {\nrepositories { jcenter() }\ndependencies {\nclasspath \"org.springframework.boot:spring-boot-gradle-plugin:2.0.0.BUILD-\nSNAPSHOT\"\nclasspath 'org.springframework:springloaded:1.2.0.RELEASE'\n}\n}\napply plugin: 'idea'\nidea {\nmodule {\ninheritOutputDirs = false\noutputDir = file(\"$buildDir/classes/main/\")\n}\n}\n// ...\n\uf05a IntelliJ IDEA must be configured to use the same Java version as the command\nline Gradle task and springloaded must be included as a buildscript dependency.\nYou can also additionally enable \u2018Make Project Automatically\u2019 inside IntelliJ IDEA to automatically\ncompile your code whenever a file is saved.\n295\nChapter 82. Build\n82.1. Generate build information\nBoth the Maven and Gradle plugin allow to generate build information containing the coordinates,\nname and version of the project. The plugin can also be configured to add additional properties\nthrough configuration. When such file is present, Spring Boot auto-configures a BuildProperties\nbean.\nTo generate build information with Maven, add an execution for the build-info goal:\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<version>2.0.0.BUILD-SNAPSHOT</version>\n<executions>\n<execution>\n<goals>\n<goal>build-info</goal>\n</goals>\n</execution>\n</executions>\n</plugin>\n</plugins>\n</build>\n\uf0eb\nCheck the Spring Boot Maven Plugin documentation for more details.\nAnd to do the same with Gradle:\nspringBoot {\nbuildInfo()\n}\nAdditional properties can be added using the DSL:\nspringBoot {\nbuildInfo {\nadditionalProperties = [\n'foo': 'bar'\n]\n}\n}\n296\n82.2. Generate git information\nBoth Maven and Gradle allow to generate a git.properties file containing information about the\nstate of your git source code repository when the project was built.\nFor Maven users the spring-boot-starter-parent POM includes a pre-configured plugin to generate\na git.properties file. Simply add the following declaration to your POM:\n<build>\n<plugins>\n<plugin>\n<groupId>pl.project13.maven</groupId>\n<artifactId>git-commit-id-plugin</artifactId>\n</plugin>\n</plugins>\n</build>\nGradle users can achieve the same result using the gradle-git-properties plugin\nplugins {\nid \"com.gorylenko.gradle-git-properties\" version \"1.4.6\"\n}\n82.3. Customize dependency versions\nIf you use a Maven build that inherits directly or indirectly from spring-boot-dependencies (for\ninstance spring-boot-starter-parent) but you want to override a specific third-party dependency\nyou can add appropriate <properties> elements. Browse the spring-boot-dependencies POM for a\ncomplete list of properties. For example, to pick a different slf4j version you would add the\nfollowing:\n<properties>\n<slf4j.version>1.7.5<slf4j.version>\n</properties>\nThis only works if your Maven project inherits (directly or indirectly) from\n\uf05a spring-boot-dependencies. If you have added spring-boot-dependencies in your\nown dependencyManagement section with <scope>import</scope> you have to\nredefine the artifact yourself instead of overriding the property.\n\uf071 Each Spring Boot release is designed and tested against a specific set of third-\nparty dependencies. Overriding versions may cause compatibility issues.\nTo override dependency versions in Gradle, you can specify a version as shown below:\n297\next['slf4j.version'] = '1.7.5'\nFor additional information, please refer to the Gradle Dependency Management Plugin\ndocumentation.\n82.4. Create an executable JAR with Maven\nThe spring-boot-maven-plugin can be used to create an executable \u2018fat\u2019 JAR. If you are using the\nspring-boot-starter-parent POM you can simply declare the plugin and your jars will be\nrepackaged:\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n</plugins>\n</build>\nIf you are not using the parent POM you can still use the plugin, however, you must additionally\nadd an <executions> section:\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<version>2.0.0.BUILD-SNAPSHOT</version>\n<executions>\n<execution>\n<goals>\n<goal>repackage</goal>\n</goals>\n</execution>\n</executions>\n</plugin>\n</plugins>\n</build>\nSee the plugin documentation for full usage details.\n82.5. Use a Spring Boot application as a dependency\nLike a war file, a Spring Boot application is not intended to be used as a dependency. If your\napplication contains classes that you want to share with other projects, the recommended approach\n298\nis to move that code into a separate module. The separate module can then be depended upon by\nyour application and other projects.\nIf you cannot rearrange your code as recommended above, Spring Boot\u2019s Maven and Gradle plugins\nmust be configured to produce a separate artifact that is suitable for use as a dependency. The\nexecutable archive cannot be used as a dependency as the executable jar format packages\napplication classes in BOOT-INF/classes. This means that they cannot be found when the executable\njar is used as a dependency.\nTo produce the two artifacts, one that can be used as a dependency and one that is executable, a\nclassifier must be specified. This classifier is applied to the name of the executable archive, leaving\nthe default archive for use as dependency.\nTo configure a classifier of exec in Maven, the following configuration can be used:\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<configuration>\n<classifier>exec</classifier>\n</configuration>\n</plugin>\n</plugins>\n</build>\nAnd when using Gradle, the following configuration can be used:\nbootRepackage {\nclassifier = 'exec'\n}\n82.6. Extract specific libraries when an executable jar\nruns\nMost nested libraries in an executable jar do not need to be unpacked in order to run, however,\ncertain libraries can have problems. For example, JRuby includes its own nested jar support which\nassumes that the jruby-complete.jar is always directly available as a file in its own right.\nTo deal with any problematic libraries, you can flag that specific nested jars should be\nautomatically unpacked to the \u2018temp folder\u2019 when the executable jar first runs.\nFor example, to indicate that JRuby should be flagged for unpack using the Maven Plugin you would\nadd the following configuration:\n299\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n<configuration>\n<requiresUnpack>\n<dependency>\n<groupId>org.jruby</groupId>\n<artifactId>jruby-complete</artifactId>\n</dependency>\n</requiresUnpack>\n</configuration>\n</plugin>\n</plugins>\n</build>\nAnd to do that same with Gradle:\nspringBoot {\nrequiresUnpack = ['org.jruby:jruby-complete']\n}\n82.7. Create a non-executable JAR with exclusions\nOften if you have an executable and a non-executable jar as build products, the executable version\nwill have additional configuration files that are not needed in a library jar. E.g. the application.yml\nconfiguration file might excluded from the non-executable JAR.\nThe maven-jar-plugin used to expose a forceCreation attribute that allows you to create the jar again\nonce the repackage goal has ran. Arguably, this was a bit fragile anyway since it was relying on the\norder of plugin executions. In Maven, the executable jar must be the main artifact and you can add\na classified jar for the library:\n300\n<build>\n<plugins>\n<plugin>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n<plugin>\n<artifactId>maven-jar-plugin</artifactId>\n<executions>\n<execution>\n<id>lib</id>\n<phase>package</phase>\n<goals>\n<goal>jar</goal>\n</goals>\n<configuration>\n<classifier>lib</classifier>\n<excludes>\n<exclude>application.yml</exclude>\n</excludes>\n</configuration>\n</execution>\n</executions>\n</plugin>\n</plugins>\n</build>\nIn Gradle you can create a new JAR archive with standard task DSL features, and then have the\nbootRepackage task depend on that one using its withJarTask property:\njar {\nbaseName = 'spring-boot-sample-profile'\nversion = '0.0.0'\nexcludes = ['**/application.yml']\n}\ntask('execJar', type:Jar, dependsOn: 'jar') {\nbaseName = 'spring-boot-sample-profile'\nversion = '0.0.0'\nclassifier = 'exec'\nfrom sourceSets.main.output\n}\nbootRepackage {\nwithJarTask = tasks['execJar']\n}\n301\n82.8. Remote debug a Spring Boot application started\nwith Maven\nTo attach a remote debugger to a Spring Boot application started with Maven you can use the\njvmArguments property of the maven plugin.\nCheck this example for more details.\n82.9. Remote debug a Spring Boot application started\nwith Gradle\nTo attach a remote debugger to a Spring Boot application started with Gradle you can use the\njvmArgs property of bootRun task or --debug-jvm command line option.\nbuild.gradle:\nbootRun {\njvmArgs \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\"\n}\nCommand line:\n$ gradle bootRun --debug-jvm\nCheck Gradle Application Plugin for more details.\n82.10. Build an executable archive from Ant without\nusing spring-boot-antlib\nTo build with Ant you need to grab dependencies, compile and then create a jar or war archive. To\nmake it executable you can either use the spring-boot-antlib module, or you can follow these\ninstructions:\n1. If you are building a jar, package the application\u2019s classes and resources in a nested BOOT-\nINF/classes directory. If you are building a war, package the application\u2019s classes in a nested\nWEB-INF/classes directory as usual.\n2. Add the runtime dependencies in a nested BOOT-INF/lib directory for a jar or WEB-INF/lib for a\nwar. Remember not to compress the entries in the archive.\n3. Add the provided (embedded container) dependencies in a nested BOOT-INF/lib directory for jar\nor WEB-INF/lib-provided for a war. Remember not to compress the entries in the archive.\n4. Add the spring-boot-loader classes at the root of the archive (so the Main-Class is available).\n5. Use the appropriate launcher, e.g. JarLauncher for a jar file, as a Main-Class attribute in the\nmanifest and specify the other properties it needs as manifest entries, principally a Start-Class.\n302\nExample:\n<target name=\"build\" depends=\"compile\">\n<jar destfile=\"target/${ant.project.name}-${spring-boot.version}.jar\" compress=\n\"false\">\n<mappedresources>\n<fileset dir=\"target/classes\" />\n<globmapper from=\"*\" to=\"BOOT-INF/classes/*\"/>\n</mappedresources>\n<mappedresources>\n<fileset dir=\"src/main/resources\" erroronmissingdir=\"false\"/>\n<globmapper from=\"*\" to=\"BOOT-INF/classes/*\"/>\n</mappedresources>\n<mappedresources>\n<fileset dir=\"${lib.dir}/runtime\" />\n<globmapper from=\"*\" to=\"BOOT-INF/lib/*\"/>\n</mappedresources>\n<zipfileset src=\"${lib.dir}/loader/spring-boot-loader-jar-${spring-\nboot.version}.jar\" />\n<manifest>\n<attribute name=\"Main-Class\" value=\n\"org.springframework.boot.loader.JarLauncher\" />\n<attribute name=\"Start-Class\" value=\"${start-class}\" />\n</manifest>\n</jar>\n</target>\nThe Ant Sample has a build.xml with a manual task that should work if you run it with\n$ ant -lib <folder containing ivy-2.2.jar> clean manual\nafter which you can run the application with\n$ java -jar target/*.jar\n82.11. How to use Java 6\nIf you want to use Spring Boot with Java 6 there are a small number of configuration changes that\nyou will have to make. The exact changes depend on your application\u2019s functionality.\n82.11.1. Embedded servlet container compatibility\nIf you are using one of Boot\u2019s embedded Servlet containers you will have to use a Java 6-compatible\ncontainer. Both Tomcat 7 and Jetty 8 are Java 6 compatible. See Use Tomcat 7.x or 8.0 and Use Jetty 8\nfor details.\n303\n82.11.2. Jackson\nJackson 2.7 and later requires Java 7. If you want to use Jackson with Java 6 you will have to\ndowngrade to Jackson 2.6.\n82.11.3. JTA API compatibility\nWhile the Java Transaction API itself doesn\u2019t require Java 7 the official API jar contains classes that\nhave been built to require Java 7. If you are using JTA then you will need to replace the official JTA\n1.2 API jar with one that has been built to work on Java 6. To do so, exclude any transitive\ndependencies on javax.transaction:javax.transaction-api and replace them with a dependency on\norg.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.0.Final\n304\nChapter 83. Traditional deployment\n83.1. Create a deployable war file\nThe first step in producing a deployable war file is to provide a SpringBootServletInitializer\nsubclass and override its configure method. This makes use of Spring Framework\u2019s Servlet 3.0\nsupport and allows you to configure your application when it\u2019s launched by the servlet container.\nTypically, you update your application\u2019s main class to extend SpringBootServletInitializer:\n@SpringBootApplication\npublic class Application extends SpringBootServletInitializer {\n@Override\nprotected SpringApplicationBuilder configure(SpringApplicationBuilder application)\n{\nreturn application.sources(Application.class);\n}\npublic static void main(String[] args) throws Exception {\nSpringApplication.run(Application.class, args);\n}\n}\nThe next step is to update your build configuration so that your project produces a war file rather\nthan a jar file. If you\u2019re using Maven and using spring-boot-starter-parent (which configures\nMaven\u2019s war plugin for you) all you need to do is modify pom.xml to change the packaging to war:\n<packaging>war</packaging>\nIf you\u2019re using Gradle, you need to modify build.gradle to apply the war plugin to the project:\napply plugin: 'war'\nThe final step in the process is to ensure that the embedded servlet container doesn\u2019t interfere with\nthe servlet container to which the war file will be deployed. To do so, you need to mark the\nembedded servlet container dependency as provided.\nIf you\u2019re using Maven:\n305\n<dependencies>\n<!-- \u2026 -->\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-starter-tomcat</artifactId>\n<scope>provided</scope>\n</dependency>\n<!-- \u2026 -->\n</dependencies>\nAnd if you\u2019re using Gradle:\ndependencies {\n// \u2026\nprovidedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'\n// \u2026\n}\nIf you are using a version of Gradle that supports compile only dependencies\n\uf05a (2.12 or later), you should continue to use providedRuntime. Among other\nlimitations, compileOnly dependencies are not on the test classpath so any web-\nbased integration tests will fail.\nIf you\u2019re using the Spring Boot build tools, marking the embedded servlet container dependency as\nprovided will produce an executable war file with the provided dependencies packaged in a lib-\nprovided directory. This means that, in addition to being deployable to a servlet container, you can\nalso run your application using java -jar on the command line.\n\uf0eb Take a look at Spring Boot\u2019s sample applications for a Maven-based example of\nthe above-described configuration.\n83.2. Create a deployable war file for older servlet\ncontainers\nOlder Servlet containers don\u2019t have support for the ServletContextInitializer bootstrap process\nused in Servlet 3.0. You can still use Spring and Spring Boot in these containers but you are going to\nneed to add a web.xml to your application and configure it to load an ApplicationContext via a\nDispatcherServlet.\n83.3. Convert an existing application to Spring Boot\nFor a non-web application it should be easy (throw away the code that creates your\nApplicationContext and replace it with calls to SpringApplication or SpringApplicationBuilder).\nSpring MVC web applications are generally amenable to first creating a deployable war application,\nand then migrating it later to an executable war and/or jar. Useful reading is in the Getting Started\n306\nGuide on Converting a jar to a war.\nCreate a deployable war by extending SpringBootServletInitializer (e.g. in a class called\nApplication), and add the Spring Boot @SpringBootApplication annotation. Example:\n@SpringBootApplication\npublic class Application extends SpringBootServletInitializer {\n@Override\nprotected SpringApplicationBuilder configure(SpringApplicationBuilder application)\n{\n// Customize the application or call application.sources(...) to add sources\n// Since our example is itself a @Configuration class (via\n@SpringBootApplication)\n// we actually don't need to override this method.\nreturn application;\n}\n}\nRemember that whatever you put in the sources is just a Spring ApplicationContext and normally\nanything that already works should work here. There might be some beans you can remove later\nand let Spring Boot provide its own defaults for them, but it should be possible to get something\nworking first.\nStatic resources can be moved to /public (or /static or /resources or /META-INF/resources) in the\nclasspath root. Same for messages.properties (Spring Boot detects this automatically in the root of\nthe classpath).\nVanilla usage of Spring DispatcherServlet and Spring Security should require no further changes. If\nyou have other features in your application, using other servlets or filters for instance, then you\nmay need to add some configuration to your Application context, replacing those elements from the\nweb.xml as follows:\n\u2022 A @Bean of type Servlet or ServletRegistrationBean installs that bean in the container as if it was\na <servlet/> and <servlet-mapping/> in web.xml.\n\u2022 A @Bean of type Filter or FilterRegistrationBean behaves similarly (like a <filter/> and <filter-\nmapping/>.\n\u2022 An ApplicationContext in an XML file can be added to an @Import in your Application. Or simple\ncases where annotation configuration is heavily used already can be recreated in a few lines as\n@Bean definitions.\nOnce the war is working we make it executable by adding a main method to our Application, e.g.\npublic static void main(String[] args) {\nSpringApplication.run(Application.class, args);\n}\n307\nIf you intend to start your application as a war or as an executable application,\nyou need to share the customizations of the builder in a method that is both\navailable to the SpringBootServletInitializer callback and the main method,\nsomething like:\n@SpringBootApplication\npublic class Application extends SpringBootServletInitializer {\n@Override\nprotected SpringApplicationBuilder configure\n(SpringApplicationBuilder builder) {\nreturn configureApplication(builder);\n\uf05a }\npublic static void main(String[] args) {\nconfigureApplication(new SpringApplicationBuilder()).run(args\n);\n}\nprivate static SpringApplicationBuilder configureApplication\n(SpringApplicationBuilder builder) {\nreturn builder.sources(Application.class).bannerMode(Banner\n.Mode.OFF);\n}\n}\nApplications can fall into more than one category:\n\u2022 Servlet 3.0+ applications with no web.xml.\n\u2022 Applications with a web.xml.\n\u2022 Applications with a context hierarchy.\n\u2022 Applications without a context hierarchy.\nAll of these should be amenable to translation, but each might require slightly different tricks.\nServlet 3.0+ applications might translate pretty easily if they already use the Spring Servlet 3.0+\ninitializer support classes. Normally all the code from an existing WebApplicationInitializer can be\nmoved into a SpringBootServletInitializer. If your existing application has more than one\nApplicationContext (e.g. if it uses AbstractDispatcherServletInitializer) then you might be able to\nsquash all your context sources into a single SpringApplication. The main complication you might\nencounter is if that doesn\u2019t work and you need to maintain the context hierarchy. See the entry on\nbuilding a hierarchy for examples. An existing parent context that contains web-specific features\nwill usually need to be broken up so that all the ServletContextAware components are in the child\ncontext.\nApplications that are not already Spring applications might be convertible to a Spring Boot\n308\napplication, and the guidance above might help, but your mileage may vary.\n83.4. Deploying a WAR to WebLogic\nTo deploy a Spring Boot application to WebLogic you must ensure that your servlet initializer\ndirectly implements WebApplicationInitializer (even if you extend from a base class that already\nimplements it).\nA typical initializer for WebLogic would be something like this:\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.web.SpringBootServletInitializer;\nimport org.springframework.web.WebApplicationInitializer;\n@SpringBootApplication\npublic class MyApplication extends SpringBootServletInitializer implements\nWebApplicationInitializer {\n}\nIf you use logback, you will also need to tell WebLogic to prefer the packaged version rather than\nthe version that pre-installed with the server. You can do this by adding a WEB-INF/weblogic.xml file\nwith the following contents:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<wls:weblogic-web-app\nxmlns:wls=\"http://xmlns.oracle.com/weblogic/weblogic-web-app\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\nhttp://java.sun.com/xml/ns/javaee/ejb-jar_3_0.xsd\nhttp://xmlns.oracle.com/weblogic/weblogic-web-app\nhttp://xmlns.oracle.com/weblogic/weblogic-web-app/1.4/weblogic-web-app.xsd\">\n<wls:container-descriptor>\n<wls:prefer-application-packages>\n<wls:package-name>org.slf4j</wls:package-name>\n</wls:prefer-application-packages>\n</wls:container-descriptor>\n</wls:weblogic-web-app>\n83.5. Deploying a WAR in an Old (Servlet 2.5) Container\nSpring Boot uses Servlet 3.0 APIs to initialize the ServletContext (register Servlets etc.) so you can\u2019t\nuse the same application out of the box in a Servlet 2.5 container. It is however possible to run a\nSpring Boot application on an older container with some special tools. If you include\norg.springframework.boot:spring-boot-legacy as a dependency (maintained separately to the core of\nSpring Boot and currently available at 1.0.2.RELEASE), all you should need to do is create a web.xml\nand declare a context listener to create the application context and your filters and servlets. The\n309\ncontext listener is a special purpose one for Spring Boot, but the rest of it is normal for a Spring\napplication in Servlet 2.5. Example:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app version=\"2.5\" xmlns=\"http://java.sun.com/xml/ns/javaee\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\nhttp://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\n<context-param>\n<param-name>contextConfigLocation</param-name>\n<param-value>demo.Application</param-value>\n</context-param>\n<listener>\n<listener-\nclass>org.springframework.boot.legacy.context.web.SpringBootContextLoaderListener</lis\ntener-class>\n</listener>\n<filter>\n<filter-name>metricsFilter</filter-name>\n<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-\nclass>\n</filter>\n<filter-mapping>\n<filter-name>metricsFilter</filter-name>\n<url-pattern>/*</url-pattern>\n</filter-mapping>\n<servlet>\n<servlet-name>appServlet</servlet-name>\n<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-\nclass>\n<init-param>\n<param-name>contextAttribute</param-name>\n<param-value>\norg.springframework.web.context.WebApplicationContext.ROOT</param-value>\n</init-param>\n<load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n<servlet-name>appServlet</servlet-name>\n<url-pattern>/</url-pattern>\n</servlet-mapping>\n</web-app>\n310\nIn this example we are using a single application context (the one created by the context listener)\nand attaching it to the DispatcherServlet using an init parameter. This is normal in a Spring Boot\napplication (you normally only have one application context).\nAppendices\n311\nAppendix A: Common application properties\nVarious properties can be specified inside your application.properties/application.yml file or as\ncommand line switches. This section provides a list common Spring Boot properties and references\nto the underlying classes that consume them.\nProperty contributions can come from additional jar files on your classpath so\n\uf05a\nyou should not consider this an exhaustive list. It is also perfectly legit to define\nyour own properties.\n\uf071 This sample file is meant as a guide only. Do not copy/paste the entire content\ninto your application; rather pick only the properties that you need.\n# ===================================================================\n# COMMON SPRING BOOT PROPERTIES\n#\n# This sample file is provided as a guideline. Do NOT copy it in its\n# entirety to your own application. ^^^\n# ===================================================================\n# ----------------------------------------\n# CORE PROPERTIES\n# ----------------------------------------\n# BANNER\nbanner.charset=UTF-8 # Banner file encoding.\nbanner.location=classpath:banner.txt # Banner file location.\nbanner.image.location=classpath:banner.gif # Banner image file location (jpg/png can\nalso be used).\nbanner.image.width= # Width of the banner image in chars (default 76)\nbanner.image.height= # Height of the banner image in chars (default based on image\nheight)\nbanner.image.margin= # Left hand image margin in chars (default 2)\nbanner.image.invert= # If images should be inverted for dark terminal themes (default\nfalse)\n# LOGGING\nlogging.config= # Location of the logging configuration file. For instance\n`classpath:logback.xml` for Logback\nlogging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.\nlogging.file= # Log file name. For instance `myapp.log`\nlogging.level.*= # Log levels severity mapping. For instance\n`logging.level.org.springframework=DEBUG`\nlogging.path= # Location of the log file. For instance `/var/log`\nlogging.pattern.console= # Appender pattern for output to the console. Only supported\nwith the default logback setup.\nlogging.pattern.file= # Appender pattern for output to the file. Only supported with\n312\nthe default logback setup.\nlogging.pattern.level= # Appender pattern for log level (default %5p). Only supported\nwith the default logback setup.\nlogging.register-shutdown-hook=false # Register a shutdown hook for the logging system\nwhen it is initialized.\n# AOP\nspring.aop.auto=true # Add @EnableAspectJAutoProxy.\nspring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be\ncreated (true) as opposed to standard Java interface-based proxies (false).\n# IDENTITY (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-\nboot/src/main/java/org/springframework/boot/context/ContextIdApplicationContextInitial\nizer.java\">ContextIdApplicationContextInitializer</a>)\nspring.application.index= # Application index.\nspring.application.name= # Application name.\n# ADMIN (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/admin/SpringApplica\ntionAdminJmxAutoConfiguration.java\">SpringApplicationAdminJmxAutoConfiguration</a>)\nspring.application.admin.enabled=false # Enable admin features for the application.\nspring.application.admin.jmx-\nname=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the\napplication admin MBean.\n# AUTO-CONFIGURATION\nspring.autoconfigure.exclude= # Auto-configuration classes to exclude.\n# SPRING CORE\nspring.beaninfo.ignore=true # Skip search of BeanInfo classes.\n# SPRING CACHE (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperti\nes.java\">CacheProperties</a>)\nspring.cache.cache-names= # Comma-separated list of cache names to create if supported\nby the underlying cache manager.\nspring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for\nmore details on the spec format.\nspring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the\nentries never expire.\nspring.cache.ehcache.config= # The location of the configuration file to use to\ninitialize EhCache.\nspring.cache.hazelcast.config= # The location of the configuration file to use to\ninitialize Hazelcast.\nspring.cache.infinispan.config= # The location of the configuration file to use to\ninitialize Infinispan.\nspring.cache.jcache.config= # The location of the configuration file to use to\ninitialize the cache manager.\n313\nspring.cache.jcache.provider= # Fully qualified name of the CachingProvider\nimplementation to use to retrieve the JSR-107 compliant cache manager. Only needed if\nmore than one JSR-107 implementation is available on the classpath.\nspring.cache.type= # Cache type, auto-detected according to the environment by\ndefault.\n# SPRING CONFIG - using environment property only (<a href=\"https://github.com/spring-\nprojects/spring-boot/tree/master/spring-\nboot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListen\ner.java\">ConfigFileApplicationListener</a>)\nspring.config.location= # Config file locations.\nspring.config.name=application # Config file name.\n# HAZELCAST (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/Hazelcast\nProperties.java\">HazelcastProperties</a>)\nspring.hazelcast.config= # The location of the configuration file to use to initialize\nHazelcast.\n# PROJECT INFORMATION (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/info/ProjectInfoPro\nperties.java\">ProjectInfoProperties</a>)\nspring.info.build.location=classpath:META-INF/build-info.properties # Location of the\ngenerated build-info.properties file.\nspring.info.git.location=classpath:git.properties # Location of the generated\ngit.properties file.\n# JMX\nspring.jmx.default-domain= # JMX domain name.\nspring.jmx.enabled=true # Expose management beans to the JMX domain.\nspring.jmx.server=mbeanServer # MBeanServer bean name.\n# Email (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties\n.java\">MailProperties</a>)\nspring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.\nspring.mail.host= # SMTP server host. For instance `smtp.example.com`\nspring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail\nsettings.\nspring.mail.password= # Login password of the SMTP server.\nspring.mail.port= # SMTP server port.\nspring.mail.properties.*= # Additional JavaMail session properties.\nspring.mail.protocol=smtp # Protocol used by the SMTP server.\nspring.mail.test-connection=false # Test that the mail server is available on startup.\nspring.mail.username= # Login user of the SMTP server.\n# APPLICATION SETTINGS (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-\n314\nboot/src/main/java/org/springframework/boot/SpringApplication.java\">SpringApplication<\n/a>)\nspring.main.banner-mode=console # Mode used to display the banner when the application\nruns.\nspring.main.sources= # Sources (class name, package name or XML resource location) to\ninclude in the ApplicationContext.\nspring.main.web-environment= # Run the application in a web environment (auto-detected\nby default).\n# FILE ENCODING (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-\nboot/src/main/java/org/springframework/boot/context/FileEncodingApplicationListener.ja\nva\">FileEncodingApplicationListener</a>)\nspring.mandatory-file-encoding= # Expected character encoding the application must\nuse.\n# INTERNATIONALIZATION (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoCo\nnfiguration.java\">MessageSourceAutoConfiguration</a>)\nspring.messages.always-use-message-format=false # Set whether to always apply the\nMessageFormat rules, parsing even messages without arguments.\nspring.messages.basename=messages # Comma-separated list of basenames, each following\nthe ResourceBundle convention.\nspring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in\nseconds. When set to -1, bundles are cached forever.\nspring.messages.encoding=UTF-8 # Message bundles encoding.\nspring.messages.fallback-to-system-locale=true # Set whether to fall back to the\nsystem Locale if no files for a specific Locale have been found.\n# OUTPUT\nspring.output.ansi.enabled=detect # Configure the ANSI output.\n# PID FILE (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nactuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWrite\nr.java\">ApplicationPidFileWriter</a>)\nspring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it\ncannot write the PID file.\nspring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is\nused).\n# PROFILES\nspring.profiles.active= # Comma-separated list (or list if using YAML) of <<howto-set-\nactive-spring-profiles,active profiles>>.\nspring.profiles.include= # Unconditionally activate the specified comma separated\nprofiles (or list of profiles if using YAML).\n# SENDGRID (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/sendgrid/SendGridAu\n315\ntoConfiguration.java\">SendGridAutoConfiguration</a>)\nspring.sendgrid.api-key= # SendGrid api key (alternative to username/password)\nspring.sendgrid.username= # SendGrid account username\nspring.sendgrid.password= # SendGrid account password\nspring.sendgrid.proxy.host= # SendGrid proxy host\nspring.sendgrid.proxy.port= # SendGrid proxy port\n# ----------------------------------------\n# WEB PROPERTIES\n# ----------------------------------------\n# EMBEDDED SERVER CONFIGURATION (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerPropertie\ns.java\">ServerProperties</a>)\nserver.address= # Network address to which the server should bind to.\nserver.compression.enabled=false # If response compression is enabled.\nserver.compression.excluded-user-agents= # List of user-agents to exclude from\ncompression.\nserver.compression.mime-types= # Comma-separated list of MIME types that should be\ncompressed. For instance `text/html,text/css,application/json`\nserver.compression.min-response-size= # Minimum response size that is required for\ncompression to be performed. For instance 2048\nserver.connection-timeout= # Time in milliseconds that connectors will wait for\nanother HTTP request before closing the connection. When not set, the connector's\ncontainer-specific default will be used. Use a value of -1 to indicate no (i.e.\ninfinite) timeout.\nserver.context-parameters.*= # Servlet context init parameters. For instance\n`server.context-parameters.a=alpha`\nserver.context-path= # Context path of the application.\nserver.display-name=application # Display name of the application.\nserver.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.\nserver.error.include-stacktrace=never # When to include a \"stacktrace\" attribute.\nserver.error.path=/error # Path of the error controller.\nserver.error.whitelabel.enabled=true # Enable the default error page displayed in\nbrowsers in case of a server error.\nserver.jetty.acceptors= # Number of acceptor threads to use.\nserver.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post or put\ncontent.\nserver.jetty.selectors= # Number of selector threads to use.\nserver.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The class name of\nthe JSP servlet.\nserver.jsp-servlet.init-parameters.*= # Init parameters used to configure the JSP\nservlet\nserver.jsp-servlet.registered=true # Whether or not the JSP servlet is registered\nserver.port=8080 # Server HTTP port.\nserver.server-header= # Value to use for the Server response header (no header is sent\nif empty)\nserver.servlet-path=/ # Path of the main dispatcher servlet.\nserver.use-forward-headers= # If X-Forwarded-* headers should be applied to the\n316\nHttpRequest.\nserver.session.cookie.comment= # Comment for the session cookie.\nserver.session.cookie.domain= # Domain for the session cookie.\nserver.session.cookie.http-only= # \"HttpOnly\" flag for the session cookie.\nserver.session.cookie.max-age= # Maximum age of the session cookie in seconds.\nserver.session.cookie.name= # Session cookie name.\nserver.session.cookie.path= # Path of the session cookie.\nserver.session.cookie.secure= # \"Secure\" flag for the session cookie.\nserver.session.persistent=false # Persist session data between restarts.\nserver.session.store-dir= # Directory used to store session data.\nserver.session.timeout= # Session timeout in seconds.\nserver.session.tracking-modes= # Session tracking modes (one or more of the following:\n\"cookie\", \"url\", \"ssl\").\nserver.ssl.ciphers= # Supported SSL ciphers.\nserver.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed\n(\"need\"). Requires a trust store.\nserver.ssl.enabled= # Enable SSL support.\nserver.ssl.enabled-protocols= # Enabled SSL protocols.\nserver.ssl.key-alias= # Alias that identifies the key in the key store.\nserver.ssl.key-password= # Password used to access the key in the key store.\nserver.ssl.key-store= # Path to the key store that holds the SSL certificate\n(typically a jks file).\nserver.ssl.key-store-password= # Password used to access the key store.\nserver.ssl.key-store-provider= # Provider for the key store.\nserver.ssl.key-store-type= # Type of the key store.\nserver.ssl.protocol=TLS # SSL protocol to use.\nserver.ssl.trust-store= # Trust store that holds SSL certificates.\nserver.ssl.trust-store-password= # Password used to access the trust store.\nserver.ssl.trust-store-provider= # Provider for the trust store.\nserver.ssl.trust-store-type= # Type of the trust store.\nserver.tomcat.accept-count= # Maximum queue length for incoming connection requests\nwhen all possible request processing threads are in use.\nserver.tomcat.accesslog.directory=logs # Directory in which log files are created. Can\nbe relative to the tomcat base dir or absolute.\nserver.tomcat.accesslog.enabled=false # Enable access log.\nserver.tomcat.accesslog.pattern=common # Format pattern for access logs.\nserver.tomcat.accesslog.prefix=access_log # Log file name prefix.\nserver.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in\nthe file name until rotate time.\nserver.tomcat.accesslog.request-attributes-enabled=false # Set request attributes for\nIP address, Hostname, protocol and port used for the request.\nserver.tomcat.accesslog.rotate=true # Enable access log rotation.\nserver.tomcat.accesslog.suffix=.log # Log file name suffix.\nserver.tomcat.additional-tld-skip-patterns= # Comma-separated list of additional\npatterns that match jars to ignore for TLD scanning.\nserver.tomcat.background-processor-delay=30 # Delay in seconds between the invocation\nof backgroundProcess methods.\nserver.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory\nwill be used.\nserver.tomcat.internal-proxies=10\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n192\\\\.168\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n317\n169\\\\.254\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n172\\\\.1[6-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n172\\\\.2[0-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n172\\\\.3[0-1]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3} # regular expression matching trusted IP\naddresses.\nserver.tomcat.max-connections= # Maximum number of connections that the server will\naccept and process at any given time.\nserver.tomcat.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.\nserver.tomcat.max-threads=0 # Maximum amount of worker threads.\nserver.tomcat.min-spare-threads=0 # Minimum amount of worker threads.\nserver.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override\nthe original port value.\nserver.tomcat.protocol-header= # Header that holds the incoming protocol, usually\nnamed \"X-Forwarded-Proto\".\nserver.tomcat.protocol-header-https-value=https # Value of the protocol header that\nindicates that the incoming request uses SSL.\nserver.tomcat.redirect-context-root= # Whether requests to the context root should be\nredirected by appending a / to the path.\nserver.tomcat.remote-ip-header= # Name of the http header from which the remote ip is\nextracted. For instance `X-FORWARDED-FOR`\nserver.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.\nserver.undertow.accesslog.dir= # Undertow access log directory.\nserver.undertow.accesslog.enabled=false # Enable access log.\nserver.undertow.accesslog.pattern=common # Format pattern for access logs.\nserver.undertow.accesslog.prefix=access_log. # Log file name prefix.\nserver.undertow.accesslog.rotate=true # Enable access log rotation.\nserver.undertow.accesslog.suffix=log # Log file name suffix.\nserver.undertow.buffer-size= # Size of each buffer in bytes.\nserver.undertow.buffers-per-region= # Number of buffer per region.\nserver.undertow.direct-buffers= # Allocate buffers outside the Java heap.\nserver.undertow.io-threads= # Number of I/O threads to create for the worker.\nserver.undertow.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.\nserver.undertow.worker-threads= # Number of worker threads.\n# FREEMARKER (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMark\nerAutoConfiguration.java\">FreeMarkerAutoConfiguration</a>)\nspring.freemarker.allow-request-override=false # Set whether HttpServletRequest\nattributes are allowed to override (hide) controller generated model attributes of the\nsame name.\nspring.freemarker.allow-session-override=false # Set whether HttpSession attributes\nare allowed to override (hide) controller generated model attributes of the same name.\nspring.freemarker.cache=false # Enable template caching.\nspring.freemarker.charset=UTF-8 # Template encoding.\nspring.freemarker.check-template-location=true # Check that the templates location\nexists.\nspring.freemarker.content-type=text/html # Content-Type value.\nspring.freemarker.enabled=true # Enable MVC view resolution for this technology.\nspring.freemarker.expose-request-attributes=false # Set whether all request attributes\n318\nshould be added to the model prior to merging with the template.\nspring.freemarker.expose-session-attributes=false # Set whether all HttpSession\nattributes should be added to the model prior to merging with the template.\nspring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a\nRequestContext for use by Spring's macro library, under the name\n\"springMacroRequestContext\".\nspring.freemarker.prefer-file-system-access=true # Prefer file system access for\ntemplate loading. File system access enables hot detection of template changes.\nspring.freemarker.prefix= # Prefix that gets prepended to view names when building a\nURL.\nspring.freemarker.request-context-attribute= # Name of the RequestContext attribute\nfor all views.\nspring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to\nFreeMarker's Configuration.\nspring.freemarker.suffix= # Suffix that gets appended to view names when building a\nURL.\nspring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of\ntemplate paths.\nspring.freemarker.view-names= # White list of view names that can be resolved.\n# GROOVY TEMPLATES (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/Gro\novyTemplateAutoConfiguration.java\">GroovyTemplateAutoConfiguration</a>)\nspring.groovy.template.allow-request-override=false # Set whether HttpServletRequest\nattributes are allowed to override (hide) controller generated model attributes of the\nsame name.\nspring.groovy.template.allow-session-override=false # Set whether HttpSession\nattributes are allowed to override (hide) controller generated model attributes of the\nsame name.\nspring.groovy.template.cache= # Enable template caching.\nspring.groovy.template.charset=UTF-8 # Template encoding.\nspring.groovy.template.check-template-location=true # Check that the templates\nlocation exists.\nspring.groovy.template.configuration.*= # See GroovyMarkupConfigurer\nspring.groovy.template.content-type=test/html # Content-Type value.\nspring.groovy.template.enabled=true # Enable MVC view resolution for this technology.\nspring.groovy.template.expose-request-attributes=false # Set whether all request\nattributes should be added to the model prior to merging with the template.\nspring.groovy.template.expose-session-attributes=false # Set whether all HttpSession\nattributes should be added to the model prior to merging with the template.\nspring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a\nRequestContext for use by Spring's macro library, under the name\n\"springMacroRequestContext\".\nspring.groovy.template.prefix= # Prefix that gets prepended to view names when\nbuilding a URL.\nspring.groovy.template.request-context-attribute= # Name of the RequestContext\nattribute for all views.\nspring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.\nspring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when\nbuilding a URL.\n319\nspring.groovy.template.view-names= # White list of view names that can be resolved.\n# SPRING HATEOAS (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HateoasProp\nerties.java\">HateoasProperties</a>)\nspring.hateoas.use-hal-as-default-json-media-type=true # Specify if\napplication/hal+json responses should be sent to requests that accept\napplication/json.\n# HTTP message conversion\nspring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use\nfor HTTP message conversion. Set to \"gson\" to force the use of Gson when both it and\nJackson are on the classpath.\n# HTTP encoding (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpEncodingPro\nperties.java\">HttpEncodingProperties</a>)\nspring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to\nthe \"Content-Type\" header if not set explicitly.\nspring.http.encoding.enabled=true # Enable http encoding support.\nspring.http.encoding.force= # Force the encoding to the configured charset on HTTP\nrequests and responses.\nspring.http.encoding.force-request= # Force the encoding to the configured charset on\nHTTP requests. Defaults to true when \"force\" has not been specified.\nspring.http.encoding.force-response= # Force the encoding to the configured charset on\nHTTP responses.\nspring.http.encoding.mapping= # Locale to Encoding mapping.\n# MULTIPART (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartProper\nties.java\">MultipartProperties</a>)\nspring.http.multipart.enabled=true # Enable support of multi-part uploads.\nspring.http.multipart.file-size-threshold=0 # Threshold after which files will be\nwritten to disk. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or\nKilobyte size.\nspring.http.multipart.location= # Intermediate location of uploaded files.\nspring.http.multipart.max-file-size=1MB # Max file size. Values can use the suffixed\n\"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.\nspring.http.multipart.max-request-size=10MB # Max request size. Values can use the\nsuffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.\nspring.http.multipart.resolve-lazily=false # Whether to resolve the multipart request\nlazily at the time of file or parameter access.\n# JACKSON (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonProp\nerties.java\">JacksonProperties</a>)\nspring.jackson.date-format= # Date format string or a fully-qualified date format\n320\nclass name. For instance `yyyy-MM-dd HH:mm:ss`.\nspring.jackson.default-property-inclusion= # Controls the inclusion of properties\nduring serialization.\nspring.jackson.deserialization.*= # Jackson on/off features that affect the way Java\nobjects are deserialized.\nspring.jackson.generator.*= # Jackson on/off features for generators.\nspring.jackson.joda-date-time-format= # Joda date time format string. If not\nconfigured, \"date-format\" will be used as a fallback if it is configured with a format\nstring.\nspring.jackson.locale= # Locale used for formatting.\nspring.jackson.mapper.*= # Jackson general purpose on/off features.\nspring.jackson.parser.*= # Jackson on/off features for parsers.\nspring.jackson.property-naming-strategy= # One of the constants on Jackson's\nPropertyNamingStrategy. Can also be a fully-qualified class name of a\nPropertyNamingStrategy subclass.\nspring.jackson.serialization.*= # Jackson on/off features that affect the way Java\nobjects are serialized.\nspring.jackson.time-zone= # Time zone used when formatting dates. For instance\n`America/Los_Angeles`\n# JERSEY (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyProper\nties.java\">JerseyProperties</a>)\nspring.jersey.application-path= # Path that serves as the base URI for the\napplication. Overrides the value of \"@ApplicationPath\" if specified.\nspring.jersey.filter.order=0 # Jersey filter chain order.\nspring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.\nspring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey\nservlet.\nspring.jersey.type=servlet # Jersey integration type.\n# SPRING MOBILE DEVICE VIEWS (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/DeviceDelega\ntingViewResolverAutoConfiguration.java\">DeviceDelegatingViewResolverAutoConfiguration<\n/a>)\nspring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for\nfallback resolution.\nspring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view\nresolver.\nspring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets\nprepended to view names for mobile devices.\nspring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended\nto view names for mobile devices.\nspring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended\nto view names for normal devices.\nspring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended\nto view names for normal devices.\nspring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets\nprepended to view names for tablet devices.\n321\nspring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended\nto view names for tablet devices.\n# SPRING MOBILE SITE PREFERENCE (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/mobile/SitePreferen\nceAutoConfiguration.java\">SitePreferenceAutoConfiguration</a>)\nspring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.\n# MUSTACHE TEMPLATES (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAu\ntoConfiguration.java\">MustacheAutoConfiguration</a>)\nspring.mustache.allow-request-override= # Set whether HttpServletRequest attributes\nare allowed to override (hide) controller generated model attributes of the same name.\nspring.mustache.allow-session-override= # Set whether HttpSession attributes are\nallowed to override (hide) controller generated model attributes of the same name.\nspring.mustache.cache= # Enable template caching.\nspring.mustache.charset= # Template encoding.\nspring.mustache.check-template-location= # Check that the templates location exists.\nspring.mustache.content-type= # Content-Type value.\nspring.mustache.enabled= # Enable MVC view resolution for this technology.\nspring.mustache.expose-request-attributes= # Set whether all request attributes should\nbe added to the model prior to merging with the template.\nspring.mustache.expose-session-attributes= # Set whether all HttpSession attributes\nshould be added to the model prior to merging with the template.\nspring.mustache.expose-spring-macro-helpers= # Set whether to expose a RequestContext\nfor use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.\nspring.mustache.request-context-attribute= # Name of the RequestContext attribute for\nall views.\nspring.mustache.suffix=.html # Suffix to apply to template names.\nspring.mustache.view-names= # White list of view names that can be resolved.\n# SPRING MVC (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcPropertie\ns.java\">WebMvcProperties</a>)\nspring.mvc.async.request-timeout= # Amount of time (in milliseconds) before\nasynchronous request handling times out.\nspring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.\nspring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the\nFrameworkServlet doService method.\nspring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to the\nFrameworkServlet doService method.\nspring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.\nspring.mvc.formcontent.putfilter.enabled=true # Enable Spring's\nHttpPutFormContentFilter.\nspring.mvc.ignore-default-model-on-redirect=true # If the content of the \"default\"\nmodel should be ignored during redirect scenarios.\nspring.mvc.locale= # Locale to use. By default, this locale is overridden by the\n322\n\"Accept-Language\" header.\nspring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.\nspring.mvc.log-resolved-exception=false # Enable warn logging of exceptions resolved\nby a \"HandlerExceptionResolver\".\nspring.mvc.media-types.*= # Maps file extensions to media types for content\nnegotiation.\nspring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For\ninstance `PREFIX_ERROR_CODE`.\nspring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web\nServices servlet.\nspring.mvc.static-path-pattern=/** # Path pattern used for static resources.\nspring.mvc.throw-exception-if-no-handler-found=false # If a \"NoHandlerFoundException\"\nshould be thrown if no Handler was found to process a request.\nspring.mvc.view.prefix= # Spring MVC view prefix.\nspring.mvc.view.suffix= # Spring MVC view suffix.\n# SPRING RESOURCES HANDLING (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourcePropert\nies.java\">ResourceProperties</a>)\nspring.resources.add-mappings=true # Enable default resource handling.\nspring.resources.cache-period= # Cache period for the resources served by the resource\nhandler, in seconds.\nspring.resources.chain.cache=true # Enable caching in the Resource chain.\nspring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled\nby default unless at least one strategy has been enabled.\nspring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.\nspring.resources.chain.html-application-cache=false # Enable HTML5 application cache\nmanifest rewriting.\nspring.resources.chain.strategy.content.enabled=false # Enable the content Version\nStrategy.\nspring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns\nto apply to the Version Strategy.\nspring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version\nStrategy.\nspring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to\napply to the Version Strategy.\nspring.resources.chain.strategy.fixed.version= # Version string to use for the Version\nStrategy.\nspring.resources.static-locations=classpath:/META-\nINF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations\nof static resources.\n# SPRING SESSION (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionProp\nerties.java\">SessionProperties</a>)\nspring.session.hazelcast.flush-mode= # Sessions flush mode.\nspring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to\nstore sessions.\nspring.session.jdbc.initializer.enabled= # Create the required session tables on\n323\nstartup if necessary. Enabled automatically if the default table name is set or a\ncustom schema is configured.\nspring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-\n@@platform@@.sql # Path to the SQL file to use to initialize the database schema.\nspring.session.jdbc.table-name=SPRING_SESSION # Name of database table used to store\nsessions.\nspring.session.mongo.collection-name=sessions # Collection name used to store\nsessions.\nspring.session.redis.flush-mode= # Sessions flush mode.\nspring.session.redis.namespace= # Namespace for keys used to store sessions.\nspring.session.store-type= # Session store type.\n# SPRING SOCIAL (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAut\noConfiguration.java\">SocialWebAutoConfiguration</a>)\nspring.social.auto-connection-views=false # Enable the connection status view for\nsupported providers.\n# SPRING SOCIAL FACEBOOK (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/FacebookAuto\nConfiguration.java\">FacebookAutoConfiguration</a>)\nspring.social.facebook.app-id= # your application's Facebook App ID\nspring.social.facebook.app-secret= # your application's Facebook App Secret\n# SPRING SOCIAL LINKEDIN (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/LinkedInAuto\nConfiguration.java\">LinkedInAutoConfiguration</a>)\nspring.social.linkedin.app-id= # your application's LinkedIn App ID\nspring.social.linkedin.app-secret= # your application's LinkedIn App Secret\n# SPRING SOCIAL TWITTER (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/TwitterAutoC\nonfiguration.java\">TwitterAutoConfiguration</a>)\nspring.social.twitter.app-id= # your application's Twitter App ID\nspring.social.twitter.app-secret= # your application's Twitter App Secret\n# THYMELEAF (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/Thymeleaf\nAutoConfiguration.java\">ThymeleafAutoConfiguration</a>)\nspring.thymeleaf.cache=true # Enable template caching.\nspring.thymeleaf.check-template=true # Check that the template exists before rendering\nit.\nspring.thymeleaf.check-template-location=true # Check that the templates location\nexists.\nspring.thymeleaf.content-type=text/html # Content-Type value.\nspring.thymeleaf.enabled=true # Enable MVC Thymeleaf view resolution.\n324\nspring.thymeleaf.encoding=UTF-8 # Template encoding.\nspring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should\nbe excluded from resolution.\nspring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also\nStandardTemplateModeHandlers.\nspring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view\nnames when building a URL.\nspring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building\na URL.\nspring.thymeleaf.template-resolver-order= # Order of the template resolver in the\nchain.\nspring.thymeleaf.view-names= # Comma-separated list of view names that can be\nresolved.\n# SPRING WEB SERVICES (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/webservices/WebServ\nicesProperties.java\">WebServicesProperties</a>)\nspring.webservices.path=/services # Path that serves as the base URI for the services.\nspring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web\nServices.\nspring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring\nWeb Services servlet.\n<a name=\"common-application-properties-security\"></a>\n# ----------------------------------------\n# SECURITY PROPERTIES\n# ----------------------------------------\n# SECURITY (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityPr\noperties.java\">SecurityProperties</a>)\nsecurity.basic.authorize-mode=role # Security authorize mode to apply.\nsecurity.basic.enabled=true # Enable basic authentication.\nsecurity.basic.path=/** # Comma-separated list of paths to secure.\nsecurity.basic.realm=Spring # HTTP basic realm name.\nsecurity.enable-csrf=false # Enable Cross Site Request Forgery support.\nsecurity.filter-order=0 # Security filter chain order.\nsecurity.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter\nchain dispatcher types.\nsecurity.headers.cache=true # Enable cache control HTTP headers.\nsecurity.headers.content-security-policy= # Value for content security policy header.\nsecurity.headers.content-security-policy-mode=default # Content security policy mode.\nsecurity.headers.content-type=true # Enable \"X-Content-Type-Options\" header.\nsecurity.headers.frame=true # Enable \"X-Frame-Options\" header.\nsecurity.headers.hsts= # HTTP Strict Transport Security (HSTS) mode (none, domain,\nall).\nsecurity.headers.xss=true # Enable cross site scripting (XSS) protection.\nsecurity.ignored= # Comma-separated list of paths to exclude from the default secured\npaths.\n325\nsecurity.require-ssl=false # Enable secure channel for all requests.\nsecurity.sessions=stateless # Session creation policy (always, never, if_required,\nstateless).\nsecurity.user.name=user # Default user name.\nsecurity.user.password= # Password for the default user name. A random password is\nlogged on startup by default.\nsecurity.user.role=USER # Granted roles for the default user name.\n# SECURITY OAUTH2 CLIENT (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/OAu\nth2ClientProperties.java\">OAuth2ClientProperties</a>)\nsecurity.oauth2.client.client-id= # OAuth2 client id.\nsecurity.oauth2.client.client-secret= # OAuth2 client secret. A random secret is\ngenerated by default\n# SECURITY OAUTH2 RESOURCES (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/res\nource/ResourceServerProperties.java\">ResourceServerProperties</a>)\nsecurity.oauth2.resource.id= # Identifier of the resource.\nsecurity.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the\nvalue is not available and the key is public.\nsecurity.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can\neither be a symmetric secret or PEM-encoded RSA public key.\nsecurity.oauth2.resource.prefer-token-info=true # Use the token info, can be set to\nfalse to use the user info.\nsecurity.oauth2.resource.service-id=resource #\nsecurity.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.\nsecurity.oauth2.resource.token-type= # The token type to send when using the\nuserInfoUri.\nsecurity.oauth2.resource.user-info-uri= # URI of the user endpoint.\n# SECURITY OAUTH2 SSO (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/cli\nent/OAuth2SsoProperties.java\">OAuth2SsoProperties</a>)\nsecurity.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit\nWebSecurityConfigurerAdapter\nsecurity.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that\ntriggers the redirect to the OAuth2 Authorization Server\n# ----------------------------------------\n# DATA PROPERTIES\n# ----------------------------------------\n# FLYWAY (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProper\nties.java\">FlywayProperties</a>)\n326\nflyway.baseline-description= #\nflyway.baseline-version=1 # version to start migration\nflyway.baseline-on-migrate= #\nflyway.check-location=false # Check that migration scripts location exists.\nflyway.clean-on-validation-error= #\nflyway.enabled=true # Enable flyway.\nflyway.encoding= #\nflyway.ignore-failed-future-migration= #\nflyway.init-sqls= # SQL statements to execute to initialize a connection immediately\nafter obtaining it.\nflyway.locations=classpath:db/migration # locations of migrations scripts\nflyway.out-of-order= #\nflyway.password= # JDBC password if you want Flyway to create its own DataSource\nflyway.placeholder-prefix= #\nflyway.placeholder-replacement= #\nflyway.placeholder-suffix= #\nflyway.placeholders.*= #\nflyway.schemas= # schemas to update\nflyway.sql-migration-prefix=V #\nflyway.sql-migration-separator= #\nflyway.sql-migration-suffix=.sql #\nflyway.table= #\nflyway.url= # JDBC url of the database to migrate. If not set, the primary configured\ndata source is used.\nflyway.user= # Login user of the database to migrate.\nflyway.validate-on-migrate= #\n# LIQUIBASE (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/Liquibase\nProperties.java\">LiquibaseProperties</a>)\nliquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log\nconfiguration path.\nliquibase.check-change-log-location=true # Check the change log location exists.\nliquibase.contexts= # Comma-separated list of runtime contexts to use.\nliquibase.default-schema= # Default database schema.\nliquibase.drop-first=false # Drop the database schema first.\nliquibase.enabled=true # Enable liquibase support.\nliquibase.labels= # Comma-separated list of runtime labels to use.\nliquibase.parameters.*= # Change log parameters.\nliquibase.password= # Login password of the database to migrate.\nliquibase.rollback-file= # File to which rollback SQL will be written when an update\nis performed.\nliquibase.url= # JDBC url of the database to migrate. If not set, the primary\nconfigured data source is used.\nliquibase.user= # Login user of the database to migrate.\n# COUCHBASE (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/Couchbase\nProperties.java\">CouchbaseProperties</a>)\n327\nspring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap\nfrom.\nspring.couchbase.bucket.name=default # Name of the bucket to connect to.\nspring.couchbase.bucket.password= # Password of the bucket.\nspring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the\nKey/value service.\nspring.couchbase.env.endpoints.query=1 # Number of sockets per node against the Query\n(N1QL) service.\nspring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view\nservice.\nspring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automatically if a\n\"keyStore\" is provided unless specified otherwise.\nspring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the\ncertificates.\nspring.couchbase.env.ssl.key-store-password= # Password used to access the key store.\nspring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout in\nmilliseconds.\nspring.couchbase.env.timeouts.key-value=2500 # Blocking operations performed on a\nspecific key timeout in milliseconds.\nspring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout in\nmilliseconds.\nspring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connections timeout\nin milliseconds.\nspring.couchbase.env.timeouts.view=7500 # Regular and geospatial view operations\ntimeout in milliseconds.\n# DAO (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExce\nptionTranslationAutoConfiguration.java\">PersistenceExceptionTranslationAutoConfigurati\non</a>)\nspring.dao.exceptiontranslation.enabled=true # Enable the\nPersistenceExceptionTranslationPostProcessor.\n# CASSANDRA (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/cassandra/Cassandra\nProperties.java\">CassandraProperties</a>)\nspring.data.cassandra.cluster-name= # Name of the Cassandra cluster.\nspring.data.cassandra.compression= # Compression supported by the Cassandra binary\nprotocol.\nspring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.\nspring.data.cassandra.consistency-level= # Queries consistency level.\nspring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node\naddresses.\nspring.data.cassandra.fetch-size= # Queries default fetch size.\nspring.data.cassandra.keyspace-name= # Keyspace name to use.\nspring.data.cassandra.load-balancing-policy= # Class name of the load balancing\npolicy.\nspring.data.cassandra.port= # Port of the Cassandra server.\nspring.data.cassandra.password= # Login password of the server.\n328\nspring.data.cassandra.read-timeout-millis= # Socket option: read time out.\nspring.data.cassandra.reconnection-policy= # Reconnection policy class.\nspring.data.cassandra.retry-policy= # Class name of the retry policy.\nspring.data.cassandra.serial-consistency-level= # Queries serial consistency level.\nspring.data.cassandra.schema-action=none # Schema action to take at startup.\nspring.data.cassandra.ssl=false # Enable SSL support.\nspring.data.cassandra.username= # Login user of the server.\n# DATA COUCHBASE (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/Couc\nhbaseDataProperties.java\">CouchbaseDataProperties</a>)\nspring.data.couchbase.auto-index=false # Automatically create views and indexes.\nspring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by\ndefault on generated queries.\nspring.data.couchbase.repositories.enabled=true # Enable Couchbase repositories.\n# ELASTICSEARCH (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/elasticsearch/\nElasticsearchProperties.java\">ElasticsearchProperties</a>)\nspring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.\nspring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node\naddresses. If not specified, starts a client node.\nspring.data.elasticsearch.properties.*= # Additional properties used to configure the\nclient.\nspring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch\nrepositories.\n# MONGODB (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperti\nes.java\">MongoProperties</a>)\nspring.data.mongodb.authentication-database= # Authentication database name.\nspring.data.mongodb.database=test # Database name.\nspring.data.mongodb.field-naming-strategy= # Fully qualified name of the\nFieldNamingStrategy to use.\nspring.data.mongodb.grid-fs-database= # GridFS database name.\nspring.data.mongodb.host=localhost # Mongo server host. Cannot be set with uri.\nspring.data.mongodb.password= # Login password of the mongo server. Cannot be set with\nuri.\nspring.data.mongodb.port=27017 # Mongo server port. Cannot be set with uri.\nspring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.\nspring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. Cannot be set\nwith host, port and credentials.\nspring.data.mongodb.username= # Login user of the mongo server. Cannot be set with\nuri.\n# DATA REDIS\nspring.data.redis.repositories.enabled=true # Enable Redis repositories.\n329\n# NEO4J (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/neo4j/Neo4jProperti\nes.java\">Neo4jProperties</a>)\nspring.data.neo4j.compiler= # Compiler to use.\nspring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embedded driver\nis available.\nspring.data.neo4j.open-in-view=false # Register OpenSessionInViewInterceptor. Binds a\nNeo4j Session to the thread for the entire processing of the request.\nspring.data.neo4j.password= # Login password of the server.\nspring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories.\nspring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.\nspring.data.neo4j.username= # Login user of the server.\n# DATA REST (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/rest/Repositor\nyRestProperties.java\">RepositoryRestProperties</a>)\nspring.data.rest.base-path= # Base path to be used by Spring Data REST to expose\nrepository resources.\nspring.data.rest.default-page-size= # Default size of pages.\nspring.data.rest.detection-strategy=default # Strategy to use to determine which\nrepositories get exposed.\nspring.data.rest.enable-enum-translation= # Enable enum value translation via the\nSpring Data REST default resource bundle.\nspring.data.rest.limit-param-name= # Name of the URL query string parameter that\nindicates how many results to return at once.\nspring.data.rest.max-page-size= # Maximum size of pages.\nspring.data.rest.page-param-name= # Name of the URL query string parameter that\nindicates what page to return.\nspring.data.rest.return-body-on-create= # Return a response body after creating an\nentity.\nspring.data.rest.return-body-on-update= # Return a response body after updating an\nentity.\nspring.data.rest.sort-param-name= # Name of the URL query string parameter that\nindicates what direction to sort results.\n# SOLR (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrProperties\n.java\">SolrProperties</a>)\nspring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if \"zk-host\" is\nset.\nspring.data.solr.repositories.enabled=true # Enable Solr repositories.\nspring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.\n# DATASOURCE (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAuto\nConfiguration.java\">DataSourceAutoConfiguration</a> & <a\nhref=\"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-\n330\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProp\nerties.java\">DataSourceProperties</a>)\nspring.datasource.continue-on-error=false # Do not stop if an error occurs while\ninitializing the database.\nspring.datasource.data= # Data (DML) script resource reference.\nspring.datasource.data-username= # User of the database to execute DML scripts (if\ndifferent).\nspring.datasource.data-password= # Password of the database to execute DML scripts (if\ndifferent).\nspring.datasource.dbcp2.*= # Commons DBCP2 specific settings\nspring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-\ndetected based on the URL by default.\nspring.datasource.generate-unique-name=false # Generate a random datasource name.\nspring.datasource.hikari.*= # Hikari specific settings\nspring.datasource.initialize=true # Populate the database using 'data.sql'.\nspring.datasource.jmx-enabled=false # Enable JMX support (if provided by the\nunderlying pool).\nspring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username &\npassword are ignored when set.\nspring.datasource.name=testdb # Name of the datasource.\nspring.datasource.password= # Login password of the database.\nspring.datasource.platform=all # Platform to use in the schema resource (schema-\n${platform}.sql).\nspring.datasource.schema= # Schema (DDL) script resource reference.\nspring.datasource.schema-username= # User of the database to execute DDL scripts (if\ndifferent).\nspring.datasource.schema-password= # Password of the database to execute DDL scripts\n(if different).\nspring.datasource.separator=; # Statement separator in SQL initialization scripts.\nspring.datasource.sql-script-encoding= # SQL scripts encoding.\nspring.datasource.tomcat.*= # Tomcat datasource specific settings\nspring.datasource.type= # Fully qualified name of the connection pool implementation\nto use. By default, it is auto-detected from the classpath.\nspring.datasource.url= # JDBC url of the database.\nspring.datasource.username=\n# JEST (Elasticsearch HTTP client) (<a href=\"https://github.com/spring-\nprojects/spring-boot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jest/JestProperties\n.java\">JestProperties</a>)\nspring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in\nmilliseconds.\nspring.elasticsearch.jest.password= # Login password.\nspring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.\nspring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.\nspring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds.\nspring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the\nElasticsearch instances to use.\nspring.elasticsearch.jest.username= # Login user.\n# H2 Web Console (<a href=\"https://github.com/spring-projects/spring-\n331\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/h2/H2ConsolePropert\nies.java\">H2ConsoleProperties</a>)\nspring.h2.console.enabled=false # Enable the console.\nspring.h2.console.path=/h2-console # Path at which the console will be available.\nspring.h2.console.settings.trace=false # Enable trace output.\nspring.h2.console.settings.web-allow-others=false # Enable remote access.\n# JOOQ (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jooq/JooqAutoConfig\nuration.java\">JooqAutoConfiguration</a>)\nspring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured\ndatasource. For instance `POSTGRES`\n# JPA (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConf\niguration.java\">JpaBaseConfiguration</a>, <a href=\"https://github.com/spring-\nprojects/spring-boot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJp\naAutoConfiguration.java\">HibernateJpaAutoConfiguration</a>)\nspring.data.jpa.repositories.enabled=true # Enable JPA repositories.\nspring.jpa.database= # Target database to operate on, auto-detected by default. Can be\nalternatively set using the \"databasePlatform\" property.\nspring.jpa.database-platform= # Name of the target database to operate on, auto-\ndetected by default. Can be alternatively set using the \"Database\" enum.\nspring.jpa.generate-ddl=false # Initialize the schema on startup.\nspring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the\n\"hibernate.hbm2ddl.auto\" property. Default to \"create-drop\" when using an embedded\ndatabase, \"none\" otherwise.\nspring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy\nfully qualified name.\nspring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy\nfully qualified name.\nspring.jpa.hibernate.naming.strategy= # Hibernate 4 naming strategy fully qualified\nname. Not supported with Hibernate 5.\nspring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate's newer\nIdentifierGenerator for AUTO, TABLE and SEQUENCE.\nspring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a\nJPA EntityManager to the thread for the entire processing of the request.\nspring.jpa.properties.*= # Additional native properties to set on the JPA provider.\nspring.jpa.show-sql=false # Enable logging of SQL statements.\n# JTA (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/Jta\nAutoConfiguration.java\">JtaAutoConfiguration</a>)\nspring.jta.enabled=true # Enable JTA support.\nspring.jta.log-dir= # Transaction logs directory.\nspring.jta.transaction-manager-id= # Transaction manager unique identifier.\n332\n# ATOMIKOS (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-\nboot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosProperties.java\">Atom\nikosProperties</a>)\nspring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in\nseconds, for borrowing connections from the pool.\nspring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or\nnot to ignore the transacted flag when creating session.\nspring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not\nlocal transactions are desired.\nspring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds,\nbetween runs of the pool's maintenance thread.\nspring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after\nwhich connections are cleaned up from the pool.\nspring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a\nconnection can be pooled for before being destroyed. 0 denotes no limit.\nspring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.\nspring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.\nspring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds,\nfor borrowed connections. 0 denotes no limit.\nspring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The\nunique name used to identify the resource during recovery.\nspring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for\nborrowing connections from the pool.\nspring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of\nconnections provided by the pool.\nspring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing\na database connection.\nspring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between\nruns of the pool's maintenance thread.\nspring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which\nconnections are cleaned up from the pool.\nspring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a\nconnection can be pooled for before being destroyed. 0 denotes no limit.\nspring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.\nspring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.\nspring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for\nborrowed connections. 0 denotes no limit.\nspring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a\nconnection before returning it.\nspring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used\nto identify the resource during recovery.\nspring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints.\nspring.jta.atomikos.properties.console-file-count=1 # Number of debug logs files that\ncan be created.\nspring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can be stored at\nmost in debug logs files.\nspring.jta.atomikos.properties.console-file-name=tm.out # Debug logs file name.\nspring.jta.atomikos.properties.console-log-level= # Console log level.\nspring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout for JTA\n333\ntransactions.\nspring.jta.atomikos.properties.enable-logging=true # Enable disk logging.\nspring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if a VM\nshutdown should trigger forced shutdown of the transaction core.\nspring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should\nbe stored.\nspring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.\nspring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.\nspring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (in milliseconds)\nthat can be allowed for transactions.\nspring.jta.atomikos.properties.output-dir= # Directory in which to store the debug log\nfiles.\nspring.jta.atomikos.properties.serial-jta-transactions=true # Specify if sub-\ntransactions should be joined when possible.\nspring.jta.atomikos.properties.service= # Transaction manager implementation that\nshould be started.\nspring.jta.atomikos.properties.threaded-two-phase-commit=true # Use different (and\nconcurrent) threads for two-phase commit on the participating resources.\nspring.jta.atomikos.properties.transaction-manager-unique-name= # Transaction\nmanager's unique name.\n# BITRONIX\nspring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to\ncreate when growing the pool.\nspring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to\nwait before trying to acquire a connection again after an invalid connection was\nacquired.\nspring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds,\nfor acquiring connections from the pool.\nspring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not\nthe transaction manager should allow mixing XA and non-XA transactions.\nspring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not\nthe transaction timeout should be set on the XAResource when it is enlisted.\nspring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or\nnot resources should be enlisted and delisted automatically.\nspring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not\nproduces and consumers should be cached.\nspring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not\nthe provider can run many transactions on the same connection and supports transaction\ninterleaving.\nspring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not\nrecovery failures should be ignored.\nspring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after\nwhich connections are cleaned up from the pool.\nspring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool.\n0 denotes no limit.\nspring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.\nspring.jta.bitronix.connectionfactory.password= # The password to use to connect to\nthe JMS provider.\nspring.jta.bitronix.connectionfactory.share-transaction-connections=false # Whether\nor not connections in the ACCESSIBLE state can be shared within the context of a\n334\ntransaction.\nspring.jta.bitronix.connectionfactory.test-connections=true # Whether or not\nconnections should be tested when acquired from the pool.\nspring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that\nthis resource should take during two-phase commit (always first is Integer.MIN_VALUE,\nalways last is Integer.MAX_VALUE).\nspring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique\nname used to identify the resource during recovery.\nspring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be\nused when starting XAResources.\nspring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS\nprovider.\nspring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create\nwhen growing the pool.\nspring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait\nbefore trying to acquire a connection again after an invalid connection was acquired.\nspring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for\nacquiring connections from the pool.\nspring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the\ntransaction manager should allow mixing XA and non-XA transactions.\nspring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the\ntransaction timeout should be set on the XAResource when it is enlisted.\nspring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not\nresources should be enlisted and delisted automatically.\nspring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability\nfor connections.\nspring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the\ndatabase can run many transactions on the same connection and supports transaction\ninterleaving.\nspring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not\nConnection.isValid() is called when acquiring a connection from the pool.\nspring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not\nrecovery failures should be ignored.\nspring.jta.bitronix.datasource.isolation-level= # The default isolation level for\nconnections.\nspring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for\nlocal transactions.\nspring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing\na database connection.\nspring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which\nconnections are cleaned up from the pool.\nspring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0\ndenotes no limit.\nspring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.\nspring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of\nthe prepared statement cache. 0 disables the cache.\nspring.jta.bitronix.datasource.share-transaction-connections=false # Whether or not\nconnections in the ACCESSIBLE state can be shared within the context of a transaction.\nspring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a\nconnection before returning it.\nspring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this\n335\nresource should take during two-phase commit (always first is Integer.MIN_VALUE,\nalways last is Integer.MAX_VALUE).\nspring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to\nidentify the resource during recovery.\nspring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used\nwhen starting XAResources.\nspring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRC resources\nto be enlisted into the same transaction.\nspring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronously\nexecution of two phase commit.\nspring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in\nseconds at which to run the recovery process in the background.\nspring.jta.bitronix.properties.current-node-only-recovery=true # Recover only the\ncurrent node.\nspring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log the\ncreation and commit call stacks of transactions executed without a single enlisted\nresource.\nspring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction\ntimeout in seconds.\nspring.jta.bitronix.properties.disable-jmx=false # Enable JMX support.\nspring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of\nthe exception analyzer implementation to use.\nspring.jta.bitronix.properties.filter-log-status=false # Enable filtering of logs so\nthat only mandatory logs are written.\nspring.jta.bitronix.properties.force-batching-enabled=true # Set if disk forces are\nbatched.\nspring.jta.bitronix.properties.forced-write-enabled=true # Set if logs are forced to\ndisk.\nspring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of\nseconds the TM will wait for transactions to get done before aborting them at shutdown\ntime.\nspring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI\nname of the TransactionSynchronizationRegistry.\nspring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the\nUserTransaction.\nspring.jta.bitronix.properties.journal=disk # Name of the journal. Can be 'disk',\n'null' or a class name.\nspring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first\nfragment of the journal.\nspring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second\nfragment of the journal.\nspring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the\njournal fragments.\nspring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader\nconfiguration file name.\nspring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this\nTM instance. Default to the machine's IP address.\nspring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions\nlog entries.\nspring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Log a\nwarning for transactions executed without a single enlisted resource.\n336\n# NARAYANA (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-\nboot/src/main/java/org/springframework/boot/jta/narayana/NarayanaProperties.java\">Nara\nyanaProperties</a>)\nspring.jta.narayana.default-timeout=60 # Transaction timeout in seconds.\nspring.jta.narayana.expiry-\nscanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanne\nr # Comma-separated list of expiry scanners.\nspring.jta.narayana.log-dir= # Transaction object store directory.\nspring.jta.narayana.one-phase-commit=true # Enable one phase commit optimisation.\nspring.jta.narayana.periodic-recovery-period=120 # Interval in which periodic recovery\nscans are performed in seconds.\nspring.jta.narayana.recovery-backoff-period=10 # Back off period between first and\nsecond phases of the recovery scan in seconds.\nspring.jta.narayana.recovery-db-pass= # Database password to be used by recovery\nmanager.\nspring.jta.narayana.recovery-db-user= # Database username to be used by recovery\nmanager.\nspring.jta.narayana.recovery-jms-pass= # JMS password to be used by recovery manager.\nspring.jta.narayana.recovery-jms-user= # JMS username to be used by recovery manager.\nspring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.\nspring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.\nspring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan\nfilters.\n# EMBEDDED MONGODB (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/Embe\nddedMongoProperties.java\">EmbeddedMongoProperties</a>)\nspring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to\nenable.\nspring.mongodb.embedded.storage.databaseDir= # Directory used for data storage.\nspring.mongodb.embedded.storage.oplogSize= # Maximum size of the oplog in megabytes.\nspring.mongodb.embedded.storage.replSetName= # Name of the replica set.\nspring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.\n# REDIS (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisPro\nperties.java\">RedisProperties</a>)\nspring.redis.cluster.max-redirects= # Maximum number of redirects to follow when\nexecuting commands across the cluster.\nspring.redis.cluster.nodes= # Comma-separated list of \"host:port\" pairs to bootstrap\nfrom.\nspring.redis.database=0 # Database index used by the connection factory.\nspring.redis.host=localhost # Redis server host.\nspring.redis.password= # Login password of the redis server.\nspring.redis.pool.max-active=8 # Max number of connections that can be allocated by\nthe pool at a given time. Use a negative value for no limit.\nspring.redis.pool.max-idle=8 # Max number of \"idle\" connections in the pool. Use a\n337\nnegative value to indicate an unlimited number of idle connections.\nspring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection\nallocation should block before throwing an exception when the pool is exhausted. Use a\nnegative value to block indefinitely.\nspring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to\nmaintain in the pool. This setting only has an effect if it is positive.\nspring.redis.port=6379 # Redis server port.\nspring.redis.sentinel.master= # Name of Redis server.\nspring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.\nspring.redis.timeout=0 # Connection timeout in milliseconds.\n# ----------------------------------------\n# INTEGRATION PROPERTIES\n# ----------------------------------------\n# ACTIVEMQ (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/Active\nMQProperties.java\">ActiveMQProperties</a>)\nspring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default.\nFor instance `tcp://localhost:61616`\nspring.activemq.in-memory=true # Specify if the default broker URL should be in\nmemory. Ignored if an explicit broker has been specified.\nspring.activemq.password= # Login password of the broker.\nspring.activemq.user= # Login user of the broker.\nspring.activemq.packages.trust-all=false # Trust all packages.\nspring.activemq.packages.trusted= # Comma-separated list of specific packages to trust\n(when not trusting all packages).\nspring.activemq.pool.configuration.*= # See PooledConnectionFactory.\nspring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be\ncreated instead of a regular ConnectionFactory.\nspring.activemq.pool.expiry-timeout=0 # Connection expiration timeout in milliseconds.\nspring.activemq.pool.idle-timeout=30000 # Connection idle timeout in milliseconds.\nspring.activemq.pool.max-connections=1 # Maximum number of pooled connections.\n# ARTEMIS (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/Artemis\nProperties.java\">ArtemisProperties</a>)\nspring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on\nstartup by default.\nspring.artemis.embedded.data-directory= # Journal file directory. Not necessary if\npersistence is turned off.\nspring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs\nare available.\nspring.artemis.embedded.persistent=false # Enable persistent store.\nspring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.\nspring.artemis.embedded.server-id= # Server id. By default, an auto-incremented\ncounter is used.\nspring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.\n338\nspring.artemis.host=localhost # Artemis broker host.\nspring.artemis.mode= # Artemis deployment mode, auto-detected by default.\nspring.artemis.password= # Login password of the broker.\nspring.artemis.port=61616 # Artemis broker port.\nspring.artemis.user= # Login user of the broker.\n# SPRING BATCH (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperti\nes.java\">BatchProperties</a>)\nspring.batch.initializer.enabled= # Create the required batch tables on startup if\nnecessary. Enabled automatically if no custom table prefix is set or if a custom\nschema is configured.\nspring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on\nstartup.\nspring.batch.job.names= # Comma-separated list of job names to execute on startup (For\ninstance `job1,job2`). By default, all Jobs found in the context are executed.\nspring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql #\nPath to the SQL file to use to initialize the database schema.\nspring.batch.table-prefix= # Table prefix for all the batch meta-data tables.\n# JMS (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsProperties.j\nava\">JmsProperties</a>)\nspring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to\nothers connection factory auto-configurations.\nspring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default,\nthe listener is transacted with automatic acknowledgment.\nspring.jms.listener.auto-startup=true # Start the container automatically on startup.\nspring.jms.listener.concurrency= # Minimum number of concurrent consumers.\nspring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.\nspring.jms.pub-sub-domain=false # Specify if the default destination type is topic.\nspring.jms.template.default-destination= # Default destination to use on send/receive\noperations that do not have a destination parameter.\nspring.jms.template.delivery-delay= # Delivery delay to use for send calls in\nmilliseconds.\nspring.jms.template.delivery-mode= # Delivery mode. Enable QoS when set.\nspring.jms.template.priority= # Priority of a message when sending. Enable QoS when\nset.\nspring.jms.template.qos-enabled= # Enable explicit QoS when sending a message.\nspring.jms.template.receive-timeout= # Timeout to use for receive calls in\nmilliseconds.\nspring.jms.template.time-to-live= # Time-to-live of a message when sending in\nmilliseconds. Enable QoS when set.\n# APACHE KAFKA (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperti\nes.java\">KafkaProperties</a>)\nspring.kafka.bootstrap-servers= # Comma-delimited list of host:port pairs to use for\n339\nestablishing the initial connection to the Kafka cluster.\nspring.kafka.client-id= # Id to pass to the server when making requests; used for\nserver-side logging.\nspring.kafka.consumer.auto-commit-interval= # Frequency in milliseconds that the\nconsumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.\nspring.kafka.consumer.auto-offset-reset= # What to do when there is no initial offset\nin Kafka or if the current offset does not exist any more on the server.\nspring.kafka.consumer.bootstrap-servers= # Comma-delimited list of host:port pairs to\nuse for establishing the initial connection to the Kafka cluster.\nspring.kafka.consumer.client-id= # Id to pass to the server when making requests; used\nfor server-side logging.\nspring.kafka.consumer.enable-auto-commit= # If true the consumer's offset will be\nperiodically committed in the background.\nspring.kafka.consumer.fetch-max-wait= # Maximum amount of time in milliseconds the\nserver will block before answering the fetch request if there isn't sufficient data to\nimmediately satisfy the requirement given by \"fetch.min.bytes\".\nspring.kafka.consumer.fetch-min-size= # Minimum amount of data the server should\nreturn for a fetch request in bytes.\nspring.kafka.consumer.group-id= # Unique string that identifies the consumer group\nthis consumer belongs to.\nspring.kafka.consumer.heartbeat-interval= # Expected time in milliseconds between\nheartbeats to the consumer coordinator.\nspring.kafka.consumer.key-deserializer= # Deserializer class for keys.\nspring.kafka.consumer.value-deserializer= # Deserializer class for values.\nspring.kafka.listener.ack-count= # Number of records between offset commits when\nackMode is \"COUNT\" or \"COUNT_TIME\".\nspring.kafka.listener.ack-mode= # Listener AckMode; see the spring-kafka\ndocumentation.\nspring.kafka.listener.ack-time= # Time in milliseconds between offset commits when\nackMode is \"TIME\" or \"COUNT_TIME\".\nspring.kafka.listener.concurrency= # Number of threads to run in the listener\ncontainers.\nspring.kafka.listener.poll-timeout= # Timeout in milliseconds to use when polling the\nconsumer.\nspring.kafka.producer.acks= # Number of acknowledgments the producer requires the\nleader to have received before considering a request complete.\nspring.kafka.producer.batch-size= # Number of records to batch before sending.\nspring.kafka.producer.bootstrap-servers= # Comma-delimited list of host:port pairs to\nuse for establishing the initial connection to the Kafka cluster.\nspring.kafka.producer.buffer-memory= # Total bytes of memory the producer can use to\nbuffer records waiting to be sent to the server.\nspring.kafka.producer.client-id= # Id to pass to the server when making requests; used\nfor server-side logging.\nspring.kafka.producer.compression-type= # Compression type for all data generated by\nthe producer.\nspring.kafka.producer.key-serializer= # Serializer class for keys.\nspring.kafka.producer.retries= # When greater than zero, enables retrying of failed\nsends.\nspring.kafka.producer.value-serializer= # Serializer class for values.\nspring.kafka.ssl.key-password= # Password of the private key in the key store file.\nspring.kafka.ssl.keystore-location= # Location of the key store file.\n340\nspring.kafka.ssl.keystore-password= # Store password for the key store file.\nspring.kafka.ssl.truststore-location= # Location of the trust store file.\nspring.kafka.ssl.truststore-password= # Store password for the trust store file.\nspring.kafka.template.default-topic= # Default topic to which messages will be sent.\n# RABBIT (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nautoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperti\nes.java\">RabbitProperties</a>)\nspring.rabbitmq.addresses= # Comma-separated list of addresses to which the client\nshould connect.\nspring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to\nobtain a channel if the cache size has been reached.\nspring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.\nspring.rabbitmq.cache.connection.mode=CHANNEL # Connection factory cache mode.\nspring.rabbitmq.cache.connection.size= # Number of connections to cache.\nspring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for\ninfinite.\nspring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.\nspring.rabbitmq.host=localhost # RabbitMQ host.\nspring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.\nspring.rabbitmq.listener.auto-startup=true # Start the container automatically on\nstartup.\nspring.rabbitmq.listener.concurrency= # Minimum number of consumers.\nspring.rabbitmq.listener.default-requeue-rejected= # Whether or not to requeue\ndelivery failures; default `true`.\nspring.rabbitmq.listener.idle-event-interval= # How often idle container events should\nbe published in milliseconds.\nspring.rabbitmq.listener.max-concurrency= # Maximum number of consumers.\nspring.rabbitmq.listener.prefetch= # Number of messages to be handled in a single\nrequest. It should be greater than or equal to the transaction size (if used).\nspring.rabbitmq.listener.retry.enabled=false # Whether or not publishing retries are\nenabled.\nspring.rabbitmq.listener.retry.initial-interval=1000 # Interval between the first and\nsecond attempt to deliver a message.\nspring.rabbitmq.listener.retry.max-attempts=3 # Maximum number of attempts to deliver\na message.\nspring.rabbitmq.listener.retry.max-interval=10000 # Maximum interval between attempts.\nspring.rabbitmq.listener.retry.multiplier=1.0 # A multiplier to apply to the previous\ndelivery retry interval.\nspring.rabbitmq.listener.retry.stateless=true # Whether or not retry is stateless or\nstateful.\nspring.rabbitmq.listener.transaction-size= # Number of messages to be processed in a\ntransaction. For best results it should be less than or equal to the prefetch count.\nspring.rabbitmq.password= # Login to authenticate against the broker.\nspring.rabbitmq.port=5672 # RabbitMQ port.\nspring.rabbitmq.publisher-confirms=false # Enable publisher confirms.\nspring.rabbitmq.publisher-returns=false # Enable publisher returns.\nspring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero\nfor none.\nspring.rabbitmq.ssl.enabled=false # Enable SSL support.\n341\nspring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.\nspring.rabbitmq.ssl.key-store-password= # Password used to access the key store.\nspring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.\nspring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.\nspring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the\nrabbit client library.\nspring.rabbitmq.template.mandatory=false # Enable mandatory messages.\nspring.rabbitmq.template.receive-timeout=0 # Timeout for `receive()` methods.\nspring.rabbitmq.template.reply-timeout=5000 # Timeout for `sendAndReceive()` methods.\nspring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the\n`RabbitTemplate`.\nspring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and\nsecond attempt to publish a message.\nspring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish\na message.\nspring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to\npublish a message.\nspring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous\npublishing retry interval.\nspring.rabbitmq.username= # Login user to authenticate to the broker.\nspring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.\n# ----------------------------------------\n# ACTUATOR PROPERTIES\n# ----------------------------------------\n# ENDPOINTS (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nactuator/src/main/java/org/springframework/boot/actuate/endpoint/AbstractEndpoint.java\n\">AbstractEndpoint</a> subclasses)\nendpoints.enabled=true # Enable endpoints.\nendpoints.sensitive= # Default endpoint sensitive setting.\nendpoints.actuator.enabled=true # Enable the endpoint.\nendpoints.actuator.path= # Endpoint URL path.\nendpoints.actuator.sensitive=false # Enable security on the endpoint.\nendpoints.autoconfig.enabled= # Enable the endpoint.\nendpoints.autoconfig.id= # Endpoint identifier.\nendpoints.autoconfig.path= # Endpoint path.\nendpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.beans.enabled= # Enable the endpoint.\nendpoints.beans.id= # Endpoint identifier.\nendpoints.beans.path= # Endpoint path.\nendpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.configprops.enabled= # Enable the endpoint.\nendpoints.configprops.id= # Endpoint identifier.\nendpoints.configprops.keys-to-\nsanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be\nsanitized. Keys can be simple strings that the property ends with or regex\nexpressions.\nendpoints.configprops.path= # Endpoint path.\n342\nendpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.docs.curies.enabled=false # Enable the curie generation.\nendpoints.docs.enabled=true # Enable actuator docs endpoint.\nendpoints.docs.path=/docs #\nendpoints.docs.sensitive=false #\nendpoints.dump.enabled= # Enable the endpoint.\nendpoints.dump.id= # Endpoint identifier.\nendpoints.dump.path= # Endpoint path.\nendpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.env.enabled= # Enable the endpoint.\nendpoints.env.id= # Endpoint identifier.\nendpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services\n# Keys that should be sanitized. Keys can be simple strings that the property ends\nwith or regex expressions.\nendpoints.env.path= # Endpoint path.\nendpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.flyway.enabled= # Enable the endpoint.\nendpoints.flyway.id= # Endpoint identifier.\nendpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.health.enabled= # Enable the endpoint.\nendpoints.health.id= # Endpoint identifier.\nendpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By\ndefault, registered health statuses map to sensible defaults (i.e. UP maps to 200).\nendpoints.health.path= # Endpoint path.\nendpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.\nendpoints.heapdump.enabled= # Enable the endpoint.\nendpoints.heapdump.path= # Endpoint path.\nendpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.hypermedia.enabled=false # Enable hypermedia support for endpoints.\nendpoints.info.enabled= # Enable the endpoint.\nendpoints.info.id= # Endpoint identifier.\nendpoints.info.path= # Endpoint path.\nendpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.jolokia.enabled=true # Enable Jolokia endpoint.\nendpoints.jolokia.path=/jolokia # Endpoint URL path.\nendpoints.jolokia.sensitive=true # Enable security on the endpoint.\nendpoints.liquibase.enabled= # Enable the endpoint.\nendpoints.liquibase.id= # Endpoint identifier.\nendpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.logfile.enabled=true # Enable the endpoint.\nendpoints.logfile.external-file= # External Logfile to be accessed.\nendpoints.logfile.path=/logfile # Endpoint URL path.\nendpoints.logfile.sensitive=true # Enable security on the endpoint.\nendpoints.mappings.enabled= # Enable the endpoint.\nendpoints.mappings.id= # Endpoint identifier.\nendpoints.mappings.path= # Endpoint path.\nendpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.metrics.enabled= # Enable the endpoint.\nendpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.\nendpoints.metrics.filter.gauge-submissions=merged # Http filter gauge submissions\n343\n(merged, per-http-method)\nendpoints.metrics.filter.counter-submissions=merged # Http filter counter submissions\n(merged, per-http-method)\nendpoints.metrics.id= # Endpoint identifier.\nendpoints.metrics.path= # Endpoint path.\nendpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.shutdown.enabled= # Enable the endpoint.\nendpoints.shutdown.id= # Endpoint identifier.\nendpoints.shutdown.path= # Endpoint path.\nendpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.trace.enabled= # Enable the endpoint.\nendpoints.trace.id= # Endpoint identifier.\nendpoints.trace.path= # Endpoint path.\nendpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.\n# ENDPOINTS CORS CONFIGURATION (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nactuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointCorsProp\nerties.java\">EndpointCorsProperties</a>)\nendpoints.cors.allow-credentials= # Set whether credentials are supported. When not\nset, credentials are not supported.\nendpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a\nrequest. '*' allows all headers.\nendpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*'\nallows all methods.\nendpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows\nall origins. When not set, CORS support is disabled.\nendpoints.cors.exposed-headers= # Comma-separated list of headers to include in a\nresponse.\nendpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight\nrequest can be cached by clients.\n# JMX ENDPOINT (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nactuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExp\nortProperties.java\">EndpointMBeanExportProperties</a>)\nendpoints.jmx.domain= # JMX domain name. Initialized with the value of\n'spring.jmx.default-domain' if set.\nendpoints.jmx.enabled=true # Enable JMX export of all endpoints.\nendpoints.jmx.static-names= # Additional static properties to append to all\nObjectNames of MBeans representing Endpoints.\nendpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of\nconflict.\n# JOLOKIA (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nactuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaPropertie\ns.java\">JolokiaProperties</a>)\njolokia.config.*= # See Jolokia manual\n# MANAGEMENT HTTP SERVER (<a href=\"https://github.com/spring-projects/spring-\n344\nboot/tree/master/spring-boot-\nactuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServer\nProperties.java\">ManagementServerProperties</a>)\nmanagement.add-application-context-header=true # Add the \"X-Application-Context\" HTTP\nheader in each response.\nmanagement.address= # Network address that the management endpoints should bind to.\nmanagement.context-path= # Management endpoint context-path. For instance `/actuator`\nmanagement.port= # Management endpoint HTTP port. Uses the same port as the\napplication by default. Configure a different port to use management-specific SSL.\nmanagement.security.enabled=true # Enable security.\nmanagement.security.roles=ADMIN # Comma-separated list of roles that can access the\nmanagement endpoint.\nmanagement.security.sessions=stateless # Session creating policy to use (always,\nnever, if_required, stateless).\nmanagement.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.\nmanagement.ssl.client-auth= # Whether client authentication is wanted (\"want\") or\nneeded (\"need\"). Requires a trust store. Requires a custom management.port.\nmanagement.ssl.enabled= # Enable SSL support. Requires a custom management.port.\nmanagement.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom\nmanagement.port.\nmanagement.ssl.key-alias= # Alias that identifies the key in the key store. Requires a\ncustom management.port.\nmanagement.ssl.key-password= # Password used to access the key in the key store.\nRequires a custom management.port.\nmanagement.ssl.key-store= # Path to the key store that holds the SSL certificate\n(typically a jks file). Requires a custom management.port.\nmanagement.ssl.key-store-password= # Password used to access the key store. Requires a\ncustom management.port.\nmanagement.ssl.key-store-provider= # Provider for the key store. Requires a custom\nmanagement.port.\nmanagement.ssl.key-store-type= # Type of the key store. Requires a custom\nmanagement.port.\nmanagement.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.port.\nmanagement.ssl.trust-store= # Trust store that holds SSL certificates. Requires a\ncustom management.port.\nmanagement.ssl.trust-store-password= # Password used to access the trust store.\nRequires a custom management.port.\nmanagement.ssl.trust-store-provider= # Provider for the trust store. Requires a custom\nmanagement.port.\nmanagement.ssl.trust-store-type= # Type of the trust store. Requires a custom\nmanagement.port.\n# HEALTH INDICATORS (previously health.*)\nmanagement.health.db.enabled=true # Enable database health check.\nmanagement.health.defaults.enabled=true # Enable default health indicators.\nmanagement.health.diskspace.enabled=true # Enable disk space health check.\nmanagement.health.diskspace.path= # Path used to compute the available disk space.\nmanagement.health.diskspace.threshold=0 # Minimum disk space that should be available,\nin bytes.\nmanagement.health.elasticsearch.enabled=true # Enable elasticsearch health check.\nmanagement.health.elasticsearch.indices= # Comma-separated index names.\n345\nmanagement.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to\nwait for a response from the cluster.\nmanagement.health.jms.enabled=true # Enable JMS health check.\nmanagement.health.mail.enabled=true # Enable Mail health check.\nmanagement.health.mongo.enabled=true # Enable MongoDB health check.\nmanagement.health.rabbit.enabled=true # Enable RabbitMQ health check.\nmanagement.health.redis.enabled=true # Enable Redis health check.\nmanagement.health.solr.enabled=true # Enable Solr health check.\nmanagement.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP # Comma-separated\nlist of health statuses in order of severity.\n# INFO CONTRIBUTORS (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nactuator/src/main/java/org/springframework/boot/actuate/autoconfigure/InfoContributorP\nroperties.java\">InfoContributorProperties</a>)\nmanagement.info.build.enabled=true # Enable build info.\nmanagement.info.defaults.enabled=true # Enable default info contributors.\nmanagement.info.env.enabled=true # Enable environment info.\nmanagement.info.git.enabled=true # Enable git info.\nmanagement.info.git.mode=simple # Mode to use to expose git information.\n# TRACING (<a href=\"https://github.com/spring-projects/spring-boot/tree/master/spring-\nboot-\nactuator/src/main/java/org/springframework/boot/actuate/trace/TraceProperties.java\">Tr\naceProperties</a>)\nmanagement.trace.include=request-headers,response-headers,cookies,errors # Items to be\nincluded in the trace.\n# METRICS EXPORT (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\nactuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportPro\nperties.java\">MetricExportProperties</a>)\nspring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what\nto do with the keys from the source repository.\nspring.metrics.export.aggregate.prefix= # Prefix for global repository if active.\nspring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks.\nMetrics are exported to external sources on a schedule with this delay.\nspring.metrics.export.enabled=true # Flag to enable metric export (assuming a\nMetricWriter is available).\nspring.metrics.export.excludes= # List of patterns for metric names to exclude.\nApplied after the includes.\nspring.metrics.export.includes= # List of patterns for metric names to include.\nspring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export\n(if active).\nspring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if\nactive.\nspring.metrics.export.send-latest= # Flag to switch off any available optimizations\nbased on not exporting unchanged metric values.\nspring.metrics.export.statsd.host= # Host of a statsd server to receive exported\nmetrics.\nspring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported\n346\nmetrics.\nspring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.\nspring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean\nname.\n# ----------------------------------------\n# DEVTOOLS PROPERTIES\n# ----------------------------------------\n# DEVTOOLS (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\ndevtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsPropert\nies.java\">DevToolsProperties</a>)\nspring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.\nspring.devtools.livereload.port=35729 # Server port.\nspring.devtools.restart.additional-exclude= # Additional patterns that should be\nexcluded from triggering a full restart.\nspring.devtools.restart.additional-paths= # Additional paths to watch for changes.\nspring.devtools.restart.enabled=true # Enable automatic restart.\nspring.devtools.restart.exclude=META-INF/maven/**,META-\nINF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Test\ns.class,git.properties # Patterns that should be excluded from triggering a full\nrestart.\nspring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait\nbetween polling for classpath changes.\nspring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds)\nrequired without any classpath changes before a restart is triggered.\nspring.devtools.restart.trigger-file= # Name of a specific file that when changed will\ntrigger the restart check. If not specified any classpath file change will trigger the\nrestart.\n# REMOTE DEVTOOLS (<a href=\"https://github.com/spring-projects/spring-\nboot/tree/master/spring-boot-\ndevtools/src/main/java/org/springframework/boot/devtools/autoconfigure/RemoteDevToolsP\nroperties.java\">RemoteDevToolsProperties</a>)\nspring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle\nthe remote connection.\nspring.devtools.remote.debug.enabled=true # Enable remote debug support.\nspring.devtools.remote.debug.local-port=8000 # Local remote debug server port.\nspring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the\nremote application.\nspring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the\nremote application.\nspring.devtools.remote.restart.enabled=true # Enable remote restart.\nspring.devtools.remote.secret= # A shared secret required to establish a connection\n(required to enable remote support).\nspring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer\nthe shared secret.\n347\nAppendix B: Configuration meta-data\nSpring Boot jars are shipped with meta-data files that provide details of all supported configuration\nproperties. The files are designed to allow IDE developers to offer contextual help and \u201ccode\ncompletion\u201d as users are working with application.properties or application.yml files.\nThe majority of the meta-data file is generated automatically at compile time by processing all\nitems annotated with @ConfigurationProperties. However, it is possible to write part of the meta-\ndata manually for corner cases or more advanced use cases.\nMeta-data format\nConfiguration meta-data files are located inside jars under META-INF/spring-configuration-\nmetadata.json They use a simple JSON format with items categorized under either \u201cgroups\u201d or\n\u201cproperties\u201d and additional values hint categorized under \"hints\":\n{\"groups\": [\n{\n\"name\": \"server\",\n\"type\": \"org.springframework.boot.autoconfigure.web.ServerProperties\",\n\"sourceType\": \"org.springframework.boot.autoconfigure.web.ServerProperties\"\n},\n{\n\"name\": \"spring.jpa.hibernate\",\n\"type\":\n\"org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate\",\n\"sourceType\": \"org.springframework.boot.autoconfigure.orm.jpa.JpaProperties\",\n\"sourceMethod\": \"getHibernate()\"\n}\n...\n],\"properties\": [\n{\n\"name\": \"server.port\",\n\"type\": \"java.lang.Integer\",\n\"sourceType\": \"org.springframework.boot.autoconfigure.web.ServerProperties\"\n},\n{\n\"name\": \"server.servlet-path\",\n\"type\": \"java.lang.String\",\n\"sourceType\": \"org.springframework.boot.autoconfigure.web.ServerProperties\",\n\"defaultValue\": \"/\"\n},\n{\n\"name\": \"spring.jpa.hibernate.ddl-auto\",\n\"type\": \"java.lang.String\",\n\"description\": \"DDL mode. This is actually a shortcut for the\n\\\"hibernate.hbm2ddl.auto\\\" property.\",\n\"sourceType\":\n\"org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate\"\n348\n}\n...\n],\"hints\": [\n{\n\"name\": \"spring.jpa.hibernate.ddl-auto\",\n\"values\": [\n{\n\"value\": \"none\",\n\"description\": \"Disable DDL handling.\"\n},\n{\n\"value\": \"validate\",\n\"description\": \"Validate the schema, make no changes to the database.\"\n},\n{\n\"value\": \"update\",\n\"description\": \"Update the schema if necessary.\"\n},\n{\n\"value\": \"create\",\n\"description\": \"Create the schema and destroy previous data.\"\n},\n{\n\"value\": \"create-drop\",\n\"description\": \"Create and then destroy the schema at the end of the\nsession.\"\n}\n]\n}\n]}\nEach \u201cproperty\u201d is a configuration item that the user specifies with a given value. For example\nserver.port and server.servlet-path might be specified in application.properties as follows:\nserver.port=9090\nserver.servlet-path=/home\nThe \u201cgroups\u201d are higher level items that don\u2019t themselves specify a value, but instead provide a\ncontextual grouping for properties. For example the server.port and server.servlet-path\nproperties are part of the server group.\n\uf05a It is not required that every \u201cproperty\u201d has a \u201cgroup\u201d, some properties might just\nexist in their own right.\nFinally, \u201chints\u201d are additional information used to assist the user in configuring a given property.\nWhen configuring the spring.jpa.hibernate.ddl-auto property, a tool can use it to offer some auto-\ncompletion help for the none, validate, update, create and create-drop values.\n349\nGroup Attributes\nThe JSON object contained in the groups array can contain the following attributes:\nName Type Purpose\nname\nString The full name of the group. This attribute is mandatory.\ntype\nString The class name of the data type of the group. For example, if the\ngroup was based on a class annotated with\n@ConfigurationProperties the attribute would contain the fully\nqualified name of that class. If it was based on a @Bean method, it\nwould be the return type of that method. The attribute may be\nomitted if the type is not known.\ndescription\nString A short description of the group that can be displayed to users.\nMay be omitted if no description is available. It is recommended\nthat descriptions are a short paragraphs, with the first line\nproviding a concise summary. The last line in the description\nshould end with a period (.).\nsourceType\nString The class name of the source that contributed this group. For\nexample, if the group was based on a @Bean method annotated\nwith @ConfigurationProperties this attribute would contain the\nfully qualified name of the @Configuration class containing the\nmethod. The attribute may be omitted if the source type is not\nknown.\nsourceMethod\nString The full name of the method (include parenthesis and argument\ntypes) that contributed this group. For example, the name of a\n@ConfigurationProperties annotated @Bean method. May be\nomitted if the source method is not known.\nProperty Attributes\nThe JSON object contained in the properties array can contain the following attributes:\nName Type Purpose\nname\nString The full name of the property. Names are in lowercase dashed\nform (e.g. server.servlet-path). This attribute is mandatory.\ntype\nString The full signature of the data type of the property. For example,\njava.lang.String but also a full generic type such as\njava.util.Map<java.util.String,acme.MyEnum>. This attribute can\nbe used to guide the user as to the types of values that they can\nenter. For consistency, the type of a primitive is specified using its\nwrapper counterpart, i.e. boolean becomes java.lang.Boolean.\nNote that this class may be a complex type that gets converted\nfrom a String as values are bound. May be omitted if the type is\nnot known.\n350\nName Type Purpose\ndescription\nString A short description of the group that can be displayed to users.\nMay be omitted if no description is available. It is recommended\nthat descriptions are a short paragraphs, with the first line\nproviding a concise summary. The last line in the description\nshould end with a period (.).\nsourceType\nString The class name of the source that contributed this property. For\nexample, if the property was from a class annotated with\n@ConfigurationProperties this attribute would contain the fully\nqualified name of that class. May be omitted if the source type is\nnot known.\ndefaultValue\nObject The default value which will be used if the property is not\nspecified. Can also be an array of value(s) if the type of the\nproperty is an array. May be omitted if the default value is not\nknown.\ndeprecation\nDeprecation Specify if the property is deprecated. May be omitted if the field is\nnot deprecated or if that information is not known. See below for\nmore details.\nThe JSON object contained in the deprecation attribute of each properties element can contain the\nfollowing attributes:\nName Type Purpose\nreason\nString A short description of the reason why the property was\ndeprecated. May be omitted if no reason is available. It is\nrecommended that descriptions are a short paragraphs, with the\nfirst line providing a concise summary. The last line in the\ndescription should end with a period (.).\nreplacement\nString The full name of the property that is replacing this deprecated\nproperty. May be omitted if there is no replacement for this\nproperty.\nPrior to Spring Boot 1.3, a single deprecated boolean attribute can be used instead\n\uf05a of the deprecation element. This is still supported in a deprecated fashion and\nshould no longer be used. If no reason and replacement are available, an empty\ndeprecation object should be set.\nDeprecation can also be specified declaratively in code by adding the\n@DeprecatedConfigurationProperty annotation to the getter exposing the deprecated property. For\ninstance, let\u2019s assume the app.foo.target property was confusing and was renamed to app.foo.name\n351\n@ConfigurationProperties(\"app.foo\")\npublic class FooProperties {\nprivate String name;\npublic String getName() { ... }\npublic void setName(String name) { ... }\n@DeprecatedConfigurationProperty(replacement = \"app.foo.name\")\n@Deprecated\npublic String getTarget() {\nreturn getName();\n}\n@Deprecated\npublic void setTarget(String target) {\nsetName(target);\n}\n}\nThe code above makes sure that the deprecated property still works (delegating to the name property\nbehind the scenes). Once the getTarget and setTarget methods can be removed from your public\nAPI, the automatic deprecation hint in the meta-data will go away as well.\nHint Attributes\nThe JSON object contained in the hints array can contain the following attributes:\nName Type Purpose\nname\nString The full name of the property that this hint refers to. Names are in\nlowercase dashed form (e.g. server.servlet-path). If the property\nrefers to a map (e.g. system.contexts) the hint either applies to the\nkeys of the map (system.context.keys) or the values\n(system.context.values). This attribute is mandatory.\nvalues ValueHint[] A list of valid values as defined by the ValueHint object (see below).\nEach entry defines the value and may have a description\nproviders ValueProvider A list of providers as defined by the ValueProvider object (see\n[] below). Each entry defines the name of the provider and its\nparameters, if any.\nThe JSON object contained in the values attribute of each hint element can contain the following\nattributes:\n352\nName Type Purpose\nvalue\nObject A valid value for the element to which the hint refers to. Can also\nbe an array of value(s) if the type of the property is an array. This\nattribute is mandatory.\ndescription\nString A short description of the value that can be displayed to users.\nMay be omitted if no description is available. It is recommended\nthat descriptions are a short paragraphs, with the first line\nproviding a concise summary. The last line in the description\nshould end with a period (.).\nThe JSON object contained in the providers attribute of each hint element can contain the following\nattributes:\nName Type Purpose\nname\nString The name of the provider to use to offer additional content\nassistance for the element to which the hint refers to.\nparameters\nJSON object Any additional parameter that the provider supports (check the\ndocumentation of the provider for more details).\nRepeated meta-data items\nIt is perfectly acceptable for \u201cproperty\u201d and \u201cgroup\u201d objects with the same name to appear multiple\ntimes within a meta-data file. For example, you could bind two separate classes to the same prefix,\nwith each potentially offering overlap of property names. While this is not supposed to be a\nfrequent scenario, consumers of meta-data should take care to ensure that they support such\nscenarios.\nProviding manual hints\nTo improve the user experience and further assist the user in configuring a given property, you can\nprovide additional meta-data that:\n1. Describes the list of potential values for a property.\n2. Associates a provider to attach a well-defined semantic to a property so that a tool can discover\nthe list of potential values based on the project\u2019s context.\nValue hint\nThe name attribute of each hint refers to the name of a property. In the initial example above, we\nprovide 5 values for the spring.jpa.hibernate.ddl-auto property: none, validate, update, create and\ncreate-drop. Each value may have a description as well.\nIf your property is of type Map, you can provide hints for both the keys and the values (but not for\nthe map itself). The special .keys and .values suffixes must be used to refer to the keys and the\nvalues respectively.\n353\nLet\u2019s assume a foo.contexts that maps magic String values to an integer:\n@ConfigurationProperties(\"foo\")\npublic class FooProperties {\nprivate Map<String,Integer> contexts;\n// getters and setters\n}\nThe magic values are foo and bar for instance. In order to offer additional content assistance for the\nkeys, you could add the following to the manual meta-data of the module:\n{\"hints\": [\n{\n\"name\": \"foo.contexts.keys\",\n\"values\": [\n{\n\"value\": \"foo\"\n},\n{\n\"value\": \"bar\"\n}\n]\n}\n]}\n\uf05a Of course, you should have an Enum for those two values instead. This is by far the\nmost effective approach to auto-completion if your IDE supports it.\nValue provider\nProviders are a powerful way of attaching semantics to a property. We define in the section below\nthe official providers that you can use for your own hints. Bare in mind however that your favorite\nIDE may implement some of these or none of them. It could eventually provide its own as well.\n\uf05a\nAs this is a new feature, IDE vendors will have to catch up with this new feature.\nThe table below summarizes the list of supported providers:\nName Description\nany\nPermit any additional value to be provided.\nclass-reference\nAuto-complete the classes available in the project. Usually\nconstrained by a base class that is specified via the target\nparameter.\n354\nName Description\nhandle-as\nHandle the property as if it was defined by the type defined via\nthe mandatory target parameter.\nlogger-name\nAuto-complete valid logger names. Typically, package and class\nnames available in the current project can be auto-completed.\nspring-bean-reference\nAuto-complete the available bean names in the current project.\nUsually constrained by a base class that is specified via the target\nparameter.\nspring-profile-name\nAuto-complete the available Spring profile names in the project.\nNo more than one provider can be active for a given property but you can specify\nseveral providers if they can all manage the property in some ways. Make sure to\n\uf0eb\nplace the most powerful provider first as the IDE must use the first one in the\nJSON section it can handle. If no provider for a given property is supported, no\nspecial content assistance is provided either.\nAny\nThe any provider permits any additional values to be provided. Regular value validation based on\nthe property type should be applied if this is supported.\nThis provider will be typically used if you have a list of values and any extra values are still to be\nconsidered as valid.\nThe example below offers on and off as auto-completion values for system.state; any other value is\nalso allowed:\n{\"hints\": [\n{\n\"name\": \"system.state\",\n\"values\": [\n{\n\"value\": \"on\"\n},\n{\n\"value\": \"off\"\n}\n],\n\"providers\": [\n{\n\"name\": \"any\"\n}\n]\n}\n]}\n355\nClass reference\nThe class-reference provider auto-completes classes available in the project. This provider\nsupports these parameters:\nParamete Type Default value Description\nr\ntarget String none The fully qualified name of the class that should\n(Class) be assignable to the chosen value. Typically used\nto filter out non candidate classes. Note that this\ninformation can be provided by the type itself by\nexposing a class with the appropriate upper\nbound.\nconcrete boolean\ntrue Specify if only concrete classes are to be\nconsidered as valid candidates.\nThe meta-data snippet below corresponds to the standard server.jsp-servlet.class-name property\nthat defines the JspServlet class name to use:\n{\"hints\": [\n{\n\"name\": \"server.jsp-servlet.class-name\",\n\"providers\": [\n{\n\"name\": \"class-reference\",\n\"parameters\": {\n\"target\": \"javax.servlet.http.HttpServlet\"\n}\n}\n]\n}\n]}\nHandle As\nThe handle-as provider allows you to substitute the type of the property to a more high-level type.\nThis typically happens when the property has a java.lang.String type because you don\u2019t want your\nconfiguration classes to rely on classes that may not be on the classpath. This provider supports\nthese parameters:\nParamete Type Default value Description\nr\ntarget String none The fully qualified name of the type to consider\n(Class) for the property. This parameter is mandatory.\nThe following types can be used:\n\u2022 Any java.lang.Enum that lists the possible values for the property (By all means, try to define the\n356\nproperty with the Enum type instead as no further hint should be required for the IDE to auto-\ncomplete the values).\n\u2022 java.nio.charset.Charset: auto-completion of charset/encoding values (e.g. UTF-8)\n\u2022 java.util.Locale: auto-completion of locales (e.g. en_US)\n\u2022 org.springframework.util.MimeType: auto-completion of content type values (e.g. text/plain)\n\u2022 org.springframework.core.io.Resource: auto-completion of Spring\u2019s Resource abstraction to refer\nto a file on the filesystem or on the classpath. (e.g. classpath:/foo.properties)\n\uf05a If multiple values can be provided, use a Collection or Array type to teach the IDE\nabout it.\nThe meta-data snippet below corresponds to the standard liquibase.change-log property that\ndefines the path to the changelog to use. It is actually used internally as a\norg.springframework.core.io.Resource but cannot be exposed as such as we need to keep the\noriginal String value to pass it to the Liquibase API.\n{\"hints\": [\n{\n\"name\": \"liquibase.change-log\",\n\"providers\": [\n{\n\"name\": \"handle-as\",\n\"parameters\": {\n\"target\": \"org.springframework.core.io.Resource\"\n}\n}\n]\n}\n]}\nLogger name\nThe logger-name provider auto-completes valid logger names. Typically, package and class names\navailable in the current project can be auto-completed. Specific frameworks may have extra magic\nlogger names that could be supported as well.\nSince a logger name can be any arbitrary name, really, this provider should allow any value but\ncould highlight valid packages and class names that are not available in the project\u2019s classpath.\nThe meta-data snippet below corresponds to the standard logging.level property, keys are logger\nnames and values correspond to the standard log levels or any custom level:\n357\n{\"hints\": [\n{\n\"name\": \"logging.level.keys\",\n\"values\": [\n{\n\"value\": \"root\",\n\"description\": \"Root logger used to assign the default logging level.\"\n}\n],\n\"providers\": [\n{\n\"name\": \"logger-name\"\n}\n]\n},\n{\n\"name\": \"logging.level.values\",\n\"values\": [\n{\n\"value\": \"trace\"\n},\n{\n\"value\": \"debug\"\n},\n{\n\"value\": \"info\"\n},\n{\n\"value\": \"warn\"\n},\n{\n\"value\": \"error\"\n},\n{\n\"value\": \"fatal\"\n},\n{\n\"value\": \"off\"\n}\n],\n\"providers\": [\n{\n\"name\": \"any\"\n}\n]\n}\n]}\n358\nSpring bean reference\nThe spring-bean-reference provider auto-completes the beans that are defined in the\nconfiguration of the current project. This provider supports these parameters:\nParamete Type Default value Description\nr\ntarget String none The fully qualified name of the bean class that\n(Class) should be assignable to the candidate. Typically\nused to filter out non candidate beans.\nThe meta-data snippet below corresponds to the standard spring.jmx.server property that defines\nthe name of the MBeanServer bean to use:\n{\"hints\": [\n{\n\"name\": \"spring.jmx.server\",\n\"providers\": [\n{\n\"name\": \"spring-bean-reference\",\n\"parameters\": {\n\"target\": \"javax.management.MBeanServer\"\n}\n}\n]\n}\n]}\nThe binder is not aware of the meta-data so if you provide that hint, you will still\n\uf05a\nneed to transform the bean name into an actual Bean reference using the\nApplicationContext.\nSpring profile name\nThe spring-profile-name provider auto-completes the Spring profiles that are defined in the\nconfiguration of the current project.\nThe meta-data snippet below corresponds to the standard spring.profiles.active property that\ndefines the name of the Spring profile(s) to enable:\n359\n{\"hints\": [\n{\n\"name\": \"spring.profiles.active\",\n\"providers\": [\n{\n\"name\": \"spring-profile-name\"\n}\n]\n}\n]}\nGenerating your own meta-data using the annotation\nprocessor\nYou can easily generate your own configuration meta-data file from items annotated with\n@ConfigurationProperties by using the spring-boot-configuration-processor jar. The jar includes a\nJava annotation processor which is invoked as your project is compiled. To use the processor,\nsimply include spring-boot-configuration-processor as an optional dependency, for example with\nMaven you would add:\n<dependency>\n<groupId>org.springframework.boot</groupId>\n<artifactId>spring-boot-configuration-processor</artifactId>\n<optional>true</optional>\n</dependency>\nWith Gradle, you can use the propdeps-plugin and specify:\ndependencies {\noptional \"org.springframework.boot:spring-boot-configuration-processor\"\n}\ncompileJava.dependsOn(processResources)\n}\nYou need to add compileJava.dependsOn(processResources) to your build to ensure\n\uf05a\nthat resources are processed before code is compiled. Without this directive any\nadditional-spring-configuration-metadata.json files will not be processed.\nThe processor will pick up both classes and methods that are annotated with\n@ConfigurationProperties. The Javadoc for field values within configuration classes will be used to\npopulate the description attribute.\n360\n\uf05a You should only use simple text with @ConfigurationProperties field Javadoc since\nthey are not processed before being added to the JSON.\nProperties are discovered via the presence of standard getters and setters with special handling for\ncollection types (that will be detected even if only a getter is present). The annotation processor also\nsupports the use of the @Data, @Getter and @Setter lombok annotations.\nIf you are using AspectJ in your project, you need to make sure that the\nannotation processor only runs once. There are several ways to do this: with\nMaven, you can configure the maven-apt-plugin explicitly and add the\ndependency to the annotation processor only there. You could also let the AspectJ\nplugin run all the processing and disable annotation processing in the maven-\ncompiler-plugin configuration:\n\uf05a\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-compiler-plugin</artifactId>\n<configuration>\n<proc>none</proc>\n</configuration>\n</plugin>\nNested properties\nThe annotation processor will automatically consider inner classes as nested properties. For\nexample, the following class:\n@ConfigurationProperties(prefix=\"server\")\npublic class ServerProperties {\nprivate String name;\nprivate Host host;\n// ... getter and setters\nprivate static class Host {\nprivate String ip;\nprivate int port;\n// ... getter and setters\n}\n}\n361\nWill produce meta-data information for server.name, server.host.ip and server.host.port\nproperties. You can use the @NestedConfigurationProperty annotation on a field to indicate that a\nregular (non-inner) class should be treated as if it were nested.\nAdding additional meta-data\nSpring Boot\u2019s configuration file handling is quite flexible; and it is often the case that properties\nmay exist that are not bound to a @ConfigurationProperties bean. You may also need to tune some\nattributes of an existing key. To support such cases and allow you to provide custom \"hints\", the\nannotation processor will automatically merge items from META-INF/additional-spring-\nconfiguration-metadata.json into the main meta-data file.\nIf you refer to a property that has been detected automatically, the description, default value and\ndeprecation information are overridden if specified. If the manual property declaration is not\nidentified in the current module, it is added as a brand new property.\nThe format of the additional-spring-configuration-metadata.json file is exactly the same as the\nregular spring-configuration-metadata.json. The additional properties file is optional, if you don\u2019t\nhave any additional properties, simply don\u2019t add it.\n362\nAppendix C: Auto-configuration classes\nHere is a list of all auto-configuration classes provided by Spring Boot with links to documentation\nand source code. Remember to also look at the autoconfig report in your application for more\ndetails of which features are switched on. (start the app with --debug or -Ddebug, or in an Actuator\napplication use the autoconfig endpoint).\nFrom the \u201cspring-boot-autoconfigure\u201d module\nThe following auto-configuration classes are from the spring-boot-autoconfigure module:\nConfiguration Class Links\nActiveMQAutoConfiguration\njavadoc\nAopAutoConfiguration\njavadoc\nArtemisAutoConfiguration\njavadoc\nBatchAutoConfiguration\njavadoc\nCacheAutoConfiguration\njavadoc\nCassandraAutoConfiguration\njavadoc\nCassandraDataAutoConfiguration\njavadoc\nCassandraRepositoriesAutoConfiguration\njavadoc\nCloudAutoConfiguration\njavadoc\nConfigurationPropertiesAutoConfiguration\njavadoc\nCouchbaseAutoConfiguration\njavadoc\nCouchbaseDataAutoConfiguration\njavadoc\nCouchbaseRepositoriesAutoConfiguration\njavadoc\nDataSourceAutoConfiguration\njavadoc\nDataSourceTransactionManagerAutoConfiguration\njavadoc\nDeviceDelegatingViewResolverAutoConfiguration\njavadoc\nDeviceResolverAutoConfiguration\njavadoc\nDispatcherServletAutoConfiguration\njavadoc\nElasticsearchAutoConfiguration\njavadoc\nElasticsearchDataAutoConfiguration\njavadoc\nElasticsearchRepositoriesAutoConfiguration\njavadoc\nEmbeddedMongoAutoConfiguration\njavadoc\nEmbeddedServletContainerAutoConfiguration\njavadoc\n363\nConfiguration Class Links\nErrorMvcAutoConfiguration\njavadoc\nFacebookAutoConfiguration\njavadoc\nFallbackWebSecurityAutoConfiguration\njavadoc\nFlywayAutoConfiguration\njavadoc\nFreeMarkerAutoConfiguration\njavadoc\nGroovyTemplateAutoConfiguration\njavadoc\nGsonAutoConfiguration\njavadoc\nH2ConsoleAutoConfiguration\njavadoc\nHazelcastAutoConfiguration\njavadoc\nHazelcastJpaDependencyAutoConfiguration\njavadoc\nHibernateJpaAutoConfiguration\njavadoc\nHttpEncodingAutoConfiguration\njavadoc\nHttpMessageConvertersAutoConfiguration\njavadoc\nHypermediaAutoConfiguration\njavadoc\nIntegrationAutoConfiguration\njavadoc\nJacksonAutoConfiguration\njavadoc\nJdbcTemplateAutoConfiguration\njavadoc\nJerseyAutoConfiguration\njavadoc\nJestAutoConfiguration\njavadoc\nJmsAutoConfiguration\njavadoc\nJmxAutoConfiguration\njavadoc\nJndiConnectionFactoryAutoConfiguration\njavadoc\nJndiDataSourceAutoConfiguration\njavadoc\nJooqAutoConfiguration\njavadoc\nJpaRepositoriesAutoConfiguration\njavadoc\nJtaAutoConfiguration\njavadoc\nKafkaAutoConfiguration\njavadoc\nLinkedInAutoConfiguration\njavadoc\nLiquibaseAutoConfiguration\njavadoc\nMailSenderAutoConfiguration\njavadoc\nMailSenderValidatorAutoConfiguration\njavadoc\n364\nConfiguration Class Links\nMessageSourceAutoConfiguration\njavadoc\nMongoAutoConfiguration\njavadoc\nMongoDataAutoConfiguration\njavadoc\nMongoRepositoriesAutoConfiguration\njavadoc\nMultipartAutoConfiguration\njavadoc\nMustacheAutoConfiguration\njavadoc\nNeo4jDataAutoConfiguration\njavadoc\nNeo4jRepositoriesAutoConfiguration\njavadoc\nOAuth2AutoConfiguration\njavadoc\nPersistenceExceptionTranslationAutoConfiguration\njavadoc\nProjectInfoAutoConfiguration\njavadoc\nPropertyPlaceholderAutoConfiguration\njavadoc\nRabbitAutoConfiguration\njavadoc\nRedisAutoConfiguration\njavadoc\nRedisRepositoriesAutoConfiguration\njavadoc\nRepositoryRestMvcAutoConfiguration\njavadoc\nSecurityAutoConfiguration\njavadoc\nSecurityFilterAutoConfiguration\njavadoc\nSendGridAutoConfiguration\njavadoc\nServerPropertiesAutoConfiguration\njavadoc\nSessionAutoConfiguration\njavadoc\nSitePreferenceAutoConfiguration\njavadoc\nSocialWebAutoConfiguration\njavadoc\nSolrAutoConfiguration\njavadoc\nSolrRepositoriesAutoConfiguration\njavadoc\nSpringApplicationAdminJmxAutoConfiguration\njavadoc\nSpringDataWebAutoConfiguration\njavadoc\nThymeleafAutoConfiguration\njavadoc\nTransactionAutoConfiguration\njavadoc\nTwitterAutoConfiguration\njavadoc\nValidationAutoConfiguration\njavadoc\n365\nConfiguration Class Links\nWebClientAutoConfiguration\njavadoc\nWebMvcAutoConfiguration\njavadoc\nWebServicesAutoConfiguration\njavadoc\nWebSocketAutoConfiguration\njavadoc\nWebSocketMessagingAutoConfiguration\njavadoc\nXADataSourceAutoConfiguration\njavadoc\nFrom the \u201cspring-boot-actuator\u201d module\nThe following auto-configuration classes are from the spring-boot-actuator module:\nConfiguration Class Links\nAuditAutoConfiguration\njavadoc\nCacheStatisticsAutoConfiguration\njavadoc\nCloudFoundryActuatorAutoConfiguration\njavadoc\nEndpointAutoConfiguration\njavadoc\nEndpointMBeanExportAutoConfiguration\njavadoc\nEndpointWebMvcAutoConfiguration\njavadoc\nHealthIndicatorAutoConfiguration\njavadoc\nInfoContributorAutoConfiguration\njavadoc\nJolokiaAutoConfiguration\njavadoc\nManagementServerPropertiesAutoConfiguration\njavadoc\nManagementWebSecurityAutoConfiguration\njavadoc\nMetricExportAutoConfiguration\njavadoc\nMetricFilterAutoConfiguration\njavadoc\nMetricRepositoryAutoConfiguration\njavadoc\nMetricsChannelAutoConfiguration\njavadoc\nMetricsDropwizardAutoConfiguration\njavadoc\nPublicMetricsAutoConfiguration\njavadoc\nTraceRepositoryAutoConfiguration\njavadoc\nTraceWebFilterAutoConfiguration\njavadoc\n366\nAppendix D: Test auto-configuration\nannotations\nHere is a table of the various @\u2026Test annotations that can be used to test slices of your application\nand the auto-configuration that they import by default:\nTest slice Imported auto-configuration\n@DataJpaTest org.springframework.boot.autoconfigure.cache.C\nacheAutoConfiguration\norg.springframework.boot.autoconfigure.data.jp\na.JpaRepositoriesAutoConfiguration\norg.springframework.boot.autoconfigure.flyway.\nFlywayAutoConfiguration\norg.springframework.boot.autoconfigure.jdbc.Da\ntaSourceAutoConfiguration\norg.springframework.boot.autoconfigure.jdbc.Da\ntaSourceTransactionManagerAutoConfiguration\norg.springframework.boot.autoconfigure.jdbc.Jd\nbcTemplateAutoConfiguration\norg.springframework.boot.autoconfigure.liquiba\nse.LiquibaseAutoConfiguration\norg.springframework.boot.autoconfigure.orm.jpa\n.HibernateJpaAutoConfiguration\norg.springframework.boot.autoconfigure.transac\ntion.TransactionAutoConfiguration\norg.springframework.boot.test.autoconfigure.jd\nbc.TestDatabaseAutoConfiguration\norg.springframework.boot.test.autoconfigure.or\nm.jpa.TestEntityManagerAutoConfiguration\n@JdbcTest org.springframework.boot.autoconfigure.cache.C\nacheAutoConfiguration\norg.springframework.boot.autoconfigure.flyway.\nFlywayAutoConfiguration\norg.springframework.boot.autoconfigure.jdbc.Da\ntaSourceAutoConfiguration\norg.springframework.boot.autoconfigure.jdbc.Da\ntaSourceTransactionManagerAutoConfiguration\norg.springframework.boot.autoconfigure.jdbc.Jd\nbcTemplateAutoConfiguration\norg.springframework.boot.autoconfigure.liquiba\nse.LiquibaseAutoConfiguration\norg.springframework.boot.autoconfigure.transac\ntion.TransactionAutoConfiguration\norg.springframework.boot.test.autoconfigure.jd\nbc.TestDatabaseAutoConfiguration\n@JsonTest org.springframework.boot.autoconfigure.cache.C\nacheAutoConfiguration\norg.springframework.boot.autoconfigure.gson.Gs\nonAutoConfiguration\norg.springframework.boot.autoconfigure.jackson\n.JacksonAutoConfiguration\norg.springframework.boot.test.autoconfigure.js\non.JsonTestersAutoConfiguration\n367\nTest slice Imported auto-configuration\n@RestClientTest org.springframework.boot.autoconfigure.cache.C\nacheAutoConfiguration\norg.springframework.boot.autoconfigure.gson.Gs\nonAutoConfiguration\norg.springframework.boot.autoconfigure.jackson\n.JacksonAutoConfiguration\norg.springframework.boot.autoconfigure.web.Htt\npMessageConvertersAutoConfiguration\norg.springframework.boot.autoconfigure.web.Web\nClientAutoConfiguration\norg.springframework.boot.test.autoconfigure.we\nb.client.MockRestServiceServerAutoConfiguratio\nn\norg.springframework.boot.test.autoconfigure.we\nb.client.WebClientRestTemplateAutoConfiguratio\nn\n@WebMvcTest org.springframework.boot.autoconfigure.Message\nSourceAutoConfiguration\norg.springframework.boot.autoconfigure.cache.C\nacheAutoConfiguration\norg.springframework.boot.autoconfigure.freemar\nker.FreeMarkerAutoConfiguration\norg.springframework.boot.autoconfigure.groovy.\ntemplate.GroovyTemplateAutoConfiguration\norg.springframework.boot.autoconfigure.gson.Gs\nonAutoConfiguration\norg.springframework.boot.autoconfigure.hateoas\n.HypermediaAutoConfiguration\norg.springframework.boot.autoconfigure.jackson\n.JacksonAutoConfiguration\norg.springframework.boot.autoconfigure.mustach\ne.MustacheAutoConfiguration\norg.springframework.boot.autoconfigure.thymele\naf.ThymeleafAutoConfiguration\norg.springframework.boot.autoconfigure.web.Htt\npMessageConvertersAutoConfiguration\norg.springframework.boot.autoconfigure.web.Web\nMvcAutoConfiguration\norg.springframework.boot.test.autoconfigure.we\nb.servlet.MockMvcAutoConfiguration\norg.springframework.boot.test.autoconfigure.we\nb.servlet.MockMvcSecurityAutoConfiguration\norg.springframework.boot.test.autoconfigure.we\nb.servlet.MockMvcWebClientAutoConfiguration\norg.springframework.boot.test.autoconfigure.we\nb.servlet.MockMvcWebDriverAutoConfiguration\n368\nAppendix E: The executable jar format\nThe spring-boot-loader modules allows Spring Boot to support executable jar and war files. If\nyou\u2019re using the Maven or Gradle plugin, executable jars are automatically generated and you\ngenerally won\u2019t need to know the details of how they work.\nIf you need to create executable jars from a different build system, or if you are just curious about\nthe underlying technology, this section provides some background.\nNested JARs\nJava does not provide any standard way to load nested jar files (i.e. jar files that are themselves\ncontained within a jar). This can be problematic if you are looking to distribute a self-contained\napplication that you can just run from the command line without unpacking.\nTo solve this problem, many developers use \u201cshaded\u201d jars. A shaded jar simply packages all classes,\nfrom all jars, into a single 'uber jar'. The problem with shaded jars is that it becomes hard to see\nwhich libraries you are actually using in your application. It can also be problematic if the same\nfilename is used (but with different content) in multiple jars. Spring Boot takes a different approach\nand allows you to actually nest jars directly.\nThe executable jar file structure\nSpring Boot Loader compatible jar files should be structured in the following way:\nexample.jar\n|\n+-META-INF\n| +-MANIFEST.MF\n+-org\n| +-springframework\n| +-boot\n| +-loader\n| +-<spring boot loader classes>\n+-BOOT-INF\n+-classes\n| +-mycompany\n| +-project\n| +-YourClasses.class\n+-lib\n+-dependency1.jar\n+-dependency2.jar\nApplication classes should be placed in a nested BOOT-INF/classes directory. Dependencies should\nbe placed in a nested BOOT-INF/lib directory.\n369\nThe executable war file structure\nSpring Boot Loader compatible war files should be structured in the following way:\nexample.war\n|\n+-META-INF\n| +-MANIFEST.MF\n+-org\n| +-springframework\n| +-boot\n| +-loader\n| +-<spring boot loader classes>\n+-WEB-INF\n+-classes\n| +-com\n| +-mycompany\n| +-project\n| +-YourClasses.class\n+-lib\n| +-dependency1.jar\n| +-dependency2.jar\n+-lib-provided\n+-servlet-api.jar\n+-dependency3.jar\nDependencies should be placed in a nested WEB-INF/lib directory. Any dependencies that are\nrequired when running embedded but are not required when deploying to a traditional web\ncontainer should be placed in WEB-INF/lib-provided.\nSpring Boot\u2019s \u201cJarFile\u201d class\nThe core class used to support loading nested jars is org.springframework.boot.loader.jar.JarFile.\nIt allows you to load jar content from a standard jar file, or from nested child jar data. When first\nloaded, the location of each JarEntry is mapped to a physical file offset of the outer jar:\nmyapp.jar\n+-------------------+-------------------------+\n| /BOOT-INF/classes | /BOOT-INF/lib/mylib.jar |\n|+-----------------+||+-----------+----------+|\n|| A.class ||| B.class | C.class ||\n|+-----------------+||+-----------+----------+|\n+-------------------+-------------------------+\n^ ^ ^\n0063 3452 3980\nThe example above shows how A.class can be found in /BOOT-INF/classes in myapp.jar position\n0063. B.class from the nested jar can actually be found in myapp.jar position 3452 and C.class is at\n370\nposition 3980.\nArmed with this information, we can load specific nested entries by simply seeking to the\nappropriate part of the outer jar. We don\u2019t need to unpack the archive and we don\u2019t need to read all\nentry data into memory.\nCompatibility with the standard Java \u201cJarFile\u201d\nSpring Boot Loader strives to remain compatible with existing code and libraries.\norg.springframework.boot.loader.jar.JarFile extends from java.util.jar.JarFile and should work\nas a drop-in replacement. The getURL() method will return a URL that opens a\njava.net.JarURLConnection compatible connection and can be used with Java\u2019s URLClassLoader.\nLaunching executable jars\nThe org.springframework.boot.loader.Launcher class is a special bootstrap class that is used as an\nexecutable jars main entry point. It is the actual Main-Class in your jar file and it\u2019s used to setup an\nappropriate URLClassLoader and ultimately call your main() method.\nThere are 3 launcher subclasses (JarLauncher, WarLauncher and PropertiesLauncher). Their purpose is\nto load resources (.class files etc.) from nested jar files or war files in directories (as opposed to\nexplicitly on the classpath). In the case of JarLauncher and WarLauncher the nested paths are fixed.\nJarLauncher looks in BOOT-INF/lib/ and WarLauncher looks in WEB-INF/lib/ and WEB-INF/lib-provided/\nso you just add extra jars in those locations if you want more. The PropertiesLauncher looks in BOOT-\nINF/lib/ in your application archive by default, but you can add additional locations by setting an\nenvironment variable LOADER_PATH or loader.path in application.properties (comma-separated list\nof directories or archives).\nLauncher manifest\nYou need to specify an appropriate Launcher as the Main-Class attribute of META-INF/MANIFEST.MF. The\nactual class that you want to launch (i.e. the class that you wrote that contains a main method)\nshould be specified in the Start-Class attribute.\nFor example, here is a typical MANIFEST.MF for an executable jar file:\nMain-Class: org.springframework.boot.loader.JarLauncher\nStart-Class: com.mycompany.project.MyApplication\nFor a war file, it would be:\nMain-Class: org.springframework.boot.loader.WarLauncher\nStart-Class: com.mycompany.project.MyApplication\n\uf05a You do not need to specify Class-Path entries in your manifest file, the classpath\nwill be deduced from the nested jars.\n371\nExploded archives\nCertain PaaS implementations may choose to unpack archives before they run. For example, Cloud\nFoundry operates in this way. You can run an unpacked archive by simply starting the appropriate\nlauncher:\n$ unzip -q myapp.jar\n$ java org.springframework.boot.loader.JarLauncher\nPropertiesLauncher Features\nPropertiesLauncher has a few special features that can be enabled with external properties (System\nproperties, environment variables, manifest entries or application.properties).\nKey Purpose\nloader.path\nComma-separated Classpath, e.g.\nlib,${HOME}/app/lib. Earlier entries take\nprecedence, just like a regular -classpath on the\njavac command line.\nloader.home\nLocation of additional properties file, e.g.\n/opt/app (defaults to ${user.dir})\nloader.args\nDefault arguments for the main method (space\nseparated)\nloader.main\nName of main class to launch, e.g.\ncom.app.Application.\nloader.config.name Name of properties file, e.g. loader (defaults to\napplication).\nloader.config.location\nPath to properties file, e.g.\nclasspath:loader.properties (defaults to\napplication.properties).\nloader.system\nBoolean flag to indicate that all properties\nshould be added to System properties (defaults\nto false)\nWhen specified as environment variables or manifest entries, the following names should be used:\nKey Manifest entry Environment variable\nloader.path Loader-Path LOADER_PATH\nloader.home LOADER_HOME\nloader.args Loader-Args LOADER_ARGS\nloader.main Start-Class LOADER_MAIN\nloader.config.location LOADER_CONFIG_LOCATION\n372\nKey Manifest entry Environment variable\nloader.system LOADER_SYSTEM\nBuild plugins automatically move the Main-Class attribute to Start-Class when\n\uf0eb\nthe fat jar is built. If you are using that, specify the name of the class to launch\nusing the Main-Class attribute and leave out Start-Class.\n\u2022 loader.home is the directory location of an additional properties file (overriding the default) as\nlong as loader.config.location is not specified.\n\u2022 loader.path can contain directories (scanned recursively for jar and zip files), archive paths, or\nwildcard patterns (for the default JVM behavior).\n\u2022 loader.path (if empty) defaults to BOOT-INF/lib (meaning a local directory or a nested one if\nrunning from an archive). Because of this PropertiesLauncher behaves the same as JarLauncher\nwhen no additional configuration is provided.\n\u2022 Placeholder replacement is done from System and environment variables plus the properties\nfile itself on all values before use.\nExecutable jar restrictions\nThere are a number of restrictions that you need to consider when working with a Spring Boot\nLoader packaged application.\nZip entry compression\nThe ZipEntry for a nested jar must be saved using the ZipEntry.STORED method. This is required so\nthat we can seek directly to individual content within the nested jar. The content of the nested jar\nfile itself can still be compressed, as can any other entries in the outer jar.\nSystem ClassLoader\nLaunched applications should use Thread.getContextClassLoader() when loading classes (most\nlibraries and frameworks will do this by default). Trying to load nested jar classes via\nClassLoader.getSystemClassLoader() will fail. Please be aware that java.util.Logging always uses\nthe system classloader, for this reason you should consider a different logging implementation.\nAlternative single jar solutions\nIf the above restrictions mean that you cannot use Spring Boot Loader the following alternatives\ncould be considered:\n\u2022 Maven Shade Plugin\n\u2022 JarClassLoader\n\u2022 OneJar\n373\nAppendix F: Dependency versions\nThe table below provides details of all of the dependency versions that are provided by Spring Boot\nin its CLI, Maven dependency management and Gradle plugin. When you declare a dependency on\none of these artifacts without declaring a version the version that is listed in the table will be used.\nGroup ID Artifact ID Version\nantlr antlr\n2.7.7\nch.qos.logback logback-access\n1.1.7\nch.qos.logback logback-classic\n1.1.7\nch.qos.logback logback-core\n1.1.7\ncom.atomikos transactions-jdbc\n3.9.3\ncom.atomikos transactions-jms\n3.9.3\ncom.atomikos transactions-jta\n3.9.3\ncom.couchbase.client couchbase-spring-cache\n2.0.0\ncom.couchbase.client java-client\n2.2.8\ncom.datastax.cassandra cassandra-driver-core\n3.1.0\ncom.datastax.cassandra cassandra-driver-mapping\n3.1.0\ncom.fasterxml classmate\n1.3.3\ncom.fasterxml.jackson.core jackson-annotations\n2.8.4\ncom.fasterxml.jackson.core jackson-core\n2.8.4\ncom.fasterxml.jackson.core jackson-databind\n2.8.4\ncom.fasterxml.jackson.dataform jackson-dataformat-cbor\n2.8.4\nat\ncom.fasterxml.jackson.dataform jackson-dataformat-csv\n2.8.4\nat\ncom.fasterxml.jackson.dataform jackson-dataformat-smile\n2.8.4\nat\ncom.fasterxml.jackson.dataform jackson-dataformat-xml\n2.8.4\nat\ncom.fasterxml.jackson.dataform jackson-dataformat-yaml\n2.8.4\nat\ncom.fasterxml.jackson.datatype jackson-datatype-guava\n2.8.4\ncom.fasterxml.jackson.datatype jackson-datatype-hibernate4\n2.8.4\ncom.fasterxml.jackson.datatype jackson-datatype-hibernate5\n2.8.4\ncom.fasterxml.jackson.datatype jackson-datatype-jaxrs\n2.8.4\ncom.fasterxml.jackson.datatype jackson-datatype-jdk8\n2.8.4\n374\nGroup ID Artifact ID Version\ncom.fasterxml.jackson.datatype jackson-datatype-joda\n2.8.4\ncom.fasterxml.jackson.datatype jackson-datatype-json-org\n2.8.4\ncom.fasterxml.jackson.datatype jackson-datatype-jsr310\n2.8.4\ncom.fasterxml.jackson.jaxrs jackson-jaxrs-base\n2.8.4\ncom.fasterxml.jackson.jaxrs jackson-jaxrs-json-provider\n2.8.4\ncom.fasterxml.jackson.module jackson-module-jaxb-\n2.8.4\nannotations\ncom.fasterxml.jackson.module jackson-module-kotlin\n2.8.4\ncom.fasterxml.jackson.module jackson-module-parameter-names\n2.8.4\ncom.github.ben-manes.caffeine caffeine\n2.3.4\ncom.github.mxab.thymeleaf.extr thymeleaf-extras-data-\n1.3\nas attribute\ncom.google.appengine appengine-api-1.0-sdk\n1.9.44\ncom.google.code.gson gson\n2.7\ncom.googlecode.json-simple json-simple\n1.1.1\ncom.h2database h2\n1.4.193\ncom.hazelcast hazelcast\n3.7.1\ncom.hazelcast hazelcast-client\n3.7.1\ncom.hazelcast hazelcast-hibernate4\n3.6.5\ncom.hazelcast hazelcast-hibernate5\n1.0.1\ncom.hazelcast hazelcast-spring\n3.7.1\ncom.jayway.jsonpath json-path\n2.2.0\ncom.jayway.jsonpath json-path-assert\n2.2.0\ncom.microsoft.sqlserver mssql-jdbc\n6.1.0.jre8\ncom.querydsl querydsl-apt\n4.1.4\ncom.querydsl querydsl-collections\n4.1.4\ncom.querydsl querydsl-core\n4.1.4\ncom.querydsl querydsl-jpa\n4.1.4\ncom.querydsl querydsl-mongodb\n4.1.4\ncom.samskivert jmustache\n1.12\ncom.sendgrid sendgrid-java\n2.2.2\ncom.sun.mail javax.mail\n1.5.6\n375\nGroup ID Artifact ID Version\ncom.timgroup java-statsd-client\n3.1.0\ncom.zaxxer HikariCP\n2.4.7\ncom.zaxxer HikariCP-java6\n2.3.13\ncommons-beanutils commons-beanutils\n1.9.3\ncommons-codec commons-codec\n1.10\ncommons-collections commons-collections\n3.2.2\ncommons-digester commons-digester\n2.1\ncommons-pool commons-pool\n1.6\nde.flapdoodle.embed de.flapdoodle.embed.mongo\n1.50.5\ndom4j dom4j\n1.6.1\nio.dropwizard.metrics metrics-core\n3.1.2\nio.dropwizard.metrics metrics-ganglia\n3.1.2\nio.dropwizard.metrics metrics-graphite\n3.1.2\nio.dropwizard.metrics metrics-servlets\n3.1.2\nio.projectreactor reactor-core\n3.0.3.RELEASE\nio.projectreactor.addons reactor-adapter\n3.0.3.RELEASE\nio.projectreactor.addons reactor-logback\n3.0.3.RELEASE\nio.projectreactor.addons reactor-test\n3.0.3.RELEASE\nio.searchbox jest\n2.0.3\nio.undertow undertow-core\n1.4.3.Final\nio.undertow undertow-servlet\n1.4.3.Final\nio.undertow undertow-websockets-jsr\n1.4.3.Final\njavax.cache cache-api\n1.0.0\njavax.jms javax.jms-api\n2.0.1\njavax.mail javax.mail-api\n1.5.6\njavax.servlet javax.servlet-api\n3.1.0\njavax.servlet jstl\n1.2\njavax.transaction javax.transaction-api\n1.2\njaxen jaxen\n1.1.6\njoda-time joda-time\n2.9.5\njunit junit\n4.12\n376\nGroup ID Artifact ID Version\nmysql mysql-connector-java\n5.1.40\nnet.java.dev.jna jna\n4.2.2\nnet.sf.ehcache ehcache\n2.10.3\nnet.sourceforge.htmlunit htmlunit\n2.23\nnet.sourceforge.jtds jtds\n1.3.1\nnet.sourceforge.nekohtml nekohtml\n1.9.22\nnz.net.ultraq.thymeleaf thymeleaf-layout-dialect\n1.4.0\norg.apache.activemq activemq-amqp\n5.13.4\norg.apache.activemq activemq-blueprint\n5.13.4\norg.apache.activemq activemq-broker\n5.13.4\norg.apache.activemq activemq-camel\n5.13.4\norg.apache.activemq activemq-client\n5.13.4\norg.apache.activemq activemq-console\n5.13.4\norg.apache.activemq activemq-http\n5.13.4\norg.apache.activemq activemq-jaas\n5.13.4\norg.apache.activemq activemq-jdbc-store\n5.13.4\norg.apache.activemq activemq-jms-pool\n5.13.4\norg.apache.activemq activemq-kahadb-store\n5.13.4\norg.apache.activemq activemq-karaf\n5.13.4\norg.apache.activemq activemq-leveldb-store\n5.13.4\norg.apache.activemq activemq-log4j-appender\n5.13.4\norg.apache.activemq activemq-mqtt\n5.13.4\norg.apache.activemq activemq-openwire-generator\n5.13.4\norg.apache.activemq activemq-openwire-legacy\n5.13.4\norg.apache.activemq activemq-osgi\n5.13.4\norg.apache.activemq activemq-partition\n5.13.4\norg.apache.activemq activemq-pool\n5.13.4\norg.apache.activemq activemq-ra\n5.13.4\norg.apache.activemq activemq-run\n5.13.4\norg.apache.activemq activemq-runtime-config\n5.13.4\norg.apache.activemq activemq-shiro\n5.13.4\n377\nGroup ID Artifact ID Version\norg.apache.activemq activemq-spring\n5.13.4\norg.apache.activemq activemq-stomp\n5.13.4\norg.apache.activemq activemq-web\n5.13.4\norg.apache.activemq artemis-amqp-protocol\n1.5.0\norg.apache.activemq artemis-commons\n1.5.0\norg.apache.activemq artemis-core-client\n1.5.0\norg.apache.activemq artemis-jms-client\n1.5.0\norg.apache.activemq artemis-jms-server\n1.5.0\norg.apache.activemq artemis-journal\n1.5.0\norg.apache.activemq artemis-native\n1.5.0\norg.apache.activemq artemis-selector\n1.5.0\norg.apache.activemq artemis-server\n1.5.0\norg.apache.activemq artemis-service-extensions\n1.5.0\norg.apache.commons commons-dbcp2\n2.1.1\norg.apache.commons commons-pool2\n2.4.2\norg.apache.derby derby\n10.12.1.1\norg.apache.httpcomponents httpasyncclient\n4.1.2\norg.apache.httpcomponents httpclient\n4.5.2\norg.apache.httpcomponents httpcore\n4.4.5\norg.apache.httpcomponents httpmime\n4.5.2\norg.apache.logging.log4j log4j-1.2-api\n2.7\norg.apache.logging.log4j log4j-api\n2.7\norg.apache.logging.log4j log4j-api-scala_2.10\n2.7\norg.apache.logging.log4j log4j-api-scala_2.11\n2.7\norg.apache.logging.log4j log4j-core\n2.7\norg.apache.logging.log4j log4j-flume-ng\n2.7\norg.apache.logging.log4j log4j-iostreams\n2.7\norg.apache.logging.log4j log4j-jcl\n2.7\norg.apache.logging.log4j log4j-jmx-gui\n2.7\norg.apache.logging.log4j log4j-jul\n2.7\norg.apache.logging.log4j log4j-liquibase\n2.7\n378\nGroup ID Artifact ID Version\norg.apache.logging.log4j log4j-nosql\n2.7\norg.apache.logging.log4j log4j-slf4j-impl\n2.7\norg.apache.logging.log4j log4j-taglib\n2.7\norg.apache.logging.log4j log4j-web\n2.7\norg.apache.solr solr-solrj\n5.5.3\norg.apache.tomcat tomcat-jdbc\n8.5.6\norg.apache.tomcat tomcat-jsp-api\n8.5.6\norg.apache.tomcat.embed tomcat-embed-core\n8.5.6\norg.apache.tomcat.embed tomcat-embed-el\n8.5.6\norg.apache.tomcat.embed tomcat-embed-jasper\n8.5.6\norg.apache.tomcat.embed tomcat-embed-websocket\n8.5.6\norg.aspectj aspectjrt\n1.8.9\norg.aspectj aspectjtools\n1.8.9\norg.aspectj aspectjweaver\n1.8.9\norg.assertj assertj-core\n2.5.0\norg.codehaus.btm btm\n2.1.4\norg.codehaus.groovy groovy\n2.4.7\norg.codehaus.groovy groovy-all\n2.4.7\norg.codehaus.groovy groovy-ant\n2.4.7\norg.codehaus.groovy groovy-bsf\n2.4.7\norg.codehaus.groovy groovy-console\n2.4.7\norg.codehaus.groovy groovy-docgenerator\n2.4.7\norg.codehaus.groovy groovy-groovydoc\n2.4.7\norg.codehaus.groovy groovy-groovysh\n2.4.7\norg.codehaus.groovy groovy-jmx\n2.4.7\norg.codehaus.groovy groovy-json\n2.4.7\norg.codehaus.groovy groovy-jsr223\n2.4.7\norg.codehaus.groovy groovy-nio\n2.4.7\norg.codehaus.groovy groovy-servlet\n2.4.7\norg.codehaus.groovy groovy-sql\n2.4.7\norg.codehaus.groovy groovy-swing\n2.4.7\n379\nGroup ID Artifact ID Version\norg.codehaus.groovy groovy-templates\n2.4.7\norg.codehaus.groovy groovy-test\n2.4.7\norg.codehaus.groovy groovy-testng\n2.4.7\norg.codehaus.groovy groovy-xml\n2.4.7\norg.codehaus.janino janino\n2.7.8\norg.eclipse.jetty apache-jsp\n9.3.14.v20161028\norg.eclipse.jetty apache-jstl\n9.3.14.v20161028\norg.eclipse.jetty jetty-annotations\n9.3.14.v20161028\norg.eclipse.jetty jetty-client\n9.3.14.v20161028\norg.eclipse.jetty jetty-continuation\n9.3.14.v20161028\norg.eclipse.jetty jetty-deploy\n9.3.14.v20161028\norg.eclipse.jetty jetty-http\n9.3.14.v20161028\norg.eclipse.jetty jetty-io\n9.3.14.v20161028\norg.eclipse.jetty jetty-jmx\n9.3.14.v20161028\norg.eclipse.jetty jetty-plus\n9.3.14.v20161028\norg.eclipse.jetty jetty-proxy\n9.3.14.v20161028\norg.eclipse.jetty jetty-security\n9.3.14.v20161028\norg.eclipse.jetty jetty-server\n9.3.14.v20161028\norg.eclipse.jetty jetty-servlet\n9.3.14.v20161028\norg.eclipse.jetty jetty-servlets\n9.3.14.v20161028\norg.eclipse.jetty jetty-util\n9.3.14.v20161028\norg.eclipse.jetty jetty-webapp\n9.3.14.v20161028\norg.eclipse.jetty jetty-xml\n9.3.14.v20161028\norg.eclipse.jetty.orbit javax.servlet.jsp\n2.2.0.v201112011158\norg.eclipse.jetty.websocket javax-websocket-server-impl\n9.3.14.v20161028\norg.eclipse.jetty.websocket websocket-client\n9.3.14.v20161028\norg.eclipse.jetty.websocket websocket-server\n9.3.14.v20161028\norg.ehcache ehcache\n3.1.3\norg.ehcache ehcache-clustered\n3.1.3\norg.ehcache ehcache-transactions\n3.1.3\norg.elasticsearch elasticsearch\n2.4.1\n380\nGroup ID Artifact ID Version\norg.firebirdsql.jdbc jaybird-jdk16\n2.2.11\norg.firebirdsql.jdbc jaybird-jdk17\n2.2.11\norg.firebirdsql.jdbc jaybird-jdk18\n2.2.11\norg.flywaydb flyway-core\n3.2.1\norg.freemarker freemarker\n2.3.25-incubating\norg.glassfish javax.el\n3.0.0\norg.glassfish.jersey.container jersey-container-servlet\n2.24\ns\norg.glassfish.jersey.container jersey-container-servlet-core\n2.24\ns\norg.glassfish.jersey.core jersey-server\n2.24\norg.glassfish.jersey.ext jersey-bean-validation\n2.24\norg.glassfish.jersey.ext jersey-spring3\n2.24\norg.glassfish.jersey.media jersey-media-json-jackson\n2.24\norg.hamcrest hamcrest-core\n1.3\norg.hamcrest hamcrest-library\n1.3\norg.hibernate hibernate-core\n5.0.11.Final\norg.hibernate hibernate-ehcache\n5.0.11.Final\norg.hibernate hibernate-entitymanager\n5.0.11.Final\norg.hibernate hibernate-envers\n5.0.11.Final\norg.hibernate hibernate-java8\n5.0.11.Final\norg.hibernate hibernate-jpamodelgen\n5.0.11.Final\norg.hibernate hibernate-validator\n5.2.4.Final\norg.hibernate hibernate-validator-\n5.2.4.Final\nannotation-processor\norg.hsqldb hsqldb\n2.3.3\norg.infinispan infinispan-jcache\n8.2.4.Final\norg.infinispan infinispan-spring4-common\n8.2.4.Final\norg.infinispan infinispan-spring4-embedded\n8.2.4.Final\norg.javassist javassist\n3.20.0-GA\norg.jboss jboss-transaction-spi\n7.3.4.Final\norg.jboss.logging jboss-logging\n3.3.0.Final\norg.jboss.narayana.jta jdbc\n5.3.5.Final\n381\nGroup ID Artifact ID Version\norg.jboss.narayana.jta jms\n5.3.5.Final\norg.jboss.narayana.jta jta\n5.3.5.Final\norg.jboss.narayana.jts narayana-jts-integration\n5.3.5.Final\norg.jdom jdom2\n2.0.6\norg.jolokia jolokia-core\n1.3.5\norg.jooq jooq\n3.8.5\norg.jooq jooq-codegen\n3.8.5\norg.jooq jooq-meta\n3.8.5\norg.json json\n20140107\norg.liquibase liquibase-core\n3.5.3\norg.mariadb.jdbc mariadb-java-client\n1.4.6\norg.mockito mockito-core\n1.10.19\norg.mongodb bson\n3.4.0\norg.mongodb mongodb-driver\n3.4.0\norg.mongodb mongodb-driver-async\n3.4.0\norg.mongodb mongodb-driver-core\n3.4.0\norg.mongodb mongo-java-driver\n3.4.0\norg.mortbay.jasper apache-el\n8.0.33\norg.neo4j neo4j-ogm-api\n2.1.0-M01\norg.neo4j neo4j-ogm-compiler\n2.1.0-M01\norg.neo4j neo4j-ogm-core\n2.1.0-M01\norg.neo4j neo4j-ogm-http-driver\n2.1.0-M01\norg.postgresql postgresql\n9.4.1212.jre7\norg.projectlombok lombok\n1.16.10\norg.seleniumhq.selenium htmlunit-driver\n2.23.2\norg.seleniumhq.selenium selenium-api\n2.53.1\norg.seleniumhq.selenium selenium-chrome-driver\n2.53.1\norg.seleniumhq.selenium selenium-firefox-driver\n2.53.1\norg.seleniumhq.selenium selenium-ie-driver\n2.53.1\norg.seleniumhq.selenium selenium-java\n2.53.1\norg.seleniumhq.selenium selenium-remote-driver\n2.53.1\n382\nGroup ID Artifact ID Version\norg.seleniumhq.selenium selenium-safari-driver\n2.53.1\norg.seleniumhq.selenium selenium-support\n2.53.1\norg.skyscreamer jsonassert\n1.3.0\norg.slf4j jcl-over-slf4j\n1.7.21\norg.slf4j jul-to-slf4j\n1.7.21\norg.slf4j log4j-over-slf4j\n1.7.21\norg.slf4j slf4j-api\n1.7.21\norg.slf4j slf4j-jdk14\n1.7.21\norg.slf4j slf4j-log4j12\n1.7.21\norg.slf4j slf4j-simple\n1.7.21\norg.spockframework spock-core\n1.0-groovy-2.4\norg.spockframework spock-spring\n1.0-groovy-2.4\norg.springframework spring-aop\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-aspects\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-beans\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-context\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-context-indexer\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-context-support\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-core\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-expression\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-instrument\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-jdbc\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-jms\n5.0.0.BUILD-SNAPSHOT\norg.springframework springloaded\n1.2.6.RELEASE\norg.springframework spring-messaging\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-orm\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-oxm\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-test\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-tx\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-web\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-webmvc\n5.0.0.BUILD-SNAPSHOT\n383\nGroup ID Artifact ID Version\norg.springframework spring-web-reactive\n5.0.0.BUILD-SNAPSHOT\norg.springframework spring-websocket\n5.0.0.BUILD-SNAPSHOT\norg.springframework.amqp spring-amqp\n2.0.0.BUILD-SNAPSHOT\norg.springframework.amqp spring-rabbit\n2.0.0.BUILD-SNAPSHOT\norg.springframework.batch spring-batch-core\n3.0.7.RELEASE\norg.springframework.batch spring-batch-infrastructure\n3.0.7.RELEASE\norg.springframework.batch spring-batch-integration\n3.0.7.RELEASE\norg.springframework.batch spring-batch-test\n3.0.7.RELEASE\norg.springframework.boot spring-boot\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-actuator\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-actuator-docs\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-autoconfigure\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-configuration-\n2.0.0.BUILD-SNAPSHOT\nmetadata\norg.springframework.boot spring-boot-configuration-\n2.0.0.BUILD-SNAPSHOT\nprocessor\norg.springframework.boot spring-boot-devtools\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-junit-runners\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-loader\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-loader-tools\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-activemq\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-actuator\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-amqp\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-aop\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-artemis\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-batch\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-cache\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-cloud-\n2.0.0.BUILD-SNAPSHOT\nconnectors\norg.springframework.boot spring-boot-starter-data-\n2.0.0.BUILD-SNAPSHOT\ncassandra\norg.springframework.boot spring-boot-starter-data-\n2.0.0.BUILD-SNAPSHOT\ncouchbase\n384\nGroup ID Artifact ID Version\norg.springframework.boot spring-boot-starter-data-\n2.0.0.BUILD-SNAPSHOT\nelasticsearch\norg.springframework.boot spring-boot-starter-data-jpa\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-data-\n2.0.0.BUILD-SNAPSHOT\nmongodb\norg.springframework.boot spring-boot-starter-data-neo4j\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-data-redis\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-data-rest\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-data-solr\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-freemarker\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-groovy-\n2.0.0.BUILD-SNAPSHOT\ntemplates\norg.springframework.boot spring-boot-starter-hateoas\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-\n2.0.0.BUILD-SNAPSHOT\nintegration\norg.springframework.boot spring-boot-starter-jdbc\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-jersey\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-jetty\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-jooq\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-jta-\n2.0.0.BUILD-SNAPSHOT\natomikos\norg.springframework.boot spring-boot-starter-jta-\n2.0.0.BUILD-SNAPSHOT\nbitronix\norg.springframework.boot spring-boot-starter-jta-\n2.0.0.BUILD-SNAPSHOT\nnarayana\norg.springframework.boot spring-boot-starter-log4j2\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-logging\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-mail\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-mobile\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-mustache\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-security\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-social-\n2.0.0.BUILD-SNAPSHOT\nfacebook\norg.springframework.boot spring-boot-starter-social-\n2.0.0.BUILD-SNAPSHOT\nlinkedin\norg.springframework.boot spring-boot-starter-social-\n2.0.0.BUILD-SNAPSHOT\ntwitter\n385\nGroup ID Artifact ID Version\norg.springframework.boot spring-boot-starter-test\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-thymeleaf\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-tomcat\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-undertow\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-validation\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-web\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-starter-web-\n2.0.0.BUILD-SNAPSHOT\nservices\norg.springframework.boot spring-boot-starter-websocket\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-test\n2.0.0.BUILD-SNAPSHOT\norg.springframework.boot spring-boot-test-autoconfigure\n2.0.0.BUILD-SNAPSHOT\norg.springframework.cloud spring-cloud-cloudfoundry-\n1.2.3.RELEASE\nconnector\norg.springframework.cloud spring-cloud-core\n1.2.3.RELEASE\norg.springframework.cloud spring-cloud-heroku-connector\n1.2.3.RELEASE\norg.springframework.cloud spring-cloud-localconfig-\n1.2.3.RELEASE\nconnector\norg.springframework.cloud spring-cloud-spring-service-\n1.2.3.RELEASE\nconnector\norg.springframework.data spring-cql\n1.5.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-cassandra\n1.5.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-commons\n1.13.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-couchbase\n2.2.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-elasticsearch\n2.1.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-envers\n1.1.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-gemfire\n1.9.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-jpa\n1.11.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-keyvalue\n1.2.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-mongodb\n1.10.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-mongodb-cross-\n1.10.0.BUILD-SNAPSHOT\nstore\norg.springframework.data spring-data-mongodb-log4j\n1.10.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-neo4j\n4.2.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-redis\n1.8.0.BUILD-SNAPSHOT\n386\nGroup ID Artifact ID Version\norg.springframework.data spring-data-rest-core\n2.6.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-rest-hal-browser\n2.6.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-rest-webmvc\n2.6.0.BUILD-SNAPSHOT\norg.springframework.data spring-data-solr\n2.1.0.BUILD-SNAPSHOT\norg.springframework.hateoas spring-hateoas\n0.21.0.RELEASE\norg.springframework.integratio spring-integration-amqp\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-core\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-event\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-feed\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-file\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-ftp\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-gemfire\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-groovy\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-http\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-ip\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-jdbc\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-jms\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-jmx\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-jpa\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-mail\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-mongodb\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-mqtt\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-redis\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-rmi\n5.0.0.BUILD-SNAPSHOT\nn\n387\nGroup ID Artifact ID Version\norg.springframework.integratio spring-integration-scripting\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-security\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-sftp\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-stomp\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-stream\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-syslog\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-test\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-twitter\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-websocket\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-ws\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-xml\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-xmpp\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.integratio spring-integration-zookeeper\n5.0.0.BUILD-SNAPSHOT\nn\norg.springframework.kafka spring-kafka\n1.1.1.RELEASE\norg.springframework.kafka spring-kafka-test\n1.1.1.RELEASE\norg.springframework.mobile spring-mobile-device\n1.1.5.RELEASE\norg.springframework.plugin spring-plugin-core\n1.2.0.RELEASE\norg.springframework.restdocs spring-restdocs-core\n1.2.0.BUILD-SNAPSHOT\norg.springframework.restdocs spring-restdocs-mockmvc\n1.2.0.BUILD-SNAPSHOT\norg.springframework.restdocs spring-restdocs-restassured\n1.2.0.BUILD-SNAPSHOT\norg.springframework.retry spring-retry\n1.2.0.RC1\norg.springframework.security spring-security-acl\n4.2.0.RELEASE\norg.springframework.security spring-security-aspects\n4.2.0.RELEASE\norg.springframework.security spring-security-cas\n4.2.0.RELEASE\norg.springframework.security spring-security-config\n4.2.0.RELEASE\norg.springframework.security spring-security-core\n4.2.0.RELEASE\n388\nGroup ID Artifact ID Version\norg.springframework.security spring-security-crypto\n4.2.0.RELEASE\norg.springframework.security spring-security-data\n4.2.0.RELEASE\norg.springframework.security spring-security-jwt\n1.0.5.RELEASE\norg.springframework.security spring-security-ldap\n4.2.0.RELEASE\norg.springframework.security spring-security-messaging\n4.2.0.RELEASE\norg.springframework.security spring-security-openid\n4.2.0.RELEASE\norg.springframework.security spring-security-remoting\n4.2.0.RELEASE\norg.springframework.security spring-security-taglibs\n4.2.0.RELEASE\norg.springframework.security spring-security-test\n4.2.0.RELEASE\norg.springframework.security spring-security-web\n4.2.0.RELEASE\norg.springframework.security.o spring-security-oauth\n2.0.12.RELEASE\nauth\norg.springframework.security.o spring-security-oauth2\n2.0.12.RELEASE\nauth\norg.springframework.session spring-session\n1.3.0.RC1\norg.springframework.session spring-session-data-gemfire\n1.3.0.RC1\norg.springframework.session spring-session-data-mongo\n1.3.0.RC1\norg.springframework.session spring-session-data-redis\n1.3.0.RC1\norg.springframework.session spring-session-hazelcast\n1.3.0.RC1\norg.springframework.session spring-session-jdbc\n1.3.0.RC1\norg.springframework.social spring-social-config\n1.1.4.RELEASE\norg.springframework.social spring-social-core\n1.1.4.RELEASE\norg.springframework.social spring-social-facebook\n2.0.3.RELEASE\norg.springframework.social spring-social-facebook-web\n2.0.3.RELEASE\norg.springframework.social spring-social-linkedin\n1.0.2.RELEASE\norg.springframework.social spring-social-security\n1.1.4.RELEASE\norg.springframework.social spring-social-twitter\n1.1.2.RELEASE\norg.springframework.social spring-social-web\n1.1.4.RELEASE\norg.springframework.ws spring-ws-core\n2.4.0.RELEASE\norg.springframework.ws spring-ws-security\n2.4.0.RELEASE\norg.springframework.ws spring-ws-support\n2.4.0.RELEASE\norg.springframework.ws spring-ws-test\n2.4.0.RELEASE\n389\nGroup ID Artifact ID Version\norg.thymeleaf thymeleaf\n2.1.5.RELEASE\norg.thymeleaf thymeleaf-spring4\n2.1.5.RELEASE\norg.thymeleaf.extras thymeleaf-extras-\n2.1.2.RELEASE\nconditionalcomments\norg.thymeleaf.extras thymeleaf-extras-java8time\n2.1.0.RELEASE\norg.thymeleaf.extras thymeleaf-extras-\n2.1.2.RELEASE\nspringsecurity4\norg.webjars hal-browser\n9f96c74\norg.webjars webjars-locator\n0.32\norg.xerial sqlite-jdbc\n3.8.11.2\norg.yaml snakeyaml\n1.17\nredis.clients jedis\n2.9.0\nwsdl4j wsdl4j\n1.6.3\nxml-apis xml-apis\n1.4.01\n390\n",
  "context": "13.5. Starters. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n14. Structuring your code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n14.1. Using the \u201cdefault\u201d package . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36",
  "source_file": "resources\\Year 2\\Java Springboot\\spring boot documentation.pdf",
  "line_numbers": [
    52,
    13788
  ]
}