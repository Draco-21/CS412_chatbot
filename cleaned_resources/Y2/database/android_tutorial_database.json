{
  "title": "android_tutorial",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "Default Styles & Themes .............................................................................................................................. 122 18.",
  "code": "Instantiate using code inside activity class ................................................................................................... 124\nInstantiate using Layout XML file ................................................................................................................. 124\nCustom Component with Custom Attributes ............................................................................................... 125\nStep 1 .......................................................................................................................................................... 126\nStep 2 .......................................................................................................................................................... 126\nStep 3 .......................................................................................................................................................... 127\n19. ANDROID \u2013 DRAG & DROP ................................................................................................ 129\nThe Drag/Drop Process ................................................................................................................................ 129\nThe DragEvent Class ..................................................................................................................................... 130\nListening for Drag Event ............................................................................................................................... 131\nStarting a Drag Event ................................................................................................................................... 131\n20. ANDROID \u2013 NOTIFICATIONS .............................................................................................. 138\nCreate and Send Notifications ..................................................................................................................... 139\nv\nAndroid\nThe NotificationCompat.Builder Class .......................................................................................................... 140\nBig View Notification ................................................................................................................................... 151\n21. ANDROID \u2013 LOCATION-BASED SERVICES ........................................................................... 154\nThe Location Object ..................................................................................................................................... 154\nGet the Current Location ............................................................................................................................. 156\nGet the Updated Location ............................................................................................................................ 157\nLocation Quality of Service .......................................................................................................................... 157\nDisplaying a Location Address ...................................................................................................................... 158\nInstall the Google Play Services SDK ............................................................................................................ 158\nCreate Android Application ......................................................................................................................... 159\n22. ANDROID \u2013 SENDING EMAIL ............................................................................................. 170\nIntent Object - Action to send Email ............................................................................................................ 170\nIntent Object - Data/Type to send Email ...................................................................................................... 170\nIntent Object - Extra to send Email .............................................................................................................. 170\n23. ANDROID \u2013 SENDING SMS ................................................................................................. 178\nUsing SmsManager to send SMS .................................................................................................................. 178\nUsing Built-in Intent to send SMS ................................................................................................................ 185\nIntent Object - Action to send SMS .............................................................................................................. 185\nIntent Object - Data/Type to send SMS ........................................................................................................ 185\nIntent Object - Extra to send SMS ................................................................................................................ 185\n24. ANDROID \u2013 PHONE CALLS ................................................................................................. 192\nIntent Object - Action to make Phone Call ................................................................................................... 192\nIntent Object - Data/Type to make Phone Call ............................................................................................. 192\n25. ANDROID \u2013 PUBLISHING ANDROID APPLICATION .............................................................. 199\nExport Android Application.......................................................................................................................... 200\nvi\nAndroid\nGoogle Play Registration .............................................................................................................................. 204\n26. ANDROID \u2013 ALERT DIALOG TUTORIAL ............................................................................... 206\n27. ANDROID \u2013 ANIMATIONS .................................................................................................. 220\nTween Animation ........................................................................................................................................ 220\nZoom in animation....................................................................................................................................... 221\n28. ANDROID \u2013 AUDIO CAPTURE ............................................................................................. 235\n29. ANDROID \u2013 AUDIO MANAGER ........................................................................................... 248\n30. ANDROID \u2013 AUTOCOMPLETE ............................................................................................ 261\n31. ANDROID \u2013 BEST PRACTICES ............................................................................................. 271\nBest Practices - User input ........................................................................................................................... 271\nBest Practices - Performance ....................................................................................................................... 272\nBest Practices - Security and privacy ............................................................................................................ 272\n32. ANDROID \u2013 BLUETOOTH ................................................................................................... 283\n33. ANDROID \u2013 CAMERA ......................................................................................................... 297\nUsing existing android camera application in our application ...................................................................... 297\nDirectly using Camera API Provided by Android in our Application .............................................................. 306\n34. ANDROID \u2013 CLIPBOARD ..................................................................................................... 317\nCopying data ................................................................................................................................................ 317\nPasting data ................................................................................................................................................. 318\n35. ANDROID \u2013 CUSTOM FONTS ............................................................................................. 328\n36. ANDROID \u2013 DATA BACKUP ................................................................................................ 333\nTest your BackupAgent ................................................................................................................................ 337\n37. ANDROID \u2013 DEVELOPER TOOLS ......................................................................................... 339\nvii\nAndroid\nSDK tools ..................................................................................................................................................... 339\nAndroid........................................................................................................................................................ 340\nDDMS .......................................................................................................................................................... 340\nCapturing ScreenShot .................................................................................................................................. 344\nSqlite3 ......................................................................................................................................................... 344\nPlatform tools .............................................................................................................................................. 345\n38. ANDROID \u2013 EMULATOR ..................................................................................................... 346\nCreating AVD ............................................................................................................................................... 346\nCreating Snapshots ...................................................................................................................................... 346\nChanging Orientation ................................................................................................................................... 346\nEmulator Commands. .................................................................................................................................. 347\nEmulator - Sending SMS ............................................................................................................................... 348\nEmulator - Making Call ................................................................................................................................. 350\nEmulator - Transferring files ........................................................................................................................ 351\n39. ANDROID \u2013 FACEBOOK INTEGRATION ............................................................................... 352\nIntegrating Facebook SDK ............................................................................................................................ 352\nIntent share ................................................................................................................................................. 354\n40. ANDROID \u2013 GESTURES....................................................................................................... 364\nHandling Pinch Gesture ............................................................................................................................... 364\n41. ANDROID \u2013 GOOGLE MAPS ............................................................................................... 374\nAdding Google Map ..................................................................................................................................... 374\nCustomizing Google Map ............................................................................................................................. 375\nIntegrating Google Maps ............................................................................................................................. 377\nDownload and configure. Google Play Services SDK .................................................................................... 377\nObtaining the API key .................................................................................................................................. 378\nSpecify Android Manifest Settings ............................................................................................................... 380\nviii\nAndroid\nAdding Google Maps to your application. .................................................................................................... 380\n42. ANDROID \u2013 IMAGE EFFECTS .............................................................................................. 386\n43. ANDROID \u2013 IMAGE SWITCHER .......................................................................................... 399\n44. ANDROID \u2013 INTERNAL STORAGE ....................................................................................... 409\nWriting file ................................................................................................................................................... 409\nReading file .................................................................................................................................................. 409\n45. ANDROID \u2013 JETPLAYER ...................................................................................................... 420\nUsing JetCreator .......................................................................................................................................... 421\nVerifying Results .......................................................................................................................................... 424\n46. ANDROID \u2013 JSON PARSER .................................................................................................. 426\nJSON - Elements ........................................................................................................................................... 426\nJSON - Parsing .............................................................................................................................................. 427\n47. ANDROID \u2013 LINKEDIN INTEGRATION ................................................................................. 440\nIntegrating LinkedIn SDK .............................................................................................................................. 440\nIntent share ................................................................................................................................................. 441\n48. ANDROID \u2013 LOADING SPINNER ......................................................................................... 451\n49. ANDROID \u2013 LOCALIZATION ................................................................................................ 458\nLocalizing Strings ......................................................................................................................................... 458\n50. ANDROID \u2013 LOGIN SCREEN................................................................................................ 466\n51. ANDROID \u2013 MEDIA PLAYER ............................................................................................... 478\n52. ANDROID \u2013 MULTITOUCH ................................................................................................. 493\n53. ANDROID \u2013 NAVIGATION .................................................................................................. 506\nProviding Up Navigation .............................................................................................................................. 506\nix\nAndroid\nHandling device back button ....................................................................................................................... 506\n54. ANDROID \u2013NETWORK CONNECTION ................................................................................. 518\nChecking Network Connection ..................................................................................................................... 518\nPerforming Network Operations .................................................................................................................. 519\n55. ANDROID \u2013 NFC GUIDE ..................................................................................................... 531\nHow It Works: .............................................................................................................................................. 531\nHow it works with Android: ......................................................................................................................... 531\nFuture Applications...................................................................................................................................... 533\n56. ANDROID \u2013 PHP/MYSQL .................................................................................................... 534\nPHP - MYSQL ................................................................................................................................................ 534\nAndroid - Connecting MYSQL ....................................................................................................................... 536\n57. ANDROID \u2013 PROGRESS CIRCLE .......................................................................................... 553\n58. ANDROID \u2013 PROGRESS BAR USING PROGRESS DIALOG ..................................................... 562\n59. ANDROID \u2013 PUSH NOTIFICATION ...................................................................................... 572\n60. ANDROID \u2013 RENDERSCRIPT ............................................................................................... 584\nHow RenderScript Works: ............................................................................................................................ 584\nHow to Begin: .............................................................................................................................................. 584\n61. ANDROID \u2013 RSS READER .................................................................................................... 587\nRSS Example ................................................................................................................................................ 587\nRSS Elements ............................................................................................................................................... 587\nParsing RSS .................................................................................................................................................. 588\n62. ANDROID \u2013 SCREEN CAST .................................................................................................. 600\nScreen Cast Steps ......................................................................................................................................... 600\n63. ANDROID \u2013 SDK MANAGER ............................................................................................... 604\nx\nAndroid\nRunning Android SDK Manager:................................................................................................................... 604\nRecommended............................................................................................................................................. 605\nEnabling Proxy in Android SDK Manager...................................................................................................... 605\nAdding New Third Party Sites ...................................................................................................................... 606\n64. ANDROID \u2013 SENSORS ........................................................................................................ 608\nGetting list of sensors supported. ................................................................................................................ 608\n65. ANDROID \u2013 SESSION MANAGEMENT ................................................................................ 615\nShared Preferences ...................................................................................................................................... 615\nSession Management through Shared Preferences ...................................................................................... 616\n66. ANDROID \u2013 SIP PROTOCOL ................................................................................................ 631\nApplications ................................................................................................................................................. 631\nRequirements .............................................................................................................................................. 631\nSIP Classes ................................................................................................................................................... 631\nFunctions of SIP ........................................................................................................................................... 632\nComponents of SIP ...................................................................................................................................... 632\nUAC ............................................................................................................................................................. 632\nUAS .............................................................................................................................................................. 632\nSipManager ................................................................................................................................................. 632\n67. ANDROID \u2013 SPELLING CHECKER......................................................................................... 634\n68. ANDROID \u2013 SQLITE DATABASE .......................................................................................... 644\nDatabase - Package ...................................................................................................................................... 644\nDatabase - Creation ..................................................................................................................................... 644\nDatabase - Insertion .................................................................................................................................... 645\nDatabase - Fetching ..................................................................................................................................... 645\nDatabase - Helper class ................................................................................................................................ 646\nxi\nAndroid\n69. ANDROID \u2013 SUPPORT LIBRARY .......................................................................................... 673\nSupport Library Features ............................................................................................................................. 673\nDownloading the Support Libraries ............................................................................................................. 674\n70. ANDROID \u2013 TESTING ......................................................................................................... 676\nTest Structure .............................................................................................................................................. 676\nTesting Tools in Android .............................................................................................................................. 676\nJUnit ............................................................................................................................................................ 677\nMonkey ....................................................................................................................................................... 678\n71. ANDROID \u2013 TEXT TO SPEECH ............................................................................................. 687\n72. ANDROID \u2013 TEXTURE VIEW ............................................................................................... 698\n73. ANDROID \u2013 TWITTER INTEGRATION .................................................................................. 708\nIntegrating Twitter SDK ............................................................................................................................... 708\nIntent share ................................................................................................................................................. 710\n74. ANDROID \u2013 UI DESIGN ...................................................................................................... 720\nUI screen components ................................................................................................................................. 720\nUnderstanding Screen Components ............................................................................................................. 721\nUnits of Measurement ................................................................................................................................. 724\nScreen Densities .......................................................................................................................................... 724\nOptimizing layouts ....................................................................................................................................... 725\n75. ANDROID \u2013 UI PATTERNS .................................................................................................. 726\nUI Patterns components .............................................................................................................................. 726\nAction Bar .................................................................................................................................................... 726\nConfirming and Acknowledging ................................................................................................................... 727\nSettings ........................................................................................................................................................ 728\nHelp ............................................................................................................................................................. 728\nxii\nAndroid\nSelection ...................................................................................................................................................... 728\n76. ANDROID \u2013 UI TESTING ..................................................................................................... 730\nuiautomatorviewer ...................................................................................................................................... 730\nuiautomator ................................................................................................................................................ 734\n77. ANDROID \u2013 WEBVIEW ....................................................................................................... 742\n78. ANDROID \u2013 WI-FI .............................................................................................................. 751\n79. ANDROID \u2013 WIDGETS ........................................................................................................ 759\nWidget - XML file ......................................................................................................................................... 759\nWidget - Layout file ..................................................................................................................................... 759\nWidget - Java file ......................................................................................................................................... 759\nWidget - Manifest file .................................................................................................................................. 760\n80. ANDROID \u2013 XML PARSER ................................................................................................... 768\nXML - Elements ............................................................................................................................................ 768\nXML - Parsing ............................................................................................................................................... 769\nxiii\n1. ANDROID \u2013 Overview Android\nWhat is Android?\nAndroid is an open source and Linux-based Operating System for mobile devices such as\nsmartphones and tablet computers. Android was developed by the Open Handset Alliance, led\nby Google, and other companies.\nAndroid offers a unified approach to application development for mobile devices which means\ndevelopers need to develop only for Android, and their applications should be able to run on\ndifferent devices powered by Android.\nThe first beta version of the Android Software Development Kit (SDK) was released by Google\nin 2007, whereas the first commercial version, Android 1.0, was released in September 2008.\nOn June 27, 2012, at the Google I/O conference, Google announced the next Android version,\n4.1 Jelly Bean. Jelly Bean is an incremental update, with the primary aim of improving the\nuser interface, both in terms of functionality and performance.\nThe source code for Android is available under free and open source software licenses. Google\npublishes most of the code under the Apache License version 2.0 and the rest, Linux kernel\nchanges, under the GNU General Public License version 2.\nFeatures of Android\nAndroid is a powerful operating system competing with Apple 4GS and support great features.\nFew of them are listed below:\nFeature Description\nBeautiful UI Android OS basic screen provides a beautiful and intuitive user\ninterface.\nConnectivity GSM/EDGE, IDEN, CDMA, EV-DO, UMTS, Bluetooth, Wi-Fi, LTE, NFC\nand WiMAX.\nStorage SQLite, a lightweight relational database, is used for data storage\npurposes.\n14\nAndroid\nMedia support H.263, H.264, MPEG-4 SP, AMR, AMR-WB, AAC, HE-AAC, AAC 5.1,\nMP3, MIDI, Ogg Vorbis, WAV, JPEG, PNG, GIF, and BMP\nMessaging SMS and MMS\nWeb browser Based on the open-source WebKit layout engine, coupled with\nChrome's V8 JavaScript engine supporting HTML5 and CSS3.\nMulti-touch Android has native support for multi-touch which was initially made\navailable in handsets such as the HTC Hero.\nMulti-tasking User can jump from one task to another and same time various\napplication can run simultaneously.\nResizable widgets Widgets are resizable, so users can expand them to show more\ncontent or shrink them to save space\nMulti-Language Support single direction and bi-directional text.\nGCM Google Cloud Messaging (GCM) is a service that let developers send\nshort message data to their users on Android devices, without\nneeding a proprietary sync solution.\nWi-Fi Direct A technology that let apps discover and pair directly, over a high-\nbandwidth peer-to-peer connection.\nAndroid Beam A popular NFC-based technology that let users instantly share, just\nby touching two NFC-enabled phones together.\nAndroid Applications\nAndroid applications are usually developed in the Java language using the Android Software\nDevelopment Kit.\nOnce developed, Android applications can be packaged easily and sold out either through a\nstore such as Google Play or the Amazon Appstore.\n15\nAndroid\nAndroid powers hundreds of millions of mobile devices in more than 190 countries around the\nworld. It's the largest installed base of any mobile platform and is growing fast. Every day\nmore than 1 million new Android devices are activated worldwide.\nThis tutorial has been written with an aim to teach you how to develop and package Android\napplication. We will start from environment setup for Android application programming and\nthen drill down to look into various aspects of Android applications.\n16\n2. ANDROID \u2013 En vironment Setup Android\nYou will be glad to know that you can start your Android application development on either of\nthe following operating systems:\n\uf0b7 Microsoft Windows XP or later version.\n\uf0b7 Mac OS X 10.5.8 or later version with Intel chip.\n\uf0b7 Linux including GNU C Library 2.7 or later.\nSecond point is that all the required tools to develop Android applications are freely available\nand can be downloaded from the Web. Following is the list of software's you will need before\nyou start your Android application programming.\n\uf0b7 Java JDK5 or JDK6\n\uf0b7 Android SDK\n\uf0b7 Eclipse IDE for Java Developers (optional)\n\uf0b7 Android Development Tools (ADT) Eclipse Plugin (optional)\nHere last two components are optional and if you are working on Windows machine then these\ncomponents make your life easy while doing Java based application development. So let us\nhave a look at how to proceed to set the required environment.\nStep 1 - Setup Java Development Kit (JDK)\nYou can download the latest version of Java JDK from Oracle's Java site: Java SE Downloads.\nYou will find instructions for installing JDK in downloaded files, follow the given instructions\nto install and configure the setup. Finally, set PATH and JAVA_HOME environment variables\nto refer to the directory that contains java and javac, typically java_install_dir/bin and\njava_install_dir respectively.\nIf you are running Windows and have installed the JDK in C:\\jdk1.6.0_15, you would have to\nput the following line in your C:\\autoexec.bat file.\nset PATH=C:\\jdk1.6.0_15\\bin;%PATH%\nset JAVA_HOME=C:\\jdk1.6.0_15\nAlternatively, you could also right-click on My Computer, select Properties, then Advanced,\nthen Environment Variables. Then, you would update the PATH value and press the OK button.\n17\nAndroid\nOn Linux, if the SDK is installed in /usr/local/jdk1.6.0_15 and you use the C shell, you would\nput the following code into your .cshrc file.\nsetenv PATH /usr/local/jdk1.6.0_15/bin:$PATH\nsetenv JAVA_HOME /usr/local/jdk1.6.0_15\nAlternatively, if you use an Integrated Development Environment (IDE) Eclipse, then it will\nknow automatically where you have installed your Java.\nStep 2 - Setup Android SDK\nYou can download the latest version of Android SDK from Android\u2019s official\nwebsite: http://developer.android.com/sdk/index.html. If you are installing SDK on Windows\nmachine, then you will find ainstaller_rXX-windows.exe, so just download and run this exe\nwhich will launch Android SDK Tool Setup wizard to guide you throughout the installation, so\njust follow the instructions carefully. Finally, you will have Android SDK Tools installed on your\nmachine.\nIf you are installing SDK either on Mac OS or Linux, check the instructions provided along\nwith the downloaded android-sdk_rXX-macosx.zip file for Mac OS and android-sdk_rXX-\nlinux.tgz file for Linux. This tutorial will consider that you are going to setup your environment\non Windows machine having Windows 7 operating system.\nSo let's launch Android SDK Manager using the option All Programs > Android SDK Tools\n> SDK Manager, this will give you following window:\n18\nAndroid\nOnce you launched SDK manager, it is time to install other required packages. By default it\nwill list down total 7 packages to be installed, but we will suggest to de-select Documentation\nfor Android SDK and Samples for SDK packages to reduce installation time. Next click the\nInstall 7 Packages button to proceed, which will display following dialogue box:\n19\nAndroid\nIf you agree to install all the packages, select Accept All radio button and proceed by\nclicking Install button. Now let SDK manager do its work and you go, pick up a cup of coffee\nand wait until all the packages are installed. It may take some time depending on your internet\nconnection. Once all the packages are installed, you can close SDK manager using top-right\ncross button.\nStep 3 - Setup Eclipse IDE\nAll the examples in this tutorial have been written using Eclipse IDE. So we would suggest\nyou should have latest version of Eclipse installed on your machine.\nTo install Eclipse IDE, download the latest Eclipse binaries from\nhttp://www.eclipse.org/downloads/. Once you have downloaded the installation, unpack the\nbinary distribution into a convenient location. For example in C:\\eclipse on windows, or\n/usr/local/eclipse on Linux and finally set PATH variable appropriately.\nEclipse can be started by executing the following commands on windows machine, or you can\nsimply double click on eclipse.exe\n%C:\\eclipse\\eclipse.exe\nEclipse can be started by executing the following command on Linux machine:\n$/usr/local/eclipse/eclipse\nAfter a successful startup, if everything is fine then it should display the following result:\n20\nAndroid\nStep 4 - Setup Android Development Tools (ADT) Plugin\nThis step will help you in setting Android Development Tool plugin for Eclipse. Let's start with\nlaunching Eclipse and then, choose Help > Software Updates > Install New Software.\nThis will display the following dialogue box.\n21\nAndroid\nNow use Add button to add ADT Plugin as name and https://dl-\nssl.google.com/android/eclipse/ as the location. Then click OK to add this location. As soon\nas you will click OK button to add this location, Eclipse starts searching for the plug-in available\nin the given location and finally lists down the found plugins.\n22\nAndroid\nNow select all the listed plug-ins using Select All button and click Next button which will\nguide you ahead to install Android Development Tools and other required plugins.\nStep 5 - Create Android Virtual Device\nTo test your Android applications you will need a virtual Android device. So before we start\nwriting our code, let us create an Android virtual device. Launch Android AVD Manager using\nEclipse menu options Window > AVD Manager> which will launch Android AVD Manager.\nUse New button to create a new Android Virtual Device and enter the following information,\nbefore clicking Create AVD button.\n23\nAndroid\nIf your AVD is created successfully it means your environment is ready for Android application\ndevelopment. If you like, you can close this window using top-right cross button. Better you\nre-start your machine and once you are done with this last step, you are ready to proceed for\nyour first Android example but before that we will see few more important concepts related\nto Android Application Development.\n24\n3. ANDROID \u2013 Architecture Android\nAndroid operating system is a stack of software components which is roughly divided into five\nsections and four main layers as shown below in the architecture diagram.\nLinux kernel\nAt the bottom of the layers is Linux - Linux 2.6 with approximately 115 patches. This provides\nbasic system functionality like process management, memory management, device\nmanagement like camera, keypad, display etc. Also, the kernel handles all the things that\nLinux is really good at, such as networking and a vast array of device drivers, which take the\npain out of interfacing to peripheral hardware.\nLibraries\nOn top of Linux kernel there is a set of libraries including open-source Web browser engine\nWebKit, well known library libc, SQLite database which is a useful repository for storage and\n25\nAndroid\nsharing of application data, libraries to play and record audio and video, SSL libraries\nresponsible for Internet security etc.\nAndroid Runtime\nThis is the third section of the architecture and available on the second layer from the bottom.\nThis section provides a key component called Dalvik Virtual Machine which is a kind of Java\nVirtual Machine specially designed and optimized for Android.\nThe Dalvik VM makes use of Linux core features like memory management and multi-\nthreading, which is intrinsic in the Java language. The Dalvik VM enables every Android\napplication to run in its own process, with its own instance of the Dalvik virtual machine.\nThe Android runtime also provides a set of core libraries which enable Android application\ndevelopers to write Android applications using standard Java programming language.\nApplication Framework\nThe Application Framework layer provides many higher-level services to applications in the\nform of Java classes. Application developers are allowed to make use of these services in their\napplications.\nApplications\nYou will find all the Android application at the top layer. You will write your application to be\ninstalled on this layer only. Examples of such applications are Contacts Books, Browser,\nGames, etc.\n26\n4. ANDROID \u2013 Applic ations ComponentAn droid\nApplication components are the essential building blocks of an Android application. These\ncomponents are loosely coupled by the application manifest file AndroidManifest.xml that\ndescribes each component of the application and how they interact.\nThere are following four main components that can be used within an Android application:\nComponents Description\nActivities They dictate the UI and handle the user interaction to the\nsmartphone screen\nServices They handle background processing associated with an\napplication.\nBroadcast Receivers They handle communication between Android OS and\napplications.\nContent Providers They handle data and database management issues.\nActivities\nAn activity represents a single screen with a user interface. For example, an email application\nmight have one activity that shows a list of new emails, another activity to compose an email,\nand one for reading emails. If an application has more than one activity, then one of them\nshould be marked as the activity that is presented when the application is launched.\nAn activity is implemented as a subclass of Activity class as follows:\npublic class MainActivity extends Activity\n{\n}\n27\nAndroid\nServices\nA service is a component that runs in the background to perform long-running operations. For\nexample, a service might play music in the background while the user is in a different\napplication, or it might fetch data over the network without blocking user interaction with an\nactivity.\nA service is implemented as a subclass of Service class as follows:\npublic class MyService extends Service\n{\n}\nBroadcast Receivers\nBroadcast Receivers simply respond to broadcast messages from other applications or from\nthe system. For example, applications can also initiate broadcasts to let other applications\nknow that some data has been downloaded to the device and is available for them to use, so\nthis is broadcast receiver who will intercept this communication and will initiate appropriate\naction.\nA broadcast receiver is implemented as a subclass of BroadcastReceiver class and each\nmessage is broadcasted as an Intent object.\npublic class MyReceiver extends BroadcastReceiver\n{\n}\nContent Providers\nA content provider component supplies data from one application to others on request. Such\nrequests are handled by the methods of the ContentResolver class. The data may be stored\nin the file system, the database or somewhere else entirely.\nA content provider is implemented as a subclass of ContentProvider class and must\nimplement a standard set of APIs that enable other applications to perform transactions.\npublic class MyContentProvider extends ContentProvider\n{\n28\nAndroid\n}\nWe will go through these tags in detail while covering application components in individual\nchapters.\nAdditional Components\nThere are additional components which will be used in the construction of above mentioned\nentities, their logic, and wiring between them. These components are:\nComponents Description\nFragments Represent a behavior or a portion of user interface in an Activity.\nViews UI elements that are drawn onscreen including buttons, lists\nforms etc.\nLayouts View hierarchies that control screen format and appearance of the\nviews.\nIntents Messages wiring components together.\nResources External elements, such as strings, constants and drawable\npictures.\nManifest Configuration file for the application.\n29\n5. ANDROID \u2013 Hel lo World Example Android\nLet us start actual programming with Android Framework. Before you start writing your first\nexample using Android SDK, you have to make sure that you have setup your Android\ndevelopment environment properly as explained in Android - Environment Setup tutorial. We\nalso assume, that you have a little bit working knowledge with Eclipse IDE.\nSo let us proceed to write a simple Android Application which will print \"Hello World!\".\nCreate Android Application\nThe first step is to create a simple Android Application using Eclipse IDE. Follow the option\nFile -> New -> Project and finally select Android New Application wizard from the wizard\nlist. Now name your application as HelloWorld using the wizard window as follows:\n30\nAndroid\nNext, follow the instructions provided and keep all other entries as default till the final step.\nOnce your project is created successfully, you will have the following project screen:\nAnatomy of Android Application\nBefore you run your app, you should be aware of a few directories and files in the Android\nproject:\n31\nAndroid\nS.N. Folder, File & Description\n1 src\n32\nAndroid\nThis contains the .java source files for your project. By default, it includes\nanMainActivity.java source file having an activity class that runs when your app\nis launched using the app icon.\n2 gen\nThis contains the .R file, a compiler-generated file that references all the\nresources found in your project. You should not modify this file.\n3 bin\nThis folder contains the Android package files .apk built by the ADT during the\nbuild process and everything else needed to run an Android application.\n4 res/drawable-hdpi\nThis is a directory for drawable objects that are designed for high-density screens.\n5 res/layout\nThis is a directory for files that define your app's user interface.\n6 res/values\nThis is a directory for other various XML files that contain a collection of resources,\nsuch as strings and colors definitions.\n7 AndroidManifest.xml\nThis is the manifest file which describes the fundamental characteristics of the\napp and defines each of its components.\nFollowing section will give a brief overview few of the important application files.\nThe Main Activity File\nThe main activity code is a Java file MainActivity.java. This is the actual application file\nwhich ultimately gets converted to a Dalvik executable and runs your application. Following\nis the default code generated by the application wizard for Hello World! application:\npackage com.example.helloworld;\n33\nAndroid\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.support.v4.app.NavUtils;\npublic class MainActivity extends Activity {\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\n}\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\ngetMenuInflater().inflate(R.menu.activity_main, menu);\nreturn true;\n}\n}\nHere, R.layout.activity_main refers to the activity_main.xml file located in the res/layout\nfolder. The onCreate() method is one of many methods that are fired when an activity is\nloaded.\nThe Manifest File\nWhatever component you develop as a part of your application, you must declare all its\ncomponents in a manifest file called AndroidManifest.xml which resides at the root of the\napplication project directory. This file works as an interface between Android OS and your\napplication, so if you do not declare your component in this file, then it will not be considered\nby the OS. For example, a default manifest file will look like as following file:\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.helloworld\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\" >\n34\nAndroid\n<uses-sdk\nandroid:minSdkVersion=\"8\"\nandroid:targetSdkVersion=\"15\" />\n<application\nandroid:icon=\"@drawable/ic_launcher\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\" >\n<activity\nandroid:name=\".MainActivity\"\nandroid:label=\"@string/title_activity_main\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category\nandroid:name=\"android.intent.category.LAUNCHER\"/>\n</intent-filter>\n</activity>\n</application>\n</manifest>\nHere <application>...</application> tags enclosed the components related to the application.\nAttribute android:icon will point to the application icon available underres/drawable-hdpi. The\napplication uses the image named ic_launcher.png located in the drawable folders.\nThe <activity> tag is used to specify an activity and android:name attribute specifies the fully\nqualified class name of the Activity subclass and the android:label attributes specifies a string\nto use as the label for the activity. You can specify multiple activities using <activity> tags.\nThe action for the intent filter is named android.intent.action.MAIN to indicate that this\nactivity serves as the entry point for the application. The category for the intent-filter is\nnamed android.intent.category.LAUNCHER to indicate that the application can be launched\nfrom the device's launcher icon.\nThe @string refers to the strings.xml file explained below. Hence, @string/app_name refers to\nthe app_name string defined in the strings.xml file, which is \"HelloWorld\". Similar way, other\nstrings get populated in the application.\nFollowing is the list of tags which you will use in your manifest file to specify different Android\napplication components:\n35\nAndroid\n\uf0b7 <activity>elements for activities\n\uf0b7 <service> elements for services\n\uf0b7 <receiver> elements for broadcast receivers\n\uf0b7 <provider> elements for content providers\nThe Strings File\nThe strings.xml file is located in the res/values folder and it contains all the text that your\napplication uses. For example, the names of buttons, labels, default text, and similar types of\nstrings go into this file. This file is responsible for their textual content. For example, a default\nstring file will look like as following file:\n<resources>\n<string name=\"app_name\">HelloWorld</string>\n<string name=\"hello_world\">Hello world!</string>\n<string name=\"menu_settings\">Settings</string>\n<string name=\"title_activity_main\">MainActivity</string>\n</resources>\nThe R File\nThe gen/com.example.helloworld/R.java file is the glue between the activity Java files\nlikeMainActivity.java and the resources like strings.xml. It is an automatically generated file\nand you should not modify the content of the R.java file. Following is a sample of R.java file:\n/* AUTO-GENERATED FILE. DO NOT MODIFY.\n*\n* This class was automatically generated by the\n* aapt tool from the resource data it found. It\n* should not be modified by hand.\n*/\npackage com.example.helloworld;\npublic final class R {\n36\nAndroid\npublic static final class attr {\n}\npublic static final class dimen {\npublic static final int padding_large=0x7f040002;\npublic static final int padding_medium=0x7f040001;\npublic static final int padding_small=0x7f040000;\n}\npublic static final class drawable {\npublic static final int ic_action_search=0x7f020000;\npublic static final int ic_launcher=0x7f020001;\n}\npublic static final class id {\npublic static final int menu_settings=0x7f080000;\n}\npublic static final class layout {\npublic static final int activity_main=0x7f030000;\n}\npublic static final class menu {\npublic static final int activity_main=0x7f070000;\n}\npublic static final class string {\npublic static final int app_name=0x7f050000;\npublic static final int hello_world=0x7f050001;\npublic static final int menu_settings=0x7f050002;\npublic static final int title_activity_main=0x7f050003;\n}\npublic static final class style {\npublic static final int AppTheme=0x7f060000;\n}\n}\n37\nAndroid\nThe Layout File\nThe activity_main.xml is a layout file available in res/layout directory that is referenced by\nyour application when building its interface. You will modify this file very frequently to change\nthe layout of your application. For your \"Hello World!\" application, this file will have following\ncontent related to default layout:\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\" >\n<TextView\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:layout_centerHorizontal=\"true\"\nandroid:layout_centerVertical=\"true\"\nandroid:padding=\"@dimen/padding_medium\"\nandroid:text=\"@string/hello_world\"\ntools:context=\".MainActivity\" />\n</RelativeLayout>\nThis is an example of simple RelativeLayout which we will study in a separate chapter.\nTheTextView is an Android control used to build the GUI and it has various attributes like\nandroid:layout_width, android:layout_height, etc., which are being used to set its width and\nheight etc. The @string refers to the strings.xml file located in the res/values folder. Hence,\n@string/hello_world refers to the hello string defined in the strings.xml file, which is \"Hello\nWorld!\".\nRunning the Application\nLet's try to run our Hello World! application we just created. We assume, you had created\nyour AVD while doing environment setup. To run the app from Eclipse, open one of your\nproject's activity files and click Run icon from the toolbar. Eclipse installs the app on your\nAVD and starts it and if everything is fine with your setup and application, it will display\nfollowing Emulator window:\n38\nAndroid\nCongratulations! You have developed your first Android Application and now just keep\nfollowing rest of the tutorial step by step to become a great Android Developer. All the very\nbest!\n39\n6. ANDROID \u2013 Organizing & Accessing the resourAcnedrsoi d\nThere are many more items which you use to build a good Android application. Apart from\ncoding for the application, you take care of various other resources like static content that\nyour code uses, such as bitmaps, colors, layout definitions, user interface strings, animation\ninstructions, and more. These resources are always maintained separately in various sub-\ndirectories under res/ directory of the project.\nThis tutorial will explain you how you can organize your application resources, specify\nalternative resources and access them in your applications.\nOrganize Resources\nYou should place each type of resource in a specific subdirectory of your\nproject's res/directory. For example, here's the file hierarchy for a simple project:\nMyProject/\nsrc/\nMyActivity.java\nres/\ndrawable/\nicon.png\nlayout/\nactivity_main.xml\ninfo.xml\nvalues/\nstrings.xml\nThe res/ directory contains all the resources in various sub-directories. Here we have an\nimage resource, two layout resources, and a string resource file. Following table gives a detail\nabout the resource directories supported inside project res/ directory.\nDirectory Resource Type\nanim/ XML files that define property animations. They are saved in res/anim/\nfolder and accessed from the R.anim class.\n40\nAndroid\ncolor/ XML files that define a state list of colors. They are saved in res/color/\nand accessed from the R.color class.\ndrawable/ Image files like .png, .jpg, .gif or XML files that are compiled into\nbitmaps, state lists, shapes, animation drawables. They are saved in\nres/drawable/ and accessed from the R.drawable class.\nlayout/ XML files that define a user interface layout. They are saved in\nres/layout/ and accessed from the R.layout class.\nmenu/ XML files that define application menus, such as an Options Menu,\nContext Menu, or Sub Menu. They are saved in res/menu/ and\naccessed from the R.menu class.\nraw/ Arbitrary files to save in their raw form. You need to call\nResources.openRawResource() with the resource ID, which is\nR.raw.filename to open such raw files.\nvalues/ XML files that contain simple values, such as strings, integers, and\ncolors. For example, here are some filename conventions for resources\nyou can create in this directory:\narrays.xml for resource arrays, and accessed from the R.array class.\nintegers.xml for resource integers, and accessed from the\nR.integer class.\nbools.xml for resource boolean, and accessed from the R.bool class.\ncolors.xml for color values, and accessed from the R.color class.\ndimens.xml for dimension values, and accessed from the\nR.dimen class.\nstrings.xml for string values, and accessed from the R.string class.\nstyles.xml for styles, and accessed from the R.style class.\nxml/ Arbitrary XML files that can be read at runtime by calling\nResources.getXML(). You can save various configuration files here\nwhich will be used at run time.\n41\nAndroid\nAlternative Resources\nYour application should provide alternative resources to support specific device configurations.\nFor example, you should include alternative drawable resources (i.e. images) for different\nscreen resolution and alternative string resources for different languages. At runtime, Android\ndetects the current device configuration and loads the appropriate resources for your\napplication.\nTo specify configuration-specific alternatives for a set of resources, follow these steps:\n\uf0b7 Create a new directory in res/ named in the form <resources_name>-\n<config_qualifier>. Here resources_name will be any of the resources mentioned\nin the above table, like layout, drawable etc. The qualifier will specify an individual\nconfiguration for which these resources are to be used. You can check official\ndocumentation for a complete list of qualifiers for different type of resources.\n\uf0b7 Save the respective alternative resources in this new directory. The resource files must\nbe named exactly the same as the default resource files as shown in the below\nexample, but these files will have content specific to the alternative. For example\nthough image file name will be same but for high resolution screen, its resolution will\nbe high.\nBelow is an example which specifies images for a default screen and alternative images for\nhigh resolution screen.\nMyProject/\nsrc/\nMyActivity.java\nres/\ndrawable/\nicon.png\nbackground.png\ndrawable-hdpi/\nicon.png\nbackground.png\nlayout/\nactivity_main.xml\ninfo.xml\nvalues/\nstrings.xml\n42\nAndroid\nBelow is another example which specifies layout for a default language and alternative layout\nfor Arabic language (layout-ar/).\nMyProject/\nsrc/\nMyActivity.java\nres/\ndrawable/\nicon.png\nbackground.png\ndrawable-hdpi/\nicon.png\nbackground.png\nlayout/\nactivity_main.xml\ninfo.xml\nlayout-ar/\nmain.xml\nvalues/\nstrings.xml\nAccessing Resources\nDuring your application development you will need to access defined resources either in your\ncode, or in your layout XML files. Following section explains how to access your resources in\nboth the scenarios:\nAccessing Resources in Code\nWhen your Android application is compiled, a R class gets generated, which contains resource\nIDs for all the resources available in your res/ directory. You can use R class to access that\nresource using sub-directory and resource name or directly resource ID.\nExample:\nTo access res/drawable/myimage.png and set an ImageView you will use following code:\nImageView imageView = (ImageView) findViewById(R.id.myimageview);\n43\nAndroid\nimageView.setImageResource(R.drawable.myimage);\nHere first line of the code uses the R.id.myimageview to get ImageView defined with\nidmyimageview in a Layout file. Second line of code uses the R.drawable.myimage to get an\nimage with name myimage available in drawable sub-directory under /res.\nExample:\nConsider next example where res/values/strings.xml has following definition:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"hello\">Hello, World!</string>\n</resources>\nNow you can set the text on a TextView object with ID msg using a resource ID as follows:\nTextView msgTextView = (TextView) findViewById(R.id.msg);\nmsgTextView.setText(R.string.hello);\nExample:\nConsider a layout res/layout/activity_main.xml with the following definition:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\"\nandroid:orientation=\"vertical\" >\n<TextView android:id=\"@+id/text\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Hello, I am a TextView\" />\n<Button android:id=\"@+id/button\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Hello, I am a Button\" />\n44\nAndroid\n</LinearLayout>\nThis application code will load this layout for an Activity, in the onCreate() method as follows:\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main_activity);\n}\nAccessing Resources in XML\nConsider the following resource XML res/values/strings.xml file that includes a color resource\nand a string resource:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<color name=\"opaque_red\">#f00</color>\n<string name=\"hello\">Hello!</string>\n</resources>\nNow you can use these resources in the following layout file to set the text color and text\nstring as follows:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<EditText xmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\"\nandroid:textColor=\"@color/opaque_red\"\nandroid:text=\"@string/hello\" />\nNow if you go through the previous chapter once again where we have explained Hello\nWorld! example, surely you will have better understanding on all the concepts explained in\nthis chapter. So we highly recommend to check previous chapter for working example and\ncheck how we have used various resources at very basic level.\n45\n7. ANDROID \u2013 Activities Android\nAn activity represents a single screen with a user interface. For example, an email application\nmight have one activity that shows a list of new emails, another activity to compose an email,\nand another activity for reading emails. If an application has more than one activity, then one\nof them should be marked as the activity that is presented when the application is launched.\nIf you have worked with C, C++ or Java programming language then you must have seen\nthat your program starts from main() function. Very similar way, Android system initiates its\nprogram within an Activity starting with a call on onCreate() callback method. There is a\nsequence of callback methods that start up an activity and a sequence of callback methods\nthat tear down an activity as shown in the below Activity lifecycle diagram: (image courtesy:\nandroid.com )\nThe Activity class defines the following callbacks i.e. events. You don't need to implement all\nthe callback methods. However, it's important that you understand each one and implement\nthose that ensure your app behaves the way users expect.\nCallback Description\nonCreate() This is the first callback and called when the activity is first created.\nonStart() This callback is called when the activity becomes visible to the user.\n46\nAndroid\nonResume() This is called when the user starts interacting with the application.\nonPause() The paused activity does not receive user input and cannot execute\nany code and called when the current activity is being paused and the\nprevious activity is being resumed.\nonStop() This callback is called when the activity is no longer visible.\nonDestroy() This callback is called before the activity is destroyed by the system.\nonRestart() This callback is called when the activity restarts after stopping it.\nExample:\nThis example will take you through simple steps to show Android application activity life\ncycle. Follow the below mentioned steps to modify the Android application we created\nin Hello World Example chapter:\nStep Description\n1 You will use Eclipse IDE to create an Android application and name it as\nHelloWorld under a package com.example.helloworld as explained in the Hello\nWorld Example chapter.\n2 Modify main activity file MainActivity.java as explained below. Keep rest of the\nfiles unchanged.\n3 Run the application to launch Android emulator and verify the result of the\nchanges done in the application.\nFollowing is the content of the modified main activity file\nsrc/com.example.helloworld/MainActivity.java. This file includes each of the\nfundamental lifecycle methods. The Log.d() method has been used to generate log\nmessages:\npackage com.example.helloworld;\n47\nAndroid\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.util.Log;\npublic class MainActivity extends Activity {\nString msg = \"Android : \";\n/** Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nLog.d(msg, \"The onCreate() event\");\n}\n/** Called when the activity is about to become visible. */\n@Override\nprotected void onStart() {\nsuper.onStart();\nLog.d(msg, \"The onStart() event\");\n}\n/** Called when the activity has become visible. */\n@Override\nprotected void onResume() {\nsuper.onResume();\nLog.d(msg, \"The onResume() event\");\n}\n/** Called when another activity is taking focus. */\n@Override\nprotected void onPause() {\n48\nAndroid\nsuper.onPause();\nLog.d(msg, \"The onPause() event\");\n}\n/** Called when the activity is no longer visible. */\n@Override\nprotected void onStop() {\nsuper.onStop();\nLog.d(msg, \"The onStop() event\");\n}\n/** Called just before the activity is destroyed. */\n@Override\npublic void onDestroy() {\nsuper.onDestroy();\nLog.d(msg, \"The onDestroy() event\");\n}\n}\nAn activity class loads all the UI component using the XML file available in res/layout folder of\nthe project. Following statement loads UI components from res/layout/activity_main.xml file:\nsetContentView(R.layout.activity_main);\nAn application can have one or more activities without any restrictions. Every activity you\ndefine for your application must be declared in your AndroidManifest.xml file and the main\nactivity for your app must be declared in the manifest with an <intent-filter> that includes\nthe MAIN action and LAUNCHER category as follows:\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\npackage=\"com.example.helloworld\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\" >\n<uses-sdk\nandroid:minSdkVersion=\"8\"\n49\nAndroid\nandroid:targetSdkVersion=\"15\" />\n<application\nandroid:icon=\"@drawable/ic_launcher\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\" >\n<activity\nandroid:name=\".MainActivity\"\nandroid:label=\"@string/title_activity_main\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" />\n<category\nandroid:name=\"android.intent.category.LAUNCHER\"/>\n</intent-filter>\n</activity>\n</application>\n</manifest>\nIf either the MAIN action or LAUNCHER category are not declared for one of your activities,\nthen your app icon will not appear in the Home screen's list of apps.\nLet's try to run our modified Hello World! application we just modified. We assume, you had\ncreated your AVD while doing environment setup. To run the app from Eclipse, open one of\nyour project's activity files and click Run icon from the toolbar. Eclipse installs the app on\nyour AVD and starts it and if everything is fine with your setup and application, it will display\nEmulator window and you should see following log messages in LogCat window in Eclipse\nIDE:\n07-19 15:00:43.405: D/Android :(866): The onCreate() event\n07-19 15:00:43.405: D/Android :(866): The onStart() event\n07-19 15:00:43.415: D/Android :(866): The onResume() event\n50\nAndroid\nLet us try to click Red button on the Android emulator and it will generate following events\nmessages in LogCat window in Eclipse IDE:\n07-19 15:01:10.995: D/Android :(866): The onPause() event\n07-19 15:01:12.705: D/Android :(866): The onStop() event\nLet us again try to click Menu button on the Android emulator and it will generate following\nevents messages in LogCat window in Eclipse IDE:\n07-19 15:01:13.995: D/Android :(866): The onStart() event\n07-19 15:01:14.705: D/Android :(866): The onResume() event\nNext, let us again try to click Back button on the Android emulator and it will generate\nfollowing events messages in LogCat window in Eclipse IDE and this completes the Activity\nLife Cycle for an Android Application.\n07-19 15:33:15.687: D/Android :(992): The onPause() event\n07-19 15:33:15.525: D/Android :(992): The onStop() event\n07-19 15:33:15.525: D/Android :(992): The onDestroy() event\n51\nAndroid\nEnd of ebook preview\nIf you liked what you saw\u2026\nBuy it from our store @ https://store.tutorialspoint.com\n52\n",
  "context": "Default Styles & Themes .............................................................................................................................. 122\n18. ANDROID \u2013 CUSTOM COMPONENTS ................................................................................. 123\nCreating a Simple Custom Component ......................................................................................................... 123",
  "source_file": "resources\\Year 2\\Android Studio\\android_tutorial.pdf",
  "line_numbers": [
    124,
    1163
  ]
}