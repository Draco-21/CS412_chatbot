{
  "title": "ethernet",
  "language": "python",
  "topics": [
    "database",
    "networking",
    "machine_learning",
    "web_dev"
  ],
  "purpose": "import struct",
  "code": "class EthernetExceptions:\n\n    class MissingEtherDevice(Exception):\n        pass\n\n    class UnknownEtherType(Exception):\n        pass\n\n    class InvalidMACAddress(Exception):\n        pass\n\n    class OverSizedFrame(Exception):\n        pass\n\n\nclass EtherTypes(object):\n    \"\"\" Sourced from\n    http://www.cavebear.com/archive/cavebear/Ethernet/type.html\n    \"\"\"\n    SUPPORTEDTYPES = {\n        \"IP\"        : 0x0800,\n        \"ARP\"       : 0x0806,\n        \"RARP\"      : 0x8035,\n        \"IPX\"       : 0x8037,\n        \"EtherTalk\" : 0x809B,\n        \"IPV6\"      : 0x86DD\n    }\n\n    @classmethod\n    def get_ethertype_from_name(cls, short_name):\n        ether_type = EtherTypes.SUPPORTEDTYPES.get(short_name)\n        if not ether_type:\n            raise EthernetExceptions.UnknownEtherType(\"%s\" % short_name)\n        return struct.pack(\">H\", ether_type)\n\n\nclass Ethernet():\n    def __init__(self, log,\n                 ether_device,\n                 src_mac_addr,\n                 dst_mac_addr='ff:ff:ff:ff:ff:ff',\n                 mtu=1500):\n        self.ether_device = ether_device\n        self.log = log\n        self.src_mac_addr = src_mac_addr\n        # defaults to this if missing from mkframe\n        self.dst_mac_addr = dst_mac_addr\n        self.mtu = mtu\n\n    def mk_ether_type(self, ether_type_name):\n        self.log.debug(\"looking for ether type: '%s'\" % ether_type_name)\n        return EtherTypes.get_ethertype_from_name(ether_type_name)\n\n    def mac_str_to_hex(self, mac_address):\n        \"\"\"\n        Receives a string mac address and returns an on-the-wire\n        representation of it\n        \"\"\"\n        mac_octets = [int(octet, 16) for octet in mac_address.split(\":\")]\n        return struct.pack(\"B\"*6, *mac_octets)\n\n    def mk_src_mac(self, src_mac_addr):\n        return self.mac_str_to_hex(src_mac_addr)\n\n    def mk_dst_mac(self, dst_mac_addr):\n        return self.mac_str_to_hex(dst_mac_addr)\n\n    def mk_frame(self, dst_mac_addr, ether_type_name, msg):\n        if not dst_mac_addr:\n            dst_mac_addr = self.dst_mac_addr\n        dst_mac = self.mk_dst_mac(dst_mac_addr)\n        src_mac = self.mk_src_mac(self.src_mac_addr)\n        ether_type = self.mk_ether_type(ether_type_name)\n        return \"\".join([dst_mac, src_mac, ether_type, msg])\n\n    def pad_frame(self, frame):\n        \"\"\" Make sure that frames are 60 bytes long. The ethernet spec\n        requires 64 byte frames. The 4 bytes CRC gets appended by the card.\n        https://en.wikipedia.org/wiki/Ethernet_II_framing#Runt_frames\n        \"\"\"\n        if len(frame) < 60:\n            pad_len = 60 - len(frame)\n            padding = struct.pack(\"B\", 0) * pad_len\n            frame += padding\n        return frame\n\n    def sanity_check_ether_device(self):\n        if not hasattr(self.ether_device, 'send'):\n            raise EthernetExceptions.MissingEtherDevice(\n                \"Etherdevice %s has no send method\" % self.ether_device\n            )\n\n    def sanity_check_mac_addresses(self, src_mac_addr, dst_mac_addr):\n        if not src_mac_addr:\n            raise EthernetExceptions.InvalidMACAddress(\n                \"Source mac address is not defined\")\n\n        if len(src_mac_addr.split(\":\")) != 6:\n            raise EthernetExceptions.InvalidMACAddress(\n                \"Invalid source mac address size\")\n\n        if not dst_mac_addr:\n            raise EthernetExceptions.InvalidMACAddress(\n                \"Destination mac address is not defined\")\n\n        if len(dst_mac_addr.split(\":\")) != 6:\n            raise EthernetExceptions.InvalidMACAddress(\n                \"Invalid destination mac address size\")\n\n    def validate_frame(self, frame):\n        frame_size = len(frame)\n        if frame_size > self.mtu:\n            raise EthernetExceptions.OverSizedFrame(\n                \"Frame size:%s MTU:%s\" % (frame_size, self.mtu))\n\n    def xmit(self, ether_proto, msg, dst_mac_addr=None):\n        if not dst_mac_addr:\n            dst_mac_addr = self.dst_mac_addr\n\n        self.log.debug(\"xmit request: src:%s: dst:%s proto:%s\" % (\n            self.src_mac_addr,\n            dst_mac_addr,\n            ether_proto))\n        self.sanity_check_ether_device()\n        self.sanity_check_mac_addresses(self.src_mac_addr, dst_mac_addr)\n        frame = self.mk_frame(dst_mac_addr, ether_proto, msg)\n        frame = self.pad_frame(frame)\n        self.validate_frame(frame)\n        self.log.info(\"EtherProto: %s: sending %s  bytes through %s\" % (\n            ether_proto, len(frame), self.ether_device))\n        self.log.debug(\"Message: %s\" % frame.encode(\"hex\"))\n        self.ether_device.send(frame)\n\n\nif __name__ == '__main__':\n    import logging\n\n    class Logger:\n        def __init__(self,  log_level=logging.DEBUG):\n            self.log_level = log_level\n\n        def get_formatter(self):\n            return logging.Formatter(\n                '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n        def get_logger(self, module_name):\n            \"\"\"Returns a Logger instance for the specified module_name\"\"\"\n            logger = logging.getLogger(module_name)\n            logger.setLevel(self.log_level)\n            log_handler = logging.StreamHandler()\n            log_handler.setFormatter(self.get_formatter())\n            logger.addHandler(log_handler)\n            return logger\n\n    class DevNullSender:\n        def send(self, frame):\n            pass\n\n        def __str__(self):\n            return \"DevNullSender\"\n\n    def main():\n        log = Logger().get_logger(\"main\")\n        log.info(\"Starting....\")\n        src_mac = open(\"/sys/class/net/eth0/address\").read().strip()\n\n        ether = Ethernet(log, DevNullSender(), src_mac)\n        ether.xmit(\"ARP\", hex(123))\n\n    main()\n",
  "context": "import struct\n\n",
  "source_file": "resources\\Year 2\\Android Studio\\ethernet.py",
  "line_numbers": [
    4,
    174
  ]
}