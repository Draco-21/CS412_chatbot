{
  "title": "fuzzy robust auto park",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "researchers.",
  "code": "commandsaregeneratedtofollowthereferencepath; 2)theskill-basedapproach, wherefuzzylogic\nor neural networks are used to acquire and transfer an experienced human driver\u2019s parking skill to\nan automatic parking controller. There is no reference path to follow and the control command is\ngenerated by considering the orientation and position of the vehicle relative to the parking space.\nFor path planning Paromtchik and Laugier [13, 19, 20] proposed a parallel parking approach\nfor a nonholonomic vehicle. A parking space is scanned before the vehicle reverses into the parking\nbay. The vehicle then follows a sinusoidal path in backward motion; that is the control commands\n(steering angle and velocity) are generated such that the corresponding (x, y) path is sinusoidal.\nTo keep the vehicle from colliding with the front left corner of the parking bay, a collision-free\nstart position is obtained from an off-line lookup table according to the length of the parking\nbay and the lateral distance of the vehicle to the front left corner of the parking bay. Jiang and\nSeneviratne[12]alsostudiedsensorguidedautonomousparking, wheretheprocessconsistsofthree\nphases: scanning, positioning and maneuvering. The path in the maneuvering phase is constructed\nby two circular arcs of minimum radius tangentially linked to each other. A forbidden area inside\nthe parking bay is defined for the maneuvering phase to avoid possible collision. Xu, Chen and\nXie [24] planned a quintic polynomial curve for the reference path, where the steering angle was\nobtained by the instant turning radius of the vehicle.\nForskill-basedparkinganartificialneuralnetworkwastrainedtodirectlymapthevideosensor\u2019s\nCCD-image of the environment to the corresponding steering angle in the direct neural control\narchitecture for parallel parking [6]. In the fuzzy logic approaches of [10, 17, 18], the control\ncommand (i.e., the steering angle) was generated based on the relative longitudinal and lateral\ndistance of the vehicle to the parking space and the orientation of the vehicle. Fuzzy rules were\nbuilt for each of the parking steps [10] or for different parking positions [17, 18].\n1\nPath planning is an open-loop approach. The accuracy of the resulting path depends on the\naccuracy of actuators. However, the effect of control actions is not completely reliable, for example,\nwheels may slip. The position error caused by actuators cannot be compensated by an open-\nloop strategy. In the case of open-loop parking, even though position errors may be compensated\nby subsequent iterative motions (i.e., backward or forward motions), this compensating strategy\nincreases the time and cost of implementation. In contrast, a skill-based fuzzy approach generates\ncontrol commands at each sampling period based on the current position of the vehicle relative to\nthe parking space, it has the ability to compensate actuator errors promptly. Thus, the fuzzy logic\napproach is a feedback strategy.\nBoth the path planning approach and the fuzzy approach rely on the environmental modelling\nand sensor information which are in general approximate, having uncertainties. Fuzzy systems\nemploy a mode of approximate reasoning which enables them to make robust and meaningful\ndecisions under uncertainty and partial knowledge. The nature of fuzzy logic leads to robust\ncontrol algorithms in spite of sensor uncertainties and control errors.\nAfuzzycontrolbasedapproachwasselectedinthisresearchalsowiththeintentionofproducing\na generic design, so that the control algorithms could be developed on a laboratory robot and then\neasily transferred to other prototypes 1. In addition, fuzzy logic control provides the flexibility to\napply a nonlinear control law derived from an experienced human-driver and expressed using words\nand If-Then rules. Further, fuzzy logic navigation allows various behaviors to be easily combined\nthrough a command fusion process [7, 21, 25]. For cost effective implementation a fuzzy controller\ncan be implemented using lookup tables.\nThe size of the parking space has significant impact on the degree of difficulty of the parallel\nparking maneuvering. In the category of fuzzy logic approaches references [10, 17, 18] do not\nexplicitly discuss the size of the maneuvering space considered. However, it is observed that in\n[17] and [18], the size of the maneuvering space used was twice the length of the vehicle. In the\ncategory of path planning approaches references [13, 19, 20] also do not discuss the size of the\nparking space. In this category the smallest parking space used in reference [12] is 1.67 times\nthe length of the vehicle. To improve the maneuverability and capability of AGVs, the focus of\nthis research is to develop simple fuzzy controllers that can reverse vehicles into tight spaces and\nto demonstrate the resulting parking algorithm experimentally using the ATRV-Jr mobile robot\nshown in Figure 1. A tight space maneuvering algorithm is obtained by proper tuning of the fuzzy\n1This feature of the proposed fuzzy logic approach is only demonstrated in this paper via simulation\nsince the approach is experimentally applied to only one robot. Ultimately, the hard evidence requires\nexperimental demonstration since it is difficult to incorporate real world effects in a simulation.\n2\ncontrollers. Tuning can be conducted by human operators using trial and error, which is generally\ntime consuming. However, a so-called genetic fuzzy system uses a genetic algorithm\u2019s learning\nability to automatically tune the parameters of fuzzy controllers.\nFigure 1: ATRV-Jr Mobile Robot\nGeneticalgorithms(GAs) area partofevolutionarycomputing, whichisarapidly growingarea\nof artificial intelligence. GAs can be used to tune the membership functions, rule bases and scaling\nfactors of fuzzy controllers [1, 2, 9, 11, 14, 16]. In this paper, GAs are used in the determination of\nmembership functions and scaling factors for the reverse-motion fuzzy logic controller only (which\nis the most complex of the three fuzzy controllers that comprise the proposed automatic parking\nalgorithm). The prototype vehicle used for fuzzy logic and genetic fuzzy controller design is a skid-\nsteering vehicle. The genetic fuzzy system is later used to tune the fuzzy algorithm for front-wheel\nsteering AGVs. For both types of vehicles, the rule bases are the same, the only changes made\nare the membership functions and scaling factors. The results demonstrate the suitability of the\nreverse-motion maneuvering algorithm for a variety of vehicle platforms.\nThis paper is organized as follows. Section 2 describes the parallel parking problem. Section\n3 presents a parallel parking algorithm based on fuzzy logic. Section 4 gives experimental results\nthat demonstrate the capability of the fuzzy algorithm. Section 5 considers two different steering\nmodels and tunes the fuzzy algorithm for each system using a genetic algorithm. Finally, Section\n6 gives conclusions.\n2. The Parallel Parking Problem\nTwoimportantaspectsforparallelparkingareparkingspacedetectionandautomaticcontroller\ndesign. In this section, the parking space detection method is discussed and the process of parallel\nparking is described.\n3\nDetected parking space\nContour of detected obstacles\nFigure 2: Maneuvering Space Detection\n2.1. Parking Space Detection\nThemapofthevehicle\u2019senvironmenthastobebuiltwhenthevehicleispassingthemaneuvering\nspace. Either image sensors or ultrasonic sensors can be used for the task [6, 12, 13, 24]. For\nexamples, by using one or two digital cameras, the image around the vehicle can be acquired in real\ntime, and then an image processing algorithm can be employed to identify the parking space. The\nbuilt map can provide a contour constructed by the obstacles on the rightside of the vehicle. Then,\na sufficiently large rectangle can be fit into the contour [10]. As shown in Figure 2, this rectangle\nwill be the maneuvering space available for the vehicle. To focus the study on the controller design\npart, it is assumed below that the parking space is detected and to the right of the vehicle. (It is\nstraightforward to generalize the results to the case in which the parking space is on the left-hand\nside.)\n2.2. The Three-step Maneuvering Process\nThe detected space can be described as shown in Figure 3. The size of the rectangular space\nis defined as h \u00d7l , and BK, FT and SE represent the \u201cback,\u201d \u201cfront\u201d and \u201cside\u201d of the space,\np p\nrespectively. The origin of the local coordinate system is chosen as the intersection of BK and\nSE. The reverse-motion maneuvering algorithm developed here corresponds to the parallel parking\nprocedureofanexperiencedhumandriver[26]andthewholemaneuveringprocesscanbecompleted\nwith the following three steps as illustrated by Figures 4 to 7.\nIn the first step (see Figure 4), the vehicle is navigated forward to reach a ready-to-reverse\nposition with the vehicle orientation parallel to the parking space. Here, the ready-to-reverse\nposition for the center of the vehicle is chosen as (l + 0.5l,h + 0.65b) in the local coordinate\np p\nsystem, where l and b represent respectively the length and width of the vehicle. To reach both the\ndesired position and orientation simultaneously requires a complex fuzzy system. Hence, to yield\n4\nFigure 3: Maneuvering Space and the Local Coordinate System\na simpler and more easily implementable algorithm, this step is divided into two sub-steps.\nThe task of the first sub-step is to have the vehicle center reach an intermediate position\n(0.9l ,h +0.65b) without considering the orientation angle of the vehicle. The desired y position\np p\nof the vehicle is reached at this stage. In the second sub-step, the orientation angle is adjusted\nwhile the vehicle moves forward to reach the desired x position. Although this step does not ensure\nthat the orientation is precisely parallel to the space, the error in the orientation angle is made\nvery small.\nIn the second step (see Figures 5 and 6) the vehicle is first reversed into the maneuvering space\nwith an increasing \u03b8 until its rear right wheel is at a certain distance from the boundary SE of the\nspace. Then the vehicle is reversed with decreasing \u03b8 until one of the rear wheels is very close to\nthe boundary BK of the space.\nIn the third step the vehicle is moved forward to adjust its position inside the space (see Figure\n7). The desired final position of the vehicle is that it is parallel to and at the center of the space.\nThe second and third steps can be repeated several times until the desired final position is\nreached within some tolerance.\n3. Fuzzy Logic Controller (FLC) Design\nEach step of the maneuvering process can be implemented with the use of fuzzy logic tech-\nniques as described in the following subsections. The iRobot ATRV-Jr is the autonomous vehicle\nconsidered here. The wheels on one side of the ARTV-Jr are mechanically coupled and it uses\nskid steering to maneuver the robot [27]. To easily generalize the research results to vehicles with\n5\n3.5\n3\n2.5\n2\n1.5\n1\n0.5\n0\n\u22120.5\n\u22123 \u22122 \u22121 0 1 2 3\nX\nY\n3.5\n3\n2.5\n2\nREADY\u2212TO\u2212REVERSE\nPOSITION\n1.5\nINITIAL POSITION 1\n0.5\n0\n\u22120.5\n\u22123 \u22122 \u22121 0 1 2 3\nX\nFigure 4: Reach a Ready-to-Reverse Position\nY\nFigure 5: Reverse with Increasing \u03b8\n3.5\n3\n2.5\n2\n1.5\n1\n0.5\n0\n\u22120.5\n\u22123 \u22122 \u22121 0 1 2 3\nX\nY\n3.5\n3\n2.5\n2\n1.5\n1\n0.5\n0\n\u22120.5\n\u22123 \u22122 \u22121 0 1 2 3\nX\nFigure 6: Reverse with Decreasing \u03b8\nY\nFigure 7: Adjust Forward Inside the Space\nAckerman steering, the outputs of all the fuzzy logic control systems proposed here are taken as\nsteeringrate. Analternativeistohavethefuzzycontrolleroutputtheleftandrightwheelvelocities\nas was done in [23] and [15] for fuzzy obstacle avoidance and goal seeking for a skid steering vehicle.\n3.1. Kinematic Equations of Mobile Robot with Skid Steering\nThe simulation of the parallel parking algorithm is based on the kinematic model of the ARTV-\nJr. As illustrated in Figure 8, let (x,y) denote the coordinate of the center of the vehicle in the\nlocal coordinate system defined previously, v the total translational velocity, v and v the velocity\nr l\nof the right side and left side wheels respectively, \u03b8 the angle between the positive x axis and the\nmain axis of the vehicle, and \u03b8\u02d9 the steering rate. Assuming constant velocity, the kinematic model\nof a skid steering mobile robot can be described as [8]:\n\u03b8(i+1) = \u03b8(i)+\u03b8\u02d9(i)dt, (1)\nx(i+1) = x(i)+v(i+1)cos(\u03b8(i+1))dt, (2)\n6\nq\ny\nj\nb\ntarget\nx\nFigure 8: The Vehicle Kinematics and Heading Angle Difference\ny(i+1) = y(i)+v(i+1)sin(\u03b8(i+1))dt, (3)\nwhere\nv (i)+v (i)\nr l\nv(i) = , (4)\n2\nv (i)\u2212v (i)\n\u03b8\u02d9(i) = r l . (5)\nb\nAt each sampling time, the velocities v and v can be obtained using (4) and (5). The motor\nr l\ncoupled with the corresponding wheels can be adjusted to reach the desired speed by lower level\ncontrollers. Below, it is assumed that the steering rate is adjusted to maneuver the robot while the\ntranslation speed v is taken as a constant. Hence, the process of accelerating the vehicle from rest\nand decelerating to rest is omitted from the simulation.\n3.2. FLC for Moving the Vehicle to a Ready-to-Reverse Position\nAs discussed above, this first step is completed by a goal-seeking behavior followed by an\norientation adjusting behavior. The fuzzy controller designed for the goal-seeking behavior has one\ninput and one output. The input is the heading angle difference \u03c6, which is the angle from the\nline connecting the vehicle\u2019s center to the target to the heading direction of the vehicle as shown in\nFigure 8. The angle \u03c6 is positive when the line connecting the center of vehicle and target rotates\ncounterclockwise to the heading direction. The output of the fuzzy controller is the steering rate\nof the vehicle \u03b8\u02d9, where \u03b8 is the angle between the positive x axis and the main axis of the vehicle\n(see Figure 8). The angle \u03b8 is positive when the positive x axis rotates counterclockwise to the\n7\nMFS OF GOAL\u2212SEEKING INPUT: HEADING ANGLE DIFFERENCE\nN Z P\n1\n0.8\n0.6\n0.4\n0.2\n0 \u22124 \u22123 \u22122 \u22121 0 1 2 3 4\nHEADING ANGLE DIFFERENCE (RAD)\nNOITCNUF\nPIHSREBMEM\nMFS OF GOAL\u2212SEEKING OUTPUT: STEERING\nN Z P\n1\n0.8\n0.6\n0.4\n0.2\n\u221201.5 \u22121 \u22120.5 0 0.5 1 1.5\nSTEERING ANGLE RATE (RAD/S)\nNOITCNUF\nPIHSREBMEM\nMFS OF GOAL\u2212SEEKING OUTPUT: STEERING\nN Z P\n1\n0.8\n0.6\n0.4\n0.2\n\u221201.5 \u22121 \u22120.5 0 0.5 1 1.5\nSTEERING ANGLE RATE (RAD/S)\nNOITCNUF\nPIHSREBMEM\nFigure 9: Membership Functions for the Goal-seeking \u2013 Input \u03c6 (left) and Output \u03b8\u02d9 (right)\nmain axis of the vehicle. The membership functions for both the input and output are illustrated\nin Figure 9, where N, P and Z represent negative, positive and zero respectively.\nThe fuzzy inference rules for the goal-seeking behavior are listed in Table 1. For a skid steering\nvehicle, since \u03b8\u02d9 is positive when the right wheels\u2019 velocity is bigger than the left wheels\u2019 velocity,\nthe fuzzy rules actually require that if the target is to the right of the robot\u2019s heading direction,\nthe robot should turn to its right. The basic principles of goal-seeking are as follows:\n\u2022 If the target is to the right of the robot\u2019s heading direction, the robot should turn to its right.\n\u2022 If the target is to the left of the robot\u2019s heading direction, the robot should turn to its left.\n\u2022 If the target is directly to the front of the robot, the robot should keep straight.\n\u03c6 N Z P\n\u03b8\u02d9 P Z N\nTable 1: Fuzzy Rules for Goal-seeking\nThe task of the orientation adjusting sub-step is to adjust the heading of the vehicle while\nreaching the desired x position for the center of the vehicle. The heading angle will be very close\nto zero after this adjustment. For this fuzzy controller the input is the orientation angle \u03b8, and\nthe output is the steering rate \u03b8\u02d9. The membership functions are defined as shown in Figure 10,\nwhere NB, NM, Z, PM and PB represent negative big, negative middle, zero, positive middle and\npositive big respectively. The fuzzy inference rules proposed are shownin Table2. This set of fuzzy\nrules require that the sign of \u03b8\u02d9 should always be opposite to the sign of \u03b8. The basic notions of the\norientation adjusting is as follows:\n\u2022 If the steering angle is positive, the steering angle rate should be negative.\n8\n\u2022 If the steering angle is negative, the steering angle rate should be positive.\n\u2022 If the steering angle is zero, the steering angle rate should be zero.\nMFS OF FORWARD ADJUST INPUT: ORIENTATION ANGLE\nNB NM Z PM PB\n1\n0.8\n0.6\n0.4\n0.2\n0 \u22122 \u22121.5 \u22121 \u22120.5 0 0.5 1 1.5 2\nSTEERING ANGLE (RAD)\nNOITCNUF\nPIHSREBMEM\nMFS OF FORWARD ADJUST OUTPUT: STEERING\nNB NM Z PM PB\n1\n0.8\n0.6\n0.4\n0.2\n\u221201.5 \u22121 \u22120.5 0 0.5 1 1.5\nSTEERING ANGLE RATE (RAD/S)\nNOITCNUF\nPIHSREBMEM\nFigure 10: Membership Functions for Orientation Adjustment \u2013 Input \u03b8 (left) and Output \u03b8\u02d9\n(right)\n\u03b8 NB NM Z PM PB\n\u03b8\u02d9 PB PM Z NM NB\nTable 2: Fuzzy Rules for Orientation Adjustment\n3.3. FLC for Reversing the Vehicle Into the Parking Space\nThe reverse maneuvering into the parking space requires a more complex fuzzy logic controller.\nAs shown in Figure 3, the coordinate of the left rear corner of the vehicle in the local coordinate\nsystem is defined as (x ,y ), and the coordinate of the right rear corner of the vehicle is defined\na a\nas (x ,y ). Two new variables, x and y , are defined by x = x /l and y = y /h ; they\nd d a1 d1 a1 a p d1 d p\nrepresent the relative position of the rear of the vehicle with respect to the origin of the space. The\nfuzzylogiccontrollerforthisstephasthreeinputs,x , y andtheorientationangle\u03b8. Theoutput\na1 d1\nis the steering rate \u03b8\u02d9. Figures 11 and 12 show the proposed membership functions, where S, B,\nVB represent small, big and very big respectively. The three dimensional fuzzy rules are shown in\nTable 3; there are a total of 18 rules. Empty rules in Table 3 mean the corresponding combination\nof inputs is invalid (i.e., they imply that either the vehicle is moving away from the parking space\nor it has entered one of the shaded regions in Figure 3). The rationale behind several of the rules\nis presented here.\n\u2022 If \u03b8 is negative and x is small and y is small, then \u03b8\u02d9 is positive big, i.e., when the vehicle\na1 d1\nis very close to both of the boundaries, and its orientation angle is negative, the steering rate\n9\nshould be a big positive number to make the orientation angle positive.\n\u2022 If \u03b8 is zero and x is very big and y is very big, then \u03b8\u02d9 is zero, i.e., when the vehicle is\na1 d1\nparallel to the parking space, and the vehicle is outside the parking space, the vehicle should\ncontinue to reverse in the same direction.\n\u2022 If \u03b8 is positive and x is big and y is big, then \u03b8\u02d9 is zero, i.e., when the vehicle is in the\na1 d1\nmiddle of the parking space, and the orientation angle is positive, the vehicle should keep the\nsame steering angle.\nMFS OF REVERSE PARKING INPUT: X DISTANCE\nS B VB\n1\n0.8\n0.6\n0.4\n0.2\n00 0.5 1 1.5 2 2.5\nXa1\nNOITCNUF\nPIHSREBMEM\nMFS OF REVERSE PARKING INPUT: Y DISTANCE\nS B VB\n1\n0.8\n0.6\n0.4\n0.2\n00 0.5 1 1.5 2 2.5\nYd1\nNOITCNUF\nPIHSREBMEM\nMFS OF REVERSE PARKING INPUT: Y DISTANCE\nS B VB\n1\n0.8\n0.6\n0.4\n0.2\n00 0.5 1 1.5 2 2.5\nYd1\nNOITCNUF\nPIHSREBMEM\nFigure 11: Membership Functions for the Backing Up \u2013 Input x (left) and y (right)\na1 d1\nMFS OF REVERSE PARKING INPUT: ORIENTATION ANGLE\nN Z P\n1\n0.8\n0.6\n0.4\n0.2\n0 \u22122 \u22121.5 \u22121 \u22120.5 0 0.5 1 1.5 2\nSTEERING ANGLE (RAD)\nNOITCNUF\nPIHSREBMEM\nMFS OF REVERSE PARKING OUTPUT: STEERING\nNB NM Z PM PB\n1\n0.8\n0.6\n0.4\n0.2\n\u221201.5 \u22121 \u22120.5 0 0.5 1 1.5\nSTEERING ANGLE RATE (RAD/S)\nNOITCNUF\nPIHSREBMEM\nFigure 12: Membership Functions for the Reverse Maneuver \u2013 Input \u03b8 (left) and Output \u03b8\u02d9 (right)\n3.4. FLC for Navigating the Vehicle Forward Inside the Parking Space\nThe developed fuzzy logic controller has one input, orientation angle \u03b8, and one output, the\nsteering rate \u03b8\u02d9. The membership functions and fuzzy inference rules are exactly the same as that\nof the orientation adjustment described in the first step since this step accomplishes essentially the\nsame task, that is adjusting the orientation while simultaneously moving the vehicle forward.\n10\nx \\y S B VB\na1 d1\nS PB PB\n\u03b8=N B PM PB PB\nVB PM\nS Z Z\n\u03b8=Z B Z PB PB\nVB Z\nS NB Z\n\u03b8=P B NM Z PM\nVB NB\nTable 3: Fuzzy Rules for the Backing Up Step\n3.5. Algorithm Summary\nThe three major steps of the parallel parking algorithm were overviewed in Subsection 2.2. The\nfuzzy logic controllers designed for each of the three steps were described in Subsections 3.2, 3.3\nand 3.4. As a summary, Figure 13 shows the flowchart of the entire algorithm. Using the fuzzy\nlogic algorithm of Subsection 3.2, the vehicle first moves to a ready-to-reverse position until the\ntarget position, described in Subsection 2.2, is reached within a predefined tolerance. Secondly,\nusing the fuzzy logic algorithm of Subsection 3.3, the vehicle reverses into the parking space until\nit is very close to the parking boundary described in Subsection 2.2. Thirdly, using the fuzzy logic\nalgorithm of Subsection 3.4, the vehicle navigates forward inside the parking space. The forward\nnavigation stops when either the target parking position is reached or when the vehicle is very close\nto the front boundary of the parking space. In the latter case, the vehicle will perform the second\nand third steps repeatedly until the target parking position is reached.\n4. Experimental Implementation\nThe developed algorithm was first successfully demonstrated under simulation environments\nusing Matlab and the Matlab Fuzzy Logic Toolbox. Then the algorithm was implemented on an\nATRV-Jr mobile robot. The experimental implementation related issues are discussed in detail\nhere.\nThe ATRV-Jr is equipped with a suite of sensors including wheel encoders, ultrasonic sonar, a\nCCD camera, a laser range finder, an inertial navigation sensor, a compass and DGPS. The on-\nboard Pentium II PC runs RedHat Linux, and the communication with the robot is over wireless\nEthernet.\n11\nStart\nMove to a ready\u2212to\u2212\nreverse position.\nNo\nPosition reached\nwith tolerance?\nYes\nReverse into the\nparking space.\nNo\nVery close to the\nparking boundary?\nYes\nYes\nNo\nNavigate forward inside\nthe parking space.\nTarget parking Very close to the\nposition reached? parking boundary?\nNo\nYes\nStop\nFigure 13: Flowchart of the Parallel Parking Algorithm\n4.1. Vehicle Localization\nIn order to autonomously navigate and perform useful tasks, a vehicle needs to know its exact\nposition and orientation. The wheel encoders mounted on the motor are used to perform vehicle\nlocalization in the experiment for low cost implementation.\nItwasexperimentallyobservedthaterrorsinodometryaccumulateovertimeduetoinaccuracies\nin the kinematic model, precision limitations of the encoders, and wheel slippage. Several methods\ncan be used to improve the robustness of the fuzzy algorithm under vehicle localization. For high\nimplementation cost alternatives, Kalman filter or extended Kalman filter technique can be used to\ncarefully calibrate odometric data with state measurement signals provided by a redundant sensor\n(e.g., a gyroscope) to improve the robustness of localization [8, 22]. For low implementation cost\nalternatives, sonar sensor can be integrated with the system to enhance the robustness as discussed\nbelow.\n12\n4.2. Sonar Sensor Integration\nThe reverse-motion maneuvering fuzzy controller requires variables describing the relative posi-\ntion of the vehicle to the parking space as input variables. These relative positions can be obtained\nbyvehiclelocalizationwithrespecttothedetectedparkingspace. Tocompensateparkingspacede-\ntection errors and to prevent collision due to vehicle localization errors during the parking process,\ninformation from other sensors (e.g. ultrasonic sensors) can be used.\nThe ATRV-Jr used in this research is mounted with a ring of 17 sonar: 5 in the front, 5 on each\nside and 2 at the rear, as shown in Figure 14. The sonar sensors\u2019 information can be integrated in\nthealgorithmfortwotasks. First,tocompensateforparkingspacedetectionandlocalizationerrors,\nsonar s15 is used to detect the edge FT of the maneuvering space (as shown in Figure 3) during the\nreverse-motion step. In Matlab simulation this edge is solely determined by vehicle localization.\nIn experimental implementation the data obtained from s15 is checked at each sampling time and\nwhenever the detected distance is larger than 90% of the width of the parking space, it is assumed\nthe edge FT is detected. Once the ready-to-reverse position is reached, the vehicle should reverse\nparallel to the parking space until the edge FT is detected. Second, to avoid possible collision of\nthe vehicle with edges BK and FT while maneuvering within the parking space, data from sonar s0\nand s8 are used to determine the switching between reversing and forward-adjusting. In particular,\nif sonar s0 detected an obstacle within 15cm during the reverse maneuvering, the vehicle was\nswitched to forward maneuvering, and if sonar s8 detected an obstacle within 15cm during forward\nmaneuvering, the vehicle was switched to reverse maneuvering. (It should be mentioned that the\nabove algorithm works for a rectangular parking space; for irregular parking spaces more advanced\nsensor integration algorithms are needed.)\ns6 s7 s8 s9 s10\ns5 s11\ns4 s12\ns3 s13\ns2 s14\ns1 s15\ns0 s16\nFigure 14: Sonar Configuration on ATRV-Jr\n13\n4.3. Experimental Results\nThe ATRV-Jr has a basic length of 77.5 cm and a width of 64 cm. Considering the installation\nof a laser range finder in the front, the actual length of the vehicle is 100.5 cm. The size of the\nmaneuvering space used in the experiments is 1.4 times the length and 1.2 times the width of\nthe vehicle. The fuzzy logic controllers were programmed in C++ and the code was uploaded to\nthe onboard PC of the ATRV-Jr. The experimentally implemented fuzzy logic controllers were\nthe same controllers as used in simulation except the output scaling factors were adjusted for the\nreal dynamics of the mobile robot. The translation speed used in the experiment is 8 cm/s (i.e.,\n0.288km/hr). Figures 15 to 20 show the maneuvering process of the ATRV-Jr from an initial\nposition to the final position. Experiments conducted under different initial positions achieved\nsimilar results.\nFigure 15: Initial Position Figure 16: Passing By the Space\nFigure 17: Ready to Reverse Position Figure 18: Back Up Maneuvering\nFigure 19: Adjust Forward Maneuvering Figure 20: Final Position Reached\n4.3.1. Robustness Under Vehicle Localization Errors\nThe vehicle localization errors in odometry accumulate over time due to inaccuracies in the\nkinematic model, precision limitations of the encoders, and wheel slippage. The errors can be\n14\nclearedwhenevertheonboardPCisrestarted. Inonesetofparkingexperiments, theentireparking\nprocesswasrepeatedfivetimeswithoutreinitializingtherobotodometry. Itwasobservedthat, due\nto localization errors, the ready-to-reverse position reached by the first parking step was different\nfor each parking process. The desired ready-to-reverse position was x = 1.951 m, y = 1.248 m and\n\u03b8 = 0radrelativetothelocalcoordinatesystem. Table4comparestheodometryreadingsfromthe\nonboard PC and manually measured data from the five experiments. It is seen that while the data\nfrom odometry reading matched the desired target position well, the data from the real (i.e., the\nmanual) measurement did not. In particular, localization errors along the x axis were much bigger\nthanthatalongtheyaxisandorientationangle,andthelaterexperimentsyieldedlargererrors. The\ndifferences in the ready-to-reverse positions led to different reverse-motion trajectories in the 2nd\nstep of the parking process. In the first four experiments, the mobile robot was successfully parked\ninside the parking space by the fuzzy controller. In the fifth experiment, the vehicle localization\nerror along x axis was already 1.951\u22121.5560 = 0.395 m. Under this case, the robot hit the edge\nBK showing the limitation of the algorithm.\nExperiment No. odometry x odometry y odometry \u03b8 measured x measured y measured \u03b8\n1 1.9596 1.2416 -7.7182\u00d710\u22124 1.7650 1.2365 0.0120\n2 1.9525 1.2402 -6.0643\u00d710\u22124 1.7095 1.2440 0.0159\n3 1.9579 1.2455 -10.1991\u00d710\u22124 1.6613 1.2290 -0.0649\n4 1.9599 1.2456 -5.7887\u00d710\u22124 1.6075 1.2370 -0.0156\n5 1.9559 1.2485 -9.0965\u00d710\u22124 1.5560 1.2485 -0.0097\nTable 4: Vehicle Localization Errors\n4.3.2. Robustness Under Parking Space Detection Errors\nAs described above sonar sensor s15 is used to detect edge FT, and the reverse-motion fuzzy\ncontroller takes effect only when this edge is detected. Thus the possible collision of the robot with\nedge FT due to space detection errors is avoided. For example, it was assumed that the detected\nlength of the parking space was 1.6 times the length of the vehicle and the edge BK was properly\ndetected, while the actual length of the parking space was only 1.4 times the length of the vehicle.\nIn this case, the robot bumps the edge FT if sonar s15 is not integrated for the edge detection of\nFT. However, due to the integration of sonar s15, the vehicle was able to successfully park.\n5. Fine-tuning of the FLCs with Genetic Algorithms\nThe size of the parking space has significant impact on the degree of difficulty of reverse-motion\nmaneuvering. The smaller the space, the more difficult it is to perform the reverse-motion maneu-\n15\nvering smoothly. The ability to parallel park in small parking spaces reverse-motion maneuvering\nalgorithm was obtained by significant tuning of the proposed fuzzy controllers.\nFine-tuning of fuzzy logic controllers can be performed by either manual trial and error or\nby using artificial intelligence. In this research manual tuning was first tried and later genetic\nalgorithms (GAs) were used to learn effective parameters for the reverse motion fuzzy controller,\nthe most complex controller in the parallel parking algorithm. GAs can also be used to tune the\nremaining FLCs although this was not carried out in this research.\nGAs search the solution space of a function through the use of simulated evolution, i.e., the\nsurvivalofthefitteststrategy. Ingeneralthefittestindividualsofanypopulationtendtoreproduce\nand survive in the next generation, thus improving successive generations [3]. The learning ability\nof genetic algorithms can be used to choose the most effective parameters for fuzzy logic systems.\nIn this research, a genetic algorithm was used to determine the membership functions and scaling\nfactorsonly. Thisisbecausetheexpert-basedfuzzyrulesforparallelparkingarestandardandthere\nis not much room to modify them. Hence, adjusting these rules along with the other parameters\nleads to inefficient tuning efforts.\nFor the specific problem studied, the first priority is to keep the AGV from colliding with the\nboundaries of the maneuvering space, i.e., constraints need to be enforced in the optimization\nprocess. Thus, a constrained optimization problem was considered. A penalty term was added to\nthe fitness function to enforce the constraints. This term was zero if no collision occurred, and was\ngiven an extremely high value if the AGV collided with any of the boundaries. In this way, the\nfeasibility of the optimal result was guaranteed.\n5.1. Design Variables\nThe first issue of GA tuning is to select the design variables. As shown in Figures 11 and 12\nthe membership functions of the inputs and output proposed for the fuzzy controller are either\ntriangular-shaped or trapezoidal-shaped. The triangular curve can be represented by the following\nfunction,\n\uf8f1 \uf8fc\n\uf8f4\uf8f4\uf8f4\uf8f2\nx\u2212a\n0\n,\n,\na\nx\n\u2264\n\u2264\nx\na\n\u2264 b\n\uf8f4\uf8f4\uf8f4\uf8fd\nf(x;a,b,c) = b\u2212a (6)\n\uf8f4\uf8f4\uf8f4\uf8f3 c\nc\n\u2212\n\u2212\nx\nb\n,b \u2264 x \u2264 c \uf8f4\uf8f4\uf8f4\uf8fe\n0,c \u2264 x\n16\nwhile the trapezoidal curve can be represented by\n\uf8f1 \uf8fc\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f2\nx\ne\u2212\n\u2212\nd\nd\n0\n,\n,\nd\nx\n\u2264\n\u2264\nx\nd\n\u2264 e\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8fd\nf(x;d,e,f,g) = 1,e \u2264 x \u2264 f (7)\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8f3\ng\ng\n\u2212\n\u2212\nf\nx,f \u2264 x \u2264 g\n\uf8f4\uf8f4\uf8f4\uf8f4\uf8f4\uf8fe\n0,g \u2264 x\nThus the shape of a triangle membership function is determined by the three parameters (a,b,c)\nandtheshapeofatrapezoidalmembershipfunctionisdeterminedbythefourparameters(d,e,f,g).\nTuning the membership functions requires adjustment of the values of these parameters.\nBased on the structure of the inputs and output of the fuzzy logic system, the membership\nfunctions of the three input variables x ,y ,\u03b8, and the output, steering rate \u03b8\u02d9 can be defined as:\na1 d1\n\u00b5 = f(x;0,dx1,dx2),\u00b5 = f(x;dx3,dx4,dx5),\u00b5 = f(x;dx6,dx7,2,2),\nx1 x2 x3\n\u00b5 = f(y;0,dy1,dy2),\u00b5 = f(y;dy3,dy4,dy5),\u00b5 = f(y;dy6,dy7,2,2),\ny1 y2 y3\n\u00b5 = f(\u03b8;\u2212a1,0,a1),\u00b5 = f(\u03b8;\u2212\u03c0,\u2212\u03c0,\u2212\u03c0/2,a2),\u00b5 = f(\u03b8;a2,\u03c0/2,\u03c0,\u03c0),\n\u03b81 \u03b82 \u03b83\n\u00b5 = f(\u03b8\u02d9;\u22121,\u2212s6,\u2212s5),\u00b5 = f(\u03b8\u02d9;\u2212s4,\u2212s3,\u2212s2),\u00b5 = f(\u03b8\u02d9;\u2212s1,0,s1),\n\u03b8\u02d91 \u03b8\u02d92 \u03b8\u02d93\n\u00b5 = f(\u03b8\u02d9;s2,s3,s4),\u00b5 = f(\u03b8\u02d9;s5,s6,1)\n\u03b8\u02d94 \u03b8\u02d95\nIn these expressions, some of the parameters are fixed (e.g., 0 for \u00b5 , 2 for \u00b5 ). These param-\nx1 x3\neters were not optimized because they define the boundary limit of the universe of discourse of\nmembership functions.\nThe output scaling factor is also very important to the fuzzy system. It plays a role equivalent\nto that of the control gain in a conventional control system and is therefore included in the design\nvariable set. The final design variable set selected is [dx1,...,dx7,dy1,...,dy7,a1,a2,s1,...,s6,sf],\nwhere sf represents the output scaling factor. There are a total of 23 parameters to be optimized\nin this design.\nAnother important issue for the optimization problem is to determine the cost function. In this\nresearch, the tuning was first performed for a skid-steering system. Later, the tuning was extended\nfor a front-wheel steering system to test the suitability of the developed algorithm for other vehicle\nplatforms. For both of the steering systems, the design variables were chosen as described above.\nHowever, different cost functions were chosen for different steering models as shown below.\n5.2. Tuning for a Skid-steering Vehicle\nFor a skid-steering vehicle, in particular the ATRV-Jr, the cost function was chosen as (3xa +\nlp\n2yd + yc + penalty), where y is the right front y coordinate of the vehicle. The penalty term\nhp hp c\n17\nis zero if no collision occurs during the reverse-motion, and it is a very high value if there is a\ncollision. The cost function considers not only the position of the AGV relative to the boundary of\nthe maneuvering space (by the terms 3xa and 2y d), but also the orientation of the vehicle (by the\nlp hp\nterm yc). The weights 3, 2 and 1 represent the relative importance of the three terms.\nhp\nA range for each of the design parameters was defined before the optimization. A GA was\nimplemented with a population size of 20 and 100 generations for this tuning. The chromosome\nencoding is with a floating-point representation. To illustrate the tuning results more clearly,\nFigures 21 to 24 show the membership functions obtained by GA optimization.\nMFS OF REVERSE PARKING INPUT: X DISTANCE\nS B VB\n1\n0.8\n0.6\n0.4\n0.2\n00 0.5 1 1.5 2 2.5\nXa1\nNOITCNUF\nPIHSREBMEM\nMFS OF REVERSE PARKING INPUT: Y DISTANCE\nS B VB\n1\n0.8\n0.6\n0.4\n0.2\n00 0.5 1 1.5 2 2.5\nYd1\nFigure 21: Membership Functions for Input\nVariable x \u2013 Skid Steering System\na1\nNOITCNUF\nPIHSREBMEM\nFigure 22: Membership Functions for Input\nVariable y \u2013 Skid Steering System\nd1\nMFS OF REVERSE PARKING INPUT: ORIENTATION ANGLE\nN Z P\n1\n0.8\n0.6\n0.4\n0.2\n0 \u22122 \u22121.5 \u22121 \u22120.5 0 0.5 1 1.5 2\nSTEERING ANGLE (RAD)\nNOITCNUF\nPIHSREBMEM\nMFS OF REVERSE PARKING OUTPUT: STEERING\nNB NM Z PM PB\n1\n0.8\n0.6\n0.4\n0.2\n\u221201.5 \u22121 \u22120.5 0 0.5 1 1.5\nSTEERING ANGLE RATE (RAD/S)\nFigure 23: Membership Functions for Input\n\u03b8 \u2013 Skid Steering System\nNOITCNUF\nPIHSREBMEM\nFigure 24: Membership Functions for Output\nVariable \u03b8\u02d9 \u2013 Skid Steering System\nTheobtainedmembershipfunctionsandscalingfactorwereusedforthesimulationofthereverse\nmotion. Even though there is no obvious improvement relative to the results obtained by extensive\nmanually tuning, the tuning process with the GA is more systemic and results in significant time\nsavings for the designers.\n18\n5.3. Tuning for a Front-wheel Steering Vehicle\nOne advantage of fuzzy logic control is that it can be easily transferred from one platform to\nanother with few modifications. The reverse-motion maneuvering algorithm previously developed\nfor a skid-steering system was also tuned for an AGV with front-wheel steering (i.e., Ackerman\nsteering) to test its suitability.\nThe kinematics of a front-wheel steering vehicle are significantly different from those of a skid\nsteering vehicle, and can be described as:\nx\u02d9 = vcos\u03b8cos\u03c6, (8)\ny\u02d9 = vsin\u03b8cos\u03c6, (9)\n\u03b8\u02d9 = vsin\u03c6/L, (10)\nwhere \u03c6 is the angle between the main axis of the vehicle and the front wheels, and L is the length\nof the wheel-base of the vehicle.\nThepreviouslydevelopedparallelparkingsystembasicallysimulatestherulesofahumandriver\nfor car-like front-wheel steering. Thus, the fuzzy control algorithm was expected to perform well\nwith specifically tuned membership functions and scaling factors for the front-wheel steering AGV\nwhile using the same set of rules. (This expectation was verified by simulation results as described\nbelow.)\nThe fitness function chosen for front-wheel steering system was selected as (x /l + y /h +\na p d p\n|\u03b8|+penalty). This fitness function is different from that of the skid steering system due to the\ndifferent kinematics of the two types of systems.\nThe dimension of the vehicle used in the simulation has a length over width ratio of 2.3846,\nobtained from a Pontiac Sedan. Assume the length of the vehicle is 0.775m, the same length as\nthe ATRV-Jr, then the width of the vehicle is 0.325m. A population size of 10 and 50 generations\nwere used for the GA implementation. Figures 25 to 28 show the membership functions obtained\nby GA optimization. The simulation results with the obtained membership functions and scaling\nfactor clearly showed that a fuzzy logic system developed for a skid steering vehicle performed well\nfor a front-wheel steering vehicle. If a GA was not used for the tuning, manual tuning with trial\nand error would have been necessitated.\n19\nMFS OF REVERSE PARKING INPUT: X DISTANCE\nS B VB\n1\n0.8\n0.6\n0.4\n0.2\n00 0.5 1 1.5 2 2.5\nXa1\nNOITCNUF\nPIHSREBMEM\nMFS OF REVERSE PARKING INPUT: Y DISTANCE\nS B VB\n1\n0.8\n0.6\n0.4\n0.2\n00 0.5 1 1.5 2 2.5\nYd1\nFigure 25: Membership Functions for Input\nVariable x \u2013 Front-wheel Steering System\na1\nNOITCNUF\nPIHSREBMEM\nFigure 26: Membership Functions for Input\nVariable y \u2013 Front-wheel Steering System\nd1\nMFS OF REVERSE PARKING INPUT: ORIENTATION ANGLE\nN Z P\n1\n0.8\n0.6\n0.4\n0.2\n0 \u22122 \u22121.5 \u22121 \u22120.5 0 0.5 1 1.5 2\nSTEERING ANGLE (RAD)\nNOITCNUF\nPIHSREBMEM\nMFS OF REVERSE PARKING OUTPUT: STEERING\nNB NM Z PM PB\n1\n0.8\n0.6\n0.4\n0.2\n\u221201.5 \u22121 \u22120.5 0 0.5 1 1.5\nSTEERING ANGLE RATE (RAD/S)\nFigure 27: Membership Functions for Input\nVariable \u03b8 \u2013 Front-wheel Steering System\nNOITCNUF\nPIHSREBMEM\nMFS OF REVERSE PARKING OUTPUT: STEERING\nNB NM Z PM PB\n1\n0.8\n0.6\n0.4\n0.2\n\u221201.5 \u22121 \u22120.5 0 0.5 1 1.5\nSTEERING ANGLE RATE (RAD/S)\nNOITCNUF\nPIHSREBMEM\nFigure 28: Membership Functions for Output\nVariable \u03b8\u02d9 \u2013 Front-wheel Steering System\n5.4. Size of the Parking Space\nThe size of parking space has significant impact on the degree of difficulty of parallel parking.\nReference[12]studiedparallelparkingintightsituationsbypathplanningforafront-wheelsteering\nvehicle. The minimum length of the parking space used was 100 cm with a vehicle length of 60 cm.\n(This corresponds to 1.67 times the length of the vehicle). Considering the width of this vehicle is\n34 cm, the ratio of length over width is 1.765.\nIt was verified by simulation that the larger the ratio of length over width, the easier the\nvehicle maneuvering into a parking space for front-wheel steering vehicles. To make the vehicles\ncomparable, a front-wheel steering vehicle with the same ratio was simulated with the fuzzy logic\nparallel parking algorithm. Simulation results showed that the developed algorithm has the ability\nto park the vehicle into a space with length 1.4 times the length of a vehicle.\n20\n6. Conclusions\nThis paper developed and tested a tight space, automatic parallel parking algorithm. The\nalgorithm is described in detail and experimental results show the effectiveness of the controllers.\nIn this paper, a genetic algorithm was also used for fine-tuning of the fuzzy logic controllers. The\ndeveloped genetic fuzzy system cannot only exempt human designers from the time-consuming\nmanual tuning process, but also provides a means to transfer the developed algorithm to different\nvehicle platforms.\nDisclaimers\nThe views and conclusions contained in this document are those of the authors and should\nnot be interpreted as representing the official policies, either expressed or implied, of the Army\nResearch Laboratory or the U. S. Government.\n21\nReferences\n[1] M.-R. Akbarzadeh-T, K. Kumbla, E. Tunstel, M. Jamshidi, Soft Computing for Autonomous\nRobotic Systems, Computers and Electrical Engineering 26 (1) (2000) 5-32.\n[2] A. Arslan and M. Kaya, Determination of Fuzzy Logic Membership Functions Using Genetic\nAlgorithms, Fuzzy Sets and Systems 118 (2001) 297-306.\n[3] D. Beasley, D.R. Bull and R.R. Martin, An Overview of Genetic Algorithms: Part 1, Funda-\nmentals, University Computing 15 (2) (1993) 58-69.\n[4] G.ChenandD.Zhang, Back-DrivingaTruckwithSuboptimalDistanceTrajectories: AFuzzy\nLogic Control Approach,IEEE Transactions on Fuzzy Systems 5 (3) (1997) 369-380.\n[5] C. Cheng, S. Chang and T. Li, Parallel-parking control of autonomous mobile robot, in:\nProceedings of the 23rd Annual International Conference on Industrial Electronics, Control,\nand Instrumentation, New Orleans, LA, November 1998, pp. 1305-1310.\n[6] W.A. Daxwanger and G.K. Schmidt, Skill-based visual parking control using neural and fuzzy\nnetworks,in: ProceedingsofIEEEInternationalConferenceonSystems,ManandCybernetics,\nVancouver, BC, Canada, October 1995, pp. 1659-1664.\n[7] D. Driankov and A. Saffiotti, Fuzzy Logic Techniques for Autonomous Vehicle Navigation,\nPhysica-Verlag Heidelberg, New York, 2001.\n[8] P. Goel, S.I. Roumeliotis and G.S. Sukhatme, Robust localization using relative and absolute\nposition estimates, in: Proceedings of IEEE International Conference on Intelligent Robots\nand Systems, Kyongju, South Korea, October 1999, pp. 1134-1140.\n[9] F. Hoffmann and G. Pfister, Evolutionary Design of a Fuzzy Knowledge Base for a Mobile\nRobot, International Journal of Approximate Reasoning 17 (4) (1997) 447-469.\n[10] R. Holve and P. Protzel, Reverse parking of a mobile car with fuzzy control, in: Proceedings\nof the 4th European Congress on Intelligent Techniques and Soft Computing, 1996, pp. 2171-\n2175.\n[11] A.Homaifar andE. McCormick, SimultaneousDesignof Membership Functionsand Rule Sets\nfor Fuzzy Controllers Using Genetic Algorithms, IEEE Transactions on Fuzzy Systems 3 (2)\n(1995) 129-139.\n[12] K. Jiang and L.D. Seneviratne, A sensor guided autonomous parking system for nonholonomic\nmobile robots, in: Proceedings of the 1999 IEEE International Conference on Robotics and\nAutomation, Detriot, MI, May 1999, pp. 311-316.\n[13] C.Laugier,TH.Fraichard,PH.Garnier,I.E.ParomtchikandA.Scheuer,Sensor-basedControl\nArchitecture for a Car-like Vehicle, Autonomous Robots 6 (1999) 165-185.\n[14] R. Li and Y. Zhang, Fuzzy Logic Controller Based on Genetic Algorithms, Fuzzy Sets and\nSystems, 83 (1996) 1-10.\n[15] S.H. Lian, Fuzzy logic control of an obstacle avoidance robot, in: Proceedings of the 5th IEEE\nInternational Conference on Fuzzy Systems, New Orleans, LA, September 1996, pp. 26-30.\n[16] L. Magdalena, Adapting the Gain of an FLC with Genetic Algorithms, International Journal\nof Approximate Reasoning 17 (4) (1997) 327-349.\n[17] H. Miyata, M. Ohki, Y. Yokouchi and M. Ohkita, Control of the Autonomous Mobile Robot\nDREAM-1 for a Parallel Parking, Mathematics and Computers in Simulation 41 (1-2) (1996)\n129-138.\n[18] M. Ohkita, H. Miyata, M. Miura and H. Kouno, Travelling experiment of an autonomous\nmobile robot for a flush parking, in: Proceedings of the 2nd IEEE International Conference\non Fuzzy Systems, San Francisco, CA, March 1993, pp. 327-332.\n[19] I.E. Paromtchik and C. Laugier, Autonomous parallel parking of nonholonomic vehicle, in:\nProceedings of the IEEE Intelligent Vehicles Symposium, Minneapolis, MN, April 1996, pp.\n3117-3122.\n[20] I.E.Paromtchikand C. Laugier, Motion generation and controlfor parking an autonomous ve-\nhicle,in: Proceedingsofthe1996IEEEInternationalConferenceonRoboticsandAutomation,\nTokyo, Japan, September 1996, pp. 13-18.\n[21] M.F. Selekwa and E.G. Collins, Jr., Centralized fuzzy behavior control for robot navigation,\nto appear in the Proceedings of the 2003 IEEE Symposium on Intelligent control, Houston,\nTX, October 2003.\n[22] R. Thrapp, C. Westbrook and D. Subramanian, Robust localization algorithms for an au-\ntonomous campus tour guide, in: Proceedings of the IEEE International Conference on\nRobotics and Automation, Seoul, South Korea, May 2001, pp. 2065-2071.\n[23] K. Wiktorowicz and R. Zajdel, A Fuzzy Navigation of a Mobile Robot, Systems Science 23 (4)\n(1997) 87-100.\n[24] J. Xu, G. Chen and M. Xie, Vision-guided automatic parking for smart car, in: Proceedings\nof the IEEE Intelligent Vehicles Symposium, Dearbon, MI, 2000, pp. 725-730.\n[25] J. Yen and N. Pfluger, A Fuzzy Logic Based Extension to Payton and Rosenblatt\u2019s Com-\nmand Fusion Method for Mobile Robot Navigation, IEEE Transactions on Systems, Man and\nCybernetics 25 (6) (1995) 971-978.\n[26] New Jersey Driver Manual, New Jersey Department of Transporation, see\nhttp://www.state.nj.us/mvs/dm99/99ch3g.htm.\n[27] ATRV-Jr All-Terrain Mobile Robot User\u2019s Guide, iRobot Corp., Somerville, MA, 2001.\n",
  "context": "researchers. Current approaches to solving this problem can be classified into two main categories:\n1) the path planning approach, where a feasible geometry path is planned in advance, taking into\naccounttheenvironmentalmodelaswellasthevehicle\u2019sdynamicsandconstraints,andthencontrol",
  "source_file": "resources\\Year 4\\fuzzy robust auto park.pdf",
  "line_numbers": [
    36,
    971
  ]
}