{
  "title": "howto-instrumentation",
  "language": "cpp",
  "topics": [
    "database",
    "networking",
    "data_structures",
    "web_dev"
  ],
  "purpose": "OnmacOS,youcanlistavailableDTraceprobesbyrunningaPythonprocessinthebackgroundandlistingallprobes madeavailablebythePythonprovider: $ python3.6 -q &",
  "code": "$ sudo dtrace -l -P python$! # or: dtrace -l -m python3.6\nID PROVIDER MODULE FUNCTION NAME\n29564 python18035 python3.6 _PyEval_EvalFrameDefault function-entry\n29565 python18035 python3.6 dtrace_function_entry function-entry\n29566 python18035 python3.6 _PyEval_EvalFrameDefault function-\n,\u2192return\n29567 python18035 python3.6 dtrace_function_return function-\n,\u2192return\n29568 python18035 python3.6 collect gc-done\n29569 python18035 python3.6 collect gc-start\n29570 python18035 python3.6 _PyEval_EvalFrameDefault line\n29571 python18035 python3.6 maybe_dtrace_line line\nOn Linux, you can verify if the SystemTap static markers are present in the built binary by seeing if it contains a\n\u201c.note.stapsdt\u201dsection.\n$ readelf -S ./python | grep .note.stapsdt\n[30] .note.stapsdt NOTE 0000000000000000 00308d78\nIfyou\u2019vebuiltPythonasasharedlibrary(withthe--enable-sharedconfigureoption),youneedtolookinstead\nwithinthesharedlibrary. Forexample:\n$ readelf -S libpython3.3dm.so.1.0 | grep .note.stapsdt\n[29] .note.stapsdt NOTE 0000000000000000 00365b68\nSufficientlymodernreadelfcanprintthemetadata:\n$ readelf -n ./python\nDisplaying notes found at file offset 0x00000254 with length 0x00000020:\nOwner Data size Description\nGNU 0x00000010 NT_GNU_ABI_TAG (ABI version tag)\nOS: Linux, ABI: 2.6.32\nDisplaying notes found at file offset 0x00000274 with length 0x00000024:\nOwner Data size Description\nGNU 0x00000014 NT_GNU_BUILD_ID (unique build ID\u2423\n(continuesonnextpage)\n2\n(continuedfrompreviouspage)\n,\u2192bitstring)\nBuild ID: df924a2b08a7e89f6e11251d4602022977af2670\nDisplaying notes found at file offset 0x002d6c30 with length 0x00000144:\nOwner Data size Description\nstapsdt 0x00000031 NT_STAPSDT (SystemTap probe\u2423\n,\u2192descriptors)\nProvider: python\nName: gc__start\nLocation: 0x00000000004371c3, Base: 0x0000000000630ce2, Semaphore:\u2423\n,\u21920x00000000008d6bf6\nArguments: -4@%ebx\nstapsdt 0x00000030 NT_STAPSDT (SystemTap probe\u2423\n,\u2192descriptors)\nProvider: python\nName: gc__done\nLocation: 0x00000000004374e1, Base: 0x0000000000630ce2, Semaphore:\u2423\n,\u21920x00000000008d6bf8\nArguments: -8@%rax\nstapsdt 0x00000045 NT_STAPSDT (SystemTap probe\u2423\n,\u2192descriptors)\nProvider: python\nName: function__entry\nLocation: 0x000000000053db6c, Base: 0x0000000000630ce2, Semaphore:\u2423\n,\u21920x00000000008d6be8\nArguments: 8@%rbp 8@%r12 -4@%eax\nstapsdt 0x00000046 NT_STAPSDT (SystemTap probe\u2423\n,\u2192descriptors)\nProvider: python\nName: function__return\nLocation: 0x000000000053dba8, Base: 0x0000000000630ce2, Semaphore:\u2423\n,\u21920x00000000008d6bea\nArguments: 8@%rbp 8@%r12 -4@%eax\nThe above metadata contains information for SystemTap describing how it can patch strategically placed machine\ncodeinstructionstoenablethetracinghooksusedbyaSystemTapscript.\n2 Static DTrace probes\nThefollowingexampleDTracescriptcanbeusedtoshowthecall/returnhierarchyofaPythonscript,onlytracing\nwithintheinvocationofafunctioncalled\u201cstart\u201d. Inotherwords,import-timefunctioninvocationsarenotgoingto\nbelisted:\nself int indent;\npython$target:::function-entry\n/copyinstr(arg1) == \"start\"/\n{\nself->trace = 1;\n}\npython$target:::function-entry\n/self->trace/\n{\nprintf(\"%d\\t%*s:\", timestamp, 15, probename);\nprintf(\"%*s\", self->indent, \"\");\n(continuesonnextpage)\n3\n(continuedfrompreviouspage)\nprintf(\"%s:%s:%d\\n\", basename(copyinstr(arg0)), copyinstr(arg1), arg2);\nself->indent++;\n}\npython$target:::function-return\n/self->trace/\n{\nself->indent--;\nprintf(\"%d\\t%*s:\", timestamp, 15, probename);\nprintf(\"%*s\", self->indent, \"\");\nprintf(\"%s:%s:%d\\n\", basename(copyinstr(arg0)), copyinstr(arg1), arg2);\n}\npython$target:::function-return\n/copyinstr(arg1) == \"start\"/\n{\nself->trace = 0;\n}\nItcanbeinvokedlikethis:\n$ sudo dtrace -q -s call_stack.d -c \"python3.6 script.py\"\nTheoutputlookslikethis:\n156641360502280 function-entry:call_stack.py:start:23\n156641360518804 function-entry: call_stack.py:function_1:1\n156641360532797 function-entry: call_stack.py:function_3:9\n156641360546807 function-return: call_stack.py:function_3:10\n156641360563367 function-return: call_stack.py:function_1:2\n156641360578365 function-entry: call_stack.py:function_2:5\n156641360591757 function-entry: call_stack.py:function_1:1\n156641360605556 function-entry: call_stack.py:function_3:9\n156641360617482 function-return: call_stack.py:function_3:10\n156641360629814 function-return: call_stack.py:function_1:2\n156641360642285 function-return: call_stack.py:function_2:6\n156641360656770 function-entry: call_stack.py:function_3:9\n156641360669707 function-return: call_stack.py:function_3:10\n156641360687853 function-entry: call_stack.py:function_4:13\n156641360700719 function-return: call_stack.py:function_4:14\n156641360719640 function-entry: call_stack.py:function_5:18\n156641360732567 function-return: call_stack.py:function_5:21\n156641360747370 function-return:call_stack.py:start:28\n3 Static SystemTap markers\nThelow-levelwaytousetheSystemTapintegrationistousethestaticmarkersdirectly. Thisrequiresyoutoexplicitly\nstatethebinaryfilecontainingthem.\nForexample,thisSystemTapscriptcanbeusedtoshowthecall/returnhierarchyofaPythonscript:\nprobe process(\"python\").mark(\"function__entry\") {\nfilename = user_string($arg1);\nfuncname = user_string($arg2);\nlineno = $arg3;\n(continuesonnextpage)\n4\n(continuedfrompreviouspage)\nprintf(\"%s => %s in %s:%d\\\\n\",\nthread_indent(1), funcname, filename, lineno);\n}\nprobe process(\"python\").mark(\"function__return\") {\nfilename = user_string($arg1);\nfuncname = user_string($arg2);\nlineno = $arg3;\nprintf(\"%s <= %s in %s:%d\\\\n\",\nthread_indent(-1), funcname, filename, lineno);\n}\nItcanbeinvokedlikethis:\n$ stap \\\nshow-call-hierarchy.stp \\\n-c \"./python test.py\"\nTheoutputlookslikethis:\n11408 python(8274): => __contains__ in Lib/_abcoll.py:362\n11414 python(8274): => __getitem__ in Lib/os.py:425\n11418 python(8274): => encode in Lib/os.py:490\n11424 python(8274): <= encode in Lib/os.py:493\n11428 python(8274): <= __getitem__ in Lib/os.py:426\n11433 python(8274): <= __contains__ in Lib/_abcoll.py:366\nwherethecolumnsare:\n\u2022 timeinmicrosecondssincestartofscript\n\u2022 nameofexecutable\n\u2022 PIDofprocess\nandtheremainderindicatesthecall/returnhierarchyasthescriptexecutes.\nFora--enable-sharedbuildofCPython,themarkersarecontainedwithinthelibpythonsharedlibrary,andthe\nprobe\u2019sdottedpathneedstoreflectthis. Forexample,thislinefromtheaboveexample:\nprobe process(\"python\").mark(\"function__entry\") {\nshouldinsteadread:\nprobe process(\"python\").library(\"libpython3.6dm.so.1.0\").mark(\"function__entry\") {\n(assumingadebugbuildofCPython3.6)\n4 Available static markers\nfunction__entry(str filename, str funcname, int lineno)\nThis marker indicates that execution of a Python function has begun. It is only triggered for pure-Python\n(bytecode)functions.\nThefilename,functionname,andlinenumberareprovidedbacktothetracingscriptaspositionalarguments,\nwhichmustbeaccessedusing$arg1,$arg2,$arg3:\n\u2022 $arg1: (const char *)filename,accessibleusinguser_string($arg1)\n\u2022 $arg2: (const char *)functionname,accessibleusinguser_string($arg2)\n5\n\u2022 $arg3: intlinenumber\nfunction__return(str filename, str funcname, int lineno)\nThismarkeristheconverseoffunction__entry(),andindicatesthatexecutionofaPythonfunctionhas\nended(eitherviareturn,orviaanexception). Itisonlytriggeredforpure-Python(bytecode)functions.\nTheargumentsarethesameasforfunction__entry()\nline(str filename, str funcname, int lineno)\nThismarkerindicatesaPythonlineisabouttobeexecuted. Itistheequivalentofline-by-linetracingwitha\nPythonprofiler. ItisnottriggeredwithinCfunctions.\nTheargumentsarethesameasforfunction__entry().\ngc__start(int generation)\nFireswhenthePythoninterpreterstartsagarbagecollectioncycle. arg0isthegenerationtoscan,likegc.\ncollect().\ngc__done(long collected)\nFireswhenthePythoninterpreterfinishesagarbagecollectioncycle. arg0isthenumberofcollectedobjects.\nimport__find__load__start(str modulename)\nFiresbeforeimportlibattemptstofindandloadthemodule. arg0isthemodulename.\nAddedinversion3.7.\nimport__find__load__done(str modulename, int found)\nFiresafterimportlib\u2019sfind_and_loadfunctioniscalled. arg0isthemodulename,arg1indicatesifmodule\nwassuccessfullyloaded.\nAddedinversion3.7.\naudit(str event, void *tuple)\nFires when sys.audit() or PySys_Audit() is called. arg0 is the event name as C string, arg1 is a\nPyObjectpointertoatupleobject.\nAddedinversion3.8.\n5 SystemTap Tapsets\nThehigher-levelwaytousetheSystemTapintegrationistousea\u201ctapset\u201d: SystemTap\u2019sequivalentofalibrary,which\nhidessomeofthelower-leveldetailsofthestaticmarkers.\nHereisatapsetfile,basedonanon-sharedbuildofCPython:\n/*\nProvide a higher-level wrapping around the function__entry and\nfunction__return markers:\n\\*/\nprobe python.function.entry = process(\"python\").mark(\"function__entry\")\n{\nfilename = user_string($arg1);\nfuncname = user_string($arg2);\nlineno = $arg3;\nframeptr = $arg4\n}\nprobe python.function.return = process(\"python\").mark(\"function__return\")\n{\nfilename = user_string($arg1);\nfuncname = user_string($arg2);\nlineno = $arg3;\n(continuesonnextpage)\n6\n(continuedfrompreviouspage)\nframeptr = $arg4\n}\nIfthisfileisinstalledinSystemTap\u2019stapsetdirectory(e.g. /usr/share/systemtap/tapset),thentheseaddi-\ntionalprobepointsbecomeavailable:\npython.function.entry(str filename, str funcname, int lineno, frameptr)\nThisprobepointindicatesthatexecutionofaPythonfunctionhasbegun. Itisonlytriggeredforpure-Python\n(bytecode)functions.\npython.function.return(str filename, str funcname, int lineno, frameptr)\nThis probe point is the converse of python.function.return, and indicates that execution of a Python\nfunctionhasended(eitherviareturn,orviaanexception). Itisonlytriggeredforpure-Python(bytecode)\nfunctions.\n6 Examples\nThisSystemTapscriptusesthetapsetabovetomorecleanlyimplementtheexamplegivenaboveoftracingthePython\nfunction-callhierarchy,withoutneedingtodirectlynamethestaticmarkers:\nprobe python.function.entry\n{\nprintf(\"%s => %s in %s:%d\\n\",\nthread_indent(1), funcname, filename, lineno);\n}\nprobe python.function.return\n{\nprintf(\"%s <= %s in %s:%d\\n\",\nthread_indent(-1), funcname, filename, lineno);\n}\nThefollowingscriptusesthetapsetabovetoprovideatop-likeviewofallrunningCPythoncode,showingthetop\n20mostfrequentlyenteredbytecodeframes,eachsecond,acrossthewholesystem:\nglobal fn_calls;\nprobe python.function.entry\n{\nfn_calls[pid(), filename, funcname, lineno] += 1;\n}\nprobe timer.ms(1000) {\nprintf(\"\\033[2J\\033[1;1H\") /* clear screen \\*/\nprintf(\"%6s %80s %6s %30s %6s\\n\",\n\"PID\", \"FILENAME\", \"LINE\", \"FUNCTION\", \"CALLS\")\nforeach ([pid, filename, funcname, lineno] in fn_calls- limit 20) {\nprintf(\"%6d %80s %6d %30s %6d\\n\",\npid, filename, lineno, funcname,\nfn_calls[pid, filename, funcname, lineno]);\n}\ndelete fn_calls;\n}\n7\n",
  "context": "OnmacOS,youcanlistavailableDTraceprobesbyrunningaPythonprocessinthebackgroundandlistingallprobes\nmadeavailablebythePythonprovider:\n$ python3.6 -q &",
  "source_file": "resources\\Year 3\\Python\\howto-instrumentation.pdf",
  "line_numbers": [
    42,
    306
  ]
}