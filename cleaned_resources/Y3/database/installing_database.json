{
  "title": "installing",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "C.3.3 Asynchronoussocketservices .",
  "code": "C.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\nC.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\nC.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\nC.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\nC.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\nC.3.11 strtodanddtoa. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\nC.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\nC.3.13 expat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\nC.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\nC.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\nC.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\ni\nC.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\nC.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\nC.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\nC.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\nC.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\nD Copyright 51\nIndex 53\nii\nInstallingPythonModules,Release3.13.3\nEmail\ndistutils-sig@python.org\nAsapopularopensourcedevelopmentproject,Pythonhasanactivesupportingcommunityofcontributorsandusers\nthatalsomaketheirsoftwareavailableforotherPythondeveloperstouseunderopensourcelicenseterms.\nThisallowsPythonuserstoshareandcollaborateeffectively,benefitingfromthesolutionsothershavealreadycreated\nto common (and sometimes even rare!) problems, as well as potentially contributing their own solutions to the\ncommonpool.\nThisguidecoverstheinstallationpartoftheprocess. ForaguidetocreatingandsharingyourownPythonprojects,\nrefertothePythonpackaginguserguide.\n(cid:174) Note\nFor corporate and other institutional users, be aware that many organisations have their own policies around\nusingandcontributingtoopensourcesoftware. Pleasetakesuchpoliciesintoaccountwhenmakinguseofthe\ndistributionandinstallationtoolsprovidedwithPython.\nCONTENTS 1\nInstallingPythonModules,Release3.13.3\n2 CONTENTS\nCHAPTER\nONE\nKEY TERMS\n\u2022 pip is the preferred installer program. Starting with Python 3.4, it is included by default with the Python\nbinaryinstallers.\n\u2022 Avirtualenvironmentisasemi-isolatedPythonenvironmentthatallowspackagestobeinstalledforusebya\nparticularapplication,ratherthanbeinginstalledsystemwide.\n\u2022 venv is the standard tool for creating virtual environments, and has been part of Python since Python 3.3.\nStartingwithPython3.4,itdefaultstoinstallingpipintoallcreatedvirtualenvironments.\n\u2022 virtualenvisathirdpartyalternative(andpredecessor)tovenv. Itallowsvirtualenvironmentstobeused\nonversionsofPythonpriorto3.4,whicheitherdon\u2019tprovidevenvatall,oraren\u2019tabletoautomaticallyinstall\npipintocreatedenvironments.\n\u2022 ThePythonPackageIndexisapublicrepositoryofopensourcelicensedpackagesmadeavailableforuseby\notherPythonusers.\n\u2022 the Python Packaging Authority is the group of developers and documentation authors responsible for the\nmaintenanceandevolutionofthestandardpackagingtoolsandtheassociatedmetadataandfileformatstan-\ndards. Theymaintainavarietyoftools,documentation,andissuetrackersonGitHub.\n\u2022 distutils is the original build and distribution system first added to the Python standard library in 1998.\nWhiledirectuseofdistutilsisbeingphasedout,itstilllaidthefoundationforthecurrentpackagingand\ndistributioninfrastructure,anditnotonlyremainspartofthestandardlibrary,butitsnamelivesoninother\nways(suchasthenameofthemailinglistusedtocoordinatePythonpackagingstandardsdevelopment).\nChangedinversion3.5: Theuseofvenvisnowrecommendedforcreatingvirtualenvironments.\n(cid:181) Seealso\nPythonPackagingUserGuide: Creatingandusingvirtualenvironments\n3\nInstallingPythonModules,Release3.13.3\n4 Chapter1. Keyterms\nCHAPTER\nTWO\nBASIC USAGE\nThestandardpackagingtoolsarealldesignedtobeusedfromthecommandline.\nThe following command will install the latest version of a module and its dependencies from the Python Package\nIndex:\npython -m pip install SomePackage\n(cid:174) Note\nFor POSIX users (including macOS and Linux users), the examples in this guide assume the use of a virtual\nenvironment.\nForWindowsusers,theexamplesinthisguideassumethattheoptiontoadjustthesystemPATHenvironment\nvariablewasselectedwheninstallingPython.\nIt\u2019s also possible to specify an exact or minimum version directly on the command line. When using comparator\noperators such as >, < or some other special character which get interpreted by shell, the package name and the\nversionshouldbeenclosedwithindoublequotes:\npython -m pip install SomePackage==1.0.4 # specific version\npython -m pip install \"SomePackage>=1.0.4\" # minimum version\nNormally,ifasuitablemoduleisalreadyinstalled,attemptingtoinstallitagainwillhavenoeffect. Upgradingexisting\nmodulesmustberequestedexplicitly:\npython -m pip install --upgrade SomePackage\nMoreinformationandresourcesregardingpipanditscapabilitiescanbefoundinthePythonPackagingUserGuide.\nCreationofvirtualenvironmentsisdonethroughthevenvmodule. Installingpackagesintoanactivevirtualenvi-\nronmentusesthecommandsshownabove.\n(cid:181) Seealso\nPythonPackagingUserGuide: InstallingPythonDistributionPackages\n5\nInstallingPythonModules,Release3.13.3\n6 Chapter2. Basicusage\nCHAPTER\nTHREE\nHOW DO I \u2026?\nThesearequickanswersorlinksforsomecommontasks.\n3.1 \u2026 install pip in versions of Python prior to Python 3.4?\nPythononlystartedbundlingpipwithPython3.4. Forearlierversions,pipneedstobe\u201cbootstrapped\u201dasdescribed\ninthePythonPackagingUserGuide.\n(cid:181) Seealso\nPythonPackagingUserGuide: RequirementsforInstallingPackages\n3.2 \u2026 install packages just for the current user?\nPassingthe--useroptiontopython -m pip installwillinstallapackagejustforthecurrentuser,ratherthan\nforallusersofthesystem.\n3.3 \u2026 install scientific Python packages?\nAnumberofscientificPythonpackageshavecomplexbinarydependencies,andaren\u2019tcurrentlyeasytoinstallusing\npipdirectly. Atthispointintime, itwilloftenbeeasierforuserstoinstallthesepackagesbyothermeansrather\nthanattemptingtoinstallthemwithpip.\n(cid:181) Seealso\nPythonPackagingUserGuide: InstallingScientificPackages\n3.4 \u2026 work with multiple versions of Python installed in parallel?\nOnLinux,macOS,andotherPOSIXsystems,usetheversionedPythoncommandsincombinationwiththe-mswitch\ntoruntheappropriatecopyofpip:\npython2 -m pip install SomePackage # default Python 2\npython2.7 -m pip install SomePackage # specifically Python 2.7\npython3 -m pip install SomePackage # default Python 3\npython3.4 -m pip install SomePackage # specifically Python 3.4\nAppropriatelyversionedpipcommandsmayalsobeavailable.\nOnWindows,usethepyPythonlauncherincombinationwiththe-mswitch:\n7\nInstallingPythonModules,Release3.13.3\npy -2 -m pip install SomePackage # default Python 2\npy -2.7 -m pip install SomePackage # specifically Python 2.7\npy -3 -m pip install SomePackage # default Python 3\npy -3.4 -m pip install SomePackage # specifically Python 3.4\n8 Chapter3. HowdoI\u2026?\nCHAPTER\nFOUR\nCOMMON INSTALLATION ISSUES\n4.1 Installing into the system Python on Linux\nOn Linux systems, a Python installation will typically be included as part of the distribution. Installing into this\nPythoninstallationrequiresrootaccesstothesystem, andmayinterferewiththeoperationofthesystempackage\nmanagerandothercomponentsofthesystemifacomponentisunexpectedlyupgradedusingpip.\nOn such systems, it is often better to use a virtual environment or a per-user installation when installing packages\nwithpip.\n4.2 Pip not installed\nItispossiblethatpipdoesnotgetinstalledbydefault. Onepotentialfixis:\npython -m ensurepip --default-pip\nTherearealsoadditionalresourcesforinstallingpip.\n4.3 Installing binary extensions\nPythonhastypicallyreliedheavilyonsourcebaseddistribution,withendusersbeingexpectedtocompileextension\nmodulesfromsourceaspartoftheinstallationprocess.\nWiththeintroductionofsupportforthebinarywheelformat,andtheabilitytopublishwheelsforatleastWindows\nandmacOSthroughthePythonPackageIndex, thisproblemisexpectedtodiminishovertime, asusersaremore\nregularlyabletoinstallpre-builtextensionsratherthanneedingtobuildthemthemselves.\nSomeofthesolutionsforinstallingscientificsoftwarethatarenotyetavailableaspre-builtwheelfilesmayalsohelp\nwithobtainingotherbinaryextensionswithoutneedingtobuildthemlocally.\n(cid:181) Seealso\nPythonPackagingUserGuide: BinaryExtensions\n9\nInstallingPythonModules,Release3.13.3\n10 Chapter4. Commoninstallationissues\nAPPENDIX\nA\nGLOSSARY\n>>>\nThe default Python prompt of the interactive shell. Often seen for code examples which can be executed\ninteractivelyintheinterpreter.\n...\nCanreferto:\n\u2022 ThedefaultPythonpromptoftheinteractiveshellwhenenteringthecodeforanindentedcodeblock,\nwhen within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or\ntriplequotes),orafterspecifyingadecorator.\n\u2022 TheEllipsisbuilt-inconstant.\nabstractbaseclass\nAbstractbaseclassescomplementduck-typingbyprovidingawaytodefineinterfaceswhenothertechniques\nlikehasattr()wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual\nsubclasses, which are classes that don\u2019t inherit from a class but are still recognized by isinstance() and\nissubclass();seetheabcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-\ntures(inthecollections.abcmodule),numbers(inthenumbersmodule),streams(intheiomodule),\nimportfindersandloaders(intheimportlib.abcmodule). YoucancreateyourownABCswiththeabc\nmodule.\nannotation\nAlabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention\nasatypehint.\nAnnotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-\ntributes, andfunctionsarestoredinthe__annotations__specialattributeofmodules, classes, andfunc-\ntions,respectively.\nSeevariableannotation,functionannotation,PEP484andPEP526,whichdescribethisfunctionality. Also\nseeannotations-howtoforbestpracticesonworkingwithannotations.\nargument\nAvaluepassedtoafunction(ormethod)whencallingthefunction. Therearetwokindsofargument:\n\u2022 keywordargument: anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa\nvalueinadictionaryprecededby**. Forexample,3and5arebothkeywordargumentsinthefollowing\ncallstocomplex():\ncomplex(real=3, imag=5)\ncomplex(**{'real': 3, 'imag': 5})\n\u2022 positionalargument: anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe\nbeginningofanargumentlistand/orbepassedaselementsofaniterableprecededby*. Forexample,3\nand5arebothpositionalargumentsinthefollowingcalls:\ncomplex(3, 5)\ncomplex(*(3, 5))\n11\nInstallingPythonModules,Release3.13.3\nArguments are assigned to the named local variables in a function body. See the calls section for the rules\ngoverningthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument;theevaluated\nvalueisassignedtothelocalvariable.\nSeealsotheparameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\nandPEP362.\nasynchronouscontextmanager\nAnobjectwhichcontrolstheenvironmentseeninanasync withstatementbydefining__aenter__()and\n__aexit__()methods. IntroducedbyPEP492.\nasynchronousgenerator\nAfunctionwhichreturnsanasynchronousgeneratoriterator. Itlookslikeacoroutinefunctiondefinedwith\nasync def except that it contains yield expressions for producing a series of values usable in an async\nforloop.\nUsuallyreferstoanasynchronousgeneratorfunction, butmayrefertoanasynchronousgeneratoriterator in\nsomecontexts. Incaseswheretheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\nAnasynchronousgeneratorfunctionmaycontainawaitexpressionsaswellasasync for,andasync with\nstatements.\nasynchronousgeneratoriterator\nAnobjectcreatedbyaasynchronousgeneratorfunction.\nThisisanasynchronousiteratorwhichwhencalledusingthe__anext__()methodreturnsanawaitableobject\nwhichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenextyieldexpression.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npendingtry-statements). Whentheasynchronousgeneratoriteratoreffectivelyresumeswithanotherawaitable\nreturnedby__anext__(),itpicksupwhereitleftoff. SeePEP492andPEP525.\nasynchronousiterable\nAn object, that can be used in an async for statement. Must return an asynchronous iterator from its\n__aiter__()method. IntroducedbyPEP492.\nasynchronousiterator\nAn object that implements the __aiter__() and __anext__() methods. __anext__() must return an\nawaitableobject. async forresolvestheawaitablesreturnedbyanasynchronousiterator\u2019s__anext__()\nmethoduntilitraisesaStopAsyncIterationexception. IntroducedbyPEP492.\nattribute\nAvalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,\nifanobjectohasanattributeaitwouldbereferencedaso.a.\nItispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample\nusingsetattr(),iftheobjectallowsit. Suchanattributewillnotbeaccessibleusingadottedexpression,\nandwouldinsteadneedtoberetrievedwithgetattr().\nawaitable\nAnobjectthatcanbeusedinanawaitexpression. Canbeacoroutineoranobjectwithan__await__()\nmethod. SeealsoPEP492.\nBDFL\nBenevolentDictatorForLife,a.k.a. GuidovanRossum,Python\u2019screator.\nbinaryfile\nAfileobjectabletoreadandwritebytes-likeobjects. Examplesofbinaryfilesarefilesopenedinbinarymode\n('rb','wb'or'rb+'),sys.stdin.buffer,sys.stdout.buffer,andinstancesofio.BytesIOand\ngzip.GzipFile.\nSeealsotextfileforafileobjectabletoreadandwritestrobjects.\nborrowedreference\nInPython\u2019sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot\nownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection\ncanremovethelaststrongreferencetotheobjectandsodestroyit.\n12 AppendixA. Glossary\nInstallingPythonModules,Release3.13.3\nCallingPy_INCREF()ontheborrowedreferenceisrecommendedtoconvertittoastrongreferencein-place,\nexceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. ThePy_NewRef()\nfunctioncanbeusedtocreateanewstrongreference.\nbytes-likeobject\nAn object that supports the bufferobjects and can export a C-contiguous buffer. This includes all bytes,\nbytearray,andarray.arrayobjects,aswellasmanycommonmemoryviewobjects. Bytes-likeobjects\ncanbeusedforvariousoperationsthatworkwithbinarydata;theseincludecompression,savingtoabinary\nfile,andsendingoverasocket.\nSomeoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas\u201cread-write\nbytes-likeobjects\u201d. Examplemutablebufferobjectsincludebytearrayandamemoryviewofabytearray.\nOther operations require the binary data to be stored in immutable objects (\u201cread-only bytes-like objects\u201d);\nexamplesoftheseincludebytesandamemoryviewofabytesobject.\nbytecode\nPythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython\ninterpreter. Thebytecodeisalsocachedin.pycfilessothatexecutingthesamefileisfasterthesecondtime\n(recompilation from source to bytecode can be avoided). This \u201cintermediate language\u201d is said to run on a\nvirtualmachinethatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare\nnotexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.\nAlistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.\ncallable\nAcallableisanobjectthatcanbecalled,possiblywithasetofarguments(seeargument),withthefollowing\nsyntax:\ncallable(argument1, argument2, argumentN)\nAfunction,andbyextensionamethod,isacallable. Aninstanceofaclassthatimplementsthe__call__()\nmethodisalsoacallable.\ncallback\nAsubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.\nclass\nA template for creating user-defined objects. Class definitions normally contain method definitions which\noperateoninstancesoftheclass.\nclassvariable\nAvariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).\nclosurevariable\nAfreevariablereferencedfromanestedscopethatisdefinedinanouterscoperatherthanbeingresolvedat\nruntime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to\nallowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.\nForexample,intheinnerfunctioninthefollowingcode,bothxandprintarefreevariables,butonlyxis\naclosurevariable:\ndef outer():\nx = 0\ndef inner():\nnonlocal x\nx += 1\nprint(x)\nreturn inner\nDuetothecodeobject.co_freevarsattribute(which,despiteitsname,onlyincludesthenamesofclosure\nvariablesratherthanlistingallreferencedfreevariables),themoregeneralfreevariabletermissometimesused\nevenwhentheintendedmeaningistoreferspecificallytoclosurevariables.\n13\nInstallingPythonModules,Release3.13.3\ncomplexnumber\nAnextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand\nanimaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof-1),often\nwritten i in mathematics or j in engineering. Python has built-in support for complex numbers, which are\nwrittenwiththislatternotation;theimaginarypartiswrittenwithajsuffix,e.g.,3+1j. Togetaccesstocom-\nplexequivalentsofthemathmodule,usecmath. Useofcomplexnumbersisafairlyadvancedmathematical\nfeature. Ifyou\u2019renotawareofaneedforthem,it\u2019salmostcertainyoucansafelyignorethem.\ncontext\nThistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:\n\u2022 Thetemporarystateorenvironmentestablishedbyacontextmanagerviaawithstatement.\n\u2022 The collection of keyvalue bindings associated with a particular contextvars.Context object and\naccessedviaContextVarobjects. Alsoseecontextvariable.\n\u2022 Acontextvars.Contextobject. Alsoseecurrentcontext.\ncontextmanagementprotocol\nThe__enter__()and__exit__()methodscalledbythewithstatement. SeePEP343.\ncontextmanager\nAnobjectwhichimplementsthecontextmanagementprotocol andcontrolstheenvironmentseenina with\nstatement. SeePEP343.\ncontextvariable\nA variable whose value depends on which context is the current context. Values are accessed via\ncontextvars.ContextVarobjects. Contextvariablesareprimarilyusedtoisolatestatebetweenconcur-\nrentasynchronoustasks.\ncontiguous\nAbufferisconsideredcontiguousexactlyifitiseitherC-contiguousorFortrancontiguous. Zero-dimensional\nbuffersareCandFortrancontiguous. Inone-dimensionalarrays,theitemsmustbelaidoutinmemorynext\ntoeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the\nlastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous\narrays,thefirstindexvariesthefastest.\ncoroutine\nCoroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at\nanotherpoint. Coroutinescanbeentered,exited,andresumedatmanydifferentpoints. Theycanbeimple-\nmentedwiththeasync defstatement. SeealsoPEP492.\ncoroutinefunction\nAfunctionwhichreturnsacoroutineobject. Acoroutinefunctionmaybedefinedwiththeasync defstate-\nment, and may contain await, async for, and async with keywords. These were introduced by PEP\n492.\nCPython\nThecanonicalimplementationofthePythonprogramminglanguage,asdistributedonpython.org. Theterm\n\u201cCPython\u201disusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.\ncurrentcontext\nThecontext (contextvars.Contextobject)thatiscurrentlyusedbyContextVarobjectstoaccess(get\nor set) the values of context variables. Each thread has its own current context. Frameworks for executing\nasynchronous tasks (see asyncio) associate each task with a context which becomes the current context\nwheneverthetaskstartsorresumesexecution.\ndecorator\nAfunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe@wrappersyntax.\nCommonexamplesfordecoratorsareclassmethod()andstaticmethod().\nThedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-\nalent:\n14 AppendixA. Glossary\nInstallingPythonModules,Release3.13.3\ndef f(arg):\n...\nf = staticmethod(f)\n@staticmethod\ndef f(arg):\n...\nThe same concept exists for classes, but is less commonly used there. See the documentation for function\ndefinitionsandclassdefinitionsformoreaboutdecorators.\ndescriptor\nAnyobjectwhichdefinesthemethods__get__(),__set__(),or__delete__(). Whenaclassattribute\nis a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.b to get,\nset or delete an attribute looks up the object named b in the class dictionary for a, but if b is a descriptor,\ntherespectivedescriptormethodgetscalled. Understandingdescriptorsisakeytoadeepunderstandingof\nPythonbecausetheyarethebasisformanyfeaturesincludingfunctions,methods,properties,classmethods,\nstaticmethods,andreferencetosuperclasses.\nFormoreinformationaboutdescriptors\u2019methods,seedescriptorsortheDescriptorHowToGuide.\ndictionary\nAnassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith__hash__()\nand__eq__()methods. CalledahashinPerl.\ndictionarycomprehension\nA compact way to process all or part of the elements in an iterable and return a dictionary with the re-\nsults. results = {n: n ** 2 for n in range(10)}generatesadictionarycontainingkeynmapped\ntovaluen ** 2. Seecomprehensions.\ndictionaryview\nTheobjectsreturnedfromdict.keys(),dict.values(),anddict.items()arecalleddictionaryviews.\nTheyprovideadynamicviewonthedictionary\u2019sentries,whichmeansthatwhenthedictionarychanges,the\nview reflects these changes. To force the dictionary view to become a full list use list(dictview). See\ndict-views.\ndocstring\nAstringliteralwhichappearsasthefirstexpressioninaclass,functionormodule. Whileignoredwhenthe\nsuiteisexecuted,itisrecognizedbythecompilerandputintothe__doc__attributeoftheenclosingclass,\nfunctionormodule. Sinceitisavailableviaintrospection,itisthecanonicalplacefordocumentationofthe\nobject.\nduck-typing\nAprogrammingstylewhichdoesnotlookatanobject\u2019stypetodetermineifithastherightinterface;instead,\nthe method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be\na duck.\u201d) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility\nby allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). (Note,\nhowever, that duck-typing can be complemented with abstract base classes.) Instead, it typically employs\nhasattr()testsorEAFPprogramming.\nEAFP\nEasier to ask for forgiveness than permission. This common Python coding style assumes the existence of\nvalid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is\ncharacterizedbythepresenceofmanytryandexceptstatements. ThetechniquecontrastswiththeLBYL\nstylecommontomanyotherlanguagessuchasC.\nexpression\nApieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof\nexpressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In\ncontrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealsostatementswhich\ncannotbeusedasexpressions,suchaswhile. Assignmentsarealsostatements,notexpressions.\n15\nInstallingPythonModules,Release3.13.3\nextensionmodule\nAmodulewritteninCorC++,usingPython\u2019sCAPItointeractwiththecoreandwithusercode.\nf-string\nString literals prefixed with 'f' or 'F' are commonly called \u201cf-strings\u201d which is short for formatted string\nliterals. SeealsoPEP498.\nfileobject\nAnobjectexposingafile-orientedAPI(withmethodssuchasread()orwrite())toanunderlyingresource.\nDependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof\nstorageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).\nFileobjectsarealsocalledfile-likeobjectsorstreams.\nThereareactuallythreecategoriesoffileobjects: rawbinaryfiles, bufferedbinaryfilesandtextfiles. Their\ninterfaces are defined in the io module. The canonical way to create a file object is by using the open()\nfunction.\nfile-likeobject\nAsynonymforfileobject.\nfilesystemencodinganderrorhandler\nEncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto\ntheoperatingsystem.\nThefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding\nfailstoprovidethisguarantee,APIfunctionscanraiseUnicodeError.\nThe sys.getfilesystemencoding() and sys.getfilesystemencodeerrors() functions can be\nusedtogetthefilesystemencodinganderrorhandler.\nThefilesystemencodinganderrorhandlerareconfiguredatPythonstartupbythePyConfig_Read()func-\ntion: seefilesystem_encodingandfilesystem_errorsmembersofPyConfig.\nSeealsothelocaleencoding.\nfinder\nAnobjectthattriestofindtheloaderforamodulethatisbeingimported.\nTherearetwotypesoffinder: metapathfindersforusewithsys.meta_path,andpathentryfindersforuse\nwithsys.path_hooks.\nSeefinders-and-loadersandimportlibformuchmoredetail.\nfloordivision\nMathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris//. Forexample,the\nexpression11 // 4evaluatesto2incontrasttothe2.75returnedbyfloattruedivision. Notethat(-11)\n// 4is-3becausethatis-2.75roundeddownward. SeePEP238.\nfreethreading\nAthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.\nThisisincontrasttotheglobalinterpreterlockwhichallowsonlyonethreadtoexecutePythonbytecodeata\ntime. SeePEP703.\nfreevariable\nFormally, as defined in the language execution model, a free variable is any variable used in a namespace\nwhichisnotalocalvariableinthatnamespace. Seeclosurevariableforanexample. Pragmatically,duetothe\nnameofthecodeobject.co_freevarsattribute,thetermisalsosometimesusedasasynonymforclosure\nvariable.\nfunction\nAseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormoreargumentswhich\nmaybeusedintheexecutionofthebody. Seealsoparameter,method,andthefunctionsection.\nfunctionannotation\nAnannotationofafunctionparameterorreturnvalue.\n16 AppendixA. Glossary\nInstallingPythonModules,Release3.13.3\nFunction annotations are usually used for type hints: for example, this function is expected to take two int\nargumentsandisalsoexpectedtohaveanintreturnvalue:\ndef sum_two_numbers(a: int, b: int) -> int:\nreturn a + b\nFunctionannotationsyntaxisexplainedinsectionfunction.\nSeevariableannotationandPEP484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest\npracticesonworkingwithannotations.\n__future__\nAfuturestatement,from __future__ import <feature>,directsthecompilertocompilethecurrent\nmoduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The__future__\nmoduledocumentsthepossiblevaluesoffeature. Byimportingthismoduleandevaluatingitsvariables,you\ncanseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:\n>>> import __future__\n>>> __future__.division\n_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)\ngarbagecollection\nTheprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference\ncountingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector\ncanbecontrolledusingthegcmodule.\ngenerator\nA function which returns a generator iterator. It looks like a normal function except that it contains yield\nexpressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe\nnext()function.\nUsuallyreferstoageneratorfunction,butmayrefertoageneratoriterator insomecontexts. Incaseswhere\ntheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\ngeneratoriterator\nAnobjectcreatedbyageneratorfunction.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npending try-statements). When the generator iterator resumes, it picks up where it left off (in contrast to\nfunctionswhichstartfreshoneveryinvocation).\ngeneratorexpression\nAnexpressionthatreturnsaniterator. Itlookslikeanormalexpressionfollowedbyaforclausedefininga\nloop variable, range, andan optional if clause. The combinedexpressiongeneratesvaluesfor an enclosing\nfunction:\n>>> sum(i*i for i in range(10)) # sum of squares 0, 1, 4, ... 81\n285\ngenericfunction\nAfunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-\nplementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.\nSeealsothesingledispatchglossaryentry,thefunctools.singledispatch()decorator,andPEP443.\ngenerictype\nAtypethatcanbeparameterized; typicallyacontainerclasssuchaslistordict. Usedfortypehintsand\nannotations.\nFormoredetails,seegenericaliastypes,PEP483,PEP484,PEP585,andthetypingmodule.\nGIL\nSeeglobalinterpreterlock.\n17\nInstallingPythonModules,Release3.13.3\nglobalinterpreterlock\nThe mechanism used by the CPython interpreter to assure that only one thread executes Python bytecode at\na time. This simplifies the CPython implementation by making the object model (including critical built-in\ntypessuchasdict)implicitlysafeagainstconcurrentaccess. Lockingtheentireinterpretermakesiteasier\nfortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor\nmachines.\nHowever,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen\ndoingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen\ndoingI/O.\nAsofPython3.13, theGILcanbedisabledusingthe--disable-gilbuildconfiguration. Afterbuilding\nPythonwiththisoption,codemustberunwith-X gil=0oraftersettingthePYTHON_GIL=0environment\nvariable. This feature enables improved performance for multi-threaded applications and makes it easier to\nusemulti-coreCPUsefficiently. Formoredetails,seePEP703.\nhash-basedpyc\nAbytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto\ndetermineitsvalidity. Seepyc-invalidation.\nhashable\nAnobjectishashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa__hash__()\nmethod), and can be compared to other objects (it needs an __eq__() method). Hashable objects which\ncompareequalmusthavethesamehashvalue.\nHashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe\nhashvalueinternally.\nMost of Python\u2019s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)\narenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.\nObjectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except\nwiththemselves),andtheirhashvalueisderivedfromtheirid().\nIDLE\nAnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-\nronmentwhichshipswiththestandarddistributionofPython.\nimmortal\nImmortalobjectsareaCPythonimplementationdetailintroducedinPEP683.\nIfanobjectisimmortal,itsreferencecount isnevermodified,andthereforeitisneverdeallocatedwhilethe\ninterpreterisrunning. Forexample,TrueandNoneareimmortalinCPython.\nimmutable\nAnobjectwithafixedvalue. Immutableobjectsincludenumbers,stringsandtuples. Suchanobjectcannot\nbealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein\nplaceswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.\nimportpath\nAlistoflocations(orpathentries)thataresearchedbythepathbasedfinderformodulestoimport. During\nimport,thislistoflocationsusuallycomesfromsys.path,butforsubpackagesitmayalsocomefromthe\nparentpackage\u2019s__path__attribute.\nimporting\nTheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.\nimporter\nAnobjectthatbothfindsandloadsamodule;bothafinderandloaderobject.\ninteractive\nPythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter\nprompt, immediately execute them and see their results. Just launch python with no arguments (possibly\nby selecting it fromyour computer\u2019s mainmenu). It isa very powerfulway to testout new ideas orinspect\nmodulesandpackages(rememberhelp(x)). Formoreoninteractivemode,seetut-interac.\n18 AppendixA. Glossary\nInstallingPythonModules,Release3.13.3\ninterpreted\nPythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause\nofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly\ncreating an executable which is then run. Interpreted languages typically have a shorter development/debug\ncyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealsointeractive.\ninterpretershutdown\nWhenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated\nresources, suchasmodulesandvariouscriticalinternalstructures. Italsomakesseveralcallstothegarbage\ncollector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-\ncutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction\nanymore(commonexamplesarelibrarymodulesorthewarningsmachinery).\nThemainreasonforinterpretershutdownisthatthe__main__moduleorthescriptbeingrunhasfinished\nexecuting.\niterable\nAnobjectcapableofreturningitsmembersoneatatime. Examplesofiterablesincludeallsequencetypes\n(such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any\nclassesyoudefinewithan__iter__()methodorwitha__getitem__()methodthatimplementssequence\nsemantics.\nIterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(),\n\u2026). Whenaniterableobjectispassedasanargumenttothebuilt-infunctioniter(),itreturnsaniterator\nfortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot\nnecessarytocalliter()ordealwithiteratorobjectsyourself. Theforstatementdoesthatautomaticallyfor\nyou,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealsoiterator,\nsequence,andgenerator.\niterator\nAn object representing a stream of data. Repeated calls to the iterator\u2019s __next__() method (or passing\nittothebuilt-infunctionnext())returnsuccessiveitemsinthestream. Whennomoredataareavailablea\nStopIterationexceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls\ntoits__next__()methodjustraiseStopIterationagain. Iteratorsarerequiredtohavean__iter__()\nmethodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces\nwhereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A\ncontainerobject(suchasalist)producesafreshnewiteratoreachtimeyoupassittotheiter()function\noruseitinaforloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused\ninthepreviousiterationpass,makingitappearlikeanemptycontainer.\nMoreinformationcanbefoundintypeiter.\nCPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine\n__iter__(). Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof\niteratoroperations.\nkeyfunction\nAkeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,\nlocale.strxfrm()isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.\nA number of tools in Python accept key functions to control how elements are ordered or grouped. They\ninclude min(), max(), sorted(), list.sort(), heapq.merge(), heapq.nsmallest(), heapq.\nnlargest(),anditertools.groupby().\nThere are several ways to create a key function. For example. the str.lower() method can serve as a\nkey function for case insensitive sorts. Alternatively, a key function can be built from a lambda expression\nsuchaslambda r: (r[0], r[2]). Also,operator.attrgetter(),operator.itemgetter(),and\noperator.methodcaller()arethreekeyfunctionconstructors. SeetheSortingHOWTOforexamples\nofhowtocreateandusekeyfunctions.\nkeywordargument\nSeeargument.\n19\nInstallingPythonModules,Release3.13.3\nlambda\nAnanonymousinlinefunctionconsistingofasingleexpressionwhichisevaluatedwhenthefunctioniscalled.\nThesyntaxtocreatealambdafunctionislambda [parameters]: expression\nLBYL\nLookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This\nstylecontrastswiththeEAFPapproachandischaracterizedbythepresenceofmanyifstatements.\nIn a multi-threaded environment, the LBYL approach can risk introducing a race condition between \u201cthe\nlooking\u201dand\u201ctheleaping\u201d. Forexample, thecode, if key in mapping: return mapping[key] can\nfailifanotherthreadremoveskeyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved\nwithlocksorbyusingtheEAFPapproach.\nlexicalanalyzer\nFormalnameforthetokenizer;seetoken.\nlist\nAbuilt-inPythonsequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist\nsinceaccesstoelementsisO(1).\nlistcomprehension\nAcompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result\n= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0]generatesalistofstringscon-\ntainingevenhexnumbers(0x..) intherangefrom0to255. Theifclauseisoptional. Ifomitted,allelements\ninrange(256)areprocessed.\nloader\nAn object that loads a module. It must define the exec_module() and create_module() methods to\nimplementtheLoaderinterface. Aloaderistypicallyreturnedbyafinder. Seealso:\n\u2022 finders-and-loaders\n\u2022 importlib.abc.Loader\n\u2022 PEP302\nlocaleencoding\nOn Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.\nLC_CTYPE, new_locale).\nOnWindows,itistheANSIcodepage(ex: \"cp1252\").\nOnAndroidandVxWorks,Pythonuses\"utf-8\"asthelocaleencoding.\nlocale.getencoding()canbeusedtogetthelocaleencoding.\nSeealsothefilesystemencodinganderrorhandler.\nmagicmethod\nAninformalsynonymforspecialmethod.\nmapping\nA container object that supports arbitrary key lookups and implements the methods specified in the\ncollections.abc.Mapping or collections.abc.MutableMapping abstract base classes. Exam-\nples include dict, collections.defaultdict, collections.OrderedDict and collections.\nCounter.\nmetapathfinder\nAfinderreturnedbyasearchofsys.meta_path. Metapathfindersarerelatedto,butdifferentfrompath\nentryfinders.\nSeeimportlib.abc.MetaPathFinderforthemethodsthatmetapathfindersimplement.\nmetaclass\nTheclassofaclass. Classdefinitionscreateaclassname, aclassdictionary, andalistofbaseclasses. The\nmetaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-\ngramming languages provide a default implementation. What makes Python special is that it is possible to\ncreatecustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide\n20 AppendixA. Glossary\nInstallingPythonModules,Release3.13.3\npowerful,elegantsolutions. Theyhavebeenusedforloggingattributeaccess,addingthread-safety,tracking\nobjectcreation,implementingsingletons,andmanyothertasks.\nMoreinformationcanbefoundinmetaclasses.\nmethod\nAfunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod\nwillgettheinstanceobjectasitsfirstargument(whichisusuallycalledself). Seefunctionandnestedscope.\nmethodresolutionorder\nMethod Resolution Order is the order in which base classes are searched for a member during lookup. See\npython_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.\nmodule\nAnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary\nPythonobjects. ModulesareloadedintoPythonbytheprocessofimporting.\nSeealsopackage.\nmodulespec\nAnamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceofimportlib.\nmachinery.ModuleSpec.\nSeealsomodule-specs.\nMRO\nSeemethodresolutionorder.\nmutable\nMutableobjectscanchangetheirvaluebutkeeptheirid(). Seealsoimmutable.\nnamedtuple\nTheterm\u201cnamedtuple\u201dappliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare\nalsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.\nSeveral built-in types are named tuples, including the values returned by time.localtime() and os.\nstat(). Anotherexampleissys.float_info:\n>>> sys.float_info[1] # indexed access\n1024\n>>> sys.float_info.max_exp # named field access\n1024\n>>> isinstance(sys.float_info, tuple) # kind of tuple\nTrue\nSome named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be\ncreated from a regular class definition that inherits from tuple and that defines named fields. Such a class\ncanbewrittenbyhand,oritcanbecreatedbyinheritingtyping.NamedTuple,orwiththefactoryfunction\ncollections.namedtuple(). Thelattertechniquesalsoaddsomeextramethodsthatmaynotbefound\ninhand-writtenorbuilt-innamedtuples.\nnamespace\nThe place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,\nglobal and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support\nmodularitybypreventingnamingconflicts. Forinstance,thefunctionsbuiltins.openandos.open()are\ndistinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear\nwhich module implements a function. For instance, writing random.seed() or itertools.islice()\nmakesitclearthatthosefunctionsareimplementedbytherandomanditertoolsmodules,respectively.\nnamespacepackage\nA package which serves only as a container for subpackages. Namespace packages may have no physical\nrepresentation,andspecificallyarenotlikearegularpackagebecausetheyhaveno__init__.pyfile.\nNamespacepackagesallowseveralindividuallyinstallablepackagestohaveacommonparentpackage. Oth-\nerwise,itisrecommendedtousearegularpackage.\n21\nInstallingPythonModules,Release3.13.3\nFormoreinformation,seePEP420andreference-namespace-package.\nSeealsomodule.\nnestedscope\nThe ability to refer to a variable in an enclosing definition. For instance, a function defined inside another\nfunctioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference\nandnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables\nreadandwritetotheglobalnamespace. Thenonlocalallowswritingtoouterscopes.\nnew-styleclass\nOld name for the flavor of classes now used for all class objects. In earlier Python versions, only\nnew-style classes could use Python\u2019s newer, versatile features like __slots__, descriptors, properties,\n__getattribute__(),classmethods,andstaticmethods.\nobject\nAnydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany\nnew-styleclass.\noptimizedscope\nA scope where target local variable names are reliably known to the compiler when the code is compiled,\nallowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,\ncoroutines,comprehensions,andgeneratorexpressionsareoptimizedinthisfashion. Note: mostinterpreter\noptimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames\narerestrictedtooptimizedscopes.\npackage\nA Python module which can contain submodules or recursively, subpackages. Technically, a package is a\nPythonmodulewitha__path__attribute.\nSeealsoregularpackageandnamespacepackage.\nparameter\nAnamedentityinafunction(ormethod)definitionthatspecifiesanargument (orinsomecases,arguments)\nthatthefunctioncanaccept. Therearefivekindsofparameter:\n\u2022 positional-or-keyword: specifiesanargumentthatcanbepassedeitherpositionallyorasakeywordargu-\nment. Thisisthedefaultkindofparameter,forexamplefooandbarinthefollowing:\ndef func(foo, bar=None): ...\n\u2022 positional-only: specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters\ncanbedefinedbyincludinga/characterintheparameterlistofthefunctiondefinitionafterthem,for\nexampleposonly1andposonly2inthefollowing:\ndef func(posonly1, posonly2, /, positional_or_keyword): ...\n\u2022 keyword-only: specifiesanargumentthatcanbesuppliedonlybykeyword. Keyword-onlyparameters\ncanbedefinedbyincludingasinglevar-positionalparameterorbare*intheparameterlistofthefunction\ndefinitionbeforethem,forexamplekw_only1andkw_only2inthefollowing:\ndef func(arg, *, kw_only1, kw_only2): ...\n\u2022 var-positional: specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition\ntoanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby\nprependingtheparameternamewith*,forexampleargsinthefollowing:\ndef func(*args, **kwargs): ...\n\u2022 var-keyword: specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-\nwordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending\ntheparameternamewith**,forexamplekwargsintheexampleabove.\n22 AppendixA. Glossary\nInstallingPythonModules,Release3.13.3\nParameters can specify both optional and required arguments, as well as default values for some optional\narguments.\nSeealsotheargumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\ntheinspect.Parameterclass,thefunctionsection,andPEP362.\npathentry\nAsinglelocationontheimportpathwhichthepathbasedfinderconsultstofindmodulesforimporting.\npathentryfinder\nA finder returned by a callable on sys.path_hooks (i.e. a path entry hook) which knows how to locate\nmodulesgivenapathentry.\nSeeimportlib.abc.PathEntryFinderforthemethodsthatpathentryfindersimplement.\npathentryhook\nAcallableonthesys.path_hookslistwhichreturnsapathentryfinderifitknowshowtofindmoduleson\naspecificpathentry.\npathbasedfinder\nOneofthedefaultmetapathfinderswhichsearchesanimportpathformodules.\npath-likeobject\nAn object representing a file system path. A path-like object is either a str or bytes object representing\na path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike\nprotocol can be converted to a str or bytes file system path by calling the os.fspath() function; os.\nfsdecode() and os.fsencode() can be used to guarantee a str or bytes result instead, respectively.\nIntroducedbyPEP519.\nPEP\nPythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,\nordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical\nspecificationandarationaleforproposedfeatures.\nPEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity\ninputonanissue, andfordocumentingthedesigndecisionsthathavegoneintoPython. ThePEPauthoris\nresponsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.\nSeePEP1.\nportion\nA set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as\ndefinedinPEP420.\npositionalargument\nSeeargument.\nprovisionalAPI\nA provisional API is one which has been deliberately excluded from the standard library\u2019s backwards com-\npatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked\nprovisional, backwards incompatible changes (up to and including removal of the interface) may occur if\ndeemednecessarybycoredevelopers. Suchchangeswillnotbemadegratuitously\u2013theywilloccuronlyif\nseriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.\nEven for provisional APIs, backwards incompatible changes are seen as a \u201csolution of last resort\u201d - every\nattemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.\nThisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign\nerrorsforextendedperiodsoftime. SeePEP411formoredetails.\nprovisionalpackage\nSeeprovisionalAPI.\nPython3000\nNicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe\ndistantfuture.) Thisisalsoabbreviated\u201cPy3k\u201d.\n23\nInstallingPythonModules,Release3.13.3\nPythonic\nAnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan\nimplementingcodeusingconceptscommontootherlanguages. Forexample,acommonidiominPythonis\ntoloopoverallelementsofaniterableusingaforstatement. Manyotherlanguagesdon\u2019thavethistypeof\nconstruct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:\nfor i in range(len(food)):\nprint(food[i])\nAsopposedtothecleaner,Pythonicmethod:\nfor piece in food:\nprint(piece)\nqualifiedname\nAdottednameshowingthe\u201cpath\u201dfromamodule\u2019sglobalscopetoaclass,functionormethoddefinedinthat\nmodule, as defined in PEP 3155. For top-level functions and classes, the qualified name is the same as the\nobject\u2019sname:\n>>> class C:\n... class D:\n... def meth(self):\n... pass\n...\n>>> C.__qualname__\n'C'\n>>> C.D.__qualname__\n'C.D'\n>>> C.D.meth.__qualname__\n'C.D.meth'\nWhenusedtorefertomodules,thefullyqualifiednamemeanstheentiredottedpathtothemodule,including\nanyparentpackages,e.g. email.mime.text:\n>>> import email.mime.text\n>>> email.mime.text.__name__\n'email.mime.text'\nreferencecount\nThenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.\nSome objects are immortal and have reference counts that are never modified, and therefore the objects are\nneverdeallocated. ReferencecountingisgenerallynotvisibletoPythoncode, butitisakeyelementofthe\nCPythonimplementation. Programmerscancallthesys.getrefcount()functiontoreturnthereference\ncountforaparticularobject.\nregularpackage\nAtraditionalpackage,suchasadirectorycontainingan__init__.pyfile.\nSeealsonamespacepackage.\nREPL\nAnacronymforthe\u201cread\u2013eval\u2013printloop\u201d,anothernamefortheinteractiveinterpretershell.\n__slots__\nAdeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating\ninstancedictionaries. Thoughpopular,thetechniqueissomewhattrickytogetrightandisbestreservedfor\nrarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.\nsequence\nAn iterable which supports efficient element access using integer indices via the __getitem__() special\nmethod and defines a __len__() method that returns the length of the sequence. Some built-in sequence\n24 AppendixA. Glossary\nInstallingPythonModules,Release3.13.3\ntypesarelist,str,tuple,andbytes. Notethatdictalsosupports__getitem__()and__len__(),\nbut is considered a mapping rather than a sequence because the lookups use arbitrary hashable keys rather\nthanintegers.\nThecollections.abc.Sequenceabstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust\n__getitem__()and__len__(),addingcount(),index(),__contains__(),and__reversed__().\nTypes that implement this expanded interface can be registered explicitly using register(). For more\ndocumentationonsequencemethodsgenerally,seeCommonSequenceOperations.\nsetcomprehension\nAcompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results\n= {c for c in 'abracadabra' if c not in 'abc'}generatesthesetofstrings{'r', 'd'}. See\ncomprehensions.\nsingledispatch\nAformofgenericfunctiondispatchwheretheimplementationischosenbasedonthetypeofasingleargument.\nslice\nAnobjectusuallycontainingaportionofasequence. Asliceiscreatedusingthesubscriptnotation,[]with\ncolons between numbers when several are given, such as in variable_name[1:3:5]. The bracket (sub-\nscript)notationusessliceobjectsinternally.\nsoftdeprecated\nAsoftdeprecatedAPIshouldnotbeusedinnewcode,butitissafeforalreadyexistingcodetouseit. The\nAPIremainsdocumentedandtested,butwillnotbeenhancedfurther.\nSoftdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.\nSeePEP387: SoftDeprecation.\nspecialmethod\nAmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such\nmethodshavenamesstartingandendingwithdoubleunderscores. Specialmethodsaredocumentedinspe-\ncialnames.\nstatement\nAstatementispartofasuite(a\u201cblock\u201dofcode). Astatementiseitheranexpressionoroneofseveralconstructs\nwithakeyword,suchasif,whileorfor.\nstatictypechecker\nAnexternaltoolthatreadsPythoncodeandanalyzesit, lookingforissuessuchasincorrecttypes. Seealso\ntypehintsandthetypingmodule.\nstrongreference\nIn Python\u2019s C API, a strong reference is a reference to an object which is owned by the code holding the\nreference. ThestrongreferenceistakenbycallingPy_INCREF()whenthereferenceiscreatedandreleased\nwithPy_DECREF()whenthereferenceisdeleted.\nThePy_NewRef()functioncanbeusedtocreateastrongreferencetoanobject. Usually,thePy_DECREF()\nfunctionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking\nonereference.\nSeealsoborrowedreference.\ntextencoding\nAstringinPythonisasequenceofUnicodecodepoints(inrangeU+0000\u2013U+10FFFF).Tostoreortransfer\nastring,itneedstobeserializedasasequenceofbytes.\nSerializingastringintoasequenceofbytesisknownas\u201cencoding\u201d,andrecreatingthestringfromthesequence\nofbytesisknownas\u201cdecoding\u201d.\nThereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas\u201ctextencodings\u201d.\ntextfile\nAfileobjectabletoreadandwritestrobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream\nandhandlesthetextencodingautomatically. Examplesoftextfilesarefilesopenedintextmode('r'or'w'),\nsys.stdin,sys.stdout,andinstancesofio.StringIO.\n25\nInstallingPythonModules,Release3.13.3\nSeealsobinaryfileforafileobjectabletoreadandwritebytes-likeobjects.\ntoken\nA small unit of source code, generated by the lexical analyzer (also called the tokenizer). Names, numbers,\nstrings,operators,newlinesandsimilararerepresentedbytokens.\nThe tokenize module exposes Python\u2019s lexical analyzer. The token module contains information on the\nvarioustypesoftokens.\ntriple-quotedstring\nAstringwhichisboundbythreeinstancesofeitheraquotationmark(\u201d)oranapostrophe(\u2018). Whiletheydon\u2019t\nprovide any functionality not available with single-quoted strings, they are useful for a number of reasons.\nTheyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines\nwithouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.\ntype\nThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject\u2019stypeis\naccessibleasits__class__attributeorcanberetrievedwithtype(obj).\ntypealias\nAsynonymforatype,createdbyassigningthetypetoanidentifier.\nTypealiasesareusefulforsimplifyingtypehints. Forexample:\ndef remove_gray_shades(\ncolors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\npass\ncouldbemademorereadablelikethis:\nColor = tuple[int, int, int]\ndef remove_gray_shades(colors: list[Color]) -> list[Color]:\npass\nSeetypingandPEP484,whichdescribethisfunctionality.\ntypehint\nAnannotationthatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn\nvalue.\nTypehintsareoptionalandarenotenforcedbyPythonbuttheyareusefultostatictypecheckers. Theycan\nalsoaidIDEswithcodecompletionandrefactoring.\nType hints of global variables, class attributes, and functions, but not local variables, can be accessed using\ntyping.get_type_hints().\nSeetypingandPEP484,whichdescribethisfunctionality.\nuniversalnewlines\nAmannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix\nend-of-lineconvention'\\n',theWindowsconvention'\\r\\n',andtheoldMacintoshconvention'\\r'. See\nPEP278andPEP3116,aswellasbytes.splitlines()foranadditionaluse.\nvariableannotation\nAnannotationofavariableoraclassattribute.\nWhenannotatingavariableoraclassattribute,assignmentisoptional:\nclass C:\nfield: 'annotation'\nVariableannotationsareusuallyusedfortypehints: forexamplethisvariableisexpectedtotakeintvalues:\n26 AppendixA. Glossary\nInstallingPythonModules,Release3.13.3\ncount: int = 0\nVariableannotationsyntaxisexplainedinsectionannassign.\nSeefunctionannotation,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto\nforbestpracticesonworkingwithannotations.\nvirtualenvironment\nAcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade\nPythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon\nthesamesystem.\nSeealsovenv.\nvirtualmachine\nAcomputerdefinedentirelyinsoftware. Python\u2019svirtualmachineexecutesthebytecodeemittedbythebyte-\ncodecompiler.\nZenofPython\nListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.\nThelistingcanbefoundbytyping\u201cimport this\u201dattheinteractiveprompt.\n27\nInstallingPythonModules,Release3.13.3\n28 AppendixA. Glossary\nAPPENDIX\nB\nABOUT THIS DOCUMENTATION\nPython\u2019sdocumentationisgeneratedfromreStructuredTextsourcesusingSphinx,adocumentationgeneratororigi-\nnallycreatedforPythonandnowmaintainedasanindependentproject.\nDevelopment of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you\nwanttocontribute,pleasetakealookatthereporting-bugspageforinformationonhowtodoso. Newvolunteers\narealwayswelcome!\nManythanksgoto:\n\u2022 FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandauthorofmuchofthecontent;\n\u2022 theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;\n\u2022 FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.\nB.1 Contributors to the Python documentation\nManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.\nSeeMisc/ACKSinthePythonsourcedistributionforapartiallistofcontributors.\nItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation\n\u2013ThankYou!\n29\nInstallingPythonModules,Release3.13.3\n30 AppendixB. Aboutthisdocumentation\nAPPENDIX\nC\nHISTORY AND LICENSE\nC.1 History of the software\nPythonwascreatedintheearly1990sbyGuidovanRossumatStichtingMathematischCentrum(CWI,seehttps:\n//www.cwi.nl)intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython\u2019sprincipalauthor,\nalthoughitincludesmanycontributionsfromothers.\nIn1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,seehttps:\n//www.cnri.reston.va.us)inReston,Virginiawherehereleasedseveralversionsofthesoftware.\nInMay2000,GuidoandthePythoncoredevelopmentteammovedtoBeOpen.comtoformtheBeOpenPythonLabs\nteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations,whichbecameZopeCorpo-\nration. In2001,thePythonSoftwareFoundation(PSF,seehttps://www.python.org/psf/)wasformed,anon-profit\norganization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring\nmemberofthePSF.\nAllPythonreleasesareOpenSource(seehttps://opensource.orgfortheOpenSourceDefinition). Historically,most,\nbutnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.\nRelease Derivedfrom Year Owner GPL-compatible? (1)\n0.9.0thru1.2 n/a 1991-1995 CWI yes\n1.3thru1.5.2 1.2 1995-1999 CNRI yes\n1.6 1.5.2 2000 CNRI no\n2.0 1.6 2000 BeOpen.com no\n1.6.1 1.6 2001 CNRI yes(2)\n2.1 2.0+1.6.1 2001 PSF no\n2.0.1 2.0+1.6.1 2001 PSF yes\n2.1.1 2.1+2.0.1 2001 PSF yes\n2.1.2 2.1.1 2002 PSF yes\n2.1.3 2.1.2 2002 PSF yes\n2.2andabove 2.1.1 2001-now PSF yes\n(cid:174) Note\n(1) GPL-compatibledoesn\u2019tmeanthatwe\u2019redistributingPythonundertheGPL.AllPythonlicenses,unlike\nthe GPL, let you distribute a modified version without making your changes open source. The GPL-\ncompatible licenses make it possible to combine Python with other software that is released under the\nGPL;theothersdon\u2019t.\n(2) AccordingtoRichardStallman,1.6.1isnotGPL-compatible,becauseitslicensehasachoiceoflawclause.\nAccordingtoCNRI,however, Stallman\u2019slawyerhastoldCNRI\u2019slawyerthat1.6.1is\u201cnotincompatible\u201d\nwiththeGPL.\nThankstothemanyoutsidevolunteerswhohaveworkedunderGuido\u2019sdirectiontomakethesereleasespossible.\n31\nInstallingPythonModules,Release3.13.3\nC.2 Terms and conditions for accessing or otherwise using Python\nPythonsoftwareanddocumentationarelicensedunderthePythonSoftwareFoundationLicenseVersion2.\nStartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF\nLicenseVersion2andtheZero-ClauseBSDlicense.\nSomesoftwareincorporatedintoPythonisunderdifferentlicenses. Thelicensesarelistedwithcodefallingunder\nthatlicense. SeeLicensesandAcknowledgementsforIncorporatedSoftwareforanincompletelistoftheselicenses.\nC.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\nthe Individual or Organization (\"Licensee\") accessing and otherwise using this\nsoftware (\"Python\") in source or binary form and its associated documentation.\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative\nversion, provided, however, that PSF's License Agreement and PSF's notice of\ncopyright, i.e., \"Copyright \u00a9 2001-2024 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python or any part thereof, and wants to make the\nderivative work available to others as provided herein, then Licensee hereby\nagrees to include in any such work a brief summary of the changes made to\u2423\n,\u2192Python.\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\nPSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. Nothing in this License Agreement shall be deemed to create any relationship\nof agency, partnership, or joint venture between PSF and Licensee. This License\nAgreement does not grant permission to use PSF trademarks or trade name in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.\n8. By copying, installing or otherwise using Python, Licensee agrees\nto be bound by the terms and conditions of this License Agreement.\n32 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\nC.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nBEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n(\"Licensee\") accessing and otherwise using this software in source or binary\nform and its associated documentation (\"the Software\").\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\nBeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\nto reproduce, analyze, test, perform and/or display publicly, prepare derivative\nworks, distribute, and otherwise use the Software alone or in any derivative\nversion, provided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\nBEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\nMODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\nADVISED OF THE POSSIBILITY THEREOF.\n5. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n6. This License Agreement shall be governed by and interpreted in all respects\nby the law of the State of California, excluding conflict of law provisions.\nNothing in this License Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between BeOpen and Licensee. This License\nAgreement does not grant permission to use BeOpen trademarks or trade names in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party. As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the permissions\ngranted on that web page.\n7. By copying, installing or otherwise using the software, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\nC.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n1. This LICENSE AGREEMENT is between the Corporation for National Research\nInitiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n(\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using Python 1.6.1 software in source or binary form and its\nassociated documentation.\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python 1.6.1 alone or in any derivative version,\nprovided, however, that CNRI's License Agreement and CNRI's notice of copyright,\ni.e., \"Copyright \u00a9 1995-2001 Corporation for National Research Initiatives; All\n(continuesonnextpage)\nC.2. TermsandconditionsforaccessingorotherwiseusingPython 33\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\nRights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\nprepared by Licensee. Alternately, in lieu of CNRI's License Agreement,\nLicensee may substitute the following text (omitting the quotes): \"Python 1.6.1\nis made available subject to the terms and conditions in CNRI's License\nAgreement. This Agreement together with Python 1.6.1 may be located on the\ninternet using the following unique, persistent identifier (known as a handle):\n1895.22/1013. This Agreement may also be obtained from a proxy server on the\ninternet using the following URL: http://hdl.handle.net/1895.22/1013\".\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python 1.6.1 or any part thereof, and wants to make the derivative\nwork available to others as provided herein, then Licensee hereby agrees to\ninclude in any such work a brief summary of the changes made to Python 1.6.1.\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI\nMAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,\nBUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\nOF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\nPYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. This License Agreement shall be governed by the federal intellectual property\nlaw of the United States, including without limitation the federal copyright\nlaw, and, to the extent such U.S. federal law does not apply, by the law of the\nCommonwealth of Virginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based on Python\n1.6.1 that incorporate non-separable material that was previously distributed\nunder the GNU General Public License (GPL), the law of the Commonwealth of\nVirginia shall govern this License Agreement only as to issues arising under or\nwith respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in\nthis License Agreement shall be deemed to create any relationship of agency,\npartnership, or joint venture between CNRI and Licensee. This License Agreement\ndoes not grant permission to use CNRI trademarks or trade name in a trademark\nsense to endorse or promote products or services of Licensee, or any third\nparty.\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\nor otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\nconditions of this License Agreement.\nC.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nCopyright \u00a9 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands. All rights reserved.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\n(continuesonnextpage)\n34 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\nC.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTA-\nTION\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3 Licenses and Acknowledgements for Incorporated Software\nThissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated\ninthePythondistribution.\nC.3.1 Mersenne Twister\nThe_randomCextensionunderlyingtherandommoduleincludescodebasedonadownloadfromhttp://www.math.\nsci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. Thefollowingaretheverbatimcommentsfromthe\noriginalcode:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 35\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\nC.3.2 Sockets\nThesocketmoduleusesthefunctions,getaddrinfo(),andgetnameinfo(),whicharecodedinseparatesource\nfilesfromtheWIDEProject,https://www.wide.ad.jp/.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n36 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\nC.3.3 Asynchronous socket services\nThetest.support.asynchatandtest.support.asyncoremodulescontainthefollowingnotice:\nCopyright 1996 by Sam Rushing\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nC.3.4 Cookie management\nThehttp.cookiesmodulecontainsthefollowingnotice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3.5 Execution tracing\nThetracemodulecontainsthefollowingnotice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr... reserved and offered to the public under the terms of the\nPython 2.2 license.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 37\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\nC.3.6 UUencode and UUdecode functions\nTheuucodeccontainsthefollowingnotice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\nbetween ascii and binary. This results in a 1000-fold speedup. The C\nversion is still 5 times faster, though.\n- Arguments more compliant with Python standard\n38 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\nC.3.7 XML Remote Procedure Calls\nThexmlrpc.clientmodulecontainsthefollowingnotice:\nThe XML-RPC client interface is\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\nC.3.8 test_epoll\nThetest.test_epollmodulecontainsthefollowingnotice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 39\nInstallingPythonModules,Release3.13.3\nC.3.9 Select kqueue\nTheselectmodulecontainsthefollowingnoticeforthekqueueinterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.10 SipHash24\nThefilePython/pyhash.ccontainsMarekMajkowski\u2019implementationofDanBernstein\u2019sSipHash24algorithm.\nItcontainsthefollowingnote:\n<MIT License>\nCopyright (c) 2013 Marek Majkowski <marek@popcount.org>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\nOriginal location:\nhttps://github.com/majek/csiphash/\nSolution inspired by code from:\nSamuel Neves (supercop/crypto_auth/siphash24/little)\ndjb (supercop/crypto_auth/siphash24/little2)\nJean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\n40 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\nC.3.11 strtod and dtoa\nThefilePython/dtoa.c,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,\nisderivedfromthefileofthesamenamebyDavidM.Gay, currentlyavailablefromhttps://web.archive.org/web/\n20220517033456/http://www.netlib.org/fp/dtoa.c. The original file, as retrieved on March 16, 2009, contains the\nfollowingcopyrightandlicensingnotice:\n/****************************************************************\n*\n* The author of this software is David M. Gay.\n*\n* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n*\n* Permission to use, copy, modify, and distribute this software for any\n* purpose without fee is hereby granted, provided that this entire notice\n* is included in all copies of any software which is or includes a copy\n* or modification of this software and in all copies of the supporting\n* documentation for such software.\n*\n* THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n*\n***************************************************************/\nC.3.12 OpenSSL\nThemoduleshashlib,posixandsslusetheOpenSSLlibraryforaddedperformanceifmadeavailablebythe\noperatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL\nlibraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived\nfromthat,theApacheLicensev2applies:\nApache License\nVersion 2.0, January 2004\nhttps://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 41\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\n(continuesonnextpage)\n42 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 43\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nC.3.13 expat\nThe pyexpat extension is built using an included copy of the expat sources unless the build is configured\n--with-system-expat:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\nand Clark Cooper\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n(continuesonnextpage)\n44 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.14 libffi\nThe_ctypesCextensionunderlyingthectypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless\nthebuildisconfigured--with-system-libffi:\nCopyright (c) 1996-2008 Red Hat, Inc and others.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nC.3.15 zlib\nThezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo\noldtobeusedforthebuild:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 45\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\nJean-loup Gailly Mark Adler\njloup@gzip.org madler@alumni.caltech.edu\nC.3.16 cfuhash\nTheimplementationofthehashtableusedbythetracemallocisbasedonthecfuhashproject:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\nThis code is released under the BSD license:\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n* Neither the name of the author nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\nC.3.17 libmpdec\nThe_decimalCextensionunderlyingthedecimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary\nunlessthebuildisconfigured--with-system-libmpdec:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\nRedistribution and use in source and binary forms, with or without\n(continuesonnextpage)\n46 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.18 W3C C14N test suite\nTheC14N2.0testsuiteinthetestpackage(Lib/test/xmltestdata/c14n-20/)wasretrievedfromtheW3C\nwebsiteathttps://www.w3.org/TR/xml-c14n2-testcases/andisdistributedunderthe3-clauseBSDlicense:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of works must retain the original copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\nused to endorse or promote products derived from this work without\nspecific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 47\nInstallingPythonModules,Release3.13.3\nC.3.19 mimalloc\nMITLicense:\nCopyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nC.3.20 asyncio\nPartsoftheasynciomoduleareincorporatedfromuvloop0.16,whichisdistributedundertheMITlicense:\nCopyright (c) 2015-2021 MagicStack Inc. http://magic.io\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.21 Global Unbounded Sequences (GUS)\nThe file Python/qsbr.c is adapted from FreeBSD\u2019s \u201cGlobal Unbounded Sequences\u201d safe memory reclamation\nschemeinsubr_smr.c. Thefileisdistributedunderthe2-ClauseBSDLicense:\nCopyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\n(continuesonnextpage)\n48 AppendixC. HistoryandLicense\nInstallingPythonModules,Release3.13.3\n(continuedfrompreviouspage)\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice unmodified, this list of conditions, and the following\ndisclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 49\nInstallingPythonModules,Release3.13.3\n50 AppendixC. HistoryandLicense\nAPPENDIX\nD\nCOPYRIGHT\nPythonandthisdocumentationis:\nCopyright\u00a92001-2024PythonSoftwareFoundation. Allrightsreserved.\nCopyright\u00a92000BeOpen.com. Allrightsreserved.\nCopyright\u00a91995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.\nCopyright\u00a91991-1995StichtingMathematischCentrum. Allrightsreserved.\nSeeHistoryandLicenseforcompletelicenseandpermissionsinformation.\n51\nInstallingPythonModules,Release3.13.3\n52 AppendixD. Copyright\nINDEX\nNon-alphabetical\ndictionary,15\n...,11 dictionary comprehension,15\n>>>,11 dictionary view,15\n__future__,17\ndocstring,15\n__slots__,24\nduck-typing,15\nA E\nabstract base class,11 EAFP,15\nannotation,11 environment variable\nargument,11 PYTHON_GIL,18\nasynchronous context manager,12 expression,15\nasynchronous generator,12 extension module,16\nasynchronous generator iterator,12\nF\nasynchronous iterable,12\nasynchronous iterator,12 f-string,16\nattribute,12 file object,16\nawaitable,12 file-like object,16\nfilesystem encoding and error handler,16\nB\nfinder,16\nBDFL,12 floor division,16\nbinary file,12 Fortran contiguous,14\nborrowed reference,12 free threading,16\nbytecode,13 free variable,16\nbytes-like object,13 function,16\nfunction annotation,16\nC\nG\ncallable,13\ncallback,13 garbage collection,17\nC-contiguous,14 generator,17\nclass,13 generator expression,17\nclass variable,13 generator iterator,17\nclosure variable,13 generic function,17\ncomplex number,14 generic type,17\ncontext,14 GIL,17\ncontext management protocol,14 global interpreter lock,18\ncontext manager,14\nH\ncontext variable,14\ncontiguous,14 hash-based pyc,18\ncoroutine,14 hashable,18\ncoroutine function,14\nI\nCPython,14\ncurrent context,14 IDLE,18\nimmortal,18\nD\nimmutable,18\ndecorator,14 import path,18\ndescriptor,15 importer,18\n53\nInstallingPythonModules,Release3.13.3\nimporting,18 provisional API,23\ninteractive,18 provisional package,23\ninterpreted,19 Python 3000,23\ninterpreter shutdown,19 Python Enhancement Proposals\niterable,19 PEP 1,23\niterator,19 PEP 238,16\nPEP 278,26\nK\nPEP 302,20\nkey function,19 PEP 343,14\nkeyword argument,19 PEP 362,12,23\nPEP 411,23\nL\nPEP 420,22,23\nlambda,20 PEP 443,17\nLBYL,20 PEP 483,17\nlexical analyzer,20 PEP 484,11,17,26,27\nlist,20 PEP 492,12,14\nlist comprehension,20 PEP 498,16\nloader,20 PEP 519,23\nlocale encoding,20 PEP 525,12\nPEP 526,11,27\nM\nPEP 585,17\nPEP 683,18\nmagic\nmethod,20 PEP 703,16,18\nmagic method,20 PEP 3116,26\nmapping,20 PEP 3155,24\nmeta path finder,20\nPYTHON_GIL,18\nmetaclass,20\nPythonic,24\nmethod,21\nQ\nmagic,20\nspecial,25 qualified name,24\nmethod resolution order,21\nR\nmodule,21\nmodule spec,21 reference count,24\nMRO,21 regular package,24\nmutable,21 REPL,24\nN S\nnamed tuple,21 sequence,24\nnamespace,21 set comprehension,25\nnamespace package,21 single dispatch,25\nnested scope,22 slice,25\nnew-style class,22 soft deprecated,25\nspecial\nO\nmethod,25\nobject,22 special method,25\noptimized scope,22 statement,25\nstatic type checker,25\nP\nstrong reference,25\npackage,22\nT\nparameter,22\npath based finder,23 text encoding,25\npath entry,23 text file,25\npath entry finder,23 token,26\npath entry hook,23 triple-quoted string,26\npath-like object,23 type,26\nPEP,23 type alias,26\nportion,23 type hint,26\npositional argument,23\n54 Index\nInstallingPythonModules,Release3.13.3\nU\nuniversal newlines,26\nV\nvariable annotation,26\nvirtual environment,27\nvirtual machine,27\nZ\nZen of Python,27\nIndex 55\n",
  "context": "C.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\nC.3.4 Cookiemanagement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\nC.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37",
  "source_file": "resources\\Year 3\\Python\\installing.pdf",
  "line_numbers": [
    37,
    2039
  ]
}