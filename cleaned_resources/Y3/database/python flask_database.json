{
  "title": "python flask",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "5.4 Step2: ApplicationSetupCode .",
  "code": "5.7 Step5: TheViewFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n5.8 Step6: TheTemplates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n5.9 Step7: AddingStyle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n5.10 Bonus: TestingtheApplication . . . . . . . . . . . . . . . . . . . . . . . . 40\n6 Templates 41\n6.1 JinjaSetup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n6.2 StandardContext . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n6.3 StandardFilters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n6.4 ControllingAutoescaping . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n6.5 RegisteringFilters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n6.6 ContextProcessors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n7 TestingFlaskApplications 45\n7.1 TheApplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n7.2 TheTestingSkeleton . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n7.3 TheFirstTest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n7.4 LoggingInandOut . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n7.5 TestAddingMessages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n7.6 OtherTestingTricks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n7.7 FakingResourcesandContext . . . . . . . . . . . . . . . . . . . . . . . . 49\n7.8 KeepingtheContextAround . . . . . . . . . . . . . . . . . . . . . . . . . 50\n7.9 AccessingandModifyingSessions . . . . . . . . . . . . . . . . . . . . . . 51\n8 LoggingApplicationErrors 53\n8.1 ErrorMails . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n8.2 LoggingtoaFile . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n8.3 ControllingtheLogFormat . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n8.4 OtherLibraries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n9 DebuggingApplicationErrors 59\n9.1 WheninDoubt,RunManually . . . . . . . . . . . . . . . . . . . . . . . . 59\n9.2 WorkingwithDebuggers . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n10 ConfigurationHandling 61\n10.1 ConfigurationBasics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n10.2 BuiltinConfigurationValues . . . . . . . . . . . . . . . . . . . . . . . . . 62\n10.3 ConfiguringfromFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\n10.4 ConfigurationBestPractices . . . . . . . . . . . . . . . . . . . . . . . . . 65\n10.5 Development/Production . . . . . . . . . . . . . . . . . . . . . . . . . . 65\nii\n10.6 InstanceFolders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\n11 Signals 69\n11.1 SubscribingtoSignals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n11.2 CreatingSignals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n11.3 SendingSignals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n11.4 SignalsandFlask\u2019sRequestContext . . . . . . . . . . . . . . . . . . . . . 72\n11.5 DecoratorBasedSignalSubscriptions . . . . . . . . . . . . . . . . . . . . 72\n11.6 CoreSignals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n12 PluggableViews 77\n12.1 BasicPrinciple . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n12.2 MethodHints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n12.3 MethodBasedDispatching . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n12.4 DecoratingViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n12.5 MethodViewsforAPIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n13 TheApplicationContext 83\n13.1 PurposeoftheApplicationContext . . . . . . . . . . . . . . . . . . . . . 83\n13.2 CreatinganApplicationContext . . . . . . . . . . . . . . . . . . . . . . . 84\n13.3 LocalityoftheContext . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n13.4 ContextUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n14 TheRequestContext 87\n14.1 DivingintoContextLocals . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n14.2 HowtheContextWorks . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n14.3 CallbacksandErrors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n14.4 TeardownCallbacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\n14.5 NotesOnProxies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n14.6 ContextPreservationonError . . . . . . . . . . . . . . . . . . . . . . . . 90\n15 ModularApplicationswithBlueprints 93\n15.1 WhyBlueprints? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\n15.2 TheConceptofBlueprints . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n15.3 MyFirstBlueprint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n15.4 RegisteringBlueprints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n15.5 BlueprintResources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n15.6 BuildingURLs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n15.7 ErrorHandlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\n16 FlaskExtensions 99\n16.1 FindingExtensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n16.2 UsingExtensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n16.3 FlaskBefore0.8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n17 CommandLineInterface 101\n17.1 BasicUsage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\n17.2 VirtualenvIntegration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n17.3 DebugFlag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\niii\n17.4 RunningaShell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n17.5 CustomCommands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n17.6 FactoryFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\n17.7 CustomScripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\n17.8 TheScriptInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n18 DevelopmentServer 107\n18.1 CommandLine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n18.2 InCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n19 WorkingwiththeShell 109\n19.1 CommandLineInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n19.2 CreatingaRequestContext . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n19.3 FiringBefore/AfterRequest . . . . . . . . . . . . . . . . . . . . . . . . . 110\n19.4 FurtherImprovingtheShellExperience . . . . . . . . . . . . . . . . . . . 110\n20 PatternsforFlask 113\n20.1 LargerApplications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\n20.2 ApplicationFactories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n20.3 ApplicationDispatching . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n20.4 ImplementingAPIExceptions . . . . . . . . . . . . . . . . . . . . . . . . 121\n20.5 UsingURLProcessors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\n20.6 DeployingwithDistribute . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n20.7 DeployingwithFabric . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n20.8 UsingSQLite3withFlask . . . . . . . . . . . . . . . . . . . . . . . . . . . 131\n20.9 SQLAlchemyinFlask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n20.10 UploadingFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137\n20.11 Caching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\n20.12 ViewDecorators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\n20.13 FormValidationwithWTForms . . . . . . . . . . . . . . . . . . . . . . . 145\n20.14 TemplateInheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\n20.15 MessageFlashing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\n20.16 AJAXwithjQuery . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\n20.17 CustomErrorPages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n20.18 LazilyLoadingViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155\n20.19 MongoKitinFlask . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157\n20.20 Addingafavicon . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160\n20.21 StreamingContents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\n20.22 DeferredRequestCallbacks . . . . . . . . . . . . . . . . . . . . . . . . . . 162\n20.23 AddingHTTPMethodOverrides . . . . . . . . . . . . . . . . . . . . . . 164\n20.24 RequestContentChecksums . . . . . . . . . . . . . . . . . . . . . . . . . 165\n20.25 CeleryBasedBackgroundTasks . . . . . . . . . . . . . . . . . . . . . . . 166\n21 DeploymentOptions 169\n21.1 mod_wsgi(Apache) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169\n21.2 StandaloneWSGIContainers . . . . . . . . . . . . . . . . . . . . . . . . . 172\n21.3 uWSGI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175\n21.4 FastCGI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176\n21.5 CGI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180\niv\n22 BecomingBig 183\n22.1 ReadtheSource. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\n22.2 Hook. Extend. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\n22.3 Subclass. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\n22.4 Wrapwithmiddleware. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\n22.5 Fork. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\n22.6 Scalelikeapro. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\n22.7 Discusswiththecommunity. . . . . . . . . . . . . . . . . . . . . . . . . . 185\nII API Reference 187\n23 API 189\n23.1 ApplicationObject . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\n23.2 BlueprintObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\n23.3 IncomingRequestData . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\n23.4 ResponseObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218\n23.5 Sessions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\n23.6 SessionInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220\n23.7 TestClient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223\n23.8 ApplicationGlobals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224\n23.9 UsefulFunctionsandClasses . . . . . . . . . . . . . . . . . . . . . . . . . 224\n23.10 MessageFlashing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232\n23.11 JSONSupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232\n23.12 TemplateRendering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235\n23.13 Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236\n23.14 Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238\n23.15 StreamHelpers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239\n23.16 UsefulInternals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239\n23.17 Signals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242\n23.18 Class-BasedViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243\n23.19 URLRouteRegistrations . . . . . . . . . . . . . . . . . . . . . . . . . . . 244\n23.20 ViewFunctionOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246\n23.21 CommandLineInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . 247\nIII Additional Notes 249\n24 DesignDecisionsinFlask 251\n24.1 TheExplicitApplicationObject . . . . . . . . . . . . . . . . . . . . . . . . 251\n24.2 TheRoutingSystem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252\n24.3 OneTemplateEngine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252\n24.4 MicrowithDependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . 253\n24.5 ThreadLocals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254\n24.6 WhatFlaskis,WhatFlaskisNot . . . . . . . . . . . . . . . . . . . . . . . 254\n25 HTML/XHTMLFAQ 255\n25.1 HistoryofXHTML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255\n25.2 HistoryofHTML5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256\nv\n25.3 HTMLversusXHTML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256\n25.4 Whatdoes\u201cstrict\u201dmean? . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\n25.5 NewtechnologiesinHTML5 . . . . . . . . . . . . . . . . . . . . . . . . . 258\n25.6 Whatshouldbeused? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259\n26 SecurityConsiderations 261\n26.1 Cross-SiteScripting(XSS) . . . . . . . . . . . . . . . . . . . . . . . . . . . 261\n26.2 Cross-SiteRequestForgery(CSRF) . . . . . . . . . . . . . . . . . . . . . . 262\n26.3 JSONSecurity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262\n27 UnicodeinFlask 265\n27.1 AutomaticConversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265\n27.2 TheGoldenRule . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\n27.3 EncodingandDecodingYourself . . . . . . . . . . . . . . . . . . . . . . . 266\n27.4 ConfiguringEditors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\n28 FlaskExtensionDevelopment 269\n28.1 AnatomyofanExtension . . . . . . . . . . . . . . . . . . . . . . . . . . . 269\n28.2 \u201cHelloFlaskext!\u201d . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270\n28.3 InitializingExtensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271\n28.4 TheExtensionCode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272\n28.5 Using_app_ctx_stack . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274\n28.6 TeardownBehavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274\n28.7 LearnfromOthers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275\n28.8 ApprovedExtensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275\n28.9 ExtensionImportTransition . . . . . . . . . . . . . . . . . . . . . . . . . 276\n29 PocooStyleguide 277\n29.1 GeneralLayout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277\n29.2 ExpressionsandStatements . . . . . . . . . . . . . . . . . . . . . . . . . . 278\n29.3 NamingConventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279\n29.4 Docstrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280\n29.5 Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280\n30 Python3Support 281\n30.1 Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281\n30.2 APIStability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281\n30.3 FewUsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281\n30.4 SmallEcosystem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282\n30.5 Recommendations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282\n31 UpgradingtoNewerReleases 283\n31.1 Version0.10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283\n31.2 Version0.9 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284\n31.3 Version0.8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284\n31.4 Version0.7 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284\n31.5 Version0.6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288\n31.6 Version0.5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288\n31.7 Version0.4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289\nvi\n31.8 Version0.3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289\n32 FlaskChangelog 291\n32.1 Version1.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291\n32.2 Version0.10.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292\n32.3 Version0.10.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292\n32.4 Version0.10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293\n32.5 Version0.9 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294\n32.6 Version0.8.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296\n32.7 Version0.8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296\n32.8 Version0.7.3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297\n32.9 Version0.7.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297\n32.10 Version0.7.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298\n32.11 Version0.7 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298\n32.12 Version0.6.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299\n32.13 Version0.6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299\n32.14 Version0.5.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300\n32.15 Version0.5.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300\n32.16 Version0.5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300\n32.17 Version0.4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301\n32.18 Version0.3.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301\n32.19 Version0.3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301\n32.20 Version0.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302\n32.21 Version0.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302\n33 License 303\n33.1 Authors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303\n33.2 GeneralLicenseDefinitions . . . . . . . . . . . . . . . . . . . . . . . . . . 304\n33.3 FlaskLicense . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304\n33.4 FlaskArtworkLicense . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305\nvii\nviii\nPart I\nUSER\u2019S GUIDE\nThis part of the documentation, which is mostly prose, begins with some background\ninformation about Flask, then focuses on step-by-step instructions for web develop-\nmentwithFlask.\n1\n2\n1\nCHAPTER\nForeword\nRead this before you get started with Flask. This hopefully answers some questions\nabout the purpose and goals of the project, and when you should or should not be\nusingit.\n1.1 What does \u201cmicro\u201d mean?\n\u201cMicro\u201ddoesnotmeanthatyourwholewebapplicationhastofitintoasinglePython\nfile, although it certainly can. Nor does it mean that Flask is lacking in functionality.\nThe \u201cmicro\u201d in microframework means Flask aims to keep the core simple but exten-\nsible. Flask won\u2019t make many decisions for you, such as what database to use. Those\ndecisionsthatitdoesmake,suchaswhattemplatingenginetouse,areeasytochange.\nEverything else is up to you, so that Flask can be everything you need and nothing\nyoudon\u2019t.\nBydefault,Flaskdoesnotincludeadatabaseabstractionlayer,formvalidationorany-\nthing else where different libraries already exist that can handle that. Instead, Flask\nsupports extensions to add such functionality to your application as if it was imple-\nmented in Flask itself. Numerous extensions provide database integration, form val-\nidation, upload handling, various open authentication technologies, and more. Flask\nmaybe\u201cmicro\u201d,butit\u2019sreadyforproductionuseonavarietyofneeds.\n1.2 Configuration and Conventions\nFlask has many configuration values, with sensible defaults, and a few conventions\nwhen getting started. By convention templates and static files are stored in subdirec-\ntories within the application\u2019s Python source tree, with the names templates and static\nrespectively. While this can be changed you usually don\u2019t have to, especially when\ngettingstarted.\n3\n1.3 Growing with Flask\nOnce you have Flask up and running, you\u2019ll find a variety of extensions available in\nthe community to integrate your project for production. The Flask core team reviews\nextensionsandensuresapprovedextensionsdonotbreakwithfuturereleases.\nAs your codebase grows, you are free to make the design decisions appropriate for\nyour project. Flask will continue to provide a very simple glue layer to the best that\nPython has to offer. You can implement advanced patterns in SQLAlchemy or an-\notherdatabasetool,introducenon-relationaldatapersistenceasappropriate,andtake\nadvantageofframework-agnostictoolsbuiltforWSGI,thePythonwebinterface.\nFlask includes many hooks to customize its behavior. Should you need more cus-\ntomization, the Flask class is built for subclassing. If you are interested in that, check\nouttheBecomingBigchapter. IfyouarecuriousabouttheFlaskdesignprinciples,head\novertothesectionaboutDesignDecisionsinFlask.\nContinuetoInstallation,theQuickstart,ortheForewordforExperiencedProgrammers.\n4\n2\nCHAPTER\nForeword for Experienced Programmers\n2.1 Thread-Locals in Flask\nOne of the design decisions in Flask was that simple tasks should be simple; they\nshould not take a lot of code and yet they should not limit you. Because of that, Flask\nhas a few design choices that some people might find surprising or unorthodox. For\nexample, Flask uses thread-local objects internally so that you don\u2019t have to pass ob-\njects around from function to function within a request in order to stay threadsafe.\nThis approach is convenient, but requires a valid request context for dependency in-\njection or when attempting to reuse code which uses a value pegged to the request.\nThe Flask project is honest about thread-locals, does not hide them, and calls out in\nthecodeanddocumentationwheretheyareused.\n2.2 Develop for the Web with Caution\nAlwayskeepsecurityinmindwhenbuildingwebapplications.\nIf you write a web application, you are probably allowing users to register and leave\ntheirdataonyourserver. Theusersareentrustingyouwithdata. Andevenifyouare\nthe only user that might leave data in your application, you still want that data to be\nstoredsecurely.\nUnfortunately, there are many ways the security of a web application can be com-\npromised. Flask protects you against one of the most common security problems of\nmodern web applications: cross-site scripting (XSS). Unless you deliberately mark in-\nsecure HTML as secure, Flask and the underlying Jinja2 template engine have you\ncovered. Buttherearemanymorewaystocausesecurityproblems.\nThe documentation will warn you about aspects of web development that require at-\ntention to security. Some of these security concerns are far more complex than one\nmight think, and we all sometimes underestimate the likelihood that a vulnerability\nwillbeexploited-untilacleverattackerfiguresoutawaytoexploitourapplications.\nAnd don\u2019t think that your application is not important enough to attract an attacker.\n5\nDependingonthekindofattack,chancesarethatautomatedbotsareprobingforways\ntofillyourdatabasewithspam,linkstomalicioussoftware,andthelike.\nFlask is no different from any other framework in that you the developer must build\nwithcaution,watchingforexploitswhenbuildingtoyourrequirements.\n2.3 The Status of Python 3\nCurrently the Python community is in the process of improving libraries to support\nthenewiterationofthePython programminglanguage. Whilethesituationisgreatly\nimproving there are still some issues that make it hard for users to switch over to\nPython 3 just now. These problems are partially caused by changes in the language\nthat went unreviewed for too long, partially also because we have not quite worked\nout how the lower- level API should change to account for the Unicode differences in\nPython3.\nWe strongly recommend using Python 2.6 and 2.7 with activated Python 3 warnings\nduring development. If you plan on upgrading to Python 3 in the near future we\nstronglyrecommendthatyoureadHowtowriteforwardscompatiblePythoncode.\nIfyoudowanttodiveintoPython3alreadyhavealookatthePython3Supportpage.\nContinuetoInstallationortheQuickstart.\n6\n3\nCHAPTER\nInstallation\nFlask depends on some external libraries, like Werkzeug and Jinja2. Werkzeug is a\ntoolkit for WSGI, the standard Python interface between web applications and a vari-\netyofserversforbothdevelopmentanddeployment. Jinja2renderstemplates.\nSohowdoyougetallthatonyourcomputerquickly? Therearemanywaysyoucould\ndothat,butthemostkick-assmethodisvirtualenv,solet\u2019shavealookatthatfirst.\nYou will need Python 2.6 or newer to get started, so be sure to have an up-to-date\nPython2.xinstallation. ForusingFlaskwithPython3havealookatPython3Support.\n3.1 virtualenv\nVirtualenv is probably what you want to use during development, and if you have\nshellaccesstoyourproductionmachines,you\u2019llprobablywanttouseitthere,too.\nWhat problem does virtualenv solve? If you like Python as much as I do, chances are\nyou want to use it for other projects besides Flask-based web applications. But the\nmore projects you have, the more likely it is that you will be working with different\nversions of Python itself, or at least different versions of Python libraries. Let\u2019s face it:\nquite often libraries break backwards compatibility, and it\u2019s unlikely that any serious\napplication will have zero dependencies. So what do you do if two or more of your\nprojectshaveconflictingdependencies?\nVirtualenv to the rescue! Virtualenv enables multiple side-by-side installations of\nPython, one for each project. It doesn\u2019t actually install separate copies of Python, but\nit does provide a clever way to keep different project environments isolated. Let\u2019s see\nhowvirtualenvworks.\nIfyouareonMacOSXorLinux,chancesarethatoneofthefollowingtwocommands\nwillworkforyou:\n$ sudo easy_install virtualenv\norevenbetter:\n7\n$ sudo pip install virtualenv\nOne of these will probably install virtualenv on your system. Maybe it\u2019s even in your\npackagemanager. IfyouuseUbuntu,try:\n$ sudo apt-get install python-virtualenv\nIf you are on Windows and don\u2019t have the easy_install command, you must install it\nfirst. Check the pip and setuptools on Windows section for more information about how\nto do that. Once you have it installed, run the same commands as above, but without\nthesudoprefix.\nOnce you have virtualenv installed, just fire up a shell and create your own environ-\nment. Iusuallycreateaprojectfolderandavenvfolderwithin:\n$ mkdir myproject\n$ cd myproject\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling setuptools, pip............done.\nNow, whenever you want to work on a project, you only have to activate the corre-\nspondingenvironment. OnOSXandLinux,dothefollowing:\n$ . venv/bin/activate\nIfyouareaWindowsuser,thefollowingcommandisforyou:\n$ venv\\scripts\\activate\nEitherway,youshouldnowbeusingyourvirtualenv(noticehowthepromptofyour\nshellhaschangedtoshowtheactiveenvironment).\nAndifyouwanttogobacktotherealworld,usethefollowingcommand:\n$ deactivate\nAfterdoingthis,thepromptofyourshellshouldbeasfamilarasbefore.\nNow, let\u2019s move on. Enter the following command to get Flask activated in your vir-\ntualenv:\n$ pip install Flask\nAfewsecondslaterandyouaregoodtogo.\n3.2 System-Wide Installation\nThisispossibleaswell,thoughIdonotrecommendit. Justrunpipwithrootprivileges:\n$ sudo pip install Flask\n8\n(OnWindowssystems,runitinacommand-promptwindowwithadministratorpriv-\nileges,andleaveoutsudo.)\n3.3 Living on the Edge\nIfyouwanttoworkwiththelatestversionofFlask,therearetwoways: youcaneither\nlet pip pull in the development version, or you can tell it to operate on a git checkout.\nEitherway,virtualenvisrecommended.\nGetthegitcheckoutinanewvirtualenvandrunindevelopmentmode:\n$ git clone http://github.com/mitsuhiko/flask.git\nInitialized empty Git repository in ~/dev/flask/.git/\n$ cd flask\n$ virtualenv venv\nNew python executable in venv/bin/python\nInstalling setuptools, pip............done.\n$ . venv/bin/activate\n$ python setup.py develop\n...\nFinished processing dependencies for Flask\nThis will pull in the dependencies and activate the git head as the current version\ngit pull origin\ninsidethevirtualenv. Thenallyouhavetodoisrun toupdatetothe\nlatestversion.\nTojustgetthedevelopmentversionwithoutgit,dothisinstead:\n$ mkdir flask\n$ cd flask\n$ virtualenv venv\n$ . venv/bin/activate\nNew python executable in venv/bin/python\nInstalling setuptools, pip............done.\n$ pip install Flask==dev\n...\nFinished processing dependencies for Flask==dev\n3.4 pip and setuptools on Windows\nSometimes getting the standard \u201cPython packaging tools\u201d like pip, setuptools and vir-\ntualenvcanbealittletrickier,butnothingveryhard. Thetwocrucialpackagesyouwill\nneed are setuptools and pip - these will let you install anything else (like virtualenv).\nFortunatelytherearetwo\u201cbootstrapscripts\u201dyoucanruntoinstalleither.\nIf you don\u2019t currently have either, then get-pip.py will install both for you (you won\u2019t\nneedtorunez_setup.py).\n9\nget-pip.py\nToinstallthelatestsetuptools,youcanuseitsbootstrapfile:\nez_setup.py\nEither should be double-clickable once you download them. If you already have pip,\nyoucanupgradethembyrunning:\n> pip install --upgrade pip setuptools\npip\nMost often, once you pull up a command prompt you want to be able to type\npython\nand which will run those things, but this might not automatically happen on\nWindows,becauseitdoesn\u2019tknowwherethoseexecutablesare(giveeitheratry!).\nTo fix this, you should be able to navigate to your Python install directory (e.g\nC:\\Python27 Tools Scripts win_add2path.py\n), then go to , then ; then find the file and\npython\nrunthat. OpenanewCommandPromptandcheckthatyoucannowjusttype\ntobringuptheinterpreter.\nFinally,toinstallvirtualenv,youcansimplyrun:\n> pip install virtualenv\nThenyoucanbeoffonyourwayfollowingtheinstallationinstructionsabove.\n10\n4\nCHAPTER\nQuickstart\nEager to get started? This page gives a good introduction to Flask. It assumes you\nalreadyhaveFlaskinstalled. Ifyoudonot,headovertotheInstallationsection.\n4.1 A Minimal Application\nAminimalFlaskapplicationlookssomethinglikethis:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\u2019/\u2019)\ndef hello_world():\nreturn \u2019Hello World!\u2019\nJust save it as hello.py (or something similar) and run it with your Python interpreter.\nMake sure to not call your application flask.py because this would conflict with Flask\nitself.\nflask -m\nTo run the application you can either use the command or python\u2019s switch\nwithFlask:\n$ flask -a hello run\n* Running on http://127.0.0.1:5000/\noralternatively:\n$ python -m flask -a hello run\n* Running on http://127.0.0.1:5000/\nNowheadovertohttp://127.0.0.1:5000/, andyoushouldseeyourhelloworldgreet-\ning.\nSowhatdidthatcodedo?\n11\nFlask\n1. First we imported the class. An instance of this class will be our WSGI\napplication.\n2. Next we create an instance of this class. The first argument is the name of the\napplication\u2019s module or package. If you are using a single module (as in this\nexample), you should use __name__ because depending on if it\u2019s started as ap-\n\u2019__main__\u2019\nplication or imported as module the name will be different ( versus\nthe actual import name). This is needed so that Flask knows where to look for\nFlask\ntemplates, static files, and so on. For more information have a look at the\ndocumentation.\nroute()\n3. We then use the decorator to tell Flask what URL should trigger our\nfunction.\n4. ThefunctionisgivenanamewhichisalsousedtogenerateURLsforthatpartic-\nularfunction,andreturnsthemessagewewanttodisplayintheuser\u2019sbrowser.\n5. Finally we use the Flask development server to run the local server with our\napplication.\nTostoptheserver,hitcontrol-C.\nExternallyVisibleServer\nIf you run the server you will notice that the server is only accessible from your own\ncomputer,notfromanyotherinthenetwork. Thisisthedefaultbecauseindebugging\nmodeauseroftheapplicationcanexecutearbitraryPythoncodeonyourcomputer.\nIf you have the debugger disabled or trust the users on your network, you can make\n--host=0.0.0.0\ntheserverpubliclyavailablesimplybyadding tothecommandline:\nflask -a hello run --host=0.0.0.0\nThistellsyouroperatingsystemtolistenonallpublicIPs.\n4.2 What to do if the Server does not Start\npython -m flask flask\nIn case the fails or does not exist, there are multiple reasons\nthismightbethecase. Firstofallyouneedtolookattheerrormessage.\n4.2.1 Old Version of Flask\nVersions of Flask older than 1.0 use to have different ways to start the application. In\nflask python -m flask\nshort,the commanddidnotexist,andneitherdid . Inthatcase\nyou have two options: either upgrade to newer Flask versions or have a look at the\nDevelopmentServerdocstoseethealternativemethodforrunningaserver.\n12\n4.2.2 Python older 2.7\npython -m flask\nIn case you have a version of Python older than 2.7 does not work.\nflask python -m flask.cli\nYou can either use or as an alternative. This is because\nPython before 2.7 does no permit packages to act as executable modules. For more\ninformationseeCommandLineInterface.\n4.2.3 Invalid Import Name\n-a flask\nThe argument to is the name of the module to import. In case that module\nis incorrectly named you will get an import error upon start (or if debug is enabled\nwhenyounavigatetotheapplication). Itwilltellyouwhatittriedtoimportandwhy\nitfailed.\napp\nThemostcommonreasonisatypoorbecauseyoudidnotactuallycreatean object.\n4.3 Debug Mode\nflask\nThe script is nice to start a local development server, but you would have to\nrestart it manually after each change to your code. That is not very nice and Flask can\ndo better. If you enable debug support the server will reload itself on code changes,\nanditwillalsoprovideyouwithahelpfuldebuggerifthingsgowrong.\nThere are different ways to enable the debug mode. The most obvious one is the\n--debug flask\nparametertothe command:\nflask --debug -a hello run\nThisdoesthefollowingthings:\n1. itactivatesthedebugger\n2. itactivatestheautomaticreloader\n3. itenablesthedebugmodeontheFlaskapplication.\nTherearemoreparametersthatareexplainedintheDevelopmentServerdocs.\nAttention\nEven though the interactive debugger does not work in forking environments (which\nmakes it nearly impossible to use on production servers), it still allows the execution\nof arbitrary code. This makes it a major security risk and therefore it must never be\nusedonproductionmachines.\nScreenshotofthedebuggerinaction:\n13\nHaveanotherdebuggerinmind? SeeWorkingwithDebuggers.\n4.4 Routing\nModern web applications have beautiful URLs. This helps people remember the\nURLs, which is especially handy for applications that are used from mobile devices\nwithslowernetworkconnections. Iftheusercandirectlygotothedesiredpagewith-\nouthavingtohittheindexpageitismorelikelytheywilllikethepageandcomeback\nnexttime.\nroute()\nAs you have seen above, the decorator is used to bind a function to a URL.\nHerearesomebasicexamples:\n@app.route(\u2019/\u2019)\ndef index():\nreturn \u2019Index Page\u2019\n@app.route(\u2019/hello\u2019)\ndef hello():\nreturn \u2019Hello World\u2019\n14\nBut there is more to it! You can make certain parts of the URL dynamic and attach\nmultiplerulestoafunction.\n4.4.1 Variable Rules\nTo add variable parts to a URL you can mark these special sections as\n<variable_name>\n. Such a part is then passed as a keyword argument to\nyour function. Optionally a converter can be used by specifying a rule with\n<converter:variable_name>\n. Herearesomeniceexamples:\n@app.route(\u2019/user/<username>\u2019)\ndef show_user_profile(username):\n# show the user profile for that user\nreturn \u2019User %s\u2019 % username\n@app.route(\u2019/post/<int:post_id>\u2019)\ndef show_post(post_id):\n# show the post with the given id, the id is an integer\nreturn \u2019Post %d\u2019 % post_id\nThefollowingconvertersexist:\nint acceptsintegers\nfloat likeintbutforfloatingpointvalues\npath likethedefaultbutalsoacceptsslashes\nUniqueURLs/RedirectionBehavior\nFlask\u2019s URL rules are based on Werkzeug\u2019s routing module. The idea behind that\nmodule is to ensure beautiful and unique URLs based on precedents laid down by\nApacheandearlierHTTPservers.\nTakethesetworules:\n@app.route(\u2019/projects/\u2019)\ndef projects():\nreturn \u2019The project page\u2019\n@app.route(\u2019/about\u2019)\ndef about():\nreturn \u2019The about page\u2019\nThoughtheylookrathersimilar,theydifferintheiruseofthetrailingslashintheURL\ndefinition. In the first case, the canonical URL for the projects endpoint has a trailing\nslash. In that sense, it is similar to a folder on a file system. Accessing it without a\ntrailingslashwillcauseFlasktoredirecttothecanonicalURLwiththetrailingslash.\nInthesecondcase,however,theURLisdefinedwithoutatrailingslash,ratherlikethe\npathnameofafileonUNIX-likesystems. AccessingtheURLwithatrailingslashwill\nproducea404\u201cNotFound\u201derror.\nThis behavior allows relative URLs to continue working even if the trailing slash is\n15\nomitted, consistent with how Apache and other servers work. Also, the URLs will\nstayunique,whichhelpssearchenginesavoidindexingthesamepagetwice.\n4.4.2 URL Building\nIf it can match URLs, can Flask also generate them? Of course it can. To build a URL\nurl_for()\nto a specific function you can use the function. It accepts the name of the\nfunction as first argument and a number of keyword arguments, each corresponding\ntothevariablepartoftheURLrule. UnknownvariablepartsareappendedtotheURL\nasqueryparameters. Herearesomeexamples:\n>>> from flask import Flask, url_for\n>>> app = Flask(__name__)\n>>> @app.route(\u2019/\u2019)\n... def index(): pass\n...\n>>> @app.route(\u2019/login\u2019)\n... def login(): pass\n...\n>>> @app.route(\u2019/user/<username>\u2019)\n... def profile(username): pass\n...\n>>> with app.test_request_context():\n... print url_for(\u2019index\u2019)\n... print url_for(\u2019login\u2019)\n... print url_for(\u2019login\u2019, next=\u2019/\u2019)\n... print url_for(\u2019profile\u2019, username=\u2019John Doe\u2019)\n...\n/\n/login\n/login?next=/\n/user/John%20Doe\ntest_request_context()\n(This also uses the method, explained below. It tells Flask\nto behave as though it is handling a request, even though we are interacting with it\nthroughaPythonshell. Havealookattheexplanationbelow. ContextLocals).\nurl_for()\nWhy would you want to build URLs using the URL reversing function in-\nsteadofhard-codingthemintoyourtemplates? Therearethreegoodreasonsforthis:\n1. Reversing is often more descriptive than hard-coding the URLs. More impor-\ntantly, it allows you to change URLs in one go, without having to remember to\nchangeURLsallovertheplace.\n2. URLbuildingwillhandleescapingofspecialcharactersandUnicodedatatrans-\nparentlyforyou,soyoudon\u2019thavetodealwiththem.\n/myapplication\n3. IfyourapplicationisplacedoutsidetheURLroot(say,in instead\n/ url_for()\nof ), willhandlethatproperlyforyou.\n16\n4.4.3 HTTP Methods\nHTTP (the protocol web applications are speaking) knows different methods for ac-\ncessing URLs. By default, a route only answers to GET requests, but that can be\nroute()\nchanged by providing the methods argument to the decorator. Here are some\nexamples:\nfrom flask import request\n@app.route(\u2019/login\u2019, methods=[\u2019GET\u2019, \u2019POST\u2019])\ndef login():\nif request.method == \u2019POST\u2019:\ndo_the_login()\nelse:\nshow_the_login_form()\nIf GET is present, HEAD will be added automatically for you. You don\u2019t have to deal\nwiththat. ItwillalsomakesurethatHEADrequestsarehandledastheHTTPRFC(the\ndocumentdescribingtheHTTPprotocol)demands,soyoucancompletelyignorethat\npartoftheHTTPspecification. Likewise,asofFlask0.6,OPTIONSisimplementedfor\nyouautomaticallyaswell.\nYouhavenoideawhatanHTTPmethodis? Worrynot,hereisaquickintroductionto\nHTTPmethodsandwhytheymatter:\nTheHTTPmethod(alsooftencalled\u201ctheverb\u201d)tellstheserverwhattheclientswants\ntodowiththerequestedpage. Thefollowingmethodsareverycommon:\nGET The browser tells the server to just get the information stored on that page and\nsendit. Thisisprobablythemostcommonmethod.\nHEAD The browser tells the server to get the information, but it is only interested in\nthe headers, not the content of the page. An application is supposed to handle\nthat as if a GET request was received but to not deliver the actual content. In\nFlask you don\u2019t have to deal with that at all, the underlying Werkzeug library\nhandlesthatforyou.\nPOST The browser tells the server that it wants to post some new information to that\nURL and that the server must ensure the data is stored and only stored once.\nThisishowHTMLformsusuallytransmitdatatotheserver.\nPUT Similar to POST but the server might trigger the store procedure multiple times\nby overwriting the old values more than once. Now you might be asking why\nthis is useful, but there are some good reasons to do it this way. Consider that\ntheconnectionislostduringtransmission: inthissituationasystembetweenthe\nbrowser and the server might receive the request safely a second time without\nbreaking things. With POST that would not be possible because it must only be\ntriggeredonce.\nDELETE Removetheinformationatthegivenlocation.\nOPTIONS Provides a quick way for a client to figure out which methods are sup-\nported by this URL. Starting with Flask 0.6, this is implemented for you auto-\n17\nmatically.\nNow the interesting part is that in HTML4 and XHTML1, the only methods a form\ncan submit to the server are GET and POST. But with JavaScript and future HTML\nstandards you can use the other methods as well. Furthermore HTTP has become\nquite popular lately and browsers are no longer the only clients that are using HTTP.\nForinstance,manyrevisioncontrolsystemsuseit.\n4.5 Static Files\nDynamic web applications also need static files. That\u2019s usually where the CSS and\nJavaScript files are coming from. Ideally your web server is configured to serve them\nfor you, but during development Flask can do that as well. Just create a folder called\nstatic in your package or next to your module and it will be available at /static on the\napplication.\n\u2019static\u2019\nTogenerateURLsforstaticfiles,usethespecial endpointname:\nurl_for(\u2019static\u2019, filename=\u2019style.css\u2019)\nstatic/style.css\nThefilehastobestoredonthefilesystemas .\n4.6 Rendering Templates\nGeneratingHTMLfromwithinPythonisnotfun,andactuallyprettycumbersomebe-\ncauseyouhavetodotheHTMLescapingonyourowntokeeptheapplicationsecure.\nBecauseofthatFlaskconfigurestheJinja2templateengineforyouautomatically.\nrender_template()\nTo render a template you can use the method. All you have to do\nisprovidethenameofthetemplateandthevariablesyouwanttopasstothetemplate\nengineaskeywordarguments. Here\u2019sasimpleexampleofhowtorenderatemplate:\nfrom flask import render_template\n@app.route(\u2019/hello/\u2019)\n@app.route(\u2019/hello/<name>\u2019)\ndef hello(name=None):\nreturn render_template(\u2019hello.html\u2019, name=name)\nFlaskwilllookfortemplatesinthetemplatesfolder. Soifyourapplicationisamodule,\nthisfolderisnexttothatmodule,ifit\u2019sapackageit\u2019sactuallyinsideyourpackage:\nCase1: amodule:\n/application.py\n/templates\n/hello.html\nCase2: apackage:\n18\n/application\n/__init__.py\n/templates\n/hello.html\nFor templates you can use the full power of Jinja2 templates. Head over to the official\nJinja2TemplateDocumentationformoreinformation.\nHereisanexampletemplate:\n<!doctype html>\n<title>Hello from Flask</title>\n{% if name %}\n<h1>Hello {{ name }}!</h1>\n{% else %}\n<h1>Hello World!</h1>\n{% endif %}\nInside templates you also have access to the request , session and g 1 objects as well\nget_flashed_messages()\nasthe function.\nTemplates are especially useful if inheritance is used. If you want to know how that\nworks, head over to the Template Inheritance pattern documentation. Basically tem-\nplateinheritancemakesitpossibletokeepcertainelementsoneachpage(likeheader,\nnavigationandfooter).\nAutomatic escaping is enabled, so if name contains HTML it will be escaped automat-\nically. IfyoucantrustavariableandyouknowthatitwillbesafeHTML(forexample\nbecause it came from a module that converts wiki markup to HTML) you can mark\nMarkup |safe\nit as safe by using the class or by using the filter in the template. Head\novertotheJinja2documentationformoreexamples.\nMarkup\nHereisabasicintroductiontohowthe classworks:\n>>> from flask import Markup\n>>> Markup(\u2019<strong>Hello %s!</strong>\u2019) % \u2019<blink>hacker</blink>\u2019\nMarkup(u\u2019<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>\u2019)\n>>> Markup.escape(\u2019<blink>hacker</blink>\u2019)\nMarkup(u\u2019&lt;blink&gt;hacker&lt;/blink&gt;\u2019)\n>>> Markup(\u2019<em>Marked up</em> &raquo; HTML\u2019).striptags()\nu\u2019Marked up \\xbb HTML\u2019\nChanged in version 0.5: Autoescaping is no longer enabled for all templates. The\n.html .htm .xml .xhtml\nfollowing extensions for templates trigger autoescaping: , , , .\nTemplatesloadedfromastringwillhaveautoescapingdisabled.\n1Unsurewhatthatgobjectis?It\u2019ssomethinginwhichyoucanstoreinformationforyourownneeds,\ncheckthedocumentationofthatobject(g)andtheUsingSQLite3withFlaskformoreinformation.\n19\n4.7 Accessing Request Data\nFor web applications it\u2019s crucial to react to the data a client sent to the server. In Flask\nrequest\nthisinformationisprovidedbytheglobal object. Ifyouhavesomeexperience\nwith Python you might be wondering how that object can be global and how Flask\nmanagestostillbethreadsafe. Theansweriscontextlocals:\n4.7.1 Context Locals\nInsiderInformation\nIf you want to understand how that works and how you can implement tests with\ncontextlocals,readthissection,otherwisejustskipit.\nCertain objects in Flask are global objects, but not of the usual kind. These objects are\nactually proxies to objects that are local to a specific context. What a mouthful. But\nthatisactuallyquiteeasytounderstand.\nImaginethecontextbeingthehandlingthread. Arequestcomesinandthewebserver\ndecides to spawn a new thread (or something else, the underlying object is capable\nof dealing with concurrency systems other than threads). When Flask starts its inter-\nnal request handling it figures out that the current thread is the active context and\nbinds the current application and the WSGI environments to that context (thread). It\ndoes that in an intelligent way so that one application can invoke another application\nwithoutbreaking.\nSo what does this mean to you? Basically you can completely ignore that this is the\ncaseunlessyouaredoingsomethinglikeunittesting. Youwillnoticethatcodewhich\ndependsonarequestobjectwillsuddenlybreakbecausethereisnorequestobject. The\nsolution is creating a request object yourself and binding it to the context. The easiest\ntest_request_context()\nsolution for unit testing is to use the context manager. In\ncombinationwiththewithstatementitwillbindatestrequestsothatyoucaninteract\nwithit. Hereisanexample:\nfrom flask import request\nwith app.test_request_context(\u2019/hello\u2019, method=\u2019POST\u2019):\n# now you can do something with the request until the\n# end of the with block, such as basic assertions:\nassert request.path == \u2019/hello\u2019\nassert request.method == \u2019POST\u2019\nrequest_context()\nTheotherpossibilityispassingawholeWSGIenvironmenttothe\nmethod:\nfrom flask import request\nwith app.request_context(environ):\nassert request.method == \u2019POST\u2019\n20\n4.7.2 The Request Object\nThe request object is documented in the API section and we will not cover it here in\nrequest\ndetail(see ). Hereisabroadoverviewofsomeofthemostcommonoperations.\nFirstofallyouhavetoimportitfromtheflask module:\nfrom flask import request\nmethod\nThe current request method is available by using the attribute. To access form\nform\ndata(datatransmittedinaPOST orPUT request)youcanusethe attribute. Here\nisafullexampleofthetwoattributesmentionedabove:\n@app.route(\u2019/login\u2019, methods=[\u2019POST\u2019, \u2019GET\u2019])\ndef login():\nerror = None\nif request.method == \u2019POST\u2019:\nif valid_login(request.form[\u2019username\u2019],\nrequest.form[\u2019password\u2019]):\nreturn log_the_user_in(request.form[\u2019username\u2019])\nelse:\nerror = \u2019Invalid username/password\u2019\n# the code below is executed if the request method\n# was GET or the credentials were invalid\nreturn render_template(\u2019login.html\u2019, error=error)\nWhat happens if the key does not exist in the form attribute? In that case a special\nKeyError KeyError\nisraised. Youcancatchitlikeastandard butifyoudon\u2019tdothat,a\nHTTP 400 Bad Request error page is shown instead. So for many situations you don\u2019t\nhavetodealwiththatproblem.\n?key=value args\nTo access parameters submitted in the URL ( ) you can use the at-\ntribute:\nsearchword = request.args.get(\u2019key\u2019, \u2019\u2019)\nWe recommend accessing URL parameters with get or by catching the KeyError be-\ncauseusersmightchangetheURLandpresentingthema400badrequestpageinthat\ncaseisnotuserfriendly.\nrequest\nForafulllistofmethodsandattributesoftherequestobject,headovertothe\ndocumentation.\n4.7.3 File Uploads\nYou can handle uploaded files with Flask easily. Just make sure not to forget to\nenctype=\"multipart/form-data\"\nset the attribute on your HTML form, otherwise the\nbrowserwillnottransmityourfilesatall.\nUploadedfilesarestoredinmemoryoratatemporarylocationonthefilesystem. You\nfiles\ncan access those files by looking at the attribute on the request object. Each\nfile\nuploaded file is stored in that dictionary. It behaves just like a standard Python\n21\nsave()\nobject, but it also has a method that allows you to store that file on the filesys-\ntemoftheserver. Hereisasimpleexampleshowinghowthatworks:\nfrom flask import request\n@app.route(\u2019/upload\u2019, methods=[\u2019GET\u2019, \u2019POST\u2019])\ndef upload_file():\nif request.method == \u2019POST\u2019:\nf = request.files[\u2019the_file\u2019]\nf.save(\u2019/var/www/uploads/uploaded_file.txt\u2019)\n...\nIf you want to know how the file was named on the client before it was uploaded to\nfilename\nyourapplication,youcanaccessthe attribute. Howeverpleasekeepinmind\nthatthisvaluecanbeforgedsoneverevertrustthatvalue. Ifyouwanttousethefile-\nsecure_filename()\nnameoftheclienttostorethefileontheserver,passitthroughthe\nfunctionthatWerkzeugprovidesforyou:\nfrom flask import request\nfrom werkzeug import secure_filename\n@app.route(\u2019/upload\u2019, methods=[\u2019GET\u2019, \u2019POST\u2019])\ndef upload_file():\nif request.method == \u2019POST\u2019:\nf = request.files[\u2019the_file\u2019]\nf.save(\u2019/var/www/uploads/\u2019 + secure_filename(f.filename))\n...\nForsomebetterexamples,checkouttheUploadingFilespattern.\n4.7.4 Cookies\ncookies\nTo access cookies you can use the attribute. To set cookies you can use the\nset_cookie cookies\nmethod of response objects. The attribute of request objects is a\ndictionarywithallthecookiestheclienttransmits. Ifyouwanttousesessions,donot\nusethecookiesdirectlybutinsteadusetheSessionsinFlaskthataddsomesecurityon\ntopofcookiesforyou.\nReadingcookies:\nfrom flask import request\n@app.route(\u2019/\u2019)\ndef index():\nusername = request.cookies.get(\u2019username\u2019)\n# use cookies.get(key) instead of cookies[key] to not get a\n# KeyError if the cookie is missing.\nStoringcookies:\n22\nfrom flask import make_response\n@app.route(\u2019/\u2019)\ndef index():\nresp = make_response(render_template(...))\nresp.set_cookie(\u2019username\u2019, \u2019the username\u2019)\nreturn resp\nNote that cookies are set on response objects. Since you normally just return strings\nfrom the view functions Flask will convert them into response objects for you. If you\nmake_response()\nexplicitly want to do that you can use the function and then modify\nit.\nSometimes you might want to set a cookie at a point where the response object does\nnotexistyet. ThisispossiblebyutilizingtheDeferredRequestCallbackspattern.\nForthisalsoseeAboutResponses.\n4.8 Redirects and Errors\nredirect()\nTo redirect a user to another endpoint, use the function; to abort a request\nabort()\nearlywithanerrorcode,usethe function:\nfrom flask import abort, redirect, url_for\n@app.route(\u2019/\u2019)\ndef index():\nreturn redirect(url_for(\u2019login\u2019))\n@app.route(\u2019/login\u2019)\ndef login():\nabort(401)\nthis_is_never_executed()\nThis is a rather pointless example because a user will be redirected from the index to\napagetheycannotaccess(401meansaccessdenied)butitshowshowthatworks.\nBy default a black and white error page is shown for each error code. If you want to\nerrorhandler()\ncustomizetheerrorpage,youcanusethe decorator:\nfrom flask import render_template\n@app.errorhandler(404)\ndef page_not_found(error):\nreturn render_template(\u2019page_not_found.html\u2019), 404\n404 render_template()\nNote the after the call. This tells Flask that the status code of\nthat page should be 404 which means not found. By default 200 is assumed which\ntranslatesto: allwentwell.\n23\n4.9 About Responses\nThe return value from a view function is automatically converted into a response ob-\njectforyou. Ifthereturnvalueisastringit\u2019sconvertedintoaresponseobjectwiththe\n200 OK text/html\nstring as response body, a status code and a mimetype. The logic\nthatFlaskappliestoconvertingreturnvaluesintoresponseobjectsisasfollows:\n1. If a response object of the correct type is returned it\u2019s directly returned from the\nview.\n2. If it\u2019s a string, a response object is created with that data and the default param-\neters.\n3. If a tuple is returned the items in the tuple can provide extra information. Such\n(response, status, headers) (response,\ntuples have to be in the form or\nheaders)\nwhereatleastoneitemhastobeinthetuple. Thestatusvaluewillover-\nride the status code and headers can be a list or dictionary of additional header\nvalues.\n4. If none of that works, Flask will assume the return value is a valid WSGI appli-\ncationandconvertthatintoaresponseobject.\nIfyouwanttogetholdoftheresultingresponseobjectinsidetheviewyoucanusethe\nmake_response()\nfunction.\nImagineyouhaveaviewlikethis:\n@app.errorhandler(404)\ndef not_found(error):\nreturn render_template(\u2019error.html\u2019), 404\nmake_response()\nYou just need to wrap the return expression with and get the re-\nsponseobjecttomodifyit,thenreturnit:\n@app.errorhandler(404)\ndef not_found(error):\nresp = make_response(render_template(\u2019error.html\u2019), 404)\nresp.headers[\u2019X-Something\u2019] = \u2019A value\u2019\nreturn resp\n4.10 Sessions\nsession\nIn addition to the request object there is also a second object called which\nallows you to store information specific to a user from one request to the next. This is\nimplementedontopofcookiesforyouandsignsthecookiescryptographically. What\nthis means is that the user could look at the contents of your cookie but not modify it,\nunlesstheyknowthesecretkeyusedforsigning.\nInordertousesessionsyouhavetosetasecretkey. Hereishowsessionswork:\n24\nfrom flask import Flask, session, redirect, url_for, escape, request\napp = Flask(__name__)\n@app.route(\u2019/\u2019)\ndef index():\nif \u2019username\u2019 in session:\nreturn \u2019Logged in as %s\u2019 % escape(session[\u2019username\u2019])\nreturn \u2019You are not logged in\u2019\n@app.route(\u2019/login\u2019, methods=[\u2019GET\u2019, \u2019POST\u2019])\ndef login():\nif request.method == \u2019POST\u2019:\nsession[\u2019username\u2019] = request.form[\u2019username\u2019]\nreturn redirect(url_for(\u2019index\u2019))\nreturn \u2019\u2019\u2019\n<form action=\"\" method=\"post\">\n<p><input type=text name=username>\n<p><input type=submit value=Login>\n</form>\n\u2019\u2019\u2019\n@app.route(\u2019/logout\u2019)\ndef logout():\n# remove the username from the session if it\u2019s there\nsession.pop(\u2019username\u2019, None)\nreturn redirect(url_for(\u2019index\u2019))\n# set the secret key. keep this really secret:\napp.secret_key = \u2019A0Zr98j/3yX R~XHH!jmN]LWX/,?RT\u2019\nescape()\nThe mentioned here does escaping for you if you are not using the template\nengine(asinthisexample).\nHowtogenerategoodsecretkeys\nTheproblemwithrandomisthatit\u2019shardtojudgewhatistrulyrandom. Andasecret\nkey should be as random as possible. Your operating system has ways to generate\nprettyrandomstuffbasedonacryptographicrandomgeneratorwhichcanbeusedto\ngetsuchakey:\n>>> import os\n>>> os.urandom(24)\n\u2019\\xfd{H\\xe5<\\x95\\xf9\\xe3\\x96.5\\xd1\\x01O<!\\xd5\\xa2\\xa0\\x9fR\"\\xa1\\xa8\u2019\nJusttakethatthingandcopy/pasteitintoyourcodeandyou\u2019redone.\nA note on cookie-based sessions: Flask will take the values you put into the session\nobject and serialize them into a cookie. If you are finding some values do not per-\nsist across requests, cookies are indeed enabled, and you are not getting a clear error\nmessage, check the size of the cookie in your page responses compared to the size\n25\nsupportedbywebbrowsers.\n4.11 Message Flashing\nGood applications and user interfaces are all about feedback. If the user does not get\nenough feedback they will probably end up hating the application. Flask provides a\nreally simple way to give feedback to a user with the flashing system. The flashing\nsystem basically makes it possible to record a message at the end of a request and\naccess it on the next (and only the next) request. This is usually combined with a\nlayouttemplatetoexposethemessage.\nflash()\nTo flash a message use the method, to get hold of the messages you can use\nget_flashed_messages()\nwhich is also available in the templates. Check out the Mes-\nsageFlashingforafullexample.\n4.12 Logging\nNewinversion0.3.\nSometimesyoumightbeinasituationwhereyoudealwithdatathatshouldbecorrect,\nbut actually is not. For example you may have some client-side code that sends an\nHTTP request to the server but it\u2019s obviously malformed. This might be caused by a\nuser tampering with the data, or the client code failing. Most of the time it\u2019s okay to\n400 Bad Request\nreply with in that situation, but sometimes that won\u2019t do and the\ncodehastocontinueworking.\nYou may still want to log that something fishy happened. This is where loggers come\ninhandy. AsofFlask0.3aloggerispreconfiguredforyoutouse.\nHerearesomeexamplelogcalls:\napp.logger.debug(\u2019A value for debugging\u2019)\napp.logger.warning(\u2019A warning occurred (%d apples)\u2019, 42)\napp.logger.error(\u2019An error occurred\u2019)\nlogger Logger\nThe attached is a standard logging , so head over to the official logging\ndocumentationformoreinformation.\n4.13 Hooking in WSGI Middlewares\nIfyouwanttoaddaWSGImiddlewaretoyourapplicationyoucanwraptheinternal\nWSGI application. For example if you want to use one of the middlewares from the\nWerkzeugpackagetoworkaroundbugsinlighttpd,youcandoitlikethis:\nfrom werkzeug.contrib.fixers import LighttpdCGIRootFix\napp.wsgi_app = LighttpdCGIRootFix(app.wsgi_app)\n26\n4.14 Deploying to a Web Server\nReadytodeployyournewFlaskapp? Towrapupthequickstart,youcanimmediately\ndeploytoahostedplatform,allofwhichofferafreeplanforsmallprojects:\n\u2022 DeployingFlaskonHeroku\n\u2022 DeployingWSGIondotCloudwithFlask-specificnotes\nOtherplaceswhereyoucanhostyourFlaskapp:\n\u2022 DeployingFlaskonWebfaction\n\u2022 DeployingFlaskonGoogleAppEngine\n\u2022 SharingyourLocalhostServerwithLocaltunnel\nIf you manage your own hosts and would like to host yourself, see the chapter on\nDeploymentOptions.\n27\n28\n5\nCHAPTER\nTutorial\nYouwanttodevelopanapplicationwithPythonandFlask? Hereyouhavethechance\ntolearnthatbyexample. Inthistutorialwewillcreateasimplemicroblogapplication.\nIt only supports one user that can create text-only entries and there are no feeds or\ncomments, but it still features everything you need to get started. We will use Flask\nand SQLite as database which comes out of the box with Python, so there is nothing\nelseyouneed.\nIf you want the full sourcecode in advance or for comparison, check out the example\nsource.\n5.1 Introducing Flaskr\nWe will call our blogging application flaskr here, feel free to choose a less web-2.0-ish\nname;)Basicallywewantittodothefollowingthings:\n1. let the user sign in and out with credentials specified in the configuration. Only\noneuserissupported.\n2. when the user is logged in they can add new entries to the page consisting of a\ntext-only title and some HTML for the text. This HTML is not sanitized because\nwetrusttheuserhere.\n3. the page shows all entries so far in reverse order (newest on top) and the user\ncanaddnewonesfromthereifloggedin.\nWe will be using SQLite3 directly for that application because it\u2019s good enough for\nan application of that size. For larger applications however it makes a lot of sense to\nuse SQLAlchemy that handles database connections in a more intelligent way, allows\nyou to target different relational databases at once and more. You might also want to\nconsideroneofthepopularNoSQLdatabasesifyourdataismoresuitedforthose.\nHereascreenshotfromthefinalapplication:\n29\nContinuewithStep0: CreatingTheFolders.\n5.2 Step 0: Creating The Folders\nBeforewegetstarted,let\u2019screatethefoldersneededforthisapplication:\n/flaskr\n/static\n/templates\nThe flaskr folder is not a python package, but just something where we drop our files.\nWe will then put our database schema as well as main module into this folder. It is\ndone in the following way. The files inside the static folder are available to users of\ntheapplicationviaHTTP.Thisistheplacewherecssandjavascriptfilesgo. Insidethe\ntemplates folder Flask will look for Jinja2 templates. The templates you create later in\nthetutorialwillgointhisdirectory.\nContinuewithStep1: DatabaseSchema.\n30\n5.3 Step 1: Database Schema\nFirst we want to create the database schema. Only a single table is needed for this ap-\nplicationandweonlywanttosupportSQLitesocreatingthedatabaseschemaisquite\neasy. Just put the following contents into a file named schema.sql in the just created\nflaskrfolder:\ndrop table if exists entries;\ncreate table entries (\nid integer primary key autoincrement,\ntitle text not null,\ntext text not null\n);\nThis schema consists of a single table called entries and each row in this table has an\nid,atitleandatext. Theidisanautomaticallyincrementingintegerandaprimarykey,\ntheothertwoarestringsthatmustnotbenull.\nContinuewithStep2: ApplicationSetupCode.\n5.4 Step 2: Application Setup Code\nNow that we have the schema in place we can create the application module. Let\u2019s\ncallitflaskr.py. Wewillplacethisfileinsidetheflaskrfolder. Wewillbeginbyadding\nthe imports we need and by adding the config section. For small applications, it is\npossible to drop the configuration directly into the module, and this is what we will\nbedoinghere. Howeveracleanersolutionwouldbetocreateaseparate.inior.pyfile\nandloadthatorimportthevaluesfromthere.\nFirstweaddtheimportsinflaskr.py:\n# all the imports\nimport os\nimport sqlite3\nfrom flask import Flask, request, session, g, redirect, url_for, abort, \\\nrender_template, flash\nNext we can create our actual application and initialize it with the config from the\nsamefile,inflaskr.py:\n# create our little application :)\napp = Flask(__name__)\napp.config.from_object(__name__)\n# Load default config and override config from an environment variable\napp.config.update(dict(\nDATABASE=os.path.join(app.root_path, \u2019flaskr.db\u2019),\nSECRET_KEY=\u2019development key\u2019,\nUSERNAME=\u2019admin\u2019,\n31\nPASSWORD=\u2019default\u2019\n))\napp.config.from_envvar(\u2019FLASKR_SETTINGS\u2019, silent=True)\nConfig\nThe objectworkssimilartoadictionarysowecanupdateitwithnewvalues.\nDatabasePath\nOperating systems know the concept of a current working directory for each process.\nUnfortunatelyyoucannotdependonthisinwebapplicationsbecauseyoumighthave\nmorethanoneapplicationinthesameprocess.\napp.root_path\nFor this reason the attribute can be used to get the path to the applica-\nos.path\ntion. Togetherwiththe modulefilescantheneasilybefound. Inthisexample\nweplacethedatabaserightnexttoit.\nForareal-workapplicationit\u2019srecommendedtouseInstanceFoldersinstead.\nUsually, it is a good idea to load a separate, environment specific configuration file.\nFlask allows you to import multiple configurations and it will use the setting defined\nfrom_envvar()\nin the last import. This enables robust configuration setups. can help\nachievethis.\napp.config.from_envvar(\u2018FLASKR_SETTINGS\u2019,silent=True)\nFLASKR_SETTINGS\nSimplydefinetheenvironmentvariable thatpointstoaconfigfileto\nbe loaded. The silent switch just tells Flask to not complain if no such environment\nkeyisset.\nfrom_object()\nIn addition to that you can use the method on the config object and\nprovide it with an import name of a module. Flask will then initialize the variable\nfrom that module. Note that in all cases only variable names that are uppercase are\nconsidered.\nSECRET_KEY\nThe is needed to keep the client-side sessions secure. Choose that key\nwiselyandashardtoguessandcomplexaspossible.\nWe will also add a method that allows for easily connecting to the specified database.\nThiscanbeusedtoopenaconnectiononrequestandalsofromtheinteractivePython\nshellorascript. Thiswillcomeinhandylater. Wecreateasimpledatabaseconnection\nsqlite3.Row\nthrough SQLite and then tell it to use the object to represent rows. This\nallowsustotreattherowsasiftheyweredictionariesinsteadoftuples.\ndef connect_db():\n\"\"\"Connects to the specific database.\"\"\"\nrv = sqlite3.connect(app.config[\u2019DATABASE\u2019])\nrv.row_factory = sqlite3.Row\nreturn rv\nWith that out of the way you should be able to start up the application without prob-\nlems. Dothiswiththefollowingcommand:\n32\nflask --app=flaskr --debug run\n--debug\nThe flag enables or disables the interactive debugger. Never leave debug mode\nactivatedinaproductionsystem,becauseitwillallowuserstoexecutecodeontheserver!\nYou will see a message telling you that server has started along with the address at\nwhichyoucanaccessit.\nWhenyouheadovertotheserverinyourbrowseryouwillgetan404pagenotfound\nerrorbecausewedon\u2019thaveanyviewsyet. Butwewillfocusonthatalittlelater. First\nweshouldgetthedatabaseworking.\nExternallyVisibleServer\nWantyourservertobepubliclyavailable? Checkouttheexternallyvisibleserversection\nformoreinformation.\nContinuewithStep3: DatabaseConnections.\n5.5 Step 3: Database Connections\nWehavecreatedafunctionforestablishingadatabaseconnectionwithconnect_dbbut\nby itself that\u2019s not particularly useful. Creating and closing database connections all\nthe time is very inefficient, so we want to keep it around for longer. Because database\nconnectionsencapsulateatransactionwealsoneedtomakesurethatonlyonerequest\natthetimeusestheconnection. SohowcanweelegantlydothatwithFlask?\nThisiswheretheapplicationcontextcomesintoplay. Solet\u2019sstartthere.\nFlask provides us with two contexts: the application context and the request context.\nForthetimebeingallyouhavetoknowisthattherearespecialvariablesthatusethese.\nrequest\nFor instance the variable is the request object associated with the current re-\ng\nquest, whereas is a general purpose variable associated with the current application\ncontext. Wewillgointothedetailsofthisabitlater.\nForthetimebeingallyouhavetoknowisthatyoucanstoreinformationsafelyonthe\ng\nobject.\nSo when do you put it on there? To do that you can make a helper function. The first\ntime the function is called it will create a database connection for the current context\nandsuccessivecallswillreturnthealreadyestablishedconnection:\ndef get_db():\n\"\"\"Opens a new database connection if there is none yet for the\ncurrent application context.\n\"\"\"\nif not hasattr(g, \u2019sqlite_db\u2019):\ng.sqlite_db = connect_db()\nreturn g.sqlite_db\n33\nSo now we know how to connect, but how do we properly disconnect? For that flask\nteardown_appcontext()\nprovides us with the decorator. It\u2019s executed every time the\napplicationcontexttearsdown:\n@app.teardown_appcontext\ndef close_db(error):\n\"\"\"Closes the database again at the end of the request.\"\"\"\nif hasattr(g, \u2019sqlite_db\u2019):\ng.sqlite_db.close()\nteardown_appcontext()\nFunctions marked with are called every time the app context\ntears down. So what does this mean? Essentially the app context is created before\nthe request comes in and is destroyed (torn down) whenever the request finishes. A\nteardown can happen because of two reasons: either everything went well (the error\nparameterwillbeNone)oranexceptionhappenedinwhichcasetheerrorispassedto\ntheteardownfunction.\nCurious about what these contexts mean? Have a look at the The Application Context\ndocumentationtolearnmore.\nContinuetoStep4: CreatingTheDatabase.\nHint: WheredoIputthiscode?\nIf you\u2019ve been following along in this tutorial, you might be wondering where to put\nthe code from this step and the next. A logical place is to group these module-level\nget_db close_db\nfunctions together, and put your new and functions below your ex-\nconnect_db\nisting function(followingthetutorialline-by-line).\nIf you need a moment to find your bearings, take a look at how the example source\nis organized. In Flask, you can put all of your application code into a single Python\nmodule. Youdon\u2019thaveto,andifyourappgrowslarger,it\u2019sagoodideanotto.\n5.6 Step 4: Creating The Database\nAs outlined earlier, Flaskr is a database powered application, and more precisely, it is\nan application powered by a relational database system. Such systems need a schema\nthat tells them how to store that information. So before starting the server for the first\ntimeit\u2019simportanttocreatethatschema.\nSuch a schema can be created by piping the schema.sql file into the sqlite3 command as\nfollows:\nsqlite3 /tmp/flaskr.db < schema.sql\nThe downside of this is that it requires the sqlite3 command to be installed which is\nnot necessarily the case on every system. This also requires that we provide the path\nto the database which can introduce errors. It\u2019s a good idea to add a function that\ninitializesthedatabaseforyoutotheapplication.\n34\nflask\nTo do this we can create a function and hook it into the command that initial-\nizes the database. Let me show you the code first. Just add this function below the\nconnect_dbfunctioninflaskr.py:\ndef init_db():\ndb = get_db()\nwith app.open_resource(\u2019schema.sql\u2019, mode=\u2019r\u2019) as f:\ndb.cursor().executescript(f.read())\ndb.commit()\n@app.cli.command(\u2019initdb\u2019)\ndef initdb_command():\n\"\"\"Initializes the database.\"\"\"\ninit_db()\nprint \u2019Initialized the database.\u2019\napp.cli.command() flask\nThe decorator registers a new command with the script.\nWhen the command executes Flask will automatically create a application context for\nflask.g\nusboundtotherightapplication. Withinthefunctionwecanthenaccess and\nother things as we would expect. When the script ends, the application context tears\ndownandthedatabaseconnectionisreleased.\nWe want to keep an actual functions around that initializes the database though so\nthatwecaneasilycreatedatabasesinunittestslater. (FormoreinformationseeTesting\nFlaskApplications.)\nopen_resource()\nThe methodoftheapplicationobjectisaconvenienthelperfunction\nthatwillopenaresourcethattheapplicationprovides. Thisfunctionopensafilefrom\nthe resource location (your flaskr folder) and allows you to read from it. We are using\nthisheretoexecuteascriptonthedatabaseconnection.\nThe connection object provided by SQLite can give us a cursor object. On that cur-\nsor there is a method to execute a complete script. Finally we only have to commit\nthe changes. SQLite 3 and other transactional databases will not commit unless you\nexplicitlytellitto.\nflask\nNowitispossibletocreateadatabasewiththe script:\nflask --app=flaskr initdb\nInitialized the database.\nTroubleshooting\nIf you get an exception later that a table cannot be found check that you did execute\nthe initdb command and that your table names are correct (singular vs. plural for\nexample).\nContinuewithStep5: TheViewFunctions\n35\n5.7 Step 5: The View Functions\nNow that the database connections are working we can start writing the view func-\ntions. Wewillneedfourofthem:\n5.7.1 Show Entries\nThis view shows all the entries stored in the database. It listens on the root of the\napplication and will select title and text from the database. The one with the highest\nid (the newest entry) will be on top. The rows returned from the cursor look a bit like\nsqlite3.Row\ntuplesbecauseweareusingthe rowfactory.\nThe view function will pass the entries as dicts to the show_entries.html template and\nreturntherenderedone:\n@app.route(\u2019/\u2019)\ndef show_entries():\ndb = get_db()\ncur = db.execute(\u2019select title, text from entries order by id desc\u2019)\nentries = cur.fetchall()\nreturn render_template(\u2019show_entries.html\u2019, entries=entries)\n5.7.2 Add New Entry\nThis view lets the user add new entries if they are logged in. This only responds\nto POST requests, the actual form is shown on the show_entries page. If everything\nflash()\nworkedoutwellwewill aninformationmessagetothenextrequestandredi-\nrectbacktotheshow_entriespage:\n@app.route(\u2019/add\u2019, methods=[\u2019POST\u2019])\ndef add_entry():\nif not session.get(\u2019logged_in\u2019):\nabort(401)\ndb = get_db()\ndb.execute(\u2019insert into entries (title, text) values (?, ?)\u2019,\n[request.form[\u2019title\u2019], request.form[\u2019text\u2019]])\ndb.commit()\nflash(\u2019New entry was successfully posted\u2019)\nreturn redirect(url_for(\u2019show_entries\u2019))\nNote that we check that the user is logged in here (the logged_in key is present in the\nsessionandTrue).\nSecurityNote\nBesuretousequestionmarkswhenbuildingSQLstatements,asdoneintheexample\nabove. Otherwise, your app will be vulnerable to SQL injection when you use string\nformattingtobuildSQLstatements. SeeUsingSQLite3withFlask formore.\n36\n5.7.3 Login and Logout\nThese functions are used to sign the user in and out. Login checks the username and\npasswordagainsttheonesfromtheconfigurationandsetsthelogged_inkeyintheses-\nsion. Iftheuserloggedinsuccessfully,thatkeyissettoTrue,andtheuserisredirected\nback to the show_entries page. In addition, a message is flashed that informs the user\nthat he or she was logged in successfully. If an error occurred, the template is notified\naboutthat,andtheuserisaskedagain:\n@app.route(\u2019/login\u2019, methods=[\u2019GET\u2019, \u2019POST\u2019])\ndef login():\nerror = None\nif request.method == \u2019POST\u2019:\nif request.form[\u2019username\u2019] != app.config[\u2019USERNAME\u2019]:\nerror = \u2019Invalid username\u2019\nelif request.form[\u2019password\u2019] != app.config[\u2019PASSWORD\u2019]:\nerror = \u2019Invalid password\u2019\nelse:\nsession[\u2019logged_in\u2019] = True\nflash(\u2019You were logged in\u2019)\nreturn redirect(url_for(\u2019show_entries\u2019))\nreturn render_template(\u2019login.html\u2019, error=error)\nThe logout function, on the other hand, removes that key from the session again. We\npop()\nuseaneattrickhere: ifyouusethe methodofthedictandpassasecondparam-\neter to it (the default), the method will delete the key from the dictionary if present or\ndo nothing when that key is not in there. This is helpful because now we don\u2019t have\ntocheckiftheuserwasloggedin.\n@app.route(\u2019/logout\u2019)\ndef logout():\nsession.pop(\u2019logged_in\u2019, None)\nflash(\u2019You were logged out\u2019)\nreturn redirect(url_for(\u2019show_entries\u2019))\nContinuewithStep6: TheTemplates.\n5.8 Step 6: The Templates\nNowweshouldstartworkingonthetemplates. IfwerequesttheURLsnowwewould\nonly get an exception that Flask cannot find the templates. The templates are using\nJinja2 syntax and have autoescaping enabled by default. This means that unless you\nMarkup |safe\nmarkavalueinthecodewith orwiththe filterinthetemplate,Jinja2will\n< >\nensurethatspecialcharacterssuchas or areescapedwiththeirXMLequivalents.\n37\nWe are also using template inheritance which makes it possible to reuse the layout of\nthewebsiteinallpages.\nPutthefollowingtemplatesintothetemplatesfolder:\n5.8.1 layout.html\nThis template contains the HTML skeleton, the header and a link to log in (or log out\nif the user was already logged in). It also displays the flashed messages if there are\n{% block body %} body\nany. The block can be replaced by a block of the same name ( )\ninachildtemplate.\nsession\nThe dict is available in the template as well and you can use that to check\nif the user is logged in or not. Note that in Jinja you can access missing attributes\nand items of objects / dicts which makes the following code work, even if there is no\n\u2019logged_in\u2019\nkeyinthesession:\n<!doctype html>\n<title>Flaskr</title>\n<link rel=stylesheet type=text/css href=\"{{ url_for(\u2019static\u2019, filename=\u2019style.css\u2019) }}\">\n<div class=page>\n<h1>Flaskr</h1>\n<div class=metanav>\n{% if not session.logged_in %}\n<a href=\"{{ url_for(\u2019login\u2019) }}\">log in</a>\n{% else %}\n<a href=\"{{ url_for(\u2019logout\u2019) }}\">log out</a>\n{% endif %}\n</div>\n{% for message in get_flashed_messages() %}\n<div class=flash>{{ message }}</div>\n{% endfor %}\n{% block body %}{% endblock %}\n</div>\n5.8.2 show_entries.html\nThis template extends the layout.html template from above to display the mes-\nsages. Note that the for loop iterates over the messages we passed in with the\nrender_template()\nfunction. Wealsotelltheformtosubmittoyouradd_entryfunction\nandusePOST asHTTPmethod:\n{% extends \"layout.html\" %}\n{% block body %}\n{% if session.logged_in %}\n<form action=\"{{ url_for(\u2019add_entry\u2019) }}\" method=post class=add-entry>\n<dl>\n<dt>Title:\n<dd><input type=text size=30 name=title>\n38\n<dt>Text:\n<dd><textarea name=text rows=5 cols=40></textarea>\n<dd><input type=submit value=Share>\n</dl>\n</form>\n{% endif %}\n<ul class=entries>\n{% for entry in entries %}\n<li><h2>{{ entry.title }}</h2>{{ entry.text|safe }}\n{% else %}\n<li><em>Unbelievable. No entries here so far</em>\n{% endfor %}\n</ul>\n{% endblock %}\n5.8.3 login.html\nFinally the login template which basically just displays a form to allow the user to\nlogin:\n{% extends \"layout.html\" %}\n{% block body %}\n<h2>Login</h2>\n{% if error %}<p class=error><strong>Error:</strong> {{ error }}{% endif %}\n<form action=\"{{ url_for(\u2019login\u2019) }}\" method=post>\n<dl>\n<dt>Username:\n<dd><input type=text name=username>\n<dt>Password:\n<dd><input type=password name=password>\n<dd><input type=submit value=Login>\n</dl>\n</form>\n{% endblock %}\nContinuewithStep7: AddingStyle.\n5.9 Step 7: Adding Style\nNow that everything else works, it\u2019s time to add some style to the application. Just\ncreateastylesheetcalledstyle.cssinthestaticfolderwecreatedbefore:\nbody { font-family: sans-serif; background: #eee; }\na, h1, h2 { color: #377ba8; }\nh1, h2 { font-family: \u2019Georgia\u2019, serif; margin: 0; }\nh1 { border-bottom: 2px solid #eee; }\nh2 { font-size: 1.2em; }\n39\n.page { margin: 2em auto; width: 35em; border: 5px solid #ccc;\npadding: 0.8em; background: white; }\n.entries { list-style: none; margin: 0; padding: 0; }\n.entries li { margin: 0.8em 1.2em; }\n.entries li h2 { margin-left: -1em; }\n.add-entry { font-size: 0.9em; border-bottom: 1px solid #ccc; }\n.add-entry dl { font-weight: bold; }\n.metanav { text-align: right; font-size: 0.8em; padding: 0.3em;\nmargin-bottom: 1em; background: #fafafa; }\n.flash { background: #cee5F5; padding: 0.5em;\nborder: 1px solid #aacbe2; }\n.error { background: #f0d6d6; padding: 0.5em; }\nContinuewithBonus: TestingtheApplication.\n5.10 Bonus: Testing the Application\nNow that you have finished the application and everything works as expected, it\u2019s\nprobablynotabadideatoaddautomatedteststosimplifymodificationsinthefuture.\nThe application above is used as a basic example of how to perform unittesting in the\nTesting Flask Applications section of the documentation. Go there to see how easy it is\ntotestFlaskapplications.\n40\n6\nCHAPTER\nTemplates\nFlaskleveragesJinja2astemplateengine. Youareobviouslyfreetouseadifferenttem-\nplate engine, but you still have to install Jinja2 to run Flask itself. This requirement is\nnecessarytoenablerichextensions. AnextensioncandependonJinja2beingpresent.\nThis section only gives a very quick introduction into how Jinja2 is integrated into\nFlask. Ifyouwantinformationonthetemplateengine\u2019ssyntaxitself,headovertothe\nofficialJinja2TemplateDocumentationformoreinformation.\n6.1 Jinja Setup\nUnlesscustomized,Jinja2isconfiguredbyFlaskasfollows:\n.html .htm .xml\n\u2022 autoescaping is enabled for all templates ending in , , as well as\n.xhtml\n{% autoescape %}\n\u2022 atemplatehastheabilitytooptin/outautoescapingwiththe\ntag.\n\u2022 Flask inserts a couple of global functions and helpers into the Jinja2 context, ad-\nditionallytothevaluesthatarepresentbydefault.\n6.2 Standard Context\nThefollowingglobalvariablesareavailablewithinJinja2templatesbydefault:\nconfig\nflask.config\nThecurrentconfigurationobject( )\nNewinversion0.6.\nChanged in version 0.10: This is now always available, even in imported tem-\nplates.\n41\nrequest\nflask.request\nThe current request object ( ). This variable is unavailable if the\ntemplatewasrenderedwithoutanactiverequestcontext.\nsession\nflask.session\nThe current session object ( ). This variable is unavailable if the\ntemplatewasrenderedwithoutanactiverequestcontext.\ng\nflask.g\nTherequest-boundobjectforglobalvariables( ). Thisvariableisunavail-\nableifthetemplatewasrenderedwithoutanactiverequestcontext.\nurl_for()\nflask.url_for()\nThe function.\nget_flashed_messages()\nflask.get_flashed_messages()\nThe function.\nTheJinjaContextBehavior\nThese variables are added to the context of variables, they are not global variables.\nThe difference is that by default these will not show up in the context of imported\ntemplates. This is partially caused by performance considerations, partially to keep\nthingsexplicit.\nWhat does this mean for you? If you have a macro you want to import, that needs to\naccesstherequestobjectyouhavetwopossibilities:\n1. you explicitly pass the request to the macro as parameter, or the attribute of the\nrequestobjectyouareinterestedin.\n2. youimportthemacro\u201cwithcontext\u201d.\nImportingwithcontextlookslikethis:\n{% from \u2019_helpers.html\u2019 import my_macro with context %}\n6.3 Standard Filters\nThesefiltersareavailableinJinja2additionallytothefiltersprovidedbyJinja2itself:\ntojson()\nThis function converts the given object into JSON representation. This is for\nexampleveryhelpfulifyoutrytogenerateJavaScriptonthefly.\nNote that inside script tags no escaping must take place, so make sure to disable\n|safe\nescapingwith beforeFlask0.10ifyouintendtouseitinsidescripttags:\n<script type=text/javascript>\ndoSomethingWith({{ user.username|tojson|safe }});\n</script>\n42\n6.4 Controlling Autoescaping\nAutoescaping is the concept of automatically escaping special characters of you. Spe-\n& > < \"\ncial characters in the sense of HTML (or XML, and thus XHTML) are , , , as well\n\u2019\nas . Becausethesecharacterscarryspecificmeaningsindocumentsontheirownyou\nhavetoreplacethembysocalled\u201centities\u201difyouwanttousethemfortext. Notdoing\nsowouldnotonlycauseuserfrustrationbytheinabilitytousethesecharactersintext,\nbutcanalsoleadtosecurityproblems. (seeCross-SiteScripting(XSS))\nSometimes however you will need to disable autoescaping in templates. This can be\nthe case if you want to explicitly inject HTML into pages, for example if they come\nfromasystemthatgeneratesecureHTMLlikeamarkdowntoHTMLconverter.\nTherearethreewaystoaccomplishthat:\nMarkup\n\u2022 InthePythoncode,wraptheHTMLstringina objectbeforepassingitto\nthetemplate. Thisisingeneraltherecommendedway.\n|safe\n\u2022 Inside the template, use the filter to explicitly mark a string as safe HTML\n{{ myvariable|safe }}\n( )\n\u2022 Temporarilydisabletheautoescapesystemaltogether.\n{% autoescape %}\nTo disable the autoescape system in templates, you can use the\nblock:\n{% autoescape false %}\n<p>autoescaping is disabled here\n<p>{{ will_not_be_escaped }}\n{% endautoescape %}\nWhenever you do this, please be very cautious about the variables you are using in\nthisblock.\n6.5 Registering Filters\nIf you want to register your own filters in Jinja2 you have two ways to do that.\njinja_env\nYou can either put them by hand into the of the application or use the\ntemplate_filter()\ndecorator.\nThetwofollowingexamplesworkthesameandbothreverseanobject:\n@app.template_filter(\u2019reverse\u2019)\ndef reverse_filter(s):\nreturn s[::-1]\ndef reverse_filter(s):\nreturn s[::-1]\napp.jinja_env.filters[\u2019reverse\u2019] = reverse_filter\n43\nIncaseofthedecoratortheargumentisoptionalifyouwanttousethefunctionname\nas name of the filter. Once registered, you can use the filter in your templates in the\nsame way as Jinja2\u2019s builtin filters, for example if you have a Python list in context\ncalledmylist:\n{% for x in mylist | reverse %}\n{% endfor %}\n6.6 Context Processors\nToinjectnewvariablesautomaticallyintothecontextofatemplate,contextprocessors\nexist in Flask. Context processors run before the template is rendered and have the\nabilitytoinjectnewvaluesintothetemplatecontext. Acontextprocessorisafunction\nthat returns a dictionary. The keys and values of this dictionary are then merged with\nthetemplatecontext,foralltemplatesintheapp:\n@app.context_processor\ndef inject_user():\nreturn dict(user=g.user)\nThe context processor above makes a variable called user available in the template\nwith the value of g.user. This example is not very interesting because g is available in\ntemplatesanyways,butitgivesanideahowthisworks.\nVariables are not limited to values; a context processor can also make functions avail-\nabletotemplates(sincePythonallowspassingaroundfunctions):\n@app.context_processor\ndef utility_processor():\ndef format_price(amount, currency=u\u2019\u2019):\nreturn u\u2019{0:.2f}{1}\u2019.format(amount, currency)\nreturn dict(format_price=format_price)\nThecontextprocessorabovemakestheformat_pricefunctionavailabletoalltemplates:\n{{ format_price(0.33) }}\nYou could also build format_price as a template filter (see Registering Filters), but this\ndemonstrateshowtopassfunctionsinacontextprocessor.\n44\n7\nCHAPTER\nTesting Flask Applications\nSomethingthatisuntestedisbroken.\nThe origin of this quote is unknown and while it is not entirely correct, it is also not\nfar from the truth. Untested applications make it hard to improve existing code and\ndevelopers of untested applications tend to become pretty paranoid. If an application\nhas automated tests, you can safely make changes and instantly know if anything\nbreaks.\nClient\nFlask provides a way to test your application by exposing the Werkzeug test\nand handling the context locals for you. You can then use that with your favourite\nunittest\ntesting solution. In this documentation we will use the package that comes\npre-installedwithPython.\n7.1 The Application\nFirst, we need an application to test; we will use the application from the Tutorial. If\nyoudon\u2019thavethatapplicationyet,getthesourcesfromtheexamples.\n7.2 The Testing Skeleton\nIn order to test the application, we add a second module (flaskr_tests.py) and create a\nunittestskeletonthere:\nimport os\nimport flaskr\nimport unittest\nimport tempfile\nclass FlaskrTestCase(unittest.TestCase):\ndef setUp(self):\n45\nself.db_fd, flaskr.app.config[\u2019DATABASE\u2019] = tempfile.mkstemp()\nflaskr.app.config[\u2019TESTING\u2019] = True\nself.app = flaskr.app.test_client()\nwith flaskr.app.app_context():\nflaskr.init_db()\ndef tearDown(self):\nos.close(self.db_fd)\nos.unlink(flaskr.app.config[\u2019DATABASE\u2019])\nif __name__ == \u2019__main__\u2019:\nunittest.main()\nsetUp()\nThecodeinthe methodcreatesanewtestclientandinitializesanewdatabase.\nThis function is called before each individual test function is run. To delete the\ndatabase after the test, we close the file and remove it from the filesystem in the\ntearDown() TESTING\nmethod. Additionally during setup the config flag is activated.\nWhat it does is disabling the error catching during request handling so that you get\nbettererrorreportswhenperformingtestrequestsagainsttheapplication.\nThis test client will give us a simple interface to the application. We can trigger test\nrequeststotheapplication,andtheclientwillalsokeeptrackofcookiesforus.\nBecause SQLite3 is filesystem-based we can easily use the tempfile module to create a\nmkstemp()\ntemporarydatabaseandinitializeit. The functiondoestwothingsforus: it\nreturns a low-level file handle and a random file name, the latter we use as database\nos.close()\nname. We just have to keep the db_fd around so that we can use the func-\ntiontoclosethefile.\nIfwenowrunthetestsuite,weshouldseethefollowingoutput:\n$ python flaskr_tests.py\n----------------------------------------------------------------------\nRan 0 tests in 0.000s\nOK\nEven though it did not run any actual tests, we already know that our flaskr applica-\ntionissyntacticallyvalid,otherwisetheimportwouldhavediedwithanexception.\n7.3 The First Test\nNow it\u2019s time to start testing the functionality of the application. Let\u2019s check that the\n/\napplication shows \u201cNo entries here so far\u201d if we access the root of the application ( ).\nTodothis,weaddanewtestmethodtoourclass,likethis:\nclass FlaskrTestCase(unittest.TestCase):\ndef setUp(self):\n46\nself.db_fd, flaskr.app.config[\u2019DATABASE\u2019] = tempfile.mkstemp()\nself.app = flaskr.app.test_client()\nflaskr.init_db()\ndef tearDown(self):\nos.close(self.db_fd)\nos.unlink(flaskr.app.config[\u2019DATABASE\u2019])\ndef test_empty_db(self):\nrv = self.app.get(\u2019/\u2019)\nassert \u2019No entries here so far\u2019 in rv.data\nunittest\nNotice that our test functions begin with the word test; this allows to auto-\nmaticallyidentifythemethodasatesttorun.\nBy using self.app.get we can send an HTTP GET request to the application with the\nresponse_class\ngiven path. The return value will be a object. We can now use the\ndata\nattribute to inspect the return value (as string) from the application. In this case,\n\u2019No entries here so far\u2019\nweensurethat ispartoftheoutput.\nRunitagainandyoushouldseeonepassingtest:\n$ python flaskr_tests.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.034s\nOK\n7.4 Logging In and Out\nThe majority of the functionality of our application is only available for the adminis-\ntrativeuser,soweneedawaytologourtestclientinandoutoftheapplication. Todo\nthis, we fire some requests to the login and logout pages with the required form data\n(username and password). And because the login and logout pages redirect, we tell\ntheclienttofollow_redirects.\nAddthefollowingtwomethodstoyourFlaskrTestCaseclass:\ndef login(self, username, password):\nreturn self.app.post(\u2019/login\u2019, data=dict(\nusername=username,\npassword=password\n), follow_redirects=True)\ndef logout(self):\nreturn self.app.get(\u2019/logout\u2019, follow_redirects=True)\nNow we can easily test that logging in and out works and that it fails with invalid\ncredentials. Addthisnewtesttotheclass:\n47\ndef test_login_logout(self):\nrv = self.login(\u2019admin\u2019, \u2019default\u2019)\nassert \u2019You were logged in\u2019 in rv.data\nrv = self.logout()\nassert \u2019You were logged out\u2019 in rv.data\nrv = self.login(\u2019adminx\u2019, \u2019default\u2019)\nassert \u2019Invalid username\u2019 in rv.data\nrv = self.login(\u2019admin\u2019, \u2019defaultx\u2019)\nassert \u2019Invalid password\u2019 in rv.data\n7.5 Test Adding Messages\nWeshouldalsotestthataddingmessagesworks. Addanewtestmethodlikethis:\ndef test_messages(self):\nself.login(\u2019admin\u2019, \u2019default\u2019)\nrv = self.app.post(\u2019/add\u2019, data=dict(\ntitle=\u2019<Hello>\u2019,\ntext=\u2019<strong>HTML</strong> allowed here\u2019\n), follow_redirects=True)\nassert \u2019No entries here so far\u2019 not in rv.data\nassert \u2019&lt;Hello&gt;\u2019 in rv.data\nassert \u2019<strong>HTML</strong> allowed here\u2019 in rv.data\nHere we check that HTML is allowed in the text but not in the title, which is the in-\ntendedbehavior.\nRunningthatshouldnowgiveusthreepassingtests:\n$ python flaskr_tests.py\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.332s\nOK\nFor more complex tests with headers and status codes, check out the MiniTwit Exam-\nplefromthesourceswhichcontainsalargertestsuite.\n7.6 Other Testing Tricks\ntest_request_context()\nBesidesusingthetestclientasshownabove,thereisalsothe\nmethod that can be used in combination with the with statement to activate a request\nrequest g session\ncontext temporarily. With this you can access the , and objects like\ninviewfunctions. Hereisafullexamplethatdemonstratesthisapproach:\n48\napp = flask.Flask(__name__)\nwith app.test_request_context(\u2019/?name=Peter\u2019):\nassert flask.request.path == \u2019/\u2019\nassert flask.request.args[\u2019name\u2019] == \u2019Peter\u2019\nAlltheotherobjectsthatarecontextboundcanbeusedinthesameway.\nIf you want to test your application with different configurations and there does not\nseem to be a good way to do that, consider switching to application factories (see\nApplicationFactories).\nbefore_request()\nNote however that if you are using a test request context, the\nafter_request()\nfunctions are not automatically called same for functions. How-\nteardown_request()\never functionsareindeedexecutedwhenthetestrequestcontext\nbefore_request()\nleaves the with block. If you do want the functions to be called as\npreprocess_request()\nwell,youneedtocall yourself:\napp = flask.Flask(__name__)\nwith app.test_request_context(\u2019/?name=Peter\u2019):\napp.preprocess_request()\n...\nThis can be necessary to open database connections or something similar depending\nonhowyourapplicationwasdesigned.\nafter_request()\nIf you want to call the functions you need to call into\nprocess_response()\nwhichhoweverrequiresthatyoupassitaresponseobject:\napp = flask.Flask(__name__)\nwith app.test_request_context(\u2019/?name=Peter\u2019):\nresp = Response(\u2019...\u2019)\nresp = app.process_response(resp)\n...\nThis in general is less useful because at that point you can directly start using the test\nclient.\n7.7 Faking Resources and Context\nNewinversion0.10.\nA very common pattern is to store user authorization information and database con-\nflask.g\nnectionsontheapplicationcontextorthe object. Thegeneralpatternforthisis\nto put the object on thereon first usage and then to remove it on a teardown. Imagine\nforinstancethiscodetogetthecurrentuser:\ndef get_user():\nuser = getattr(g, \u2019user\u2019, None)\n49\nif user is None:\nuser = fetch_current_user_from_database()\ng.user = user\nreturn user\nFor a test it would be nice to override this user from the outside without hav-\ning to change some code. This can trivially be accomplished with hooking the\nflask.appcontext_pushed\nsignal:\nfrom contextlib import contextmanager\nfrom flask import appcontext_pushed\n@contextmanager\ndef user_set(app, user):\ndef handler(sender, **kwargs):\ng.user = user\nwith appcontext_pushed.connected_to(handler, app):\nyield\nAndthentouseit:\nfrom flask import json, jsonify\n@app.route(\u2019/users/me\u2019)\ndef users_me():\nreturn jsonify(username=g.user.username)\nwith user_set(app, my_user):\nwith app.test_client() as c:\nresp = c.get(\u2019/users/me\u2019)\ndata = json.loads(resp.data)\nself.assert_equal(data[\u2019username\u2019], my_user.username)\n7.8 Keeping the Context Around\nNewinversion0.4.\nSometimes it is helpful to trigger a regular request but still keep the context around\nfor a little longer so that additional introspection can happen. With Flask 0.4 this is\ntest_client()\npossiblebyusingthe withawithblock:\napp = flask.Flask(__name__)\nwith app.test_client() as c:\nrv = c.get(\u2019/?tequila=42\u2019)\nassert request.args[\u2019tequila\u2019] == \u201942\u2019\ntest_client()\nIf you were to use just the without the with block, the assert would fail\nwith an error because request is no longer available (because you are trying to use it\noutsideoftheactualrequest).\n50\n7.9 Accessing and Modifying Sessions\nNewinversion0.8.\nSometimes it can be very helpful to access or modify the sessions from the test client.\nGenerally there are two ways for this. If you just want to ensure that a session has\ncertain keys set to certain values you can just keep the context around and access\nflask.session\n:\nwith app.test_client() as c:\nrv = c.get(\u2019/\u2019)\nassert flask.session[\u2019foo\u2019] == 42\nThishoweverdoesnotmakeitpossibletoalsomodifythesessionortoaccesstheses-\nsionbeforearequestwasfired. StartingwithFlask0.8weprovideasocalled\u201csession\ntransaction\u201d which simulates the appropriate calls to open a session in the context of\nthetestclientandtomodifyit. Attheendofthetransactionthesessionisstored. This\nworksindependentlyofthesessionbackendused:\nwith app.test_client() as c:\nwith c.session_transaction() as sess:\nsess[\u2019a_key\u2019] = \u2019a value\u2019\n# once this is reached the session was stored\nsess flask.session\nNote that in this case you have to use the object instead of the\nproxy. Theobjecthoweveritselfwillprovidethesameinterface.\n51\n52\n8\nCHAPTER\nLogging Application Errors\nNewinversion0.3.\nApplications fail, servers fail. Sooner or later you will see an exception in production.\nEvenifyourcodeis100%correct,youwillstillseeexceptionsfromtimetotime. Why?\nBecause everything else involved will fail. Here some situations where perfectly fine\ncodecanleadtoservererrors:\n\u2022 theclientterminatedtherequestearlyandtheapplicationwasstillreadingfrom\ntheincomingdata.\n\u2022 thedatabaseserverwasoverloadedandcouldnothandlethequery.\n\u2022 afilesystemisfull\n\u2022 aharddrivecrashed\n\u2022 abackendserveroverloaded\n\u2022 aprogrammingerrorinalibraryyouareusing\n\u2022 networkconnectionoftheservertoanothersystemfailed.\nAnd that\u2019s just a small sample of issues you could be facing. So how do we deal with\nthat sort of problem? By default if your application runs in production mode, Flask\nlogger\nwilldisplayaverysimplepageforyouandlogtheexceptiontothe .\nButthereismoreyoucando,andwewillcoversomebettersetupstodealwitherrors.\n8.1 Error Mails\nIftheapplicationrunsinproductionmode(whichitwilldoonyourserver)youwon\u2019t\nsee any log messages by default. Why is that? Flask tries to be a zero-configuration\nframework. Whereshoulditdropthelogsforyouifthereisnoconfiguration? Guess-\ning is not a good idea because chances are, the place it guessed is not the place where\nthe user has permission to create a logfile. Also, for most small applications nobody\nwilllookatthelogsanyways.\n53\nInfact,Ipromiseyourightnowthatifyouconfigurealogfilefortheapplicationerrors\nyouwillneverlookatitexceptfordebugginganissuewhenauserreporteditforyou.\nWhatyouwantinsteadisamailthesecondtheexceptionhappened. Thenyougetan\nalertandyoucandosomethingaboutit.\nFlask uses the Python builtin logging system, and it can actually send you mails for\nerrors which is probably what you want. Here is how you can configure the Flask\nloggertosendyoumailsforexceptions:\nADMINS = [\u2019yourname@example.com\u2019]\nif not app.debug:\nimport logging\nfrom logging.handlers import SMTPHandler\nmail_handler = SMTPHandler(\u2019127.0.0.1\u2019,\n\u2019server-error@example.com\u2019,\nADMINS, \u2019YourApplication Failed\u2019)\nmail_handler.setLevel(logging.ERROR)\napp.logger.addHandler(mail_handler)\nSMTPHandler\nSo what just happened? We created a new that will send mails with\n127.0.0.1\nthe mail server listening on to all the ADMINS from the address server-\nerror@example.com with the subject \u201cYourApplication Failed\u201d. If your mail server re-\nquires credentials, these can also be provided. For that check out the documentation\nSMTPHandler\nforthe .\nWe also tell the handler to only send errors and more critical messages. Because we\ncertainlydon\u2019twanttogetamailforwarningsorotheruselesslogsthatmighthappen\nduringrequesthandling.\nBefore you run that in production, please also look at Controlling the Log Format to put\nmoreinformationintothaterrormail. Thatwillsaveyoufromalotoffrustration.\n8.2 Logging to a File\nEvenifyougetmails,youprobablyalsowanttologwarnings. It\u2019sagoodideatokeep\nas much information around that might be required to debug a problem. Please note\nthat Flask itself will not issue any warnings in the core system, so it\u2019s your responsi-\nbilitytowarninthecodeifsomethingseemsodd.\nThere are a couple of handlers provided by the logging system out of the box but not\nall of them are useful for basic error logging. The most interesting are probably the\nfollowing:\nFileHandler\n\u2022 -logsmessagestoafileonthefilesystem.\nRotatingFileHandler\n\u2022 - logs messages to a file on the filesystem and will rotate\nafteracertainnumberofmessages.\nNTEventLogHandler\n\u2022 - will log to the system event log of a Windows system. If\nyouaredeployingonaWindowsbox,thisiswhatyouwanttouse.\n54\nSysLogHandler\n\u2022 -sendslogstoaUNIXsyslog.\nOnceyoupickedyourloghandler,dolikeyoudidwiththeSMTPhandlerabove,just\nmakesuretousealowersetting(IwouldrecommendWARNING):\nif not app.debug:\nimport logging\nfrom themodule import TheHandlerYouWant\nfile_handler = TheHandlerYouWant(...)\nfile_handler.setLevel(logging.WARNING)\napp.logger.addHandler(file_handler)\n8.3 Controlling the Log Format\nBy default a handler will only write the message string into a file or send you that\nmessage as mail. A log record stores more information, and it makes a lot of sense to\nconfigure your logger to also contain that information so that you have a better idea\nofwhythaterrorhappened,andmoreimportantly,whereitdid.\nA formatter can be instantiated with a format string. Note that tracebacks are ap-\npended to the log entry automatically. You don\u2019t have to do that in the log formatter\nformatstring.\nHeresomeexamplesetups:\n8.3.1 Email\nfrom logging import Formatter\nmail_handler.setFormatter(Formatter(\u2019\u2019\u2019\nMessage type: %(levelname)s\nLocation: %(pathname)s:%(lineno)d\nModule: %(module)s\nFunction: %(funcName)s\nTime: %(asctime)s\nMessage:\n%(message)s\n\u2019\u2019\u2019))\n8.3.2 File logging\nfrom logging import Formatter\nfile_handler.setFormatter(Formatter(\n\u2019%(asctime)s %(levelname)s: %(message)s \u2019\n\u2019[in %(pathname)s:%(lineno)d]\u2019\n))\n55\n8.3.3 Complex Log Formatting\nHere is a list of useful formatting variables for the format string. Note that this list is\nlogging\nnotcomplete,consulttheofficialdocumentationofthe packageforafulllist.\nFormat Description\n%(levelname)s \u2019DEBUG\u2019 \u2019INFO\u2019 \u2019WARNING\u2019\nText logging level for the message ( , , ,\n\u2019ERROR\u2019 \u2019CRITICAL\u2019\n, ).\n%(pathname)s\nFullpathnameofthesourcefilewheretheloggingcallwasissued\n(ifavailable).\n%(filename)s\nFilenameportionofpathname.\n%(module)s\nModule(nameportionoffilename).\n%(funcName)s\nNameoffunctioncontainingtheloggingcall.\n%(lineno)d\nSource line number where the logging call was issued (if avail-\nable).\n%(asctime)s\nHuman-readable time when the LogRecord\u2018 was created. By de-\n\"2003-07-08 16:49:45,896\"\nfault this is of the form (the num-\nbers after the comma are millisecond portion of the time). This\ncan be changed by subclassing the formatter and overriding the\nformatTime()\nmethod.\n%(message)s msg % args\nTheloggedmessage,computedas\nIf you want to further customize the formatting, you can subclass the formatter. The\nformatterhasthreeinterestingmethods:\nformat(): handles the actual formatting. It is passed a LogRecord object and has to\nreturntheformattedstring.\nformatTime(): called for asctime formatting. If you want a different time format you\ncanoverridethismethod.\nformatException() calledforexceptionformatting. Itispassedan exc_info tupleand\nhastoreturnastring. Thedefaultisusuallyfine,youdon\u2019thavetooverrideit.\nFormoreinformation,headovertotheofficialdocumentation.\n8.4 Other Libraries\nSo far we only configured the logger your application created itself. Other libraries\nmight log themselves as well. For example, SQLAlchemy uses logging heavily in its\nlogging\ncore. Whilethereisamethodtoconfigureallloggersatonceinthe package,I\nwouldnotrecommendusingit. Theremightbeasituationinwhichyouwanttohave\nmultipleseparateapplicationsrunningsidebysideinthesamePythoninterpreterand\nthenitbecomesimpossibletohavedifferentloggingsetupsforthose.\nInstead, I would recommend figuring out which loggers you are interested in, getting\ngetLogger()\ntheloggerswiththe functionanditeratingoverthemtoattachhandlers:\nfrom logging import getLogger\nloggers = [app.logger, getLogger(\u2019sqlalchemy\u2019),\n56\ngetLogger(\u2019otherlibrary\u2019)]\nfor logger in loggers:\nlogger.addHandler(mail_handler)\nlogger.addHandler(file_handler)\n57\n58\n9\nCHAPTER\nDebugging Application Errors\nForproductionapplications,configureyourapplicationwithloggingandnotifications\nas described in Logging Application Errors. This section provides pointers when de-\nbugging deployment configuration and digging deeper with a full-featured Python\ndebugger.\n9.1 When in Doubt, Run Manually\nHaving problems getting your application configured for production? If you have\nshell access to your host, verify that you can run your application manually from the\nshell in the deployment environment. Be sure to run under the same user account\nas the configured deployment to troubleshoot permission issues. You can use Flask\u2019s\nbuiltindevelopmentserverwithdebug=Trueonyourproductionhost,whichishelpful\nin catching configuration issues, but be sure to do this temporarily in a controlled\nenvironment. Donotruninproductionwithdebug=True.\n9.2 Working with Debuggers\nTo dig deeper, possibly to trace code execution, Flask provides a debugger out of the\nbox (see Debug Mode). If you would like to use another Python debugger, note that\ndebuggersinterferewitheachother. Youhavetosetsomeoptionsinordertouseyour\nfavoritedebugger:\ndebug\n\u2022 -whethertoenabledebugmodeandcatchexceptions\nuse_debugger\n\u2022 -whethertousetheinternalFlaskdebugger\nuse_reloader\n\u2022 -whethertoreloadandforktheprocessonexception\ndebug\nmustbeTrue(i.e.,exceptionsmustbecaught)inorderfortheothertwooptions\ntohaveanyvalue.\n59\nuse_debugger\nIf you\u2019re using Aptana/Eclipse for debugging you\u2019ll need to set both\nuse_reloader\nand toFalse.\nA possible useful pattern for configuration is to set the following in your config.yaml\n(changetheblockasappropriateforyourapplication,ofcourse):\nFLASK:\nDEBUG: True\nDEBUG_WITH_APTANA: True\nTheninyourapplication\u2019sentry-point(main.py),youcouldhavesomethinglike:\nif __name__ == \"__main__\":\n# To allow aptana to receive errors, set use_debugger=False\napp = create_app(config=\"config.yaml\")\nif app.debug: use_debugger = True\ntry:\n# Disable Flask\u2019s debugger if external debugger is requested\nuse_debugger = not(app.config.get(\u2019DEBUG_WITH_APTANA\u2019))\nexcept:\npass\napp.run(use_debugger=use_debugger, debug=app.debug,\nuse_reloader=use_debugger, host=\u20190.0.0.0\u2019)\n60\n10\nCHAPTER\nConfiguration Handling\nNewinversion0.3.\nApplications need some kind of configuration. There are different settings you might\nwant to change depending on the application environment like toggling the debug\nmode,settingthesecretkey,andothersuchenvironment-specificthings.\nThewayFlaskisdesignedusuallyrequirestheconfigurationtobeavailablewhenthe\napplicationstartsup. Youcanhardcodetheconfigurationinthecode,whichformany\nsmallapplicationsisnotactuallythatbad,buttherearebetterways.\nIndependent of how you load your config, there is a config object available which\nconfig Flask\nholds the loaded configuration values: The attribute of the object. This\nis the place where Flask itself puts certain configuration values and also where exten-\nsionscanputtheirconfigurationvalues. Butthisisalsowhereyoucanhaveyourown\nconfiguration.\n10.1 Configuration Basics\nconfig\nThe is actually a subclass of a dictionary and can be modified just like any\ndictionary:\napp = Flask(__name__)\napp.config[\u2019DEBUG\u2019] = True\nFlask\nCertain configuration values are also forwarded to the object so you can read\nandwritethemfromthere:\napp.debug = True\ndict.update()\nToupdatemultiplekeysatonceyoucanusethe method:\napp.config.update(\nDEBUG=True,\nSECRET_KEY=\u2019...\u2019\n)\n61\n10.2 Builtin Configuration Values\nThefollowingconfigurationvaluesareusedinternallybyFlask:\n62\nDEBUG\nenable/disabledebugmode\nTESTING\nenable/disabletestingmode\nPROPAGATE_EXCEPTIONS\nexplicitlyenableordisablethepropagationof\nexceptions. If not set or explicitly set to None\nthisisimplicitlytrueifeitherTESTINGorDE-\nBUGistrue.\nPRESERVE_CONTEXT_ON_EXCEPTION\nBydefaultiftheapplicationisindebugmode\nthe request context is not popped on excep-\ntions to enable debuggers to introspect the\ndata. This can be disabled by this key. You\ncan also use this setting to force-enable it for\nnondebugexecutionwhichmightbeusefulto\ndebug production applications (but also very\nrisky).\nSECRET_KEY\nthesecretkey\nSESSION_COOKIE_NAME\nthenameofthesessioncookie\nSESSION_COOKIE_DOMAIN\nthedomainforthesessioncookie. Ifthisisnot\nset,thecookiewillbevalidforallsubdomains\nSERVER_NAME\nof .\nSESSION_COOKIE_PATH\nthe path for the session cookie. If this is\nnot set the cookie will be valid for all of\nAPPLICATION_ROOT \u2019/\u2019\norifthatisnotsetfor .\nSESSION_COOKIE_HTTPONLY\ncontrols if the cookie should be set with the\nhttponlyflag. DefaultstoTrue.\nSESSION_COOKIE_SECURE\ncontrols if the cookie should be set with the\nsecureflag. DefaultstoFalse.\nPERMANENT_SESSION_LIFETIME\nthe lifetime of a permanent session as\ndatetime.timedelta\nobject. Starting with\nFlask0.8thiscanalsobeanintegerrepresent-\ningseconds.\nSESSION_REFRESH_EACH_REQUEST\nthis flag controls how permanent sessions are\nrefreshed. If set to True (which is the de-\nfault)thenthecookieisrefreshedeachrequest\nwhichautomaticallybumpsthelifetime. Ifset\nto False a set-cookie header is only sent if the\nsession is modified. Non permanent sessions\narenotaffectedbythis.\nUSE_X_SENDFILE\nenable/disablex-sendfile\nLOGGER_NAME\nthenameofthelogger\nSERVER_NAME\nthe name and port number of the server.\nRequired for subdomain support (e.g.:\n\u2019myapp.dev:5000\u2019\n) Note that localhost does\nnotsupportsubdomainssosettingthisto\u201clo-\nSERVER_NAME\ncalhost\u201d does not help. Setting a\nalso by default enables URL generation with-\nout a request context but with an application\ncontext.\nAPPLICATION_ROOT\nIftheapplicationdoesnotoccupyawholedo-\nmain or subdomain this can be set to the path\nwhere the application is configured to live.\n63\nThis is for session cookie as path value. If do-\nNone\nmainsareused,thisshouldbe .\nMAX_CONTENT_LENGTH\nIf set to a value in bytes, Flask will reject in-\ncomingrequestswithacontentlengthgreater\nthanthisbyreturninga413statuscode.\nSEND_FILE_MAX_AGE_DEFAULT\n: Default cache control max age to use with\nsend_static_file()\n(the default static file\nsend_file()\nhandler) and , in seconds. Over-\nride this value on a per-file basis using the\nget_send_file_max_age() Flask\nhook on or\nBlueprint\n, respectively. Defaults to 43200 (12\nhours).\nTRAP_HTTP_EXCEPTIONS True\nIf this is set to Flask will not execute the\nerrorhandlersofHTTPexceptionsbutinstead\ntreat the exception like any other and bubble\nit through the exception stack. This is help-\nful for hairy debugging situations where you\nhave to find out where an HTTP exception is\ncomingfrom.\nTRAP_BAD_REQUEST_ERRORS\nWerkzeug\u2019s internal data structures that deal\nwith request specific data will raise special\nkey errors that are also bad request excep-\ntions. Likewise many operations can implic-\nitly fail with a BadRequest exception for con-\nsistency. Sinceit\u2019snicefordebuggingtoknow\nwhy exactly it failed this flag can be used to\ndebug those situations. If this config is set to\nTrue\nyouwillgetaregulartracebackinstead.\nPREFERRED_URL_SCHEME\nTheURLschemethatshouldbeusedforURL\ngenerationifnoURLschemeisavailable. This\nhttp\ndefaultsto .\nJSON_AS_ASCII\nBy default Flask serialize object to ascii-\nFalse\nencodedJSON.Ifthisissetto Flaskwill\nnot encode to ASCII and output strings as-is\njsonify\nandreturnunicodestrings. willauto-\nutf-8\nmaticallyencodeitin thenfortransport\nforinstance.\nJSON_SORT_KEYS\nBy default Flask will serialize JSON objects in\na way that the keys are ordered. This is done\nin order to ensure that independent of the\nhash seed of the dictionary the return value\nwill be consistent to not trash external HTTP\ncaches. You can override the default behav-\nior by changing this variable. This is not rec-\nommendedbutmightgiveyouaperformance\nimprovementonthecostofcachability.\nJSONIFY_PRETTYPRINT_REGULAR True\nIf this is set to (the default) jsonify re-\nsponses will be pretty printed if they are not\nrequestedbyanXMLHttpRequestobject(con-\nX-Requested-With\ntrolledbythe header)\nTEMPLATES_AUTO_RELOAD\nFlask checks if template was modified each\ntime it is requested and reloads it if neces-\nsary. But disk I/O is costly and it may be vi-\nable to disable this feature by setting this key\nFalse\nto . This option does not affect debug\nmode.\nMoreonSERVER_NAME\nSERVER_NAME\nThe key is used for the subdomain support. Because Flask cannot guess\nthesubdomainpartwithouttheknowledgeoftheactualservername,thisisrequired\nifyouwanttoworkwithsubdomains. Thisisalsousedforthesessioncookie.\nPlease keep in mind that not only Flask has the problem of not knowing what sub-\ndomains are, your web browser does as well. Most modern web browsers will not\nallow cross-subdomain cookies to be set on a server name without dots in it. So if\n\u2019localhost\u2019 \u2019localhost\u2019\nyour server name is you will not be able to set a cookie for\nand every subdomain of it. Please chose a different server name in that case, like\n\u2019myapplication.local\u2019\nand add this name + the subdomains you want to use into\nyourhostconfigorsetupalocalbind.\nLOGGER_NAME\nNewinversion0.4:\nSERVER_NAME\nNewinversion0.5:\nMAX_CONTENT_LENGTH\nNewinversion0.6:\nPROPAGATE_EXCEPTIONS PRESERVE_CONTEXT_ON_EXCEPTION\nNewinversion0.7: ,\nTRAP_BAD_REQUEST_ERRORS TRAP_HTTP_EXCEPTIONS\nNew in version 0.8: , ,\nAPPLICATION_ROOT SESSION_COOKIE_DOMAIN SESSION_COOKIE_PATH\n, , ,\nSESSION_COOKIE_HTTPONLY SESSION_COOKIE_SECURE\n,\nPREFERRED_URL_SCHEME\nNewinversion0.9:\nJSON_AS_ASCII JSON_SORT_KEYS JSONIFY_PRETTYPRINT_REGULAR\nNewinversion0.10: , ,\nSESSION_REFRESH_EACH_REQUEST\nNewinversion1.0:\nTEMPLATES_AUTO_RELOAD\nNewinversion1.0:\n10.3 Configuring from Files\nConfigurationbecomesmoreusefulifyoucanstoreitinaseparatefile,ideallylocated\noutside the actual application package. This makes packaging and distributing your\napplicationpossibleviavariouspackagehandlingtools(DeployingwithDistribute)and\nfinallymodifyingtheconfigurationfileafterwards.\nSoacommonpatternisthis:\napp = Flask(__name__)\napp.config.from_object(\u2019yourapplication.default_settings\u2019)\napp.config.from_envvar(\u2019YOURAPPLICATION_SETTINGS\u2019)\nThis first loads the configuration from the yourapplication.default_settings module and\nYOURAPPLICATION_SETTINGS\nthen overrides the values with the contents of the file the\nenvironment variable points to. This environment variable can be set on Linux or OS\nXwiththeexportcommandintheshellbeforestartingtheserver:\n64\n$ export YOURAPPLICATION_SETTINGS=/path/to/settings.cfg\n$ python run-app.py\n* Running on http://127.0.0.1:5000/\n* Restarting with reloader...\nOnWindowssystemsusethesetbuiltininstead:\n>set YOURAPPLICATION_SETTINGS=\\path\\to\\settings.cfg\nThe configuration files themselves are actual Python files. Only values in uppercase\nare actually stored in the config object later on. So make sure to use uppercase letters\nforyourconfigkeys.\nHereisanexampleofaconfigurationfile:\n# Example configuration\nDEBUG = False\nSECRET_KEY = \u2019?\\xbf,\\xb4\\x8d\\xa3\"<\\x9c\\xb0@\\x0f5\\xab,w\\xee\\x8d$0\\x13\\x8b83\u2019\nMake sure to load the configuration very early on, so that extensions have the ability\nto access the configuration when starting up. There are other methods on the config\nConfig\nobject as well to load from individual files. For a complete reference, read the\nobject\u2019sdocumentation.\n10.4 Configuration Best Practices\nThe downside with the approach mentioned earlier is that it makes testing a little\nharder. There is no single 100% solution for this problem in general, but there are a\ncoupleofthingsyoucankeepinmindtoimprovethatexperience:\n1. create your application in a function and register blueprints on it. That way you\ncan create multiple instances of your application with different configurations\nattached which makes unittesting a lot easier. You can use this to pass in config-\nurationasneeded.\n2. Donotwritecodethatneedstheconfigurationatimporttime. Ifyoulimityour-\nself to request-only accesses to the configuration you can reconfigure the object\nlateronasneeded.\n10.5 Development / Production\nMostapplicationsneedmorethanoneconfiguration. Thereshouldbeatleastseparate\nconfigurations for the production server and the one used during development. The\neasiest way to handle this is to use a default configuration that is always loaded and\npart of the version control, and a separate configuration that overrides the values as\nnecessaryasmentionedintheexampleabove:\n65\napp = Flask(__name__)\napp.config.from_object(\u2019yourapplication.default_settings\u2019)\napp.config.from_envvar(\u2019YOURAPPLICATION_SETTINGS\u2019)\nThen you just have to add a separate config.py file and export\nYOURAPPLICATION_SETTINGS=/path/to/config.py\nand you are done. However\ntherearealternativewaysaswell. Forexampleyoucoulduseimportsorsubclassing.\nWhat is very popular in the Django world is to make the import explicit in the con-\nfrom yourapplication.default_settings import *\nfig file by adding an to the top\nof the file and then overriding the changes by hand. You could also inspect an envi-\nYOURAPPLICATION_MODE\nronmentvariablelike andsetthattoproduction,developmentetc\nandimportdifferenthardcodedfilesbasedonthat.\nAninterestingpatternisalsotouseclassesandinheritanceforconfiguration:\nclass Config(object):\nDEBUG = False\nTESTING = False\nDATABASE_URI = \u2019sqlite://:memory:\u2019\nclass ProductionConfig(Config):\nDATABASE_URI = \u2019mysql://user@localhost/foo\u2019\nclass DevelopmentConfig(Config):\nDEBUG = True\nclass TestingConfig(Config):\nTESTING = True\nfrom_object()\nToenablesuchaconfigyoujusthavetocallinto :\napp.config.from_object(\u2019configmodule.ProductionConfig\u2019)\nThere are many different ways and it\u2019s up to you how you want to manage your con-\nfigurationfiles. Howeverherealistofgoodrecommendations:\n\u2022 keep a default configuration in version control. Either populate the config with\nthis default configuration or import it in your own configuration files before\noverridingvalues.\n\u2022 use an environment variable to switch between the configurations. This can be\ndone from outside the Python interpreter and makes development and deploy-\nment much easier because you can quickly and easily switch between different\nconfigs without having to touch the code at all. If you are working often on dif-\nferent projects you can even create your own script for sourcing that activates a\nvirtualenvandexportsthedevelopmentconfigurationforyou.\n\u2022 Use a tool like fabric in production to push code and configurations separately\nto the production server(s). For some details about how to do that, head over to\ntheDeployingwithFabricpattern.\n66\n10.6 Instance Folders\nNewinversion0.8.\nFlask 0.8 introduces instance folders. Flask for a long time made it possible to refer to\nFlask.root_path\npaths relative to the application\u2019s folder directly (via ). This was also\nhow many developers loaded configurations stored next to the application. Unfortu-\nnatelyhoweverthisonlyworkswellifapplicationsarenotpackagesinwhichcasethe\nrootpathreferstothecontentsofthepackage.\nFlask.instance_path\nWith Flask 0.8 a new attribute was introduced: . It refers to a\nnew concept called the \u201cinstance folder\u201d. The instance folder is designed to not be\nunderversioncontrolandbedeploymentspecific. It\u2019stheperfectplacetodropthings\nthateitherchangeatruntimeorconfigurationfiles.\nYou can either explicitly provide the path of the instance folder when creating the\nFlask application or you can let Flask autodetect the instance folder. For explicit con-\nfigurationusetheinstance_pathparameter:\napp = Flask(__name__, instance_path=\u2019/path/to/instance/folder\u2019)\nPleasekeepinmindthatthispathmustbeabsolutewhenprovided.\nIftheinstance_pathparameterisnotprovidedthefollowingdefaultlocationsareused:\n\u2022 Uninstalledmodule:\n/myapp.py\n/instance\n\u2022 Uninstalledpackage:\n/myapp\n/__init__.py\n/instance\n\u2022 Installedmoduleorpackage:\n$PREFIX/lib/python2.X/site-packages/myapp\n$PREFIX/var/myapp-instance\n$PREFIX /usr\nis the prefix of your Python installation. This can be or the path to\nsys.prefix\nyour virtualenv. You can print the value of to see what the prefix is\nsetto.\nSince the config object provided loading of configuration files from relative filenames\nwe made it possible to change the loading via filenames to be relative to the instance\npath if wanted. The behavior of relative paths in config files can be flipped between\n\u201crelative to the application root\u201d (the default) to \u201crelative to instance folder\u201d via the\ninstance_relative_configswitchtotheapplicationconstructor:\napp = Flask(__name__, instance_relative_config=True)\n67\nHere is a full example of how to configure Flask to preload the config from a module\nandthenoverridetheconfigfromafileintheconfigfolderifitexists:\napp = Flask(__name__, instance_relative_config=True)\napp.config.from_object(\u2019yourapplication.default_settings\u2019)\napp.config.from_pyfile(\u2019application.cfg\u2019, silent=True)\nFlask.instance_path\nThe path to the instance folder can be found via the .\nFlask also provides a shortcut to open a file from the instance folder with\nFlask.open_instance_resource()\n.\nExampleusageforboth:\nfilename = os.path.join(app.instance_path, \u2019application.cfg\u2019)\nwith open(filename) as f:\nconfig = f.read()\n# or via open_instance_resource:\nwith app.open_instance_resource(\u2019application.cfg\u2019) as f:\nconfig = f.read()\n68\n11\nCHAPTER\nSignals\nNewinversion0.6.\nStartingwithFlask0.6,thereisintegratedsupportforsignallinginFlask. Thissupport\nis provided by the excellent blinker library and will gracefully fall back if it is not\navailable.\nWhat are signals? Signals help you decouple applications by sending notifications\nwhen actions occur elsewhere in the core framework or another Flask extensions. In\nshort,signalsallowcertainsenderstonotifysubscribersthatsomethinghappened.\nFlask comes with a couple of signals and other extensions might provide more. Also\nkeepinmindthatsignalsareintendedtonotifysubscribersandshouldnotencourage\nsubscribers to modify data. You will notice that there are signals that appear to do\nrequest_started\nthe same thing like some of the builtin decorators do (eg: is very\nbefore_request()\nsimilar to ). There are however difference in how they work. The\nbefore_request()\ncore handler for example is executed in a specific order and is able\nto abort the request early by returning a response. In contrast all signal handlers are\nexecutedinundefinedorderanddonotmodifyanydata.\nThe big advantage of signals over handlers is that you can safely subscribe to them\nfor the split of a second. These temporary subscriptions are helpful for unittesting for\nexample. Say you want to know what templates were rendered as part of a request:\nsignalsallowyoutodoexactlythat.\n11.1 Subscribing to Signals\nconnect()\nTo subscribe to a signal, you can use the method of a signal. The first ar-\ngument is the function that should be called when the signal is emitted, the optional\nsecond argument specifies a sender. To unsubscribe from a signal, you can use the\ndisconnect()\nmethod.\nFor all core Flask signals, the sender is the application that issued the signal. When\nyou subscribe to a signal, be sure to also provide a sender unless you really want to\n69\nlisten for signals of all applications. This is especially true if you are developing an\nextension.\nHere forexample a helpercontext managerthat can beused to figureout in aunittest\nwhichtemplateswererenderedandwhatvariableswerepassedtothetemplate:\nfrom flask import template_rendered\nfrom contextlib import contextmanager\n@contextmanager\ndef captured_templates(app):\nrecorded = []\ndef record(sender, template, context, **extra):\nrecorded.append((template, context))\ntemplate_rendered.connect(record, app)\ntry:\nyield recorded\nfinally:\ntemplate_rendered.disconnect(record, app)\nThiscannoweasilybepairedwithatestclient:\nwith captured_templates(app) as templates:\nrv = app.test_client().get(\u2019/\u2019)\nassert rv.status_code == 200\nassert len(templates) == 1\ntemplate, context = templates[0]\nassert template.name == \u2019index.html\u2019\nassert len(context[\u2019items\u2019]) == 10\n**extra\nMake sure to subscribe with an extra argument so that your calls don\u2019t fail if\nFlaskintroducesnewargumentstothesignals.\nAll the template rendering in the code issued by the application app in the body of\nthe with block will now be recorded in the templates variable. Whenever a template is\nrendered,thetemplateobjectaswellascontextareappendedtoit.\nconnected_to()\nAdditionally there is a convenient helper method ( ). that allows you\nto temporarily subscribe a function to a signal with a context manager on its own.\nBecause the return value of the context manager cannot be specified that way one has\ntopassthelistinasargument:\nfrom flask import template_rendered\ndef captured_templates(app, recorded, **extra):\ndef record(sender, template, context):\nrecorded.append((template, context))\nreturn template_rendered.connected_to(record, app)\nTheexampleabovewouldthenlooklikethis:\ntemplates = []\nwith captured_templates(app, templates, **extra):\n70\n...\ntemplate, context = templates[0]\nBlinkerAPIChanges\nconnected_to()\nThe methodarrivedinBlinkerwithversion1.1.\n11.2 Creating Signals\nIf you want to use signals in your own application, you can use the blinker library\nNamespace\ndirectly. Themostcommonusecasearenamedsignalsinacustom .. Thisis\nwhatisrecommendedmostofthetime:\nfrom blinker import Namespace\nmy_signals = Namespace()\nNowyoucancreatenewsignalslikethis:\nmodel_saved = my_signals.signal(\u2019model-saved\u2019)\nThe name for the signal here makes it unique and also simplifies debugging. You can\nname\naccessthenameofthesignalwiththe attribute.\nForExtensionDevelopers\nIf you are writing a Flask extension and you want to gracefully degrade for missing\nflask.signals.Namespace\nblinkerinstallations,youcandosobyusingthe class.\n11.3 Sending Signals\nsend()\nIf you want to emit a signal, you can do so by calling the method. It accepts a\nsender as first argument and optionally some keyword arguments that are forwarded\ntothesignalsubscribers:\nclass Model(object):\n...\ndef save(self):\nmodel_saved.send(self)\nTry to always pick a good sender. If you have a class that is emitting a signal,\npass self as sender. If you emitting a signal from a random function, you can pass\ncurrent_app._get_current_object()\nassender.\nPassingProxiesasSenders\n71\ncurrent_app\nNever pass as sender to a signal. Use\ncurrent_app._get_current_object() current_app\ninstead. The reason for this is that\nisaproxyandnottherealapplicationobject.\n11.4 Signals and Flask\u2019s Request Context\nSignals fully support The Request Context when receiving signals. Context-local vari-\nrequest_started request_finished\nables are consistently available between and , so\nflask.g\nyoucanrelyon andothersasneeded. NotethelimitationsdescribedinSend-\nrequest_tearing_down\ningSignalsandthe signal.\n11.5 Decorator Based Signal Subscriptions\nWith Blinker 1.1 you can also easily subscribe to signals by using the new\nconnect_via()\ndecorator:\nfrom flask import template_rendered\n@template_rendered.connect_via(app)\ndef when_template_rendered(sender, template, context, **extra):\nprint \u2019Template %s is rendered with %s\u2019 % (template.name, context)\n11.6 Core Signals\nThefollowingsignalsexistinFlask:\nflask.template_rendered\nThis signal is sent when a template was successfully rendered. The signal is in-\nvokedwiththeinstanceofthetemplateastemplateandthecontextasdictionary\n(namedcontext).\nExamplesubscriber:\ndef log_template_renders(sender, template, context, **extra):\nsender.logger.debug(\u2019Rendering template \"%s\" with context %s\u2019,\ntemplate.name or \u2019string template\u2019,\ncontext)\nfrom flask import template_rendered\ntemplate_rendered.connect(log_template_renders, app)\nflask.request_started\nThis signal is sent before any request processing started but when the request\ncontext was set up. Because the request context is already bound, the subscriber\nrequest\ncanaccesstherequestwiththestandardglobalproxiessuchas .\n72\nExamplesubscriber:\ndef log_request(sender, **extra):\nsender.logger.debug(\u2019Request context is set up\u2019)\nfrom flask import request_started\nrequest_started.connect(log_request, app)\nflask.request_finished\nThis signal is sent right before the response is sent to the client. It is passed the\nresponsetobesentnamedresponse.\nExamplesubscriber:\ndef log_response(sender, response, **extra):\nsender.logger.debug(\u2019Request context is about to close down. \u2019\n\u2019Response: %s\u2019, response)\nfrom flask import request_finished\nrequest_finished.connect(log_response, app)\nflask.got_request_exception\nThis signal is sent when an exception happens during request processing. It is\nsent before the standard exception handling kicks in and even in debug mode,\nwhere no exception handling happens. The exception itself is passed to the sub-\nscriberasexception.\nExamplesubscriber:\ndef log_exception(sender, exception, **extra):\nsender.logger.debug(\u2019Got exception during processing: %s\u2019, exception)\nfrom flask import got_request_exception\ngot_request_exception.connect(log_exception, app)\nflask.request_tearing_down\nThis signal is sent when the request is tearing down. This is always called, even\nif an exception is caused. Currently functions listening to this signal are called\naftertheregularteardownhandlers,butthisisnotsomethingyoucanrelyon.\nExamplesubscriber:\ndef close_db_connection(sender, **extra):\nsession.close()\nfrom flask import request_tearing_down\nrequest_tearing_down.connect(close_db_connection, app)\nAs of Flask 0.9, this will also be passed an exc keyword argument that has a\nreferencetotheexceptionthatcausedtheteardowniftherewasone.\nflask.appcontext_tearing_down\nThis signal is sent when the app context is tearing down. This is always called,\neven if an exception is caused. Currently functions listening to this signal are\n73\ncalled after the regular teardown handlers, but this is not something you can\nrelyon.\nExamplesubscriber:\ndef close_db_connection(sender, **extra):\nsession.close()\nfrom flask import appcontext_tearing_down\nappcontext_tearing_down.connect(close_db_connection, app)\nThis will also be passed an exc keyword argument that has a reference to the\nexceptionthatcausedtheteardowniftherewasone.\nflask.appcontext_pushed\nThis signal is sent when an application context is pushed. The sender is the\napplication. This is usually useful for unittests in order to temporarily hook in\ninformation. Forinstanceitcanbeusedtosetaresourceearlyontothegobject.\nExampleusage:\nfrom contextlib import contextmanager\nfrom flask import appcontext_pushed\n@contextmanager\ndef user_set(app, user):\ndef handler(sender, **kwargs):\ng.user = user\nwith appcontext_pushed.connected_to(handler, app):\nyield\nAndinthetestcode:\ndef test_user_me(self):\nwith user_set(app, \u2019john\u2019):\nc = app.test_client()\nresp = c.get(\u2019/users/me\u2019)\nassert resp.data == \u2019username=john\u2019\nNewinversion0.10.\nflask.appcontext_popped\nThis signal is sent when an application context is popped. The sender is the\nappcontext_tearing_down\napplication. Thisusuallyfallsinlinewiththe signal.\nNewinversion0.10.\nflask.message_flashed\nThis signal is sent when the application is flashing a message. The messages is\nsentasmessagekeywordargumentandthecategoryascategory.\nExamplesubscriber:\n74\nrecorded = []\ndef record(sender, message, category, **extra):\nrecorded.append((message, category))\nfrom flask import message_flashed\nmessage_flashed.connect(record, app)\nNewinversion0.10.\n75\n76\n12\nCHAPTER\nPluggable Views\nNewinversion0.7.\nFlask0.7introducespluggableviewsinspiredbythegenericviewsfromDjangowhich\nare based on classes instead of functions. The main intention is that you can replace\npartsoftheimplementationsandthiswayhavecustomizablepluggableviews.\n12.1 Basic Principle\nConsideryouhaveafunctionthatloadsalistofobjectsfromthedatabaseandrenders\nintoatemplate:\n@app.route(\u2019/users/\u2019)\ndef show_users(page):\nusers = User.query.all()\nreturn render_template(\u2019users.html\u2019, users=users)\nThis is simple and flexible, but if you want to provide this view in a generic fashion\nthat can be adapted to other models and templates as well you might want more flex-\nibility. This is where pluggable class-based views come into place. As the first step to\nconvertthisintoaclassbasedviewyouwoulddothis:\nfrom flask.views import View\nclass ShowUsers(View):\ndef dispatch_request(self):\nusers = User.query.all()\nreturn render_template(\u2019users.html\u2019, objects=users)\napp.add_url_rule(\u2019/users/\u2019, view_func=ShowUsers.as_view(\u2019show_users\u2019))\nflask.views.View\nAsyoucanseewhatyouhavetodoistocreateasubclassof andim-\ndispatch_request()\nplement . Then we have to convert that class into an actual view\nas_view()\nfunction by using the class method. The string you pass to that function is\n77\nthe name of the endpoint that view will then have. But this by itself is not helpful, so\nlet\u2019srefactorthecodeabit:\nfrom flask.views import View\nclass ListView(View):\ndef get_template_name(self):\nraise NotImplementedError()\ndef render_template(self, context):\nreturn render_template(self.get_template_name(), **context)\ndef dispatch_request(self):\ncontext = {\u2019objects\u2019: self.get_objects()}\nreturn self.render_template(context)\nclass UserView(ListView):\ndef get_template_name(self):\nreturn \u2019users.html\u2019\ndef get_objects(self):\nreturn User.query.all()\nThis of course is not that helpful for such a small example, but it\u2019s good enough to\nexplain the basic principle. When you have a class-based view the question comes up\nwhat self points to. The way this works is that whenever the request is dispatched a\ndispatch_request()\nnewinstanceoftheclassiscreatedandthe methodiscalledwith\nthe parameters from the URL rule. The class itself is instantiated with the parameters\nas_view()\npassedtothe function. Forinstanceyoucanwriteaclasslikethis:\nclass RenderTemplateView(View):\ndef __init__(self, template_name):\nself.template_name = template_name\ndef dispatch_request(self):\nreturn render_template(self.template_name)\nAndthenyoucanregisteritlikethis:\napp.add_url_rule(\u2019/about\u2019, view_func=RenderTemplateView.as_view(\n\u2019about_page\u2019, template_name=\u2019about.html\u2019))\n12.2 Method Hints\nPluggableviewsareattachedtotheapplicationlikearegularfunctionbyeitherusing\nroute() add_url_rule()\nor better . That however also means that you would have to\nprovide the names of the HTTP methods the view supports when you attach this. In\nmethods\norder to move that information to the class you can provide a attribute that\n78\nhasthisinformation:\nclass MyView(View):\nmethods = [\u2019GET\u2019, \u2019POST\u2019]\ndef dispatch_request(self):\nif request.method == \u2019POST\u2019:\n...\n...\napp.add_url_rule(\u2019/myview\u2019, view_func=MyView.as_view(\u2019myview\u2019))\n12.3 Method Based Dispatching\nFor RESTful APIs it\u2019s especially helpful to execute a different function for each HTTP\nflask.views.MethodView\nmethod. Withthe youcaneasilydothat. EachHTTPmethod\nmapstoafunctionwiththesamename(justinlowercase):\nfrom flask.views import MethodView\nclass UserAPI(MethodView):\ndef get(self):\nusers = User.query.all()\n...\ndef post(self):\nuser = User.from_form_data(request.form)\n...\napp.add_url_rule(\u2019/users/\u2019, view_func=UserAPI.as_view(\u2019users\u2019))\nmethods\nThat way you also don\u2019t have to provide the attribute. It\u2019s automatically set\nbasedonthemethodsdefinedintheclass.\n12.4 Decorating Views\nSince the view class itself is not the view function that is added to the routing system\nit does not make much sense to decorate the class itself. Instead you either have to\nas_view()\ndecoratethereturnvalueof byhand:\ndef user_required(f):\n\"\"\"Checks whether user is logged in or raises error 401.\"\"\"\ndef decorator(*args, **kwargs):\nif not g.user:\nabort(401)\nreturn f(*args, **kwargs)\n79\nreturn decorator\nview = user_required(UserAPI.as_view(\u2019users\u2019))\napp.add_url_rule(\u2019/users/\u2019, view_func=view)\nStarting with Flask 0.8 there is also an alternative way where you can specify a list of\ndecoratorstoapplyintheclassdeclaration:\nclass UserAPI(MethodView):\ndecorators = [user_required]\nDuetotheimplicitselffromthecaller\u2019sperspectiveyoucannotuseregularviewdec-\noratorsontheindividualmethodsoftheviewhowever,keepthisinmind.\n12.5 Method Views for APIs\nWeb APIs are often working very closely with HTTP verbs so it makes a lot of sense\nMethodView\ntoimplementsuchanAPIbasedonthe . Thatsaid,youwillnoticethatthe\nAPIwillrequiredifferentURLrulesthatgotothesamemethodviewmostofthetime.\nForinstanceconsiderthatyouareexposingauserobjectontheweb:\nURL Method Description\n/users/ GET\nGivesalistofallusers\n/users/ POST\nCreatesanewuser\n/users/<id> GET\nShowsasingleuser\n/users/<id> PUT\nUpdatesasingleuser\n/users/<id> DELETE\nDeletesasingleuser\nMethodView\nSo how would you go about doing that with the ? The trick is to take\nadvantageofthefactthatyoucanprovidemultiplerulestothesameview.\nLet\u2019sassumeforthemomenttheviewwouldlooklikethis:\nclass UserAPI(MethodView):\ndef get(self, user_id):\nif user_id is None:\n# return a list of users\npass\nelse:\n# expose a single user\npass\ndef post(self):\n# create a new user\npass\ndef delete(self, user_id):\n# delete a single user\npass\n80\ndef put(self, user_id):\n# update a single user\npass\nSo how do we hook this up with the routing system? By adding two rules and explic-\nitlymentioningthemethodsforeach:\nuser_view = UserAPI.as_view(\u2019user_api\u2019)\napp.add_url_rule(\u2019/users/\u2019, defaults={\u2019user_id\u2019: None},\nview_func=user_view, methods=[\u2019GET\u2019,])\napp.add_url_rule(\u2019/users/\u2019, view_func=user_view, methods=[\u2019POST\u2019,])\napp.add_url_rule(\u2019/users/<int:user_id>\u2019, view_func=user_view,\nmethods=[\u2019GET\u2019, \u2019PUT\u2019, \u2019DELETE\u2019])\nIfyouhavealotofAPIsthatlooksimilaryoucanrefactorthatregistrationcode:\ndef register_api(view, endpoint, url, pk=\u2019id\u2019, pk_type=\u2019int\u2019):\nview_func = view.as_view(endpoint)\napp.add_url_rule(url, defaults={pk: None},\nview_func=view_func, methods=[\u2019GET\u2019,])\napp.add_url_rule(url, view_func=view_func, methods=[\u2019POST\u2019,])\napp.add_url_rule(\u2019%s<%s:%s>\u2019 % (url, pk_type, pk), view_func=view_func,\nmethods=[\u2019GET\u2019, \u2019PUT\u2019, \u2019DELETE\u2019])\nregister_api(UserAPI, \u2019user_api\u2019, \u2019/users/\u2019, pk=\u2019user_id\u2019)\n81\n82\n13\nCHAPTER\nThe Application Context\nNewinversion0.9.\nOne of the design ideas behind Flask is that there are two different \u201cstates\u201d in which\ncode is executed. The application setup state in which the application implicitly is on\nFlask\nthe module level. It starts when the object is instantiated, and it implicitly ends\nwhenthefirstrequestcomesin. Whiletheapplicationisinthisstateafewassumptions\naretrue:\n\u2022 theprogrammercanmodifytheapplicationobjectsafely.\n\u2022 norequesthandlinghappenedsofar\n\u2022 youhavetohaveareferencetotheapplicationobjectinordertomodifyit,there\nis no magic proxy that can give you a reference to the application object you\u2019re\ncurrentlycreatingormodifying.\nIncontrast,duringrequesthandling,acoupleofotherrulesexist:\nflask.request\n\u2022 while a request is active, the context local objects ( and others)\npointtothecurrentrequest.\n\u2022 anycodecangetholdoftheseobjectsatanytime.\nThereisathirdstatewhichissittinginbetweenalittlebit. Sometimesyouaredealing\nwith an application in a way that is similar to how you interact with applications\nduringrequesthandlingjustthatthereisnorequestactive. Considerforinstancethat\nyou\u2019re sitting in an interactive Python shell and interacting with the application, or a\ncommandlineapplication.\ncurrent_app\nTheapplicationcontextiswhatpowersthe contextlocal.\n13.1 Purpose of the Application Context\nThe main reason for the application\u2019s context existence is that in the past a bunch of\nfunctionalitywasattachedtotherequestcontextinlackofabettersolution. Sinceone\n83\nof the pillar\u2019s of Flask\u2019s design is that you can have more than one application in the\nsamePythonprocess.\nSohowdoesthecodefindthe\u201cright\u201dapplication? Inthepastwerecommendedpass-\ning applications around explicitly, but that caused issues with libraries that were not\ndesignedwiththatinmind.\ncurrent_app\nA common workaround for that problem was to use the proxy later on,\nwhich was bound to the current request\u2019s application reference. Since however creat-\ning such a request context is an unnecessarily expensive operation in case there is no\nrequestaround,theapplicationcontextwasintroduced.\n13.2 Creating an Application Context\nTo make an application context there are two ways. The first one is the implicit one:\nwheneverarequestcontextispushed,anapplicationcontextwillbecreatedalongside\nif this is necessary. As a result of that, you can ignore the existence of the application\ncontextunlessyouneedit.\napp_context()\nThesecondwayistheexplicitwayusingthe method:\nfrom flask import Flask, current_app\napp = Flask(__name__)\nwith app.app_context():\n# within this block, current_app points to app.\nprint current_app.name\nurl_for() SERVER_NAME\nThe application context is also used by the function in case a\nwasconfigured. ThisallowsyoutogenerateURLsevenintheabsenceofarequest.\n13.3 Locality of the Context\nTheapplicationcontextiscreatedanddestroyedasnecessary. Itnevermovesbetween\nthreads and it will not be shared between requests. As such it is the perfect place to\nstore database connection information and other things. The internal stack object is\nflask._app_ctx_stack\ncalled . Extensions are free to store additional information on\nthetopmostlevel,assumingtheypickasufficientlyuniquenameandshouldputtheir\nflask.g\ninformationthere,insteadofonthe objectwhichisreservedforusercode.\nFormoreinformationaboutthat,seeFlaskExtensionDevelopment.\n13.4 Context Usage\nThe context is typically used to cache resources on there that need to be created on\na per-request or usage case. For instance database connects are destined to go there.\n84\nWhenstoringthingsontheapplicationcontextuniquenamesshouldbechosenasthis\nisaplacethatissharedbetweenFlaskapplicationsandextensions.\nThemostcommonusageistosplitresourcemanagementintotwoparts:\n1. animplicitresourcecachingonthecontext.\n2. acontextteardownbasedresourcedeallocation.\nget_X() X\nGenerally there would be a function that creates resource if it does not ex-\nteardown_X()\nist yet and otherwise returns the same resource, and a function that is\nregisteredasteardownhandler.\nThisisanexamplethatconnectstoadatabase:\nimport sqlite3\nfrom flask import g\ndef get_db():\ndb = getattr(g, \u2019_database\u2019, None)\nif db is None:\ndb = g._database = connect_to_database()\nreturn db\n@app.teardown_appcontext\ndef teardown_db(exception):\ndb = getattr(g, \u2019_database\u2019, None)\nif db is not None:\ndb.close()\nget_db()\nThe first time is called the connection will be established. To make this im-\nLocalProxy\nplicita canbeused:\nfrom werkzeug.local import LocalProxy\ndb = LocalProxy(get_db)\ndb get_db()\nThatwayausercandirectlyaccess whichinternallycalls .\n85\n86\n14\nCHAPTER\nThe Request Context\nThisdocumentdescribesthebehaviorinFlask0.7whichismostlyinlinewiththeold\nbehaviorbuthassomesmall,subtledifferences.\nItisrecommendedthatyoureadtheTheApplicationContextchapterfirst.\n14.1 Diving into Context Locals\nSay you have a utility function that returns the URL the user should be redirected to.\nnext\nImagineitwouldalwaysredirecttotheURL\u2019s parameterortheHTTPreferreror\ntheindexpage:\nfrom flask import request, url_for\ndef redirect_url():\nreturn request.args.get(\u2019next\u2019) or \\\nrequest.referrer or \\\nurl_for(\u2019index\u2019)\nAsyoucansee,itaccessestherequestobject. IfyoutrytorunthisfromaplainPython\nshell,thisistheexceptionyouwillsee:\n>>> redirect_url()\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: \u2019NoneType\u2019 object has no attribute \u2019request\u2019\nThat makes a lot of sense because we currently do not have a request we could\naccess. So we have to make a request and bind it to the current context. The\ntest_request_context RequestContext\nmethodcancreateusa :\n>>> ctx = app.test_request_context(\u2019/?next=http://example.com/\u2019)\nThis context can be used in two ways. Either with the with statement or by calling the\npush() pop()\nand methods:\n87\n>>> ctx.push()\nFromthatpointonwardsyoucanworkwiththerequestobject:\n>>> redirect_url()\nu\u2019http://example.com/\u2019\nUntilyoucallpop:\n>>> ctx.pop()\nBecause the request context is internally maintained as a stack you can push and pop\nmultipletimes. Thisisveryhandytoimplementthingslikeinternalredirects.\nFormoreinformationofhowtoutilizetherequestcontextfromtheinteractivePython\nshell,headovertotheWorkingwiththeShellchapter.\n14.2 How the Context Works\nIfyoulookintohowtheFlaskWSGIapplicationinternallyworks,youwillfindapiece\nofcodethatlooksverymuchlikethis:\ndef wsgi_app(self, environ):\nwith self.request_context(environ):\ntry:\nresponse = self.full_dispatch_request()\nexcept Exception, e:\nresponse = self.make_response(self.handle_exception(e))\nreturn response(environ, start_response)\nrequest_context() RequestContext\nThe method returns a new object and uses it in\ncombination with the with statement to bind the context. Everything that is called\nfrom the same thread from this point onwards until the end of the with statement will\nflask.request\nhaveaccesstotherequestglobals( andothers).\nThe request context internally works like a stack: The topmost level on the stack is\npush() pop()\nthe current active request. adds the context to the stack on the very top,\nteardown_request()\nremoves it from the stack again. On popping the application\u2019s\nfunctionsarealsoexecuted.\nAnotherthingofnoteisthattherequestcontextwillautomaticallyalsocreateanappli-\ncation context when it\u2019s pushed and there is no application context for that application\nsofar.\n14.3 Callbacks and Errors\nWhat happens if an error occurs in Flask during request processing? This particular\nbehavior changed in 0.7 because we wanted to make it easier to understand what is\n88\nactuallyhappening. Thenewbehaviorisquitesimple:\nbefore_request()\n1. Before each request, functions are executed. If one of these\nfunctionsreturnaresponse,theotherfunctionsarenolongercalled. Inanycase\nhoweverthereturnvalueistreatedasareplacementfortheview\u2019sreturnvalue.\nbefore_request()\n2. If the functions did not return a response, the regular request\nhandling kicks in and the view function that was matched has the chance to\nreturnaresponse.\n3. Thereturnvalueoftheviewisthenconvertedintoanactualresponseobjectand\nafter_request()\nhandedovertothe functionswhichhavethechancetoreplace\nitormodifyitinplace.\nteardown_request()\n4. At the end of the request the functions are executed. This\nalways happens, even in case of an unhandled exception down the road or if a\nbefore-request handler was not executed yet or at all (for example in test envi-\nronmentssometimesyoumightwanttonotexecutebefore-requestcallbacks).\nNow what happens on errors? In production mode if an exception is not caught, the\n500 internal server handler is called. In development mode however the exception is\nnot further processed and bubbles up to the WSGI server. That way things like the\ninteractivedebuggercanprovidehelpfuldebuginformation.\nAn important change in 0.7 is that the internal server error is now no longer post\nprocessedbytheafterrequestcallbacksandafterrequestcallbacksarenolongerguar-\nanteed to be executed. This way the internal dispatching code looks cleaner and is\neasiertocustomizeandunderstand.\nThenewteardownfunctionsaresupposedtobeusedasareplacementforthingsthat\nabsolutelyneedtohappenattheendofrequest.\n14.4 Teardown Callbacks\nThe teardown callbacks are special callbacks in that they are executed at a different\npoint. Strictly speaking they are independent of the actual request handling as they\nRequestContext\nare bound to the lifecycle of the object. When the request context is\nteardown_request()\npopped,the functionsarecalled.\nThis is important to know if the life of the request context is prolonged by using the\ntest client in a with statement or when using the request context from the command\nline:\nwith app.test_client() as client:\nresp = client.get(\u2019/foo\u2019)\n# the teardown functions are still not called at that point\n# even though the response ended and you have the response\n# object in your hand\n# only when the code reaches this point the teardown functions\n89\n# are called. Alternatively the same thing happens if another\n# request was triggered from the test client\nIt\u2019seasytoseethebehaviorfromthecommandline:\n>>> app = Flask(__name__)\n>>> @app.teardown_request\n... def teardown_request(exception=None):\n... print \u2019this runs after request\u2019\n...\n>>> ctx = app.test_request_context()\n>>> ctx.push()\n>>> ctx.pop()\nthis runs after request\n>>>\nKeepinmindthatteardowncallbacksarealwaysexecuted,evenifbefore-requestcall-\nbacks were not executed yet but an exception happened. Certain parts of the test sys-\ntemmightalsotemporarilycreatearequestcontextwithoutcallingthebefore-request\nhandlers. Make sure to write your teardown-request handlers in a way that they will\nneverfail.\n14.5 Notes On Proxies\nSome of the objects provided by Flask are proxies to other objects. The reason behind\nthis is that these proxies are shared between threads and they have to dispatch to the\nactualobjectboundtoathreadbehindthescenesasnecessary.\nMost of the time you don\u2019t have to care about that, but there are some exceptions\nwhereitisgoodtoknowthatthisobjectisanactualproxy:\n\u2022 The proxy objects do not fake their inherited types, so if you want to perform\nactual instance checks, you have to do that on the instance that is being proxied\n(see_get_current_objectbelow).\n\u2022 iftheobjectreferenceisimportant(soforexampleforsendingSignals)\nIf you need to get access to the underlying object that is proxied, you can use the\n_get_current_object()\nmethod:\napp = current_app._get_current_object()\nmy_signal.send(app)\n14.6 Context Preservation on Error\nIf an error occurs or not, at the end of the request the request context is popped and\nall data associated with it is destroyed. During development however that can be\nproblematic as you might want to have the information around for a longer time in\n90\ncase an exception occurred. In Flask 0.6 and earlier in debug mode, if an exception\noccurred,therequestcontextwasnotpoppedsothattheinteractivedebuggercanstill\nprovideyouwithimportantinformation.\nStarting with Flask 0.7 you have finer control over that behavior by setting the\nPRESERVE_CONTEXT_ON_EXCEPTION\nconfiguration variable. By default it\u2019s linked to the\nDEBUG\nsetting of . If the application is in debug mode the context is preserved, in pro-\nductionmodeit\u2019snot.\nPRESERVE_CONTEXT_ON_EXCEPTION\nDo not force activate in production mode as it will\ncauseyourapplicationtoleakmemoryonexceptions. Howeveritcanbeusefulduring\ndevelopmenttogetthesameerrorpreservingbehaviorasindevelopmentmodewhen\nattemptingtodebuganerrorthatonlyoccursunderproductionsettings.\n91\n92\n15\nCHAPTER\nModular Applications with Blueprints\nNewinversion0.7.\nFlask uses a concept of blueprints for making application components and supporting\ncommon patterns within an application or across applications. Blueprints can greatly\nsimplifyhowlargeapplicationsworkandprovideacentralmeansforFlaskextensions\nBlueprint Flask\nto register operations on applications. A object works similarly to a\napplication object, but it is not actually an application. Rather it is a blueprint of how\ntoconstructorextendanapplication.\n15.1 Why Blueprints?\nBlueprintsinFlaskareintendedforthesecases:\n\u2022 Factoranapplicationintoasetofblueprints. Thisisidealforlargerapplications;\naprojectcouldinstantiateanapplicationobject,initializeseveralextensions,and\nregisteracollectionofblueprints.\n\u2022 Register a blueprint on an application at a URL prefix and/or subdomain. Pa-\nrameters in the URL prefix/subdomain become common view arguments (with\ndefaults)acrossallviewfunctionsintheblueprint.\n\u2022 RegisterablueprintmultipletimesonanapplicationwithdifferentURLrules.\n\u2022 Provide template filters, static files, templates, and other utilities through\nblueprints. A blueprint does not have to implement applications or view func-\ntions.\n\u2022 Register a blueprint on an application for any of these cases when initializing a\nFlaskextension.\nA blueprint in Flask is not a pluggable app because it is not actually an application\n\u2013 it\u2019s a set of operations which can be registered on an application, even multiple\ntimes. Why not have multiple application objects? You can do that (see Application\nDispatching), but your applications will have separate configs and will be managed at\ntheWSGIlayer.\n93\nBlueprints instead provide separation at the Flask level, share application config, and\ncan change an application object as necessary with being registered. The downside is\nthatyoucannotunregisterablueprintonceanapplicationwascreatedwithouthaving\ntodestroythewholeapplicationobject.\n15.2 The Concept of Blueprints\nThe basic concept of blueprints is that they record operations to execute when reg-\nistered on an application. Flask associates view functions with blueprints when dis-\npatchingrequestsandgeneratingURLsfromoneendpointtoanother.\n15.3 My First Blueprint\nThis is what a very basic blueprint looks like. In this case we want to implement a\nblueprintthatdoessimplerenderingofstatictemplates:\nfrom flask import Blueprint, render_template, abort\nfrom jinja2 import TemplateNotFound\nsimple_page = Blueprint(\u2019simple_page\u2019, __name__,\ntemplate_folder=\u2019templates\u2019)\n@simple_page.route(\u2019/\u2019, defaults={\u2019page\u2019: \u2019index\u2019})\n@simple_page.route(\u2019/<page>\u2019)\ndef show(page):\ntry:\nreturn render_template(\u2019pages/%s.html\u2019 % page)\nexcept TemplateNotFound:\nabort(404)\n@simple_page.route\nWhen you bind a function with the help of the decorator the\nblueprint will record the intention of registering the function show on the application\nwhen it\u2019s later registered. Additionally it will prefix the endpoint of the function with\nBlueprint\nthe name of the blueprint which was given to the constructor (in this case\nsimple_page\nalso ).\n15.4 Registering Blueprints\nSohowdoyouregisterthatblueprint? Likethis:\nfrom flask import Flask\nfrom yourapplication.simple_page import simple_page\napp = Flask(__name__)\napp.register_blueprint(simple_page)\n94\nIfyouchecktherulesregisteredontheapplication,youwillfindthese:\n[<Rule \u2019/static/<filename>\u2019 (HEAD, OPTIONS, GET) -> static>,\n<Rule \u2019/<page>\u2019 (HEAD, OPTIONS, GET) -> simple_page.show>,\n<Rule \u2019/\u2019 (HEAD, OPTIONS, GET) -> simple_page.show>]\nThe first one is obviously from the application itself for the static files. The other two\nsimple_page\nare for the show function of the blueprint. As you can see, they are also\n.\nprefixedwiththenameoftheblueprintandseparatedbyadot( ).\nBlueprintshowevercanalsobemountedatdifferentlocations:\napp.register_blueprint(simple_page, url_prefix=\u2019/pages\u2019)\nAndsureenough,thesearethegeneratedrules:\n[<Rule \u2019/static/<filename>\u2019 (HEAD, OPTIONS, GET) -> static>,\n<Rule \u2019/pages/<page>\u2019 (HEAD, OPTIONS, GET) -> simple_page.show>,\n<Rule \u2019/pages/\u2019 (HEAD, OPTIONS, GET) -> simple_page.show>]\nOn top of that you can register blueprints multiple times though not every blueprint\nmight respond properly to that. In fact it depends on how the blueprint is imple-\nmentedifitcanbemountedmorethanonce.\n15.5 Blueprint Resources\nBlueprints can provide resources as well. Sometimes you might want to introduce a\nblueprintonlyfortheresourcesitprovides.\n15.5.1 Blueprint Resource Folder\nLike for regular applications, blueprints are considered to be contained in a folder.\nWhile multiple blueprints can originate from the same folder, it does not have to be\nthecaseandit\u2019susuallynotrecommended.\nBlueprint\nThe folder is inferred from the second argument to which is usually\n__name__. This argument specifies what logical Python module or package corre-\nspondstotheblueprint. IfitpointstoanactualPythonpackagethatpackage(whichis\nafolderonthefilesystem)istheresourcefolder. Ifit\u2019samodule,thepackagethemod-\nBlueprint.root_path\nuleiscontainedinwillbetheresourcefolder. Youcanaccessthe\npropertytoseewhattheresourcefolderis:\n>>> simple_page.root_path\n\u2019/Users/username/TestProject/yourapplication\u2019\nopen_resource()\nToquicklyopensourcesfromthisfolderyoucanusethe function:\nwith simple_page.open_resource(\u2019static/style.css\u2019) as f:\ncode = f.read()\n95\n15.5.2 Static Files\nA blueprint can expose a folder with static files by providing a path to a folder on the\nfilesystem via the static_folder keyword argument. It can either be an absolute path or\nonerelativetothefolderoftheblueprint:\nadmin = Blueprint(\u2019admin\u2019, __name__, static_folder=\u2019static\u2019)\nBy default the rightmost part of the path is where it is exposed on the web. Because\nstatic\nthe folder is called here it will be available at the location of the blueprint\n/static /admin\n+ . Say the blueprint is registered for the static folder will be at\n/admin/static\n.\nThe endpoint is named blueprint_name.static so you can generate URLs to it like you\nwoulddotothestaticfolderoftheapplication:\nurl_for(\u2019admin.static\u2019, filename=\u2019style.css\u2019)\n15.5.3 Templates\nIf you want the blueprint to expose templates you can do that by providing the tem-\nBlueprint\nplate_folderparametertothe constructor:\nadmin = Blueprint(\u2019admin\u2019, __name__, template_folder=\u2019templates\u2019)\nAs for static files, the path can be absolute or relative to the blueprint resource folder.\nThe template folder is added to the searchpath of templates but with a lower prior-\nity than the actual application\u2019s template folder. That way you can easily override\ntemplatesthatablueprintprovidesintheactualapplication.\nyourapplication/admin\nSo if you have a blueprint in the folder and you\n\u2019admin/index.html\u2019\nwant to render the template and you have provided\ntemplates\nas a template_folder you will have to create a file like this:\nyourapplication/admin/templates/admin/index.html\n.\n15.6 Building URLs\nurl_for()\nIf you want to link from one page to another you can use the function just\nlike you normally would do just that you prefix the URL endpoint with the name of\n.\ntheblueprintandadot( ):\nurl_for(\u2019admin.index\u2019)\nAdditionally if you are in a view function of a blueprint or a rendered template and\nyou want to link to another endpoint of the same blueprint, you can use relative redi-\nrectsbyprefixingtheendpointwithadotonly:\n96\nurl_for(\u2019.index\u2019)\nadmin.index\nThis will link to for instance in case the current request was dispatched\ntoanyotheradminblueprintendpoint.\n15.7 Error Handlers\nFlask\nBlueprintssupporttheerrorhandlerdecoratorjustlikethe applicationobject,so\nitiseasytomakeBlueprint-specificcustomerrorpages.\nHereisanexamplefora\u201c404PageNotFound\u201dexception:\n@simple_page.errorhandler(404)\ndef page_not_found(e):\nreturn render_template(\u2019pages/404.html\u2019)\nMoreinformationonerrorhandlingseeCustomErrorPages.\n97\n98\n16\nCHAPTER\nFlask Extensions\nFlask extensions extend the functionality of Flask in various different ways. For in-\nstancetheyaddsupportfordatabasesandothercommontasks.\n16.1 Finding Extensions\nFlask extensions are listed on the Flask Extension Registry and can be downloaded\neasy_install pip\nwith or . If you add a Flask extension as dependency to your\nrequirements.rst setup.py\nor file they are usually installed with a simple command\norwhenyourapplicationinstalls.\n16.2 Using Extensions\nExtensions typically have documentation that goes along that shows how to use it.\nThere are no general rules in how extensions are supposed to behave but they are\nFlask-Foo\nimported from common locations. If you have an extension called or\nFoo-Flask flask.ext.foo\nitwillbealwaysimportablefrom :\nfrom flask.ext import foo\n16.3 Flask Before 0.8\nflask.ext\nIf you are using Flask 0.7 or earlier the package will not exist, instead you\nflaskext.foo flask_foo\nhave to import from or depending on how the extension is\ndistributed. IfyouwanttodevelopanapplicationthatsupportsFlask0.7orearlieryou\nflask.ext\nshould still import from the package. We provide you with a compatibility\nmodule that provides this package for older versions of Flask. You can download it\nfromgithub: flaskext_compat.py\nAndhereishowyoucanuseit:\n99\nimport flaskext_compat\nflaskext_compat.activate()\nfrom flask.ext import foo\nflaskext_compat flask.ext\nOnce the module is activated the will exist and you can\nstartimportingfromthere.\n100\n17\nCHAPTER\nCommand Line Interface\nNewinversion1.0.\nOne of the nice new features in Flask 1.0 is the built-in integration of the click com-\nmandlineinterface. ThisenablesawiderangeofnewfeaturesfortheFlaskecosystem\nandyourownapplications.\n17.1 Basic Usage\nflask\nAfter installation of Flask you will now find a script installed into your vir-\ntualenv. If you don\u2019t want to install Flask or you have a special use-case you can also\npython -m flask\nuse toaccomplishexactlythesame.\nThe way this script works is by providing access to all the commands on your Flask\nFlask.cli\napplication\u2019s instance as well as some built-in commands that are always\nthere. Flaskextensionscanalsoregistermorecommandsthereiftheydesireso.\nflask\nFor the script to work, an application needs to be discovered. The two most\nFLASK_APP --app -a\ncommon ways are either an environment variable ( ) or the / pa-\nrameter. ItshouldbetheimportpathforyourapplicationorthepathtoaPythonfile.\nInthelattercaseFlaskwillattempttosetupthePythonpathforyouautomaticallyand\ndiscoverthemodulenamebutthatmightnotalwayswork.\napp\nInthatimportedfilethenameoftheappneedstobecalled oroptionallybespeci-\nfiedafteracolon.\nhello.py app\nGivena filewiththeapplicationinitnamed thisishowitcanberun.\nset export\nEnvironmentvariables(OnWindowsuse insteadof ):\nexport FLASK_APP=hello\nflask run\nParameters:\n101\nflask --app=hello run\nFilenames:\nflask --app=hello.py run\n17.2 Virtualenv Integration\nexport FLASK_APP\nIfyouareconstantlyworkingwithavirtualenvyoucanalsoputthe\nactivate\ninto your script by adding it to the bottom of the file. That way every time\nyou activate your virtualenv you automatically also activate the correct application\nname.\n17.3 Debug Flag\nflask --debug --no-debug\nThe scriptcanberunwith or toautomaticallyflipthedebug\nFLASK_DEBUG 1 0\nflagoftheapplication. Thiscanalsobeconfiguredbysetting to or .\n17.4 Running a Shell\nshell\nTorunaninteractivePythonshellyoucanusethe command:\nflask --app=hello shell\nThis will start up an interactive Python shell, setup the correct application con-\ntext and setup the local variables in the shell. This is done by invoking the\nFlask.make_shell_context()\nmethod of the application. By default you have access\napp g\ntoyour and .\n17.5 Custom Commands\nIf you want to add more commands to the shell script you can do this easily. Flask\nuses click for the command interface which makes creating custom commands very\neasy. For instance if you want a shell command to initialize the database you can do\nthis:\nfrom flask import Flask\napp = Flask(__name__)\n@app.cli.command()\ndef initdb():\n102\n\"\"\"Initialize the database.\"\"\"\nprint \u2019Init the db\u2019\nThecommandwillthenshowuponthecommandline:\n$ flask -a hello.py initdb\nInit the db\n17.6 Factory Functions\nIncaseyouareusingfactoryfunctionstocreateyourapplication(seeApplicationFacto-\nflask\nries)youwilldiscoverthatthe commandcannotworkwiththemdirectly. Flask\nwon\u2019t be able to figure out how to instantiate your application properly by itself. Be-\ncause of this reason the recommendation is to create a separate file that instantiates\napplications. Thisisbyfarnottheonlywaytomakethiswork. AnotheristheCustom\nScriptssupport.\nFor instance if you have a factory function that creates an application from a filename\nyou could make a separate file that creates such an application from an environment\nvariable.\nautoapp.py\nThiscouldbeafilenamed withthesecontents:\nimport os\nfrom yourapplication import create_app\napp = create_app(os.environ[\u2019YOURAPPLICATION_CONFIG\u2019])\nOncethishashappenedyoucanmaketheflaskcommandautomaticallypickitup:\nexport YOURAPPLICATION_CONFIG=/path/to/config.cfg\nexport FLASK_APP=/path/to/autoapp.py\nflask\nFromthispointonwards willfindyourapplication.\n17.7 Custom Scripts\nflask\nWhile the most common way is to use the command, you can also make your\nown\u201cdriverscripts\u201d. SinceFlaskusesclickforthescriptsthereisnoreasonyoucannot\nhook these scripts into any click application. There is one big caveat and that is, that\nFlask.cli\ncommandsregisteredto willexpecttobe(indirectlyatleast)launchedfrom\nflask.cli.FlaskGroup\na click group. This is necessary so that the commands know\nwhichFlaskapplicationtheyhavetoworkwith.\nTounderstandwhyyoumightwantcustomscriptsyouneedtounderstandhowclick\nflask\nfinds and executes the Flask application. If you use the script you specify the\napplication to work with on the command line or environment variable as an import\nname. This is simple but it has some limitations. Primarily it does not work with\napplicationfactoryfunctions(seeApplicationFactories).\n103\nWith a custom script you don\u2019t have this problem as you can fully customize how the\napplication will be created. This is very useful if you write reusable applications that\nyou want to ship to users and they should be presented with a custom management\nscript.\nIfyouareusedtowritingclickapplicationsthiswilllookfamiliarbutatthesametime,\nslightly different because of how commands are loaded. We won\u2019t go into detail now\nabout the differences but if you are curious you can have a look at the The Script Info\nsectiontolearnallaboutit.\nmanage.py\nToexplainallofthis,hereisanexample scriptthatmanagesahypothetical\nwikiapplication. Wewillgothroughthedetailsafterwards:\nimport click\nfrom flask.cli import FlaskGroup, script_info_option\ndef create_wiki_app(info):\nfrom yourwiki import create_app\nconfig = info.data.get(\u2019config\u2019) or \u2019wikiconfig.py\u2019\nreturn create_app(config=config)\n@click.group(cls=FlaskGroup, create_app=create_wiki_app)\n@script_info_option(\u2019--config\u2019, script_info_key=\u2019config\u2019)\ndef cli(**params):\n\"\"\"This is a management script for the wiki application.\"\"\"\nif __name__ == \u2019__main__\u2019:\ncli()\nThat\u2019salotofcodefornotmuch,solet\u2019sgothroughallpartsstepbystep.\nclick\n1. First we import the library as well as the click extensions from the\nflask.cli FlaskGroup\npackage. Primarily we are here interested in the click\nscript_info_option()\ngroupandthe decorator.\n2. The next thing we do is defining a function that is invoked with the script info\nobject (The Script Info) from Flask and its purpose is to fully import and create\nthe application. This can either directly import an application object or create it\n(seeApplicationFactories).\ndata.info\nWhat is ? It\u2019s a dictionary of arbitrary data on the script info that can\nbefilledbyoptionsorthroughothermeans. Wewillcomebacktothislater.\nFlaskGroup\n3. Next step is to create a . In this case we just make an empty function\ncreate_wiki_app\nwith a help doc string that just does nothing and then pass the\nfunctionasafactoryfunction.\nWheneverclicknowneedstooperateonaFlaskapplicationitwillcallthatfunc-\ntionwiththescriptinfoandaskforittobecreated.\n4. In step 2 you could see that the config is passed to the actual creation function.\nscript_info_option()\nThisconfigcomesfromthe decoratorforthemainscript.\n--config\nIt accepts a option and then stores it in the script info so we can use it\ntocreatetheapplication.\n104\n5. Allisroundedupbyinvokingthescript.\n17.8 The Script Info\nThe Flask script integration might be confusing at first, but there is a reason why it\u2019s\ndone this way. The reason for this is that Flask wants to both provide custom com-\nmands to click as well as not loading your application unless it has to. The reason for\nthisisaddedflexibility.\nThiswayanapplicationcanprovidecustomcommands,butevenintheabsenceofan\nflask\napplication the script is still operational on a basic level. In addition to that it\nmeans that the individual commands have the option to avoid creating an instance of\nthe Flask application unless required. This is very useful as it allows the server com-\nmands for instance to load the application on a first request instead of immediately,\nthereforegivingabetterdebugexperience.\nflask.cli.ScriptInfo\nAllofthisisprovidedthroughthe objectandsomehelperutili-\nflask.cli.FlaskGroup\ntiesaround. Thebasicwayitoperatesisthatwhenthe executes\nas a script it creates a script info and keeps it around. From that point onwards modi-\nfications on the script info can be done through click options. To simplify this pattern\nflask.cli.script_info_option()\nthe decoratorwasadded.\nOne Flask actually needs the individual Flask application it will invoke the\nflask.cli.ScriptInfo.load_app()\nmethod. This happens when the server starts,\nwhen the shell is launched or when the script looks for an application-provided click\ncommand.\n105\n106\n18\nCHAPTER\nDevelopment Server\nStarting with Flask 1.0 there are multiple built-in ways to run a development server.\nflask\nThe best one is the command line utility but you can also continue using the\nFlask.run()\nmethod.\n18.1 Command Line\nflask\nThe command line script (Command Line Interface) is strongly recommende for\ndevelopmentbecauseitprovidesasuperiorreloadexperienceduetohowitloadsthe\napplication. Thebasicusageislikethis:\n$ flask -a my_application --debug run\nThis will enable the debugger, the reloader and then start the server on\nhttp://localhost:5000/.\nThe individual features of the server can be controlled by passing more arguments to\nrun\nthe option. Forinstancethereloadercanbedisabled:\n$ flask -a my_application --debug run --no-reload\n18.2 In Code\nFlask.run()\nThe alternative way to start the application is through the method. This\nflask\nwillimmediatelylaunchalocalserverexactlythesamewaythe scriptdoes.\nExample:\nif __name__ == \u2019__main__\u2019:\napp.run()\nThisworkswellforthecommoncasebutitdoesnotworkwellfordevelopmentwhich\nflask\niswhyfromFlask1.0onwardsthe methodisrecommended. Thereasonforthis\n107\nisthatduetohowthereloadmechanismworkstherearesomebizarreside-effects(like\nexecuting certain code twice, sometimes crashing without message or dieing when a\nsyntaxorimporterrorhappens).\nIt is however still a perfectly valid method for invoking a non automatic reloading\napplication.\n108\n19\nCHAPTER\nWorking with the Shell\nNewinversion0.3.\nOne of the reasons everybody loves Python is the interactive shell. It basically allows\nyoutoexecutePythoncommandsinrealtimeandimmediatelygetresultsback. Flask\nitself does not come with an interactive shell, because it does not require any specific\nsetupupfront,justimportyourapplicationandstartplayingaround.\nThere are however some handy helpers to make playing around in the shell a more\npleasant experience. The main issue with interactive console sessions is that you\u2019re\ng request\nnot triggering a request like a browser does which means that , and others\nare not available. But the code you want to test might depend on them, so what can\nyoudo?\nThisiswheresomehelperfunctionscomeinhandy. Keepinmindhoweverthatthese\nfunctions are not only there for interactive shell usage, but also for unittesting and\nothersituationsthatrequireafakedrequestcontext.\nGenerally it\u2019s recommended that you read the The Request Context chapter of the doc-\numentationfirst.\n19.1 Command Line Interface\nflask shell\nStartingwithFlask1.0therecommendedwaytoworkwiththeshellisthe\ncommand which does a lot of this automatically for you. For instance the shell is\nautomaticallyinitializedwithaloadedapplicationcontext.\nFormoreinformationseeCommandLineInterface.\n19.2 Creating a Request Context\nThe easiest way to create a proper request context from the shell is by using the\ntest_request_context RequestContext\nmethodwhichcreatesusa :\n109\n>>> ctx = app.test_request_context()\nNormally you would use the with statement to make this request object active, but in\npush() pop()\ntheshellit\u2019seasiertousethe and methodsbyhand:\n>>> ctx.push()\nFromthatpointonwardsyoucanworkwiththerequestobjectuntilyoucallpop:\n>>> ctx.pop()\n19.3 Firing Before/After Request\nBy just creating a request context, you still don\u2019t have run the code that is normally\nrun before a request. This might result in your database being unavailable if you are\nconnecting to the database in a before-request callback or the current user not being\ng\nstoredonthe objectetc.\npreprocess_request()\nThishowevercaneasilybedoneyourself. Justcall :\n>>> ctx = app.test_request_context()\n>>> ctx.push()\n>>> app.preprocess_request()\npreprocess_request()\nKeepinmindthatthe functionmightreturnaresponseobject,\ninthatcasejustignoreit.\nTo shutdown a request, you need to trick a bit before the after request functions (trig-\nprocess_response()\ngeredby )operateonaresponseobject:\n>>> app.process_response(app.response_class())\n<Response 0 bytes [200 OK]>\n>>> ctx.pop()\nteardown_request()\nThe functions registered as are automatically called when the\ncontext is popped. So this is the perfect place to automatically tear down resources\nthatwereneededbytherequestcontext(suchasdatabaseconnections).\n19.4 Further Improving the Shell Experience\nIfyouliketheideaofexperimentinginashell,createyourselfamodulewithstuffyou\nwant to star import into your interactive session. There you could also define some\nmore helper methods for common things such as initializing the database, dropping\ntablesetc.\nJustputthemintoamodule(likeshelltoolsandimportfromthere):\n110\n>>> from shelltools import *\n111\n112\n20\nCHAPTER\nPatterns for Flask\nCertain things are common enough that the chances are high you will find them in\nmost web applications. For example quite a lot of applications are using relational\ndatabases and user authentication. In that case, chances are they will open a database\nconnection at the beginning of the request and get the information of the currently\nloggedinuser. Attheendoftherequest,thedatabaseconnectionisclosedagain.\nTherearemoreusercontributedsnippetsandpatternsintheFlaskSnippetArchives.\n20.1 Larger Applications\nFor larger applications it\u2019s a good idea to use a package instead of a module. That is\nquitesimple. Imagineasmallapplicationlookslikethis:\n/yourapplication\n/yourapplication.py\n/static\n/style.css\n/templates\nlayout.html\nindex.html\nlogin.html\n...\n20.1.1 Simple Packages\nToconvertthatintoalargerone,justcreateanewfolderyourapplicationinsidetheexist-\ning one and move everything below it. Then rename yourapplication.py to __init__.py.\n(Makesuretodeleteall.pycfilesfirst,otherwisethingswouldmostlikelybreak)\nYoushouldthenendupwithsomethinglikethat:\n113\n/yourapplication\n/yourapplication\n/__init__.py\n/static\n/style.css\n/templates\nlayout.html\nindex.html\nlogin.html\n...\npython\nBut how do you run your application now? The naive\nyourapplication/__init__.py\nwill not work. Let\u2019s just say that Python does\nnot want modules in packages to be the startup file. But that is not a big problem,\njust add a new file called runserver.py next to the inner yourapplication folder with the\nfollowingcontents:\nfrom yourapplication import app\napp.run(debug=True)\nWhatdidwegainfromthis? Nowwecanrestructuretheapplicationabitintomultiple\nmodules. Theonlythingyouhavetorememberisthefollowingquickchecklist:\n1. the Flask application object creation has to be in the __init__.py file. That way\neach module can import it safely and the __name__ variable will resolve to the\ncorrectpackage.\nroute()\n2. all the view functions (the ones with a decorator on top) have to be\nimported in the __init__.py file. Not the object itself, but the module it is in.\nImporttheviewmoduleaftertheapplicationobjectiscreated.\nHere\u2019sanexample__init__.py:\nfrom flask import Flask\napp = Flask(__name__)\nimport yourapplication.views\nAndthisiswhatviews.pywouldlooklike:\nfrom yourapplication import app\n@app.route(\u2019/\u2019)\ndef index():\nreturn \u2019Hello World!\u2019\nYoushouldthenendupwithsomethinglikethat:\n/yourapplication\n/runserver.py\n/yourapplication\n/__init__.py\n/views.py\n114\n/static\n/style.css\n/templates\nlayout.html\nindex.html\nlogin.html\n...\nCircularImports\nEvery Python programmer hates them, and yet we just added some: circular imports\n(That\u2019s when two modules depend on each other. In this case views.py depends on\n__init__.py). Be advised that this is a bad idea in general but here it is actually fine.\nThe reason for this is that we are not actually using the views in __init__.py and just\nensuringthemoduleisimportedandwearedoingthatatthebottomofthefile.\nThere are still some problems with that approach but if you want to use decorators\nthere is no way around that. Check out the Becoming Big section for some inspiration\nhowtodealwiththat.\n20.1.2 Working with Blueprints\nIf you have larger applications it\u2019s recommended to divide them into smaller groups\nwhere each group is implemented with the help of a blueprint. For a gentle intro-\nduction into this topic refer to the Modular Applications with Blueprints chapter of the\ndocumentation.\n20.2 Application Factories\nIf you are already using packages and blueprints for your application (Modular Appli-\ncations with Blueprints) there are a couple of really nice ways to further improve the\nexperience. A common pattern is creating the application object when the blueprint\nis imported. But if you move the creation of this object, into a function, you can then\ncreatemultipleinstancesofthisandlater.\nSowhywouldyouwanttodothis?\n1. Testing. You can have instances of the application with different settings to test\neverycase.\n2. Multiple instances. Imagine you want to run different versions of the same ap-\nplication. Ofcourseyoucouldhave multiple instanceswithdifferentconfigsset\nup in your webserver, but if you use factories, you can have multiple instances\nof the same application running in the same application process which can be\nhandy.\nSohowwouldyouthenactuallyimplementthat?\n115\n20.2.1 Basic Factories\nTheideaistosetuptheapplicationinafunction. Likethis:\ndef create_app(config_filename):\napp = Flask(__name__)\napp.config.from_pyfile(config_filename)\nfrom yourapplication.model import db\ndb.init_app(app)\nfrom yourapplication.views.admin import admin\nfrom yourapplication.views.frontend import frontend\napp.register_blueprint(admin)\napp.register_blueprint(frontend)\nreturn app\nThedownsideisthatyoucannotusetheapplicationobjectintheblueprintsatimport\ntime. You can however use it from within a request. How do you get access to the\ncurrent_app\napplicationwiththeconfig? Use :\nfrom flask import current_app, Blueprint, render_template\nadmin = Blueprint(\u2019admin\u2019, __name__, url_prefix=\u2019/admin\u2019)\n@admin.route(\u2019/\u2019)\ndef index():\nreturn render_template(current_app.config[\u2019INDEX_TEMPLATE\u2019])\nHerewelookupthenameofatemplateintheconfig.\n20.2.2 Factories & Extensions\nIt\u2019s preferable to create your extensions and app factories so that the extension object\ndoesnotinitiallygetboundtotheapplication.\nUsing Flask-SQLAlchemy, as an example, you should not do something along those\nlines:\ndef create_app(config_filename):\napp = Flask(__name__)\napp.config.from_pyfile(config_filename)\ndb = SQLAlchemy(app)\nBut,rather,inmodel.py(orequivalent):\ndb = SQLAlchemy()\nandinyourapplication.py(orequivalent):\n116\ndef create_app(config_filename):\napp = Flask(__name__)\napp.config.from_pyfile(config_filename)\nfrom yourapplication.model import db\ndb.init_app(app)\nUsing this design pattern, no application-specific state is stored on the extension ob-\nject,sooneextensionobjectcanbeusedformultipleapps. Formoreinformationabout\nthedesignofextensionsrefertoFlaskExtensionDevelopment.\n20.2.3 Using Applications\nSo to use such an application you then have to create the application first in a sep-\nflask\narate file otherwise the command won\u2019t be able to find it. Here an example\nexampleapp.pyfilethatcreatessuchanapplication:\nfrom yourapplication import create_app\napp = create_app(\u2019/path/to/config.cfg\u2019)\nflask\nItcanthenbeusedwiththe command:\nflask --app=exampleapp run\n20.2.4 Factory Improvements\nThe factory function from above is not very clever so far, you can improve it. The\nfollowingchangesarestraightforwardandpossible:\n1. make it possible to pass in configuration values for unittests so that you don\u2019t\nhavetocreateconfigfilesonthefilesystem\n2. call a function from a blueprint when the application is setting up so that you\nhave a place to modify attributes of the application (like hooking in before /\nafterrequesthandlersetc.)\n3. AddinWSGImiddlewareswhentheapplicationiscreatingifnecessary.\n20.3 Application Dispatching\nApplication dispatching is the process of combining multiple Flask applications on\nthe WSGI level. You can not only combine Flask applications into something larger\nbut any WSGI application. This would even allow you to run a Django and a Flask\napplication in the same interpreter side by side if you want. The usefulness of this\ndependsonhowtheapplicationsworkinternally.\n117\nThe fundamental difference from the module approach is that in this case you are run-\nningthesameordifferentFlaskapplicationsthatareentirelyisolatedfromeachother.\nTheyrundifferentconfigurationsandaredispatchedontheWSGIlevel.\n20.3.1 Working with this Document\napplication\nEach of the techniques and examples below results in an object that\ncan be run with any WSGI server. For production, see Deployment Options. For\ndevelopment, Werkzeug provides a builtin server for development available at\nwerkzeug.serving.run_simple()\n:\nfrom werkzeug.serving import run_simple\nrun_simple(\u2019localhost\u2019, 5000, application, use_reloader=True)\nrun_simple\nNote that is not intended for use in production. Use a full-blown WSGI\nserver.\nIn order to use the interactive debuggger, debugging must be enabled both on the\napplication and the simple server, here is the \u201chello world\u201d example with debugging\nrun_simple\nand :\nfrom flask import Flask\nfrom werkzeug.serving import run_simple\napp = Flask(__name__)\napp.debug = True\n@app.route(\u2019/\u2019)\ndef hello_world():\nreturn \u2019Hello World!\u2019\nif __name__ == \u2019__main__\u2019:\nrun_simple(\u2019localhost\u2019, 5000, app,\nuse_reloader=True, use_debugger=True, use_evalex=True)\n20.3.2 Combining Applications\nIf you have entirely separated applications and you want them to work next to\neach other in the same Python interpreter process you can take advantage of the\nwerkzeug.wsgi.DispatcherMiddleware\n. The idea here is that each Flask application\nisavalidWSGIapplicationandtheyarecombinedbythedispatchermiddlewareinto\nalargeronethatdispatchedbasedonprefix.\nFor example you could have your main application run on / and your backend inter-\nfaceon/backend:\nfrom werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n118\napplication = DispatcherMiddleware(frontend, {\n\u2019/backend\u2019: backend\n})\n20.3.3 Dispatch by Subdomain\nSometimes you might want to use multiple instances of the same application with\ndifferent configurations. Assuming the application is created inside a function and\nyou can call that function to instantiate it, that is really easy to implement. In order to\ndevelop your application to support creating new instances in functions have a look\nattheApplicationFactoriespattern.\nAverycommonexamplewouldbecreatingapplicationspersubdomain. Forinstance\nyou configure your webserver to dispatch all requests for all subdomains to your\napplication and you then use the subdomain information to create user-specific in-\nstances. Once you have your server set up to listen on all subdomains you can use a\nverysimpleWSGIapplicationtodothedynamicapplicationcreation.\nThe perfect level for abstraction in that regard is the WSGI layer. You write your own\nWSGI application that looks at the request that comes and delegates it to your Flask\napplication. Ifthatapplicationdoesnotexistyet,itisdynamicallycreatedandremem-\nbered:\nfrom threading import Lock\nclass SubdomainDispatcher(object):\ndef __init__(self, domain, create_app):\nself.domain = domain\nself.create_app = create_app\nself.lock = Lock()\nself.instances = {}\ndef get_application(self, host):\nhost = host.split(\u2019:\u2019)[0]\nassert host.endswith(self.domain), \u2019Configuration error\u2019\nsubdomain = host[:-len(self.domain)].rstrip(\u2019.\u2019)\nwith self.lock:\napp = self.instances.get(subdomain)\nif app is None:\napp = self.create_app(subdomain)\nself.instances[subdomain] = app\nreturn app\ndef __call__(self, environ, start_response):\napp = self.get_application(environ[\u2019HTTP_HOST\u2019])\nreturn app(environ, start_response)\nThisdispatchercanthenbeusedlikethis:\n119\nfrom myapplication import create_app, get_user_for_subdomain\nfrom werkzeug.exceptions import NotFound\ndef make_app(subdomain):\nuser = get_user_for_subdomain(subdomain)\nif user is None:\n# if there is no user for that subdomain we still have\n# to return a WSGI application that handles that request.\n# We can then just return the NotFound() exception as\n# application which will render a default 404 page.\n# You might also redirect the user to the main page then\nreturn NotFound()\n# otherwise create the application for the specific user\nreturn create_app(user)\napplication = SubdomainDispatcher(\u2019example.com\u2019, make_app)\n20.3.4 Dispatch by Path\nDispatchingbyapathontheURLisverysimilar. InsteadoflookingattheHostheader\ntofigureoutthesubdomainonesimplylooksattherequestpathuptothefirstslash:\nfrom threading import Lock\nfrom werkzeug.wsgi import pop_path_info, peek_path_info\nclass PathDispatcher(object):\ndef __init__(self, default_app, create_app):\nself.default_app = default_app\nself.create_app = create_app\nself.lock = Lock()\nself.instances = {}\ndef get_application(self, prefix):\nwith self.lock:\napp = self.instances.get(prefix)\nif app is None:\napp = self.create_app(prefix)\nif app is not None:\nself.instances[prefix] = app\nreturn app\ndef __call__(self, environ, start_response):\napp = self.get_application(peek_path_info(environ))\nif app is not None:\npop_path_info(environ)\nelse:\napp = self.default_app\n120\nreturn app(environ, start_response)\nThe big difference between this and the subdomain one is that this one falls back to\nanotherapplicationifthecreatorfunctionreturnsNone:\nfrom myapplication import create_app, default_app, get_user_for_prefix\ndef make_app(prefix):\nuser = get_user_for_prefix(prefix)\nif user is not None:\nreturn create_app(user)\napplication = PathDispatcher(default_app, make_app)\n20.4 Implementing API Exceptions\nIt\u2019s very common to implement RESTful APIs on top of Flask. One of the first thing\nthatdevelopersrunintoistherealizationthatthebuiltinexceptionsarenotexpressive\ntext/html\nenough for APIs and that the content type of they are emitting is not very\nusefulforAPIconsumers.\nabort\nThe better solution than using to signal errors for invalid API usage is to im-\nplement your own exception type and install an error handler for it that produces the\nerrorsintheformattheuserisexpecting.\n20.4.1 Simple Exception Class\nThe basic idea is to introduce a new exception that can take a proper human readable\nmessage, a status code for the error and some optional payload to give more context\nfortheerror.\nThisisasimpleexample:\nfrom flask import jsonify\nclass InvalidUsage(Exception):\nstatus_code = 400\ndef __init__(self, message, status_code=None, payload=None):\nException.__init__(self)\nself.message = message\nif status_code is not None:\nself.status_code = status_code\nself.payload = payload\ndef to_dict(self):\nrv = dict(self.payload or ())\n121\nrv[\u2019message\u2019] = self.message\nreturn rv\nA view can now raise that exception with an error message. Additionally some extra\npayloadcanbeprovidedasadictionarythroughthepayloadparameter.\n20.4.2 Registering an Error Handler\nAt that point views can raise that error, but it would immediately result in an internal\nserver error. The reason for this is that there is no handler registered for this error\nclass. Thathoweveriseasytoadd:\n@app.errorhandler(InvalidUsage)\ndef handle_invalid_usage(error):\nresponse = jsonify(error.to_dict())\nresponse.status_code = error.status_code\nreturn response\n20.4.3 Usage in Views\nHereishowaviewcanusethatfunctionality:\n@app.route(\u2019/foo\u2019)\ndef get_foo():\nraise InvalidUsage(\u2019This view is gone\u2019, status_code=410)\n20.5 Using URL Processors\nNewinversion0.7.\nFlask 0.7 introduces the concept of URL processors. The idea is that you might have\na bunch of resources with common parts in the URL that you don\u2019t always explicitly\nwanttoprovide. ForinstanceyoumighthaveabunchofURLsthathavethelanguage\ncodeinitbutyoudon\u2019twanttohavetohandleitineverysinglefunctionyourself.\nURLprocessorsareespeciallyhelpfulwhencombinedwithblueprints. Wewillhandle\nbothapplicationspecificURLprocessorshereaswellasblueprintspecifics.\n20.5.1 Internationalized Application URLs\nConsideranapplicationlikethis:\nfrom flask import Flask, g\napp = Flask(__name__)\n122\n@app.route(\u2019/<lang_code>/\u2019)\ndef index(lang_code):\ng.lang_code = lang_code\n...\n@app.route(\u2019/<lang_code>/about\u2019)\ndef about(lang_code):\ng.lang_code = lang_code\n...\nThisisanawfullotofrepetitionasyouhavetohandlethelanguagecodesettingonthe\ng\nobject yourself in every single function. Sure, a decorator could be used to simplify\nthis, but if you want to generate URLs from one function to another you would have\ntostillprovidethelanguagecodeexplicitlywhichcanbeannoying.\nurl_defaults()\nForthelatter,thisiswhere functionscomein. Theycanautomatically\nurl_for()\ninject values into a call for automatically. The code below checks if the\nlanguage code is not yet in the dictionary of URL values and if the endpoint wants a\n\u2019lang_code\u2019\nvaluenamed :\n@app.url_defaults\ndef add_language_code(endpoint, values):\nif \u2019lang_code\u2019 in values or not g.lang_code:\nreturn\nif app.url_map.is_endpoint_expecting(endpoint, \u2019lang_code\u2019):\nvalues[\u2019lang_code\u2019] = g.lang_code\nis_endpoint_expecting()\nThe method of the URL map can be used to figure out if it\nwouldmakesensetoprovidealanguagecodeforthegivenendpoint.\nurl_value_preprocessor()\nThe reverse of that function are s. They are executed right\nafter the request was matched and can execute code based on the URL values. The\nidea is that they pull information out of the values dictionary and put it somewhere\nelse:\n@app.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\ng.lang_code = values.pop(\u2019lang_code\u2019, None)\ng\nThat way you no longer have to do the lang_code assignment to in every function.\nYou can further improve that by writing your own decorator that prefixes URLs with\nthe language code, but the more beautiful solution is using a blueprint. Once the\n\u2019lang_code\u2019\nis popped from the values dictionary and it will no longer be forwarded\ntotheviewfunctionreducingthecodetothis:\nfrom flask import Flask, g\napp = Flask(__name__)\n@app.url_defaults\ndef add_language_code(endpoint, values):\nif \u2019lang_code\u2019 in values or not g.lang_code:\n123\nreturn\nif app.url_map.is_endpoint_expecting(endpoint, \u2019lang_code\u2019):\nvalues[\u2019lang_code\u2019] = g.lang_code\n@app.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\ng.lang_code = values.pop(\u2019lang_code\u2019, None)\n@app.route(\u2019/<lang_code>/\u2019)\ndef index():\n...\n@app.route(\u2019/<lang_code>/about\u2019)\ndef about():\n...\n20.5.2 Internationalized Blueprint URLs\nBecause blueprints can automatically prefix all URLs with a common string it\u2019s easy\nto automatically do that for every function. Furthermore blueprints can have per-\nurl_defaults()\nblueprintURLprocessorswhichremovesawholelotoflogicfromthe\nfunction because it no longer has to check if the URL is really interested in a\n\u2019lang_code\u2019\nparameter:\nfrom flask import Blueprint, g\nbp = Blueprint(\u2019frontend\u2019, __name__, url_prefix=\u2019/<lang_code>\u2019)\n@bp.url_defaults\ndef add_language_code(endpoint, values):\nvalues.setdefault(\u2019lang_code\u2019, g.lang_code)\n@bp.url_value_preprocessor\ndef pull_lang_code(endpoint, values):\ng.lang_code = values.pop(\u2019lang_code\u2019)\n@bp.route(\u2019/\u2019)\ndef index():\n...\n@bp.route(\u2019/about\u2019)\ndef about():\n...\n124\n20.6 Deploying with Distribute\ndistribute, formerly setuptools, is an extension library that is commonly used to (like\nthe name says) distribute Python libraries and extensions. It extends distutils, a basic\nmodule installation system shipped with Python to also support various more com-\nplexconstructsthatmakelargerapplicationseasiertodistribute:\n\u2022 support for dependencies: a library or application can declare a list of other\nlibrariesitdependsonwhichwillbeinstalledautomaticallyforyou.\n\u2022 package registry: setuptools registers your package with your Python installa-\ntion. Thismakesitpossibletoqueryinformationprovidedbyonepackagefrom\nanother package. The best known feature of this system is the entry point sup-\nport which allows one package to declare an \u201centry point\u201d another package can\nhookintotoextendtheotherpackage.\n\u2022 installation manager: easy_install, which comes with distribute can install other\nlibraries for you. You can also use pip which sooner or later will replace\neasy_installwhichdoesmorethanjustinstallingpackagesforyou.\nFlask itself, and all the libraries you can find on the cheeseshop are distributed with\neitherdistribute,theoldersetuptoolsordistutils.\nIn this case we assume your application is called yourapplication.py and you are not\nusing a module, but a package. Distributing resources with standard modules is not\nsupported by distribute so we will not bother with it. If you have not yet converted\nyourapplicationintoapackage,headovertotheLargerApplicationspatterntoseehow\nthiscanbedone.\nA working deployment with distribute is the first step into more complex and more\nautomateddeploymentscenarios. Ifyouwanttofullyautomatetheprocess,alsoread\ntheDeployingwithFabricchapter.\n20.6.1 Basic Setup Script\nBecauseyouhaveFlaskrunning,youeitherhavesetuptoolsordistributeavailableon\nyour system anyways. If you do not, fear not, there is a script to install it for you:\ndistribute_setup.py. JustdownloadandrunwithyourPythoninterpreter.\nStandarddisclaimerapplies: youbetteruseavirtualenv.\nYour setup code always goes into a file named setup.py next to your application. The\nnameofthefileisonlyconvention,butbecauseeverybodywilllookforafilewiththat\nname,youbetternotchangeit.\nYes,evenifyouareusingdistribute,youareimportingfromapackagecalledsetuptools.\ndistributeisfullybackwardscompatiblewithsetuptools,soitalsousesthesameimport\nname.\nAbasicsetup.pyfileforaFlaskapplicationlookslikethis:\n125\nfrom setuptools import setup\nsetup(\nname=\u2019Your Application\u2019,\nversion=\u20191.0\u2019,\nlong_description=__doc__,\npackages=[\u2019yourapplication\u2019],\ninclude_package_data=True,\nzip_safe=False,\ninstall_requires=[\u2019Flask\u2019]\n)\nPleasekeepinmindthatyouhavetolistsubpackagesexplicitly. Ifyouwantdistribute\ntolookupthepackagesforyouautomatically,youcanusethefind_packagesfunction:\nfrom setuptools import setup, find_packages\nsetup(\n...\npackages=find_packages()\n)\nMost parameters to the setup function should be self explanatory, include_package_data\nand zip_safe might not be. include_package_data tells distribute to look for a MANI-\nFEST.in file and install all the entries that match as package data. We will use this to\ndistribute the static files and templates along with the Python module (see Distribut-\ning Resources). The zip_safe flag can be used to force or prevent zip Archive creation.\nIn general you probably don\u2019t want your packages to be installed as zip files because\nsometoolsdonotsupportthemandtheymakedebuggingalotharder.\n20.6.2 Distributing Resources\nIf you try to install the package you just created, you will notice that folders like static\nor templates are not installed for you. The reason for this is that distribute does not\nknow which files to add for you. What you should do, is to create a MANIFEST.in file\nnexttoyoursetup.pyfile. Thisfilelistsallthefilesthatshouldbeaddedtoyourtarball:\nrecursive-include yourapplication/templates *\nrecursive-include yourapplication/static *\nDon\u2019t forget that even if you enlist them in your MANIFEST.in file, they won\u2019t be\ninstalledforyouunlessyousettheinclude_package_dataparameterofthesetupfunction\ntoTrue!\n20.6.3 Declaring Dependencies\nDependenciesaredeclaredintheinstall_requiresparameteraslist. Eachiteminthatlist\nis the name of a package that should be pulled from PyPI on installation. By default\n126\nit will always use the most recent version, but you can also provide minimum and\nmaximumversionrequirements. Heresomeexamples:\ninstall_requires=[\n\u2019Flask>=0.2\u2019,\n\u2019SQLAlchemy>=0.6\u2019,\n\u2019BrokenPackage>=0.7,<=1.0\u2019\n]\nI mentioned earlier that dependencies are pulled from PyPI. What if you want to de-\npendonapackagethatcannotbefoundonPyPIandwon\u2019tbebecauseitisaninternal\npackage you don\u2019t want to share with anyone? Just still do as if there was a PyPI en-\ntry for it and provide a list of alternative locations where distribute should look for\ntarballs:\ndependency_links=[\u2019http://example.com/yourfiles\u2019]\nMake sure that page has a directory listing and the links on the page are pointing to\nthe actual tarballs with their correct filenames as this is how distribute will find the\nfiles. If you have an internal company server that contains the packages, provide the\nURLtothatserverthere.\n20.6.4 Installing / Developing\nTo install your application (ideally into a virtualenv) just run the setup.py script with\ntheinstallparameter. Itwillinstallyourapplicationintothevirtualenv\u2019ssite-packages\nfolderandalsodownloadandinstallalldependencies:\n$ python setup.py install\nIf you are developing on the package and also want the requirements to be installed,\nyoucanusethedevelopcommandinstead:\n$ python setup.py develop\nThis has the advantage of just installing a link to the site-packages folder instead of\ncopying the data over. You can then continue to work on the code without having to\nruninstallagainaftereachchange.\n20.7 Deploying with Fabric\nFabric is a tool for Python similar to Makefiles but with the ability to execute com-\nmands on a remote server. In combination with a properly set up Python package\n(Larger Applications) and a good concept for configurations (Configuration Handling) it\nisveryeasytodeployFlaskapplicationstoexternalservers.\nBeforewegetstarted,hereaquickchecklistofthingswehavetoensureupfront:\n127\n\u2022 Fabric 1.0 has to be installed locally. This tutorial assumes the latest version of\nFabric.\n\u2022 The application already has to be a package and requires a working setup.py file\n(DeployingwithDistribute).\n\u2022 In the following example we are using mod_wsgi for the remote servers. You\ncanofcourseuseyourownfavouriteserverthere,butforthisexamplewechose\nApache+mod_wsgibecauseit\u2019sveryeasytosetupandhasasimplewaytoreload\napplicationswithoutrootaccess.\n20.7.1 Creating the first Fabfile\nA fabfile is what controls what Fabric executes. It is named fabfile.py and executed by\nthe fab command. All the functions defined in that file will show up as fab subcom-\nmands. They are executed on one or more hosts. These hosts can be defined either in\nthefabfileoronthecommandline. Inthiscasewewilladdthemtothefabfile.\nThisisabasicfirstexamplethathastheabilitytouploadthecurrentsourcecodetothe\nserverandinstallitintoapre-existingvirtualenvironment:\nfrom fabric.api import *\n# the user to use for the remote commands\nenv.user = \u2019appuser\u2019\n# the servers where the commands are executed\nenv.hosts = [\u2019server1.example.com\u2019, \u2019server2.example.com\u2019]\ndef pack():\n# create a new source distribution as tarball\nlocal(\u2019python setup.py sdist --formats=gztar\u2019, capture=False)\ndef deploy():\n# figure out the release name and version\ndist = local(\u2019python setup.py --fullname\u2019, capture=True).strip()\n# upload the source tarball to the temporary folder on the server\nput(\u2019dist/%s.tar.gz\u2019 % dist, \u2019/tmp/yourapplication.tar.gz\u2019)\n# create a place where we can unzip the tarball, then enter\n# that directory and unzip it\nrun(\u2019mkdir /tmp/yourapplication\u2019)\nwith cd(\u2019/tmp/yourapplication\u2019):\nrun(\u2019tar xzf /tmp/yourapplication.tar.gz\u2019)\n# now setup the package with our virtual environment\u2019s\n# python interpreter\nrun(\u2019/var/www/yourapplication/env/bin/python setup.py install\u2019)\n# now that all is set up, delete the folder again\nrun(\u2019rm -rf /tmp/yourapplication /tmp/yourapplication.tar.gz\u2019)\n# and finally touch the .wsgi file so that mod_wsgi triggers\n# a reload of the application\nrun(\u2019touch /var/www/yourapplication.wsgi\u2019)\n128\nThe example above is well documented and should be straightforward. Here a recap\nofthemostcommoncommandsfabricprovides:\n\u2022 run-executesacommandonaremoteserver\n\u2022 local-executesacommandonthelocalmachine\n\u2022 put-uploadsafiletotheremoteserver\n\u2022 cd - changes the directory on the serverside. This has to be used in combination\nwiththewithstatement.\n20.7.2 Running Fabfiles\nNowhowdoyouexecutethatfabfile? Youusethefabcommand. Todeploythecurrent\nversionofthecodeontheremoteserveryouwouldusethiscommand:\n$ fab pack deploy\n/var/www/yourapplication\nHowever this requires that our server already has the\n/var/www/yourapplication/env\nfolder created and to be a virtual environment. Fur-\nthermore are we not creating the configuration or .wsgi file on the server. So how do\nwebootstrapanewserverintoourinfrastructure?\nThis now depends on the number of servers we want to set up. If we just have one\napplicationserver(whichthemajorityofapplicationswillhave),creatingacommand\nin the fabfile for this is overkill. But obviously you can do that. In that case you\nwouldprobablycallitsetuporbootstrapandthenpasstheservernameexplicitlyonthe\ncommandline:\n$ fab -H newserver.example.com bootstrap\nTosetupanewserveryouwouldroughlydothesesteps:\n/var/www\n1. Createthedirectorystructurein :\n$ mkdir /var/www/yourapplication\n$ cd /var/www/yourapplication\n$ virtualenv --distribute env\n2. Upload a new application.wsgi file to the server and the configuration file for the\napplication(eg: application.cfg)\n3. Create a new Apache config for yourapplication and activate it. Make sure to\nactivatewatchingforchangesofthe.wsgifilesothatwecanautomaticallyreload\ntheapplicationbytouchingit. (Seemod_wsgi(Apache)formoreinformation)\nSo now the question is, where do the application.wsgi and application.cfg files come\nfrom?\n129\n20.7.3 The WSGI File\nTheWSGIfilehastoimporttheapplicationandalsotosetanenvironmentvariableso\nthat the application knows where to look for the config. This is a short example that\ndoesexactlythat:\nimport os\nos.environ[\u2019YOURAPPLICATION_CONFIG\u2019] = \u2019/var/www/yourapplication/application.cfg\u2019\nfrom yourapplication import app\nThe application itself then has to initialize itself like this to look for the config at that\nenvironmentvariable:\napp = Flask(__name__)\napp.config.from_object(\u2019yourapplication.default_config\u2019)\napp.config.from_envvar(\u2019YOURAPPLICATION_CONFIG\u2019)\nThis approach is explained in detail in the Configuration Handling section of the docu-\nmentation.\n20.7.4 The Configuration File\nNow as mentioned above, the application will find the correct configuration file by\nlooking up the YOURAPPLICATION_CONFIG environment variable. So we have to\nput the configuration in a place where the application will able to find it. Configura-\ntionfileshavetheunfriendlyqualityofbeingdifferentonallcomputers,soyoudonot\nversionthemusually.\nA popular approach is to store configuration files for different servers in a sep-\narate version control repository and check them out on all servers. Then sym-\nlink the file that is active for the server into the location where it\u2019s expected (eg:\n/var/www/yourapplication\n).\nEither way, in our case here we only expect one or two servers and we can upload\nthemaheadoftimebyhand.\n20.7.5 First Deployment\nNow we can do our first deployment. We have set up the servers so that they have\ntheir virtual environments and activated apache configs. Now we can pack up the\napplicationanddeployit:\n$ fab pack deploy\nFabric will now connect to all servers and run the commands as written down in the\nfabfile. First it will execute pack so that we have our tarball ready and then it will\nexecute deploy and upload the source code to all servers and install it there. Thanks\nto the setup.py file we will automatically pull in the required libraries into our virtual\nenvironment.\n130\n20.7.6 Next Steps\nFromthatpointonwardsthereissomuchthatcanbedonetomakedeploymentactu-\nallyfun:\n\u2022 Createabootstrapcommandthatinitializesnewservers. Itcouldinitializeanew\nvirtualenvironment,setupapacheappropriatelyetc.\n\u2022 Putconfigurationfilesintoaseparateversioncontrolrepositoryandsymlinkthe\nactiveconfigsintoplace.\n\u2022 You could also put your application code into a repository and check out the\nlatest version on the server and then install. That way you can also easily go\nbacktoolderversions.\n\u2022 hookintestingfunctionalitysothatyoucandeploytoanexternalserverandrun\nthetestsuite.\nfab\nWorking with Fabric is fun and you will notice that it\u2019s quite magical to type\ndeploy\nand see your application being deployed automatically to one or more remote\nservers.\n20.8 Using SQLite 3 with Flask\nInFlaskyoucanimplementtheopeningofdatabaseconnectionsondemandandclos-\ningitwhenthecontextdies(usuallyattheendoftherequest)easily.\nHereisasimpleexampleofhowyoucanuseSQLite3withFlask:\nimport sqlite3\nfrom flask import g\nDATABASE = \u2019/path/to/database.db\u2019\ndef get_db():\ndb = getattr(g, \u2019_database\u2019, None)\nif db is None:\ndb = g._database = sqlite3.connect(DATABASE)\nreturn db\n@app.teardown_appcontext\ndef close_connection(exception):\ndb = getattr(g, \u2019_database\u2019, None)\nif db is not None:\ndb.close()\nAll the application needs to do in order to now use the database is having an active\napplicationcontext(whichisalwaystrueifthereisanrequestinflight)ortocreatean\nget_db\napplication context itself. At that point the function can be used to get the cur-\nrent database connection. Whenever the context is destroyed the database connection\nwillbeterminated.\n131\nflask._app_ctx_stack.top\nNote: ifyouuseFlask0.9orolderyouneedtouse instead\ng flask.g\nof asthe objectwasboundtotherequestandnotapplicationcontext.\nExample:\n@app.route(\u2019/\u2019)\ndef index():\ncur = get_db().cursor()\n...\nNote: Pleasekeepinmindthattheteardownrequestandappcontextfunctionsareal-\nwaysexecuted,evenifabefore-requesthandlerfailedorwasneverexecuted. Because\nofthiswehavetomakesureherethatthedatabaseistherebeforewecloseit.\n20.8.1 Connect on Demand\nTheupsideofthisapproach(connectingon firstuse)isthatthiswillonlyopeningthe\nconnection if truly necessary. If you want to use this code outside a request context\nyoucanuseitinaPythonshellbyopeningtheapplicationcontextbyhand:\nwith app.app_context():\n# now you can use get_db()\n20.8.2 Easy Querying\nNow in each request handling function you can access g.db to get the current open\ndatabase connection. To simplify working with SQLite, a row factory function is use-\nful. It is executed for every result returned from the database to convert the result.\nFor instance in order to get dictionaries instead of tuples this could be inserted into\nget_db\n:\ndef make_dicts(cursor, row):\nreturn dict((cursor.description[idx][0], value)\nfor idx, value in enumerate(row))\ndb.row_factory = make_dicts\nOrevensimpler:\ndb.row_factory = sqlite3.Row\nAdditionally it is a good idea to provide a query function that combines getting the\ncursor,executingandfetchingtheresults:\ndef query_db(query, args=(), one=False):\ncur = get_db().execute(query, args)\nrv = cur.fetchall()\ncur.close()\nreturn (rv[0] if rv else None) if one else rv\n132\nThis handy little function in combination with a row factory makes working with the\ndatabase much more pleasant than it is by just using the raw cursor and connection\nobjects.\nHereishowyoucanuseit:\nfor user in query_db(\u2019select * from users\u2019):\nprint user[\u2019username\u2019], \u2019has the id\u2019, user[\u2019user_id\u2019]\nOrifyoujustwantasingleresult:\nuser = query_db(\u2019select * from users where username = ?\u2019,\n[the_username], one=True)\nif user is None:\nprint \u2019No such user\u2019\nelse:\nprint the_username, \u2019has the id\u2019, user[\u2019user_id\u2019]\nTopassvariablepartstotheSQLstatement,useaquestionmarkinthestatementand\npass in the arguments as a list. Never directly add them to the SQL statement with\nstring formatting because this makes it possible to attack the application using SQL\nInjections.\n20.8.3 Initial Schemas\nRelational databases need schemas, so applications often ship a schema.sql file that\ncreates the database. It\u2019s a good idea to provide a function that creates the database\nbasedonthatschema. Thisfunctioncandothatforyou:\ndef init_db():\nwith app.app_context():\ndb = get_db()\nwith app.open_resource(\u2019schema.sql\u2019, mode=\u2019r\u2019) as f:\ndb.cursor().executescript(f.read())\ndb.commit()\nYoucanthencreatesuchadatabasefromthepythonshell:\n>>> from yourapplication import init_db\n>>> init_db()\n20.9 SQLAlchemy in Flask\nMany people prefer SQLAlchemy for database access. In this case it\u2019s encouraged to\nuseapackageinsteadofamoduleforyourflaskapplicationanddropthemodelsinto\na separate module (Larger Applications). While that is not necessary, it makes a lot of\nsense.\n133\nThere are four very common ways to use SQLAlchemy. I will outline each of them\nhere:\n20.9.1 Flask-SQLAlchemy Extension\nBecause SQLAlchemy is a common database abstraction layer and object relational\nmapper that requires a little bit of configuration effort, there is a Flask extension that\nhandlesthatforyou. Thisisrecommendedifyouwanttogetstartedquickly.\nYoucandownloadFlask-SQLAlchemyfromPyPI.\n20.9.2 Declarative\nThe declarative extension in SQLAlchemy is the most recent method of using\nSQLAlchemy. It allows you to define tables and models in one go, similar to how\nDjango works. In addition to the following text I recommend the official documenta-\ntiononthedeclarativeextension.\nHeretheexampledatabase.pymoduleforyourapplication:\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\nengine = create_engine(\u2019sqlite:////tmp/test.db\u2019, convert_unicode=True)\ndb_session = scoped_session(sessionmaker(autocommit=False,\nautoflush=False,\nbind=engine))\nBase = declarative_base()\nBase.query = db_session.query_property()\ndef init_db():\n# import all modules here that might define models so that\n# they will be registered properly on the metadata. Otherwise\n# you will have to import them first before calling init_db()\nimport yourapplication.models\nBase.metadata.create_all(bind=engine)\nTodefineyourmodels,justsubclasstheBaseclassthatwascreatedbythecodeabove.\nIfyouarewonderingwhywedon\u2019thavetocareaboutthreadshere(likewedidinthe\ng\nSQLite3 example above with the object): that\u2019s because SQLAlchemy does that for\nscoped_session\nusalreadywiththe .\nTo use SQLAlchemy in a declarative way with your application, you just have to put\nthe following code into your application module. Flask will automatically remove\ndatabasesessionsattheendoftherequestorwhentheapplicationshutsdown:\nfrom yourapplication.database import db_session\n@app.teardown_appcontext\n134\ndef shutdown_session(exception=None):\ndb_session.remove()\nHereisanexamplemodel(putthisintomodels.py,e.g.):\nfrom sqlalchemy import Column, Integer, String\nfrom yourapplication.database import Base\nclass User(Base):\n__tablename__ = \u2019users\u2019\nid = Column(Integer, primary_key=True)\nname = Column(String(50), unique=True)\nemail = Column(String(120), unique=True)\ndef __init__(self, name=None, email=None):\nself.name = name\nself.email = email\ndef __repr__(self):\nreturn \u2019<User %r>\u2019 % (self.name)\nTocreatethedatabaseyoucanusetheinit_dbfunction:\n>>> from yourapplication.database import init_db\n>>> init_db()\nYoucaninsertentriesintothedatabaselikethis:\n>>> from yourapplication.database import db_session\n>>> from yourapplication.models import User\n>>> u = User(\u2019admin\u2019, \u2019admin@localhost\u2019)\n>>> db_session.add(u)\n>>> db_session.commit()\nQueryingissimpleaswell:\n>>> User.query.all()\n[<User u\u2019admin\u2019>]\n>>> User.query.filter(User.name == \u2019admin\u2019).first()\n<User u\u2019admin\u2019>\n20.9.3 Manual Object Relational Mapping\nManual object relational mapping has a few upsides and a few downsides versus the\ndeclarative approach from above. The main difference is that you define tables and\nclasses separately and map them together. It\u2019s more flexible but a little more to type.\nIn general it works like the declarative approach, so make sure to also split up your\napplicationintomultiplemodulesinapackage.\nHereisanexampledatabase.pymoduleforyourapplication:\n135\nfrom sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.orm import scoped_session, sessionmaker\nengine = create_engine(\u2019sqlite:////tmp/test.db\u2019, convert_unicode=True)\nmetadata = MetaData()\ndb_session = scoped_session(sessionmaker(autocommit=False,\nautoflush=False,\nbind=engine))\ndef init_db():\nmetadata.create_all(bind=engine)\nAs for the declarative approach you need to close the session after each request or\napplicationcontextshutdown. Putthisintoyourapplicationmodule:\nfrom yourapplication.database import db_session\n@app.teardown_appcontext\ndef shutdown_session(exception=None):\ndb_session.remove()\nHereisanexampletableandmodel(putthisintomodels.py):\nfrom sqlalchemy import Table, Column, Integer, String\nfrom sqlalchemy.orm import mapper\nfrom yourapplication.database import metadata, db_session\nclass User(object):\nquery = db_session.query_property()\ndef __init__(self, name=None, email=None):\nself.name = name\nself.email = email\ndef __repr__(self):\nreturn \u2019<User %r>\u2019 % (self.name)\nusers = Table(\u2019users\u2019, metadata,\nColumn(\u2019id\u2019, Integer, primary_key=True),\nColumn(\u2019name\u2019, String(50), unique=True),\nColumn(\u2019email\u2019, String(120), unique=True)\n)\nmapper(User, users)\nQueryingandinsertingworksexactlythesameasintheexampleabove.\n20.9.4 SQL Abstraction Layer\nIf you just want to use the database system (and SQL) abstraction layer you basically\nonlyneedtheengine:\n136\nfrom sqlalchemy import create_engine, MetaData, Table\nengine = create_engine(\u2019sqlite:////tmp/test.db\u2019, convert_unicode=True)\nmetadata = MetaData(bind=engine)\nThen you can either declare the tables in your code like in the examples above, or\nautomaticallyloadthem:\nfrom sqlalchemy import Table\nusers = Table(\u2019users\u2019, metadata, autoload=True)\nTo insert data you can use the insert method. We have to get a connection first so that\nwecanuseatransaction:\n>>> con = engine.connect()\n>>> con.execute(users.insert(), name=\u2019admin\u2019, email=\u2019admin@localhost\u2019)\nSQLAlchemywillautomaticallycommitforus.\nToqueryyourdatabase,youusetheenginedirectlyoruseaconnection:\n>>> users.select(users.c.id == 1).execute().first()\n(1, u\u2019admin\u2019, u\u2019admin@localhost\u2019)\nTheseresultsarealsodict-liketuples:\n>>> r = users.select(users.c.id == 1).execute().first()\n>>> r[\u2019name\u2019]\nu\u2019admin\u2019\nexecute()\nYoucanalsopassstringsofSQLstatementstothe method:\n>>> engine.execute(\u2019select * from users where id = :1\u2019, [1]).first()\n(1, u\u2019admin\u2019, u\u2019admin@localhost\u2019)\nFormoreinformationaboutSQLAlchemy,headovertothewebsite.\n20.10 Uploading Files\nAhyes,thegoodoldproblemoffileuploads. Thebasicideaoffileuploadsisactually\nquitesimple. Itbasicallyworkslikethis:\n<form> enctype=multipart/form-data <input\n1. A tag is marked with and an\ntype=file>\nisplacedinthatform.\nfiles\n2. Theapplicationaccessesthefilefromthe dictionaryontherequestobject.\nsave()\n3. usethe methodofthefiletosavethefilepermanentlysomewhereonthe\nfilesystem.\n137\n20.10.1 A Gentle Introduction\nLet\u2019s start with a very basic application that uploads a file to a specific upload folder\nanddisplaysafiletotheuser. Let\u2019slookatthebootstrappingcodeforourapplication:\nimport os\nfrom flask import Flask, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\nUPLOAD_FOLDER = \u2019/path/to/the/uploads\u2019\nALLOWED_EXTENSIONS = set([\u2019txt\u2019, \u2019pdf\u2019, \u2019png\u2019, \u2019jpg\u2019, \u2019jpeg\u2019, \u2019gif\u2019])\napp = Flask(__name__)\napp.config[\u2019UPLOAD_FOLDER\u2019] = UPLOAD_FOLDER\nSo first we need a couple of imports. Most should be straightforward, the\nwerkzeug.secure_filename()\nis explained a little bit later. The UPLOAD_FOLDER\nis where we will store the uploaded files and the ALLOWED_EXTENSIONS is the set\nof allowed file extensions. Then we add a URL rule by hand to the application. Now\nusuallywe\u2019renotdoingthat,sowhyhere? Thereasonsisthatwewantthewebserver\n(or our development server) to serve these files for us and so we only need a rule to\ngeneratetheURLtothesefiles.\nWhydowelimittheextensionsthatareallowed? Youprobablydon\u2019twantyourusers\ntobeabletouploadeverythingthereiftheserverisdirectlysendingoutthedatatothe\nclient. That way you can make sure that users are not able to upload HTML files that\nwouldcauseXSSproblems(seeCross-SiteScripting(XSS)).Alsomakesuretodisallow\n.phpfilesiftheserverexecutesthem,butwhohasPHPinstalledonhisserver,right? :)\nNext the functions that check if an extension is valid and that uploads the file and\nredirectstheusertotheURLfortheuploadedfile:\ndef allowed_file(filename):\nreturn \u2019.\u2019 in filename and \\\nfilename.rsplit(\u2019.\u2019, 1)[1] in ALLOWED_EXTENSIONS\n@app.route(\u2019/\u2019, methods=[\u2019GET\u2019, \u2019POST\u2019])\ndef upload_file():\nif request.method == \u2019POST\u2019:\n# check if the post request has the file part\nif \u2019file\u2019 not in request.files:\nflash(\u2019No file part\u2019)\nreturn redirect(request.url)\nfile = request.files[\u2019file\u2019]\n# if user does not select file, browser also\n# submit a empty part without filename\nif file.filename == \u2019\u2019:\nflash(\u2019No selected file\u2019)\nreturn redirect(request.url)\nif file and allowed_file(file.filename):\nfilename = secure_filename(file.filename)\nfile.save(os.path.join(app.config[\u2019UPLOAD_FOLDER\u2019], filename))\n138\nreturn redirect(url_for(\u2019uploaded_file\u2019,\nfilename=filename))\nreturn \u2019\u2019\u2019\n<!doctype html>\n<title>Upload new File</title>\n<h1>Upload new File</h1>\n<form action=\"\" method=post enctype=multipart/form-data>\n<p><input type=file name=file>\n<input type=submit value=Upload>\n</form>\n\u2019\u2019\u2019\nsecure_filename()\nSo what does that function actually do? Now the problem is that\nthereisthatprinciplecalled\u201cnevertrustuserinput\u201d. Thisisalsotrueforthefilename\nofanuploadedfile. Allsubmittedformdatacanbeforged,andfilenamescanbedan-\ngerous. For the moment just remember: always use that function to secure a filename\nbeforestoringitdirectlyonthefilesystem.\nInformationforthePros\nsecure_filename()\nSoyou\u2019reinterestedinwhatthat functiondoesandwhattheprob-\nlemisifyou\u2019renotusingit? Sojustimaginesomeonewouldsendthefollowinginfor-\nmationasfilenametoyourapplication:\nfilename = \"../../../../home/username/.bashrc\"\n../\nAssuming the number of is correct and you would join this with the UP-\nLOAD_FOLDERtheusermighthavetheabilitytomodifyafileontheserver\u2019sfilesys-\ntem he or she should not modify. This does require some knowledge about how the\napplicationlookslike,buttrustme,hackersarepatient:)\nNowlet\u2019slookhowthatfunctionworks:\n>>> secure_filename(\u2019../../../../home/username/.bashrc\u2019)\n\u2019home_username_.bashrc\u2019\nNow one last thing is missing: the serving of the uploaded files. As of Flask 0.5 we\ncanuseafunctionthatdoesthatforus:\nfrom flask import send_from_directory\n@app.route(\u2019/uploads/<filename>\u2019)\ndef uploaded_file(filename):\nreturn send_from_directory(app.config[\u2019UPLOAD_FOLDER\u2019],\nfilename)\nAlternatively you can register uploaded_file as build_only rule and use the\nSharedDataMiddleware\n. ThisalsoworkswitholderversionsofFlask:\nfrom werkzeug import SharedDataMiddleware\napp.add_url_rule(\u2019/uploads/<filename>\u2019, \u2019uploaded_file\u2019,\nbuild_only=True)\n139\napp.wsgi_app = SharedDataMiddleware(app.wsgi_app, {\n\u2019/uploads\u2019: app.config[\u2019UPLOAD_FOLDER\u2019]\n})\nIfyounowruntheapplicationeverythingshouldworkasexpected.\n20.10.2 Improving Uploads\nNewinversion0.6.\nSo how exactly does Flask handle uploads? Well it will store them in the webserver\u2019s\nmemoryifthefilesarereasonablesmallotherwiseinatemporarylocation(asreturned\ntempfile.gettempdir()\nby ). But how do you specify the maximum file size after\nwhichanuploadisaborted? BydefaultFlaskwillhappilyacceptfileuploadstoanun-\nMAX_CONTENT_LENGTH\nlimited amount of memory, but you can limit that by setting the\nconfigkey:\nfrom flask import Flask, Request\napp = Flask(__name__)\napp.config[\u2019MAX_CONTENT_LENGTH\u2019] = 16 * 1024 * 1024\nThe code above will limited the maximum allowed payload to 16 megabytes. If a\nRequestEntityTooLarge\nlargerfileistransmitted,Flaskwillraisean exception.\nThis feature was added in Flask 0.6 but can be achieved in older versions as well by\nsubclassing the request object. For more information on that consult the Werkzeug\ndocumentationonfilehandling.\n20.10.3 Upload Progress Bars\nA while ago many developers had the idea to read the incoming file in small chunks\nand store the upload progress in the database to be able to poll the progress with\nJavaScript from the client. Long story short: the client asks the server every 5 seconds\nhow much it has transmitted already. Do you realize the irony? The client is asking\nforsomethingitshouldalreadyknow.\nNowtherearebettersolutionstothatworkfasterandmorereliable. Thewebchanged\nalotlatelyandyoucanuseHTML5,Java,SilverlightorFlashtogetaniceruploading\nexperience on the client side. Look at the following libraries for some nice examples\nhowtodothat:\n\u2022 Plupload-HTML5,Java,Flash\n\u2022 SWFUpload-Flash\n\u2022 JumpLoader-Java\n140\n20.10.4 An Easier Solution\nBecause the common pattern for file uploads exists almost unchanged in all applica-\ntionsdealingwithuploads,thereisaFlaskextensioncalledFlask-Uploadsthatimple-\nmentsafullfledgeduploadmechanismwithwhiteandblacklistingofextensionsand\nmore.\n20.11 Caching\nWhen your application runs slow, throw some caches in. Well, at least it\u2019s the easiest\nway to speed up things. What does a cache do? Say you have a function that takes\nsome time to complete but the results would still be good enough if they were 5 min-\nutes old. So then the idea is that you actually put the result of that calculation into a\ncacheforsometime.\nFlask itself does not provide caching for you, but Werkzeug, one of the libraries it is\nbased on, has some very basic cache support. It supports multiple cache backends,\nnormallyyouwanttouseamemcachedserver.\n20.11.1 Setting up a Cache\nFlask\nYou create a cache object once and keep it around, similar to how objects are\nSimpleCache\ncreated. If you are using the development server you can create a object,\nthat one is a simple cache that keeps the item stored in the memory of the Python\ninterpreter:\nfrom werkzeug.contrib.cache import SimpleCache\ncache = SimpleCache()\nIf you want to use memcached, make sure to have one of the memcache modules\nsupported (you get them from PyPI) and a memcached server running somewhere.\nThisishowyouconnecttosuchanmemcachedserverthen:\nfrom werkzeug.contrib.cache import MemcachedCache\ncache = MemcachedCache([\u2019127.0.0.1:11211\u2019])\nIf you are using App Engine, you can connect to the App Engine memcache server\neasily:\nfrom werkzeug.contrib.cache import GAEMemcachedCache\ncache = GAEMemcachedCache()\n20.11.2 Using a Cache\nget()\nNow how can one use such a cache? There are two very important operations:\nset()\nand . Thisishowtousethem:\n141\nget()\nTo get an item from the cache call with a string as key name. If something is in\nthecache,itisreturned. OtherwisethatfunctionwillreturnNone:\nrv = cache.get(\u2019my-item\u2019)\nset()\nTo add items to the cache, use the method instead. The first argument is the\nkey and the second the value that should be set. Also a timeout can be provided after\nwhichthecachewillautomaticallyremoveitem.\nHereafullexamplehowthislookslikenormally:\ndef get_my_item():\nrv = cache.get(\u2019my-item\u2019)\nif rv is None:\nrv = calculate_value()\ncache.set(\u2019my-item\u2019, rv, timeout=5 * 60)\nreturn rv\n20.12 View Decorators\nPython has a really interesting feature called function decorators. This allows some\nreally neat things for web applications. Because each view in Flask is a function, dec-\norators can be used to inject additional functionality to one or more functions. The\nroute()\ndecorator is the one you probably used already. But there are use cases for\nimplementingyourowndecorator. Forinstance,imagineyouhaveaviewthatshould\nonly be used by people that are logged in. If a user goes to the site and is not logged\nin, they should be redirected to the login page. This is a good example of a use case\nwhereadecoratorisanexcellentsolution.\n20.12.1 Login Required Decorator\nSo let\u2019s implement such a decorator. A decorator is a function that returns a function.\nPretty simple actually. The only thing you have to keep in mind when implementing\nsomething like this is to update the __name__, __module__ and some other attributes\nof a function. This is often forgotten, but you don\u2019t have to do that by hand, there is a\nfunctools.wraps()\nfunctionforthatthatisusedlikeadecorator( ).\n\u2019login\u2019\nThis example assumes that the login page is called and that the current user\nisstoredasg.userandNoneifthereisno-oneloggedin:\nfrom functools import wraps\nfrom flask import g, request, redirect, url_for\ndef login_required(f):\n@wraps(f)\ndef decorated_function(*args, **kwargs):\nif g.user is None:\nreturn redirect(url_for(\u2019login\u2019, next=request.url))\n142\nreturn f(*args, **kwargs)\nreturn decorated_function\nSo how would you use that decorator now? Apply it as innermost decorator to a\nroute()\nview function. When applying further decorators, always remember that the\ndecoratoristheoutermost:\n@app.route(\u2019/secret_page\u2019)\n@login_required\ndef secret_page():\npass\n20.12.2 Caching Decorator\nImagine you have a view function that does an expensive calculation and because\nof that you would like to cache the generated results for a certain amount of time.\nA decorator would be nice for that. We\u2019re assuming you have set up a cache like\nmentionedinCaching.\nHere is an example cache function. It generates the cache key from a specific prefix\n(actuallyaformatstring)andthecurrentpathoftherequest. Noticethatweareusing\nafunctionthatfirstcreatesthedecoratorthatthendecoratesthefunction. Soundsaw-\nful? Unfortunately it is a little bit more complex, but the code should still be straight-\nforwardtoread.\nThedecoratedfunctionwillthenworkasfollows\n1. gettheuniquecachekeyforthecurrentrequestbaseonthecurrentpath.\n2. get the value for that key from the cache. If the cache returned something we\nwillreturnthatvalue.\n3. otherwise the original function is called and the return value is stored in the\ncacheforthetimeoutprovided(bydefault5minutes).\nHerethecode:\nfrom functools import wraps\nfrom flask import request\ndef cached(timeout=5 * 60, key=\u2019view/%s\u2019):\ndef decorator(f):\n@wraps(f)\ndef decorated_function(*args, **kwargs):\ncache_key = key % request.path\nrv = cache.get(cache_key)\nif rv is not None:\nreturn rv\nrv = f(*args, **kwargs)\ncache.set(cache_key, rv, timeout=timeout)\nreturn rv\n143\nreturn decorated_function\nreturn decorator\nNotice that this assumes an instantiated cache object is available, see Caching for more\ninformation.\n20.12.3 Templating Decorator\nA common pattern invented by the TurboGears guys a while back is a templating\ndecorator. The idea of that decorator is that you return a dictionary with the values\npassed to the template from the view function and the template is automatically ren-\ndered. Withthat,thefollowingthreeexamplesdoexactlythesame:\n@app.route(\u2019/\u2019)\ndef index():\nreturn render_template(\u2019index.html\u2019, value=42)\n@app.route(\u2019/\u2019)\n@templated(\u2019index.html\u2019)\ndef index():\nreturn dict(value=42)\n@app.route(\u2019/\u2019)\n@templated()\ndef index():\nreturn dict(value=42)\nAs you can see, if no template name is provided it will use the endpoint of the URL\n\u2019.html\u2019\nmapwithdotsconvertedtoslashes+ . Otherwisetheprovidedtemplatename\nisused. Whenthedecoratedfunctionreturns,thedictionaryreturnedispassedtothe\ntemplate rendering function. If None is returned, an empty dictionary is assumed, if\nsomethingelsethanadictionaryisreturnedwereturnitfromthefunctionunchanged.\nThatwayyoucanstillusetheredirectfunctionorreturnsimplestrings.\nHereisthecodeforthatdecorator:\nfrom functools import wraps\nfrom flask import request, render_template\ndef templated(template=None):\ndef decorator(f):\n@wraps(f)\ndef decorated_function(*args, **kwargs):\ntemplate_name = template\nif template_name is None:\ntemplate_name = request.endpoint \\\n.replace(\u2019.\u2019, \u2019/\u2019) + \u2019.html\u2019\nctx = f(*args, **kwargs)\nif ctx is None:\nctx = {}\n144\nelif not isinstance(ctx, dict):\nreturn ctx\nreturn render_template(template_name, **ctx)\nreturn decorated_function\nreturn decorator\n20.12.4 Endpoint Decorator\nWhen you want to use the werkzeug routing system for more flexibility you need to\nRule\nmap the endpoint as defined in the to a view function. This is possible with this\ndecorator. Forexample:\nfrom flask import Flask\nfrom werkzeug.routing import Rule\napp = Flask(__name__)\napp.url_map.add(Rule(\u2019/\u2019, endpoint=\u2019index\u2019))\n@app.endpoint(\u2019index\u2019)\ndef my_index():\nreturn \"Hello world\"\n20.13 Form Validation with WTForms\nWhen you have to work with form data submitted by a browser view code quickly\nbecomesveryhardtoread. Therearelibrariesouttheredesignedtomakethisprocess\neasier to manage. One of them is WTForms which we will handle here. If you find\nyourselfinthesituationofhavingmanyforms,youmightwanttogiveitatry.\nWhen you are working with WTForms you have to define your forms as classes first.\nI recommend breaking up the application into multiple modules (Larger Applications)\nforthatandaddingaseparatemodulefortheforms.\nGettingmostofWTFormswithanExtension\nTheFlask-WTFextensionexpandsonthispatternandaddsafewhandfullittlehelpers\nthatmakeworkingwithformsandFlaskmorefun. YoucangetitfromPyPI.\n20.13.1 The Forms\nThisisanexampleformforatypicalregistrationpage:\nfrom wtforms import Form, BooleanField, TextField, PasswordField, validators\nclass RegistrationForm(Form):\nusername = TextField(\u2019Username\u2019, [validators.Length(min=4, max=25)])\n145\nemail = TextField(\u2019Email Address\u2019, [validators.Length(min=6, max=35)])\npassword = PasswordField(\u2019New Password\u2019, [\nvalidators.Required(),\nvalidators.EqualTo(\u2019confirm\u2019, message=\u2019Passwords must match\u2019)\n])\nconfirm = PasswordField(\u2019Repeat Password\u2019)\naccept_tos = BooleanField(\u2019I accept the TOS\u2019, [validators.Required()])\n20.13.2 In the View\nIntheviewfunction,theusageofthisformlookslikethis:\n@app.route(\u2019/register\u2019, methods=[\u2019GET\u2019, \u2019POST\u2019])\ndef register():\nform = RegistrationForm(request.form)\nif request.method == \u2019POST\u2019 and form.validate():\nuser = User(form.username.data, form.email.data,\nform.password.data)\ndb_session.add(user)\nflash(\u2019Thanks for registering\u2019)\nreturn redirect(url_for(\u2019login\u2019))\nreturn render_template(\u2019register.html\u2019, form=form)\nNotice that we are implying that the view is using SQLAlchemy here (SQLAlchemy in\nFlask)butthisisnorequirementofcourse. Adaptthecodeasnecessary.\nThingstoremember:\nform\n1. createtheformfromtherequest valueifthedataissubmittedviatheHTTP\nargs\nPOST methodand ifthedataissubmittedasGET.\nvalidate()\n2. tovalidatethedata,callthe methodwhichwillreturnTrueifthedata\nvalidates,Falseotherwise.\n3. toaccessindividualvaluesfromtheform,accessform.<NAME>.data.\n20.13.3 Forms in Templates\nNow to the template side. When you pass the form to the templates you can easily\nrender them there. Look at the following example template to see how easy this is.\nWTForms does half the form generation for us already. To make it even nicer, we can\nwriteamacrothatrendersafieldwithlabelandalistoferrorsifthereareany.\nHere\u2019sanexample_formhelpers.htmltemplatewithsuchamacro:\n{% macro render_field(field) %}\n<dt>{{ field.label }}\n<dd>{{ field(**kwargs)|safe }}\n{% if field.errors %}\n<ul class=errors>\n146\n{% for error in field.errors %}\n<li>{{ error }}</li>\n{% endfor %}\n</ul>\n{% endif %}\n</dd>\n{% endmacro %}\nThis macro accepts a couple of keyword arguments that are forwarded to WTForm\u2019s\nfield function that renders the field for us. The keyword arguments will be in-\nrender_field(form.username,\nsertedasHTMLattributes. Soforexampleyoucancall\nclass=\u2019username\u2019)\nto add a class to the input element. Note that WTForms returns\nstandard Python unicode strings, so we have to tell Jinja2 that this data is already\nHTMLescapedwiththe|safefilter.\nHere the register.html template for the function we used above which takes advantage\nofthe_formhelpers.htmltemplate:\n{% from \"_formhelpers.html\" import render_field %}\n<form method=post action=\"/register\">\n<dl>\n{{ render_field(form.username) }}\n{{ render_field(form.email) }}\n{{ render_field(form.password) }}\n{{ render_field(form.confirm) }}\n{{ render_field(form.accept_tos) }}\n</dl>\n<p><input type=submit value=Register>\n</form>\nFormoreinformationaboutWTForms,headovertotheWTFormswebsite.\n20.14 Template Inheritance\nThe most powerful part of Jinja is template inheritance. Template inheritance allows\nyoutobuildabase\u201cskeleton\u201dtemplatethatcontainsallthecommonelementsofyour\nsiteanddefinesblocksthatchildtemplatescanoverride.\nSounds complicated but is very basic. It\u2019s easiest to understand it by starting with an\nexample.\n20.14.1 Base Template\nlayout.html\nThis template, which we\u2019ll call , defines a simple HTML skeleton docu-\nment that you might use for a simple two-column page. It\u2019s the job of \u201cchild\u201d tem-\nplatestofilltheemptyblockswithcontent:\n147\n<!doctype html>\n<html>\n<head>\n{% block head %}\n<link rel=\"stylesheet\" href=\"{{ url_for(\u2019static\u2019, filename=\u2019style.css\u2019) }}\">\n<title>{% block title %}{% endblock %} - My Webpage</title>\n{% endblock %}\n</head>\n<body>\n<div id=\"content\">{% block content %}{% endblock %}</div>\n<div id=\"footer\">\n{% block footer %}\n&copy; Copyright 2010 by <a href=\"http://domain.invalid/\">you</a>.\n{% endblock %}\n</div>\n</body>\n</html>\n{% block %}\nIn this example, the tags define four blocks that child templates can fill\nin. Alltheblock tagdoesistellthetemplateenginethatachildtemplatemayoverride\nthoseportionsofthetemplate.\n20.14.2 Child Template\nAchildtemplatemightlooklikethis:\n{% extends \"layout.html\" %}\n{% block title %}Index{% endblock %}\n{% block head %}\n{{ super() }}\n<style type=\"text/css\">\n.important { color: #336699; }\n</style>\n{% endblock %}\n{% block content %}\n<h1>Index</h1>\n<p class=\"important\">\nWelcome on my awesome homepage.\n{% endblock %}\n{% extends %}\nThe tag is the key here. It tells the template engine that this template\n\u201cextends\u201d another template. When the template system evaluates this template, first\nit locates the parent. The extends tag must be the first tag in the template. To render\n{{ super() }}\nthecontentsofablockdefinedintheparenttemplate,use .\n148\n20.15 Message Flashing\nGood applications and user interfaces are all about feedback. If the user does not get\nenough feedback they will probably end up hating the application. Flask provides a\nreally simple way to give feedback to a user with the flashing system. The flashing\nsystem basically makes it possible to record a message at the end of a request and\naccess it next request and only next request. This is usually combined with a layout\ntemplatethatdoesthis.\n20.15.1 Simple Flashing\nSohereisafullexample:\nfrom flask import Flask, flash, redirect, render_template, \\\nrequest, url_for\napp = Flask(__name__)\napp.secret_key = \u2019some_secret\u2019\n@app.route(\u2019/\u2019)\ndef index():\nreturn render_template(\u2019index.html\u2019)\n@app.route(\u2019/login\u2019, methods=[\u2019GET\u2019, \u2019POST\u2019])\ndef login():\nerror = None\nif request.method == \u2019POST\u2019:\nif request.form[\u2019username\u2019] != \u2019admin\u2019 or \\\nrequest.form[\u2019password\u2019] != \u2019secret\u2019:\nerror = \u2019Invalid credentials\u2019\nelse:\nflash(\u2019You were successfully logged in\u2019)\nreturn redirect(url_for(\u2019index\u2019))\nreturn render_template(\u2019login.html\u2019, error=error)\nlayout.html\nAndherethe templatewhichdoesthemagic:\n<!doctype html>\n<title>My Application</title>\n{% with messages = get_flashed_messages() %}\n{% if messages %}\n<ul class=flashes>\n{% for message in messages %}\n<li>{{ message }}</li>\n{% endfor %}\n</ul>\n{% endif %}\n{% endwith %}\n{% block body %}{% endblock %}\n149\nAndheretheindex.htmltemplate:\n{% extends \"layout.html\" %}\n{% block body %}\n<h1>Overview</h1>\n<p>Do you want to <a href=\"{{ url_for(\u2019login\u2019) }}\">log in?</a>\n{% endblock %}\nAndofcoursethelogintemplate:\n{% extends \"layout.html\" %}\n{% block body %}\n<h1>Login</h1>\n{% if error %}\n<p class=error><strong>Error:</strong> {{ error }}\n{% endif %}\n<form action=\"\" method=post>\n<dl>\n<dt>Username:\n<dd><input type=text name=username value=\"{{\nrequest.form.username }}\">\n<dt>Password:\n<dd><input type=password name=password>\n</dl>\n<p><input type=submit value=Login>\n</form>\n{% endblock %}\n20.15.2 Flashing With Categories\nNewinversion0.3.\nIt is also possible to provide categories when flashing a message. The default cate-\n\u2019message\u2019\ngory if nothing is provided is . Alternative categories can be used to give\nthe user better feedback. For example error messages could be displayed with a red\nbackground.\nTo flash a message with a different category, just use the second argument to the\nflash()\nfunction:\nflash(u\u2019Invalid password provided\u2019, \u2019error\u2019)\nget_flashed_messages()\nInsidethetemplateyouthenhavetotellthe functiontoalso\nreturnthecategories. Thelooplooksslightlydifferentinthatsituationthen:\n{% with messages = get_flashed_messages(with_categories=true) %}\n{% if messages %}\n<ul class=flashes>\n{% for category, message in messages %}\n<li class=\"{{ category }}\">{{ message }}</li>\n{% endfor %}\n150\n</ul>\n{% endif %}\n{% endwith %}\nThis is just one example of how to render these flashed messages. One might also use\n<strong>Error:</strong>\nthecategorytoaddaprefixsuchas tothemessage.\n20.15.3 Filtering Flash Messages\nNewinversion0.9.\nOptionally you can pass a list of categories which filters the results of\nget_flashed_messages()\n. This is useful if you wish to render each category in a sepa-\nrateblock.\n{% with errors = get_flashed_messages(category_filter=[\"error\"]) %}\n{% if errors %}\n<div class=\"alert-message block-message error\">\n<a class=\"close\" href=\"#\">\u00d7</a>\n<ul>\n{%- for msg in errors %}\n<li>{{ msg }}</li>\n{% endfor -%}\n</ul>\n</div>\n{% endif %}\n{% endwith %}\n20.16 AJAX with jQuery\njQueryisasmallJavaScriptlibrarycommonlyusedtosimplifyworkingwiththeDOM\nandJavaScriptingeneral. Itistheperfecttooltomakewebapplicationsmoredynamic\nbyexchangingJSONbetweenserverandclient.\nJSON itself is a very lightweight transport format, very similar to how Python primi-\ntives (numbers, strings, dicts and lists) look like which is widely supported and very\neasy to parse. It became popular a few years ago and quickly replaced XML as trans-\nportformatinwebapplications.\n20.16.1 Loading jQuery\nIn order to use jQuery, you have to download it first and place it in the static folder of\nyour application and then ensure it\u2019s loaded. Ideally you have a layout template that\nis used for all pages where you just have to add a script statement to the bottom of\nyour<body>toloadjQuery:\n151\n<script type=text/javascript src=\"{{\nurl_for(\u2019static\u2019, filename=\u2019jquery.js\u2019) }}\"></script>\nAnothermethodisusingGoogle\u2019sAJAXLibrariesAPItoloadjQuery:\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n<script>window.jQuery || document.write(\u2019<script src=\"{{\nurl_for(\u2019static\u2019, filename=\u2019jquery.js\u2019) }}\">\\x3C/script>\u2019)</script>\nIn this case you have to put jQuery into your static folder as a fallback, but it will\nfirst try to load it directly from Google. This has the advantage that your website will\nprobably load faster for users if they went to at least one other website before using\nthesamejQueryversionfromGooglebecauseitwillalreadybeinthebrowsercache.\n20.16.2 Where is My Site?\nDo you know where your application is? If you are developing the answer is quite\nsimple: it\u2019s on localhost port something and directly on the root of that server. But\nwhatifyoulaterdecidetomoveyourapplicationtoadifferentlocation? Forexample\nhttp://example.com/myapp\nto ? On the server side this never was a problem because\nurl_for()\nwe were using the handy function that could answer that question for us,\nbut if we are using jQuery we should not hardcode the path to the application but\nmakethatdynamic,sohowcanwedothat?\nA simple method would be to add a script tag to our page that sets a global variable\ntotheprefixtotherootoftheapplication. Somethinglikethis:\n<script type=text/javascript>\n$SCRIPT_ROOT = {{ request.script_root|tojson|safe }};\n</script>\n|safe\nThe is necessary in Flask before 0.10 so that Jinja does not escape the JSON\nencoded string with HTML rules. Usually this would be necessary, but we are inside\nascriptblockherewheredifferentrulesapply.\nInformationforPros\nIn HTML the script tag is declared CDATA which means that entities will not be\n</script>\nparsed. Everything until is handled as script. This also means that there\n</ |tojson\nmust never be any between the script tags. is kind enough to do the right\n{{ \"</script>\"|tojson|safe }}\nthinghereandescapeslashesforyou( isrenderedas\n\"<\\/script>\"\n).\nIn Flask 0.10 it goes a step further and escapes all HTML tags with unicode escapes.\nThismakesitpossibleforFlasktoautomaticallymarktheresultasHTMLsafe.\n152\n20.16.3 JSON View Functions\nNow let\u2019s create a server side function that accepts two URL arguments of numbers\nwhichshouldbeaddedtogetherandthensentbacktotheapplicationinaJSONobject.\nThis is a really ridiculous example and is something you usually would do on the\nclient side alone, but a simple example that shows how you would use jQuery and\nFlasknonetheless:\nfrom flask import Flask, jsonify, render_template, request\napp = Flask(__name__)\n@app.route(\u2019/_add_numbers\u2019)\ndef add_numbers():\na = request.args.get(\u2019a\u2019, 0, type=int)\nb = request.args.get(\u2019b\u2019, 0, type=int)\nreturn jsonify(result=a + b)\n@app.route(\u2019/\u2019)\ndef index():\nreturn render_template(\u2019index.html\u2019)\nAs you can see I also added an index method here that renders a template. This tem-\nplate will load jQuery as above and have a little form we can add two numbers and a\nlinktotriggerthefunctionontheserverside.\nget()\nNote that we are using the method here which will never fail. If the key is\n0\nmissing a default value (here ) is returned. Furthermore it can convert values to a\nspecifictype(likeinourcaseint). Thisisespeciallyhandyforcodethatistriggeredby\na script (APIs, JavaScript etc.) because you don\u2019t need special error reporting in that\ncase.\n20.16.4 The HTML\nYour index.html template either has to extend a layout.html template with jQuery\nloaded and the $SCRIPT_ROOT variable set, or do that on the top. Here\u2019s the HTML\ncode needed for our little application (index.html). Notice that we also drop the script\ndirectlyintotheHTMLhere. Itisusuallyabetterideatohavethatinaseparatescript\nfile:\n<script type=text/javascript>\n$(function() {\n$(\u2019a#calculate\u2019).bind(\u2019click\u2019, function() {\n$.getJSON($SCRIPT_ROOT + \u2019/_add_numbers\u2019, {\na: $(\u2019input[name=\"a\"]\u2019).val(),\nb: $(\u2019input[name=\"b\"]\u2019).val()\n}, function(data) {\n$(\"#result\").text(data.result);\n});\nreturn false;\n});\n153\n});\n</script>\n<h1>jQuery Example</h1>\n<p><input type=text size=5 name=a> +\n<input type=text size=5 name=b> =\n<span id=result>?</span>\n<p><a href=# id=calculate>calculate server side</a>\nI won\u2019t go into detail here about how jQuery works, just a very quick explanation of\nthelittlebitofcodeabove:\n$(function() { ... })\n1. specifies code that should run once the browser is done\nloadingthebasicpartsofthepage.\n$(\u2019selector\u2019)\n2. selectsanelementandletsyouoperateonit.\nelement.bind(\u2019event\u2019, func)\n3. specifiesafunctionthatshouldrunwhentheuser\nclickedontheelement. Ifthatfunctionreturnsfalse,thedefaultbehaviorwillnot\nkickin(inthiscase,navigatetothe#URL).\n$.getJSON(url, data, func)\n4. sends a GET request to url and will send the con-\ntents of the data object as query parameters. Once the data arrived, it will call\nthe given function with the return value as argument. Note that we can use the\n$SCRIPT_ROOT variableherethatwesetearlier.\nIf you don\u2019t get the whole picture, download the sourcecode for this example from\ngithub.\n20.17 Custom Error Pages\nabort()\nFlask comes with a handy function that aborts a request with an HTTP error\ncode early. It will also provide a plain black and white error page for you with a basic\ndescription,butnothingfancy.\nDepending on the error code it is less or more likely for the user to actually see such\nanerror.\n20.17.1 Common Error Codes\nThe following error codes are some that are often displayed to the user, even if the\napplicationbehavescorrectly:\n404NotFound The good old \u201cchap, you made a mistake typing that URL\u201d message.\nSo common that even novices to the internet know that 404 means: damn, the\nthing I was looking for is not there. It\u2019s a very good idea to make sure there is\nactuallysomethingusefulona404page,atleastalinkbacktotheindex.\n403Forbidden Ifyouhavesomekindofaccesscontrolonyourwebsite,youwillhave\nto send a 403 code for disallowed resources. So make sure the user is not lost\nwhentheytrytoaccessaforbiddenresource.\n154\n410Gone Did you know that there the \u201c404 Not Found\u201d has a brother named \u201c410\nGone\u201d? Few people actually implement that, but the idea is that resources that\npreviously existed and got deleted answer with 410 instead of 404. If you are\nnot deleting documents permanently from the database but just mark them as\ndeleted,dotheuserafavourandusethe410codeinsteadanddisplayamessage\nthatwhattheywerelookingforwasdeletedforalleternity.\n500InternalServerError Usually happens on programming errors or if the server is\noverloaded. A terrible good idea to have a nice page there, because your appli-\ncationwillfailsoonerorlater(seealso: LoggingApplicationErrors).\n20.17.2 Error Handlers\nAn error handler is a function, just like a view function, but it is called when an error\nHTTPException\nhappens and is passed that error. The error is most likely a , but in one\ncaseitcanbeadifferenterror: ahandlerforinternalservererrorswillbepassedother\nexceptioninstancesaswelliftheyareuncaught.\nerrorhandler()\nAn error handler is registered with the decorator and the error code\nof the exception. Keep in mind that Flask will not set the error code for you, so make\nsuretoalsoprovidetheHTTPstatuscodewhenreturningaresponse.\nHereanexampleimplementationfora\u201c404PageNotFound\u201dexception:\nfrom flask import render_template\n@app.errorhandler(404)\ndef page_not_found(e):\nreturn render_template(\u2019404.html\u2019), 404\nAnexampletemplatemightbethis:\n{% extends \"layout.html\" %}\n{% block title %}Page Not Found{% endblock %}\n{% block body %}\n<h1>Page Not Found</h1>\n<p>What you were looking for is just not there.\n<p><a href=\"{{ url_for(\u2019index\u2019) }}\">go somewhere nice</a>\n{% endblock %}\n20.18 Lazily Loading Views\nFlask is usually used with the decorators. Decorators are simple and you have the\nURL right next to the function that is called for that specific URL. However there is\na downside to this approach: it means all your code that uses decorators has to be\nimportedupfrontorFlaskwillneveractuallyfindyourfunction.\nThis can be a problem if your application has to import quick. It might have to do\nthatonsystemslikeGoogle\u2019sAppEngineorothersystems. Soifyousuddenlynotice\n155\nthat your application outgrows this approach you can fall back to a centralized URL\nmapping.\nadd_url_rule()\nThe system that enables having a central URL map is the function.\nInsteadofusingdecorators,youhaveafilethatsetsuptheapplicationwithallURLs.\n20.18.1 Converting to Centralized URL Map\nImaginethecurrentapplicationlookssomewhatlikethis:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\u2019/\u2019)\ndef index():\npass\n@app.route(\u2019/user/<username>\u2019)\ndef user(username):\npass\nThen the centralized approach you would have one file with the views (views.py) but\nwithoutanydecorator:\ndef index():\npass\ndef user(username):\npass\nAndthenafilethatsetsupanapplicationwhichmapsthefunctionstoURLs:\nfrom flask import Flask\nfrom yourapplication import views\napp = Flask(__name__)\napp.add_url_rule(\u2019/\u2019, view_func=views.index)\napp.add_url_rule(\u2019/user/<username>\u2019, view_func=views.user)\n20.18.2 Loading Late\nSo far we only split up the views and the routing, but the module is still loaded up-\nfront. Thetricktoactuallyloadtheviewfunctionasneeded. Thiscanbeaccomplished\nwithahelperclassthatbehavesjustlikeafunctionbutinternallyimportstherealfunc-\ntiononfirstuse:\nfrom werkzeug import import_string, cached_property\nclass LazyView(object):\ndef __init__(self, import_name):\n156\nself.__module__, self.__name__ = import_name.rsplit(\u2019.\u2019, 1)\nself.import_name = import_name\n@cached_property\ndef view(self):\nreturn import_string(self.import_name)\ndef __call__(self, *args, **kwargs):\nreturn self.view(*args, **kwargs)\nWhat\u2019s important here is is that __module__ and __name__ are properly set. This is\nused by Flask internally to figure out how to name the URL rules in case you don\u2019t\nprovideanamefortheruleyourself.\nThenyoucandefineyourcentralplacetocombinetheviewslikethis:\nfrom flask import Flask\nfrom yourapplication.helpers import LazyView\napp = Flask(__name__)\napp.add_url_rule(\u2019/\u2019,\nview_func=LazyView(\u2019yourapplication.views.index\u2019))\napp.add_url_rule(\u2019/user/<username>\u2019,\nview_func=LazyView(\u2019yourapplication.views.user\u2019))\nYoucanfurtheroptimizethisintermsofamountofkeystrokesneededtowritethisby\nadd_url_rule()\nhaving a function that calls into by prefixing a string with the project\nnameandadot,andbywrappingview_funcinaLazyViewasneeded:\ndef url(url_rule, import_name, **options):\nview = LazyView(\u2019yourapplication.\u2019 + import_name)\napp.add_url_rule(url_rule, view_func=view, **options)\nurl(\u2019/\u2019, \u2019views.index\u2019)\nurl(\u2019/user/<username>\u2019, \u2019views.user\u2019)\nOnethingto keepinmindis thatbeforeandafter requesthandlershaveto beinafile\nthat is imported upfront to work properly on the first request. The same goes for any\nkindofremainingdecorator.\n20.19 MongoKit in Flask\nUsing a document database rather than a full DBMS gets more common these days.\nThis pattern shows how to use MongoKit, a document mapper library, to integrate\nwithMongoDB.\nThispatternrequiresarunningMongoDBserverandtheMongoKitlibraryinstalled.\nTherearetwoverycommonwaystouseMongoKit. Iwilloutlineeachofthemhere:\n157\n20.19.1 Declarative\nThe default behavior of MongoKit is the declarative one that is based on common\nideasfromDjangoortheSQLAlchemydeclarativeextension.\nHereanexampleapp.pymoduleforyourapplication:\nfrom flask import Flask\nfrom mongokit import Connection, Document\n# configuration\nMONGODB_HOST = \u2019localhost\u2019\nMONGODB_PORT = 27017\n# create the little application object\napp = Flask(__name__)\napp.config.from_object(__name__)\n# connect to the database\nconnection = Connection(app.config[\u2019MONGODB_HOST\u2019],\napp.config[\u2019MONGODB_PORT\u2019])\nTo define your models, just subclass the Document class that is imported from Mon-\ngoKit. If you\u2019ve seen the SQLAlchemy pattern you may wonder why we do not have\na session and even do not define a init_db function here. On the one hand, MongoKit\ndoes not have something like a session. This sometimes makes it more to type but\nalso makes it blazingly fast. On the other hand, MongoDB is schemaless. This means\nyoucanmodifythedatastructurefromoneinsertquerytothenextwithoutanyprob-\nlem. MongoKit is just schemaless too, but implements some validation to ensure data\nintegrity.\nHereisanexampledocument(putthisalsointoapp.py,e.g.):\ndef max_length(length):\ndef validate(value):\nif len(value) <= length:\nreturn True\nraise Exception(\u2019%s must be at most %s characters long\u2019 % length)\nreturn validate\nclass User(Document):\nstructure = {\n\u2019name\u2019: unicode,\n\u2019email\u2019: unicode,\n}\nvalidators = {\n\u2019name\u2019: max_length(50),\n\u2019email\u2019: max_length(120)\n}\nuse_dot_notation = True\ndef __repr__(self):\nreturn \u2019<User %r>\u2019 % (self.name)\n158\n# register the User document with our current connection\nconnection.register([User])\nThis example shows you how to define your schema (named structure), a valida-\ntor for the maximum character length and uses a special MongoKit feature called\nuse_dot_notation. Per default MongoKit behaves like a python dictionary but with\nuse_dot_notationsettoTrueyoucanuseyourdocumentslikeyouusemodelsinnearly\nanyotherORMbyusingdotstoseparatebetweenattributes.\nYoucaninsertentriesintothedatabaselikethis:\n>>> from yourapplication.database import connection\n>>> from yourapplication.models import User\n>>> collection = connection[\u2019test\u2019].users\n>>> user = collection.User()\n>>> user[\u2019name\u2019] = u\u2019admin\u2019\n>>> user[\u2019email\u2019] = u\u2019admin@localhost\u2019\n>>> user.save()\nNote that MongoKit is kinda strict with used column types, you must not use a com-\nmonstrtypeforeithernameoremailbutunicode.\nQueryingissimpleaswell:\n>>> list(collection.User.find())\n[<User u\u2019admin\u2019>]\n>>> collection.User.find_one({\u2019name\u2019: u\u2019admin\u2019})\n<User u\u2019admin\u2019>\n20.19.2 PyMongo Compatibility Layer\nIf you just want to use PyMongo, you can do that with MongoKit as well. You may\nuse this process if you need the best performance to get. Note that this example does\nnotshowhowtocoupleitwithFlask,seetheaboveMongoKitcodeforexamples:\nfrom MongoKit import Connection\nconnection = Connection()\nTo insert data you can use the insert method. We have to get a collection first, this is\nsomewhatthesameasatableintheSQLworld.\n>>> collection = connection[\u2019test\u2019].users\n>>> user = {\u2019name\u2019: u\u2019admin\u2019, \u2019email\u2019: u\u2019admin@localhost\u2019}\n>>> collection.insert(user)\nMongoKitwillautomaticallycommitforus.\nToqueryyourdatabase,youusethecollectiondirectly:\n159\n>>> list(collection.find())\n[{u\u2019_id\u2019: ObjectId(\u20194c271729e13823182f000000\u2019), u\u2019name\u2019: u\u2019admin\u2019, u\u2019email\u2019: u\u2019admin@localhost\u2019}]\n>>> collection.find_one({\u2019name\u2019: u\u2019admin\u2019})\n{u\u2019_id\u2019: ObjectId(\u20194c271729e13823182f000000\u2019), u\u2019name\u2019: u\u2019admin\u2019, u\u2019email\u2019: u\u2019admin@localhost\u2019}\nTheseresultsarealsodict-likeobjects:\n>>> r = collection.find_one({\u2019name\u2019: u\u2019admin\u2019})\n>>> r[\u2019email\u2019]\nu\u2019admin@localhost\u2019\nFormoreinformationaboutMongoKit,headovertothewebsite.\n20.20 Adding a favicon\nA\u201cfavicon\u201disaniconusedbybrowsersfortabsandbookmarks. Thishelpstodistin-\nguishyourwebsiteandtogiveitauniquebrand.\nA common question is how to add a favicon to a flask application. First, of course,\nyou need an icon. It should be 16 \u00d7 16 pixels and in the ICO file format. This is not a\nrequirement but a de-facto standard supported by all relevant browsers. Put the icon\nfavicon.ico\ninyourstaticdirectoryas .\nNow, to get browsers to find your icon, the correct way is to add a link tag in your\nHTML.So,forexample:\n<link rel=\"shortcut icon\" href=\"{{ url_for(\u2019static\u2019, filename=\u2019favicon.ico\u2019) }}\">\nThat\u2019s all you need for most browsers, however some really old ones do not support\nthis standard. The old de-facto standard is to serve this file, with this name, at the\nwebsite root. If your application is not mounted at the root path of the domain you\neither need to configure the webserver to serve the icon at the root or if you can\u2019t do\nthatyou\u2019reoutofluck. Ifhoweveryourapplicationistherootyoucansimplyroutea\nredirect:\napp.add_url_rule(\u2019/favicon.ico\u2019,\nredirect_to=url_for(\u2019static\u2019, filename=\u2019favicon.ico\u2019))\nIf you want to save the extra redirect request you can also write a view using\nsend_from_directory()\n:\nimport os\nfrom flask import send_from_directory\n@app.route(\u2019/favicon.ico\u2019)\ndef favicon():\nreturn send_from_directory(os.path.join(app.root_path, \u2019static\u2019),\n\u2019favicon.ico\u2019, mimetype=\u2019image/vnd.microsoft.icon\u2019)\nWe can leave out the explicit mimetype and it will be guessed, but we may as well\nspecifyittoavoidtheextraguessing,asitwillalwaysbethesame.\n160\nThe above will serve the icon via your application and if possible it\u2019s better to config-\nureyourdedicatedwebservertoserveit;refertothewebserver\u2019sdocumentation.\n20.20.1 See also\n\u2022 TheFaviconarticleonWikipedia\n20.21 Streaming Contents\nSometimes you want to send an enormous amount of data to the client, much more\nthanyouwanttokeepinmemory. Whenyouaregeneratingthedataontheflythough,\nhowdoyousendthatbacktotheclientwithouttheroundtriptothefilesystem?\nTheanswerisbyusinggeneratorsanddirectresponses.\n20.21.1 Basic Usage\nThis is a basic view function that generates a lot of CSV data on the fly. The trick is to\nhave an inner function that uses a generator to generate data and to then invoke that\nfunctionandpassittoaresponseobject:\nfrom flask import Response\n@app.route(\u2019/large.csv\u2019)\ndef generate_large_csv():\ndef generate():\nfor row in iter_all_rows():\nyield \u2019,\u2019.join(row) + \u2019\\n\u2019\nreturn Response(generate(), mimetype=\u2019text/csv\u2019)\nyield\nEach expression is directly sent to the browser. Note though that some WSGI\nmiddlewares might break streaming, so be careful there in debug environments with\nprofilersandotherthingsyoumighthaveenabled.\n20.21.2 Streaming from Templates\nThe Jinja2 template engine also supports rendering templates piece by piece. This\nfunctionality is not directly exposed by Flask because it is quite uncommon, but you\ncaneasilydoityourself:\nfrom flask import Response\ndef stream_template(template_name, **context):\napp.update_template_context(context)\nt = app.jinja_env.get_template(template_name)\nrv = t.stream(context)\n161\nrv.enable_buffering(5)\nreturn rv\n@app.route(\u2019/my-large-page.html\u2019)\ndef render_large_template():\nrows = iter_all_rows()\nreturn Response(stream_template(\u2019the_template.html\u2019, rows=rows))\nThe trick here is to get the template object from the Jinja2 environment on the appli-\nstream() render()\ncation and to call instead of which returns a stream object instead\nof a string. Since we\u2019re bypassing the Flask template render functions and using the\ntemplate object itself we have to make sure to update the render context ourselves by\nupdate_template_context()\ncalling . The template is then evaluated as the stream is\niterated over. Since each time you do a yield the server will flush the content to the\nclientyoumightwanttobufferupafewitemsinthetemplatewhichyoucandowith\nrv.enable_buffering(size) 5\n. isasanedefault.\n20.21.3 Streaming with Context\nNewinversion0.9.\nNote that when you stream data, the request context is already gone the moment the\nfunction executes. Flask 0.9 provides you with a helper that can keep the request\ncontextaroundduringtheexecutionofthegenerator:\nfrom flask import stream_with_context, request, Response\n@app.route(\u2019/stream\u2019)\ndef streamed_response():\ndef generate():\nyield \u2019Hello \u2019\nyield request.args[\u2019name\u2019]\nyield \u2019!\u2019\nreturn Response(stream_with_context(generate()))\nstream_with_context() RuntimeError\nWithout the function you would get a at that\npoint.\n20.22 Deferred Request Callbacks\nOne of the design principles of Flask is that response objects are created and passed\ndown a chain of potential callbacks that can modify them or replace them. When the\nrequesthandlingstarts,thereisnoresponseobjectyet. Itiscreatedasnecessaryeither\nbyaviewfunctionorbysomeothercomponentinthesystem.\nBut what happens if you want to modify the response at a point where the response\ndoes not exist yet? A common example for that would be a before-request function\nthatwantstosetacookieontheresponseobject.\n162\nOne way isto avoid the situation. Very often that is possible. For instance youcan try\nto move that logic into an after-request callback instead. Sometimes however moving\nthat code there is just not a very pleasant experience or makes code look very awk-\nward.\ng\nAsanalternativepossibilityyoucanattachabunchofcallbackfunctionstothe object\nand call them at the end of the request. This way you can defer code execution from\nanywhereintheapplication.\n20.22.1 The Decorator\ng\nThefollowingdecoratoristhekey. Itregistersafunctiononalistonthe object:\nfrom flask import g\ndef after_this_request(f):\nif not hasattr(g, \u2019after_request_callbacks\u2019):\ng.after_request_callbacks = []\ng.after_request_callbacks.append(f)\nreturn f\n20.22.2 Calling the Deferred\nNow you can use the after_this_request decorator to mark a function to be called at the\nendoftherequest. Butwestillneedtocallthem. Forthisthefollowingfunctionneeds\nafter_request()\ntoberegisteredas callback:\n@app.after_request\ndef call_after_request_callbacks(response):\nfor callback in getattr(g, \u2019after_request_callbacks\u2019, ()):\ncallback(response)\nreturn response\n20.22.3 A Practical Example\nNowwecaneasilyatanypointintimeregisterafunctiontobecalledattheendofthis\nparticularrequest. Forexampleyoucanrememberthecurrentlanguageoftheuserin\nacookieinthebefore-requestfunction:\nfrom flask import request\n@app.before_request\ndef detect_user_language():\nlanguage = request.cookies.get(\u2019user_lang\u2019)\nif language is None:\nlanguage = guess_language_from_request()\n@after_this_request\n163\ndef remember_language(response):\nresponse.set_cookie(\u2019user_lang\u2019, language)\ng.language = language\n20.23 Adding HTTP Method Overrides\nSomeHTTPproxiesdonotsupportarbitraryHTTPmethodsornewerHTTPmethods\n(suchasPATCH).Inthatcaseit\u2019spossibleto\u201cproxy\u201dHTTPmethodsthroughanother\nHTTPmethodintotalviolationoftheprotocol.\nThe way this works is by letting the client do an HTTP POST request and set the\nX-HTTP-Method-Override\nheaderandsetthevaluetotheintendedHTTPmethod(such\nPATCH\nas ).\nThiscaneasilybeaccomplishedwithanHTTPmiddleware:\nclass HTTPMethodOverrideMiddleware(object):\nallowed_methods = frozenset([\n\u2019GET\u2019,\n\u2019HEAD\u2019,\n\u2019POST\u2019,\n\u2019DELETE\u2019,\n\u2019PUT\u2019,\n\u2019PATCH\u2019,\n\u2019OPTIONS\u2019\n])\nbodyless_methods = frozenset([\u2019GET\u2019, \u2019HEAD\u2019, \u2019OPTIONS\u2019, \u2019DELETE\u2019])\ndef __init__(self, app):\nself.app = app\ndef __call__(self, environ, start_response):\nmethod = environ.get(\u2019HTTP_X_HTTP_METHOD_OVERRIDE\u2019, \u2019\u2019).upper()\nif method in self.allowed_methods:\nmethod = method.encode(\u2019ascii\u2019, \u2019replace\u2019)\nenviron[\u2019REQUEST_METHOD\u2019] = method\nif method in self.bodyless_methods:\nenviron[\u2019CONTENT_LENGTH\u2019] = \u20190\u2019\nreturn self.app(environ, start_response)\nTousethiswithFlaskthisisallthatisnecessary:\nfrom flask import Flask\napp = Flask(__name__)\napp.wsgi_app = HTTPMethodOverrideMiddleware(app.wsgi_app)\n164\n20.24 Request Content Checksums\nVarious pieces of code can consume the request data and preprocess it. For instance\nJSON data ends up on the request object already read and processed, form data ends\nupthereaswellbutgoesthroughadifferentcodepath. Thisseemsinconvenientwhen\nyou want to calculate the checksum of the incoming request data. This is necessary\nsometimesforsomeAPIs.\nFortunatelythisishoweververysimpletochangebywrappingtheinputstream.\nThe following example calculates the SHA1 checksum of the incoming data as it gets\nreadandstoresitintheWSGIenvironment:\nimport hashlib\nclass ChecksumCalcStream(object):\ndef __init__(self, stream):\nself._stream = stream\nself._hash = hashlib.sha1()\ndef read(self, bytes):\nrv = self._stream.read(bytes)\nself._hash.update(rv)\nreturn rv\ndef readline(self, size_hint):\nrv = self._stream.readline(size_hint)\nself._hash.update(rv)\nreturn rv\ndef generate_checksum(request):\nenv = request.environ\nstream = ChecksumCalcStream(env[\u2019wsgi.input\u2019])\nenv[\u2019wsgi.input\u2019] = stream\nreturn stream._hash\nTo use this, all you need to do is to hook the calculating stream in before the request\nrequest.form\nstarts consuming data. (Eg: be careful accessing or anything of that\nbefore_request_handlers\nnature. forinstanceshouldbecarefulnottoaccessit).\nExampleusage:\n@app.route(\u2019/special-api\u2019, methods=[\u2019POST\u2019])\ndef special_api():\nhash = generate_checksum(request)\n# Accessing this parses the input stream\nfiles = request.files\n# At this point the hash is fully constructed.\nchecksum = hash.hexdigest()\nreturn \u2019Hash was: %s\u2019 % checksum\n165\n20.25 Celery Based Background Tasks\nCeleryisataskqueueforPythonwithbatteriesincluded. ItusedtohaveaFlaskinte-\ngration but it became unnecessary after some restructuring of the internals of Celery\nwith Version 3. This guide fills in the blanks in how to properly use Celery with Flask\nbut assumes that you generally already read the First Steps with Celery guide in the\nofficialCelerydocumentation.\n20.25.1 Installing Celery\nCelery is on the Python Package Index (PyPI), so it can be installed with standard\npip easy_install\nPythontoolslike or :\n$ pip install celery\n20.25.2 Configuring Celery\nThe first thing you need is a Celery instance, this is called the celery application. It\nFlask\nservesthesamepurposeasthe objectinFlask,justforCelery. Sincethisinstance\nis used as the entry-point for everything you want to do in Celery, like creating tasks\nandmanagingworkers,itmustbepossibleforothermodulestoimportit.\ntasks\nFor instance you can place this in a module. While you can use Celery without\nanyreconfigurationwithFlask,itbecomesabitnicerbysubclassingtasksandadding\nsupport for Flask\u2019s application contexts and hooking it up with the Flask configura-\ntion.\nThisisallthatisnecessarytoproperlyintegrateCelerywithFlask:\nfrom celery import Celery\ndef make_celery(app):\ncelery = Celery(app.import_name, broker=app.config[\u2019CELERY_BROKER_URL\u2019])\ncelery.conf.update(app.config)\nTaskBase = celery.Task\nclass ContextTask(TaskBase):\nabstract = True\ndef __call__(self, *args, **kwargs):\nwith app.app_context():\nreturn TaskBase.__call__(self, *args, **kwargs)\ncelery.Task = ContextTask\nreturn celery\nThe function creates a new Celery object, configures it with the broker from the ap-\nplication config, updates the rest of the Celery config from the Flask config and then\ncreatesasubclassofthetaskthatwrapsthetaskexecutioninanapplicationcontext.\n166\n20.25.3 Minimal Example\nWithwhatwehaveabovethisistheminimalexampleofusingCelerywithFlask:\nfrom flask import Flask\nflask_app = Flask(__name__)\nflask_app.config.update(\nCELERY_BROKER_URL=\u2019redis://localhost:6379\u2019,\nCELERY_RESULT_BACKEND=\u2019redis://localhost:6379\u2019\n)\ncelery = make_celery(flask_app)\n@celery.task()\ndef add_together(a, b):\nreturn a + b\nThistaskcannowbecalledinthebackground:\n>>> result = add_together.delay(23, 42)\n>>> result.wait()\n65\n20.25.4 Running the Celery Worker\nNow if you jumped in and already executed the above code you will be disappointed\n.wait()\nto learn that your will never actually return. That\u2019s because you also need to\nruncelery. Youcandothatbyrunningceleryasaworker:\n$ celery -A your_application.celery worker\nyour_application\nThe stringhastopointtoyourapplication\u2019spackageormodulethat\ncreatestheceleryobject.\n167\n168\n21\nCHAPTER\nDeployment Options\nDepending on what you have available there are multiple ways to run Flask applica-\ntions. You can use the builtin server during development, but you should use a full\ndeployment option for production applications. (Do not use the builtin development\nserverinproduction.) Severaloptionsareavailableanddocumentedhere.\nIf you have a different WSGI server look up the server documentation about how to\nFlask\nuseaWSGIappwithit. Justrememberthatyour applicationobjectistheactual\nWSGIapplication.\nFor hosted options to get up and running quickly, see Deploying to a Web Server in the\nQuickstart.\n21.1 mod_wsgi (Apache)\nIfyouareusingtheApachewebserver,considerusingmod_wsgi.\nWatchOut\napp.run()\nPleasemakesureinadvancethatany callsyoumighthaveinyourapplica-\nif __name__ == \u2019__main__\u2019:\ntion file are inside an block or moved to a separate file.\nJust make sure it\u2019s not called because this will always start a local WSGI server which\nwedonotwantifwedeploythatapplicationtomod_wsgi.\n21.1.1 Installing mod_wsgi\nIf you don\u2019t have mod_wsgi installed yet you have to either install it using a package\nmanager or compile it yourself. The mod_wsgi installation instructions cover source\ninstallationsonUNIXsystems.\nIfyouareusingUbuntu/Debianyoucanapt-getitandactivateitasfollows:\n169\n# apt-get install libapache2-mod-wsgi\nIf you are using a yum based distribution (Fedora, OpenSUSE, etc..) you can install it\nasfollows:\n# yum install mod_wsgi\nOn FreeBSD install mod_wsgi by compiling the www/mod_wsgi port or by using\npkg_add:\n# pkg install ap22-mod_wsgi2\nIfyouareusingpkgsrcyoucaninstallmod_wsgibycompilingthewww/ap2-wsgipack-\nage.\nIfyouencountersegfaultingchildprocessesafterthefirstapachereloadyoucansafely\nignorethem. Justrestarttheserver.\n21.1.2 Creating a .wsgi file\nTorunyourapplicationyouneedayourapplication.wsgifile. Thisfilecontainsthecode\nmod_wsgi is executing on startup to get the application object. The object called appli-\ncationinthatfileisthenusedasapplication.\nFormostapplicationsthefollowingfileshouldbesufficient:\nfrom yourapplication import app as application\nIf you don\u2019t have a factory function for application creation but a singleton instance\nyoucandirectlyimportthatoneasapplication.\nStore that file somewhere that you will find it again (e.g.: /var/www/yourapplication)\nandmakesurethatyourapplicationandallthelibrariesthatareinuseareonthepython\nload path. If you don\u2019t want to install it system wide consider using a virtual python\ninstance. Keep in mind that you will have to actually install your application into the\nvirtualenv as well. Alternatively there is the option to just patch the path in the .wsgi\nfilebeforetheimport:\nimport sys\nsys.path.insert(0, \u2019/path/to/the/application\u2019)\n21.1.3 Configuring Apache\nThe last thing you have to do is to create an Apache configuration file for your ap-\nplication. In this example we are telling mod_wsgi to execute the application under a\ndifferentuserforsecurityreasons:\n<VirtualHost *>\nServerName example.com\n170\nWSGIDaemonProcess yourapplication user=user1 group=group1 threads=5\nWSGIScriptAlias / /var/www/yourapplication/yourapplication.wsgi\n<Directory /var/www/yourapplication>\nWSGIProcessGroup yourapplication\nWSGIApplicationGroup %{GLOBAL}\nOrder deny,allow\nAllow from all\n</Directory>\n</VirtualHost>\nNote: WSGIDaemonProcessisn\u2019timplementedinWindowsandApachewillrefuseto\nrunwiththeaboveconfiguration. OnaWindowssystem,eliminatethoselines:\n<VirtualHost *>\nServerName example.com\nWSGIScriptAlias / C:\\yourdir\\yourapp.wsgi\n<Directory C:\\yourdir>\nOrder deny,allow\nAllow from all\n</Directory>\n</VirtualHost>\nNote: TherehavebeensomechangesinaccesscontrolconfigurationforApache2.4.\nFormoreinformationconsultthemod_wsgiwiki.\n21.1.4 Troubleshooting\nIfyourapplicationdoesnotrun,followthisguidetotroubleshoot:\nProblem: applicationdoesnotrun,errorlogshowsSystemExitignored You have a\napp.run() if __name__\ncall in your application file that is not guarded by an\n== \u2019__main__\u2019: run()\ncondition. Either remove that call from the file and move\nitintoaseparaterun.pyfileorputitintosuchanifblock.\nProblem: applicationgivespermissionerrors Probably caused by your application\nrunningasthewronguser. Makesurethefolderstheapplicationneedsaccessto\nuser\nhave the proper privileges set and the application runs as the correct user (\ngroup\nand parametertotheWSGIDaemonProcessdirective)\nProblem: applicationdieswithanerroronprint Keep in mind that mod_wsgi dis-\nsys.stdout sys.stderr\nallows doing anything with and . You can disable this\noff\nprotectionfromtheconfigbysettingtheWSGIRestrictStdoutto :\nWSGIRestrictStdout Off\nAlternativelyyoucanalsoreplacethestandardoutinthe.wsgifilewithadiffer-\nentstream:\nimport sys\nsys.stdout = sys.stderr\n171\nProblem: accessingresourcesgivesIOerrors Your application probably is a single\n.py file you symlinked into the site-packages folder. Please be aware that this\ndoesnotwork,insteadyoueitherhavetoputthefolderintothepythonpaththe\nfileisstoredin,orconvertyourapplicationintoapackage.\nThe reason for this is that for non-installed packages, the module filename is\nusedtolocatetheresourcesandforsymlinksthewrongfilenameispickedup.\n21.1.5 Support for Automatic Reloading\nTohelpdeploymenttoolsyoucanactivatesupportforautomaticreloading. Whenever\nsomethingchangesthe.wsgifile,mod_wsgiwillreloadallthedaemonprocessesforus.\nForthat,justaddthefollowingdirectivetoyourDirectorysection:\nWSGIScriptReloading On\n21.1.6 Working with Virtual Environments\nVirtual environments have the advantage that they never install the required depen-\ndencies system wide so you have a better control over what is used where. If you\nwant to use a virtual environment with mod_wsgi you have to modify your .wsgi file\nslightly.\nAddthefollowinglinestothetopofyour.wsgifile:\nactivate_this = \u2019/path/to/env/bin/activate_this.py\u2019\nexecfile(activate_this, dict(__file__=activate_this))\nThis sets up the load paths according to the settings of the virtual environment. Keep\ninmindthatthepathhastobeabsolute.\n21.2 Standalone WSGI Containers\nTherearepopularserverswritteninPythonthatcontainWSGIapplicationsandserve\nHTTP. These servers stand alone when they run; you can proxy to them from your\nwebserver. NotethesectiononProxySetupsifyourunintoissues.\n21.2.1 Gunicorn\nGunicorn \u2018Green Unicorn\u2019 is a WSGI HTTP Server for UNIX. It\u2019s a pre-fork worker\nmodel ported from Ruby\u2019s Unicorn project. It supports both eventlet and greenlet.\nRunningaFlaskapplicationonthisserverisquitesimple:\ngunicorn myproject:app\n172\ngunicorn -h\nGunicorn provides many command-line options \u2013 see . For example, to\n-w 4\nrun a Flask application with 4 worker processes ( ) binding to localhost port 4000\n-b 127.0.0.1:4000\n( ):\ngunicorn -w 4 -b 127.0.0.1:4000 myproject:app\n21.2.2 Tornado\nTornado is an open source version of the scalable, non-blocking web server and tools\nthat power FriendFeed. Because it is non-blocking and uses epoll, it can handle thou-\nsandsofsimultaneousstandingconnections,whichmeansitisidealforreal-timeweb\nservices. IntegratingthisservicewithFlaskisstraightforward:\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\nfrom yourapplication import app\nhttp_server = HTTPServer(WSGIContainer(app))\nhttp_server.listen(5000)\nIOLoop.instance().start()\n21.2.3 Gevent\nGeventisacoroutine-basedPythonnetworkinglibrarythatusesgreenlettoprovidea\nhigh-levelsynchronousAPIontopoflibeventeventloop:\nfrom gevent.wsgi import WSGIServer\nfrom yourapplication import app\nhttp_server = WSGIServer((\u2019\u2019, 5000), app)\nhttp_server.serve_forever()\n21.2.4 Twisted Web\nTwisted Web is the web server shipped with Twisted, a mature, non-blocking event-\ndrivennetworkinglibrary. TwistedWebcomeswithastandardWSGIcontainerwhich\ntwistd\ncanbecontrolledfromthecommandlineusingthe utility:\ntwistd web --wsgi myproject.app\napp myproject\nThisexamplewillrunaFlaskapplicationcalled fromamodulenamed .\ntwistd\nTwistedWebsupportsmanyflagsandoptions,andthe utilitydoesaswell;see\ntwistd -h twistd web -h\nand for more information. For example, to run a Twisted\nmyproject\nWebserverintheforeground,onport8080,withanapplicationfrom :\n173\ntwistd -n web --port 8080 --wsgi myproject.app\n21.2.5 Proxy Setups\nIf you deploy your application using one of these servers behind an HTTP proxy\nyou will need to rewrite a few headers in order for the application to work. The\ntwo problematic values in the WSGI environment usually are REMOTE_ADDR and\nHTTP_HOST.Youcanconfigureyourhttpdtopasstheseheaders,oryoucanfixthem\nin middleware. Werkzeug ships a fixer that will solve some common setups, but you\nmightwanttowriteyourownWSGImiddlewareforspecificsetups.\nHere\u2019s a simple nginx configuration which proxies to an application served on local-\nhostatport8000,settingappropriateheaders:\nserver {\nlisten 80;\nserver_name _;\naccess_log /var/log/nginx/access.log;\nerror_log /var/log/nginx/error.log;\nlocation / {\nproxy_pass http://127.0.0.1:8000/;\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n}\nIfyourhttpdisnotprovidingtheseheaders,themostcommonsetupinvokesthehost\nbeingsetfromX-Forwarded-HostandtheremoteaddressfromX-Forwarded-For:\nfrom werkzeug.contrib.fixers import ProxyFix\napp.wsgi_app = ProxyFix(app.wsgi_app)\nTrustingHeaders\nPleasekeepinmindthatitisasecurityissuetousesuchamiddlewareinanon-proxy\nsetup because it will blindly trust the incoming headers which might be forged by\nmaliciousclients.\nIfyouwanttorewritetheheadersfromanotherheader,youmightwanttouseafixer\nlikethis:\nclass CustomProxyFix(object):\ndef __init__(self, app):\n174\nself.app = app\ndef __call__(self, environ, start_response):\nhost = environ.get(\u2019HTTP_X_FHOST\u2019, \u2019\u2019)\nif host:\nenviron[\u2019HTTP_HOST\u2019] = host\nreturn self.app(environ, start_response)\napp.wsgi_app = CustomProxyFix(app.wsgi_app)\n21.3 uWSGI\nuWSGI is a deployment option on servers like nginx, lighttpd, and cherokee; see\nFastCGI and Standalone WSGI Containers for other options. To use your WSGI appli-\ncation with uWSGI protocol you will need a uWSGI server first. uWSGI is both a\nprotocol and an application server; the application server can serve uWSGI, FastCGI,\nandHTTPprotocols.\nThemostpopularuWSGIserverisuwsgi,whichwewilluseforthisguide. Makesure\ntohaveitinstalledtofollowalong.\nWatchOut\napp.run()\nPleasemakesureinadvancethatany callsyoumighthaveinyourapplica-\nif __name__ == \u2019__main__\u2019:\ntion file are inside an block or moved to a separate file.\nJust make sure it\u2019s not called because this will always start a local WSGI server which\nwedonotwantifwedeploythatapplicationtouWSGI.\n21.3.1 Starting your app with uwsgi\nuwsgiisdesignedtooperateonWSGIcallablesfoundinpythonmodules.\nGivenaflaskapplicationinmyapp.py,usethefollowingcommand:\n$ uwsgi -s /tmp/uwsgi.sock --module myapp --callable app\nOr,ifyouprefer:\n$ uwsgi -s /tmp/uwsgi.sock -w myapp:app\n21.3.2 Configuring nginx\nAbasicflaskuWSGIconfigurationfornginxlookslikethis:\nlocation = /yourapplication { rewrite ^ /yourapplication/; }\nlocation /yourapplication { try_files $uri @yourapplication; }\n175\nlocation @yourapplication {\ninclude uwsgi_params;\nuwsgi_param SCRIPT_NAME /yourapplication;\nuwsgi_modifier1 30;\nuwsgi_pass unix:/tmp/uwsgi.sock;\n}\nThisconfigurationbindstheapplicationto/yourapplication. Ifyouwanttohaveitinthe\nURL root it\u2019s a bit simpler because you don\u2019t have to tell it the WSGI SCRIPT_NAME\norsettheuwsgimodifiertomakeuseofit:\nlocation / { try_files $uri @yourapplication; }\nlocation @yourapplication {\ninclude uwsgi_params;\nuwsgi_pass unix:/tmp/uwsgi.sock;\n}\n21.4 FastCGI\nFastCGI is a deployment option on servers like nginx, lighttpd, and cherokee; see\nuWSGI and Standalone WSGI Containers for other options. To use your WSGI applica-\ntion with any of them you will need a FastCGI server first. The most popular one is\nflupwhichwewilluseforthisguide. Makesuretohaveitinstalledtofollowalong.\nWatchOut\napp.run()\nPleasemakesureinadvancethatany callsyoumighthaveinyourapplica-\nif __name__ == \u2019__main__\u2019:\ntion file are inside an block or moved to a separate file.\nJust make sure it\u2019s not called because this will always start a local WSGI server which\nwedonotwantifwedeploythatapplicationtoFastCGI.\n21.4.1 Creating a .fcgi file\nFirstyouneedtocreatetheFastCGIserverfile. Let\u2019scallityourapplication.fcgi:\n#!/usr/bin/python\nfrom flup.server.fcgi import WSGIServer\nfrom yourapplication import app\nif __name__ == \u2019__main__\u2019:\nWSGIServer(app).run()\nThisisenoughforApachetowork,howevernginxandolderversionsoflighttpdneed\na socket to be explicitly passed to communicate with the FastCGI server. For that to\nWSGIServer\nworkyouneedtopassthepathtothesockettothe :\n176\nWSGIServer(application, bindAddress=\u2019/path/to/fcgi.sock\u2019).run()\nThepathhastobetheexactsamepathyoudefineintheserverconfig.\nSave the yourapplication.fcgi file somewhere you will find it again. It makes sense to\nhavethatin/var/www/yourapplicationorsomethingsimilar.\nMakesuretosettheexecutablebitonthatfilesothattheserverscanexecuteit:\n# chmod +x /var/www/yourapplication/yourapplication.fcgi\n21.4.2 Configuring Apache\nThe example above is good enough for a basic Apache deployment but your .fcgi file\nwill appear in your application URL e.g. example.com/yourapplication.fcgi/news/.\nTherearefewwaystoconfigureyourapplicationsothatyourapplication.fcgidoesnot\nappear in the URL. A preferable way is to use the ScriptAlias and SetHandler config-\nurationdirectivestorouterequeststotheFastCGIserver. Thefollowingexampleuses\nFastCgiServer to start 5 instances of the application which will handle all incoming\nrequests:\nLoadModule fastcgi_module /usr/lib64/httpd/modules/mod_fastcgi.so\nFastCgiServer /var/www/html/yourapplication/app.fcgi -idle-timeout 300 -processes 5\n<VirtualHost *>\nServerName webapp1.mydomain.com\nDocumentRoot /var/www/html/yourapplication\nAddHandler fastcgi-script fcgi\nScriptAlias / /var/www/html/yourapplication/app.fcgi/\n<Location />\nSetHandler fastcgi-script\n</Location>\n</VirtualHost>\nThese processes will be managed by Apache. If you\u2019re using an standalone FastCGI\nserver, you can use the FastCgiExternalServer directive instead. Note that in the fol-\nlowing the path is not real, it\u2019s simply used as an identifier to other directives such as\nAliasMatch:\nFastCgiServer /var/www/html/yourapplication -host 127.0.0.1:3000\nIf you cannot set ScriptAlias, for example on an shared web host, you can use WSGI\nmiddlewaretoremoveyourapplication.fcgifromtheURLs. Set.htaccess:\n<IfModule mod_fcgid.c>\nAddHandler fcgid-script .fcgi\n<Files ~ (\\.fcgi)>\nSetHandler fcgid-script\n177\nOptions +FollowSymLinks +ExecCGI\n</Files>\n</IfModule>\n<IfModule mod_rewrite.c>\nOptions +FollowSymlinks\nRewriteEngine On\nRewriteBase /\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ yourapplication.fcgi/$1 [QSA,L]\n</IfModule>\nSetyourapplication.fcgi:\n#!/usr/bin/python\n#: optional path to your local python site-packages folder\nimport sys\nsys.path.insert(0, \u2019<your_local_path>/lib/python2.6/site-packages\u2019)\nfrom flup.server.fcgi import WSGIServer\nfrom yourapplication import app\nclass ScriptNameStripper(object):\ndef __init__(self, app):\nself.app = app\ndef __call__(self, environ, start_response):\nenviron[\u2019SCRIPT_NAME\u2019] = \u2019\u2019\nreturn self.app(environ, start_response)\napp = ScriptNameStripper(app)\nif __name__ == \u2019__main__\u2019:\nWSGIServer(app).run()\n21.4.3 Configuring lighttpd\nAbasicFastCGIconfigurationforlighttpdlookslikethat:\nfastcgi.server = (\"/yourapplication.fcgi\" =>\n((\n\"socket\" => \"/tmp/yourapplication-fcgi.sock\",\n\"bin-path\" => \"/var/www/yourapplication/yourapplication.fcgi\",\n\"check-local\" => \"disable\",\n\"max-procs\" => 1\n))\n)\nalias.url = (\n\"/static/\" => \"/path/to/your/static\"\n178\n)\nurl.rewrite-once = (\n\"^(/static($|/.*))$\" => \"$1\",\n\"^(/.*)$\" => \"/yourapplication.fcgi$1\"\n)\nRemembertoenabletheFastCGI,aliasandrewritemodules. Thisconfigurationbinds\ntheapplicationto/yourapplication. IfyouwanttheapplicationtoworkintheURLroot\nLighttpdCGIRootFix\nyouhavetoworkaroundalighttpdbugwiththe middleware.\nMake sure to apply it only if you are mounting the application the URL root. Also,\nsee the Lighty docs for more information on FastCGI and Python (note that explicitly\npassingasockettorun()isnolongernecessary).\n21.4.4 Configuring nginx\nInstalling FastCGI applications on nginx is a bit different because by default no\nFastCGIparametersareforwarded.\nAbasicflaskFastCGIconfigurationfornginxlookslikethis:\nlocation = /yourapplication { rewrite ^ /yourapplication/ last; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\ninclude fastcgi_params;\nfastcgi_split_path_info ^(/yourapplication)(.*)$;\nfastcgi_param PATH_INFO $fastcgi_path_info;\nfastcgi_param SCRIPT_NAME $fastcgi_script_name;\nfastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n}\nThis configuration binds the application to /yourapplication. If you want to have it in\nthe URL root it\u2019s a bit simpler because you don\u2019t have to figure out how to calculate\nPATH_INFOandSCRIPT_NAME:\nlocation / { try_files $uri @yourapplication; }\nlocation @yourapplication {\ninclude fastcgi_params;\nfastcgi_param PATH_INFO $fastcgi_script_name;\nfastcgi_param SCRIPT_NAME \"\";\nfastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n}\n21.4.5 Running FastCGI Processes\nSinceNginxandothersdonotloadFastCGIapps,youhavetodoitbyyourself. Super-\nvisor can manage FastCGI processes. You can look around for other FastCGI process\ninit.d\nmanagersorwriteascripttorunyour.fcgifileatboot,e.g. usingaSysV script.\n179\n.fcgi\nForatemporarysolution,youcanalwaysrunthe scriptinsideGNUscreen. See\nman screen\nfor details, and note that this is a manual solution which does not persist\nacrosssystemrestart:\n$ screen\n$ /var/www/yourapplication/yourapplication.fcgi\n21.4.6 Debugging\nFastCGI deployments tend to be hard to debug on most webservers. Very often the\nonly thing the server log tells you is something along the lines of \u201cpremature end of\nheaders\u201d. In order to debug the application the only thing that can really give you\nideas why it breaks is switching to the correct user and executing the application by\nhand.\nThis example assumes your application is called application.fcgi and that your web-\nserveruseriswww-data:\n$ su www-data\n$ cd /var/www/yourapplication\n$ python application.fcgi\nTraceback (most recent call last):\nFile \"yourapplication.fcgi\", line 4, in <module>\nImportError: No module named yourapplication\nIn this case the error seems to be \u201cyourapplication\u201d not being on the python path.\nCommonproblemsare:\n\u2022 Relativepathsbeingused. Don\u2019trelyonthecurrentworkingdirectory\n\u2022 Thecodedependingonenvironmentvariablesthatarenotsetbythewebserver.\n\u2022 Differentpythoninterpretersbeingused.\n21.5 CGI\nIf all other deployment methods do not work, CGI will work for sure. CGI is sup-\nportedbyallmajorserversbutusuallyhasasub-optimalperformance.\nThis is also the way you can use a Flask application on Google\u2019s App Engine, where\nexecutionhappensinaCGI-likeenvironment.\nWatchOut\napp.run()\nPleasemakesureinadvancethatany callsyoumighthaveinyourapplica-\nif __name__ == \u2019__main__\u2019:\ntion file are inside an block or moved to a separate file.\nJust make sure it\u2019s not called because this will always start a local WSGI server which\nwedonotwantifwedeploythatapplicationtoCGI/appengine.\n180\nprint\nWith CGI, you will also have to make sure that your code does not contain any\nsys.stdout\nstatements, or that is overridden by something that doesn\u2019t write into the\nHTTPresponse.\n21.5.1 Creating a .cgi file\nFirstyouneedtocreatetheCGIapplicationfile. Let\u2019scallityourapplication.cgi:\n#!/usr/bin/python\nfrom wsgiref.handlers import CGIHandler\nfrom yourapplication import app\nCGIHandler().run(app)\n21.5.2 Server Setup\nUsually there are two ways to configure the server. Either just copy the .cgi into a\ncgi-bin (and use mod_rewrite or something similar to rewrite the URL) or let the server\npointtothefiledirectly.\nInApacheforexampleyoucanputsomethinglikethisintotheconfig:\nScriptAlias /app /path/to/the/application.cgi\nOn shared webhosting, though, you might not have access to your Apache config. In\nthis case, a file called .htaccess, sitting in the public directory you want your app to be\navailable,workstoobuttheScriptAliasdirectivewon\u2019tworkinthatcase:\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f # Don\u2019t interfere with static files\nRewriteRule ^(.*)$ /path/to/the/application.cgi/$1 [L]\nFormoreinformationconsultthedocumentationofyourwebserver.\n181\n182\n22\nCHAPTER\nBecoming Big\nHereareyouroptionswhengrowingyourcodebaseorscalingyourapplication.\n22.1 Read the Source.\nFlask started in part to demonstrate how to build your own framework on top of ex-\nistingwell-usedtoolsWerkzeug(WSGI)andJinja(templating),andasitdeveloped,it\nbecame useful to a wide audience. As you grow your codebase, don\u2019t just use Flask\n\u2013 understand it. Read the source. Flask\u2019s code is written to be read; it\u2019s documenta-\ntion published so you can use its internal APIs. Flask sticks to documented APIs in\nupstream libraries, and documents its internal utilities so that you can find the hook\npointsneededforyourproject.\n22.2 Hook. Extend.\nTheAPIdocsarefullofavailableoverrides,hookpoints,andSignals. Youcanprovide\ncustom classes for things like the request and response objects. Dig deeper on the\nAPIs you use, and look for the customizations which are available out of the box in a\nFlask release. Look for ways in which your project can be refactored into a collection\nof utilities and Flask extensions. Explore the many extensions in the community, and\nlookforpatternstobuildyourownextensionsifyoudonotfindthetoolsyouneed.\n22.3 Subclass.\nFlask\nThe class has many methods designed for subclassing. You can quickly add or\nFlask\ncustomize behavior by subclassing (see the linked method docs) and using that\nsubclass wherever you instantiate an application class. This works well with Applica-\ntionFactories.\n183\n22.4 Wrap with middleware.\nThe Application Dispatching chapter shows in detail how to apply middleware. You\ncanintroduceWSGImiddlewaretowrapyourFlaskinstancesandintroducefixesand\nchangesatthelayerbetweenyourFlaskapplicationandyourHTTPserver. Werkzeug\nincludesseveralmiddlewares.\n22.5 Fork.\nIf none of the above options work, fork Flask. The majority of code of Flask is within\nWerkzeugandJinja2. Theselibrariesdothemajorityofthework. Flaskisjustthepaste\nthat glues those together. For every project there is the point where the underlying\nframework gets in the way (due to assumptions the original developers had). This is\nnaturalbecauseifthiswouldnotbethecase,theframeworkwouldbeaverycomplex\nsystemtobeginwithwhichcausesasteeplearningcurveandalotofuserfrustration.\nThis is not unique to Flask. Many people use patched and modified versions of their\nframework to counter shortcomings. This idea is also reflected in the license of Flask.\nYoudon\u2019thavetocontributeanychangesbackifyoudecidetomodifytheframework.\nThe downside of forking is of course that Flask extensions will most likely break be-\ncause the new framework has a different import name. Furthermore integrating up-\nstream changes can be a complex process, depending on the number of changes. Be-\ncauseofthat,forkingshouldbetheverylastresort.\n22.6 Scale like a pro.\nFormanywebapplicationsthecomplexityofthecodeislessanissuethanthescaling\nforthenumberofusersordataentriesexpected. Flaskbyitselfisonlylimitedinterms\nof scaling by your application code, the data store you want to use and the Python\nimplementationandwebserveryouarerunningon.\nScalingwellmeansforexamplethatifyoudoubletheamountofserversyougetabout\ntwicetheperformance. Scalingbadmeansthatifyouaddanewservertheapplication\nwon\u2019tperformanybetterorwouldnotevensupportasecondserver.\nThereisonlyonelimitingfactorregardingscalinginFlaskwhicharethecontextlocal\nproxies. They depend on context which in Flask is defined as being either a thread,\nprocess or greenlet. If your server uses some kind of concurrency that is not based\non threads or greenlets, Flask will no longer be able to support these global proxies.\nHowever the majority of servers are using either threads, greenlets or separate pro-\ncessestoachieveconcurrencywhichareallmethodswellsupportedbytheunderlying\nWerkzeuglibrary.\n184\n22.7 Discuss with the community.\nThe Flask developers keep the framework accessible to users with codebases big and\nsmall. If you find an obstacle in your way, caused by Flask, don\u2019t hesitate to contact\nthedevelopersonthemailinglistorIRCchannel. ThebestwayfortheFlaskandFlask\nextension developers to improve the tools for larger applications is getting feedback\nfromusers.\n185\n186\nPart II\nAPI REFERENCE\nIf you are looking for information on a specific function, class or method, this part of\nthedocumentationisforyou.\n187\n188\n23\nCHAPTER\nAPI\nThispartofthedocumentationcoversalltheinterfacesofFlask. ForpartswhereFlask\ndependsonexternallibraries,wedocumentthemostimportantrighthereandprovide\nlinkstothecanonicaldocumentation.\n23.1 Application Object\nclass\nflask.Flask(\nimport_name, static_path=None, static_url_path=None,\nstatic_folder=\u2019static\u2019, template_folder=\u2019templates\u2019, in-\nstance_path=None, instance_relative_config=False,\n)\nroot_path=None\nThe flask object implements a WSGI application and acts as the central object.\nIt is passed the name of the module or package of the application. Once it is\ncreated it will act as a central registry for the view functions, the URL rules,\ntemplateconfigurationandmuchmore.\nThe name of the package is used to resolve resources from inside the package\nor the folder the module is contained in depending on if the package parameter\nresolves to an actual python package (a folder with an __init__.py file inside) or\nastandardmodule(justa.pyfile).\nopen_resource()\nFormoreinformationaboutresourceloading,see .\nFlask\nUsually you create a instance in your main module or in the __init__.py\nfileofyourpackagelikethis:\nfrom flask import Flask\napp = Flask(__name__)\nAbouttheFirstParameter\nThe idea of the first parameter is to give Flask an idea what belongs to your\napplication. This name is used to find resources on the file system, can be used\nbyextensionstoimprovedebugginginformationandalotmore.\n189\nSo it\u2019s important what you provide there. If you are using a single module,\n__name__ is always the correct value. If you however are using a package, it\u2019s\nusuallyrecommendedtohardcodethenameofyourpackagethere.\nFor example if your application is defined in yourapplication/app.py you should\ncreateitwithoneofthetwoversionsbelow:\napp = Flask(\u2019yourapplication\u2019)\napp = Flask(__name__.split(\u2019.\u2019)[0])\nWhy is that? The application will work even with __name__, thanks to how re-\nsources are looked up. However it will make debugging more painful. Certain\nextensionscanmakeassumptionsbasedontheimportnameofyourapplication.\nFor example the Flask-SQLAlchemy extension will look for the code in your ap-\nplication that triggered an SQL query in debug mode. If the import name is not\nproperly set up, that debugging information is lost. (For example it would only\npickupSQLqueriesinyourapplication.appandnotyourapplication.views.frontend)\nNew in version 0.7: The static_url_path, static_folder, and template_folder parame-\nterswereadded.\nNew in version 0.8: The instance_path and instance_relative_config parameters\nwereadded.\nNewinversion1.0: Theroot_pathparameterwasadded.\nParameters\n\u2022 import_name\u2013thenameoftheapplicationpackage\n\u2022 static_url_path \u2013 can be used to specify a different path\nfor the static files on the web. Defaults to the name of the\nstatic_folderfolder.\n\u2022 static_folder \u2013 the folder with static files that should be\n\u2019static\u2019\nserved at static_url_path. Defaults to the folder in the\nrootpathoftheapplication.\n\u2022 template_folder \u2013 the folder that contains the templates that\n\u2019templates\u2019\nshould be used by the application. Defaults to\nfolderintherootpathoftheapplication.\n\u2022 instance_path \u2013 An alternative instance path for the applica-\n\u2019instance\u2019\ntion. By default the folder next to the package or\nmoduleisassumedtobetheinstancepath.\n\u2022 instance_relative_config\u2013ifsettoTruerelativefilenamesfor\nloading the config are assumed to be relative to the instance\npathinsteadoftheapplicationroot.\n\u2022 root_path \u2013 Flask by default will automatically calculate the\npath to the root of the application. In certain situations this\ncannot be achieved (for instance if the package is a Python 3\nnamespacepackage)andneedstobemanuallydefined.\n190\nadd_template_filter(\n*args,**kwargs\n)\ntemplate_filter()\nRegisteracustomtemplatefilter. Worksexactlylikethe\ndecorator.\nParameters name \u2013 the optional name of the filter, otherwise the\nfunctionnamewillbeused.\nadd_template_global(\n*args,**kwargs\n)\nRegister a custom template global function. Works exactly like the\ntemplate_global()\ndecorator.\nNewinversion0.10.\nParameters name \u2013 the optional name of the global function, other-\nwisethefunctionnamewillbeused.\nadd_template_test(\n*args,**kwargs\n)\ntemplate_test()\nRegister a custom template test. Works exactly like the\ndecorator.\nNewinversion0.10.\nParameters name \u2013 the optional name of the test, otherwise the\nfunctionnamewillbeused.\nadd_url_rule(\n*args,**kwargs\n)\nroute()\nConnects a URL rule. Works exactly like the decorator. If a\nview_funcisprovideditwillberegisteredwiththeendpoint.\nBasicallythisexample:\n@app.route(\u2019/\u2019)\ndef index():\npass\nIsequivalenttothefollowing:\ndef index():\npass\napp.add_url_rule(\u2019/\u2019, \u2019index\u2019, index)\nIf the view_func is not provided you will need to connect the endpoint to a\nviewfunctionlikeso:\napp.view_functions[\u2019index\u2019] = index\nroute() add_url_rule()\nInternally invokes so if you want to customize the\nbehaviorviasubclassingyouonlyneedtochangethismethod.\nFormoreinformationrefertoURLRouteRegistrations.\nChangedinversion0.2: view_funcparameteradded.\nChangedinversion0.6: OPTIONSisaddedautomaticallyasmethod.\nParameters\n191\n\u2022 rule\u2013theURLruleasstring\n\u2022 endpoint \u2013 the endpoint for the registered URL rule. Flask\nitselfassumesthenameoftheviewfunctionasendpoint\n\u2022 view_func\u2013thefunctiontocallwhenservingarequesttothe\nprovidedendpoint\n\u2022 options\u2013theoptionstobeforwardedtotheunderlying Rule\nobject. AchangetoWerkzeugishandlingofmethodoptions.\nmethods is a list of methods this rule should be limited to\n(GET, POST etc.). By default a rule just listens for GET (and\nimplicitly HEAD). Starting with Flask 0.6, OPTIONS is im-\nplicitlyaddedandhandledbythestandardrequesthandling.\nafter_request(\n*args,**kwargs\n)\nRegisterafunctiontoberunaftereachrequest.\nresponse_class\nYour function must take one parameter, an instance of and\nprocess_response()\nreturnanewresponseobjectorthesame(see ).\nAsofFlask0.7thisfunctionmightnotbeexecutedattheendoftherequest\nincaseanunhandledexceptionoccurred.\nafter_request_funcs=None\nA dictionary with lists of functions that should be called after each request.\nThekeyofthedictionaryisthenameoftheblueprintthisfunctionisactive\nfor, None for all requests. This can for example be used to open database\nconnections or getting hold of the currently logged in user. To register a\nafter_request()\nfunctionhere,usethe decorator.\napp_context()\nBinds the application only. For as long as the application is bound to the\nflask.current_app\ncurrentcontextthe pointstothatapplication. Anappli-\ncation context is automatically created when a request context is pushed if\nnecessary.\nExampleusage:\nwith app.app_context():\n...\nNewinversion0.9.\napp_ctx_globals_class\ng\nTheclassthatisusedforthe instance.\nExampleusecasesforacustomclass:\n1.Storearbitraryattributesonflask.g.\n2.Addapropertyforlazyper-requestdatabaseconnectors.\n3.ReturnNoneinsteadofAttributeErroronexpectedattributes.\n4.Raiseexceptionifanunexpectedattrisset,a\u201ccontrolled\u201dflask.g.\n192\nInFlask0.9thispropertywascalledrequest_globals_classbutitwaschanged\napp_ctx_globals_class\nin 0.10 to because the flask.g object is now applica-\ntioncontextscoped.\nNewinversion0.10.\n_AppCtxGlobals\naliasof\nauto_find_instance_path()\nTries to locate the instance path if it was not provided to the constructor of\nthe application class. It will basically calculate the path to a folder named\ninstance\nnexttoyourmainfileorthepackage.\nNewinversion0.8.\nbefore_first_request(\n*args,**kwargs\n)\nRegisters a function to be run before the first request to this instance of the\napplication.\nNewinversion0.8.\nbefore_first_request_funcs=None\nAlistsoffunctionsthatshouldbecalledatthebeginningofthefirstrequest\nbefore_first_request()\ntothisinstance. Toregisterafunctionhere,usethe\ndecorator.\nNewinversion0.8.\nbefore_request(\n*args,**kwargs\n)\nRegistersafunctiontorunbeforeeachrequest.\nbefore_request_funcs=None\nA dictionary with lists of functions that should be called at the beginning\nof the request. The key of the dictionary is the name of the blueprint this\nfunction is active for, None for all requests. This can for example be used to\nopen database connections or getting hold of the currently logged in user.\nbefore_request()\nToregisterafunctionhere,usethe decorator.\nblueprints=None\nall the attached blueprints in a dictionary by name. Blueprints can be at-\ntached multiple times so this dictionary does not tell you how often they\ngotattached.\nNewinversion0.7.\ncli=None\nThe click command line context for this application. Commands registered\nflask\nhere show up in the command once the application has been dis-\ncovered. The default commands are provided by Flask itself and can be\noverridden.\nclick.Group\nThisisaninstanceofa object.\nconfig=None\nConfig\nThe configuration dictionary as . This behaves exactly like a regular\n193\ndictionarybutsupportsadditionalmethodstoloadaconfigfromfiles.\nconfig_class\nconfig Config\nTheclassthatisusedforthe attributeofthisapp. Defaultsto .\nExampleusecasesforacustomclass:\n1.Defaultvaluesforcertainconfigoptions.\n2.Accesstoconfigvaluesthroughattributesinadditiontokeys.\nNewinversion1.0.\nConfig\naliasof\ncontext_processor(\n*args,**kwargs\n)\nRegistersatemplatecontextprocessorfunction.\ncreate_global_jinja_loader()\nCreates the loader for the Jinja2 environment. Can be used to override just\ntheloaderandkeepingtherestunchanged. It\u2019sdiscouragedtooverridethis\njinja_loader()\nfunction. Insteadoneshouldoverridethe functioninstead.\nThegloballoaderdispatchesbetweentheloadersoftheapplicationandthe\nindividualblueprints.\nNewinversion0.7.\ncreate_jinja_environment()\njinja_options\nCreates the Jinja2 environment based on and\nselect_jinja_autoescape()\n. Since 0.7 this also adds the Jinja2 globals\nand filters after initialization. Override this function to customize the\nbehavior.\nNewinversion0.5.\nEnvironment.auto_reload\nChanged in version 1.0: set in accordance with\nTEMPLATES_AUTO_RELOAD\nconfigurationoption.\ncreate_url_adapter(\nrequest\n)\nCreates a URL adapter for the given request. The URL adapter is created at\na point where the request context is not yet set up so the request is passed\nexplicitly.\nNewinversion0.6.\nChangedinversion0.9: Thiscannowalsobecalledwithoutarequestobject\nwhentheURLadapteriscreatedfortheapplicationcontext.\ndebug\nThe debug flag. Set this to True to enable debugging of the application.\nIn debug mode the debugger will kick in when an unhandled exception\noccursandtheintegratedserverwillautomaticallyreloadtheapplicationif\nchangesinthecodearedetected.\nThis attribute can also be configured from the config with the DEBUG con-\nfigurationkey. DefaultstoFalse.\n194\ndebug_log_format=\u2018\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\\n%(levelname)sin%(module)s[%(pathname)s:%(lineno)d]:\\n%(message)s\\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013\u2018\nThe logging format used for the debug logger. This is only used when the\napplication is in debug mode, otherwise the attached logging handler does\ntheformatting.\nNewinversion0.3.\ndefault_config=ImmutableDict({\u2018JSON_AS_ASCII\u2019:True,\u2018USE_X_SENDFILE\u2019:False,\u2018SESSION_COOKIE_PATH\u2019:None,\u2018SESSION_COOKIE_DOMAIN\u2019:None,\u2018SESSION_COOKIE_NAME\u2019:\u2018session\u2019,\u2018DEBUG\u2019:False,\u2018LOGGER_NAME\u2019:None,\u2018SESSION_COOKIE_SECURE\u2019:False,\u2018SECRET_KEY\u2019:None,\u2018MAX_CONTENT_LENGTH\u2019:None,\u2018PROPAGATE_EXCEPTIONS\u2019:None,\u2018APPLICATION_ROOT\u2019:None,\u2018SERVER_NAME\u2019:None,\u2018PREFERRED_URL_SCHEME\u2019:\u2018http\u2019,\u2018JSONIFY_PRETTYPRINT_REGULAR\u2019:True,\u2018TESTING\u2019:False,\u2018PERMANENT_SESSION_LIFETIME\u2019:datetime.timedelta(31),\u2018TEMPLATES_AUTO_RELOAD\u2019:True,\u2018TRAP_BAD_REQUEST_ERRORS\u2019:False,\u2018JSON_SORT_KEYS\u2019:True,\u2018SESSION_COOKIE_HTTPONLY\u2019:True,\u2018SEND_FILE_MAX_AGE_DEFAULT\u2019:43200,\u2018PRESERVE_CONTEXT_ON_EXCEPTION\u2019:None,\u2018SESSION_REFRESH_EACH_REQUEST\u2019:True,\u2018TRAP_HTTP_EXCEPTIONS\u2019:False})\nDefaultconfigurationparameters.\ndispatch_request()\nDoes the request dispatching. Matches the URL and returns the return\nvalue of the view or error handler. This does not have to be a response\nobject. In order to convert the return value to a proper response object, call\nmake_response()\n.\nChanged in version 0.7: This no longer does the exception handling, this\nfull_dispatch_request()\ncodewasmovedtothenew .\ndo_teardown_appcontext(\nexc=None\n)\nCalled when an application context is popped. This works pretty much the\ndo_teardown_request()\nsameas butfortheapplicationcontext.\nNewinversion0.9.\ndo_teardown_request(\nexc=None\n)\nCalled after the actual request dispatching and will call every as\nteardown_request()\ndecorated function. This is not actually called by\nFlask\nthe object itself but is always triggered when the request context is\npopped. That way we have a tighter control over certain resources under\ntestingenvironments.\nChanged in version 0.9: Added the exc argument. Previously this was al-\nwaysusingthecurrentexceptioninformation.\nenable_modules=True\nEnable the deprecated module support? This is active by default in 0.7 but\nwill be changed to False in 0.8. With Flask 1.0 modules will be removed in\nfavorofBlueprints\nendpoint(\n*args,**kwargs\n)\nAdecoratortoregisterafunctionasanendpoint. Example:\n@app.endpoint(\u2019example.endpoint\u2019)\ndef example():\nreturn \"example\"\nParameters endpoint\u2013thenameoftheendpoint\nerror_handler_spec=None\nA dictionary of all registered error handlers. The key is None for error\nhandlers active on the application, otherwise the key is the name of the\nblueprint. Eachkeypointstoanotherdictionarywherethekeyisthestatus\n195\ncode of the http exception. The special key None points to a list of tuples\nwhere the first item is the class for the instance check and the second the\nerrorhandlerfunction.\nerrorhandler()\nToregisteraerrorhandler,usethe decorator.\nerrorhandler(\n*args,**kwargs\n)\nA decorator that is used to register a function give a given error code. Ex-\nample:\n@app.errorhandler(404)\ndef page_not_found(error):\nreturn \u2019This page does not exist\u2019, 404\nYoucanalsoregisterhandlersforarbitraryexceptions:\n@app.errorhandler(DatabaseError)\ndef special_exception_handler(error):\nreturn \u2019Database connection failed\u2019, 500\nYou can also register a function as error handler without using the\nerrorhandler()\ndecorator. The following example is equivalent to the one\nabove:\ndef page_not_found(error):\nreturn \u2019This page does not exist\u2019, 404\napp.error_handler_spec[None][404] = page_not_found\nerror_handler_spec\nSetting error handlers via assignments to however is\ndiscouraged as it requires fiddling with nested dictionaries and the special\ncaseforarbitraryexceptiontypes.\nThe first None refers to the active blueprint. If the error handler should be\napplicationwideNoneshallbeused.\nregister_error_handler()\nNew in version 0.7: Use instead of modifying\nerror_handler_spec\ndirectly,forapplicationwideerrorhandlers.\nNew in version 0.7: One can now additionally also register custom excep-\nHTTPException\ntiontypesthatdonotnecessarilyhavetobeasubclassofthe\nclass.\nParameters code\u2013thecodeasintegerforthehandler\nextensions=None\na place where extensions can store application specific state. For exam-\nple this is where an extension could store database engines and similar\nthings. For backwards compatibility extensions should register themselves\nlikethis:\nif not hasattr(app, \u2019extensions\u2019):\napp.extensions = {}\napp.extensions[\u2019extensionname\u2019] = SomeObject()\n196\nThekeymustmatchthenameoftheextensionmodule. Forexampleincase\n\u2019foo\u2019\nofa\u201cFlask-Foo\u201dextensioninflask_foo,thekeywouldbe .\nNewinversion0.7.\nfull_dispatch_request()\nDispatches the request and on top of that performs request pre and post-\nprocessingaswellasHTTPexceptioncatchinganderrorhandling.\nNewinversion0.7.\nget_send_file_max_age(\nfilename\n)\nsend_file()\nProvidesdefaultcache_timeoutforthe functions.\nSEND_FILE_MAX_AGE_DEFAULT\nBy default, this function returns from the con-\ncurrent_app\nfigurationof .\nsend_from_directory()\nStatic file functions such as use this function,\nsend_file() current_app\nand calls this function on when the given\nsend_file()\ncache_timeout is None. If a cache_timeout is given in , that\ntimeoutisused;otherwise,thismethodiscalled.\nThis allows subclasses to change the behavior when sending files based on\nthefilename. Forexample,tosetthecachetimeoutfor.jsfilesto60seconds:\nclass MyFlask(flask.Flask):\ndef get_send_file_max_age(self, name):\nif name.lower().endswith(\u2019.js\u2019):\nreturn 60\nreturn flask.Flask.get_send_file_max_age(self, name)\nNewinversion0.9.\ngot_first_request\nThis attribute is set to True if the application started handling the first re-\nquest.\nNewinversion0.8.\nhandle_exception(\ne\n)\nDefault exception handling that kicks in when an exception occurs that is\nnotcaught. Indebugmodetheexceptionwillbere-raisedimmediately,oth-\nerwise it is logged and the handler for a 500 internal server error is used. If\nno such handler exists, a default 500 internal server error message is dis-\nplayed.\nNewinversion0.3.\nhandle_http_exception(\ne\n)\nHandlesanHTTPexception. Bydefaultthiswillinvoketheregisterederror\nhandlersandfallbacktoreturningtheexceptionasresponse.\nNewinversion0.3.\nhandle_url_build_error(\nerror,endpoint,values\n)\nBuildError url_for()\nHandle on .\n197\nhandle_user_exception(\ne\n)\nThismethodiscalledwheneveranexceptionoccursthatshouldbehandled.\nHTTPException\nA special case are s which are forwarded by this function to\nhandle_http_exception()\nthe method. This function will either return a\nresponsevalueorreraisetheexceptionwiththesametraceback.\nNewinversion0.7.\nhas_static_folder\nThis is True if the package bound object\u2019s container has a folder named\n\u2019static\u2019\n.\nNewinversion0.5.\ninit_jinja_globals()\nDeprecated. UsedtoinitializetheJinja2globals.\nNewinversion0.5.\nChanged in version 0.7: This method is deprecated with 0.7. Override\ncreate_jinja_environment()\ninstead.\ninject_url_defaults(\nendpoint,values\n)\nInjects the URL defaults for the given endpoint directly into the values dic-\ntionary passed. This is used internally and automatically called on URL\nbuilding.\nNewinversion0.7.\ninstance_path=None\nHoldsthepathtotheinstancefolder.\nNewinversion0.8.\njinja_env\nTheJinja2environmentusedtoloadtemplates.\njinja_loader\nTheJinjaloaderforthispackageboundobject.\nNewinversion0.5.\njinja_options=ImmutableDict({\u2018extensions\u2019: [\u2019jinja2.ext.autoescape\u2019,\u2018jinja2.ext.with_\u2019]})\nOptionsthatarepasseddirectlytotheJinja2environment.\njson_decoder\nJSONDecoder\nTheJSONdecoderclasstouse. Defaultsto .\nNewinversion0.10.\nJSONDecoder\naliasof\njson_encoder\nJSONEncoder\nTheJSONencoderclasstouse. Defaultsto .\nNewinversion0.10.\nJSONEncoder\naliasof\n198\nlog_exception(\nexc_info\n)\nhandle_exception()\nLogs an exception. This is called by if debugging is\ndisabledandrightbeforethehandleriscalled. Thedefaultimplementation\nlogger\nlogstheexceptionaserroronthe .\nNewinversion0.8.\nlogger\nlogging.Logger\nA objectforthisapplication. Thedefaultconfigurationisto\nlog to stderr if the application is in debug mode. This logger can be used to\n(surprise)logmessages. Heresomeexamples:\napp.logger.debug(\u2019A value for debugging\u2019)\napp.logger.warning(\u2019A warning occurred (%d apples)\u2019, 42)\napp.logger.error(\u2019An error occurred\u2019)\nNewinversion0.3.\nlogger_name\nThe name of the logger to use. By default the logger name is the package\nnamepassedtotheconstructor.\nNewinversion0.4.\nmake_config(\ninstance_relative=False\n)\nUsed to create the config attribute by the Flask constructor. The in-\nstance_relative parameter is passed in from the constructor of Flask (there\nnamedinstance_relative_config)andindicatesiftheconfigshouldberelative\ntotheinstancepathortherootpathoftheapplication.\nNewinversion0.8.\nmake_default_options_response()\nThis method is called to create the default OPTIONS response. This can be\nchanged through subclassing to change the default behavior of OPTIONS\nresponses.\nNewinversion0.7.\nmake_null_session()\nCreates a new instance of a missing session. Instead of overriding this\nsession_interface\nmethodwerecommendreplacingthe .\nNewinversion0.7.\nmake_response(\nrv\n)\nConvertsthereturnvaluefromaviewfunctiontoarealresponseobjectthat\nresponse_class\nisaninstanceof .\nThefollowingtypesareallowedforrv:\n199\nresponse_class\ntheobjectisreturnedunchanged\nstr\naresponseobjectiscreatedwiththestringasbody\nunicode\naresponseobjectiscreatedwiththestringencoded\ntoutf-8asbody\naWSGIfunction the function is called as WSGI application and\nbufferedasresponseobject\ntuple (response, status, headers)\nA tuple in the form\n(response, headers)\nor where response is any of\nthe types defined here, status is a string or an inte-\nger and headers is a list or a dictionary with header\nvalues.\nParameters rv\u2013thereturnvaluefromtheviewfunction\nChangedinversion0.9: Previouslyatuplewasinterpretedasthearguments\nfortheresponseobject.\nmake_shell_context()\nReturns the shell context for an interactive shell for this application. This\nrunsalltheregisteredshellcontextprocessors.\nNewinversion1.0.\nname\nThe name of the application. This is usually the import name with the dif-\nference that it\u2019s guessed from the run file if the import name is main. This\nname is used as a display name when Flask needs the name of the applica-\ntion. Itcanbesetandoverriddentochangethevalue.\nNewinversion0.8.\nopen_instance_resource(\nresource,mode=\u2019rb\u2019\n)\ninstance_path\nOpens a resource from the application\u2019s instance folder ( ).\nopen_resource()\nOtherwise works like . Instance resources can also be\nopenedforwriting.\nParameters\n\u2022 resource \u2013 the name of the resource. To access resources\nwithinsubfoldersuseforwardslashesasseparator.\n\u2022 mode\u2013resourcefileopeningmode,defaultis\u2018rb\u2019.\nopen_resource(\nresource,mode=\u2019rb\u2019\n)\nOpens a resource from the application\u2019s resource folder. To see how this\nworks,considerthefollowingfolderstructure:\n/myapplication.py\n/schema.sql\n/static\n/style.css\n/templates\n200\n/layout.html\n/index.html\nIfyouwanttoopentheschema.sqlfileyouwoulddothefollowing:\nwith app.open_resource(\u2019schema.sql\u2019) as f:\ncontents = f.read()\ndo_something_with(contents)\nParameters\n\u2022 resource \u2013 the name of the resource. To access resources\nwithinsubfoldersuseforwardslashesasseparator.\n\u2022 mode\u2013resourcefileopeningmode,defaultis\u2018rb\u2019.\nopen_session(\nrequest\n)\nCreates or opens a new session. Default implementation stores all session\nsecret_key\ndata in a signed cookie. This requires that the is set. Instead of\nsession_interface\noverridingthismethodwerecommendreplacingthe .\nParameters request\u2013aninstanceof request_class .\npermanent_session_lifetime\ntimedelta\nA whichisusedtosettheexpirationdateofapermanentsession.\nThedefaultis31dayswhichmakesapermanentsessionsurviveforroughly\nonemonth.\nThis attribute can also be configured from the config with the\nPERMANENT_SESSION_LIFETIME configuration key. Defaults to\ntimedelta(days=31)\npreprocess_request()\nCalled before the actual request dispatching and will call every as\nbefore_request()\ndecorated function. If any of these function returns a\nvalue it\u2019s handled as if it was the return value from the view and further\nrequesthandlingisstopped.\nurl_value_processor()\nThis also triggers the functions before the actual\nbefore_request()\nfunctionsarecalled.\npreserve_context_on_exception\nReturnsthevalueofthePRESERVE_CONTEXT_ON_EXCEPTIONconfigu-\nrationvalueincaseit\u2019sset,otherwiseasensibledefaultisreturned.\nNewinversion0.7.\nprocess_response(\nresponse\n)\nCan be overridden in order to modify the response object before it\u2019s sent to\nafter_request()\ntheWSGIserver. Bydefaultthiswillcallallthe decorated\nfunctions.\nChanged in version 0.5: As of Flask 0.5 the functions registered for after\nrequestexecutionarecalledinreverseorderofregistration.\n201\nParameters response\u2013a response_class object.\nReturns anewresponseobjectorthesame,hastobeaninstanceof\nresponse_class\n.\npropagate_exceptions\nReturns the value of the PROPAGATE_EXCEPTIONS configuration value\nincaseit\u2019sset,otherwiseasensibledefaultisreturned.\nNewinversion0.7.\nregister_blueprint(\n*args,**kwargs\n)\nRegistersablueprintontheapplication.\nNewinversion0.7.\nregister_error_handler(\ncode_or_exception,f\n)\nerrorhandler()\nAlternative error attach function to the decorator that is\nmorestraightforwardtousefornondecoratorusage.\nNewinversion0.7.\nregister_module(\nmodule,**options\n)\nRegisters a module with this application. The keyword arguments of this\nModule\nfunctionarethesameastheonesfortheconstructorofthe classand\nwilloverridethevaluesofthemoduleifprovided.\nChangedinversion0.7: Themodulesystemwasdeprecatedinfavorforthe\nblueprintsystem.\nrequest_class\nRequest\nTheclassthatisusedforrequestobjects. See formoreinformation.\nRequest\naliasof\nrequest_context(\nenviron\n)\nRequestContext\nCreates a from the given environment and binds it to the\ncurrent context. This must be used in combination with the with statement\nbecause the request is only bound to the current context for the duration of\nthewithblock.\nExampleusage:\nwith app.request_context(environ):\ndo_something_with(request)\nThe object returned can also be used without the with statement which is\nuseful for working in the shell. The example above is doing exactly the\nsameasthiscode:\nctx = app.request_context(environ)\nctx.push()\ntry:\ndo_something_with(request)\nfinally:\nctx.pop()\n202\nChanged in version 0.3: Added support for non-with statement usage and\nwithstatementisnowpassedthectxobject.\nParameters environ\u2013aWSGIenvironment\nresponse_class\nResponse\nThe class that is used for response objects. See for more informa-\ntion.\nResponse\naliasof\nroute(\nrule,**options\n)\nA decorator that is used to register a view function for a given URL rule.\nadd_url_rule()\nThis does the same thing as but is intended for decorator\nusage:\n@app.route(\u2019/\u2019)\ndef index():\nreturn \u2019Hello World\u2019\nFormoreinformationrefertoURLRouteRegistrations.\nParameters\n\u2022 rule\u2013theURLruleasstring\n\u2022 endpoint \u2013 the endpoint for the registered URL rule. Flask\nitselfassumesthenameoftheviewfunctionasendpoint\n\u2022 options\u2013theoptionstobeforwardedtotheunderlying Rule\nobject. AchangetoWerkzeugishandlingofmethodoptions.\nmethods is a list of methods this rule should be limited to\n(GET, POST etc.). By default a rule just listens for GET (and\nimplicitly HEAD). Starting with Flask 0.6, OPTIONS is im-\nplicitlyaddedandhandledbythestandardrequesthandling.\nrun(\nhost=None,port=None,debug=None,**options\n)\ndebug\nRuns the application on a local development server. If the flag is set\ntheserverwillautomaticallyreloadforcodechangesandshowadebugger\nincaseanexceptionhappened.\nIf you want to run the application in debug mode, but disable the code ex-\nuse_evalex=False\necution on the interactive debugger, you can pass as pa-\nrameter. This will keep the debugger\u2019s traceback screen active, but disable\ncodeexecution.\nItisnotrecommendedtousethisfunctionfordevelopmentwithautomatic\nflask\nreloadingasthisisbadlysupported. Insteadyoushouldbeusingthe\nrunserver\ncommandlinescript\u2019s support.\nKeepinMind\nFlask will suppress any server error with a generic error page unless it\nis in debug mode. As such to enable just the interactive debugger with-\nrun() debug=True\nout the code reloading, you have to invoke with and\n203\nuse_reloader=False use_debugger\n. Setting to True without being in debug\nmodewon\u2019tcatchanyexceptionsbecausetherewon\u2019tbeanytocatch.\nChanged in version 0.10: The default port is now picked from the\nSERVER_NAME\nvariable.\nParameters\n\u2022 host \u2013 the hostname to listen on. Set this to \u20190.0.0.0\u2019 to\nhave the server available externally as well. Defaults to\n\u2019127.0.0.1\u2019\n.\n\u2022 port \u2013 the port of the webserver. Defaults to 5000 or the port\nSERVER_NAME\ndefinedinthe configvariableifpresent.\n\u2022 debug\u2013ifgiven,enableordisabledebugmode. See debug .\n\u2022 options \u2013 the options to be forwarded to the underlying\nwerkzeug.serving.run_simple()\nWerkzeug server. See for\nmoreinformation.\nsave_session(\nsession,response\n)\nSavesthesessionifitneedsupdates. Forthedefaultimplementation,check\nopen_session()\n. Instead of overriding this method we recommend replac-\nsession_interface\ningthe .\nParameters\n\u2022 session\u2013thesessiontobesaved(a SecureCookie object)\n\u2022 response\u2013aninstanceof response_class\nsecret_key\nIf a secret key is set, cryptographic components can use this to sign cookies\nandotherthings. Setthistoacomplexrandomvaluewhenyouwanttouse\nthesecurecookieforinstance.\nThisattributecanalsobeconfiguredfromtheconfigwiththeSECRET_KEY\nconfigurationkey. DefaultstoNone.\nselect_jinja_autoescape(\nfilename\n)\nReturnsTrueifautoescapingshouldbeactiveforthegiventemplatename.\nNewinversion0.5.\nsend_static_file(\nfilename\n)\nFunction used internally to send static files from the static folder to the\nbrowser.\nNewinversion0.5.\nsession_cookie_name\nThesecurecookieusesthisforthenameofthesessioncookie.\nThis attribute can also be configured from the config with the SES-\n\u2019session\u2019\nSION_COOKIE_NAMEconfigurationkey. Defaultsto\n204\nsession_interface=<flask.sessions.SecureCookieSessionInterfaceobject>\nthe session interface to use. By default an instance of\nSecureCookieSessionInterface\nisusedhere.\nNewinversion0.8.\nshell_context_processor(\n*args,**kwargs\n)\nRegistersashellcontextprocessorfunction.\nNewinversion1.0.\nshell_context_processors=None\nA list of shell context processor functions that should be run when a shell\ncontextiscreated.\nNewinversion1.0.\nshould_ignore_error(\nerror\n)\nThis is called to figure out if an error should be ignored or not as far as\nthe teardown system is concerned. If this function returns True then the\nteardownhandlerswillnotbepassedtheerror.\nNewinversion0.10.\nteardown_appcontext(\n*args,**kwargs\n)\nRegisters a function to be called when the application context ends. These\nfunctionsaretypicallyalsocalledwhentherequestcontextispopped.\nExample:\nctx = app.app_context()\nctx.push()\n...\nctx.pop()\nctx.pop()\nWhen is executed in the above example, the teardown functions\nare called just before the app context moves from the stack of active con-\ntexts. Thisbecomesrelevantifyouareusingsuchconstructsintests.\nSince a request context typically also manages an application context it\nwouldalsobecalledwhenyoupoparequestcontext.\nWhen a teardown function was called because of an exception it will be\npassedanerrorobject.\nNewinversion0.9.\nteardown_appcontext_funcs=None\nAlistoffunctionsthatarecalledwhentheapplicationcontextisdestroyed.\nSincetheapplicationcontextisalsotorndowniftherequestendsthisisthe\nplacetostorecodethatdisconnectsfromdatabases.\nNewinversion0.9.\nteardown_request(\n*args,**kwargs\n)\nRegister a function to be run at the end of each request, regardless of\n205\nwhether there was an exception or not. These functions are executed when\ntherequestcontextispopped,evenifnotanactualrequestwasperformed.\nExample:\nctx = app.test_request_context()\nctx.push()\n...\nctx.pop()\nctx.pop()\nWhen is executed in the above example, the teardown functions\narecalledjustbeforetherequestcontextmovesfromthestackofactivecon-\ntexts. Thisbecomesrelevantifyouareusingsuchconstructsintests.\nGenerally teardown functions must take every necessary step to avoid that\nthey will fail. If they do execute code that might fail they will have to sur-\nround the execution of these code by try/except statements and log occur-\nringerrors.\nWhen a teardown function was called because of a exception it will be\npassedanerrorobject.\nDebugNote\nIn debug mode Flask will not tear down a request on an exception\nimmediately. Instead if will keep it alive so that the interactive de-\nbugger can still access it. This behavior can be controlled by the\nPRESERVE_CONTEXT_ON_EXCEPTION\nconfigurationvariable.\nteardown_request_funcs=None\nA dictionary with lists of functions that are called after each request, even\nif an exception has occurred. The key of the dictionary is the name of\nthe blueprint this function is active for, None for all requests. These func-\ntions are not allowed to modify the request, and their return values are ig-\nnored. If an exception occurred while processing the request, it gets passed\nto each teardown_request function. To register a function here, use the\nteardown_request()\ndecorator.\nNewinversion0.7.\ntemplate_context_processors=None\nAdictionarywithlistoffunctionsthatarecalledwithoutargumenttopop-\nulate the template context. The key of the dictionary is the name of the\nblueprint this function is active for, None for all requests. Each returns a\ndictionary that the template context is updated with. To register a function\ncontext_processor()\nhere,usethe decorator.\ntemplate_filter(\n*args,**kwargs\n)\nAdecoratorthatisusedtoregistercustomtemplatefilter. Youcanspecifya\nnameforthefilter,otherwisethefunctionnamewillbeused. Example:\n206\n@app.template_filter()\ndef reverse(s):\nreturn s[::-1]\nParameters name \u2013 the optional name of the filter, otherwise the\nfunctionnamewillbeused.\ntemplate_global(\n*args,**kwargs\n)\nA decorator that is used to register a custom template global function. You\ncanspecifyanamefortheglobalfunction,otherwisethefunctionnamewill\nbeused. Example:\n@app.template_global()\ndef double(n):\nreturn 2 * n\nNewinversion0.10.\nParameters name \u2013 the optional name of the global function, other-\nwisethefunctionnamewillbeused.\ntemplate_test(\n*args,**kwargs\n)\nA decorator that is used to register custom template test. You can specify a\nnameforthetest,otherwisethefunctionnamewillbeused. Example:\n@app.template_test()\ndef is_prime(n):\nif n == 2:\nreturn True\nfor i in range(2, int(math.ceil(math.sqrt(n))) + 1):\nif n % i == 0:\nreturn False\nreturn True\nNewinversion0.10.\nParameters name \u2013 the optional name of the test, otherwise the\nfunctionnamewillbeused.\ntest_client(\nuse_cookies=True\n)\nCreates a test client for this application. For information about unit testing\nheadovertoTestingFlaskApplications.\nNote that if you are testing for assertions or exceptions in your application\napp.testing = True\ncode,youmustset inorderfortheexceptionstoprop-\nagate to the test client. Otherwise, the exception will be handled by the\napplication (not visible to the test client) and the only indication of an As-\nsertionErrororotherexceptionwillbea500statuscoderesponsetothetest\ntesting\nclient. Seethe attribute. Forexample:\napp.testing = True\nclient = app.test_client()\n207\nThe test client can be used in a with block to defer the closing down of the\ncontext until the end of the with block. This is useful if you want to access\nthecontextlocalsfortesting:\nwith app.test_client() as c:\nrv = c.get(\u2019/?vodka=42\u2019)\nassert request.args[\u2019vodka\u2019] == \u201942\u2019\nFlaskClient\nSee formoreinformation.\nChangedinversion0.4: addedsupportforwithblockusagefortheclient.\nNew in version 0.7: The use_cookies parameter was added as well as the\ntest_client_class\nability to override the client to be used by setting the\nattribute.\ntest_client_class=None\nthetestclientthatisusedwithwhentest_clientisused.\nNewinversion0.7.\ntest_request_context(\n*args,**kwargs\n)\nCreates a WSGI environment from the given values (see\nwerkzeug.test.EnvironBuilder\nfor more information, this function ac-\nceptsthesamearguments).\ntesting\nThe testing flag. Set this to True to enable the test mode of Flask extensions\n(andinthefutureprobablyalsoFlaskitself). Forexamplethismightactivate\nunittest helpers that have an additional runtime cost which should not be\nenabledbydefault.\nIf this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\ndefaultit\u2019simplicitlyenabled.\nThisattributecanalsobeconfiguredfromtheconfigwiththeTESTINGcon-\nfigurationkey. DefaultstoFalse.\ntrap_http_exception(\ne\n)\nChecks if an HTTP exception should be trapped or not. By default\nthis will return False for all exceptions except for a bad request key er-\nTRAP_BAD_REQUEST_ERRORS\nror if is set to True. It also returns True if\nTRAP_HTTP_EXCEPTIONS\nissettoTrue.\nThisiscalledforallHTTPexceptionsraisedbyaviewfunction. Ifitreturns\nTrue for any exception the error handler for this exception is not called and\nitshowsupasregularexceptioninthetraceback. Thisishelpfulfordebug-\ngingimplicitlyraisedHTTPexceptions.\nNewinversion0.8.\nupdate_template_context(\ncontext\n)\nUpdate the template context with some commonly used variables. This in-\njectsrequest,session,configandgintothetemplatecontextaswellasevery-\nthing template context processors want to inject. Note that the as of Flask\n208\n0.6, the original values in the context will not be overridden if a context\nprocessordecidestoreturnavaluewiththesamekey.\nParameters context\u2013thecontextasadictionarythatisupdatedin\nplacetoaddextravariables.\nurl_build_error_handlers=None\nurl_for() BuildError\nAlistoffunctionsthatarecalledwhen raisesa . Each\nfunctionregisteredhereiscalledwitherror,endpointandvalues. Ifafunction\nreturnsNoneorraisesaBuildErrorthenextfunctionistried.\nNewinversion0.9.\nurl_default_functions=None\nA dictionary with lists of functions that can be used as URL value prepro-\ncessors. ThekeyNonehereisusedforapplicationwidecallbacks,otherwise\nthe key is the name of the blueprint. Each of these functions has the chance\nto modify the dictionary of URL values before they are used as the key-\nword argumentsof theview function. Foreach functionregistered thisone\nurl_defaults()\nshould also provide a function that adds the parameters\nautomaticallyagainthatwereremovedthatway.\nNewinversion0.7.\nurl_defaults(\n*args,**kwargs\n)\nCallback function for URL defaults for all view functions of the applica-\ntion. It\u2019scalledwiththeendpointandvaluesandshouldupdatethevalues\npassedinplace.\nurl_map=None\nMap\nThe for this instance. You can use this to change the routing converters\naftertheclasswascreatedbutbeforeanyroutesareconnected. Example:\nfrom werkzeug.routing import BaseConverter\nclass ListConverter(BaseConverter):\ndef to_python(self, value):\nreturn value.split(\u2019,\u2019)\ndef to_url(self, values):\nreturn \u2019,\u2019.join(BaseConverter.to_url(value)\nfor value in values)\napp = Flask(__name__)\napp.url_map.converters[\u2019list\u2019] = ListConverter\nurl_rule_class\nadd_url_rule()\nTheruleobjecttouseforURLrulescreated. Thisisusedby .\nwerkzeug.routing.Rule\nDefaultsto .\nNewinversion0.7.\nRule\naliasof\nurl_value_preprocessor(\n*args,**kwargs\n)\n209\nRegistersafunctionasURLvaluepreprocessorforallviewfunctionsofthe\napplication. It\u2019s called before the view functions are called and can modify\ntheurlvaluesprovided.\nurl_value_preprocessors=None\nAdictionarywithlistsoffunctionsthatcanbeusedasURLvalueprocessor\nfunctions. Whenever a URL is built these functions are called to modify\nthe dictionary of values in place. The key None here is used for application\nwidecallbacks,otherwisethekeyisthenameoftheblueprint. Eachofthese\nfunctionshasthechancetomodifythedictionary\nNewinversion0.7.\nuse_x_sendfile\nEnable this if you want to use the X-Sendfile feature. Keep in mind that the\nsend_file()\nserver has to support this. This only affects files sent with the\nmethod.\nNewinversion0.2.\nThis attribute can also be configured from the config with the\nUSE_X_SENDFILEconfigurationkey. DefaultstoFalse.\nview_functions=None\nA dictionary of all view functions registered. The keys will be function\nnameswhicharealsousedtogenerateURLsandthevaluesarethefunction\nroute()\nobjectsthemselves. Toregisteraviewfunction,usethe decorator.\nwsgi_app(\nenviron,start_response\n)\nThe actual WSGI application. This is not implemented in __call__ so that\nmiddlewares can be applied without losing a reference to the class. So in-\nsteadofdoingthis:\napp = MyMiddleware(app)\nIt\u2019sabetterideatodothisinstead:\napp.wsgi_app = MyMiddleware(app.wsgi_app)\nThenyoustillhavetheoriginalapplicationobjectaroundandcancontinue\ntocallmethodsonit.\nChanged in version 0.7: The behavior of the before and after request call-\nbacks was changed under error conditions and a new callback was added\nthatwillalwaysexecuteattheendoftherequest,independentonifanerror\noccurredornot. SeeCallbacksandErrors.\nParameters\n\u2022 environ\u2013aWSGIenvironment\n\u2022 start_response \u2013 a callable accepting a status code, a list\nof headers and an optional exception context to start the re-\nsponse\n210\n23.2 Blueprint Objects\nclass\nflask.Blueprint(\nname, import_name, static_folder=None,\nstatic_url_path=None, template_folder=None,\nurl_prefix=None, subdomain=None, url_defaults=None,\n)\nroot_path=None\nRepresents a blueprint. A blueprint is an object that records functions that will\nBlueprintSetupState\nbecalledwiththe latertoregisterfunctionsorotherthings\non the main application. See Modular Applications with Blueprints for more infor-\nmation.\nNewinversion0.7.\nadd_app_template_filter(\nf,name=None\n)\nRegister a custom template filter, available application wide. Like\nFlask.add_template_filter()\nbut for a blueprint. Works exactly like the\napp_template_filter()\ndecorator.\nParameters name \u2013 the optional name of the filter, otherwise the\nfunctionnamewillbeused.\nadd_app_template_global(\nf,name=None\n)\nRegister a custom template global, available application wide. Like\nFlask.add_template_global()\nbut for a blueprint. Works exactly like the\napp_template_global()\ndecorator.\nNewinversion0.10.\nParameters name \u2013 the optional name of the global, otherwise the\nfunctionnamewillbeused.\nadd_app_template_test(\nf,name=None\n)\nRegister a custom template test, available application wide. Like\nFlask.add_template_test()\nbut for a blueprint. Works exactly like the\napp_template_test()\ndecorator.\nNewinversion0.10.\nParameters name \u2013 the optional name of the test, otherwise the\nfunctionnamewillbeused.\nadd_url_rule(\nrule,endpoint=None,view_func=None,**options\n)\nFlask.add_url_rule()\nLike but for a blueprint. The endpoint for the\nurl_for()\nfunctionisprefixedwiththenameoftheblueprint.\nafter_app_request(\nf\n)\nFlask.after_request()\nLike butforablueprint. Suchafunctionisexecuted\naftereachrequest,evenifoutsideoftheblueprint.\nafter_request(\nf\n)\nFlask.after_request()\nLike but for a blueprint. This function is only exe-\ncutedaftereachrequestthatishandledbyafunctionofthatblueprint.\n211\napp_context_processor(\nf\n)\nFlask.context_processor()\nLike but for a blueprint. Such a function is ex-\necutedeachrequest,evenifoutsideoftheblueprint.\napp_errorhandler(\ncode\n)\nFlask.errorhandler()\nLike but for a blueprint. This handler is used for all\nrequests,evenifoutsideoftheblueprint.\napp_template_filter(\nname=None\n)\nRegister a custom template filter, available application wide. Like\nFlask.template_filter()\nbutforablueprint.\nParameters name \u2013 the optional name of the filter, otherwise the\nfunctionnamewillbeused.\napp_template_global(\nname=None\n)\nRegister a custom template global, available application wide. Like\nFlask.template_global()\nbutforablueprint.\nNewinversion0.10.\nParameters name \u2013 the optional name of the global, otherwise the\nfunctionnamewillbeused.\napp_template_test(\nname=None\n)\nRegister a custom template test, available application wide. Like\nFlask.template_test()\nbutforablueprint.\nNewinversion0.10.\nParameters name \u2013 the optional name of the test, otherwise the\nfunctionnamewillbeused.\napp_url_defaults(\nf\n)\nurl_defaults()\nSameas butapplicationwide.\napp_url_value_preprocessor(\nf\n)\nurl_value_preprocessor()\nSameas butapplicationwide.\nbefore_app_first_request(\nf\n)\nFlask.before_first_request()\nLike . Suchafunctionisexecutedbeforethe\nfirstrequesttotheapplication.\nbefore_app_request(\nf\n)\nFlask.before_request()\nLike . Such a function is executed before each re-\nquest,evenifoutsideofablueprint.\nbefore_request(\nf\n)\nFlask.before_request()\nLike butforablueprint. Thisfunctionisonlyexe-\ncutedbeforeeachrequestthatishandledbyafunctionofthatblueprint.\ncontext_processor(\nf\n)\nFlask.context_processor()\nLike but for a blueprint. This function is only\nexecutedforrequestshandledbyablueprint.\n212\nendpoint(\nendpoint\n)\nFlask.endpoint()\nLike but for a blueprint. This does not prefix the end-\npoint with the blueprint name, this has to be done explicitly by the user of\nthis method. If the endpoint is prefixed with a . it will be registered to the\ncurrentblueprint,otherwiseit\u2019sanapplicationindependentendpoint.\nerrorhandler(\ncode_or_exception\n)\nRegistersanerrorhandlerthatbecomesactiveforthisblueprintonly. Please\nbe aware that routing does not happen local to a blueprint so an error han-\ndler for 404 usually is not handled by a blueprint unless it is caused inside\na view function. Another special case is the 500 internal server error which\nisalwayslookedupfromtheapplication.\nerrorhandler() Flask\nOtherwiseworksasthe decoratorofthe object.\nget_send_file_max_age(\nfilename\n)\nsend_file()\nProvidesdefaultcache_timeoutforthe functions.\nSEND_FILE_MAX_AGE_DEFAULT\nBy default, this function returns from the con-\ncurrent_app\nfigurationof .\nsend_from_directory()\nStatic file functions such as use this function,\nsend_file() current_app\nand calls this function on when the given\nsend_file()\ncache_timeout is None. If a cache_timeout is given in , that\ntimeoutisused;otherwise,thismethodiscalled.\nThis allows subclasses to change the behavior when sending files based on\nthefilename. Forexample,tosetthecachetimeoutfor.jsfilesto60seconds:\nclass MyFlask(flask.Flask):\ndef get_send_file_max_age(self, name):\nif name.lower().endswith(\u2019.js\u2019):\nreturn 60\nreturn flask.Flask.get_send_file_max_age(self, name)\nNewinversion0.9.\nhas_static_folder\nThis is True if the package bound object\u2019s container has a folder named\n\u2019static\u2019\n.\nNewinversion0.5.\njinja_loader\nTheJinjaloaderforthispackageboundobject.\nNewinversion0.5.\nmake_setup_state(\napp,options,first_registration=False\n)\nBlueprintSetupState()\nCreates an instance of object that is later passed to\nthe register callback functions. Subclasses can override this to return a sub-\nclassofthesetupstate.\nopen_resource(\nresource,mode=\u2019rb\u2019\n)\nOpens a resource from the application\u2019s resource folder. To see how this\n213\nworks,considerthefollowingfolderstructure:\n/myapplication.py\n/schema.sql\n/static\n/style.css\n/templates\n/layout.html\n/index.html\nIfyouwanttoopentheschema.sqlfileyouwoulddothefollowing:\nwith app.open_resource(\u2019schema.sql\u2019) as f:\ncontents = f.read()\ndo_something_with(contents)\nParameters\n\u2022 resource \u2013 the name of the resource. To access resources\nwithinsubfoldersuseforwardslashesasseparator.\n\u2022 mode\u2013resourcefileopeningmode,defaultis\u2018rb\u2019.\nrecord(\nfunc\n)\nRegisters a function that is called when the blueprint is registered on the\napplication. This function is called with the state as argument as returned\nmake_setup_state()\nbythe method.\nrecord_once(\nfunc\n)\nrecord()\nWorks like but wraps the function in another function that will\nensurethefunctionisonlycalledonce. Iftheblueprintisregisteredasecond\ntimeontheapplication,thefunctionpassedisnotcalled.\nregister(\napp,options,first_registration=False\n)\nFlask.register_blueprint()\nCalled by to register a blueprint on the ap-\nplication. This can be overridden to customize the register behavior. Key-\nregister_blueprint()\nwordargumentsfrom aredirectlyforwardedtothis\nmethodintheoptionsdictionary.\nregister_error_handler(\ncode_or_exception,f\n)\nerrorhandler()\nNon-decorator version of the error attach function, akin to\nregister_error_handler() Flask\nthe application-wide function of the ob-\njectbutforerrorhandlerslimitedtothisblueprint.\nNewinversion0.11.\nroute(\nrule,**options\n)\nFlask.route() url_for()\nLike but for a blueprint. The endpoint for the\nfunctionisprefixedwiththenameoftheblueprint.\nsend_static_file(\nfilename\n)\nFunction used internally to send static files from the static folder to the\nbrowser.\n214\nNewinversion0.5.\nteardown_app_request(\nf\n)\nFlask.teardown_request()\nLike but for a blueprint. Such a function is exe-\ncutedwhentearingdowneachrequest,evenifoutsideoftheblueprint.\nteardown_request(\nf\n)\nFlask.teardown_request()\nLike but for a blueprint. This function is\nonly executed when tearing down requests handled by a function of that\nblueprint. Teardown request functions are executed when the request con-\ntextispopped,evenwhennoactualrequestwasperformed.\nurl_defaults(\nf\n)\nCallback function for URL defaults for this blueprint. It\u2019s called with the\nendpointandvaluesandshouldupdatethevaluespassedinplace.\nurl_value_preprocessor(\nf\n)\nRegistersafunctionasURLvaluepreprocessorforthisblueprint. It\u2019scalled\nbeforetheviewfunctionsarecalledandcanmodifytheurlvaluesprovided.\n23.3 Incoming Request Data\nclass\nflask.Request(\nenviron,populate_request=True,shallow=False\n)\nThe request object used by default in Flask. Remembers the matched endpoint\nandviewarguments.\nrequest\nItiswhatendsupas . Ifyouwanttoreplacetherequestobjectusedyou\nrequest_class\ncansubclassthisandset toyoursubclass.\nRequest\nThe request object is a subclass and provides all of the attributes\nWerkzeugdefinesplusafewFlaskspecificones.\nform\nMultiDict\nA withtheparsedformdatafromPOST orPUT requests. Please\nfiles\nkeepinmindthatfileuploadswillnotenduphere,butinsteadinthe\nattribute.\nargs\nMultiDict\nA with the parsed contents of the query string. (The part in the\nURLafterthequestionmark).\nvalues\nCombinedMultiDict form args\nA withthecontentsofboth and .\ncookies\ndict\nA withthecontentsofallcookiestransmittedwiththerequest.\nstream\nIf the incoming form data was not encoded with a known mimetype the\ndata is stored unmodified in this stream for consumption. Most of the time\ndata\nit is a better idea to use which will give you that data as a string. The\nstreamonlyreturnsthedataonce.\n215\nheaders\nTheincomingrequestheadersasadictionarylikeobject.\ndata\nContains the incoming request data as string in case it came with a mime-\ntypeFlaskdoesnothandle.\nfiles\nMultiDict\nA with files uploaded as part of a POST or PUT request. Each\nFileStorage\nfile is stored as object. It basically behaves like a standard file\nsave()\nobject you know from Python, with the difference that it also has a\nfunctionthatcanstorethefileonthefilesystem.\nenviron\nTheunderlyingWSGIenvironment.\nmethod\nPOST GET\nThecurrentrequestmethod( , etc.)\npath\nscript_root\nurl\nbase_url\nurl_root\nProvides different ways to look at the current URL. Imagine your applica-\ntionislisteningonthefollowingURL:\nhttp://www.example.com/myapplication\nAndauserrequeststhefollowingURL:\nhttp://www.example.com/myapplication/page.html?x=y\nIn this case the values of the above mentioned attributes would be the fol-\nlowing:\n/page.html\npath\n/myapplication\nscript_root\nhttp://www.example.com/myapplication/page.html\nbase_url\nhttp://www.example.com/myapplication/page.html?x=y\nurl\nhttp://www.example.com/myapplication/\nurl_root\nis_xhr\nTrueiftherequestwastriggeredviaaJavaScriptXMLHttpRequest. Thisonly\nX-Requested-With\nworkswithlibrariesthatsupportthe headerandsetitto\nXMLHttpRequest. Librariesthatdothatareprototype,jQueryandMochikit\nandprobablysomemore.\nblueprint\nThenameofthecurrentblueprint\n216\nendpoint\nview_args\nTheendpointthatmatchedtherequest. Thisincombinationwith\ncan be used to reconstruct the same or a modified URL. If an exception\nhappenedwhenmatching,thiswillbeNone.\nget_json(\nforce=False,silent=False,cache=True\n)\nParses the incoming JSON request data and returns it. If parsing fails the\non_json_loading_failed()\nmethod on the request object will be invoked.\nBy default this function will only load the json data if the mimetype is\napplication/json\nbutthiscanbeoverriddenbytheforceparameter.\nParameters\n\u2022 force\u2013ifsettoTruethemimetypeisignored.\n\u2022 silent\u2013ifsettoTruethismethodwillfailsilentlyandreturn\nNone.\n\u2022 cache \u2013 if set to True the parsed JSON data is remembered on\ntherequest.\nis_json\nIndicates if this request is JSON or not. By default a request is con-\napplication/json\nsidered to include JSON data if the mimetype is or\napplication/*+json\n.\nNewinversion0.11.\njson\nIf the mimetype is application/json this will contain the parsed JSON data.\nOtherwisethiswillbeNone.\nget_json()\nThe methodshouldbeusedinstead.\nmax_content_length\nRead-onlyviewoftheMAX_CONTENT_LENGTH configkey.\nmodule\nThe name of the current module if the request was dispatched to an actual\nmodule. Thisisdeprecatedfunctionality,useblueprintsinstead.\non_json_loading_failed(\ne\n)\nCalledifdecodingoftheJSONdatafailed. Thereturnvalueofthismethod\nget_json()\nisusedby whenanerroroccurred. Thedefaultimplementation\nBadRequest\njustraisesa exception.\nChanged in version 0.10: Removed buggy previous behavior of generating\na random JSON response. If you want that behavior back you can trivially\nadditbysubclassing.\nNewinversion0.8.\nrouting_exception=None\nIf matching the URL failed, this is the exception that will be raised / was\n217\nNotFound\nraised as part of the request handling. This is usually a exception\norsomethingsimilar.\nurl_rule=None\nThe internal URL rule that matched the request. This can be useful to in-\nspect which methods are allowed for the URL from a before/after handler\nrequest.url_rule.methods\n( )etc.\nNewinversion0.6.\nview_args=None\nA dict of view arguments that matched the request. If an exception hap-\npenedwhenmatching,thiswillbeNone.\nclass\nflask.request\nTo access incoming request data, you can use the global request object. Flask\nparses incoming request data for you and gives you access to it through that\nglobal object. Internally Flask makes sure that you always get the correct data\nfortheactivethreadifyouareinamultithreadedenvironment.\nThisisaproxy. SeeNotesOnProxiesformoreinformation.\nRequest\nThe request object is an instance of a subclass and provides all of the\nattributes Werkzeug defines. This just shows a quick overview of the most im-\nportantones.\n23.4 Response Objects\nclass\nflask.Response(\nresponse=None, status=None, headers=None, mime-\n)\ntype=None,content_type=None,direct_passthrough=False\nThe response object that is used by default in Flask. Works like the response\nobject from Werkzeug but is set to have an HTML mimetype by default. Quite\nmake_response()\noften you don\u2019t have to create this object yourself because will\ntakecareofthatforyou.\nIf you want to replace the response object used you can subclass this and set\nresponse_class\ntoyoursubclass.\nheaders\nHeaders\nA objectrepresentingtheresponseheaders.\nstatus\nAstringwitharesponsestatus.\nstatus_code\nTheresponsestatusasinteger.\ndata\nget_data() set_data()\nAdescriptorthatcalls and . Thisshouldnotbeused\nandwilleventuallygetdeprecated.\n218\nmimetype\nThemimetype(contenttypewithoutcharsetetc.)\nset_cookie(\nkey, value=\u2019\u2018, max_age=None, expires=None, path=\u2019/\u2019, do-\n)\nmain=None,secure=None,httponly=False\nSets a cookie. The parameters are the same as in the cookie Morsel object in\nthePythonstandardlibrarybutitacceptsunicodedata,too.\nParameters\n\u2022 key\u2013thekey(name)ofthecookietobeset.\n\u2022 value\u2013thevalueofthecookie.\n\u2022 max_age \u2013 should be a number of seconds, or None (default)\nif the cookie should last only as long as the client\u2019s browser\nsession.\n\u2022 expires\u2013shouldbeadatetimeobjectorUNIXtimestamp.\n\u2022 domain \u2013 if you want to set a cross-domain cookie. For exam-\ndomain=\".example.com\"\nple, will set a cookie that is readable\nwww.example.com foo.example.com\nby the domain , etc. Oth-\nerwise, a cookie will only be readable by the domain that set\nit.\n\u2022 path \u2013 limits the cookie to a given path, per default it will\nspanthewholedomain.\n23.5 Sessions\nFlask.secret_key\nIf you have the set you can use sessions in Flask applications. A\nsession basically makes it possible to remember information from one request to an-\nother. The way Flask does this is by using a signed cookie. So the user can look at the\nsession contents, but not modify it unless they know the secret key, so make sure to\nsetthattosomethingcomplexandunguessable.\nsession\nToaccessthecurrentsessionyoucanusethe object:\nclass\nflask.session\nThe session object works pretty much like an ordinary dict, with the difference\nthatitkeepstrackonmodifications.\nThisisaproxy. SeeNotesOnProxiesformoreinformation.\nThefollowingattributesareinteresting:\nnew\nTrueifthesessionisnew,Falseotherwise.\nmodified\nTrue if the session object detected a modification. Be advised that modifica-\n219\ntionsonmutablestructuresarenotpickedupautomatically,inthatsituation\nyouhavetoexplicitlysettheattributetoTrueyourself. Hereanexample:\n# this change is not picked up because a mutable object (here\n# a list) is changed.\nsession[\u2019objects\u2019].append(42)\n# so mark it as modified yourself\nsession.modified = True\npermanent\npermanent_session_lifetime\nIfsettoTruethesessionlivesfor seconds. The\ndefault is 31 days. If set to False (which is the default) the session will be\ndeletedwhentheuserclosesthebrowser.\n23.6 Session Interface\nNewinversion0.8.\nThesessioninterfaceprovidesasimplewaytoreplacethesessionimplementationthat\nFlaskisusing.\nclass\nflask.sessions.SessionInterface\nThebasicinterfaceyouhavetoimplementinordertoreplacethedefaultsession\ninterface which uses werkzeug\u2019s securecookie implementation. The only meth-\nopen_session() save_session()\nods you have to implement are and , the others\nhaveusefuldefaultswhichyoudon\u2019tneedtochange.\nopen_session()\nThe session object returned by the method has to provide a dic-\nSessionMixin\ntionary like interface plus the properties and methods from the .\nWerecommendjustsubclassingadictandaddingthatmixin:\nclass Session(dict, SessionMixin):\npass\nopen_session() make_null_session()\nIf returnsNoneFlaskwillcallinto tocreate\na session that acts as replacement if the session support cannot work because\nNullSession\nsome requirement is not fulfilled. The default class that is created\nwillcomplainthatthesecretkeywasnotset.\nTo replace the session interface on an application all you have to do is to assign\nflask.Flask.session_interface\n:\napp = Flask(__name__)\napp.session_interface = MySessionInterface()\nNewinversion0.8.\nget_cookie_domain(\napp\n)\nHelpful helper method that returns the cookie domain that should be used\nforthesessioncookieifsessioncookiesareused.\n220\nget_cookie_httponly(\napp\n)\nReturns True if the session cookie should be httponly. This currently just\nSESSION_COOKIE_HTTPONLY\nreturnsthevalueofthe configvar.\nget_cookie_path(\napp\n)\nReturns the path for which the cookie should be valid. The default imple-\nSESSION_COOKIE_PATH\nmentationusesthevaluefromthe configvarifit\u2019sset,\nAPPLICATION_ROOT /\nandfallsbackto oruses ifit\u2019sNone.\nget_cookie_secure(\napp\n)\nReturns True if the cookie should be secure. This currently just returns the\nSESSION_COOKIE_SECURE\nvalueofthe setting.\nget_expiration_time(\napp,session\n)\nA helper method that returns an expiration date for the session or None\nif the session is linked to the browser session. The default implementation\nreturnsnow+thepermanentsessionlifetimeconfiguredontheapplication.\nis_null_session(\nobj\n)\nChecks if a given object is a null session. Null sessions are not asked to be\nsaved.\nnull_session_class\nThischecksiftheobjectisaninstanceof bydefault.\nmake_null_session(\napp\n)\nCreates a null session which acts as a replacement object if the real session\nsupport could not be loaded due to a configuration error. This mainly aids\nthe user experience because the job of the null session is to still support\nlookupwithoutcomplainingbutmodificationsareansweredwithahelpful\nerrormessageofwhatfailed.\nnull_session_class\nThiscreatesaninstanceof bydefault.\nnull_session_class\nmake_null_session()\nwill look here for the class that should be created\nis_null_session()\nwhen a null session is requested. Likewise the method\nwillperformatypecheckagainstthistype.\nNullSession\naliasof\nopen_session(\napp,request\n)\nThis method has to be implemented and must either return None in case\nthe loading failed because of a configuration error or an instance of a ses-\nsionobjectwhichimplementsadictionarylikeinterface+themethodsand\nSessionMixin\nattributeson .\npickle_based=False\nAflagthatindicatesifthesessioninterfaceispicklebased. Thiscanbeused\nby flask extensions to make a decision in regards to how to deal with the\nsessionobject.\nNewinversion0.10.\nsave_session(\napp,session,response\n)\n221\nopen_session()\nThis is called for actual sessions returned by at the end of\nthe request. This is still called during a request context so if you absolutely\nneedaccesstotherequestyoucandothat.\nshould_set_cookie(\napp,session\n)\nIndicatesweatheracookieshouldbesetnowornot. Thisisusedbysession\nbackends to figure out if they should emit a set-cookie header or not. The\nSESSION_REFRESH_EACH_REQUEST\ndefaultbehavioriscontrolledbythe config\nvariable. Ifit\u2019ssettoFalsethenacookieisonlysetifthesessionismodified,\nifsettoTrueit\u2019salwayssetifthesessionispermanent.\nThischeckisusuallyskippedifsessionsgetdeleted.\nNewinversion1.0.\nclass\nflask.sessions.SecureCookieSessionInterface\nThe default session interface that stores sessions in signed cookies through the\nitsdangerous\nmodule.\nstaticdigest_method()\nthehashfunctiontouseforthesignature. Thedefaultissha1\nkey_derivation=\u2018hmac\u2019\nthe name of the itsdangerous supported key derivation. The default is\nhmac.\nsalt=\u2018cookie-session\u2019\nthe salt that should be applied on top of the secret key for the signing of\ncookiebasedsessions.\nserializer=<flask.sessions.TaggedJSONSerializerobject>\nApythonserializerforthepayload. ThedefaultisacompactJSONderived\nserializerwithsupportforsomeextraPythontypessuchasdatetimeobjects\nortuples.\nsession_class\nSecureCookieSession\naliasof\nclass\nflask.sessions.SecureCookieSession(\ninitial=None\n)\nBaseclassforsessionsbasedonsignedcookies.\nclass\nflask.sessions.NullSession(\ninitial=None\n)\nClassusedtogeneratenicererrormessagesifsessionsarenotavailable. Willstill\nallowread-onlyaccesstotheemptysessionbutfailonsetting.\nclass\nflask.sessions.SessionMixin\nExpands a basic dictionary with an accessors that are expected by Flask exten-\nsionsandusersforthesession.\nmodified=True\nfor some backends this will always be True, but some backends will default\nthis to false and detect changes in the dictionary for as long as changes do\nnot happen on mutable structures in the session. The default mixin imple-\nmentationjusthardcodesTruein.\n222\nnew=False\nsome session backends can tell you if a session is new, but that is not nec-\nessarily guaranteed. Use with caution. The default mixin implementation\njusthardcodesFalsein.\npermanent\n\u2019_permanent\u2019\nthisreflectsthe keyinthedict.\nflask.sessions.session_json_serializer=<flask.sessions.TaggedJSONSerializerobject>\nA customized JSON serializer that supports a few extra types that we take for\ngrantedwhenserializing(tuples,markupobjects,datetime).\nThis object provides dumping and loading methods similar to simplejson but it\nalso tags certain builtin Python objects that commonly appear in sessions. Cur-\nrentlythefollowingextendedvaluesaresupportedintheJSONitdumps:\nMarkup\n\u2022 objects\nUUID\n\u2022 objects\ndatetime\n\u2022 objects\ntuple\n\u2022 s\nNotice\nPERMANENT_SESSION_LIFETIME\nThe configkeycanalsobeanintegerstartingwithFlask\npermanent_session_lifetime\n0.8. Either catch this down yourself or use the attribute\nontheappwhichconvertstheresulttoanintegerautomatically.\n23.7 Test Client\nclass\nflask.testing.FlaskClient(\napplication, response_wrapper=None,\nuse_cookies=True, al-\n)\nlow_subdomain_redirects=False\nWorks like a regular Werkzeug test client but has some knowledge about how\nFlaskworkstodeferthecleanupoftherequestcontextstacktotheendofawith\nbody when used in a with statement. For general information about how to use\nwerkzeug.test.Client\nthisclassreferto .\nBasicusageisoutlinedintheTestingFlaskApplicationschapter.\nsession_transaction(\n*args,**kwds\n)\nWhenusedincombinationwithawithstatementthisopensasessiontrans-\naction. Thiscanbeusedtomodifythesessionthatthetestclientuses. Once\nthewithblockisleftthesessionisstoredback.\nwithclient.session_transaction()assession: session[\u2019value\u2019]=42\nInternally this is implemented by going through a temporary test request\ncontext and since session handling could depend on request variables this\n223\ntest_request_context()\nfunctionacceptsthesameargumentsas whichare\ndirectlypassedthrough.\n23.8 Application Globals\nTo share data that is valid for one request only from one function to another, a global\nvariable is not good enough because it would break in threaded environments. Flask\nprovides you with a special object that ensures it is only valid for the active request\nand that will return different values for each request. In a nutshell: it does the right\nrequest session\nthing,likeitdoesfor and .\nflask.g\nJust store on this whatever you want. For example a database connection or the\nuserthatiscurrentlyloggedin.\nStarting with Flask 0.10 this is stored on the application context and no longer\non the request context which means it becomes available if only the application\ncontext is bound and not yet a request. This is especially useful when combined\nwiththeFakingResourcesandContextpatternfortesting.\nget()\nAdditionally as of 0.10 you can use the method to get an attribute or None\n(orthesecondargument)ifit\u2019snotset. Thesetwousagesarenowequivalent:\nuser = getattr(flask.g, \u2019user\u2019, None)\nuser = flask.g.get(\u2019user\u2019, None)\nin\nIt\u2019s now also possible to use the operator on it to see if an attribute is defined\nandityieldsallkeysoniteration.\nThisisaproxy. SeeNotesOnProxiesformoreinformation.\n23.9 Useful Functions and Classes\nflask.current_app\nPoints to the application handling the request. This is useful for extensions that\nwant to support multiple applications running side by side. This is powered by\nthe application context and not by the request context, so you can change the\napp_context()\nvalueofthisproxybyusingthe method.\nThisisaproxy. SeeNotesOnProxiesformoreinformation.\nflask.has_request_context()\nIfyouhavecodethatwantstotestifarequestcontextisthereornotthisfunction\ncan be used. For instance, you may want to take advantage of request informa-\ntioniftherequestobjectisavailable,butfailsilentlyifitisunavailable.\nclass User(db.Model):\ndef __init__(self, username, remote_addr=None):\n224\nself.username = username\nif remote_addr is None and has_request_context():\nremote_addr = request.remote_addr\nself.remote_addr = remote_addr\nAlternatively you can also just test any of the context bound objects (such as\nrequest g\nor fortruthness):\nclass User(db.Model):\ndef __init__(self, username, remote_addr=None):\nself.username = username\nif remote_addr is None and request:\nremote_addr = request.remote_addr\nself.remote_addr = remote_addr\nNewinversion0.7.\nflask.copy_current_request_context(\nf\n)\nA helper function that decorates a function to retain the current request context.\nThis is useful when working with greenlets. The moment the function is deco-\nratedacopyoftherequestcontextiscreatedandthenpushedwhenthefunction\niscalled.\nExample:\nimport gevent\nfrom flask import copy_current_request_context\n@app.route(\u2019/\u2019)\ndef index():\n@copy_current_request_context\ndef do_some_work():\n# do some work here, it can access flask.request like you\n# would otherwise in the view function.\n...\ngevent.spawn(do_some_work)\nreturn \u2019Regular response\u2019\nNewinversion0.10.\nflask.has_app_context()\nhas_request_context()\nWorks like but for the application context. You can also\ncurrent_app\njustdoabooleancheckonthe objectinstead.\nNewinversion0.9.\nflask.url_for(\nendpoint,**values\n)\nGeneratesaURLtothegivenendpointwiththemethodprovided.\nVariableargumentsthatareunknowntothetargetendpointareappendedtothe\ngeneratedURLasqueryarguments. IfthevalueofaqueryargumentisNone,the\nwhole pair is skipped. In case blueprints are active you can shortcut references\n225\n.\ntothesameblueprintbyprefixingthelocalendpointwithadot( ).\nThiswillreferencetheindexfunctionlocaltothecurrentblueprint:\nurl_for(\u2019.index\u2019)\nFormoreinformation,headovertotheQuickstart.\nFlask\nTointegrateapplications, hasahooktointerceptURLbuilderrorsthrough\nFlask.url_build_error_handlers BuildError\n. The url_for function results in a\nwhen the current app does not have a URL for the given endpoint and values.\ncurrent_app url_build_error_handlers\nWhen it does, the calls its if it is not\nNone, which can return a string to use as the result of url_for (instead of url_for\u2018s\nBuildError\ndefaulttoraisethe exception)orre-raisetheexception. Anexample:\ndef external_url_handler(error, endpoint, values):\n\"Looks up an external URL when \u2018url_for\u2018 cannot build a URL.\"\n# This is an example of hooking the build_error_handler.\n# Here, lookup_url is some utility function you\u2019ve built\n# which looks up the endpoint in some external URL registry.\nurl = lookup_url(endpoint, **values)\nif url is None:\n# External lookup did not have a URL.\n# Re-raise the BuildError, in context of original traceback.\nexc_type, exc_value, tb = sys.exc_info()\nif exc_value is error:\nraise exc_type, exc_value, tb\nelse:\nraise error\n# url_for will use this result, instead of raising BuildError.\nreturn url\napp.url_build_error_handlers.append(external_url_handler)\nBuildError\nHere, error is the instance of , and endpoint and values are the argu-\nmentspassedintourl_for. NotethatthisisforbuildingURLsoutsidethecurrent\napplication,andnotforhandling404NotFounderrors.\nNewinversion0.10: The_schemeparameterwasadded.\nNewinversion0.9: The_anchorand_methodparameterswereadded.\nFlask.handle_build_error() BuildError\nNewinversion0.9: Calls on .\nParameters\n\u2022 endpoint\u2013theendpointoftheURL(nameofthefunction)\n\u2022 values\u2013thevariableargumentsoftheURLrule\n\u2022 _external\u2013ifsettoTrue,anabsoluteURLisgenerated. Server\naddress can be changed via SERVER_NAME configuration\nvariablewhichdefaultstolocalhost.\n226\n\u2022 _scheme \u2013 a string specifying the desired URL scheme. The\n_externalparametermustbesettoTrueoraValueErrorisraised.\n\u2022 _anchor\u2013ifprovidedthisisaddedasanchortotheURL.\n\u2022 _method\u2013ifprovidedthisexplicitlyspecifiesanHTTPmethod.\nflask.abort(\ncode\n)\nHTTPException\nRaises an for the given status code. For example to abort request\nabort(404)\nhandlingwithapagenotfoundexception,youwouldcall .\nParameters code\u2013theHTTPerrorcode.\nflask.redirect(\nlocation,code=302,Response=None\n)\nReturnsaresponseobject(aWSGIapplication)that,ifcalled,redirectstheclient\nto the target location. Supported codes are 301, 302, 303, 305, and 307. 300 is not\nsupported because it\u2019s not a real redirect and 304 because it\u2019s the answer for a\nrequestwitharequestwithdefinedIf-Modified-Sinceheaders.\nNew in version 0.6: The location can now be a unicode string that is encoded\niri_to_uri()\nusingthe function.\nNew in version 0.10: The class used for the Response object can now be passed\nin.\nParameters\n\u2022 location\u2013thelocationtheresponseshouldredirectto.\n\u2022 code\u2013theredirectstatuscode. defaultsto302.\n\u2022 Response (class) \u2013 a Response class to use when instantiating\nwerkzeug.wrappers.Response\na response. The default is if un-\nspecified.\nflask.make_response(\n*args\n)\nSometimes it is necessary to set additional headers in a view. Because views\ndo not have to return response objects but can return a value that is converted\ninto a response object by Flask itself, it becomes tricky to add headers to it. This\nfunctioncanbecalledinsteadofusingareturnandyouwillgetaresponseobject\nwhichyoucanusetoattachheaders.\nIfviewlookedlikethisandyouwanttoaddanewheader:\ndef index():\nreturn render_template(\u2019index.html\u2019, foo=42)\nYoucannowdosomethinglikethis:\ndef index():\nresponse = make_response(render_template(\u2019index.html\u2019, foo=42))\nresponse.headers[\u2019X-Parachutes\u2019] = \u2019parachutes are cool\u2019\nreturn response\nThisfunctionacceptstheverysameargumentsyoucanreturnfromaviewfunc-\ntion. Thisforexamplecreatesaresponsewitha404errorcode:\n227\nresponse = make_response(render_template(\u2019not_found.html\u2019), 404)\nThe other use case of this function is to force the return value of a view function\nintoaresponsewhichishelpfulwithviewdecorators:\nresponse = make_response(view_function())\nresponse.headers[\u2019X-Parachutes\u2019] = \u2019parachutes are cool\u2019\nInternallythisfunctiondoesthefollowingthings:\n\u2022ifnoargumentsarepassed,itcreatesanewresponseargument\nflask.Flask.make_response()\n\u2022if one argument is passed, is invoked with\nit.\n\u2022if more than one argument is passed, the arguments are passed to the\nflask.Flask.make_response()\nfunctionastuple.\nNewinversion0.6.\nflask.after_this_request(\nf\n)\nExecutes a function after this request. This is useful to modify response objects.\nThe function is passed the response object and has to return the same or a new\none.\nExample:\n@app.route(\u2019/\u2019)\ndef index():\n@after_this_request\ndef add_header(response):\nresponse.headers[\u2019X-Foo\u2019] = \u2019Parachute\u2019\nreturn response\nreturn \u2019Hello World!\u2019\nThis is more useful if a function other than the view function wants to modify\na response. For instance think of a decorator that wants to add some headers\nwithoutconvertingthereturnvalueintoaresponseobject.\nNewinversion0.9.\nflask.send_file(\nfilename_or_fp, mimetype=None, as_attachment=False, attach-\nment_filename=None, add_etags=True, cache_timeout=None, con-\n)\nditional=False\nSends the contents of a file to the client. This will use the most efficient\nmethod available and configured. By default it will try to use the WSGI\nserver\u2019s file_wrapper support. Alternatively you can set the application\u2019s\nuse_x_sendfile True\nattributeto todirectlyemitanX-Sendfileheader. Thishow-\neverrequiressupportoftheunderlyingwebserverforX-Sendfile.\nBy default it will try to guess the mimetype for you, but you can also explicitly\nprovide one. For extra security you probably want to send certain files as at-\ntachment(HTMLforinstance). Themimetypeguessingrequiresafilenameoran\nattachment_filenametobeprovided.\n228\nPlease never pass filenames to this function from user sources without checking\nthemfirst. Somethinglikethisisusuallysufficienttoavoidsecurityproblems:\nif \u2019..\u2019 in filename or filename.startswith(\u2019/\u2019):\nabort(404)\nNewinversion0.2.\nNewinversion0.5: Theadd_etags,cache_timeoutandconditionalparameterswere\nadded. Thedefaultbehaviorisnowtoattachetags.\nChangedinversion0.7: mimetypeguessingandetagsupportforfileobjectswas\ndeprecatedbecauseitwasunreliable. Passafilenameifyouareableto,otherwise\nattachanetagyourself. ThisfunctionalitywillberemovedinFlask1.0\nChanged in version 0.9: cache_timeout pulls its default from application config,\nwhenNone.\nParameters\n\u2022 filename_or_fp \u2013 the filename of the file to send. This is rel-\nroot_path\native to the if a relative path is specified. Alterna-\ntively a file object might be provided in which case X-Sendfile\nmight not work and fall back to the traditional method. Make\nsure that the file pointer is positioned at the start of data to\nsend_file()\nsendbeforecalling .\n\u2022 mimetype\u2013themimetypeofthefileifprovided,otherwiseauto\ndetectionhappens.\n\u2022 as_attachment \u2013 set to True if you want to send this file with a\nContent-Disposition: attachment\nheader.\n\u2022 attachment_filename\u2013thefilenamefortheattachmentifitdif-\nfersfromthefile\u2019sfilename.\n\u2022 add_etags\u2013settoFalsetodisableattachingofetags.\n\u2022 conditional\u2013settoTruetoenableconditionalresponses.\n\u2022 cache_timeout\u2013thetimeoutinsecondsfortheheaders. When\nget_send_file_max_age()\nNone(default),thisvalueissetby of\ncurrent_app\n.\nflask.send_from_directory(\ndirectory,filename,**options\n)\nsend_file()\nSend a file from a given directory with . This is a secure way to\nquicklyexposestaticfilesfromanuploadfolderorsomethingsimilar.\nExampleusage:\n@app.route(\u2019/uploads/<path:filename>\u2019)\ndef download_file(filename):\nreturn send_from_directory(app.config[\u2019UPLOAD_FOLDER\u2019],\nfilename, as_attachment=True)\n229\nSendingfilesandPerformance\nIt is strongly recommended to activate either X-Sendfile support in your web-\nserver or (if no authentication happens) to tell the webserver to serve files for\nthegivenpathonitsownwithoutcallingintothewebapplicationforimproved\nperformance.\nNewinversion0.5.\nParameters\n\u2022 directory\u2013thedirectorywhereallthefilesarestored.\n\u2022 filename\u2013thefilenamerelativetothatdirectorytodownload.\n\u2022 options \u2013 optional keyword arguments that are directly for-\nsend_file()\nwardedto .\nflask.safe_join(\ndirectory,filename\n)\nSafelyjoindirectoryandfilename.\nExampleusage:\n@app.route(\u2019/wiki/<path:filename>\u2019)\ndef wiki_page(filename):\nfilename = safe_join(app.config[\u2019WIKI_FOLDER\u2019], filename)\nwith open(filename, \u2019rb\u2019) as fd:\ncontent = fd.read() # Read and process the file content...\nParameters\n\u2022 directory\u2013thebasedirectory.\n\u2022 filename\u2013theuntrustedfilenamerelativetothatdirectory.\nNotFound\nRaises iftheresultingpathwouldfalloutofdirectory.\nflask.escape( s ) \u2192 markup\nConvert the characters &, <, >, \u2018, and \u201d in string s to HTML-safe sequences. Use\nthis if you need to display text that might contain such characters in HTML.\nMarksreturnvalueasmarkupstring.\nclass\nflask.Markup\nMarks a string as being safe for inclusion in HTML/XML output without need-\ning to be escaped. This implements the __html__ interface a couple of frame-\nMarkup\nworks and web applications use. is a direct subclass of unicode and pro-\nvidesallthemethodsofunicodejustthatitescapesargumentspassedandalways\nreturnsMarkup.\nTheescapefunctionreturnsmarkupobjectssothatdoubleescapingcan\u2019thappen.\nMarkup\nThe constructor of the class can be used for three different things: When\npassed an unicode object it\u2019s assumed to be safe, when passed an object with\nan HTML representation (has an __html__ method) that representation is used,\n230\notherwisetheobjectpassedisconvertedintoaunicodestringandthenassumed\ntobesafe:\n>>> Markup(\"Hello <em>World</em>!\")\nMarkup(u\u2019Hello <em>World</em>!\u2019)\n>>> class Foo(object):\n... def __html__(self):\n... return \u2019<a href=\"#\">foo</a>\u2019\n...\n>>> Markup(Foo())\nMarkup(u\u2019<a href=\"#\">foo</a>\u2019)\nIf you want object passed being always treated as unsafe you can use the\nescape() Markup\nclassmethodtocreatea object:\n>>> Markup.escape(\"Hello <em>World</em>!\")\nMarkup(u\u2019Hello &lt;em&gt;World&lt;/em&gt;!\u2019)\nOperations on a markup string are markup aware which means that all argu-\nescape()\nmentsarepassedthroughthe function:\n>>> em = Markup(\"<em>%s</em>\")\n>>> em % \"foo & bar\"\nMarkup(u\u2019<em>foo &amp; bar</em>\u2019)\n>>> strong = Markup(\"<strong>%(text)s</strong>\")\n>>> strong % {\u2019text\u2019: \u2019<blink>hacker here</blink>\u2019}\nMarkup(u\u2019<strong>&lt;blink&gt;hacker here&lt;/blink&gt;</strong>\u2019)\n>>> Markup(\"<em>Hello</em> \") + \"<foo>\"\nMarkup(u\u2019<em>Hello</em> &lt;foo&gt;\u2019)\nclassmethodescape(\ns\n)\nescape()\nEscape the string. Works like with the difference that for sub-\nMarkup\nclassesof thisfunctionwouldreturnthecorrectsubclass.\nstriptags()\nUnescape markup into an text_type string and strip all tags. This also re-\nsolves known HTML4 and XHTML entities. Whitespace is normalized to\none:\n>>> Markup(\"Main &raquo; <em>About</em>\").striptags()\nu\u2019Main \\xbb About\u2019\nunescape()\nUnescape markup again into an text_type string. This also resolves known\nHTML4andXHTMLentities:\n>>> Markup(\"Main &raquo; <em>About</em>\").unescape()\nu\u2019Main \\xbb <em>About</em>\u2019\n231\n23.10 Message Flashing\nflask.flash(\nmessage,category=\u2019message\u2019\n)\nFlashes a message to the next request. In order to remove the flashed mes-\nsage from the session and to display it to the user, the template has to call\nget_flashed_messages()\n.\nChangedinversion0.3: categoryparameteradded.\nParameters\n\u2022 message\u2013themessagetobeflashed.\n\u2022 category \u2013 the category for the message. The following values\n\u2019message\u2019 \u2019error\u2019\narerecommended: foranykindofmessage,\n\u2019info\u2019 \u2019warning\u2019\nfor errors, for information messages and for\nwarnings. Howeveranykindofstringcanbeusedascategory.\nflask.get_flashed_messages(\nwith_categories=False,category_filter=[]\n)\nPullsallflashedmessagesfromthesessionandreturnsthem. Furthercallsinthe\nsame request to the function will return the same messages. By default just the\nmessages are returned, but when with_categories is set to True, the return value\n(category, message)\nwillbealistoftuplesintheform instead.\nFilter the flashed messages to one or more categories by providing those cate-\ngoriesincategory_filter. Thisallowsrenderingcategoriesinseparatehtmlblocks.\nThewith_categoriesandcategory_filterargumentsaredistinct:\n\u2022with_categories controls whether categories are returned with message text\n(Truegivesatuple,whereFalsegivesjustthemessagetext).\n\u2022category_filter filters the messages down to only those matching the pro-\nvidedcategories.\nSeeMessageFlashingforexamples.\nChangedinversion0.3: with_categoriesparameteradded.\nChangedinversion0.9: category_filterparameteradded.\nParameters\n\u2022 with_categories\u2013settoTruetoalsoreceivecategories.\n\u2022 category_filter\u2013whitelistofcategoriestolimitreturnvalues\n23.11 JSON Support\nsimplejson\nFlask uses for the JSON implementation. Since simplejson is provided\nboth by the standard library as well as extension Flask will try simplejson first and\nthen fall back to the stdlib json module. On top of that it will delegate access to the\ncurrentapplication\u2019sJSONencodersanddecodersforeasiercustomization.\n232\nSoforstartersinsteadofdoing:\ntry:\nimport simplejson as json\nexcept ImportError:\nimport json\nYoucaninsteadjustdothis:\nfrom flask import json\njson\nForusageexamples,readthe documentationinthestandardlibrary. Thefollow-\ningextensionsarebydefaultappliedtothestdlib\u2019sJSONmodule:\ndatetime\n1. objectsareserializedasRFC822strings.\n__html__ Markup\n2. Any object with an method (like ) will have that method called\nandthenthereturnvalueisserializedasstring.\nhtmlsafe_dumps()\nThe function of this json module is also available as filter called\n|tojson\nin Jinja2. Note that inside script tags no escaping must take place, so make\n|safe\nsuretodisableescapingwith ifyouintendtouseitinsidescripttagsunlessyou\nareusingFlask0.10whichimpliesthat:\n<script type=text/javascript>\ndoSomethingWith({{ user.username|tojson|safe }});\n</script>\nAuto-SortJSONKeys\nJSON_SORT_KEYS\nThe configuration variable (Configuration Handling) can be set to false\nto stop Flask from auto-sorting keys. By default sorting is enabled and outside of the\nappcontextsortingisturnedon.\nNotice that disabling key sorting can cause issues when using content based HTTP\ncachesandPython\u2019shashrandomizationfeature.\nflask.json.jsonify(\n*args,**kwargs\n)\nResponse\nCreatesa withtheJSONrepresentationofthegivenargumentswithan\napplication/json mimetype. The arguments to this function are the same as to the\ndict\nconstructor.\nExampleusage:\nfrom flask import jsonify\n@app.route(\u2019/_get_current_user\u2019)\ndef get_current_user():\nreturn jsonify(username=g.user.username,\nemail=g.user.email,\nid=g.user.id)\nThiswillsendaJSONresponselikethistothebrowser:\n233\n{\n\"username\": \"admin\",\n\"email\": \"admin@localhost\",\n\"id\": 42\n}\nFor security reasons only objects are supported toplevel. For more information\naboutthis,havealookatJSONSecurity.\nThis function\u2019s response will be pretty printed if it was not requested\nX-Requested-With: XMLHttpRequest\nwith to simplify debugging unless the\nJSONIFY_PRETTYPRINT_REGULAR\nconfigparameterissettofalse.\nNewinversion0.2.\nflask.json.dumps(\nobj,**kwargs\n)\nobj str\nSerialize to a JSON formatted by using the application\u2019s configured en-\njson_encoder\ncoder( )ifthereisanapplicationonthestack.\nunicode\nThis function can return strings or ascii-only bytestrings by default\nwhich coerce into unicode strings automatically. That behavior by default is\nJSON_AS_ASCII\ncontrolled by the configuration variable and can be overridden\nensure_ascii\nbythesimplejson parameter.\nflask.json.dump(\nobj,fp,**kwargs\n)\ndumps()\nLike butwritesintoafileobject.\nflask.json.loads(\ns,**kwargs\n)\ns\nUnserialize a JSON object from a string by using the application\u2019s configured\njson_decoder\ndecoder( )ifthereisanapplicationonthestack.\nflask.json.load(\nfp,**kwargs\n)\nloads()\nLike butreadsfromafileobject.\nclass\nflask.json.JSONEncoder(\nskipkeys=False, ensure_ascii=True,\ncheck_circular=True, allow_nan=True,\nsort_keys=False, indent=None, separators=None,\n)\nencoding=\u2019utf-8\u2019,default=None\nThedefaultFlaskJSONencoder. Thisoneextendsthedefaultsimplejsonencoder\ndatetime UUID Markup\nby also supporting objects, as well as objects which are\nserialized as RFC 822 datetime strings (same as the HTTP date format). In order\ndefault()\ntosupportmoredatatypesoverridethe method.\ndefault(\no\n)\nImplementthismethodinasubclasssuchthatitreturnsaserializableobject\no TypeError\nfor ,orcallsthebaseimplementation(toraisea ).\nFor example, to support arbitrary iterators, you could implement default\nlikethis:\ndef default(self, o):\ntry:\niterable = iter(o)\nexcept TypeError:\n234\npass\nelse:\nreturn list(iterable)\nreturn JSONEncoder.default(self, o)\nclass\nflask.json.JSONDecoder(\nencoding=None, object_hook=None,\nparse_float=None, parse_int=None,\nparse_constant=None, strict=True, ob-\n)\nject_pairs_hook=None\nThe default JSON decoder. This one does not change the behavior from the de-\njson\nfault simplejson encoder. Consult the documentation for more informa-\ntion. Thisdecoderisnotonlyusedfortheloadfunctionsofthismodulebutalso\nRequest\n.\n23.12 Template Rendering\nflask.render_template(\ntemplate_name_or_list,**context\n)\nRendersatemplatefromthetemplatefolderwiththegivencontext.\nParameters\n\u2022 template_name_or_list \u2013 the name of the template to be ren-\ndered,oraniterablewithtemplatenamesthefirstoneexisting\nwillberendered\n\u2022 context \u2013 the variables that should be available in the context\nofthetemplate.\nflask.render_template_string(\nsource,**context\n)\nRendersatemplatefromthegiventemplatesourcestringwiththegivencontext.\nParameters\n\u2022 source\u2013thesourcecodeofthetemplatetoberendered\n\u2022 context \u2013 the variables that should be available in the context\nofthetemplate.\nflask.get_template_attribute(\ntemplate_name,attribute\n)\nLoads a macro (or variable) a template exports. This can be used to invoke a\nmacro from within Python code. If you for example have a template named\n_cider.htmlwiththefollowingcontents:\n{% macro hello(name) %}Hello {{ name }}!{% endmacro %}\nYoucanaccessthisfromPythoncodelikethis:\nhello = get_template_attribute(\u2019_cider.html\u2019, \u2019hello\u2019)\nreturn hello(\u2019World\u2019)\nNewinversion0.2.\n235\nParameters\n\u2022 template_name\u2013thenameofthetemplate\n\u2022 attribute\u2013thenameofthevariableofmacrotoaccess\n23.13 Configuration\nclass\nflask.Config(\nroot_path,defaults=None\n)\nWorks exactly like a dict but provides ways to fill it from files or special dictio-\nnaries. Therearetwocommonpatternstopopulatetheconfig.\nEitheryoucanfilltheconfigfromaconfigfile:\napp.config.from_pyfile(\u2019yourconfig.cfg\u2019)\nOralternativelyyoucandefinetheconfigurationoptionsinthemodulethatcalls\nfrom_object()\nor provide an import path to a module that should be loaded.\nIt is also possible to tell it to use the same module and with that provide the\nconfigurationvaluesjustbeforethecall:\nDEBUG = True\nSECRET_KEY = \u2019development key\u2019\napp.config.from_object(__name__)\nIn both cases (loading from any Python file or loading from modules), only up-\npercase keys are added to the config. This makes it possible to use lowercase\nvalues in the config file for temporary values that are not added to the config or\ntodefinetheconfigkeysinthesamefilethatimplementstheapplication.\nProbablythemostinterestingwaytoloadconfigurationsisfromanenvironment\nvariablepointingtoafile:\napp.config.from_envvar(\u2019YOURAPPLICATION_SETTINGS\u2019)\nIn this case before launching the application you have to set this environment\nvariabletothefileyouwanttouse. OnLinuxandOSXusetheexportstatement:\nexport YOURAPPLICATION_SETTINGS=\u2019/path/to/config/file\u2019\nOnwindowsusesetinstead.\nParameters\n\u2022 root_path \u2013 path to which files are read relative from. When\nthe config object is created by the application, this is the appli-\nroot_path\ncation\u2019s .\n\u2022 defaults\u2013anoptionaldictionaryofdefaultvalues\nfrom_envvar(\nvariable_name,silent=False\n)\nLoads a configuration from an environment variable pointing to a configu-\n236\nrationfile. Thisisbasicallyjustashortcutwithnicererrormessagesforthis\nlineofcode:\napp.config.from_pyfile(os.environ[\u2019YOURAPPLICATION_SETTINGS\u2019])\nParameters\n\u2022 variable_name\u2013nameoftheenvironmentvariable\n\u2022 silent\u2013settoTrueifyouwantsilentfailureformissingfiles.\nReturns bool. Trueifabletoloadconfig,Falseotherwise.\nfrom_json(\nfilename,silent=False\n)\nUpdates the valuesin the config from a JSONfile. This functionbehaves as\nfrom_object()\nif the JSON object was a dictionary and passed ot the func-\ntion.\nParameters\n\u2022 filename \u2013 the filename of the JSON file. This can either be\nanabsolutefilenameorafilenamerelativetotherootpath.\n\u2022 silent\u2013settoTrueifyouwantsilentfailureformissingfiles.\nNewinversion1.0.\nfrom_object(\nobj\n)\nUpdates the values from the given object. An object can be of one of the\nfollowingtwotypes:\n\u2022astring: inthiscasetheobjectwiththatnamewillbeimported\n\u2022anactualobjectreference: thatobjectisuseddirectly\nObjectsareusuallyeithermodulesorclasses.\nJust the uppercase variables in that object are stored in the config. Example\nusage:\napp.config.from_object(\u2019yourapplication.default_config\u2019)\nfrom yourapplication import default_config\napp.config.from_object(default_config)\nYou should not use this function to load the actual configuration but\nrather configuration defaults. The actual config should be loaded with\nfrom_pyfile()\nand ideally from a location not within the package because\nthepackagemightbeinstalledsystemwide.\nParameters obj\u2013animportnameorobject\nfrom_pyfile(\nfilename,silent=False\n)\nUpdates the values in the config from a Python file. This function behaves\nfrom_object()\nasifthefilewasimportedasmodulewiththe function.\nParameters\n237\n\u2022 filename \u2013 the filename of the config. This can either be an\nabsolutefilenameorafilenamerelativetotherootpath.\n\u2022 silent\u2013settoTrueifyouwantsilentfailureformissingfiles.\nNewinversion0.7: silentparameter.\nget_namespace(\nnamespace,lowercase=True\n)\nReturnsadictionarycontainingasubsetofconfigurationoptionsthatmatch\nthespecifiednamespace/prefix. Exampleusage:\napp.config[\u2019IMAGE_STORE_TYPE\u2019] = \u2019fs\u2019\napp.config[\u2019IMAGE_STORE_PATH\u2019] = \u2019/var/app/images\u2019\napp.config[\u2019IMAGE_STORE_BASE_URL\u2019] = \u2019http://img.website.com\u2019\nimage_store_config = app.config.get_namespace(\u2019IMAGE_STORE_\u2019)\nTheresultingdictionaryimage_storewouldlooklike:\n{\n\u2019type\u2019: \u2019fs\u2019,\n\u2019path\u2019: \u2019/var/app/images\u2019,\n\u2019base_url\u2019: \u2019http://img.website.com\u2019\n}\nThis is often useful when configuration options map directly to keyword\nargumentsinfunctionsorclassconstructors.\nParameters\n\u2022 namespace\u2013aconfigurationnamespace\n\u2022 lowercase \u2013 a flag indicating if the keys of the resulting dic-\ntionaryshouldbelowercase\nNewinversion1.0.\n23.14 Extensions\nflask.ext\nThismodule actsasredirect importmoduleto Flaskextensions. It wasaddedin\n0.8 as the canonical way to import Flask extensions and makes it possible for us\ntohavemoreflexibilityinhowwedistributeextensions.\nIf you want to use an extension named \u201cFlask-Foo\u201d you would import it from\next\nasfollows:\nfrom flask.ext import foo\nNewinversion0.8.\n238\n23.15 Stream Helpers\nflask.stream_with_context(\ngenerator_or_function\n)\nRequest contexts disappear when the response is started on the server. This is\ndone for efficiency reasons and to make it less likely to encounter memory leaks\nwith badly written WSGI middlewares. The downside is that if you are using\nstreamedresponses,thegeneratorcannotaccessrequestboundinformationany\nmore.\nThisfunctionhowevercanhelpyoukeepthecontextaroundforlonger:\nfrom flask import stream_with_context, request, Response\n@app.route(\u2019/stream\u2019)\ndef streamed_response():\n@stream_with_context\ndef generate():\nyield \u2019Hello \u2019\nyield request.args[\u2019name\u2019]\nyield \u2019!\u2019\nreturn Response(generate())\nAlternativelyitcanalsobeusedaroundaspecificgenerator:\nfrom flask import stream_with_context, request, Response\n@app.route(\u2019/stream\u2019)\ndef streamed_response():\ndef generate():\nyield \u2019Hello \u2019\nyield request.args[\u2019name\u2019]\nyield \u2019!\u2019\nreturn Response(stream_with_context(generate()))\nNewinversion0.9.\n23.16 Useful Internals\nclass\nflask.ctx.RequestContext(\napp,environ,request=None\n)\nThe request context contains all request relevant information. It is created at the\nbeginning of the request and pushed to the _request_ctx_stack and removed at\nthe end of it. It will create the URL adapter and request object for the WSGI\nenvironmentprovided.\ntest_request_context()\nDo not attempt to use this class directly, instead use\nrequest_context()\nand tocreatethisobject.\nWhen the request context is popped, it will evaluate all the functions registered\nteardown_request()\nontheapplicationforteardownexecution( ).\n239\nThe request context is automatically popped at the end of the request for you.\nIn debug mode the request context is kept around if exceptions happen so that\ninteractivedebuggershaveachancetointrospectthedata. With0.4thiscanalso\nbe forced for requests that did not fail and outside of DEBUG mode. By setting\n\u2019flask._preserve_context\u2019\nto True on the WSGI environment the context will\ntest_client()\nnot pop itself at the end of the request. This is used by the for\nexampletoimplementthedeferredcleanupfunctionality.\nYou might find this helpful for unittests where you need the information from\npop()\nthecontextlocalaroundforalittlelonger. Makesuretoproperly thestack\nyourselfinthatsituation,otherwiseyourunittestswillleakmemory.\ncopy()\nCreatesacopyofthisrequestcontextwiththesamerequestobject. Thiscan\nbeusedtomovearequestcontexttoadifferentgreenlet. Becausetheactual\nrequest object is the same this cannot be used to move a request context to\nadifferentthreadunlessaccesstotherequestobjectislocked.\nNewinversion0.10.\nmatch_request()\nCanbeoverriddenbyasubclasstohookintothematchingoftherequest.\npop(\nexc=None\n)\nPopstherequestcontextandunbindsitbydoingthat. Thiswillalsotrigger\nteardown_request()\ntheexecutionoffunctionsregisteredbythe decorator.\nChangedinversion0.9: Addedtheexcargument.\npush()\nBindstherequestcontexttothecurrentcontext.\nflask._request_ctx_stack\nLocalStack\nThe internal that is used to implement all the context local objects\nused in Flask. This is a documented instance and can be used by extensions and\napplicationcodebuttheuseisdiscouragedingeneral.\nThefollowingattributesarealwayspresentoneachlayerofthestack:\napp theactiveFlaskapplication.\nurl_adapter theURLadapterthatwasusedtomatchtherequest.\nrequest thecurrentrequestobject.\nsession theactivesessionobject.\nflask.g\ng anobjectwithalltheattributesofthe object.\nflashes aninternalcachefortheflashedmessages.\nExampleusage:\nfrom flask import _request_ctx_stack\ndef get_session():\n240\nctx = _request_ctx_stack.top\nif ctx is not None:\nreturn ctx.session\nclass\nflask.ctx.AppContext(\napp\n)\nThe application context binds an application object implicitly to the current\nRequestContext\nthread or greenlet, similar to how the binds request informa-\ntion. The application context is also implicitly created if a request context is\ncreated but the application is not on top of the individual application context.\npop(\nexc=None\n)\nPopstheappcontext.\npush()\nBindstheappcontexttothecurrentcontext.\nflask._app_ctx_stack\nWorks similar to the request context but only binds the application. This is\nmainlythereforextensionstostoredata.\nNewinversion0.9.\nclass\nflask.blueprints.BlueprintSetupState(\nblueprint, app, options,\n)\nfirst_registration\nTemporary holder object for registering a blueprint with the application. An in-\nmake_setup_state()\nstanceofthisclassiscreatedbythe methodandlaterpassed\ntoallregistercallbackfunctions.\nadd_url_rule(\nrule,endpoint=None,view_func=None,**options\n)\nA helper method to register a rule (and optionally a view function) to the\napplication. The endpoint is automatically prefixed with the blueprint\u2019s\nname.\napp=None\nareferencetothecurrentapplication\nblueprint=None\nareferencetotheblueprintthatcreatedthissetupstate.\nfirst_registration=None\nas blueprints can be registered multiple times with the application and not\neverything wants to be registered multiple times on it, this attribute can be\nusedtofigureoutiftheblueprintwasregisteredinthepastalready.\noptions=None\nregister_blueprint()\nadictionarywithalloptionsthatwerepassedtothe\nmethod.\nsubdomain=None\nThesubdomainthattheblueprintshouldbeactivefor,Noneotherwise.\nurl_defaults=None\nA dictionary with URL defaults that is added to each and every URL that\n241\nwasdefinedwiththeblueprint.\nurl_prefix=None\nTheprefixthatshouldbeusedforallURLsdefinedontheblueprint.\n23.17 Signals\nNewinversion0.6.\nflask.signals_available\nTrueifthesignalingsystemisavailable. Thisisthecasewhenblinkerisinstalled.\nflask.template_rendered\nThis signal is sent when a template was successfully rendered. The signal is in-\nvokedwiththeinstanceofthetemplateastemplateandthecontextasdictionary\n(namedcontext).\nflask.request_started\nThis signal is sent before any request processing started but when the request\ncontext was set up. Because the request context is already bound, the subscriber\nrequest\ncanaccesstherequestwiththestandardglobalproxiessuchas .\nflask.request_finished\nThis signal is sent right before the response is sent to the client. It is passed the\nresponsetobesentnamedresponse.\nflask.got_request_exception\nThis signal is sent when an exception happens during request processing. It is\nsent before the standard exception handling kicks in and even in debug mode,\nwhere no exception handling happens. The exception itself is passed to the sub-\nscriberasexception.\nflask.request_tearing_down\nThis signal is sent when the application is tearing down the request. This is\nalways called, even if an error happened. An exc keyword argument is passed\nwiththeexceptionthatcausedtheteardown.\nChangedinversion0.9: Theexcparameterwasadded.\nflask.appcontext_tearing_down\nThis signal is sent when the application is tearing down the application context.\nThis is always called, even if an error happened. An exc keyword argument is\npassed with the exception that caused the teardown. The sender is the applica-\ntion.\nflask.appcontext_pushed\nThis signal is sent when an application context is pushed. The sender is the\napplication.\nNewinversion0.10.\n242\nflask.appcontext_popped\nThis signal is sent when an application context is popped. The sender is the\nappcontext_tearing_down\napplication. Thisusuallyfallsinlinewiththe signal.\nNewinversion0.10.\nflask.message_flashed\nThis signal is sent when the application is flashing a message. The messages is\nsentasmessagekeywordargumentandthecategoryascategory.\nNewinversion0.10.\nclass\nflask.signals.Namespace\nblinker.base.Namespace\nAn alias for if blinker is available, otherwise a dummy\nclass that creates fake signals. This class is available for Flask extensions that\nwanttoprovidethesamefallbacksystemasFlaskitself.\nsignal(\nname,doc=None\n)\nCreates a new signal for this namespace if blinker is available, otherwise\nreturns a fake signal that has a send method that will do nothing but will\nRuntimeError\nfailwitha forallotheroperations,includingconnecting.\n23.18 Class-Based Views\nNewinversion0.7.\nclass\nflask.views.View\nAlternative way to use view functions. A subclass has to implement\ndispatch_request()\nwhichiscalledwiththeviewargumentsfromtheURLrout-\nmethods\ning system. If is provided the methods do not have to be passed to the\nadd_url_rule()\nmethodexplicitly:\nclass MyView(View):\nmethods = [\u2019GET\u2019]\ndef dispatch_request(self, name):\nreturn \u2019Hello %s!\u2019 % name\napp.add_url_rule(\u2019/hello/<name>\u2019, view_func=MyView.as_view(\u2019myview\u2019))\nWhen you want to decorate a pluggable view you will have to either do that\nas_view()\nwhen the view function is created (by wrapping the return value of )\ndecorators\noryoucanusethe attribute:\nclass SecretView(View):\nmethods = [\u2019GET\u2019]\ndecorators = [superuser_required]\ndef dispatch_request(self):\n...\n243\nThe decorators stored in the decorators list are applied one after another when\ntheviewfunctioniscreated. Notethatyoucannotusetheclassbaseddecorators\nsincethosewoulddecoratetheviewclassandnotthegeneratedviewfunction!\nclassmethodas_view(\nname,*class_args,**class_kwargs\n)\nConverts the class into an actual view function that can be used with the\nroutingsystem. Internallythisgeneratesafunctionontheflywhichwillin-\nView dispatch_request()\nstantiate the on each request and call the method\nonit.\nas_view()\nTheargumentspassedto areforwardedtotheconstructorofthe\nclass.\ndecorators=()\nThe canonical way to decorate class-based views is to decorate the return\nvalue of as_view(). However since this moves parts of the logic from the\nclassdeclarationtotheplacewhereit\u2019shookedintotheroutingsystem.\nYou can place one or more decorators in this list and whenever the view\nfunctioniscreatedtheresultisautomaticallydecorated.\nNewinversion0.8.\ndispatch_request()\nSubclasseshavetooverridethismethodtoimplementtheactualviewfunc-\ntioncode. ThismethodiscalledwithalltheargumentsfromtheURLrule.\nmethods=None\nAforwhichmethodsthispluggableviewcanhandle.\nclass\nflask.views.MethodView\nLike a regular class-based view but that dispatches requests to particular meth-\nget()\nods. For instance if you implement a method called it means you will\n\u2019GET\u2019 dispatch_request()\nresponseto requestsandthe implementationwillau-\noptions\ntomatically forward your request to that. Also is set for you automati-\ncally:\nclass CounterAPI(MethodView):\ndef get(self):\nreturn session.get(\u2019counter\u2019, 0)\ndef post(self):\nsession[\u2019counter\u2019] = session.get(\u2019counter\u2019, 0) + 1\nreturn \u2019OK\u2019\napp.add_url_rule(\u2019/counter\u2019, view_func=CounterAPI.as_view(\u2019counter\u2019))\n23.19 URL Route Registrations\nGenerallytherearethreewaystodefinerulesfortheroutingsystem:\n244\nflask.Flask.route()\n1. Youcanusethe decorator.\nflask.Flask.add_url_rule()\n2. Youcanusethe function.\n3. You can directly access the underlying Werkzeug routing system which is ex-\nflask.Flask.url_map\nposedas .\n/user/<username>\nVariablepartsintheroutecanbespecifiedwithangularbrackets( ).\nBy default a variable part in the URL accepts any string without a slash however a\n<converter:name>\ndifferentconvertercanbespecifiedaswellbyusing .\nVariablepartsarepassedtotheviewfunctionaskeywordarguments.\nThefollowingconvertersareavailable:\nstring acceptsanytextwithoutaslash(thedefault)\nint acceptsintegers\nfloat likeintbutforfloatingpointvalues\npath likethedefaultbutalsoacceptsslashes\nHerearesomeexamples:\n@app.route(\u2019/\u2019)\ndef index():\npass\n@app.route(\u2019/<username>\u2019)\ndef show_user(username):\npass\n@app.route(\u2019/post/<int:post_id>\u2019)\ndef show_post(post_id):\npass\nAnimportantdetailtokeepinmindishowFlaskdealswithtrailingslashes. Theidea\nistokeepeachURLuniquesothefollowingrulesapply:\n1. If a rule ends with a slash and is requested without a slash by the user, the user\nisautomaticallyredirectedtothesamepagewithatrailingslashattached.\n2. If a rule does not end with a trailing slash and the user requests the page with a\ntrailingslash,a404notfoundisraised.\nThisisconsistentwithhowwebserversdealwithstaticfiles. Thisalsomakesitpossi-\nbletouserelativelinktargetssafely.\nYou can also define multiple rules for the same function. They have to be unique\nhowever. Defaults can also be specified. Here for example is a definition for a URL\nthatacceptsanoptionalpage:\n@app.route(\u2019/users/\u2019, defaults={\u2019page\u2019: 1})\n@app.route(\u2019/users/page/<int:page>\u2019)\ndef show_users(page):\npass\n245\n/users/ /users/page/N\nThisspecifiesthat willbetheURLforpageoneand willbethe\nURLforpageN.\nroute() add_url_rule()\nHere are the parameters that and accept. The only difference\nisthatwiththerouteparametertheviewfunctionisdefinedwiththedecoratorinstead\noftheview_funcparameter.\nrule theURLruleasstring\nend- theendpointfortheregisteredURLrule. Flaskitselfassumesthatthename\npoint oftheviewfunctionisthenameoftheendpointifnotexplicitlystated.\nview_funthcefunctiontocallwhenservingarequesttotheprovidedendpoint. Ifthis\nisnotprovidedonecanspecifythefunctionlaterbystoringitinthe\nview_functions\ndictionarywiththeendpointaskey.\nde- Adictionarywithdefaultsforthisrule. Seetheexampleaboveforhow\nfaults defaultswork.\nsub- specifiestheruleforthesubdomainincasesubdomainmatchingisinuse.\ndo- Ifnotspecifiedthedefaultsubdomainisassumed.\nmain\nRule\n**op- theoptionstobeforwardedtotheunderlying object. Achangeto\ntions Werkzeugishandlingofmethodoptions. methodsisalistofmethodsthis\nruleshouldbelimitedto(GET,POST etc.). Bydefaultarulejustlistensfor\nGET (andimplicitlyHEAD).StartingwithFlask0.6,OPTIONSisimplicitly\naddedandhandledbythestandardrequesthandling. Theyhavetobe\nspecifiedaskeywordarguments.\n23.20 View Function Options\nFor internal usage the view functions can have some attributes attached to customize\nbehavior the view function would normally not have control over. The following at-\nadd_url_rule()\ntributescanbeprovidedoptionallytoeitheroverridesomedefaultsto\norgeneralbehavior:\n\u2022 __name__: The name of a function is by default used as endpoint. If endpoint is\nprovidedexplicitlythisvalueisused. Additionallythiswillbeprefixedwiththe\nname of the blueprint by default which cannot be customized from the function\nitself.\n\u2022 methods: If methods are not provided when the URL rule is added, Flask will\nlook on the view function object itself is an methods attribute exists. If it does, it\nwillpulltheinformationforthemethodsfromthere.\n\u2022 provide_automatic_options: if this attribute is set Flask will either force enable or\ndisabletheautomaticimplementationoftheHTTPOPTIONSresponse. Thiscan\nbe useful when working with decorators that want to customize the OPTIONS\nresponseonaper-viewbasis.\n\u2022 required_methods: if this attribute is set, Flask will always add these methods\nwhen registering a URL rule even if the methods were explicitly overridden in\nroute()\nthe call.\n246\nFullexample:\ndef index():\nif request.method == \u2019OPTIONS\u2019:\n# custom options handling here\n...\nreturn \u2019Hello World!\u2019\nindex.provide_automatic_options = False\nindex.methods = [\u2019GET\u2019, \u2019OPTIONS\u2019]\napp.add_url_rule(\u2019/\u2019, index)\nNewinversion0.8: Theprovide_automatic_optionsfunctionalitywasadded.\n23.21 Command Line Interface\nclass\nflask.cli.FlaskGroup(\nadd_default_commands=True, add_app_option=None,\n)\nadd_debug_option=True,create_app=None,**extra\nSpecial subclass of the a regular click group that supports loading more com-\nmands from the configured Flask app. Normally a developer does not have to\ninterface with this class but there are some very advanced usecases for which it\nmakessensetocreateaninstanceofthis.\nForinformationasofwhythisisusefulseeCustomScripts.\nParameters\n\u2022 add_default_commands\u2013ifthisisTruethenthedefaultrunand\nshellcommandswilbeadded.\n\u2022 add_app_option \u2013 adds the default --app option. This gets au-\ntomaticallydisabledifacreate_appcallbackisdefined.\n\u2022 add_debug_option\u2013addsthedefault --debug option.\n\u2022 create_app \u2013 an optional callback that is passed the script info\nandreturnstheloadedapp.\nclass\nflask.cli.ScriptInfo(\napp_import_path=None, debug=None, cre-\n)\nate_app=None\nHelp object to deal with Flask applications. This is usually not necessary to in-\nterfacewithasit\u2019susedinternallyinthedispatchingtoclick.\napp_import_path=None\nTheapplicationimportpath\nconditional_context(\n*args,**kwds\n)\nCreates an application context or not, depending on the given parameter\nbut always works as context manager. This is just a shortcut for a common\noperation.\n247\ncreate_app=None\nOptionally a function that is passed the script info to create the instance of\ntheapplication.\ndata=None\nAdictionarywitharbitrarydatathatcanbeassociatedwiththisscriptinfo.\ndebug=None\nThe debug flag. If this is not None, the application will automatically have\nit\u2019sdebugflagoverriddenwiththisvalue.\nload_app()\nLoads the Flask app (if not yet loaded) and returns it. Calling this multiple\ntimeswilljustresultinthealreadyloadedapptobereturned.\nflask.cli.pass_script_info(\nf\n)\nflask.cli.without_appcontext(\nf\n)\nMarks a click callback so that it does not get a app context created. This only\nworks for commands directly registered to the toplevel system. This really is\nonlyusefulforveryspecialcommandsliketherunserverone.\nflask.cli.script_info_option(\n*args,**kwargs\n)\nclick.option()\nThis decorator works exactly like but is eager by default and\nScriptInfo.data\nstores the value in the . This is useful to further customize an\napplicationfactoryinverycomplexsituations.\nParameters script_info_key\u2013thisisamandatorykeywordargument\nwhichdefinesunderwhichdatakeythevalueshouldbestored.\nAspecialdecoratorthatinformsaclickcallbacktobepassedthescriptinfoobject\nasfirstargument. Thisisnormallynotusefulunlessyouimplementveryspecial\ncommands like the run command which does not want the application to be\nwithout_appcontext()\nloadedyet. Thiscanbecombinedwiththe decorator.\nflask.cli.run_command=<click.core.Commandobject>\nRunsalocaldevelopmentserverfortheFlaskapplication.\nThislocalserverisrecommendedfordevelopmentpurposesonlybutitcanalso\nbe used for simple intranet deployments. By default it will not support any sort\nofconcurrencyatalltosimplifydebugging. Thiscanbechangedwiththe\u2013with-\nthreadsoptionwhichwillenablebasicmultithreading.\nThe reloader and debugger are by default enabled if the debug flag of Flask is\nenabledanddisabledotherwise.\nflask.cli.shell_command=<click.core.Commandobject>\nRuns an interactive Python shell in the context of a given Flask application. The\napplication will populate the default namespace of this shell according to it\u2019s\nconfiguration.\nThis is useful for executing small snippets of management code without having\ntomanuallyconfiguringtheapplication.\n248\nPart III\nADDITIONAL NOTES\nDesignnotes,legalinformationandchangelogareherefortheinterested.\n249\n250\n24\nCHAPTER\nDesign Decisions in Flask\nIf you are curious why Flask does certain things the way it does and not differently,\nthissectionisforyou. Thisshouldgiveyouanideaaboutsomeofthedesigndecisions\nthatmay appeararbitraryand surprisingatfirst, especiallyin directcomparisonwith\notherframeworks.\n24.1 The Explicit Application Object\nA Python web application based on WSGI has to have one central callable object that\nFlask\nimplements the actual application. In Flask this is an instance of the class. Each\nFlask application has to create an instance of this class itself and pass it the name of\nthemodule,butwhycan\u2019tFlaskdothatitself?\nWithoutsuchanexplicitapplicationobjectthefollowingcode:\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\u2019/\u2019)\ndef index():\nreturn \u2019Hello World!\u2019\nWouldlooklikethisinstead:\nfrom hypothetical_flask import route\n@route(\u2019/\u2019)\ndef index():\nreturn \u2019Hello World!\u2019\nThere are three major reasons for this. The most important one is that implicit appli-\ncation objects require that there may only be one instance at the time. There are ways\nto fake multiple applications with a single application object, like maintaining a stack\nof applications, but this causes some problems I won\u2019t outline here in detail. Now\nthe question is: when does a microframework need more than one application at the\n251\nsame time? A good example for this is unittesting. When you want to test something\nit can be very helpful to create a minimal application to test specific behavior. When\ntheapplicationobjectisdeletedeverythingitallocatedwillbefreedagain.\nAnotherthingthatbecomespossiblewhenyouhaveanexplicitobjectlyingaroundin\nFlask\nyourcodeisthatyoucansubclassthebaseclass( )toalterspecificbehavior. This\nwould not be possible without hacks if the object were created ahead of time for you\nbasedonaclassthatisnotexposedtoyou.\nButthereisanotherveryimportantreasonwhyFlaskdependsonanexplicitinstantia-\ntionofthatclass: thepackagename. WheneveryoucreateaFlaskinstanceyouusually\npassit__name__aspackagename. Flaskdependsonthatinformationtoproperlyload\nresourcesrelativetoyourmodule. WithPython\u2019soutstandingsupportforreflectionit\ncanthenaccessthepackagetofigureoutwherethetemplatesandstaticfilesarestored\nopen_resource()\n(see ). Nowobviouslythereareframeworksaroundthatdonotneed\nany configuration and will still be able to load templates relative to your application\nmodule. But they have to use the current working directory for that, which is a very\nunreliablewaytodeterminewheretheapplicationis. Thecurrentworkingdirectoryis\nprocess-wideandifyouarerunningmultipleapplicationsinoneprocess(whichcould\nhappeninawebserverwithoutyouknowing)thepathswillbeoff. Worse: manyweb-\nserversdonotsettheworkingdirectorytothedirectoryofyourapplicationbuttothe\ndocumentrootwhichdoesnothavetobethesamefolder.\nThe third reason is \u201cexplicit is better than implicit\u201d. That object is your WSGI ap-\nplication, you don\u2019t have to remember anything else. If you want to apply a WSGI\nmiddleware, just wrap it and you\u2019re done (though there are better ways to do that so\nwsgi_app()\nthatyoudonotlosethereferencetotheapplicationobject ).\nFurthermorethisdesignmakesitpossibletouseafactoryfunctiontocreatetheappli-\ncationwhichisveryhelpfulforunittestingandsimilarthings(ApplicationFactories).\n24.2 The Routing System\nFlask uses the Werkzeug routing system which was designed to automatically order\nroutes by complexity. This means that you can declare routes in arbitrary order and\nthey will still work as expected. This is a requirement if you want to properly imple-\nmentdecoratorbasedroutingsincedecoratorscouldbefiredinundefinedorderwhen\ntheapplicationissplitintomultiplemodules.\nAnotherdesigndecisionwiththeWerkzeugroutingsystemisthatroutesinWerkzeug\ntrytoensurethatURLsareunique. Werkzeugwillgoquitefarwiththatinthatitwill\nautomaticallyredirecttoacanonicalURLifarouteisambiguous.\n24.3 One Template Engine\nFlaskdecidesononetemplateengine: Jinja2. Whydoesn\u2019tFlaskhaveapluggabletem-\nplate engine interface? You can obviously use a different template engine, but Flask\n252\nwill still configure Jinja2 for you. While that limitation that Jinja2 is always configured\nwill probably go away, the decision to bundle one template engine and use that will\nnot.\nTemplate engines are like programming languages and each of those engines has a\ncertainunderstandingabouthowthingswork. Onthesurfacetheyallworkthesame:\nyou tell the engine to evaluate a template with a set of variables and take the return\nvalueasstring.\nBut that\u2019s about where similarities end. Jinja2 for example has an extensive filter sys-\ntem, a certain way to do template inheritance, support for reusable blocks (macros)\nthat can be used from inside templates and also from Python code, uses Unicode for\nall operations, supports iterative template rendering, configurable syntax and more.\nOntheotherhandanenginelikeGenshiisbasedonXMLstreamevaluation,template\ninheritance by taking the availability of XPath into account and more. Mako on the\notherhandtreatstemplatessimilartoPythonmodules.\nWhen it comes to connecting a template engine with an application or framework\nthere is more than just rendering templates. For instance, Flask uses Jinja2\u2019s extensive\nautoescapingsupport. AlsoitprovideswaystoaccessmacrosfromJinja2templates.\nA template abstraction layer that would not take the unique features of the template\nenginesawayisascienceonitsownandatoolargeundertakingforamicroframework\nlikeFlask.\nFurthermore extensions can then easily depend on one template language being\npresent. You can easily use your own templating language, but an extension could\nstilldependonJinjaitself.\n24.4 Micro with Dependencies\nWhy does Flask call itself a microframework and yet it depends on two libraries\n(namely Werkzeug and Jinja2). Why shouldn\u2019t it? If we look over to the Ruby side of\nweb development there we have a protocol very similar to WSGI. Just that it\u2019s called\nRack there, but besides that it looks very much like a WSGI rendition for Ruby. But\nnearly all applications in Ruby land do not work with Rack directly, but on top of a\nlibrary with the same name. This Rack library has two equivalents in Python: WebOb\n(formerly Paste) and Werkzeug. Paste is still around but from my understanding it\u2019s\nsort of deprecated in favour of WebOb. The development of WebOb and Werkzeug\nstartedsidebysidewithsimilarideasinmind: beagoodimplementationofWSGIfor\notherapplicationstotakeadvantage.\nFlask is a framework that takes advantage of the work already done by Werkzeug to\nproperly interface WSGI (which can be a complex task at times). Thanks to recent\ndevelopments in the Python package infrastructure, packages with dependencies are\nnolongeranissueandthereareveryfewreasonsagainsthavinglibrariesthatdepend\nonothers.\n253\n24.5 Thread Locals\nFlask uses thread local objects (context local objects in fact, they support greenlet con-\ntexts as well) for request, session and an extra object you can put your own things on\ng\n( ). Whyisthatandisn\u2019tthatabadidea?\nYes it is usually not such a bright idea to use thread locals. They cause troubles for\nserversthatarenotbasedontheconceptofthreadsandmakelargeapplicationsharder\ntomaintain. HoweverFlaskisjustnotdesignedforlargeapplicationsorasynchronous\nservers. Flaskwantstomakeitquickandeasytowriteatraditionalwebapplication.\nAlsoseetheBecomingBigsectionofthedocumentationforsomeinspirationforlarger\napplicationsbasedonFlask.\n24.6 What Flask is, What Flask is Not\nFlask will never have a database layer. It will not have a form library or anything else\nin that direction. Flask itself just bridges to Werkzeug to implement a proper WSGI\napplicationandtoJinja2tohandletemplating. Italsobindstoafewcommonstandard\nlibrarypackagessuchaslogging. Everythingelseisupforextensions.\nWhyisthisthecase? Becausepeoplehavedifferentpreferencesandrequirementsand\nFlask could not meet those if it would force any of this into the core. The majority\nof web applications will need a template engine in some sort. However not every\napplicationneedsaSQLdatabase.\nThe idea of Flask is to build a good foundation for all applications. Everything else is\nuptoyouorextensions.\n254\n25\nCHAPTER\nHTML/XHTML FAQ\nThe Flask documentation and example applications are using HTML5. You may no-\ntice that in many situations, when end tags are optional they are not used, so that\ntheHTMLiscleanerandfastertoload. BecausethereismuchconfusionaboutHTML\nandXHTMLamongdevelopers,thisdocumenttriestoanswersomeofthemajorques-\ntions.\n25.1 History of XHTML\nFor a while, it appeared that HTML was about to be replaced by XHTML. However,\nbarely any websites on the Internet are actual XHTML (which is HTML processed us-\ning XML rules). There are a couple of major reasons why this is the case. One of\nthem is Internet Explorer\u2019s lack of proper XHTML support. The XHTML spec states\nthat XHTML must be served with the MIME type application/xhtml+xml, but Internet\nExplorer refuses to read files with that MIME type. While it is relatively easy to con-\nfigure Web servers to serve XHTML properly, few people do. This is likely because\nproperlyusingXHTMLcanbequitepainful.\nOne of the most important causes of pain is XML\u2019s draconian (strict and ruthless) er-\nror handling. When an XML parsing error is encountered, the browser is supposed to\nshow the user an ugly error message, instead of attempting to recover from the error\nand display what it can. Most of the (X)HTML generation on the web is based on\nnon-XML template engines (such as Jinja, the one used in Flask) which do not protect\nyou from accidentally creating invalid XHTML. There are XML based template en-\ngines, such as Kid and the popular Genshi, but they often come with a larger runtime\noverheadand,arenotasstraightforwardtousebecausetheyhavetoobeyXMLrules.\nThe majority of users, however, assumed they were properly using XHTML. They\nwroteanXHTMLdoctypeatthetopofthedocumentandself-closedallthenecessary\n<br> <br/> <br></br>\ntags ( becomes or in XHTML). However, even if the document\nproperly validates as XHTML, what really determines XHTML/HTML processing in\nbrowsersistheMIMEtype,whichassaidbeforeisoftennotsetproperly. Sothevalid\nXHTMLwasbeingtreatedasinvalidHTML.\n255\nXHTMLalsochangedthewayJavaScriptisused. ToproperlyworkwithXHTML,pro-\ngrammers have to use the namespaced DOM interface with the XHTML namespace\ntoqueryforHTMLelements.\n25.2 History of HTML5\nDevelopment of the HTML5 specification was started in 2004 under the name \u201cWeb\nApplications 1.0\u201d by the Web Hypertext Application Technology Working Group, or\nWHATWG (which was formed by the major browser vendors Apple, Mozilla, and\nOpera) with the goal of writing a new and improved HTML specification, based on\nexisting browser behavior instead of unrealistic and backwards-incompatible specifi-\ncations.\n<title/Hello/\nFor example, in HTML4 theoretically parses exactly the same as\n<title>Hello</title>\n. However,sincepeoplewereusingXHTML-liketagsalongthe\n<link />\nlines of , browser vendors implemented the XHTML syntax over the syntax\ndefinedbythespecification.\nIn2007,thespecificationwasadoptedasthebasisofanewHTMLspecificationunder\nthe umbrella of the W3C, known as HTML5. Currently, it appears that XHTML is\nlosing traction, as the XHTML 2 working group has been disbanded and HTML5 is\nbeingimplementedbyallmajorbrowservendors.\n25.3 HTML versus XHTML\nThe following table gives you a quick overview of features available in HTML 4.01,\nXHTML 1.1 and HTML5. (XHTML 1.0 is not included, as it was superseded by\nXHTML1.1andthebarely-usedXHTML5.)\n256\nHTML4.01 XHTML1.1 HTML5\n<tag/value/ == <tag>value</tag> 1\n<br/> supported 2\n<script/>\nsupported\nshouldbeservedastext/html 3\nshouldbeservedasapplication/xhtml+xml\nstricterrorhandling\ninlineSVG\ninlineMathML\n<video>\ntag\n<audio>\ntag\n<article>\nNewsemantictagslike\n25.4 What does \u201cstrict\u201d mean?\nHTML5 has strictly defined parsing rules, but it also specifies exactly how a browser\nshould react to parsing errors - unlike XHTML, which simply states parsing should\nabort. Some people are confused by apparently invalid syntax that still generates the\nexpectedresults(forexample,missingendtagsorunquotedattributevalues).\nSome of these work because of the lenient error handling most browsers use when\ntheyencounteramarkuperror,othersareactuallyspecified. Thefollowingconstructs\nareoptionalinHTML5bystandard,buthavetobesupportedbybrowsers:\n<html>\n\u2022 Wrappingthedocumentinan tag\n<head> <body>\n\u2022 Wrappingheaderelementsin orthebodyelementsin\n<p> <li> <dt> <dd> <tr> <td> <th> <tbody> <thead> <tfoot>\n\u2022 Closing the , , , , , , , , , or\ntags.\n\u2022 Quoting attributes, so long as they contain no whitespace or special characters\n< > \u2019 \"\n(like , , ,or ).\n\u2022 Requiringbooleanattributestohaveavalue.\nThismeansthefollowingpageinHTML5isperfectlyvalid:\n<!doctype html>\n<title>Hello HTML5</title>\n1ThisisanobscurefeatureinheritedfromSGML.Itisusuallynotsupportedbybrowsers,forreasons\ndetailedabove.\n2This is for compatibility with server code that generates XHTML for tags such as <br>. It should\nnotbeusedinnewcode.\n3XHTML 1.0 is the last XHTML standard that allows to be served as text/html for backwards com-\npatibilityreasons.\n257\n<div class=header>\n<h1>Hello HTML5</h1>\n<p class=tagline>HTML5 is awesome\n</div>\n<ul class=nav>\n<li><a href=/index>Index</a>\n<li><a href=/downloads>Downloads</a>\n<li><a href=/about>About</a>\n</ul>\n<div class=body>\n<h2>HTML5 is probably the future</h2>\n<p>\nThere might be some other things around but in terms of\nbrowser vendor support, HTML5 is hard to beat.\n<dl>\n<dt>Key 1\n<dd>Value 1\n<dt>Key 2\n<dd>Value 2\n</dl>\n</div>\n25.5 New technologies in HTML5\nHTML5 adds many new features that make Web applications easier to write and to\nuse.\n<audio> <video>\n\u2022 The and tagsprovideawaytoembedaudioandvideowithout\ncomplicatedadd-onslikeQuickTimeorFlash.\n<article> <header> <nav> <time>\n\u2022 Semantic elements like , , , and that make con-\ntenteasiertounderstand.\n<canvas>\n\u2022 The tag, which supports a powerful drawing API, reducing the need\nforserver-generatedimagestopresentdatagraphically.\n<input type=\"date\">\n\u2022 Newformcontroltypeslike thatallowuseragentstomake\nenteringandvalidatingvalueseasier.\n\u2022 Advanced JavaScript APIs like Web Storage, Web Workers, Web Sockets, geolo-\ncation,andofflineapplications.\nMany other features have been added, as well. A good guide to new features in\nHTML5 is Mark Pilgrim\u2019s soon-to-be-published book, Dive Into HTML5. Not all of\nthemaresupportedinbrowsersyet,however,sousecaution.\n258\n25.6 What should be used?\nCurrently,theanswerisHTML5. ThereareveryfewreasonstouseXHTMLconsider-\ningthelatestdevelopmentsinWebbrowsers. Tosummarizethereasonsgivenabove:\n\u2022 Internet Explorer (which, sadly, currently leads in market share) has poor sup-\nportforXHTML.\n\u2022 Many JavaScript libraries also do not support XHTML, due to the more compli-\ncatednamespacingAPIitrequires.\n\u2022 HTML5addsseveralnewfeatures,includingsemantictagsandthelong-awaited\n<audio> <video>\nand tags.\n\u2022 Ithasthesupportofmostbrowservendorsbehindit.\n\u2022 Itismucheasiertowrite,andmorecompact.\nFormostapplications,itisundoubtedlybettertouseHTML5thanXHTML.\n259\n260\n26\nCHAPTER\nSecurity Considerations\nWeb applications usually face all kinds of security problems and it\u2019s very hard to get\neverything right. Flask tries to solve a few of these things for you, but there are a\ncouplemoreyouhavetotakecareofyourself.\n26.1 Cross-Site Scripting (XSS)\nCrosssitescriptingistheconceptofinjectingarbitraryHTML(andwithitJavaScript)\ninto the context of a website. To remedy this, developers have to properly escape text\nso that it cannot include arbitrary HTML tags. For more information on that have a\nlookattheWikipediaarticleonCross-SiteScripting.\nFlask configures Jinja2 to automatically escape all values unless explicitly told other-\nwise. This should rule out all XSS problems caused in templates, but there are still\notherplaceswhereyouhavetobecareful:\n\u2022 generatingHTMLwithoutthehelpofJinja2\nMarkup\n\u2022 calling ondatasubmittedbyusers\n\u2022 sending out HTML from uploaded files, never do that, use the Content-\nDisposition: attachmentheadertopreventthatproblem.\n\u2022 sendingout textfilesfrom uploadedfiles. Somebrowsers are usingcontent-type\nguessing based on the first few bytes so users could trick a browser to execute\nHTML.\nAnotherthingthatisveryimportantareunquotedattributes. WhileJinja2canprotect\nyoufromXSSissuesbyescapingHTML,thereisonethingitcannotprotectyoufrom:\nXSS by attribute injection. To counter this possible attack vector, be sure to always\nquoteyourattributeswitheitherdoubleorsinglequoteswhenusingJinjaexpressions\ninthem:\n<a href=\"{{ href }}\">the text</a>\n261\nWhyisthisnecessary? Becauseifyouwouldnotbedoingthat,anattackercouldeasily\ninject custom JavaScript handlers. For example an attacker could inject this piece of\nHTML+JavaScript:\nonmouseover=alert(document.cookie)\nWhen the user would then move with the mouse over the link, the cookie would be\npresented to the user in an alert window. But instead of showing the cookie to the\nuser, a good attacker might also execute any other JavaScript code. In combination\nwith CSS injections the attacker might even make the element fill out the entire page\nso that the user would just have to have the mouse anywhere on the page to trigger\ntheattack.\n26.2 Cross-Site Request Forgery (CSRF)\nAnother big problem is CSRF. This is a very complex topic and I won\u2019t outline it here\nindetailjustmentionwhatitisandhowtotheoreticallypreventit.\nIf your authentication information is stored in cookies, you have implicit state man-\nagement. The state of \u201cbeing logged in\u201d is controlled by a cookie, and that cookie is\nsent with each request to a page. Unfortunately that includes requests triggered by\n3rdpartysites. Ifyoudon\u2019tkeepthatinmind,somepeoplemightbeabletotrickyour\napplication\u2019suserswithsocialengineeringtodostupidthingswithoutthemknowing.\nSayyouhaveaspecificURLthat,whenyousentPOST requeststowilldeleteauser\u2019s\nprofile (say http://example.com/user/delete). If an attacker now creates a page that sends\na post request to that page with some JavaScript they just has to trick some users to\nloadthatpageandtheirprofileswillendupbeingdeleted.\nImagine you were to run Facebook with millions of concurrent users and someone\nwould send out links to images of little kittens. When users would go to that page,\ntheirprofileswouldgetdeletedwhiletheyarelookingatimagesoffluffycats.\nHow can you prevent that? Basically for each request that modifies content on the\nserver you would have to either use a one-time token and store that in the cookie and\nalso transmit it with the form data. After receiving the data on the server again, you\nwouldthenhavetocomparethetwotokensandensuretheyareequal.\nWhy does Flask not do that for you? The ideal place for this to happen is the form\nvalidationframework,whichdoesnotexistinFlask.\n26.3 JSON Security\nECMAScript5Changes\nStarting with ECMAScript 5 the behavior of literals changed. Now they are not con-\nArray\nstructed with the constructor of and others, but with the builtin constructor of\nArray\nwhichclosesthisparticularattackvector.\n262\nJSON itself is a high-level serialization format, so there is barely anything that could\ncausesecurityproblems,right? Youcan\u2019tdeclarerecursivestructuresthatcouldcause\nproblems and the only thing that could possibly break are very large responses that\ncancausesomekindofdenialofserviceatthereceiver\u2019sside.\nHowever there is a catch. Due to how browsers work the CSRF issue comes up with\nJSON unfortunately. Fortunately there is also a weird part of the JavaScript specifica-\ntionthatcanbeusedtosolvethatproblemeasilyandFlaskiskindadoingthatforyou\nby preventing you from doing dangerous stuff. Unfortunately that protection is only\njsonify()\ntherefor soyouarestillatriskwhenusingotherwaystogenerateJSON.\nSowhatistheissueandhowtoavoidit? Theproblemarearraysattop-levelinJSON.\nImagine you send the following data out in a JSON request. Say that\u2019s exporting the\nnames and email addresses of all your friends for a part of the user interface that is\nwritteninJavaScript. Notveryuncommon:\n[\n{\"username\": \"admin\",\n\"email\": \"admin@localhost\"}\n]\nAnditisdoingthatofcourseonlyaslongasyouareloggedinandonlyforyou. And\nit is doing that for all GET requests to a certain URL, say the URL for that request is\nhttp://example.com/api/get_friends.json\n.\nSo now what happens if a clever hacker is embedding this to his website and social\nengineersavictimtovisitinghissite:\n<script type=text/javascript>\nvar captured = [];\nvar oldArray = Array;\nfunction Array() {\nvar obj = this, id = 0, capture = function(value) {\nobj.__defineSetter__(id++, capture);\nif (value)\ncaptured.push(value);\n};\ncapture();\n}\n</script>\n<script type=text/javascript\nsrc=http://example.com/api/get_friends.json></script>\n<script type=text/javascript>\nArray = oldArray;\n// now we have all the data in the captured array.\n</script>\nIf you know a bit of JavaScript internals you might know that it\u2019s possible to patch\nconstructors and register callbacks for setters. An attacker can use this (like above)\nto get all the data you exported in your JSON file. The browser will totally ignore\napplication/json text/javascript\nthe mimetype if is defined as content type in the\n263\nscripttagandevaluatethatasJavaScript. Becausetop-levelarrayelementsareallowed\n(albeituseless)andwehookedinourownconstructor,afterthatpageloadedthedata\nfromtheJSONresponseisinthecapturedarray.\n{...}\nBecause it is a syntax error in JavaScript to have an object literal ( ) toplevel an\nattacker could not just do a request to an external URL with the script tag to load up\nthe data. So what Flask does is to only allow objects as toplevel elements when using\njsonify()\n. MakesuretodothesamewhenusinganordinaryJSONgeneratefunction.\n264\n27\nCHAPTER\nUnicode in Flask\nFlask, like Jinja2 and Werkzeug, is totally Unicode based when it comes to text. Not\nonly these libraries, also the majority of web related Python libraries that deal with\ntext. If you don\u2019t know Unicode so far, you should probably read The Absolute Min-\nimum Every Software Developer Absolutely, Positively Must Know About Unicode\nand Character Sets. This part of the documentation just tries to cover the very basics\nsothatyouhaveapleasantexperiencewithUnicoderelatedthings.\n27.1 Automatic Conversion\nFlaskhasafewassumptionsaboutyourapplication(whichyoucanchangeofcourse)\nthatgiveyoubasicandpainlessUnicodesupport:\n\u2022 theencodingfortextonyourwebsiteisUTF-8\n\u2022 internally you will always use Unicode exclusively for text except for literal\nstringswithonlyASCIIcharacterpoints.\n\u2022 encoding and decoding happens whenever you are talking over a protocol that\nrequiresbytestobetransmitted.\nSowhatdoesthismeantoyou?\nHTTP is based on bytes. Not only the protocol, also the system used to address doc-\numents on servers (so called URIs or URLs). However HTML which is usually trans-\nmitted on top of HTTP supports a large variety of character sets and which ones are\nused, are transmitted in an HTTP header. To not make this too complex Flask just\nassumes that if you are sending Unicode out you want it to be UTF-8 encoded. Flask\nwilldotheencodingandsettingoftheappropriateheadersforyou.\nThe same is true if you are talking to databases with the help of SQLAlchemy or a\nsimilar ORM system. Some databases have a protocol that already transmits Unicode\nandiftheydonot,SQLAlchemyoryourotherORMshouldtakecareofthat.\n265\n27.2 The Golden Rule\nSo the rule of thumb: if you are not dealing with binary data, work with Unicode.\nWhatdoesworkingwithUnicodeinPython2.xmean?\n\u2022 aslongasyouareusingASCIIcharpointsonly(basicallynumbers,somespecial\ncharactersoflatinletterswithoutumlautsoranythingfancy)youcanuseregular\n\u2019Hello World\u2019\nstringliterals( ).\n\u2022 if you need anything else than ASCII in a string you have to mark this string as\nu\u2019H\u00e4nsel und Gretel\u2019\nUnicodestringbyprefixingitwithalowercaseu. (like )\n\u2022 if you are using non-Unicode characters in your Python files you have to tell\nPython which encoding your file uses. Again, I recommend UTF-8 for this pur-\n# -*- coding: utf-8\npose. Totelltheinterpreteryourencodingyoucanputthe\n-*-\nintothefirstorsecondlineofyourPythonsourcefile.\n\u2022 Jinja is configured to decode the template files from UTF-8. So make sure to tell\nyoureditortosavethefileasUTF-8thereaswell.\n27.3 Encoding and Decoding Yourself\nIf you are talking with a filesystem or something that is not really based on Unicode\nyou will have to ensure that you decode properly when working with Unicode inter-\nface. So for example if you want to load a file on the filesystem and embed it into a\nJinja2 template you will have to decode it from the encoding of that file. Here the old\nproblem that text files do not specify their encoding comes into play. So do yourself a\nfavourandlimityourselftoUTF-8fortextfilesaswell.\nstr.decode()\nAnyways. To load such a file with Unicode you can use the built-in\nmethod:\ndef read_file(filename, charset=\u2019utf-8\u2019):\nwith open(filename, \u2019r\u2019) as f:\nreturn f.read().decode(charset)\nTo go from Unicode into a specific charset such as UTF-8 you can use the\nunicode.encode()\nmethod:\ndef write_file(filename, contents, charset=\u2019utf-8\u2019):\nwith open(filename, \u2019w\u2019) as f:\nf.write(contents.encode(charset))\n27.4 Configuring Editors\nMost editors save as UTF-8 by default nowadays but in case your editor is not config-\nured to do this you have to change it. Here some common ways to set your editor to\nstoreasUTF-8:\n266\nset enc=utf-8 .vimrc\n\u2022 Vim: put toyour file.\n.emacs\n\u2022 Emacs: eitheruseanencodingcookieorputthisintoyour file:\n(prefer-coding-system \u2019utf-8)\n(setq default-buffer-file-coding-system \u2019utf-8)\n\u2022 Notepad++:\n1. GotoSettings->Preferences...\n2. Selectthe\u201cNewDocument/DefaultDirectory\u201dtab\n3. Select\u201cUTF-8withoutBOM\u201dasencoding\nIt is also recommended to use the Unix newline format, you can select it in the\nsamepanelbutthisisnotarequirement.\n267\n268\n28\nCHAPTER\nFlask Extension Development\nFlask,beingamicroframework,oftenrequiressomerepetitivestepstogetathirdparty\nlibrary working. Because very often these steps could be abstracted to support multi-\npleprojectstheFlaskExtensionRegistrywascreated.\nIf you want to create your own Flask extension for something that does not exist yet,\nthis guide to extension development will help you get your extension running in no\ntimeandtofeellikeuserswouldexpectyourextensiontobehave.\n28.1 Anatomy of an Extension\nflask_something\nExtensions are all located in a package called where \u201csomething\u201d is\nthenameofthelibraryyouwanttobridge. Soforexampleifyouplantoaddsupport\nfor a library named simplexml to Flask, you would name your extension\u2019s package\nflask_simplexml\n.\nThenameoftheactualextension(thehumanreadablename)howeverwouldbesome-\nthing like \u201cFlask-SimpleXML\u201d. Make sure to include the name \u201cFlask\u201d somewhere in\nthat name and that you check the capitalization. This is how users can then register\ndependenciestoyourextensionintheirsetup.pyfiles.\nflask.ext\nFlask sets up a redirect package called where users should import the ex-\nflask_something\ntensionsfrom. Ifyouforinstancehaveapackagecalled userswould\nflask.ext.something\nimport it as . This is done to transition from the old namespace\npackages. SeeExtensionImportTransitionformoredetails.\nButhowdoextensionslooklikethemselves? Anextensionhastoensurethatitworks\nwithmultipleFlaskapplicationinstancesatonce. Thisisarequirementbecausemany\npeoplewillusepatternsliketheApplicationFactoriespatterntocreatetheirapplication\nasneeded toaid unittestsandto supportmultiple configurations. Becauseofthat itis\ncrucialthatyourapplicationsupportsthatkindofbehavior.\nMost importantly the extension must be shipped with a setup.py file and registered\non PyPI. Also the development checkout link should work so that people can easily\n269\ninstallthedevelopment versionintotheirvirtualenvwithout havingtodownloadthe\nlibrarybyhand.\nFlask extensions must be licensed under a BSD, MIT or more liberal license to be able\nto be enlisted in the Flask Extension Registry. Keep in mind that the Flask Extension\nRegistry isa moderated placeand libraries willbe reviewed upfrontif they behaveas\nrequired.\n28.2 \u201cHello Flaskext!\u201d\nSo let\u2019s get started with creating such a Flask extension. The extension we want to\ncreateherewillprovideverybasicsupportforSQLite3.\nFirstwecreatethefollowingfolderstructure:\nflask-sqlite3/\nflask_sqlite3.py\nLICENSE\nREADME\nHere\u2019sthecontentsofthemostimportantfiles:\n28.2.1 setup.py\nThenextfilethatisabsolutelyrequiredisthesetup.pyfilewhichisusedtoinstallyour\nFlaskextension. Thefollowingcontentsaresomethingyoucanworkwith:\n\"\"\"\nFlask-SQLite3\n-------------\nThis is the description for that library\n\"\"\"\nfrom setuptools import setup\nsetup(\nname=\u2019Flask-SQLite3\u2019,\nversion=\u20191.0\u2019,\nurl=\u2019http://example.com/flask-sqlite3/\u2019,\nlicense=\u2019BSD\u2019,\nauthor=\u2019Your Name\u2019,\nauthor_email=\u2019your-email@example.com\u2019,\ndescription=\u2019Very short description\u2019,\nlong_description=__doc__,\npy_modules=[\u2019flask_sqlite3\u2019],\n# if you would be using a package instead use packages instead\n# of py_modules:\n# packages=[\u2019flask_sqlite3\u2019],\n270\nzip_safe=False,\ninclude_package_data=True,\nplatforms=\u2019any\u2019,\ninstall_requires=[\n\u2019Flask\u2019\n],\nclassifiers=[\n\u2019Environment :: Web Environment\u2019,\n\u2019Intended Audience :: Developers\u2019,\n\u2019License :: OSI Approved :: BSD License\u2019,\n\u2019Operating System :: OS Independent\u2019,\n\u2019Programming Language :: Python\u2019,\n\u2019Topic :: Internet :: WWW/HTTP :: Dynamic Content\u2019,\n\u2019Topic :: Software Development :: Libraries :: Python Modules\u2019\n]\n)\nThat\u2019s a lot of code but you can really just copy/paste that from existing extensions\nandadapt.\n28.2.2 flask_sqlite3.py\nNow this is where your extension code goes. But how exactly should such an exten-\nsionlooklike? Whatarethebestpractices? Continuereadingforsomeinsight.\n28.3 Initializing Extensions\nMany extensions will need some kind of initialization step. For example, consider an\napplicationthat\u2019scurrentlyconnectingtoSQLitelikethedocumentationsuggests(Us-\ning SQLite 3 with Flask). So how does the extension know the name of the application\nobject?\nQuitesimple: youpassittoit.\nTherearetworecommendedwaysforanextensiontoinitialize:\ninitializationfunctions:\nIf your extension is called helloworld you might have a function called\ninit_helloworld(app[, extra_args])\nthatinitializestheextensionforthat\napplication. Itcouldattachbefore/afterhandlersetc.\nclasses:\nClasses work mostly like initialization functions but can later be used to\nfurtherchangethebehavior. ForanexamplelookathowtheOAuthexten-\nsion works: there is an OAuth object that provides some helper functions\nlikeOAuth.remote_apptocreateareferencetoaremoteapplicationthatuses\nOAuth.\n271\nWhat to use depends on what you have in mind. For the SQLite 3 extension we will\nusetheclass-basedapproachbecauseitwillprovideuserswithanobjectthathandles\nopeningandclosingdatabaseconnections.\nWhat\u2019s important about classes is that they encourage to be shared around on mod-\nule level. In that case, the object itself must not under any circumstances store any\napplicationspecificstateandmustbeshareablebetweendifferentapplication.\n28.4 The Extension Code\nHere\u2019sthecontentsoftheflask_sqlite3.pyforcopy/paste:\nimport sqlite3\nfrom flask import current_app\n# Find the stack on which we want to store the database connection.\n# Starting with Flask 0.9, the _app_ctx_stack is the correct one,\n# before that we need to use the _request_ctx_stack.\ntry:\nfrom flask import _app_ctx_stack as stack\nexcept ImportError:\nfrom flask import _request_ctx_stack as stack\nclass SQLite3(object):\ndef __init__(self, app=None):\nself.app = app\nif app is not None:\nself.init_app(app)\ndef init_app(self, app):\napp.config.setdefault(\u2019SQLITE3_DATABASE\u2019, \u2019:memory:\u2019)\n# Use the newstyle teardown_appcontext if it\u2019s available,\n# otherwise fall back to the request context\nif hasattr(app, \u2019teardown_appcontext\u2019):\napp.teardown_appcontext(self.teardown)\nelse:\napp.teardown_request(self.teardown)\ndef connect(self):\nreturn sqlite3.connect(current_app.config[\u2019SQLITE3_DATABASE\u2019])\ndef teardown(self, exception):\nctx = stack.top\nif hasattr(ctx, \u2019sqlite3_db\u2019):\nctx.sqlite3_db.close()\n@property\n272\ndef connection(self):\nctx = stack.top\nif ctx is not None:\nif not hasattr(ctx, \u2019sqlite3_db\u2019):\nctx.sqlite3_db = self.connect()\nreturn ctx.sqlite3_db\nSohere\u2019swhattheselinesofcodedo:\n__init__\n1. The method takes an optional app object and, if supplied, will call\ninit_app\n.\ninit_app SQLite3\n2. The method exists so that the object can be instantiated with-\nout requiring an app object. This method supports the factory pattern for cre-\ninit_app\nating applications. The will set the configuration for the database, de-\nfaulting to an in memory database if no configuration is supplied. In addition,\ninit_app teardown\nthe method attaches the handler. It will try to use the new-\nstyleappcontexthandlerandifitdoesnotexist,fallsbacktotherequestcontext\none.\nconnect\n3. Next,wedefinea methodthatopensadatabaseconnection.\nconnection\n4. Finally, we add a property that on first access opens the database\nconnection and stores it on the context. This is also the recommended way to\nhandlingresources: fetchresourceslazilythefirsttimetheyareused.\nNote here that we\u2019re attaching our database connection to the top application\n_app_ctx_stack.top\ncontext via . Extensions should use the top context for stor-\ning their own information with a sufficiently complex name. Note that we\u2019re\n_request_ctx_stack.top\nfalling back to the if the application is using an older\nversionofFlaskthatdoesnotsupportit.\nSo why did we decide on a class-based approach here? Because using our extension\nlookssomethinglikethis:\nfrom flask import Flask\nfrom flask_sqlite3 import SQLite3\napp = Flask(__name__)\napp.config.from_pyfile(\u2019the-config.cfg\u2019)\ndb = SQLite3(app)\nYoucanthenusethedatabasefromviewslikethis:\n@app.route(\u2019/\u2019)\ndef show_all():\ncur = db.connection.cursor()\ncur.execute(...)\nLikewise if you are outside of a request but you are using Flask 0.9 or later with the\nappcontextsupport,youcanusethedatabaseinthesameway:\n273\nwith app.app_context():\ncur = db.connection.cursor()\ncur.execute(...)\nAttheendofthewithblocktheteardownhandleswillbeexecutedautomatically.\ninit_app\nAdditionally, the method is used to support the factory pattern for creating\napps:\ndb = Sqlite3()\n# Then later on.\napp = create_app(\u2019the-config.cfg\u2019)\ndb.init_app(app)\nKeep in mind that supporting this factory pattern for creating apps is required for\napprovedflaskextensions(describedbelow).\nNoteoninit_app\ninit_app app self\nAs you noticed, does not assign to . This is intentional! Class based\nFlask extensions must only store the application on the object when the application\nwas passed to the constructor. This tells the extension: I am not interested in using\nmultipleapplications.\nWhen the extension needs to find the current application and it does not have a refer-\ncurrent_app\nence to it, it must either use the context local or change the API in a way\nthatyoucanpasstheapplicationexplicitly.\n28.5 Using _app_ctx_stack\nsqlite3_db\nIn the example above, before every request, a variable is assigned\n_app_ctx_stack.top\nto . In a view function, this variable is accessible using the\nconnection SQLite3 sqlite3_db\nproperty of . During the teardown of a request, the\nconnectionisclosed. Byusingthispattern,thesameconnectiontothesqlite3database\nisaccessibletoanythingthatneedsitforthedurationoftherequest.\n_app_ctx_stack\nIfthe doesnotexistbecausetheuserusesanoldversionofFlask,itis\n_request_ctx_stack\nrecommendedtofallbackto whichisboundtoarequest.\n28.6 Teardown Behavior\nThisisonlyrelevantifyouwanttosupportFlask0.6andolder\nDuetothechangeinFlask0.7regardingfunctionsthatarerunattheendoftherequest\nyour extension will have to be extra careful there if it wants to continue to support\nolderversionsofFlask. Thefollowingpatternisagoodwaytosupportboth:\n274\ndef close_connection(response):\nctx = _request_ctx_stack.top\nctx.sqlite3_db.close()\nreturn response\nif hasattr(app, \u2019teardown_request\u2019):\napp.teardown_request(close_connection)\nelse:\napp.after_request(close_connection)\nStrictlyspeakingtheabovecodeiswrong,becauseteardownfunctionsarepassedthe\nexception and typically don\u2019t return anything. However because the return value is\ndiscarded this will just work assuming that the code in between does not touch the\npassedparameter.\n28.7 Learn from Others\nThis documentation only touches the bare minimum for extension development. If\nyou want to learn more, it\u2019s a very good idea to check out existing extensions on the\nFlaskExtensionRegistry. IfyoufeellostthereisstillthemailinglistandtheIRCchan-\nnel to get some ideas for nice looking APIs. Especially if you do something nobody\nbefore you did, it might be a very good idea to get some more input. This not only\nto get an idea about what people might want to have from an extension, but also to\navoidhavingmultipledevelopersworkingonprettymuchthesamesidebyside.\nRemember: goodAPIdesignishard,sointroduceyourprojectonthemailinglist,and\nletotherdevelopersgiveyouahelpinghandwithdesigningtheAPI.\nThe best Flask extensions are extensions that share common idioms for the API. And\nthiscanonlyworkifcollaborationhappensearly.\n28.8 Approved Extensions\nFlask also has the concept of approved extensions. Approved extensions are tested as\npartofFlaskitselftoensureextensionsdonotbreakonnewreleases. Theseapproved\nextensionsarelistedontheFlaskExtensionRegistryandmarkedappropriately. Ifyou\nwantyourownextensiontobeapprovedyouhavetofollowtheseguidelines:\n0. An approved Flask extension requires a maintainer. In the event an extension\nauthor would like to move beyond the project, the project should find a new\nmaintainer including full source hosting transition and PyPI access. If no main-\ntainerisavailable,giveaccesstotheFlaskcoreteam.\n1. An approved Flask extension must provide exactly one package or module\nflask_extensionname flaskext\nnamed . They might also reside inside a names-\npacepackagesthoughthisisdiscouragednow.\n275\nmake test python\n2. It must ship a testing suite that can either be invoked with or\nsetup.py test make test\n. For test suites invoked with the extension has to\nensure that all dependencies for the test are installed automatically. If tests are\npython setup.py test\ninvoked with , test dependencies can be specified in the\nsetup.pyfile. Thetestsuitealsohastobepartofthedistribution.\n3. APIsofapprovedextensionswillbecheckedforthefollowingcharacteristics:\n\u2022 an approved extension has to support multiple applications running in the\nsamePythonprocess.\n\u2022 itmustbepossibletousethefactorypatternforcreatingapplications.\n4. ThelicensemustbeBSD/MIT/WTFPLlicensed.\n5. The naming scheme for official extensions is Flask-ExtensionName or\nExtensionName-Flask.\n6. Approved extensions must define all their dependencies in the setup.py file un-\nlessadependencycannotbemetbecauseitisnotavailableonPyPI.\n7. The extension must have documentation that uses one of the two Flask themes\nforSphinxdocumentation.\n8. The setup.py description (and thus the PyPI description) has to link to the doc-\numentation, website (if there is one) and there must be a link to automatically\nPackageName==dev\ninstallthedevelopmentversion( ).\nzip_safe False\n9. The flag in the setup script must be set to , even if the extension\nwouldbesafeforzipping.\n10. AnextensioncurrentlyhastosupportPython2.6aswellasPython2.7\n28.9 Extension Import Transition\nFor a while we recommended using namespace packages for Flask extensions. This\nturnedouttobeproblematicinpracticebecausemanydifferentcompetingnamespace\npackagesystemsexistandpipwouldautomaticallyswitchbetweendifferentsystems\nandthiscausedalotofproblemsforusers.\nflask_foo\nInstead we now recommend naming packages instead of the now depre-\nflaskext.foo\ncated . Flask0.8introducesaredirectimportsystemthatletsusesimport\nflask.ext.foo flask_foo flaskext.foo\nfrom anditwilltry firstandifthatfails .\nflask.ext.foo flask_foo\nFlaskextensionsshouldurgeuserstoimportfrom insteadof\nflaskext_foo\nor so that extensions can transition to the new package name without\naffectingusers.\n276\n29\nCHAPTER\nPocoo Styleguide\nThe Pocoo styleguide is the styleguide for all Pocoo Projects, including Flask. This\nstyleguide is a requirement for Patches to Flask and a recommendation for Flask ex-\ntensions.\nIngeneralthePocooStyleguidecloselyfollowsPEP8withsomesmalldifferencesand\nextensions.\n29.1 General Layout\nIndentation: 4realspaces. Notabs,noexceptions.\nMaximumlinelength: 79 characters with a soft limit for 84 if absolutely necessary.\nTry to avoid too nested code by cleverly placing break, continue and return state-\nments.\nContinuinglongstatements: To continue a statement you can use backslashes in\nwhich case you should align the next line with the last dot or equal sign, or\nindentfourspaces:\nthis_is_a_very_long(function_call, \u2019with many parameters\u2019) \\\n.that_returns_an_object_with_an_attribute\nMyModel.query.filter(MyModel.scalar > 120) \\\n.order_by(MyModel.name.desc()) \\\n.limit(10)\nIfyoubreakinastatementwithparenthesesorbraces,aligntothebraces:\nthis_is_a_very_long(function_call, \u2019with many parameters\u2019,\n23, 42, \u2019and even more\u2019)\nForlistsortupleswithmanyitems,breakimmediatelyaftertheopeningbrace:\n277\nitems = [\n\u2019this is the first\u2019, \u2019set of items\u2019, \u2019with more items\u2019,\n\u2019to come in this line\u2019, \u2019like this\u2019\n]\nBlanklines: Top level functions and classes are separated by two lines, everything\nelse by one. Do not use too many blank lines to separate logical segments in\ncode. Example:\ndef hello(name):\nprint \u2019Hello %s!\u2019 % name\ndef goodbye(name):\nprint \u2019See you %s.\u2019 % name\nclass MyClass(object):\n\"\"\"This is a simple docstring\"\"\"\ndef __init__(self, name):\nself.name = name\ndef get_annoying_name(self):\nreturn self.name.upper() + \u2019!!!!111\u2019\n29.2 Expressions and Statements\nGeneralwhitespacerules:\n- ~\n\u2022 Nowhitespaceforunaryoperatorsthatarenotwords(e.g.: , etc.) aswell\nontheinnersideofparentheses.\n\u2022 Whitespaceisplacedbetweenbinaryoperators.\nGood:\nexp = -1.05\nvalue = (item_value / item_count) * offset / exp\nvalue = my_list[index]\nvalue = my_dict[\u2019key\u2019]\nBad:\nexp = - 1.05\nvalue = ( item_value / item_count ) * offset / exp\nvalue = (item_value/item_count)*offset/exp\nvalue=( item_value/item_count ) * offset/exp\nvalue = my_list[ index ]\nvalue = my_dict [\u2019key\u2019]\n278\nYodastatementsareano-go: Never compare constant with variable, always variable\nwithconstant:\nGood:\nif method == \u2019md5\u2019:\npass\nBad:\nif \u2019md5\u2019 == method:\npass\nComparisons:\n== !=\n\u2022 againstarbitrarytypes: and\nis is not foo is not None\n\u2022 againstsingletonswith and (eg: )\nfoo ==\n\u2022 never compare something with True or False (for example never do\nFalse not foo\n,do instead)\nfoo not in bar not foo in bar\nNegatedcontainmentchecks: use insteadof\nisinstance(a, C) type(A) is C\nInstancechecks: insteadof ,buttrytoavoidinstance\nchecksingeneral. Checkforfeatures.\n29.3 Naming Conventions\nCamelCase HTTPWriter\n\u2022 Class names: , with acronyms kept uppercase ( and not\nHttpWriter\n)\nlowercase_with_underscores\n\u2022 Variablenames:\nlowercase_with_underscores\n\u2022 Methodandfunctionnames:\nUPPERCASE_WITH_UNDERSCORES\n\u2022 Constants:\nname_re\n\u2022 precompiledregularexpressions:\nProtected members are prefixed with a single underscore. Double underscores are\nreservedformixinclasses.\nOn classes with keywords, trailing underscores are appended. Clashes with builtins\nareallowedandmustnotberesolvedbyappendinganunderlinetothevariablename.\nIf the function needs to access a shadowed builtin, rebind the builtin to a different\nnameinstead.\nFunctionandmethodarguments:\ncls\n\u2022 classmethods: asfirstparameter\nself\n\u2022 instancemethods: asfirstparameter\nx\n\u2022 lambdas for properties might have the first parameter replaced with like\ndisplay_name = property(lambda x: x.real_name or x.username)\nin\n279\n29.4 Docstrings\nDocstringconventions: AlldocstringsareformattedwithreStructuredTextasunder-\nstood by Sphinx. Depending on the number of lines in the docstring, they are\nlaidoutdifferently. Ifit\u2019sjustoneline,theclosingtriplequoteisonthesameline\nas the opening, otherwise the text is on the same line as the opening quote and\nthetriplequotethatclosesthestringonitsownline:\ndef foo():\n\"\"\"This is a simple docstring\"\"\"\ndef bar():\n\"\"\"This is a longer docstring with so much information in there\nthat it spans three lines. In this case the closing triple quote\nis on its own line.\n\"\"\"\nModuleheader: The module header consists of an utf-8 encoding declaration (if non\nASCII letters are used, but it is recommended all the time) and a standard doc-\nstring:\n# -*- coding: utf-8 -*-\n\"\"\"\npackage.module\n~~~~~~~~~~~~~~\nA brief description goes here.\n:copyright: (c) YEAR by AUTHOR.\n:license: LICENSE_NAME, see LICENSE_FILE for more details.\n\"\"\"\nPlease keep in mind that proper copyrights and license files are a requirement\nforapprovedFlaskextensions.\n29.5 Comments\nRules for comments are similar to docstrings. Both are formatted with reStructured-\nText. If a comment is used to document an attribute, put a colon after the opening\n#\npoundsign( ):\nclass User(object):\n#: the name of the user as unicode string\nname = Column(String)\n#: the sha1 hash of the password + inline salt\npw_hash = Column(String)\n280\n30\nCHAPTER\nPython 3 Support\nFlask and all of its dependencies support Python 3 so you can in theory start working\non italready. Thereare however afew thingsyou shouldbe aware ofbefore youstart\nusingPython3foryournextproject.\n30.1 Requirements\nIf you want to use Flask with Python 3 you will need to use Python 3.3 or higher. 3.2\nandolderarenotsupported.\nInadditiontothatyouneedtousethelatestandgreatestversionsofitsdangerous,Jinja2\nandWerkzeug.\n30.2 API Stability\nSome of the decisions made in regards to unicode and byte utilization on Python 3\nmake it hard to write low level code. This mainly affects WSGI middlewares and in-\nteracting with the WSGI provided information. Werkzeug wraps all that information\nin high-level helpers but some of those were specifically added for the Python 3 sup-\nportandarequitenew.\nA lot of the documentation out there on using WSGI leaves out those details as it was\nwrittenbeforeWSGIwasupdatedtoPython3. WhiletheAPIforWerkzeugandFlask\non Python 2.x should not change much we cannot guarantee that this won\u2019t happen\nonPython3.\n30.3 Few Users\nPython 3 currently has less than 1% of the users of Python 2 going by PyPI download\nstats. Asaresultmanyoftheproblemsyouwillencounterareprobablyhardtosearch\n281\nforontheinternetiftheyarePython3specific.\n30.4 Small Ecosystem\nThemajorityoftheFlaskextensions,allofthedocumentationandthevastmajorityof\nthePyPIprovidedlibrariesdonotsupportPython3yet. Evenifyoustartyourproject\nwith knowing that all you will need is supported by Python 3 you don\u2019t know what\nhappens six months from now. If you are adventurous you can start porting libraries\nonyourown,butthatisnothingforthefaintofheart.\n30.5 Recommendations\nUnless you are already familiar with the differences in the versions we recommend\nstickingtocurrentversionsofPythonuntiltheecosystemcaughtup.\nThe majority of the upgrade pain is in the lower-level libararies like Flask and\nWerkzeug and not in the actual high-level application code. For instance all of the\nFlaskexamplesthatareintheFlaskrepositoryworkoutoftheboxonboth2.xand3.x\nanddidnotrequireasinglelineofcodechanged.\n282\n31\nCHAPTER\nUpgrading to Newer Releases\nFlask itself is changing like any software is changing over time. Most of the changes\nare the nice kind, the kind where you don\u2019t have to change anything in your code to\nprofitfromanewrelease.\nHowever every once in a while there are changes that do require some changes in\nyour code or there are changes that make it possible for you to improve your own\ncodequalitybytakingadvantageofnewfeaturesinFlask.\nThis section of the documentation enumerates all the changes in Flask from release to\nreleaseandhowyoucanchangeyourcodetohaveapainlessupdatingexperience.\nIf you want to use the easy_install command to upgrade your Flask installation, make\n-U\nsuretopassitthe parameter:\n$ easy_install -U Flask\n31.1 Version 0.10\nThe biggest change going from 0.9 to 0.10 is that the cookie serialization format\nchangedfrompickletoaspecializedJSONformat. Thischangehasbeendoneinorder\ntoavoidthedamageanattackercandoifthesecretkeyisleaked. Whenyouupgrade\nyou will notice two major changes: all sessions that were issued before the upgrade\nare invalidated and you can only store a limited amount of types in the session. The\nnewsessionsarebydesignmuchmorerestrictedtoonlyallowJSONwithafewsmall\nextensionsfortuplesandstringswithHTMLmarkup.\nIn order to not break people\u2019s sessions it is possible to continue using the old session\nsystembyusingtheFlask-OldSessionsextension.\nflask.g\nFlask also started storing the object on the application context instead of the\nrequestcontext. Thischangeshouldbetransparentforyoubutitmeansthatyounow\ng\ncan store things on the object when there is no request context yet but an applica-\nflask.Flask.request_globals_class\ntion context. The old attribute was renamed to\nflask.Flask.app_ctx_globals_class\n.\n283\n31.2 Version 0.9\nThe behavior of returning tuples from a function was simplified. If you return a tuple\nit no longer defines the arguments for the response object you\u2019re creating, it\u2019s now\n(response, status, headers)\nalways a tuple in the form where at least one item has\ntobeprovided. Ifyoudependontheoldbehavior,youcanadditeasilybysubclassing\nFlask:\nclass TraditionalFlask(Flask):\ndef make_response(self, rv):\nif isinstance(rv, tuple):\nreturn self.response_class(*rv)\nreturn Flask.make_response(self, rv)\n_request_ctx_stack\nIf you maintain an extension that was using before, please con-\n_app_ctx_stack\nsider changing to if it makes sense for your extension. For instance,\nthe app context stack makes sense for extensions which connect to databases. Using\nthe app context stack instead of the request context stack will make extensions more\nreadilyhandleusecasesoutsideofrequests.\n31.3 Version 0.8\nFlask introduced a new session interface system. We also noticed that there\nwas a naming collision between flask.session the module that implements sessions\nflask.session\nand which is the global session object. With that introduction we\nmoved the implementation details for the session system into a new module called\nflask.sessions\n. If you used the previously undocumented session support we urge\nyoutoupgrade.\nBadRequest\nIf invalid JSON data was submitted Flask will now raise a exception in-\nValueError\nstead of letting the default bubble up. This has the advantage that you no\nlonger have to handle that error to avoid an internal server error showing up for the\nuser. If you were catching this down explicitly in the past as ValueError you will need\ntochangethis.\nDue to a bug in the test client Flask 0.7 did not trigger teardown handlers when the\ntest client was used in a with statement. This was since fixed but might require some\nchangesinyourtestsuitesifyoureliedonthisbehavior.\n31.4 Version 0.7\nIn Flask 0.7 we cleaned up the code base internally a lot and did some backwards in-\ncompatible changes that make it easier to implement larger applications with Flask.\nBecause we want to make upgrading as easy as possible we tried to counter the prob-\nlemsarisingfromthesechangesbyprovidingascriptthatcaneasethetransition.\n284\nThe script scans your whole application and generates an unified diff with changes it\nassumes are safe to apply. However as this is an automated tool it won\u2019t be able to\nfind all use cases and it might miss some. We internally spread a lot of deprecation\nwarnings all over the place to make it easy to find pieces of code that it was unable to\nupgrade.\nWestronglyrecommendthatyouhandreviewthegeneratedpatchfileandonlyapply\nthechunksthatlookgood.\nIfyouareusinggitasversioncontrolsystemforyourprojectwerecommendapplying\npath -p1 < patchfile.diff\nthe patch with and then using the interactive commit\nfeaturetoonlyapplythechunksthatlookgood.\nToapplytheupgradescriptdothefollowing:\n1. Downloadthescript: flask-07-upgrade.py\n2. Runitinthedirectoryofyourapplication:\npython flask-07-upgrade.py > patchfile.diff\n3. Reviewthegeneratedpatchfile.\n4. Applythepatch:\npatch -p1 < patchfile.diff\n5. Ifyouwereusingper-moduletemplatefoldersyouneedtomovesometemplates\ntemplates\naround. Previously if you had a folder named next to a blueprint\nadmin admin/index.html\nnamed theimplicittemplatepathautomaticallywas for\ntemplates/index.html\natemplatefilecalled . Thisnolongeristhecase. Nowyou\ntemplates/admin/index.html\nneedtonamethetemplate . Thetoolwillnotdetect\nthissoyouwillhavetodothatonyourown.\nPleasenotethatdeprecationwarningsaredisabledbydefaultstartingwithPython2.7.\nIn order to see the deprecation warnings that might be emitted you have to enabled\nwarnings\nthemwiththe module.\nIfyouareworkingwithwindowsandyoulackthepatchcommandlineutilityyoucan\nget it as part of various Unix runtime environments for windows including cygwin,\nmsysgitorming32. Alsosourcecontrolsystemslikesvn,hgorgithavebuiltinsupport\nfor applying unified diffs as generated by the tool. Check the manual of your version\ncontrolsystemformoreinformation.\n31.4.1 Bug in Request Locals\nDue to a bug in earlier implementations the request local proxies now raise a\nRuntimeError AttributeError\ninstead of an when they are unbound. If you\nAttributeError\ncaught these exceptions with before, you should catch them with\nRuntimeError\nnow.\nsend_file()\nAdditionally the function is now issuing deprecation warnings if you\ndepend on functionality that will be removed in Flask 1.0. Previously it was possible\n285\nto use etags and mimetypes when file objects were passed. This was unreliable and\ncausedissuesforafewsetups. Ifyougetadeprecationwarning,makesuretoupdate\nyour application to work with either filenames there or disable etag attaching and\nattachthemyourself.\nOldcode:\nreturn send_file(my_file_object)\nreturn send_file(my_file_object)\nNewcode:\nreturn send_file(my_file_object, add_etags=False)\n31.4.2 Upgrading to new Teardown Handling\nWe streamlined the behavior of the callbacks for request handling. For things that\nafter_request()\nmodify the response the decorators continue to work as expected,\nbutforthingsthatabsolutelymusthappenattheendofrequestweintroducedthenew\nteardown_request()\ndecorator. Unfortunately that change also made after-request\nwork differently under error conditions. It\u2019s not consistently skipped if exceptions\nhappen whereas previously it might have been called twice to ensure it is executed at\ntheendoftherequest.\nIfyouhavedatabaseconnectioncodethatlookslikethis:\n@app.after_request\ndef after_request(response):\ng.db.close()\nreturn response\nYouarenowencouragedtousethisinstead:\n@app.teardown_request\ndef after_request(exception):\nif hasattr(g, \u2019db\u2019):\ng.db.close()\nOntheupsidethischangegreatlyimprovestheinternalcodeflowandmakesiteasier\nto customize the dispatching and error handling. This makes it now a lot easier to\nwrite unit tests as you can prevent closing down of database connections for a while.\nYoucantakeadvantageofthefactthattheteardowncallbacksarecalledwhenthere-\nsponsecontextisremovedfromthestacksoatestcanquerythedatabaseafterrequest\nhandling:\nwith app.test_client() as client:\nresp = client.get(\u2019/\u2019)\n# g.db is still bound if there is such a thing\n# and here it\u2019s gone\n286\n31.4.3 Manual Error Handler Attaching\nFlask.error_handlers\nWhile it is still possible to attach error handlers to it\u2019s discour-\naged to do so and in fact deprecated. In general we no longer recommend custom\nerror handler attaching via assignments to the underlying dictionary due to the more\ncomplex internal handling to support arbitrary exception classes and blueprints. See\nFlask.errorhandler()\nformoreinformation.\nTheproperupgradeistochangethis:\napp.error_handlers[403] = handle_error\nIntothis:\napp.register_error_handler(403, handle_error)\nAlternativelyyoushouldjustattachthefunctionwithadecorator:\n@app.errorhandler(403)\ndef handle_error(e):\n...\nregister_error_handler()\n(Notethat isnewinFlask0.7)\n31.4.4 Blueprint Support\nBlueprints replace the previous concept of \u201cModules\u201d in Flask. They provide better\nsemantics for various features and work better with large applications. The update\nscript provided should be able to upgrade your applications automatically, but there\nmightbesomecaseswhereitfailstoupgrade. Whatchanged?\n\u2022 Blueprints need explicit names. Modules had an automatic name guesssing\nscheme where the shortname for the module was taken from the last part of\nthe import module. The upgrade script tries to guess that name but it might fail\nasthisinformationcouldchangeatruntime.\nurl_for() .foo\n\u2022 Blueprints have an inverse behavior for . Previously told\nurl_for()\nthat it should look for the endpoint foo on the application. Now it\nurl_for()\nmeans\u201crelativetocurrentmodule\u201d. Thescriptwillinverseallcallsto\nautomatically for you. It will do this in a very eager way so you might end up\nwithsomeunnecessaryleadingdotsinyourcodeifyou\u2019renotusingmodules.\n\u2022 Blueprints do not automatically provide static folders. They will also no longer\nautomatically export templates from a folder called templates next to their loca-\ntionhoweverbutitcanbeenabledfromtheconstructor. Samewithstaticfiles: if\nyou want to continue serving static files you need to tell the constructor explic-\nitly the path to the static folder (which can be relative to the blueprint\u2019s module\npath).\n\u2022 Rendering templates was simplified. Now the blueprints can provide template\nfolders which are added to a general template searchpath. This means that you\n287\nneed to add another subfolder with the blueprint\u2019s name into that folder if you\nblueprintname/template.html\nwant asthetemplatename.\nIf you continue to use the Module object which is deprecated, Flask will restore the\nprevious behavior as good as possible. However we strongly recommend upgrading\nto the new blueprints as they provide a lot of useful improvement such as the ability\ntoattachablueprintmultipletimes,blueprintspecificerrorhandlersandalotmore.\n31.5 Version 0.6\nFlask0.6comeswithabackwardsincompatiblechangewhichaffectstheorderofafter-\nrequest handlers. Previously they were called in the order of the registration, now\ntheyarecalledinreverseorder. ThischangewasmadesothatFlaskbehavesmorelike\npeople expected it to work and how other systems handle request pre- and postpro-\ncessing. If you depend on the order of execution of post-request functions, be sure to\nchangetheorder.\nAnotherchangethatbreaksbackwardscompatibilityisthatcontextprocessorswillno\nlongeroverridevaluespasseddirectlytothetemplaterenderingfunction. Ifforexam-\nple request is as variable passed directly to the template, the default context processor\nwillnotoverrideitwiththecurrentrequestobject. Thismakesiteasiertoextendcon-\ntext processors later to inject additional variables without breaking existing template\nnotexpectingthem.\n31.6 Version 0.5\nFlask 0.5 is the first release that comes as a Python package instead of a single mod-\nule. There were a couple of internal refactoring so if you depend on undocumented\ninternaldetailsyouprobablyhavetoadapttheimports.\nThefollowingchangesmayberelevanttoyourapplication:\n\u2022 autoescapingnolongerhappensforalltemplates. Insteaditisconfiguredtoonly\n.html .htm .xml .xhtml\nhappenonfilesendingwith , , and . Ifyouhavetemplates\nselect_jinja_autoescape()\nwith different extensions you should override the\nmethod.\n\u2022 Flask no longer supports zipped applications in this release. This functionality\nmightcomebackinfuturereleasesifthereisdemandforthisfeature. Removing\nsupport for this makes the Flask internal code easier to understand and fixes a\ncoupleofsmallissuesthatmakedebuggingharderthannecessary.\n\u2022 Thecreate_jinja_loaderfunctionisgone. IfyouwanttocustomizetheJinjaloader\ncreate_jinja_environment()\nnow,usethe methodinstead.\n288\n31.7 Version 0.4\nFor application developers there are no changes that require changes in your code.\nIn case you are developing on a Flask extension however, and that extension has a\nTESTING\nunittest-mode you might want to link the activation of that mode to the new\nflag.\n31.8 Version 0.3\nFlask 0.3 introduces configuration support and logging as well as categories for flash-\ning messages. All these are features that are 100% backwards compatible but you\nmightwanttotakeadvantageofthem.\n31.8.1 Configuration Support\nTheconfigurationsupportmakesiteasiertowriteanykindofapplicationthatrequires\nsome sort of configuration. (Which most likely is the case for any application out\nthere).\nIfyoupreviouslyhadcodelikethis:\napp.debug = DEBUG\napp.secret_key = SECRET_KEY\nYounolongerhavetodothat,insteadyoucanjustloadaconfigurationintotheconfig\nobject. HowthisworksisoutlinedinConfigurationHandling.\n31.8.2 Logging Integration\nFlask now configures a logger for you with some basic and useful defaults. If you\nrun your application in production and want to profit from automatic error logging,\nyou might be interested in attaching a proper log handler. Also you can start logging\nwarnings and errors into the logger when appropriately. For more information on\nthat,readLoggingApplicationErrors.\n31.8.3 Categories for Flash Messages\nFlash messages can now have categories attached. This makes it possible to render\nerrors,warningsorregularmessagesdifferentlyforexample. Thisisanopt-infeature\nbecauseitrequiressomerethinkinginthecode.\nReadallaboutthatintheMessageFlashingpattern.\n289\n290\n32\nCHAPTER\nFlask Changelog\nHereyoucanseethefulllistofchangesbetweeneachFlaskrelease.\n32.1 Version 1.0\n(releasedatetobeannounced,codenametobeselected)\nSESSION_REFRESH_EACH_REQUEST\n\u2022 Added config key that controls the set-cookie\nbehavior. If set to True a permanent session will be refreshed each request and\ngettheirlifetimeextended,ifsettoFalseitwillonlybemodifiedifthesessionac-\ntuallymodifies. Nonpermanentsessionsarenotaffectedbythisandwillalways\nexpireifthebrowserwindowcloses.\n\u2022 MadeFlasksupportcustomJSONmimetypesforincomingdata.\n(response, headers)\n\u2022 Added support for returning tuples in the form from a\nviewfunction.\nflask.Config.from_json()\n\u2022 Added .\nflask.Flask.config_class\n\u2022 Added .\nflask.config.Config.get_namespace()\n\u2022 Added .\nTEMPLATES_AUTO_RELOAD\n\u2022 Added config key. If disabled the templates will be\nreloaded only if the application is running in debug mode. For higher perfor-\nmanceit\u2019spossibletodisablethat.\n\u2022 AddedaworkaroundforalimitationinPython3.3\u2019snamespaceloader.\n\u2022 AddedsupportforexplicitrootpathswhenusingPython3.3\u2019snamespacepack-\nages.\nflask flask.cli\n\u2022 Added and the module to start the local debug server through\nflask.run()\nthe click CLI system. This is recommended over the old method\nas it works faster and more reliable due to a different design and also replaces\nFlask-Script\n.\n291\n\u2022 Error handlers that match specific classes are now checked first, thereby\nallowing catching exceptions that are subclasses of HTTP exceptions (in\nwerkzeug.execptions\n). This makes it possible for an extension author to cre-\nateexceptionsthatwillbydefaultresultintheHTTPerroroftheirchoosing,but\nmaybecaughtwithacustomerrorhandlerifdesired.\n32.2 Version 0.10.2\n(bugfixrelease,releasedatetobeannounced)\n\u2022 Fixedbrokentest_appcontext_signals()testcase.\nAttributeError flask.helpers.find_package()\n\u2022 Raise an in with a useful mes-\nsageexplainingwhyitisraisedwhenaPEP302importhookisusedwithoutan\nis_package()method.\n\u2022 Fixedanissuecausingexceptionsraisedbeforeenteringarequestorappcontext\ntobepassedtoteardownhandlers.\n\u2022 Fixed an issue with query parameters getting removed from requests in the test\nclientwhenabsoluteURLswererequested.\n\u2022 Made@before_first_requestintoadecoratorasintended.\n\u2022 Fixedanetagsbugwhensendingafilestreamswithaname.\n\u2022 Fixedsend_from_directorynotexpandingtotheapplicationrootpathcorrectly.\n\u2022 Changedlogicofbeforefirstrequesthandlerstofliptheflagafterinvoking. This\nwillallowsomeusesthatarepotentiallydangerousbutshouldprobablybeper-\nmitted.\n32.3 Version 0.10.1\n(bugfixrelease,releasedonJune14th2013)\n|tojson\n\u2022 Fixed an issue where was not quoting single quotes which made the\nfilter not work properly in HTML attributes. Now it\u2019s possible to use that filter\nin single quoted attributes. This should make using that filter with angular.js\neasier.\n\u2022 Added support for byte strings back to the session system. This broke compati-\nbility with the common case of people putting binary data for token verification\nintothesession.\n\u2022 Fixed an issue where registering the same method twice for the same endpoint\nwouldtriggeranexceptionincorrectly.\n292\n32.4 Version 0.10\nReleasedonJune13nd2013,codenameLimoncello.\n\u2022 Changed default cookie serialization format from pickle to JSON to limit the\nimpact an attacker can do if the secret key leaks. See Version 0.10 for more infor-\nmation.\ntemplate_test\n\u2022 Added methods in addition to the already existing\ntemplate_filter\nmethodfamily.\ntemplate_global\n\u2022 Added methods in addition to the already existing\ntemplate_filter\nmethodfamily.\n\u2022 Setthecontent-lengthheaderforx-sendfile.\ntojson\n\u2022 filternowdoesnotescapescriptblocksinHTML5parsers.\ntojson\n\u2022 used in templates is now safe by default due. This was allowed due to\nthedifferentescapingbehavior.\n\u2022 Flask will now raise an error if you attempt to register a new function on an\nalreadyusedendpoint.\n\u2022 Added wrapper module around simplejson and added default serialization of\ndatetimeobjects. ThisallowsmucheasiercustomizationofhowJSONishandled\nbyFlaskoranyFlaskextension.\nflask.session flask.sessions\n\u2022 Removed deprecated internal module alias. Use\nflask.session\ninsteadtogetthesessionmodule. Thisisnottobeconfusedwith\nthesessionproxy.\n\u2022 Templates can now be rendered without request context. The behavior is\nrequest session g\nslightly different as the , and objects will not be available and\nblueprint\u2019scontextprocessorsarenotcalled.\n\u2022 Theconfigobjectisnowavailabletothetemplateasarealglobalandnotthrough\na context processor which makes it available even in imported templates by de-\nfault.\n\u2022 Addedanoptiontogeneratenon-asciiencodedJSONwhichshouldresultinless\nbytes being transmitted over the network. It\u2019s disabled by default to not cause\nflask.json.dumps\nconfusion with existing libraries that might expect to return\nbytestringsbydefault.\nflask.g\n\u2022 isnowstoredontheappcontextinsteadoftherequestcontext.\nflask.g get()\n\u2022 nowgaineda methodfornoterroringoutonnonexistingitems.\nflask.g in\n\u2022 now can be used with the operator to see what\u2019s defined and it now\nisiterableandwillyieldallattributesstored.\nflask.Flask.request_globals_class\n\u2022 got renamed to\nflask.Flask.app_ctx_globals_class\nwhich is a better name to what it does\nsince0.10.\n293\n\u2022 request,sessionandgarenowalsoaddedasproxiestothetemplatecontextwhich\nmakes them available in imported templates. One has to be very careful with\nthosethoughbecauseusageoutsideofmacrosmightcausecaching.\n\u2022 Flask will no longer invoke the wrong error handlers if a proxy exception is\npassedthrough.\n\u2022 Addedaworkaroundforchrome\u2019scookiesinlocalhostnotworkingasintended\nwithdomainnames.\n\u2022 Changedlogicforpickingdefaultsforcookievaluesfromsessionstoworkbetter\nwithGoogleChrome.\n\u2022 Addedmessage_flashedsignalthatsimplifiesflashingtesting.\n\u2022 Addedsupportforcopyingofrequestcontextsforbetterworkingwithgreenlets.\n\u2022 Removed custom JSON HTTP exception subclasses. If you were relying on\nthem you can reintroduce them again yourself trivially. Using them however\nisstronglydiscouragedastheinterfacewasflawed.\n\u2022 Python requirements changed: requiring Python 2.6 or 2.7 now to prepare for\nPython3.3port.\n\u2022 Changed how the teardown system is informed about exceptions. This is now\nmore reliable in case something handles an exception halfway through the error\nhandlingprocess.\n\u2022 Request context preservation in debug mode now keeps the exception informa-\ntion around which means that teardown handlers are able to distinguish error\nfromsuccesscases.\nJSONIFY_PRETTYPRINT_REGULAR\n\u2022 Addedthe configurationvariable.\n\u2022 FlasknowordersJSONkeysbydefaulttonottrashHTTPcachesduetodifferent\nhashseedsbetweendifferentworkers.\n\u2022 Addedappcontext_pushedandappcontext_poppedsignals.\nSERVER_NAME\n\u2022 The builtin run method now takes the into account when picking\nthedefaultporttorunon.\n\u2022 Added flask.request.get_json() as a replacement for the old flask.request.json prop-\nerty.\n32.5 Version 0.9\nReleasedonJuly1st2012,codenameCampari.\nflask.Request.on_json_loading_failed()\n\u2022 The now returns a JSON formatted\nresponsebydefault.\nflask.url_for()\n\u2022 The functionnowcangenerateanchorstothegeneratedlinks.\n294\nflask.url_for()\n\u2022 The function now can also explicitly generate URL rules spe-\ncifictoagivenHTTPmethod.\n\u2022 Loggernowonlyreturnsthedebuglogsettingifitwasnotsetexplicitly.\n\u2022 Unregister a circular dependency between the WSGI environment and the\nrequest object when shutting down the request. This means that environ\nwerkzeug.request\nwill be None after the response was returned to the WSGI\nserverbuthastheadvantagethatthegarbagecollectorisnotneededonCPython\nto tear down the request unless the user created circular dependencies them-\nselves.\n\u2022 Sessionisnowstoredaftercallbackssothatifthesessionpayloadisstoredinthe\nsessionyoucanstillmodifyitinanafterrequestcallback.\nflask.Flask\n\u2022 The class will avoid importing the provided import name if it can\n(the required first parameter), to benefit tools which build Flask instances pro-\ngrammatically. The Flask class will fall back to using import on systems with\ncustom module hooks, e.g. Google App Engine, or when the import name is\ninsideaziparchive(usuallya.egg)priortoPython2.7.\n\u2022 Blueprintsnowhaveadecoratortoaddcustomtemplatefiltersapplicationwide,\nflask.Blueprint.app_template_filter()\n.\n\u2022 The Flask and Blueprint classes now have a non-decorator method for adding\nflask.Flask.add_template_filter()\ncustom template filters application wide,\nflask.Blueprint.add_app_template_filter()\nand .\nflask.get_flashed_messages()\n\u2022 The functionnowallowsrenderingflashedmes-\ncategory_filter\nsagecategoriesinseparateblocks,througha argument.\nflask.Flask.run()\n\u2022 The method now accepts None for host and port arguments,\nusing default values when None. This allows for calling run using configuration\napp.run(app.config.get(\u2019MYHOST\u2019), app.config.get(\u2019MYPORT\u2019))\nvalues, e.g. ,\nwithproperbehaviorwhetherornotaconfigfileisprovided.\nflask.render_template()\n\u2022 The method now accepts a either an iterable of tem-\nplate names or a single template name. Previously, it only accepted a single\ntemplatename. Onaniterable,thefirsttemplatefoundisrendered.\nflask.Flask.app_context()\n\u2022 Added whichworksverysimilartotherequestcon-\ntext but only provides access to the current application. This also adds support\nforURLgenerationwithoutanactiverequestcontext.\n\u2022 View functions can now return a tuple with the first instance being an instance\nflask.Response jsonify(error=\"error msg\"), 400\nof . Thisallowsforreturning\nfromaviewfunction.\nFlask Blueprint get_send_file_max_age()\n\u2022 and now provide a hook for sub-\nclasses to override behavior of serving static files from Flask when using\nflask.Flask.send_static_file()\n(used for the default static file handler) and\nsend_file()\n. Thishookisprovidedafilename,whichforexampleallowschang-\ning cache controls by file extension. The default max-age for send_file and static\n295\nSEND_FILE_MAX_AGE_DEFAULT\nfilescanbeconfiguredthroughanew configuration\nvariable,whichisusedinthedefaultget_send_file_max_ageimplementation.\n\u2022 Fixed an assumption in sessions implementation which could break message\nflashingonsessionsimplementationswhichuseexternalstorage.\n\u2022 Changed the behavior of tuple return values from functions. They are no longer\nargumentstotheresponseobject,theynowhaveadefinedmeaning.\nflask.Flask.request_globals_class\n\u2022 Added to allow a specific class to be used\ng\noncreationofthe instanceofeachrequest.\n\u2022 Addedrequired_methodsattributetoviewfunctionstoforce-addmethodsonreg-\nistration.\nflask.after_this_request()\n\u2022 Added .\nflask.stream_with_context()\n\u2022 Added and the ability to push contexts multiple\ntimeswithoutproducingunexpectedbehavior.\n32.6 Version 0.8.1\nBugfixrelease,releasedonJuly1st2012\n\u2022 Fixedanissuewiththeundocumentedflask.sessionmoduletonotworkproperly\non Python 2.5. It should not be used but did cause some problems for package\nmanagers.\n32.7 Version 0.8\nReleasedonSeptember29th2011,codenameRakija\n\u2022 Refactoredsessionsupportintoasessioninterfacesothattheimplementationof\nthesessionscanbechangedwithouthavingtooverridetheFlaskclass.\n\u2022 Emptysessioncookiesarenowdeletedproperlyautomatically.\n\u2022 ViewfunctionscannowoptoutofgettingtheautomaticOPTIONSimplementa-\ntion.\n\u2022 HTTP exceptions and Bad Request errors can now be trapped so that they show\nupnormallyinthetraceback.\n\u2022 Flaskindebugmodeisnowdetectingsomecommonproblemsandtriestowarn\nyouaboutthem.\n\u2022 Flask in debug mode will now complain with an assertion error if a view was\nattached after the first request was handled. This gives earlier feedback when\nusersforgettoimportviewcodeaheadoftime.\n\u2022 Added the ability to register callbacks that are only triggered once at the begin-\nFlask.before_first_request()\nningofthefirstrequest. ( )\n296\n\u2022 Malformed JSON data will now trigger a bad request HTTP exception instead\nof a value error which usually would result in a 500 internal server error if not\nhandled. Thisisabackwardsincompatiblechange.\n\u2022 Applicationsnownotonlyhavearootpathwheretheresourcesandmodulesare\nlocated but also an instance path which is the designated place to drop files that\nare modified at runtime (uploads etc.). Also this is conceptionally only instance\ndepending and outside version control so it\u2019s the perfect place to put configura-\ntionfilesetc. FormoreinformationseeInstanceFolders.\nAPPLICATION_ROOT\n\u2022 Addedthe configurationvariable.\nsession_transaction()\n\u2022 Implemented toeasilymodifysessionsfromthetesten-\nvironment.\nAPPLICATION_ROOT\n\u2022 Refactoredtestclientinternally. The configurationvariableas\nSERVER_NAME\nwellas arenowproperlyusedbythetestclientasdefaults.\nflask.views.View.decorators\n\u2022 Added to support simpler decorating of plug-\ngable(class-based)views.\n\u2022 Fixed an issue where the test client if used with the \u201cwith\u201d statement did not\ntriggertheexecutionoftheteardownhandlers.\n\u2022 Addedfinercontroloverthesessioncookieparameters.\n\u2022 HEADrequeststoamethodviewnowautomaticallydispatchtothegetmethod\nifnohandlerwasimplemented.\nflask.ext\n\u2022 Implementedthevirtual packagetoimportextensionsfrom.\n\u2022 The context preservation on exceptions is now an integral component of Flask\nitself and no longer of the test client. This cleaned up some internal logic and\nlowerstheoddsofrunawayrequestcontextsinunittests.\n32.8 Version 0.7.3\nBugfixrelease,releasedatetobedecided\n\u2022 Fixed the Jinja2 environment\u2019s list_templates method not returning the correct\nnameswhenblueprintsormoduleswereinvolved.\n32.9 Version 0.7.2\nBugfixrelease,releasedonJuly6th2011\n\u2022 FixedanissuewithURLprocessorsnotproperlyworkingonblueprints.\n297\n32.10 Version 0.7.1\nBugfixrelease,releasedonJune29th2011\n\u2022 Addedmissingfutureimportthatbroke2.5compatibility.\n\u2022 Fixedaninfiniteredirectissuewithblueprints.\n32.11 Version 0.7\nReleasedonJune28th2011,codenameGrappa\nmake_default_options_response()\n\u2022 Added which can be used by subclasses to\nalterthedefaultbehaviorforOPTIONSresponses.\nRuntimeError AttributeError\n\u2022 Unboundlocalsnowraiseaproper insteadofan .\n\u2022 Mimetypeguessingandetagsupportbasedonfileobjectsisnowdeprecatedfor\nflask.send_file()\nbecause it was unreliable. Pass filenames instead or attach\nyourownetagsandprovideapropermimetypebyhand.\n\u2022 Static file handling for modules now requires the name of the static folder to\nbe supplied explicitly. The previous autodetection was not reliable and caused\nissuesonGoogle\u2019sAppEngine. Until1.0theoldbehaviorwillcontinuetowork\nbutissuedependencywarnings.\n\u2022 fixedaproblemforFlasktorunonjython.\n\u2022 added a PROPAGATE_EXCEPTIONS configuration variable that can be used to\nflipthesettingofexceptionpropagationwhichpreviouslywaslinkedtoDEBUG\naloneandisnowlinkedtoeitherDEBUGorTESTING.\n\u2022 Flasknolongerinternallydependsonrulesbeingaddedthroughtheadd_url_rule\nfunctionandcannowalsoacceptregularwerkzeugrulesaddedtotheurlmap.\n\u2022 Added an endpoint method to the flask application object which allows one to\nregisteracallbacktoanarbitraryendpointwithadecorator.\n\u2022 Use Last-Modified for static file sending instead of Date which was incorrectly\nintroducedin0.6.\n\u2022 Addedcreate_jinja_loadertooverridetheloadercreationprocess.\n\u2022 Implementedasilentflagforconfig.from_pyfile.\n\u2022 Added teardown_request decorator, for functions that should run at the end of\na request regardless of whether an exception occurred. Also the behavior for\nafter_request was changed. It\u2019s now no longer executed when an exception is\nraised. SeeUpgradingtonewTeardownHandling\nflask.has_request_context()\n\u2022 Implemented\ncreate_jinja_environment()\n\u2022 Deprecatedinit_jinja_globals. Overridethe method\ninsteadtoachievethesamefunctionality.\n298\nflask.safe_join()\n\u2022 Added\n\u2022 TheautomaticJSONrequestdataunpackingnowlooksatthecharsetmimetype\nparameter.\nflask.get_flashed_messages()\n\u2022 Don\u2019tmodifythesessionon iftherearenomes-\nsagesinthesession.\n\u2022 before_requesthandlersarenowabletoabortrequestswitherrors.\n\u2022 it is not possible to define user exception handlers. That way you can provide\ncustomerrormessagesfromacentralhubforcertainerrorsthatmightoccurdur-\ning request processing (for instance database connection errors, timeouts from\nremoteresourcesetc.).\n\u2022 Blueprintscanprovideblueprintspecificerrorhandlers.\n\u2022 ImplementedgenericPluggableViews(class-basedviews).\n32.12 Version 0.6.1\nBugfixrelease,releasedonDecember31st2010\n\u2022 Fixed an issue where the default OPTIONS response was not exposing all valid\nmethodsintheAllowheader.\n\u2022 Jinja2 template loading syntax now allows \u201d./\u201d in front of a template load path.\nPreviouslythiscausedissueswithmodulesetups.\n\u2022 Fixed an issue where the subdomain setting for modules was ignored for the\nstaticfolder.\n\u2022 Fixed a security problem that allowed clients to download arbitrary files if the\nhost server was a windows based operating system and the client uses back-\nslashestoescapethedirectorythefileswhereexposedfrom.\n32.13 Version 0.6\nReleasedonJuly27th2010,codenameWhisky\n\u2022 afterrequestfunctionsarenowcalledinreverseorderofregistration.\n\u2022 OPTIONS is now automatically implemented by Flask unless the application\nexplicitly adds \u2018OPTIONS\u2019 as method to the URL rule. In this case no automatic\nOPTIONShandlingkicksin.\n\u2022 static rules are now even in place if there is no static folder for the module. This\nwas implemented to aid GAE which will remove the static folder if it\u2019s part of a\nmappinginthe.ymlfile.\nconfig\n\u2022 the isnowavailableinthetemplatesasconfig.\n299\n\u2022 context processors will no longer override values passed directly to the render\nfunction.\n\u2022 added the ability to limit the incoming request data with the new\nMAX_CONTENT_LENGTH\nconfigurationvalue.\nflask.Module.add_url_rule()\n\u2022 the endpoint for the method is now optional to\nbeconsistentwiththefunctionofthesamenameontheapplicationobject.\nflask.make_response()\n\u2022 addeda functionthatsimplifiescreatingresponseobject\ninstancesinviews.\n\u2022 addedsignallingsupportbasedonblinker. Thisfeatureiscurrentlyoptionaland\nsupposed to be used by extensions and applications. If you want to use it, make\nsuretohaveblinkerinstalled.\n\u2022 refactoredthewayURLadaptersarecreated. Thisprocessisnowfullycustomiz-\ncreate_url_adapter()\nablewiththe method.\n\u2022 modules can now register for a subdomain instead of just an URL prefix. This\nmakesitpossibletobindawholemoduletoaconfigurablesubdomain.\n32.14 Version 0.5.2\nBugfixRelease,releasedonJuly15th2010\n\u2022 fixedanotherissuewithloadingtemplatesfromdirectorieswhenmoduleswere\nused.\n32.15 Version 0.5.1\nBugfixRelease,releasedonJuly6th2010\n\u2022 fixesanissuewithtemplateloadingfromdirectorieswhenmoduleswhereused.\n32.16 Version 0.5\nReleasedonJuly6th2010,codenameCalvados\n\u2022 fixed a bug with subdomains that was caused by the inability to specify the\nserver name. The server name can now be set with the SERVER_NAME config\nkey. Thiskeyisnowalsousedtosetthesessioncookiecross-subdomainwide.\n\u2022 autoescaping is no longer active for all templates. Instead it is only active for\n.html .htm .xml .xhtml\n, , and . Inside templates this behavior can be changed\nautoescape\nwiththe tag.\n\u2022 refactoredFlaskinternally. Itnowconsistsofmorethanasinglefile.\n300\nflask.send_file()\n\u2022 now emits etags and has the ability to do conditional re-\nsponsesbuiltin.\n\u2022 (temporarily) dropped support for zipped applications. This was a rarely used\nfeatureandledtosomeconfusingbehavior.\n\u2022 addedsupportforper-packagetemplateandstatic-filedirectories.\n\u2022 removed support for create_jinja_loader which is no longer used in 0.5 due to the\nimprovedmodulesupport.\n\u2022 addedahelperfunctiontoexposefilesfromanydirectory.\n32.17 Version 0.4\nReleasedonJune18th2010,codenameRakia\n\u2022 addedtheabilitytoregisterapplicationwideerrorhandlersfrommodules.\nafter_request()\n\u2022 handlers are now also invoked if the request dies with an ex-\nceptionandanerrorhandlingpagekicksin.\n\u2022 test client has not the ability to preserve the request context for a little longer.\nThis can also be used to trigger custom requests that do not pop the request\nstackfortesting.\n\u2022 because the Python standard library caches loggers, the name of the logger is\nconfigurablenowtobettersupportunittests.\n\u2022 addedTESTINGswitchthatcanactivateunittestinghelpers.\n\u2022 theloggerswitchestoDEBUGmodenowifdebugisenabled.\n32.18 Version 0.3.1\nBugfixrelease,releasedonMay28th2010\nflask.Config.from_envvar()\n\u2022 fixedaerrorreportingbugwith\n\u2022 removedsomeunusedcodefromflask\n\u2022 release does no longer include development leftover files (.git folder for themes,\nbuiltdocumentationinzipandpdffileandsome.pycfiles)\n32.19 Version 0.3\nReleasedonMay28th2010,codenameSchnaps\n\u2022 addedsupportforcategoriesforflashedmessages.\n301\nlogging.Handler\n\u2022 theapplicationnowconfiguresa andwilllogrequesthandling\nexceptions to that logger when not in debug mode. This makes it possible to\nreceivemailsonservererrorsforexample.\n\u2022 addedsupportforcontextbindingthatdoesnotrequiretheuseofthewithstate-\nmentforplayingintheconsole.\n\u2022 therequestcontextisnowavailablewithinthewithstatementmakingitpossible\ntofurtherpushtherequestcontextorpopit.\n\u2022 addedsupportforconfigurations.\n32.20 Version 0.2\nReleasedonMay12th2010,codenameJ\u00e4germeister\n\u2022 variousbugfixes\n\u2022 integratedJSONsupport\nget_template_attribute()\n\u2022 added helperfunction.\nadd_url_rule()\n\u2022 cannowalsoregisteraviewfunction.\n\u2022 refactoredinternalrequestdispatching.\n\u2022 serverlistenson127.0.0.1bydefaultnowtofixissueswithchrome.\n\u2022 addedexternalURLsupport.\nsend_file()\n\u2022 addedsupportfor\n\u2022 module support and internal request handling refactoring to better support\npluggableapplications.\n\u2022 sessionscanbesettobepermanentnowonaper-sessionbasis.\n\u2022 bettererrorreportingonmissingsecretkeys.\n\u2022 addedsupportforGoogleAppengine.\n32.21 Version 0.1\nFirstpublicpreviewrelease.\n302\n33\nCHAPTER\nLicense\nFlask is licensed under a three clause BSD License. It basically means: do whatever\nyouwantwithitaslongasthecopyrightinFlasksticksaround,theconditionsarenot\nmodified and the disclaimer is present. Furthermore you must not use the names of\ntheauthorstopromotederivativesofthesoftwarewithoutwrittenconsent.\nThe full license text can be found below (Flask License). For the documentation and\nartworkdifferentlicensesapply.\n33.1 Authors\nFlaskiswrittenandmaintainedbyArminRonacherandvariouscontributors:\n33.1.1 Development Lead\n\u2022 ArminRonacher<armin.ronacher@active-4.com>\n33.1.2 Patches and Suggestions\n\u2022 AdamZapletal\n\u2022 AliAfshar\n\u2022 ChrisEdgemon\n\u2022 ChrisGrindstaff\n\u2022 ChristopherGrebs\n\u2022 DanielNeuh\u00e4user\n\u2022 FlorentXicluna\n\u2022 GeorgBrandl\n303\n\u2022 JustinQuick\n\u2022 KennethReitz\n\u2022 MarianSigler\n\u2022 MattCampell\n\u2022 MatthewFrazier\n\u2022 MichaelvanTellingen\n\u2022 RonDuPlain\n\u2022 SebastienEstienne\n\u2022 SimonSapin\n\u2022 StephaneWirtel\n\u2022 ThomasSchranz\n\u2022 ZhaoXiaohong\n\u2022 EdmondBurnett\n33.2 General License Definitions\nThefollowingsectioncontainsthefulllicensetextsforFlaskandthedocumentation.\n\u2022 \u201cAUTHORS\u201dherebyreferstoalltheauthorslistedintheAuthorssection.\n\u2022 The \u201cFlask License\u201d applies to all the sourcecode shipped as part of Flask (Flask\nitselfaswellastheexamplesandtheunittests)aswellasdocumentation.\n\u2022 The\u201cFlaskArtworkLicense\u201dappliestotheproject\u2019sHorn-Logo.\n33.3 Flask License\nCopyright (c) 2014 by Armin Ronacher and contributors. See AUTHORS for more\ndetails.\nSomerightsreserved.\nRedistribution and use in source and binary forms of the software as well as docu-\nmentation, with or without modification, are permitted provided that the following\nconditionsaremet:\n\u2022 Redistributionsofsourcecodemustretaintheabovecopyrightnotice,thislistof\nconditionsandthefollowingdisclaimer.\n\u2022 Redistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nothermaterialsprovidedwiththedistribution.\n304\n\u2022 The names of the contributors may not be used to endorse or promote products\nderivedfromthissoftwarewithoutspecificpriorwrittenpermission.\nTHIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT\nHOLDERSANDCONTRIBUTORS\u201cASIS\u201dANDANYEXPRESSORIMPLIEDWAR-\nRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DIS-\nCLAIMED.INNOEVENTSHALLTHECOPYRIGHTOWNERORCONTRIBUTORS\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PRO-\nCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE AND DOCUMENTATION, EVEN IF ADVISED OF\nTHEPOSSIBILITYOFSUCHDAMAGE.\n33.4 Flask Artwork License\nCopyright(c)2010byArminRonacher.\nSomerightsreserved.\nThis logo or a modified version may be used by anyone to refer to the Flask project,\nbutdoesnotindicateendorsementbytheproject.\nRedistribution and use in source (the SVG file) and binary forms (rendered PNG files\netc.) of the image, with or without modification, are permitted provided that the fol-\nlowingconditionsaremet:\n\u2022 Redistributions of source code must retain the above copyright notice and this\nlistofconditions.\n\u2022 ThenamesofthecontributorstotheFlasksoftware(seeAUTHORS)maynotbe\nusedtoendorseorpromoteproductsderivedfromthissoftwarewithoutspecific\npriorwrittenpermission.\nNote: wewouldappreciatethatyoumaketheimagealinktohttp://flask.pocoo.org/\nifyouuseitonawebpage.\n305\n306\nIndex\nSymbols\napp_context()(flask.Flaskmethod),192\napp_context_processor() (flask.Blueprint\n_app_ctx_stack(inmoduleflask),241\nmethod),211\n_request_ctx_stack(inmoduleflask),240\napp_ctx_globals_class (flask.Flask at-\nA\ntribute),192\napp_errorhandler() (flask.Blueprint\nabort()(inmoduleflask),227\nmethod),212\nadd_app_template_filter()\napp_import_path (flask.cli.ScriptInfo at-\n(flask.Blueprintmethod),211\ntribute),247\nadd_app_template_global()\napp_template_filter() (flask.Blueprint\n(flask.Blueprintmethod),211\nmethod),212\nadd_app_template_test() (flask.Blueprint\napp_template_global() (flask.Blueprint\nmethod),211\nmethod),212\nadd_template_filter() (flask.Flask\napp_template_test() (flask.Blueprint\nmethod),190\nmethod),212\nadd_template_global() (flask.Flask\napp_url_defaults() (flask.Blueprint\nmethod),191\nmethod),212\nadd_template_test() (flask.Flask method),\napp_url_value_preprocessor()\n191\n(flask.Blueprintmethod),212\nadd_url_rule() (flask.Blueprint method),\nAppContext(classinflask.ctx),241\n211\nappcontext_popped(inmoduleflask),242\nadd_url_rule()\nappcontext_pushed(inmoduleflask),242\n(flask.blueprints.BlueprintSetupState\nappcontext_tearing_down (in module\nmethod),241\nflask),242\nadd_url_rule()(flask.Flaskmethod),191\nargs(flask.Requestattribute),215\nafter_app_request() (flask.Blueprint\nas_view() (flask.views.View class\nmethod),211\nmethod),244\nafter_request() (flask.Blueprint method),\nauto_find_instance_path() (flask.Flask\n211\nmethod),193\nafter_request()(flask.Flaskmethod),192\nafter_request_funcs(flask.Flaskattribute), B\n192\nbase_url(flask.Requestattribute),216\nafter_this_request()(inmoduleflask),228\nbefore_app_first_request()\napp (flask.blueprints.BlueprintSetupState\n(flask.Blueprintmethod),212\nattribute),241\nbefore_app_request() (flask.Blueprint\n307\nmethod),212 debug(flask.cli.ScriptInfoattribute),248\nbefore_first_request() (flask.Flask debug(flask.Flaskattribute),194\nmethod),193 debug_log_format (flask.Flask attribute),\nbefore_first_request_funcs (flask.Flask at- 194\ntribute),193 decorators (flask.views.View attribute),\nbefore_request()(flask.Blueprintmethod), 244\n212 default() (flask.json.JSONEncoder\nbefore_request()(flask.Flaskmethod),193 method),234\nbefore_request_funcs (flask.Flask at- default_config(flask.Flaskattribute),195\ntribute),193 digest_method()\nBlueprint(classinflask),211 (flask.sessions.SecureCookieSessionInterface\nblueprint(flask.blueprints.BlueprintSetupState staticmethod),222\nattribute),241 dispatch_request() (flask.Flask method),\nblueprint(flask.Requestattribute),216 195\nblueprints(flask.Flaskattribute),193 dispatch_request() (flask.views.View\nBlueprintSetupState (class in method),244\nflask.blueprints),241 do_teardown_appcontext() (flask.Flask\nmethod),195\nC\ndo_teardown_request() (flask.Flask\ncli(flask.Flaskattribute),193 method),195\nconditional_context() (flask.cli.ScriptInfo dump()(inmoduleflask.json),234\nmethod),247 dumps()(inmoduleflask.json),234\nConfig(classinflask),236\nE\nconfig(flask.Flaskattribute),193\nconfig_class(flask.Flaskattribute),194 enable_modules (flask.Flask attribute),\ncontext_processor() (flask.Blueprint 195\nmethod),212 endpoint(flask.Requestattribute),216\ncontext_processor() (flask.Flask method), endpoint()(flask.Blueprintmethod),212\n194 endpoint()(flask.Flaskmethod),195\ncookies(flask.Requestattribute),215 environ(flask.Requestattribute),216\ncopy()(flask.ctx.RequestContextmethod), environmentvariable\n240 FLASKR_SETTINGS,32\ncopy_current_request_context() (in mod- YOURAPPLICATION_SETTINGS,64\nuleflask),225 error_handler_spec(flask.Flaskattribute),\ncreate_app (flask.cli.ScriptInfo attribute), 195\n247 errorhandler() (flask.Blueprint method),\ncreate_global_jinja_loader() (flask.Flask 213\nmethod),194 errorhandler()(flask.Flaskmethod),196\ncreate_jinja_environment() (flask.Flask escape()(flask.Markupclassmethod),231\nmethod),194 escape()(inmoduleflask),230\ncreate_url_adapter()(flask.Flaskmethod), extensions(flask.Flaskattribute),196\n194\nF\ncurrent_app(inmoduleflask),224\nfiles(flask.Requestattribute),216\nD\nfirst_registration\ndata(flask.cli.ScriptInfoattribute),248 (flask.blueprints.BlueprintSetupState\ndata(flask.Requestattribute),216 attribute),241\ndata(flask.Responseattribute),218 flash()(inmoduleflask),232\n308\nFlask(classinflask),189 242\nflask(module),189\nH\nflask.ext(inmoduleflask),238\nflask.json(module),232 handle_exception() (flask.Flask method),\nflask.signals.Namespace (built-in class), 197\n243 handle_http_exception() (flask.Flask\nFlaskClient(classinflask.testing),223 method),197\nFlaskGroup(classinflask.cli),247 handle_url_build_error() (flask.Flask\nFLASKR_SETTINGS,32 method),197\nform(flask.Requestattribute),215 handle_user_exception() (flask.Flask\nfrom_envvar()(flask.Configmethod),236 method),197\nfrom_json()(flask.Configmethod),237 has_app_context()(inmoduleflask),225\nfrom_object()(flask.Configmethod),237 has_request_context() (in module flask),\nfrom_pyfile()(flask.Configmethod),237 224\nfull_dispatch_request() (flask.Flask has_static_folder (flask.Blueprint at-\nmethod),197 tribute),213\nhas_static_folder (flask.Flask attribute),\nG\n198\ng(inmoduleflask),224 headers(flask.Requestattribute),215\nget_cookie_domain() headers(flask.Responseattribute),218\n(flask.sessions.SessionInterface\nI\nmethod),220\nget_cookie_httponly() init_jinja_globals() (flask.Flask method),\n(flask.sessions.SessionInterface 198\nmethod),220 inject_url_defaults() (flask.Flask method),\nget_cookie_path() 198\n(flask.sessions.SessionInterface instance_path(flask.Flaskattribute),198\nmethod),221 is_json(flask.Requestattribute),217\nget_cookie_secure() is_null_session()\n(flask.sessions.SessionInterface (flask.sessions.SessionInterface\nmethod),221 method),221\nget_expiration_time() is_xhr(flask.Requestattribute),216\n(flask.sessions.SessionInterface\nJ\nmethod),221\nget_flashed_messages() (in module flask), jinja_env(flask.Flaskattribute),198\n232 jinja_loader (flask.Blueprint attribute),\nget_json()(flask.Requestmethod),217 213\nget_namespace() (flask.Config method), jinja_loader(flask.Flaskattribute),198\n238 jinja_options(flask.Flaskattribute),198\nget_send_file_max_age() (flask.Blueprint json(flask.Requestattribute),217\nmethod),213 json_decoder(flask.Flaskattribute),198\nget_send_file_max_age() (flask.Flask json_encoder(flask.Flaskattribute),198\nmethod),197 JSONDecoder(classinflask.json),235\nget_template_attribute() (in module JSONEncoder(classinflask.json),234\nflask),235 jsonify()(inmoduleflask.json),233\ngot_first_request (flask.Flask attribute),\nK\n197\ngot_request_exception (in module flask), key_derivation\n309\n(flask.sessions.SecureCookieSessionInnutellr_fsaecsesion_class\nattribute),222 (flask.sessions.SessionInterface\nL attribute),221\nNullSession(classinflask.sessions),222\nload()(inmoduleflask.json),234\nO\nload_app() (flask.cli.ScriptInfo method),\n248 on_json_loading_failed() (flask.Request\nloads()(inmoduleflask.json),234 method),217\nlog_exception()(flask.Flaskmethod),198 open_instance_resource() (flask.Flask\nlogger(flask.Flaskattribute),199 method),200\nlogger_name(flask.Flaskattribute),199 open_resource()(flask.Blueprintmethod),\nM 213\nopen_resource()(flask.Flaskmethod),200\nmake_config()(flask.Flaskmethod),199\nopen_session()(flask.Flaskmethod),201\nmake_default_options_response()\nopen_session()\n(flask.Flaskmethod),199\n(flask.sessions.SessionInterface\nmake_null_session()(flask.Flaskmethod),\nmethod),221\n199\noptions(flask.blueprints.BlueprintSetupState\nmake_null_session()\nattribute),241\n(flask.sessions.SessionInterface\nP\nmethod),221\nmake_response() (flask.Flask method), pass_script_info() (in module flask.cli),\n199 248\nmake_response()(inmoduleflask),227 path(flask.Requestattribute),216\nmake_setup_state() (flask.Blueprint permanent(flask.sessionattribute),220\nmethod),213 permanent (flask.sessions.SessionMixin\nmake_shell_context() (flask.Flask attribute),223\nmethod),200 permanent_session_lifetime (flask.Flask\nMarkup(classinflask),230 attribute),201\nmatch_request() pickle_based\n(flask.ctx.RequestContext (flask.sessions.SessionInterface\nmethod),240 attribute),221\nmax_content_length (flask.Request at- pop()(flask.ctx.AppContextmethod),241\ntribute),217 pop() (flask.ctx.RequestContext method),\nmessage_flashed(inmoduleflask),243 240\nmethod(flask.Requestattribute),216 preprocess_request() (flask.Flask\nmethods(flask.views.Viewattribute),244 method),201\nMethodView(classinflask.views),244 preserve_context_on_exception\nmimetype(flask.Responseattribute),218 (flask.Flaskattribute),201\nmodified(flask.sessionattribute),219 process_response() (flask.Flask method),\nmodified (flask.sessions.SessionMixin at- 201\ntribute),222 propagate_exceptions (flask.Flask at-\nmodule(flask.Requestattribute),217 tribute),202\nN push() (flask.ctx.AppContext method),\n241\nname(flask.Flaskattribute),200\npush() (flask.ctx.RequestContext\nnew(flask.sessionattribute),219\nmethod),240\nnew (flask.sessions.SessionMixin at-\nPythonEnhancementProposals\ntribute),222\n310\nPEP8,277 script_info_option() (in module flask.cli),\n248\nR\nscript_root(flask.Requestattribute),216\nrecord()(flask.Blueprintmethod),214 ScriptInfo(classinflask.cli),247\nrecord_once() (flask.Blueprint method), secret_key(flask.Flaskattribute),204\n214 SecureCookieSession (class in\nredirect()(inmoduleflask),227 flask.sessions),222\nregister()(flask.Blueprintmethod),214 SecureCookieSessionInterface (class in\nregister_blueprint() (flask.Flask method), flask.sessions),222\n202 select_jinja_autoescape() (flask.Flask\nregister_error_handler() (flask.Blueprint method),204\nmethod),214 send_file()(inmoduleflask),228\nregister_error_handler() (flask.Flask send_from_directory() (in module flask),\nmethod),202 229\nregister_module() (flask.Flask method), send_static_file() (flask.Blueprint\n202 method),214\nrender_template()(inmoduleflask),235 send_static_file() (flask.Flask method),\nrender_template_string() (in module 204\nflask),235 serializer(flask.sessions.SecureCookieSessionInterface\nRequest(classinflask),215 attribute),222\nrequest(classinflask),218 session(classinflask),219\nrequest_class(flask.Flaskattribute),202 session_class\nrequest_context() (flask.Flask method), (flask.sessions.SecureCookieSessionInterface\n202 attribute),222\nrequest_finished(inmoduleflask),242 session_cookie_name (flask.Flask at-\nrequest_started(inmoduleflask),242 tribute),204\nrequest_tearing_down (in module flask), session_interface (flask.Flask attribute),\n242 204\nRequestContext(classinflask.ctx),239 session_json_serializer (in module\nResponse(classinflask),218 flask.sessions),223\nresponse_class(flask.Flaskattribute),203 session_transaction()\nRFC (flask.testing.FlaskClientmethod),\nRFC822,233 223\nroute()(flask.Blueprintmethod),214 SessionInterface (class in flask.sessions),\nroute()(flask.Flaskmethod),203 220\nrouting_exception (flask.Request at- SessionMixin(classinflask.sessions),222\ntribute),217 set_cookie()(flask.Responsemethod),219\nrun()(flask.Flaskmethod),203 shell_command(inmoduleflask.cli),248\nrun_command(inmoduleflask.cli),248 shell_context_processor() (flask.Flask\nmethod),205\nS\nshell_context_processors (flask.Flask at-\nsafe_join()(inmoduleflask),230\ntribute),205\nsalt(flask.sessions.SecureCookieSessionInterface\nshould_ignore_error() (flask.Flask\nattribute),222\nmethod),205\nsave_session()(flask.Flaskmethod),204\nshould_set_cookie()\nsave_session()\n(flask.sessions.SessionInterface\n(flask.sessions.SessionInterface\nmethod),222\nmethod),221\nsignal() (flask.signals.Namespace\n311\nmethod),243 url_default_functions (flask.Flask at-\nsignals_available(inmoduleflask),242 tribute),209\nstatus(flask.Responseattribute),218 url_defaults(flask.blueprints.BlueprintSetupState\nstatus_code (flask.Response attribute), attribute),241\n218 url_defaults() (flask.Blueprint method),\nstream(flask.Requestattribute),215 215\nstream_with_context() (in module flask), url_defaults()(flask.Flaskmethod),209\n239 url_for()(inmoduleflask),225\nstriptags()(flask.Markupmethod),231 url_map(flask.Flaskattribute),209\nsubdomain(flask.blueprints.BlueprintSetupuStral_teprefix(flask.blueprints.BlueprintSetupState\nattribute),241 attribute),242\nurl_root(flask.Requestattribute),216\nT\nurl_rule(flask.Requestattribute),218\nteardown_app_request() (flask.Blueprint url_rule_class(flask.Flaskattribute),209\nmethod),215 url_value_preprocessor() (flask.Blueprint\nteardown_appcontext() (flask.Flask method),215\nmethod),205 url_value_preprocessor() (flask.Flask\nteardown_appcontext_funcs (flask.Flask method),209\nattribute),205 url_value_preprocessors (flask.Flask at-\nteardown_request() (flask.Blueprint tribute),210\nmethod),215 use_x_sendfile(flask.Flaskattribute),210\nteardown_request() (flask.Flask method),\nV\n205\nteardown_request_funcs (flask.Flask at- values(flask.Requestattribute),215\ntribute),206 View(classinflask.views),243\ntemplate_context_processors (flask.Flask view_args(flask.Requestattribute),218\nattribute),206 view_functions(flask.Flaskattribute),210\ntemplate_filter()(flask.Flaskmethod),206\nW\ntemplate_global() (flask.Flask method),\n207 without_appcontext() (in module\ntemplate_rendered(inmoduleflask),242 flask.cli),248\ntemplate_test()(flask.Flaskmethod),207 wsgi_app()(flask.Flaskmethod),210\ntest_client()(flask.Flaskmethod),207\nY\ntest_client_class (flask.Flask attribute),\n208 YOURAPPLICATION_SETTINGS,64\ntest_request_context() (flask.Flask\nmethod),208\ntesting(flask.Flaskattribute),208\ntrap_http_exception() (flask.Flask\nmethod),208\nU\nunescape()(flask.Markupmethod),231\nupdate_template_context() (flask.Flask\nmethod),208\nurl(flask.Requestattribute),216\nurl_build_error_handlers (flask.Flask at-\ntribute),209\n312\n",
  "context": "5.4 Step2: ApplicationSetupCode . . . . . . . . . . . . . . . . . . . . . . . . 31\n5.5 Step3: DatabaseConnections . . . . . . . . . . . . . . . . . . . . . . . . . 33\n5.6 Step4: CreatingTheDatabase . . . . . . . . . . . . . . . . . . . . . . . . 34",
  "source_file": "resources\\Year 3\\Flask Framework\\python flask.pdf",
  "line_numbers": [
    43,
    11707
  ]
}