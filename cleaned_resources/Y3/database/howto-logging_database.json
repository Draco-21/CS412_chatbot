{
  "title": "howto-logging",
  "language": "python",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "Loggingisameansoftrackingeventsthathappenwhensomesoftwareruns.",
  "code": "also have an importance which the developer ascribes to the event; the importance can also be called the level or\nseverity.\n1.1 When to use logging\nYoucanaccessloggingfunctionalitybycreatingaloggervialogger = getLogger(__name__),andthencalling\nthe logger\u2019s debug(), info(), warning(), error() and critical() methods. To determine when to use\nlogging, andtoseewhichloggermethodstousewhen, seethetablebelow. Itstates, foreachofasetofcommon\ntasks,thebesttooltouseforthattask.\nTaskyouwanttoperform Thebesttoolforthetask\nDisplay console output for ordi- print()\nnary usage of a command line\nscriptorprogram\nReport events that occur during Alogger\u2019sinfo()(ordebug()methodforverydetailedoutputfordiagnos-\nnormal operation of a program ticpurposes)\n(e.g. for status monitoring or\nfaultinvestigation)\nIssueawarningregardingapar- warnings.warn() in library code if the issue is avoidable and the client\nticularruntimeevent applicationshouldbemodifiedtoeliminatethewarning\nA logger\u2019s warning() methodifthere isnothing theclientapplication can\ndoaboutthesituation,buttheeventshouldstillbenoted\nReportanerrorregardingapar- Raiseanexception\nticularruntimeevent\nReport suppression of an error Alogger\u2019serror(),exception()orcritical()methodasappropriate\nwithoutraisinganexception(e.g. forthespecificerrorandapplicationdomain\nerror handler in a long-running\nserverprocess)\nTheloggermethodsarenamedafterthelevelorseverityoftheeventstheyareusedtotrack. Thestandardlevelsand\ntheirapplicabilityaredescribedbelow(inincreasingorderofseverity):\nLevel Whenit\u2019sused\nDEBUG Detailedinformation,typicallyofinterestonlywhendiagnosingproblems.\nINFO Confirmationthatthingsareworkingasexpected.\nWARNING Anindicationthatsomethingunexpectedhappened,orindicativeofsomeprobleminthenear\nfuture(e.g. \u2018diskspacelow\u2019). Thesoftwareisstillworkingasexpected.\nERROR Duetoamoreseriousproblem,thesoftwarehasnotbeenabletoperformsomefunction.\nCRITICAL Aseriouserror,indicatingthattheprogramitselfmaybeunabletocontinuerunning.\nThedefaultlevelis WARNING,whichmeansthatonlyeventsofthisseverityandhigherwillbe tracked, unlessthe\nloggingpackageisconfiguredtodootherwise.\nEventsthataretrackedcanbehandledindifferentways. Thesimplestwayofhandlingtrackedeventsistoprintthem\ntotheconsole. Anothercommonwayistowritethemtoadiskfile.\n2\n1.2 A simple example\nAverysimpleexampleis:\nimport logging\nlogging.warning('Watch out!') # will print a message to the console\nlogging.info('I told you so') # will not print anything\nIfyoutypetheselinesintoascriptandrunit,you\u2019llsee:\nWARNING:root:Watch out!\nprinted out on the console. The INFO message doesn\u2019t appear because the default level is WARNING. The printed\nmessageincludestheindicationofthelevelandthedescriptionoftheeventprovidedintheloggingcall,i.e. \u2018Watch\nout!\u2019. Theactualoutputcanbeformattedquiteflexiblyifyouneedthat; formattingoptionswillalsobeexplained\nlater.\nNoticethatinthisexample,weusefunctionsdirectlyontheloggingmodule,likelogging.debug,ratherthan\ncreatingaloggerandcallingfunctionsonit. Thesefunctionsoperationontherootlogger,butcanbeusefulasthey\nwillcallbasicConfig()foryouifithasnotbeencalledyet,likeinthisexample. Inlargerprogramsyou\u2019llusually\nwanttocontroltheloggingconfigurationexplicitlyhowever-soforthatreasonaswellasothers,it\u2019sbettertocreate\nloggersandcalltheirmethods.\n1.3 Logging to a file\nA very common situation is that of recording logging events in a file, so let\u2019s look at that next. Be sure to try the\nfollowinginanewlystartedPythoninterpreter,anddon\u2019tjustcontinuefromthesessiondescribedabove:\nimport logging\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG)\nlogger.debug('This message should go to the log file')\nlogger.info('So should this')\nlogger.warning('And this, too')\nlogger.error('And non-ASCII stuff, too, like \u00d8resund and Malm\u00f6')\nChanged in version 3.9: The encoding argument was added. In earlier Python versions, or if not specified, the\nencodingusedisthedefaultvalueusedbyopen(). Whilenotshownintheaboveexample,anerrorsargumentcan\nalsonowbepassed,whichdetermineshowencodingerrorsarehandled. Foravailablevaluesandthedefault,seethe\ndocumentationforopen().\nAndnowifweopenthefileandlookatwhatwehave,weshouldfindthelogmessages:\nDEBUG:__main__:This message should go to the log file\nINFO:__main__:So should this\nWARNING:__main__:And this, too\nERROR:__main__:And non-ASCII stuff, too, like \u00d8resund and Malm\u00f6\nThis example also shows how you can set the logging level which acts as the threshold for tracking. In this case,\nbecausewesetthethresholdtoDEBUG,allofthemessageswereprinted.\nIfyouwanttosetthelogginglevelfromacommand-lineoptionsuchas:\n--log=INFO\nandyouhavethevalueoftheparameterpassedfor--loginsomevariableloglevel,youcanuse:\ngetattr(logging, loglevel.upper())\ntogetthevaluewhichyou\u2019llpasstobasicConfig()viathelevelargument. Youmaywanttoerrorcheckanyuser\ninputvalue,perhapsasinthefollowingexample:\n3\n# assuming loglevel is bound to the string value obtained from the\n# command line argument. Convert to upper case to allow the user to\n# specify --log=DEBUG or --log=debug\nnumeric_level = getattr(logging, loglevel.upper(), None)\nif not isinstance(numeric_level, int):\nraise ValueError('Invalid log level: %s' % loglevel)\nlogging.basicConfig(level=numeric_level, ...)\nThe call to basicConfig() should come before any calls to a logger\u2019s methods such as debug(), info(), etc.\nOtherwise,thatloggingeventmaynotbehandledinthedesiredmanner.\nIf you run the above script several times, the messages from successive runs are appended to the file example.log.\nIfyouwanteachruntostartafresh,notrememberingthemessagesfromearlierruns,youcanspecifythefilemode\nargument,bychangingthecallintheaboveexampleto:\nlogging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)\nTheoutputwillbethesameasbefore,butthelogfileisnolongerappendedto,sothemessagesfromearlierrunsare\nlost.\n1.4 Logging variable data\nTologvariabledata,useaformatstringfortheeventdescriptionmessageandappendthevariabledataasarguments.\nForexample:\nimport logging\nlogging.warning('%s before you %s', 'Look', 'leap!')\nwilldisplay:\nWARNING:root:Look before you leap!\nAsyoucansee,mergingofvariabledataintotheeventdescriptionmessageusestheold,%-styleofstringformatting.\nThisisforbackwardscompatibility: theloggingpackagepre-datesnewerformattingoptionssuchasstr.format()\nandstring.Template. Thesenewerformattingoptionsaresupported,butexploringthemisoutsidethescopeof\nthistutorial: seeformatting-stylesformoreinformation.\n1.5 Changing the format of displayed messages\nTochangetheformatwhichisusedtodisplaymessages,youneedtospecifytheformatyouwanttouse:\nimport logging\nlogging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)\nlogging.debug('This message should appear on the console')\nlogging.info('So should this')\nlogging.warning('And this, too')\nwhichwouldprint:\nDEBUG:This message should appear on the console\nINFO:So should this\nWARNING:And this, too\nNoticethatthe\u2018root\u2019whichappearedinearlierexamples hasdisappeared. Fora fullsetofthingsthatcanappear\nin format strings, you can refer to the documentation for logrecord-attributes, but for simple usage, you just need\nthelevelname(severity),message(eventdescription,includingvariabledata)andperhapstodisplaywhentheevent\noccurred. Thisisdescribedinthenextsection.\n4\n1.6 Displaying the date/time in messages\nTodisplaythedateandtimeofanevent,youwouldplace\u2018%(asctime)s\u2019inyourformatstring:\nimport logging\nlogging.basicConfig(format='%(asctime)s %(message)s')\nlogging.warning('is when this event was logged.')\nwhichshouldprintsomethinglikethis:\n2010-12-12 11:41:42,612 is when this event was logged.\nThedefaultformatfordate/timedisplay(shownabove)islikeISO8601orRFC3339. Ifyouneedmorecontrolover\ntheformattingofthedate/time,provideadatefmtargumenttobasicConfig,asinthisexample:\nimport logging\nlogging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p\n,\u2192')\nlogging.warning('is when this event was logged.')\nwhichwoulddisplaysomethinglikethis:\n12/12/2010 11:46:36 AM is when this event was logged.\nTheformatofthedatefmtargumentisthesameassupportedbytime.strftime().\n1.7 Next Steps\nThatconcludesthebasictutorial. Itshouldbeenoughtogetyouupandrunningwithlogging. There\u2019salotmorethat\ntheloggingpackageoffers,buttogetthebestoutofit,you\u2019llneedtoinvestalittlemoreofyourtimeinreadingthe\nfollowingsections. Ifyou\u2019rereadyforthat,grabsomeofyourfavouritebeverageandcarryon.\nIfyourloggingneedsaresimple,thenusetheaboveexamplestoincorporateloggingintoyourownscripts,andif\nyourunintoproblemsordon\u2019tunderstandsomething,pleasepostaquestiononthecomp.lang.pythonUsenetgroup\n(availableathttps://groups.google.com/g/comp.lang.python)andyoushouldreceivehelpbeforetoolong.\nStillhere? Youcancarryonreadingthenextfewsections,whichprovideaslightlymoreadvanced/in-depthtutorial\nthanthebasiconeabove. Afterthat,youcantakealookatthelogging-cookbook.\n2 Advanced Logging Tutorial\nThelogginglibrarytakesamodularapproachandoffersseveralcategoriesofcomponents: loggers,handlers,filters,\nandformatters.\n\u2022 Loggersexposetheinterfacethatapplicationcodedirectlyuses.\n\u2022 Handlerssendthelogrecords(createdbyloggers)totheappropriatedestination.\n\u2022 Filtersprovideafinergrainedfacilityfordeterminingwhichlogrecordstooutput.\n\u2022 Formattersspecifythelayoutoflogrecordsinthefinaloutput.\nLogeventinformationispassedbetweenloggers,handlers,filtersandformattersinaLogRecordinstance.\nLoggingisperformedbycallingmethodsoninstancesoftheLoggerclass(hereaftercalledloggers). Eachinstance\nhas a name, and they are conceptually arranged in a namespace hierarchy using dots (periods) as separators. For\nexample,aloggernamed\u2018scan\u2019istheparentofloggers\u2018scan.text\u2019,\u2018scan.html\u2019and\u2018scan.pdf\u2019. Loggernamescanbe\nanythingyouwant,andindicatetheareaofanapplicationinwhichaloggedmessageoriginates.\nAgoodconventiontousewhennamingloggersistouseamodule-levellogger,ineachmodulewhichuseslogging,\nnamedasfollows:\n5\nlogger = logging.getLogger(__name__)\nThismeansthatloggernamestrackthepackage/modulehierarchy,andit\u2019sintuitivelyobviouswhereeventsarelogged\njustfromtheloggername.\nThe root of the hierarchy of loggers is called the root logger. That\u2019s the logger used by the functions debug(),\ninfo(),warning(),error()andcritical(),whichjustcallthesame-namedmethodoftherootlogger. The\nfunctionsandthemethodshavethesamesignatures. Therootlogger\u2019snameisprintedas\u2018root\u2019intheloggedoutput.\nIt is, of course, possible to log messages to different destinations. Support is included in the package for writing\nlogmessagestofiles,HTTPGET/POSTlocations,emailviaSMTP,genericsockets,queues,orOS-specificlogging\nmechanismssuchassyslogortheWindowsNTeventlog. Destinationsareservedbyhandlerclasses. Youcancreate\nyourownlogdestinationclassifyouhavespecialrequirementsnotmetbyanyofthebuilt-inhandlerclasses.\nBy default, no destination is set for any logging messages. You can specify a destination (such as console or file)\nby using basicConfig() as in the tutorial examples. If you call the functions debug(), info(), warning(),\nerror() and critical(), they will check to see if no destination is set; and if one is not set, they will set a\ndestination of the console (sys.stderr) and a default format for the displayed message before delegating to the\nrootloggertodotheactualmessageoutput.\nThedefaultformatsetbybasicConfig()formessagesis:\nseverity:logger name:message\nYou can change this by passing a format string to basicConfig() with the format keyword argument. For all\noptionsregardinghowaformatstringisconstructed,seeformatter-objects.\n2.1 Logging Flow\nTheflowoflogeventinformationinloggersandhandlersisillustratedinthefollowingdiagram.\n6\n2.2 Loggers\nLoggerobjectshaveathreefoldjob. First,theyexposeseveralmethodstoapplicationcodesothatapplicationscan\nlogmessagesatruntime. Second,loggerobjectsdeterminewhichlogmessagestoactuponbaseduponseverity(the\ndefaultfilteringfacility)orfilterobjects. Third,loggerobjectspassalongrelevantlogmessagestoallinterestedlog\nhandlers.\nThemostwidelyusedmethodsonloggerobjectsfallintotwocategories: configurationandmessagesending.\nThesearethemostcommonconfigurationmethods:\n\u2022 Logger.setLevel()specifiesthelowest-severitylogmessagealoggerwillhandle,wheredebugisthelowest\nbuilt-in severitylevelandcriticalis thehighestbuilt-inseverity. Forexample, if theseveritylevelisINFO,\ntheloggerwillhandleonlyINFO,WARNING,ERROR,andCRITICALmessagesandwillignoreDEBUG\nmessages.\n\u2022 Logger.addHandler()andLogger.removeHandler()addandremovehandlerobjectsfromthelogger\nobject. HandlersarecoveredinmoredetailinHandlers.\n\u2022 Logger.addFilter()andLogger.removeFilter()addandremovefilterobjectsfromtheloggerob-\n7\nject. Filtersarecoveredinmoredetailinfilter.\nYoudon\u2019tneedtoalwayscallthesemethodsoneveryloggeryoucreate. Seethelasttwoparagraphsinthissection.\nWiththeloggerobjectconfigured,thefollowingmethodscreatelogmessages:\n\u2022 Logger.debug(), Logger.info(), Logger.warning(), Logger.error(), and Logger.\ncritical() all create log records with a message and a level that corresponds to their respective\nmethod names. The message is actually a format string, which may contain the standard string substitution\nsyntax of %s, %d, %f, and so on. The rest of their arguments is a list of objects that correspond with the\nsubstitutionfieldsinthemessage. Withregardto**kwargs,theloggingmethodscareonlyaboutakeyword\nofexc_infoanduseittodeterminewhethertologexceptioninformation.\n\u2022 Logger.exception()createsalogmessagesimilartoLogger.error(). ThedifferenceisthatLogger.\nexception()dumpsastacktracealongwithit. Callthismethodonlyfromanexceptionhandler.\n\u2022 Logger.log()takesaloglevelasanexplicitargument. Thisisalittlemoreverboseforloggingmessages\nthanusingtheloglevelconveniencemethodslistedabove,butthisishowtologatcustomloglevels.\ngetLogger() returns a reference to a logger instance with the specified name if it is provided, or root if not.\nThenamesareperiod-separatedhierarchicalstructures. MultiplecallstogetLogger()withthesamenamewill\nreturn a reference to the same logger object. Loggers that are further down in the hierarchical list are children of\nloggers higher up in the list. For example, given a logger with a name of foo, loggers with names of foo.bar,\nfoo.bar.baz,andfoo.bamarealldescendantsoffoo.\nLoggers have a concept of effective level. If a level is not explicitly set on a logger, the level of its parent is used\ninsteadasitseffectivelevel. Iftheparenthasnoexplicitlevelset,itsparentisexamined,andsoon-allancestorsare\nsearcheduntilanexplicitlysetlevelisfound. Therootloggeralwayshasanexplicitlevelset(WARNINGbydefault).\nWhendecidingwhethertoprocessanevent,theeffectiveleveloftheloggerisusedtodeterminewhethertheevent\nispassedtothelogger\u2019shandlers.\nChild loggers propagate messages up to the handlers associated with their ancestor loggers. Because of this, it is\nunnecessary to define and configure handlers for all the loggers an application uses. It is sufficient to configure\nhandlersforatop-levelloggerandcreatechildloggersasneeded. (Youcan,however,turnoffpropagationbysetting\nthepropagateattributeofaloggertoFalse.)\n2.3 Handlers\nHandlerobjectsareresponsiblefordispatchingtheappropriatelogmessages(basedonthelogmessages\u2019severity)\ntothehandler\u2019sspecifieddestination. Loggerobjectscanaddzeroormorehandlerobjectstothemselveswithan\naddHandler() method. As an example scenario, an application may want to send all log messages to a log file,\nalllogmessagesoferrororhighertostdout,andallmessagesofcriticaltoanemailaddress. Thisscenariorequires\nthreeindividualhandlerswhereeachhandlerisresponsibleforsendingmessagesofaspecificseveritytoaspecific\nlocation.\nThe standard library includes quite a few handler types (see Useful Handlers); the tutorials use mainly\nStreamHandlerandFileHandlerinitsexamples.\nThereareveryfewmethodsina handlerforapplicationdeveloperstoconcernthemselveswith. Theonlyhandler\nmethodsthatseemrelevantforapplicationdeveloperswhoareusingthebuilt-inhandlerobjects(thatis,notcreating\ncustomhandlers)arethefollowingconfigurationmethods:\n\u2022 The setLevel() method, just as in logger objects, specifies the lowest severity that will be dispatched to\ntheappropriatedestination. WhyaretheretwosetLevel()methods? Thelevelsetintheloggerdetermines\nwhichseverityofmessagesitwillpasstoitshandlers. Thelevelsetineachhandlerdetermineswhichmessages\nthathandlerwillsendon.\n\u2022 setFormatter()selectsaFormatterobjectforthishandlertouse.\n\u2022 addFilter()andremoveFilter()respectivelyconfigureanddeconfigurefilterobjectsonhandlers.\nApplicationcodeshouldnotdirectlyinstantiateanduseinstancesofHandler. Instead,theHandlerclassisabase\nclassthatdefinestheinterfacethatallhandlersshouldhaveandestablishessomedefaultbehaviorthatchildclasses\ncanuse(oroverride).\n8\n2.4 Formatters\nFormatterobjectsconfigurethefinalorder,structure,andcontentsofthelogmessage. Unlikethebaselogging.\nHandlerclass,applicationcodemayinstantiateformatterclasses,althoughyoucouldlikelysubclasstheformatter\nifyourapplicationneedsspecialbehavior. Theconstructortakesthreeoptionalarguments\u2013amessageformatstring,\nadateformatstringandastyleindicator.\nlogging.Formatter.__init__(fmt=None,datefmt=None,style=\u2019%\u2019)\nIfthereisnomessageformatstring,thedefaultistousetherawmessage. Ifthereisnodateformatstring,thedefault\ndateformatis:\n%Y-%m-%d %H:%M:%S\nwiththemillisecondstackedonattheend. Thestyleisoneof'%','{',or'$'. Ifoneoftheseisnotspecified,\nthen'%'willbeused.\nIfthestyleis'%',themessageformatstringuses%(<dictionary key>)sstyledstringsubstitution;thepossible\nkeysaredocumentedinlogrecord-attributes. Ifthestyleis'{',themessageformatstringisassumedtobecompatible\nwith str.format() (using keyword arguments), while if the style is '$' then the message format string should\nconformtowhatisexpectedbystring.Template.substitute().\nChangedinversion3.2: Addedthestyleparameter.\nThefollowingmessageformatstringwilllogthetimeinahuman-readableformat,theseverityofthemessage,and\nthecontentsofthemessage,inthatorder:\n'%(asctime)s - %(levelname)s - %(message)s'\nFormattersuseauser-configurablefunctiontoconvertthecreationtimeofarecordtoatuple. Bydefault, time.\nlocaltime()isused;tochangethisforaparticularformatterinstance,settheconverterattributeoftheinstance\ntoafunctionwiththesamesignatureastime.localtime()ortime.gmtime(). Tochangeitforallformatters,\nforexampleifyouwantallloggingtimestobeshowninGMT,settheconverterattributeintheFormatterclass\n(totime.gmtimeforGMTdisplay).\n2.5 Configuring Logging\nProgrammerscanconfigurelogginginthreeways:\n1. Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods\nlistedabove.\n2. CreatingaloggingconfigfileandreadingitusingthefileConfig()function.\n3. CreatingadictionaryofconfigurationinformationandpassingittothedictConfig()function.\nForthereferencedocumentationonthelasttwooptions,seelogging-config-api. Thefollowingexampleconfiguresa\nverysimplelogger,aconsolehandler,andasimpleformatterusingPythoncode:\nimport logging\n# create logger\nlogger = logging.getLogger('simple_example')\nlogger.setLevel(logging.DEBUG)\n# create console handler and set level to debug\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\n# create formatter\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s\n,\u2192')\n(continuesonnextpage)\n9\n(continuedfrompreviouspage)\n# add formatter to ch\nch.setFormatter(formatter)\n# add ch to logger\nlogger.addHandler(ch)\n# 'application' code\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\nRunningthismodulefromthecommandlineproducesthefollowingoutput:\n$ python simple_logging_module.py\n2005-03-19 15:10:26,618 - simple_example - DEBUG - debug message\n2005-03-19 15:10:26,620 - simple_example - INFO - info message\n2005-03-19 15:10:26,695 - simple_example - WARNING - warn message\n2005-03-19 15:10:26,697 - simple_example - ERROR - error message\n2005-03-19 15:10:26,773 - simple_example - CRITICAL - critical message\nThefollowingPythonmodulecreatesalogger,handler,andformatternearlyidenticaltothoseintheexamplelisted\nabove,withtheonlydifferencebeingthenamesoftheobjects:\nimport logging\nimport logging.config\nlogging.config.fileConfig('logging.conf')\n# create logger\nlogger = logging.getLogger('simpleExample')\n# 'application' code\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\nHereisthelogging.conffile:\n[loggers]\nkeys=root,simpleExample\n[handlers]\nkeys=consoleHandler\n[formatters]\nkeys=simpleFormatter\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler\n[logger_simpleExample]\nlevel=DEBUG\n(continuesonnextpage)\n10\n(continuedfrompreviouspage)\nhandlers=consoleHandler\nqualname=simpleExample\npropagate=0\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(sys.stdout,)\n[formatter_simpleFormatter]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)s\nTheoutputisnearlyidenticaltothatofthenon-config-file-basedexample:\n$ python simple_logging_config.py\n2005-03-19 15:38:55,977 - simpleExample - DEBUG - debug message\n2005-03-19 15:38:55,979 - simpleExample - INFO - info message\n2005-03-19 15:38:56,054 - simpleExample - WARNING - warn message\n2005-03-19 15:38:56,055 - simpleExample - ERROR - error message\n2005-03-19 15:38:56,130 - simpleExample - CRITICAL - critical message\nYoucanseethattheconfigfileapproachhasafewadvantagesoverthePythoncodeapproach,mainlyseparationof\nconfigurationandcodeandtheabilityofnoncoderstoeasilymodifytheloggingproperties.\n(cid:193) Warning\nThe fileConfig() function takes a default parameter, disable_existing_loggers, which defaults to\nTrue for reasons of backward compatibility. This may or may not be what you want, since it will cause any\nnon-rootloggersexistingbeforethefileConfig()calltobedisabledunlessthey(oranancestor)areexplic-\nitlynamedintheconfiguration. Pleaserefertothereferencedocumentationformoreinformation,andspecify\nFalseforthisparameterifyouwish.\nThe dictionary passed to dictConfig() can also specify a Boolean value with key\ndisable_existing_loggers, which if not specified explicitly in the dictionary also defaults to being\ninterpretedasTrue. Thisleadstothelogger-disablingbehaviourdescribedabove,whichmaynotbewhatyou\nwant-inwhichcase,providethekeyexplicitlywithavalueofFalse.\nNote that the class names referenced in config files need to be either relative to the logging module, or absolute\nvalueswhichcanberesolvedusingnormalimportmechanisms. Thus,youcoulduseeitherWatchedFileHandler\n(relativetotheloggingmodule)ormypackage.mymodule.MyHandler(foraclassdefinedinpackagemypackage\nandmodulemymodule,wheremypackageisavailableonthePythonimportpath).\nIn Python 3.2, a new means of configuring logging has been introduced, using dictionaries to hold configuration\ninformation. This provides a superset of the functionality of the config-file-based approach outlined above, and is\ntherecommendedconfigurationmethodfornewapplicationsanddeployments. BecauseaPythondictionaryisused\ntoholdconfigurationinformation,andsinceyoucanpopulatethatdictionaryusingdifferentmeans,youhavemore\noptionsforconfiguration. Forexample, youcanusea configurationfileinJSON format, or, ifyouhaveaccessto\nYAMLprocessingfunctionality,afileinYAMLformat,topopulatetheconfigurationdictionary. Or,ofcourse,you\ncanconstructthedictionaryinPythoncode,receiveitinpickledformoverasocket,orusewhateverapproachmakes\nsenseforyourapplication.\nHere\u2019sanexampleofthesameconfigurationasabove,inYAMLformatforthenewdictionary-basedapproach:\nversion: 1\nformatters:\nsimple:\n(continuesonnextpage)\n11\n(continuedfrompreviouspage)\nformat: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\nhandlers:\nconsole:\nclass: logging.StreamHandler\nlevel: DEBUG\nformatter: simple\nstream: ext://sys.stdout\nloggers:\nsimpleExample:\nlevel: DEBUG\nhandlers: [console]\npropagate: no\nroot:\nlevel: DEBUG\nhandlers: [console]\nFormoreinformationaboutloggingusingadictionary,seelogging-config-api.\n2.6 What happens if no configuration is provided\nIfnologgingconfigurationisprovided,itispossibletohaveasituationwherealoggingeventneedstobeoutput,but\nnohandlerscanbefoundtooutputtheevent.\nTheeventisoutputusinga\u2018handleroflastresort\u2019, storedinlastResort. Thisinternalhandlerisnotassociated\nwithanylogger,andactslikeaStreamHandlerwhichwritestheeventdescriptionmessagetothecurrentvalueof\nsys.stderr(thereforerespectinganyredirectionswhichmaybeineffect). Noformattingisdoneonthemessage\n-justthebareeventdescriptionmessageisprinted. Thehandler\u2019slevelissettoWARNING,soalleventsatthisand\ngreaterseveritieswillbeoutput.\nChangedinversion3.2: ForversionsofPythonpriorto3.2,thebehaviourisasfollows:\n\u2022 IfraiseExceptionsisFalse(productionmode),theeventissilentlydropped.\n\u2022 IfraiseExceptionsisTrue(developmentmode),amessage\u2018NohandlerscouldbefoundforloggerX.Y.Z\u2019\nisprintedonce.\nToobtainthepre-3.2behaviour,lastResortcanbesettoNone.\n2.7 Configuring Logging for a Library\nWhen developing a library which uses logging, you should take care to document how the library uses logging -\nforexample,thenamesofloggersused. Someconsiderationalsoneedstobegiventoitsloggingconfiguration. If\ntheusingapplicationdoesnotuselogging,andlibrarycodemakesloggingcalls,then(asdescribedintheprevious\nsection)eventsofseverityWARNINGandgreaterwillbeprintedtosys.stderr. Thisisregardedasthebestdefault\nbehaviour.\nIfforsomereasonyoudon\u2019twantthesemessagesprintedintheabsenceofanyloggingconfiguration,youcanattach\nado-nothinghandlertothetop-levelloggerforyourlibrary. Thisavoidsthemessagebeingprinted,sinceahandler\nwillalwaysbefoundforthelibrary\u2019sevents: itjustdoesn\u2019tproduceanyoutput. Ifthelibraryuserconfigureslogging\nforapplicationuse,presumablythatconfigurationwilladdsomehandlers,andiflevelsaresuitablyconfiguredthen\nloggingcallsmadeinlibrarycodewillsendoutputtothosehandlers,asnormal.\nA do-nothing handler is included in the logging package: NullHandler (since Python 3.1). An instance of this\nhandlercouldbeaddedtothetop-levelloggeroftheloggingnamespaceusedbythelibrary(if youwanttoprevent\nyourlibrary\u2019sloggedeventsbeingoutputtosys.stderrintheabsenceofloggingconfiguration). Ifallloggingby\nalibraryfooisdoneusingloggerswithnamesmatching\u2018foo.x\u2019,\u2018foo.x.y\u2019,etc. thenthecode:\nimport logging\nlogging.getLogger('foo').addHandler(logging.NullHandler())\n12\nshouldhavethedesiredeffect. Ifanorganisationproducesanumberoflibraries,thentheloggernamespecifiedcan\nbe\u2018orgname.foo\u2019ratherthanjust\u2018foo\u2019.\n(cid:174) Note\nItisstronglyadvisedthatyoudonotlogtotherootloggerinyourlibrary. Instead,usealoggerwithauniqueand\neasilyidentifiablename, suchasthe__name__foryourlibrary\u2019stop-levelpackageormodule. Loggingtothe\nrootloggerwillmakeitdifficultorimpossiblefortheapplicationdevelopertoconfiguretheloggingverbosityor\nhandlersofyourlibraryastheywish.\n(cid:174) Note\nItisstronglyadvisedthatyoudonotaddanyhandlersotherthanNullHandlertoyourlibrary\u2019sloggers. Thisis\nbecausetheconfigurationofhandlersistheprerogativeoftheapplicationdeveloperwhousesyourlibrary. The\napplicationdeveloperknowstheirtargetaudienceandwhathandlersaremostappropriatefortheirapplication:\nifyouaddhandlers\u2018underthehood\u2019,youmightwellinterferewiththeirabilitytocarryoutunittestsanddeliver\nlogswhichsuittheirrequirements.\n3 Logging Levels\nThenumericvaluesoflogginglevelsaregiveninthefollowingtable. Theseareprimarilyofinterestifyouwantto\ndefineyourownlevels,andneedthemtohavespecificvaluesrelativetothepredefinedlevels. Ifyoudefinealevel\nwiththesamenumericvalue,itoverwritesthepredefinedvalue;thepredefinednameislost.\nLevel Numericvalue\nCRITICAL 50\nERROR 40\nWARNING 30\nINFO 20\nDEBUG 10\nNOTSET 0\nLevels can also be associated with loggers, being set either by the developer or through loading a saved logging\nconfiguration. Whenaloggingmethodiscalledonalogger,theloggercomparesitsownlevelwiththelevelassociated\nwiththemethodcall. Ifthelogger\u2019slevelishigherthanthemethodcall\u2019s,nologgingmessageisactuallygenerated.\nThisisthebasicmechanismcontrollingtheverbosityofloggingoutput.\nLoggingmessagesareencodedasinstancesoftheLogRecordclass. Whenaloggerdecidestoactuallyloganevent,\naLogRecordinstanceiscreatedfromtheloggingmessage.\nLogging messages are subjected to a dispatch mechanism through the use of handlers, which are instances of\nsubclasses of the Handler class. Handlers are responsible for ensuring that a logged message (in the form of a\nLogRecord) ends up in a particular location (or set of locations) which is useful for the target audience for that\nmessage(suchasendusers,supportdeskstaff,systemadministrators,developers). HandlersarepassedLogRecord\ninstancesintendedforparticulardestinations. Eachloggercanhavezero,oneormorehandlersassociatedwithit(via\ntheaddHandler()methodofLogger). Inadditiontoanyhandlersdirectlyassociatedwithalogger,allhandlers\nassociatedwithallancestorsoftheloggerarecalledtodispatchthemessage(unlessthepropagateflagforaloggeris\nsettoafalsevalue,atwhichpointthepassingtoancestorhandlersstops).\nJustasforloggers,handlerscanhavelevelsassociatedwiththem. Ahandler\u2019slevelactsasafilterinthesameway\nasalogger\u2019sleveldoes. Ifahandlerdecidestoactuallydispatchanevent, theemit()methodisusedtosendthe\nmessagetoitsdestination. Mostuser-definedsubclassesofHandlerwillneedtooverridethisemit().\n13\n3.1 Custom Levels\nDefiningyourownlevelsispossible,butshouldnotbenecessary,astheexistinglevelshavebeenchosenonthebasis\nofpracticalexperience. However,ifyouareconvincedthatyouneedcustomlevels,greatcareshouldbeexercised\nwhen doing this, and it is possibly a very bad idea to define custom levels if you are developing a library. That\u2019s\nbecauseifmultiplelibraryauthorsalldefinetheirowncustomlevels,thereisachancethattheloggingoutputfrom\nsuch multiple libraries used together will be difficult for the using developer to control and/or interpret, because a\ngivennumericvaluemightmeandifferentthingsfordifferentlibraries.\n4 Useful Handlers\nInadditiontothebaseHandlerclass,manyusefulsubclassesareprovided:\n1. StreamHandlerinstancessendmessagestostreams(file-likeobjects).\n2. FileHandlerinstancessendmessagestodiskfiles.\n3. BaseRotatingHandleristhebaseclassforhandlersthatrotatelogfilesatacertainpoint. Itisnotmeant\ntobeinstantiateddirectly. Instead,useRotatingFileHandlerorTimedRotatingFileHandler.\n4. RotatingFileHandlerinstancessendmessagestodiskfiles,withsupportformaximumlogfilesizesand\nlogfilerotation.\n5. TimedRotatingFileHandler instances send messages to disk files, rotating the log file at certain timed\nintervals.\n6. SocketHandlerinstancessendmessagestoTCP/IPsockets. Since3.4,Unixdomainsocketsarealsosup-\nported.\n7. DatagramHandlerinstancessendmessagestoUDPsockets. Since3.4,Unixdomainsocketsarealsosup-\nported.\n8. SMTPHandlerinstancessendmessagestoadesignatedemailaddress.\n9. SysLogHandlerinstancessendmessagestoaUnixsyslogdaemon,possiblyonaremotemachine.\n10. NTEventLogHandlerinstancessendmessagestoaWindowsNT/2000/XPeventlog.\n11. MemoryHandlerinstancessendmessagestoabufferinmemory,whichisflushedwheneverspecificcriteria\naremet.\n12. HTTPHandlerinstancessendmessagestoanHTTPserverusingeitherGETorPOSTsemantics.\n13. WatchedFileHandler instances watchthefiletheyareloggingto. If thefile changes, itisclosedandre-\nopenedusingthefilename. ThishandlerisonlyusefulonUnix-likesystems;Windowsdoesnotsupportthe\nunderlyingmechanismused.\n14. QueueHandler instances send messages to a queue, such as those implemented in the queue or\nmultiprocessingmodules.\n15. NullHandlerinstancesdonothingwitherrormessages. Theyareusedbylibrarydeveloperswhowanttouse\nlogging,butwanttoavoidthe\u2018NohandlerscouldbefoundforloggerXXX\u2019messagewhichcanbedisplayedif\nthelibraryuserhasnotconfiguredlogging. SeeConfiguringLoggingforaLibraryformoreinformation.\nAddedinversion3.1: TheNullHandlerclass.\nAddedinversion3.2: TheQueueHandlerclass.\nTheNullHandler,StreamHandlerandFileHandlerclassesaredefinedinthecoreloggingpackage. Theother\nhandlersaredefinedinasub-module,logging.handlers. (Thereisalsoanothersub-module,logging.config,\nforconfigurationfunctionality.)\nLoggedmessagesareformattedforpresentationthroughinstancesoftheFormatterclass. Theyareinitializedwith\naformatstringsuitableforusewiththe%operatorandadictionary.\nForformattingmultiplemessagesinabatch, instancesofBufferingFormattercanbeused. Inadditiontothe\nformatstring(whichisappliedtoeachmessageinthebatch),thereisprovisionforheaderandtrailerformatstrings.\n14\nWhenfilteringbasedonloggerleveland/orhandlerlevelisnotenough,instancesofFiltercanbeaddedtoboth\nLoggerandHandlerinstances(throughtheiraddFilter()method). Beforedecidingtoprocessamessagefur-\nther,bothloggersandhandlersconsultalltheirfiltersforpermission. Ifanyfilterreturnsafalsevalue,themessage\nisnotprocessedfurther.\nThebasicFilterfunctionalityallowsfilteringbyspecificloggername. Ifthisfeatureisused,messagessenttothe\nnamedloggeranditschildrenareallowedthroughthefilter,andallothersdropped.\n5 Exceptions raised during logging\nTheloggingpackageisdesignedtoswallowexceptionswhichoccurwhilelogginginproduction. Thisissothaterrors\nwhichoccurwhilehandlingloggingevents-suchasloggingmisconfiguration,networkorothersimilarerrors-do\nnotcausetheapplicationusingloggingtoterminateprematurely.\nSystemExitandKeyboardInterruptexceptionsareneverswallowed. Otherexceptionswhichoccurduringthe\nemit()methodofaHandlersubclassarepassedtoitshandleError()method.\nThe default implementation of handleError() in Handler checks to see if a module-level variable,\nraiseExceptions,isset. Ifset,atracebackisprintedtosys.stderr. Ifnotset,theexceptionisswallowed.\n(cid:174) Note\nThe default value of raiseExceptions is True. This is because during development, you typically want to\nbenotifiedofanyexceptionsthatoccur. It\u2019sadvisedthatyousetraiseExceptionstoFalseforproduction\nusage.\n6 Using arbitrary objects as messages\nIn the preceding sections and examples, it has been assumed that the message passed when logging the event is a\nstring. However,thisisnottheonlypossibility. Youcanpassanarbitraryobjectasamessage,andits__str__()\nmethodwillbecalledwhentheloggingsystemneedstoconvertittoastringrepresentation. Infact,ifyouwantto,\nyoucanavoidcomputingastringrepresentationaltogether-forexample, theSocketHandleremitsaneventby\npicklingitandsendingitoverthewire.\n7 Optimization\nFormattingofmessageargumentsisdeferreduntilitcannotbeavoided. However,computingtheargumentspassed\ntotheloggingmethodcanalsobeexpensive,andyoumaywanttoavoiddoingitiftheloggerwilljustthrowaway\nyour event. To decide what to do, you can call the isEnabledFor() method which takes a level argument and\nreturnstrueiftheeventwouldbecreatedbytheLoggerforthatlevelofcall. Youcanwritecodelikethis:\nif logger.isEnabledFor(logging.DEBUG):\nlogger.debug('Message with %s, %s', expensive_func1(),\nexpensive_func2())\nso that if the logger\u2019s threshold is set above DEBUG, the calls to expensive_func1 and expensive_func2 are\nnevermade.\n(cid:174) Note\nInsomecases, isEnabledFor()canitselfbemoreexpensivethanyou\u2019dlike(e.g. fordeeplynestedloggers\nwhereanexplicitlevelisonlysethighupintheloggerhierarchy). Insuchcases(orifyouwanttoavoidcallinga\nmethodintightloops),youcancachetheresultofacalltoisEnabledFor()inalocalorinstancevariable,and\nusethatinsteadofcallingthemethodeachtime. Suchacachedvaluewouldonlyneedtoberecomputedwhen\ntheloggingconfigurationchangesdynamicallywhiletheapplicationisrunning(whichisnotallthatcommon).\n15\nThereareotheroptimizationswhichcanbemadeforspecificapplicationswhichneedmoreprecisecontroloverwhat\nlogginginformationiscollected. Here\u2019salistofthingsyoucandotoavoidprocessingduringloggingwhichyoudon\u2019t\nneed:\nWhatyoudon\u2019twanttocollect Howtoavoidcollectingit\nInformation about where calls Setlogging._srcfiletoNone. Thisavoidscallingsys._getframe(),\nweremadefrom. whichmayhelptospeedupyourcodeinenvironmentslikePyPy(whichcan\u2019t\nspeedupcodethatusessys._getframe()).\nThreadinginformation. Setlogging.logThreadstoFalse.\nCurrent process ID (os. Setlogging.logProcessestoFalse.\ngetpid())\nCurrent process name when us- Setlogging.logMultiprocessingtoFalse.\ningmultiprocessingtoman-\nagemultipleprocesses.\nCurrent asyncio.Task name Setlogging.logAsyncioTaskstoFalse.\nwhenusingasyncio.\nAlsonotethatthecoreloggingmoduleonlyincludesthebasichandlers. Ifyoudon\u2019timportlogging.handlers\nandlogging.config,theywon\u2019ttakeupanymemory.\n8 Other resources\n(cid:181) Seealso\nModulelogging\nAPIreferencefortheloggingmodule.\nModulelogging.config\nConfigurationAPIfortheloggingmodule.\nModulelogging.handlers\nUsefulhandlersincludedwiththeloggingmodule.\nAloggingcookbook\n16\nIndex\nNon-alphabetical\n__init__()(logging.logging.Formattermethod),9\nR\nRFC\nRFC 3339,5\n17\n",
  "context": "Loggingisameansoftrackingeventsthathappenwhensomesoftwareruns. Thesoftware\u2019sdeveloperaddslogging\ncallstotheircodetoindicatethatcertaineventshaveoccurred. Aneventisdescribedbyadescriptivemessagewhich\ncanoptionallycontainvariabledata(i.e. datathatispotentiallydifferentforeachoccurrenceoftheevent). Events",
  "source_file": "resources\\Year 3\\Python\\howto-logging.pdf",
  "line_numbers": [
    41,
    639
  ]
}