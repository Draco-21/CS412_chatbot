{
  "title": "reference",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "8.6.2 Guards .",
  "code": "8.7 Functiondefinitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n8.8 Classdefinitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n8.9 Coroutines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\n8.9.1 Coroutinefunctiondefinition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\n8.9.2 Theasync forstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n8.9.3 Theasync withstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n8.10 Typeparameterlists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\n8.10.1 Genericfunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129\n8.10.2 Genericclasses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n8.10.3 Generictypealiases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131\n9 Top-levelcomponents 133\n9.1 CompletePythonprograms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n9.2 Fileinput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n9.3 Interactiveinput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n9.4 Expressioninput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n10 FullGrammarspecification 135\nA Glossary 153\nB Aboutthisdocumentation 171\nB.1 ContributorstothePythondocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171\nC HistoryandLicense 173\nC.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\nC.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 174\nC.2.1 PYTHONSOFTWAREFOUNDATIONLICENSEVERSION2 . . . . . . . . . . . . . 174\nC.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 175\nC.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 175\nC.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 176\nC.2.5 ZERO-CLAUSEBSDLICENSEFORCODEINTHEPYTHONDOCUMENTATION . 177\nC.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 177\nC.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177\nC.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178\nC.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179\nC.3.4 Cookiemanagement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179\nC.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179\nC.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180\nC.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\nC.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\nC.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\nC.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\nC.3.11 strtodanddtoa. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\nC.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\nC.3.13 expat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\nC.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187\nC.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187\niv\nC.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\nC.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\nC.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\nC.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190\nC.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190\nC.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190\nD Copyright 193\nIndex 195\nv\nvi\nThePythonLanguageReference,Release3.13.3\nThis reference manual describes the syntax and \u201ccore semantics\u201d of the language. It is terse, but attempts to be\nexactandcomplete. Thesemanticsofnon-essentialbuilt-inobjecttypesandofthebuilt-infunctionsandmodules\nare described in library-index. For an informal introduction to the language, see tutorial-index. For C or C++\nprogrammers,twoadditionalmanualsexist:extending-indexdescribesthehigh-levelpictureofhowtowriteaPython\nextensionmodule,andthec-api-indexdescribestheinterfacesavailabletoC/C++programmersindetail.\nCONTENTS 1\nThePythonLanguageReference,Release3.13.3\n2 CONTENTS\nCHAPTER\nONE\nINTRODUCTION\nThisreferencemanualdescribesthePythonprogramminglanguage. Itisnotintendedasatutorial.\nWhileIamtryingtobeaspreciseaspossible,IchosetouseEnglishratherthanformalspecificationsforeverything\nexceptsyntaxandlexicalanalysis. Thisshouldmakethedocumentmoreunderstandabletotheaveragereader,but\nwill leave room for ambiguities. Consequently, if you were coming from Mars and tried to re-implement Python\nfromthisdocumentalone,youmighthavetoguessthingsandinfactyouwouldprobablyendupimplementingquite\nadifferentlanguage. Ontheotherhand,ifyouareusingPythonandwonderwhatthepreciserulesaboutaparticular\narea of the language are, you should definitely be able to find them here. If you would like to see a more formal\ndefinitionofthelanguage,maybeyoucouldvolunteeryourtime\u2014orinventacloningmachine:-).\nItisdangeroustoaddtoomanyimplementationdetailstoalanguagereferencedocument\u2014theimplementationmay\nchange,andotherimplementationsofthesamelanguagemayworkdifferently. Ontheotherhand,CPythonisthe\none Python implementation in widespread use (although alternate implementations continue to gain support), and\nitsparticularquirksaresometimesworthbeingmentioned,especiallywheretheimplementationimposesadditional\nlimitations. Therefore,you\u2019llfindshort\u201cimplementationnotes\u201dsprinkledthroughoutthetext.\nEvery Python implementation comes with a number of built-in and standard modules. These are documented in\nlibrary-index. Afewbuilt-inmodulesarementionedwhentheyinteractinasignificantwaywiththelanguagedefi-\nnition.\n1.1 Alternate Implementations\nThoughthereisonePythonimplementationwhichisbyfarthemostpopular,therearesomealternateimplementa-\ntionswhichareofparticularinteresttodifferentaudiences.\nKnownimplementationsinclude:\nCPython\nThisistheoriginalandmost-maintainedimplementationofPython,writteninC.Newlanguagefeaturesgen-\nerallyappearherefirst.\nJython\nPythonimplementedinJava. ThisimplementationcanbeusedasascriptinglanguageforJavaapplications,\norcanbeusedtocreateapplicationsusingtheJavaclasslibraries. ItisalsooftenusedtocreatetestsforJava\nlibraries. MoreinformationcanbefoundattheJythonwebsite.\nPythonfor.NET\nThisimplementationactuallyusestheCPythonimplementation,butisamanaged.NETapplicationandmakes\n.NETlibrariesavailable. ItwascreatedbyBrianLloyd. Formoreinformation,seethePythonfor.NEThome\npage.\nIronPython\nAnalternatePythonfor.NET.UnlikePython.NET,thisisacompletePythonimplementationthatgenerates\nIL,andcompilesPythoncodedirectlyto.NETassemblies. ItwascreatedbyJimHugunin,theoriginalcreator\nofJython. Formoreinformation,seetheIronPythonwebsite.\nPyPy\nAnimplementationofPythonwrittencompletelyinPython. Itsupportsseveraladvancedfeaturesnotfound\ninotherimplementationslikestacklesssupportandaJustinTimecompiler. Oneofthegoalsoftheprojectis\n3\nThePythonLanguageReference,Release3.13.3\ntoencourageexperimentationwiththelanguageitselfbymakingiteasiertomodifytheinterpreter(sinceitis\nwritteninPython). AdditionalinformationisavailableonthePyPyproject\u2019shomepage.\nEachoftheseimplementationsvariesinsomewayfromthelanguageasdocumentedinthismanual,orintroducesspe-\ncificinformationbeyondwhat\u2019scoveredinthestandardPythondocumentation. Pleaserefertotheimplementation-\nspecificdocumentationtodeterminewhatelseyouneedtoknowaboutthespecificimplementationyou\u2019reusing.\n1.2 Notation\nThe descriptions of lexical analysis and syntax use a modified Backus\u2013Naur form (BNF) grammar notation. This\nusesthefollowingstyleofdefinition:\nname ::= lc_letter (lc_letter | \"_\")*\nlc_letter ::= \"a\"...\"z\"\nThefirstlinesaysthatanameisanlc_letterfollowedbyasequenceofzeroormorelc_lettersandunderscores.\nAnlc_letterinturnisanyofthesinglecharacters'a'through'z'. (Thisruleisactuallyadheredtoforthenames\ndefinedinlexicalandgrammarrulesinthisdocument.)\nEachrulebeginswithaname(whichisthenamedefinedbytherule)and::=. Averticalbar(|)isusedtoseparate\nalternatives;itistheleastbindingoperatorinthisnotation. Astar(*)meanszeroormorerepetitionsofthepreceding\nitem;likewise,aplus(+)meansoneormorerepetitions,andaphraseenclosedinsquarebrackets([ ])meanszero\noroneoccurrences(inotherwords,theenclosedphraseisoptional). The*and+operatorsbindastightlyaspossible;\nparenthesesareusedforgrouping. Literalstringsareenclosedinquotes. Whitespaceisonlymeaningfultoseparate\ntokens. Rulesarenormallycontainedona singleline; ruleswithmanyalternativesmaybe formattedalternatively\nwitheachlineafterthefirstbeginningwithaverticalbar.\nIn lexical definitions (as the example above), two more conventions are used: Two literal characters separated by\nthreedotsmeanachoiceofanysinglecharacterinthegiven(inclusive)rangeofASCIIcharacters. Aphrasebetween\nangularbrackets(<...>)givesaninformaldescriptionofthesymboldefined; e.g., thiscouldbeusedtodescribe\nthenotionof\u2018controlcharacter\u2019ifneeded.\nEven though the notation used is almost the same, there is a big difference between the meaning of lexical and\nsyntactic definitions: a lexical definition operates on the individual characters of the input source, while a syntax\ndefinition operates on the stream of tokens generated by the lexical analysis. All uses of BNF in the next chapter\n(\u201cLexicalAnalysis\u201d)arelexicaldefinitions;usesinsubsequentchaptersaresyntacticdefinitions.\n4 Chapter1. Introduction\nCHAPTER\nTWO\nLEXICAL ANALYSIS\nA Python program is read by a parser. Input to the parser is a stream of tokens, generated by the lexical analyzer\n(alsoknownasthetokenizer). Thischapterdescribeshowthelexicalanalyzerbreaksafileintotokens.\nPythonreadsprogramtextasUnicodecodepoints;theencodingofasourcefilecanbegivenbyanencodingdec-\nlarationanddefaultstoUTF-8,seePEP3120fordetails. Ifthesourcefilecannotbedecoded,aSyntaxErroris\nraised.\n2.1 Line structure\nAPythonprogramisdividedintoanumberoflogicallines.\n2.1.1 Logical lines\nThe end of a logical line is represented by the token NEWLINE. Statements cannot cross logical line boundaries\nexceptwhereNEWLINEisallowedbythesyntax(e.g.,betweenstatementsincompoundstatements). Alogicalline\nisconstructedfromoneormorephysicallinesbyfollowingtheexplicitorimplicitlinejoiningrules.\n2.1.2 Physical lines\nAphysicallineisasequenceofcharactersterminatedbyanend-of-linesequence. Insourcefilesandstrings, any\nof the standard platform line termination sequences can be used - the Unix form using ASCII LF (linefeed), the\nWindowsformusingtheASCIIsequenceCRLF(returnfollowedbylinefeed),ortheoldMacintoshformusingthe\nASCIICR(return)character. Alloftheseformscanbeusedequally,regardlessofplatform. Theendofinputalso\nservesasanimplicitterminatorforthefinalphysicalline.\nWhenembeddingPython,sourcecodestringsshouldbepassedtoPythonAPIsusingthestandardCconventionsfor\nnewlinecharacters(the\\ncharacter,representingASCIILF,isthelineterminator).\n2.1.3 Comments\nA comment starts with a hash character (#) that is not part of a string literal, and ends at the end of the physical\nline. Acommentsignifiestheendofthelogicallineunlesstheimplicitlinejoiningrulesareinvoked. Commentsare\nignoredbythesyntax.\n2.1.4 Encoding declarations\nIfacommentinthefirstorsecondlineofthePythonscriptmatchestheregularexpressioncoding[=:]\\s*([-\\\nw.]+),thiscommentisprocessedasanencodingdeclaration;thefirstgroupofthisexpressionnamestheencoding\nofthesourcecodefile. Theencodingdeclarationmustappearonalineofitsown. Ifitisthesecondline,thefirst\nlinemustalsobeacomment-onlyline. Therecommendedformsofanencodingexpressionare\n# -*- coding: <encoding-name> -*-\nwhichisrecognizedalsobyGNUEmacs,and\n5\nThePythonLanguageReference,Release3.13.3\n# vim:fileencoding=<encoding-name>\nwhichisrecognizedbyBramMoolenaar\u2019sVIM.\nIfnoencodingdeclarationisfound, thedefaultencodingisUTF-8. Iftheimplicitorexplicitencodingofafileis\nUTF-8,aninitialUTF-8byte-ordermark(b\u2019xefxbbxbf\u2019)isignoredratherthanbeingasyntaxerror.\nIfanencodingisdeclared,theencodingnamemustberecognizedbyPython(seestandard-encodings). Theencoding\nisusedforalllexicalanalysis,includingstringliterals,commentsandidentifiers.\n2.1.5 Explicit line joining\nTwoormorephysicallinesmaybejoinedintologicallinesusingbackslashcharacters(\\),asfollows: whenaphysical\nlineendsinabackslashthatisnotpartofastringliteralorcomment,itisjoinedwiththefollowingformingasingle\nlogicalline,deletingthebackslashandthefollowingend-of-linecharacter. Forexample:\nif 1900 < year < 2100 and 1 <= month <= 12 \\\nand 1 <= day <= 31 and 0 <= hour < 24 \\\nand 0 <= minute < 60 and 0 <= second < 60: # Looks like a valid date\nreturn 1\nAlineendinginabackslashcannotcarryacomment. Abackslashdoesnotcontinueacomment. Abackslashdoes\nnotcontinueatokenexceptforstringliterals(i.e.,tokensotherthanstringliteralscannotbesplitacrossphysicallines\nusingabackslash). Abackslashisillegalelsewhereonalineoutsideastringliteral.\n2.1.6 Implicit line joining\nExpressions in parentheses, square brackets or curly braces can be split over more than one physical line without\nusingbackslashes. Forexample:\nmonth_names = ['Januari', 'Februari', 'Maart', # These are the\n'April', 'Mei', 'Juni', # Dutch names\n'Juli', 'Augustus', 'September', # for the months\n'Oktober', 'November', 'December'] # of the year\nImplicitlycontinuedlinescancarrycomments. Theindentationofthecontinuationlinesisnotimportant. Blankcon-\ntinuationlinesareallowed. ThereisnoNEWLINEtokenbetweenimplicitcontinuationlines. Implicitlycontinued\nlinescanalsooccurwithintriple-quotedstrings(seebelow);inthatcasetheycannotcarrycomments.\n2.1.7 Blank lines\nA logical line that contains only spaces, tabs, formfeeds and possibly a comment, is ignored (i.e., no NEWLINE\ntoken is generated). During interactive input of statements, handling of a blank line may differ depending on the\nimplementationoftheread-eval-printloop. Inthestandardinteractiveinterpreter,anentirelyblanklogicalline(i.e.\nonecontainingnotevenwhitespaceoracomment)terminatesamulti-linestatement.\n2.1.8 Indentation\nLeadingwhitespace(spacesandtabs)atthebeginningofalogicallineisusedtocomputetheindentationlevelof\ntheline,whichinturnisusedtodeterminethegroupingofstatements.\nTabsarereplaced(fromlefttoright)byonetoeightspacessuchthatthetotalnumberofcharactersuptoandincluding\nthereplacementisamultipleofeight(thisisintendedtobethesameruleasusedbyUnix). Thetotalnumberof\nspacesprecedingthefirstnon-blankcharacterthendeterminestheline\u2019sindentation. Indentationcannotbesplitover\nmultiplephysicallinesusingbackslashes;thewhitespaceuptothefirstbackslashdeterminestheindentation.\nIndentationisrejectedasinconsistentifasourcefilemixestabsandspacesinawaythatmakesthemeaningdependent\nontheworthofatabinspaces;aTabErrorisraisedinthatcase.\n6 Chapter2. Lexicalanalysis\nThePythonLanguageReference,Release3.13.3\nCross-platformcompatibilitynote: becauseofthenatureoftexteditorsonnon-UNIXplatforms,itisunwiseto\nuse a mixture of spaces and tabs for the indentation in a single source file. It should also be noted that different\nplatformsmayexplicitlylimitthemaximumindentationlevel.\nAformfeedcharactermaybepresentatthestartoftheline;itwillbeignoredfortheindentationcalculationsabove.\nFormfeedcharactersoccurringelsewhereintheleadingwhitespacehaveanundefinedeffect(forinstance,theymay\nresetthespacecounttozero).\nThe indentation levels of consecutive lines are used to generate INDENT and DEDENT tokens, using a stack, as\nfollows.\nBeforethefirstlineofthefileisread,asinglezeroispushedonthestack;thiswillneverbepoppedoffagain. The\nnumberspushedonthestackwillalwaysbestrictlyincreasingfrombottomtotop. Atthebeginningofeachlogical\nline,theline\u2019sindentationleveliscomparedtothetopofthestack. Ifitisequal,nothinghappens. Ifitislarger,itis\npushedonthestack,andoneINDENTtokenisgenerated. Ifitissmaller,itmust beoneofthenumbersoccurring\nonthestack; allnumbersonthestackthatarelargerarepoppedoff,andforeachnumberpoppedoffaDEDENT\ntokenisgenerated. Attheendofthefile,aDEDENTtokenisgeneratedforeachnumberremainingonthestackthat\nislargerthanzero.\nHereisanexampleofacorrectly(thoughconfusingly)indentedpieceofPythoncode:\ndef perm(l):\n# Compute the list of all permutations of l\nif len(l) <= 1:\nreturn [l]\nr = []\nfor i in range(len(l)):\ns = l[:i] + l[i+1:]\np = perm(s)\nfor x in p:\nr.append(l[i:i+1] + x)\nreturn r\nThefollowingexampleshowsvariousindentationerrors:\ndef perm(l): # error: first line indented\nfor i in range(len(l)): # error: not indented\ns = l[:i] + l[i+1:]\np = perm(l[:i] + l[i+1:]) # error: unexpected indent\nfor x in p:\nr.append(l[i:i+1] + x)\nreturn r # error: inconsistent dedent\n(Actually,thefirstthreeerrorsaredetectedbytheparser;onlythelasterrorisfoundbythelexicalanalyzer\u2014the\nindentationofreturn rdoesnotmatchalevelpoppedoffthestack.)\n2.1.9 Whitespace between tokens\nExceptatthebeginningofalogicallineorinstringliterals,thewhitespacecharactersspace,tabandformfeedcanbe\nusedinterchangeablytoseparatetokens. Whitespaceisneededbetweentwotokensonlyiftheirconcatenationcould\notherwisebeinterpretedasadifferenttoken(e.g.,abisonetoken,butabistwotokens).\n2.2 Other tokens\nBesidesNEWLINE,INDENTandDEDENT,thefollowingcategoriesoftokensexist: identifiers,keywords,literals,\noperators,anddelimiters. Whitespacecharacters(otherthanlineterminators,discussedearlier)arenottokens,but\nserve to delimit tokens. Where ambiguity exists, a token comprises the longest possible string that forms a legal\ntoken,whenreadfromlefttoright.\n2.2. Othertokens 7\nThePythonLanguageReference,Release3.13.3\n2.3 Identifiers and keywords\nIdentifiers(alsoreferredtoasnames)aredescribedbythefollowinglexicaldefinitions.\nThesyntaxofidentifiersinPythonisbasedontheUnicodestandardannexUAX-31,withelaborationandchanges\nasdefinedbelow;seealsoPEP3131forfurtherdetails.\nWithintheASCIIrange(U+0001..U+007F),thevalidcharactersforidentifiersincludetheuppercaseandlowercase\nlettersAthroughZ,theunderscore_and,exceptforthefirstcharacter,thedigits0through9. Python3.0introduced\nadditionalcharactersfromoutsidetheASCIIrange(seePEP3131). Forthesecharacters,theclassificationusesthe\nversionoftheUnicodeCharacterDatabaseasincludedintheunicodedatamodule.\nIdentifiersareunlimitedinlength. Caseissignificant.\nidentifier ::= xid_start xid_continue*\nid_start ::= <all characters in general categories Lu, Ll, Lt, Lm, Lo, Nl, the underscore, and characters with the Other_ID_Start property>\nid_continue ::= <all characters in id_start, plus characters in the categories Mn, Mc, Nd, Pc and others with the Other_ID_Continue property>\nxid_start ::= <all characters in id_start whose NFKC normalization is in \"id_start xid_continue*\">\nxid_continue ::= <all characters in id_continue whose NFKC normalization is in \"id_continue*\">\nTheUnicodecategorycodesmentionedabovestandfor:\n\u2022 Lu-uppercaseletters\n\u2022 Ll-lowercaseletters\n\u2022 Lt-titlecaseletters\n\u2022 Lm-modifierletters\n\u2022 Lo-otherletters\n\u2022 Nl-letternumbers\n\u2022 Mn-nonspacingmarks\n\u2022 Mc-spacingcombiningmarks\n\u2022 Nd-decimalnumbers\n\u2022 Pc-connectorpunctuations\n\u2022 Other_ID_Start-explicitlistofcharactersinPropList.txttosupportbackwardscompatibility\n\u2022 Other_ID_Continue-likewise\nAllidentifiersareconvertedintothenormalformNFKCwhileparsing;comparisonofidentifiersisbasedonNFKC.\nAnon-normativeHTMLfilelistingallvalididentifiercharactersforUnicode15.1.0canbefoundathttps://www.\nunicode.org/Public/15.1.0/ucd/DerivedCoreProperties.txt\n2.3.1 Keywords\nThefollowingidentifiersareusedasreservedwords, orkeywords ofthelanguage, andcannotbeusedasordinary\nidentifiers. Theymustbespelledexactlyaswrittenhere:\nFalse await else import pass\nNone break except in raise\nTrue class finally is return\nand continue for lambda try\nas def from nonlocal while\nassert del global not with\nasync elif if or yield\n8 Chapter2. Lexicalanalysis\nThePythonLanguageReference,Release3.13.3\n2.3.2 Soft Keywords\nAddedinversion3.10.\nSomeidentifiersareonlyreservedunderspecificcontexts. Theseareknownassoftkeywords. Theidentifiersmatch,\ncase,typeand_cansyntacticallyactaskeywordsincertaincontexts,butthisdistinctionisdoneattheparserlevel,\nnotwhentokenizing.\nAs soft keywords, their use in the grammar is possible while still preserving compatibility with existing code that\nusesthesenamesasidentifiernames.\nmatch,case,and_areusedinthematchstatement. typeisusedinthetypestatement.\nChangedinversion3.12: typeisnowasoftkeyword.\n2.3.3 Reserved classes of identifiers\nCertainclassesofidentifiers(besideskeywords)havespecialmeanings. Theseclassesareidentifiedbythepatterns\nofleadingandtrailingunderscorecharacters:\n_*\nNotimportedbyfrom module import *.\n_\nInacasepatternwithinamatchstatement,_isasoftkeywordthatdenotesawildcard.\nSeparately,theinteractiveinterpretermakestheresultofthelastevaluationavailableinthevariable_. (Itis\nstoredinthebuiltinsmodule,alongsidebuilt-infunctionslikeprint.)\nElsewhere,_isaregularidentifier. Itisoftenusedtoname\u201cspecial\u201ditems,butitisnotspecialtoPythonitself.\n(cid:174) Note\nThe name _ is often used in conjunction with internationalization; refer to the documentation for the\ngettextmoduleformoreinformationonthisconvention.\nItisalsocommonlyusedforunusedvariables.\n__*__\nSystem-definednames,informallyknownas\u201cdunder\u201dnames. Thesenamesaredefinedbytheinterpreterand\nitsimplementation(includingthestandardlibrary). CurrentsystemnamesarediscussedintheSpecialmethod\nnames section and elsewhere. More will likely be defined in future versions of Python. Any use of __*__\nnames,inanycontext,thatdoesnotfollowexplicitlydocumenteduse,issubjecttobreakagewithoutwarning.\n__*\nClass-privatenames. Namesinthiscategory,whenusedwithinthecontextofaclassdefinition,arere-written\ntouseamangledformtohelpavoidnameclashesbetween\u201cprivate\u201dattributesofbaseandderivedclasses. See\nsectionIdentifiers(Names).\n2.4 Literals\nLiteralsarenotationsforconstantvaluesofsomebuilt-intypes.\n2.4.1 String and Bytes literals\nStringliteralsaredescribedbythefollowinglexicaldefinitions:\nstringliteral ::= [stringprefix](shortstring | longstring)\nstringprefix ::= \"r\" | \"u\" | \"R\" | \"U\" | \"f\" | \"F\"\n| \"fr\" | \"Fr\" | \"fR\" | \"FR\" | \"rf\" | \"rF\" | \"Rf\" | \"RF\"\nshortstring ::= \"'\" shortstringitem* \"'\" | '\"' shortstringitem* '\"'\nlongstring ::= \"'''\" longstringitem* \"'''\" | '\"\"\"' longstringitem* '\"\"\"'\n2.4. Literals 9\nThePythonLanguageReference,Release3.13.3\nshortstringitem ::= shortstringchar | stringescapeseq\nlongstringitem ::= longstringchar | stringescapeseq\nshortstringchar ::= <any source character except \"\\\" or newline or the quote>\nlongstringchar ::= <any source character except \"\\\">\nstringescapeseq ::= \"\\\" <any source character>\nbytesliteral ::= bytesprefix(shortbytes | longbytes)\nbytesprefix ::= \"b\" | \"B\" | \"br\" | \"Br\" | \"bR\" | \"BR\" | \"rb\" | \"rB\" | \"Rb\" | \"RB\"\nshortbytes ::= \"'\" shortbytesitem* \"'\" | '\"' shortbytesitem* '\"'\nlongbytes ::= \"'''\" longbytesitem* \"'''\" | '\"\"\"' longbytesitem* '\"\"\"'\nshortbytesitem ::= shortbyteschar | bytesescapeseq\nlongbytesitem ::= longbyteschar | bytesescapeseq\nshortbyteschar ::= <any ASCII character except \"\\\" or newline or the quote>\nlongbyteschar ::= <any ASCII character except \"\\\">\nbytesescapeseq ::= \"\\\" <any ASCII character>\nOne syntactic restriction not indicated by these productions is that whitespace is not allowed between the\nstringprefix or bytesprefix andtherest ofthe literal. Thesourcecharacter setis definedby theencoding\ndeclaration;itisUTF-8ifnoencodingdeclarationisgiveninthesourcefile;seesectionEncodingdeclarations.\nInplainEnglish: Bothtypesofliteralscanbeenclosedinmatchingsinglequotes(')ordoublequotes(\"). Theycan\nalsobeenclosedinmatchinggroupsofthreesingleordoublequotes(thesearegenerallyreferredtoastriple-quoted\nstrings). Thebackslash(\\)characterisusedtogivespecialmeaningtootherwiseordinarycharactersliken,which\nmeans\u2018newline\u2019whenescaped(\\n). Itcanalsobeusedtoescapecharactersthatotherwisehaveaspecialmeaning,\nsuchasnewline,backslashitself,orthequotecharacter. Seeescapesequencesbelowforexamples.\nBytesliteralsarealwaysprefixedwith'b'or'B';theyproduceaninstanceofthebytestypeinsteadofthestr\ntype. TheymayonlycontainASCIIcharacters;byteswithanumericvalueof128orgreatermustbeexpressedwith\nescapes.\nBothstringandbytesliteralsmayoptionallybeprefixedwithaletter'r'or'R';suchconstructsarecalledrawstring\nliteralsandrawbytesliteralsrespectivelyandtreatbackslashesasliteralcharacters. Asaresult,inrawstringliterals,\n'\\U'and'\\u'escapesarenottreatedspecially.\nAddedinversion3.3: The'rb'prefixofrawbytesliteralshasbeenaddedasasynonymof'br'.\nSupportfortheunicodelegacyliteral(u'value')wasreintroducedtosimplifythemaintenanceofdualPython2.x\nand3.xcodebases. SeePEP414formoreinformation.\nAstringliteralwith 'f' or'F' initsprefixisa formattedstringliteral; see f-strings. The'f' maybe combined\nwith'r',butnotwith'b'or'u',thereforerawformattedstringsarepossible,butformattedbytesliteralsarenot.\nIntriple-quotedliterals,unescapednewlinesandquotesareallowed(andareretained),exceptthatthreeunescaped\nquotesinarowterminatetheliteral. (A\u201cquote\u201disthecharacterusedtoopentheliteral,i.e. either'or\".)\nEscapesequences\nUnlessan'r'or'R'prefixispresent,escapesequencesinstringandbytesliteralsareinterpretedaccordingtorules\nsimilartothoseusedbyStandardC.Therecognizedescapesequencesare:\n10 Chapter2. Lexicalanalysis\nThePythonLanguageReference,Release3.13.3\nEscapeSequence Meaning Notes\n\\<newline> Backslashandnewlineignored (1)\n\\\\ Backslash(\\)\n\\' Singlequote(')\n\\\" Doublequote(\")\n\\a ASCIIBell(BEL)\n\\b ASCIIBackspace(BS)\n\\f ASCIIFormfeed(FF)\n\\n ASCIILinefeed(LF)\n\\r ASCIICarriageReturn(CR)\n\\t ASCIIHorizontalTab(TAB)\n\\v ASCIIVerticalTab(VT)\n\\ooo Characterwithoctalvalueooo (2,4)\n\\xhh Characterwithhexvaluehh (3,4)\nEscapesequencesonlyrecognizedinstringliteralsare:\nEscapeSequence Meaning Notes\n\\N{name} CharacternamednameintheUnicodedatabase (5)\n\\uxxxx Characterwith16-bithexvaluexxxx (6)\n\\Uxxxxxxxx Characterwith32-bithexvaluexxxxxxxx (7)\nNotes:\n(1) Abackslashcanbeaddedattheendofalinetoignorethenewline:\n>>> 'This string will not include \\\n... backslashes or newline characters.'\n'This string will not include backslashes or newline characters.'\nThesameresultcanbeachievedusingtriple-quotedstrings,orparenthesesandstringliteralconcatenation.\n(2) AsinStandardC,uptothreeoctaldigitsareaccepted.\nChangedinversion3.11: Octalescapeswithvaluelargerthan0o377produceaDeprecationWarning.\nChangedinversion3.12: Octalescapeswithvaluelargerthan0o377produceaSyntaxWarning. Inafuture\nPythonversiontheywillbeeventuallyaSyntaxError.\n(3) UnlikeinStandardC,exactlytwohexdigitsarerequired.\n(4) Inabytesliteral,hexadecimalandoctalescapesdenotethebytewiththegivenvalue. Inastringliteral,these\nescapesdenoteaUnicodecharacterwiththegivenvalue.\n(5) Changedinversion3.3: Supportfornamealiases1hasbeenadded.\n(6) Exactlyfourhexdigitsarerequired.\n(7) AnyUnicodecharactercanbeencodedthisway. Exactlyeighthexdigitsarerequired.\nUnlikeStandardC,allunrecognizedescapesequencesareleftinthestringunchanged, i.e., thebackslashisleftin\ntheresult. (Thisbehaviorisusefulwhendebugging: ifanescapesequenceismistyped,theresultingoutputismore\neasilyrecognizedasbroken.) Itisalsoimportanttonotethattheescapesequencesonlyrecognizedinstringliterals\nfallintothecategoryofunrecognizedescapesforbytesliterals.\nChangedinversion3.6: UnrecognizedescapesequencesproduceaDeprecationWarning.\nChangedinversion3.12: UnrecognizedescapesequencesproduceaSyntaxWarning. InafuturePythonversion\ntheywillbeeventuallyaSyntaxError.\n1https://www.unicode.org/Public/15.1.0/ucd/NameAliases.txt\n2.4. Literals 11\nThePythonLanguageReference,Release3.13.3\nEveninarawliteral,quotescanbeescapedwithabackslash,butthebackslashremainsintheresult;forexample,\nr\"\\\"\"isavalidstringliteralconsistingoftwocharacters: abackslashandadoublequote;r\"\\\"isnotavalidstring\nliteral (even a raw string cannot end in an odd number of backslashes). Specifically, a raw literal cannot end in a\nsinglebackslash(sincethebackslashwouldescapethefollowingquotecharacter). Notealsothatasinglebackslash\nfollowedbyanewlineisinterpretedasthosetwocharactersaspartoftheliteral,notasalinecontinuation.\n2.4.2 String literal concatenation\nMultiple adjacent string or bytes literals (delimited by whitespace), possibly using different quoting conventions,\nare allowed, and their meaning is the same as their concatenation. Thus, \"hello\" 'world' is equivalent to\n\"helloworld\". Thisfeaturecanbeusedtoreducethenumberofbackslashesneeded,tosplitlongstringsconve-\nnientlyacrosslonglines,oreventoaddcommentstopartsofstrings,forexample:\nre.compile(\"[A-Za-z_]\" # letter or underscore\n\"[A-Za-z0-9_]*\" # letter, digit or underscore\n)\nNote that this feature is defined at the syntactical level, but implemented at compile time. The \u2018+\u2019 operator must\nbeusedtoconcatenatestringexpressionsatruntime. Alsonotethatliteralconcatenationcanusedifferentquoting\nstylesforeachcomponent(evenmixingrawstringsandtriplequotedstrings),andformattedstringliteralsmaybe\nconcatenatedwithplainstringliterals.\n2.4.3 f-strings\nAddedinversion3.6.\nA formatted string literal or f-string is a string literal that is prefixed with 'f' or 'F'. These strings may contain\nreplacement fields, which are expressions delimited by curly braces {}. While other string literals always have a\nconstantvalue,formattedstringsarereallyexpressionsevaluatedatruntime.\nEscapesequencesaredecodedlikeinordinarystringliterals(exceptwhenaliteralisalsomarkedasarawstring).\nAfterdecoding,thegrammarforthecontentsofthestringis:\nf_string ::= (literal_char | \"{{\" | \"}}\" | replacement_field)*\nreplacement_field ::= \"{\" f_expression [\"=\"] [\"!\" conversion] [\":\" format_spec] \"}\"\nf_expression ::= (conditional_expression | \"*\" or_expr)\n(\",\" conditional_expression | \",\" \"*\" or_expr)* [\",\"]\n| yield_expression\nconversion ::= \"s\" | \"r\" | \"a\"\nformat_spec ::= (literal_char | replacement_field)*\nliteral_char ::= <any code point except \"{\", \"}\" or NULL>\nThepartsofthestringoutsidecurlybracesaretreatedliterally,exceptthatanydoubledcurlybraces'{{'or'}}'\narereplacedwiththecorrespondingsinglecurlybrace. Asingleopeningcurlybracket'{'marksareplacementfield,\nwhichstartswithaPythonexpression. Todisplayboththeexpressiontextanditsvalueafterevaluation,(usefulin\ndebugging),anequalsign'='maybeaddedaftertheexpression. Aconversionfield,introducedbyanexclamation\npoint'!'mayfollow. Aformatspecifiermayalsobeappended, introducedbyacolon':'. Areplacementfield\nendswithaclosingcurlybracket'}'.\nExpressionsinformattedstringliteralsaretreatedlikeregularPythonexpressionssurroundedbyparentheses,with\na few exceptions. An empty expression is not allowed, and both lambda and assignment expressions := must be\nsurrounded by explicit parentheses. Each expression is evaluated in the context where the formatted string literal\nappears,inorderfromlefttoright. Replacementexpressionscancontainnewlinesinbothsingle-quotedandtriple-\nquoted f-strings and they can contain comments. Everything that comes after a # inside a replacement field is a\ncomment(evenclosingbracesandquotes). Inthatcase,replacementfieldsmustbeclosedinadifferentline.\n>>> f\"abc{a # This is a comment }\"\n... + 3}\"\n'abc5'\n12 Chapter2. Lexicalanalysis\nThePythonLanguageReference,Release3.13.3\nChangedinversion3.7: PriortoPython3.7,anawaitexpressionandcomprehensionscontaininganasync for\nclausewereillegalintheexpressionsinformattedstringliteralsduetoaproblemwiththeimplementation.\nChangedinversion3.12: PriortoPython3.12,commentswerenotallowedinsidef-stringreplacementfields.\nWhen the equal sign '=' is provided, the output will have the expression text, the '=' and the evaluated value.\nSpacesaftertheopeningbrace'{',withintheexpressionandafterthe'='areallretainedintheoutput. Bydefault,\nthe'='causestherepr()oftheexpressiontobeprovided, unlessthereisaformatspecified. Whenaformatis\nspecifieditdefaultstothestr()oftheexpressionunlessaconversion'!r'isdeclared.\nAddedinversion3.8: Theequalsign'='.\nIfaconversionisspecified,theresultofevaluatingtheexpressionisconvertedbeforeformatting. Conversion'!s'\ncallsstr()ontheresult,'!r'callsrepr(),and'!a'callsascii().\nThe result is then formatted using the format() protocol. The format specifier is passed to the __format__()\nmethodoftheexpressionorconversionresult. Anemptystringispassedwhentheformatspecifierisomitted. The\nformattedresultisthenincludedinthefinalvalueofthewholestring.\nTop-levelformatspecifiersmayincludenestedreplacementfields. Thesenestedfieldsmayincludetheirowncon-\nversionfieldsandformatspecifiers,butmaynotincludemoredeeplynestedreplacementfields. Theformatspecifier\nmini-languageisthesameasthatusedbythestr.format()method.\nFormattedstringliteralsmaybeconcatenated,butreplacementfieldscannotbesplitacrossliterals.\nSomeexamplesofformattedstringliterals:\n>>> name = \"Fred\"\n>>> f\"He said his name is {name!r}.\"\n\"He said his name is 'Fred'.\"\n>>> f\"He said his name is {repr(name)}.\" # repr() is equivalent to !r\n\"He said his name is 'Fred'.\"\n>>> width = 10\n>>> precision = 4\n>>> value = decimal.Decimal(\"12.34567\")\n>>> f\"result: {value:{width}.{precision}}\" # nested fields\n'result: 12.35'\n>>> today = datetime(year=2017, month=1, day=27)\n>>> f\"{today:%B %d, %Y}\" # using date format specifier\n'January 27, 2017'\n>>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n'today=January 27, 2017'\n>>> number = 1024\n>>> f\"{number:#0x}\" # using integer format specifier\n'0x400'\n>>> foo = \"bar\"\n>>> f\"{ foo = }\" # preserves whitespace\n\" foo = 'bar'\"\n>>> line = \"The mill's closed\"\n>>> f\"{line = }\"\n'line = \"The mill\\'s closed\"'\n>>> f\"{line = :20}\"\n\"line = The mill's closed \"\n>>> f\"{line = !r:20}\"\n'line = \"The mill\\'s closed\" '\nReusingtheouterf-stringquotingtypeinsideareplacementfieldispermitted:\n>>> a = dict(x=2)\n>>> f\"abc {a[\"x\"]} def\"\n'abc 2 def'\n2.4. Literals 13\nThePythonLanguageReference,Release3.13.3\nChangedinversion3.12: PriortoPython3.12,reuseofthesamequotingtypeoftheouterf-stringinsideareplace-\nmentfieldwasnotpossible.\nBackslashesarealsoallowedinreplacementfieldsandareevaluatedthesamewayasinanyothercontext:\n>>> a = [\"a\", \"b\", \"c\"]\n>>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\nList a contains:\na\nb\nc\nChangedinversion3.12: PriortoPython3.12,backslasheswerenotpermittedinsideanf-stringreplacementfield.\nFormattedstringliteralscannotbeusedasdocstrings,eveniftheydonotincludeexpressions.\n>>> def foo():\n... f\"Not a docstring\"\n...\n>>> foo.__doc__ is None\nTrue\nSee also PEP 498 for the proposal that added formatted string literals, and str.format(), which uses a related\nformatstringmechanism.\n2.4.4 Numeric literals\nThere are three types of numeric literals: integers, floating-point numbers, and imaginary numbers. There are no\ncomplexliterals(complexnumberscanbeformedbyaddingarealnumberandanimaginarynumber).\nNote that numeric literals do not include a sign; a phrase like -1 is actually an expression composed of the unary\noperator\u2018-\u2019andtheliteral1.\n2.4.5 Integer literals\nIntegerliteralsaredescribedbythefollowinglexicaldefinitions:\ninteger ::= decinteger | bininteger | octinteger | hexinteger\ndecinteger ::= nonzerodigit ([\"_\"] digit)* | \"0\"+ ([\"_\"] \"0\")*\nbininteger ::= \"0\" (\"b\" | \"B\") ([\"_\"] bindigit)+\noctinteger ::= \"0\" (\"o\" | \"O\") ([\"_\"] octdigit)+\nhexinteger ::= \"0\" (\"x\" | \"X\") ([\"_\"] hexdigit)+\nnonzerodigit ::= \"1\"...\"9\"\ndigit ::= \"0\"...\"9\"\nbindigit ::= \"0\" | \"1\"\noctdigit ::= \"0\"...\"7\"\nhexdigit ::= digit | \"a\"...\"f\" | \"A\"...\"F\"\nThereisnolimitforthelengthofintegerliteralsapartfromwhatcanbestoredinavailablememory.\nUnderscores are ignored for determining the numeric value of the literal. They can be used to group digits for\nenhancedreadability. Oneunderscorecanoccurbetweendigits,andafterbasespecifierslike0x.\nNotethatleadingzerosinanon-zerodecimalnumberarenotallowed. ThisisfordisambiguationwithC-styleoctal\nliterals,whichPythonusedbeforeversion3.0.\nSomeexamplesofintegerliterals:\n7 2147483647 0o177 0b100110111\n3 79228162514264337593543950336 0o377 0xdeadbeef\n100_000_000_000 0b_1110_0101\nChangedinversion3.6: Underscoresarenowallowedforgroupingpurposesinliterals.\n14 Chapter2. Lexicalanalysis\nThePythonLanguageReference,Release3.13.3\n2.4.6 Floating-point literals\nFloating-pointliteralsaredescribedbythefollowinglexicaldefinitions:\nfloatnumber ::= pointfloat | exponentfloat\npointfloat ::= [digitpart] fraction | digitpart \".\"\nexponentfloat ::= (digitpart | pointfloat) exponent\ndigitpart ::= digit ([\"_\"] digit)*\nfraction ::= \".\" digitpart\nexponent ::= (\"e\" | \"E\") [\"+\" | \"-\"] digitpart\nNotethattheintegerandexponentpartsarealwaysinterpretedusingradix10. Forexample,077e010islegal,and\ndenotesthesamenumberas77e10. Theallowedrangeoffloating-pointliteralsisimplementation-dependent. As\ninintegerliterals,underscoresaresupportedfordigitgrouping.\nSomeexamplesoffloating-pointliterals:\n3.14 10. .001 1e100 3.14e-10 0e0 3.14_15_93\nChangedinversion3.6: Underscoresarenowallowedforgroupingpurposesinliterals.\n2.4.7 Imaginary literals\nImaginaryliteralsaredescribedbythefollowinglexicaldefinitions:\nimagnumber ::= (floatnumber | digitpart) (\"j\" | \"J\")\nAnimaginaryliteralyieldsacomplexnumberwitharealpartof0.0. Complexnumbersarerepresentedasapairof\nfloating-pointnumbersandhavethesamerestrictionsontheirrange. Tocreateacomplexnumberwithanonzero\nrealpart,addafloating-pointnumbertoit,e.g.,(3+4j). Someexamplesofimaginaryliterals:\n3.14j 10.j 10j .001j 1e100j 3.14e-10j 3.14_15_93j\n2.5 Operators\nThefollowingtokensareoperators:\n+ - * ** / // % @\n<< >> & | ^ ~ :=\n< > <= >= == !=\n2.6 Delimiters\nThefollowingtokensserveasdelimitersinthegrammar:\n( ) [ ] { }\n, : ! . ; @ =\n-> += -= *= /= //= %=\n@= &= |= ^= >>= <<= **=\nTheperiodcanalsooccurinfloating-pointandimaginaryliterals. Asequenceofthreeperiodshasaspecialmeaning\nasanellipsisliteral. Thesecondhalfofthelist,theaugmentedassignmentoperators,servelexicallyasdelimiters,\nbutalsoperformanoperation.\nThefollowingprintingASCIIcharactershavespecialmeaningaspartofothertokensorareotherwisesignificantto\nthelexicalanalyzer:\n' \" # \\\n2.5. Operators 15\nThePythonLanguageReference,Release3.13.3\nThefollowingprintingASCIIcharactersarenotusedinPython. Theiroccurrenceoutsidestringliteralsandcom-\nmentsisanunconditionalerror:\n$ ? `\n16 Chapter2. Lexicalanalysis\nCHAPTER\nTHREE\nDATA MODEL\n3.1 Objects, values and types\nObjects are Python\u2019s abstraction for data. All data in a Python program is represented by objects or by relations\nbetweenobjects. (Inasense,andinconformancetoVonNeumann\u2019smodelofa\u201cstoredprogramcomputer\u201d,codeis\nalsorepresentedbyobjects.)\nEvery object has an identity, a type and a value. An object\u2019s identity never changes once it has been created; you\nmaythinkofitastheobject\u2019saddressinmemory. Theisoperatorcomparestheidentityoftwoobjects;theid()\nfunctionreturnsanintegerrepresentingitsidentity.\nCPythonimplementationdetail: ForCPython,id(x)isthememoryaddresswherexisstored.\nAnobject\u2019stypedeterminestheoperationsthattheobjectsupports(e.g.,\u201cdoesithavealength?\u201d) andalsodefines\nthepossiblevaluesforobjectsofthattype. Thetype()functionreturnsanobject\u2019stype(whichisanobjectitself).\nLikeitsidentity,anobject\u2019stypeisalsounchangeable.1\nThevalueofsomeobjectscanchange. Objectswhosevaluecanchangearesaidtobemutable;objectswhosevalueis\nunchangeableoncetheyarecreatedarecalledimmutable. (Thevalueofanimmutablecontainerobjectthatcontains\nareferencetoamutableobjectcanchangewhenthelatter\u2019svalueischanged;howeverthecontainerisstillconsidered\nimmutable,becausethecollectionofobjectsitcontainscannotbechanged. So,immutabilityisnotstrictlythesame\nashavinganunchangeablevalue, itismoresubtle.) Anobject\u2019smutabilityisdeterminedbyitstype; forinstance,\nnumbers,stringsandtuplesareimmutable,whiledictionariesandlistsaremutable.\nObjectsareneverexplicitlydestroyed;however,whentheybecomeunreachabletheymaybegarbage-collected. An\nimplementationisallowedtopostponegarbagecollectionoromititaltogether\u2014itisamatterofimplementation\nqualityhowgarbagecollectionisimplemented,aslongasnoobjectsarecollectedthatarestillreachable.\nCPython implementation detail: CPython currently uses a reference-counting scheme with (optional) delayed\ndetection of cyclically linked garbage, which collects most objects as soon as they become unreachable, but is not\nguaranteedtocollectgarbagecontainingcircularreferences. Seethedocumentationofthegcmoduleforinformation\noncontrollingthecollectionofcyclicgarbage. OtherimplementationsactdifferentlyandCPythonmaychange. Do\nnot depend on immediate finalization of objects when they become unreachable (so you should always close files\nexplicitly).\nNotethattheuseoftheimplementation\u2019stracingordebuggingfacilitiesmaykeepobjectsalivethatwouldnormally\nbecollectable. Alsonotethatcatchinganexceptionwithatry\u2026exceptstatementmaykeepobjectsalive.\nSome objects contain references to \u201cexternal\u201d resources such as open files or windows. It is understood that these\nresourcesarefreedwhentheobjectisgarbage-collected,butsincegarbagecollectionisnotguaranteedtohappen,\nsuch objects also provide an explicit way to release the external resource, usually a close() method. Programs\narestronglyrecommendedtoexplicitlyclosesuchobjects. Thetry\u2026finallystatementandthewithstatement\nprovideconvenientwaystodothis.\nSomeobjectscontainreferencestootherobjects;thesearecalledcontainers. Examplesofcontainersaretuples,lists\nand dictionaries. The references are part of a container\u2019s value. In most cases, when we talk about the value of a\ncontainer,weimplythevalues,nottheidentitiesofthecontainedobjects;however,whenwetalkaboutthemutability\n1Itispossibleinsomecasestochangeanobject\u2019stype,undercertaincontrolledconditions.Itgenerallyisn\u2019tagoodideathough,sinceitcan\nleadtosomeverystrangebehaviourifitishandledincorrectly.\n17\nThePythonLanguageReference,Release3.13.3\nofacontainer,onlytheidentitiesoftheimmediatelycontainedobjectsareimplied. So,ifanimmutablecontainer\n(likeatuple)containsareferencetoamutableobject,itsvaluechangesifthatmutableobjectischanged.\nTypesaffectalmostallaspectsofobjectbehavior. Eventheimportanceofobjectidentityisaffectedinsomesense:\nforimmutabletypes,operationsthatcomputenewvaluesmayactuallyreturnareferencetoanyexistingobjectwith\nthesametypeandvalue,whileformutableobjectsthisisnotallowed. Forexample,aftera = 1; b = 1,aandb\nmayormaynotrefertothesameobjectwiththevalueone,dependingontheimplementation. Thisisbecauseint\nisanimmutabletype,sothereferenceto1canbereused. Thisbehaviourdependsontheimplementationused,so\nshouldnotbereliedupon,butissomethingtobeawareofwhenmakinguseofobjectidentitytests. However,after\nc = []; d = [],canddareguaranteedtorefertotwodifferent,unique,newlycreatedemptylists. (Notethate\n= f = []assignsthesameobjecttobotheandf.)\n3.2 The standard type hierarchy\nBelow is a list of the types that are built into Python. Extension modules (written in C, Java, or other languages,\ndependingontheimplementation)candefineadditionaltypes. FutureversionsofPythonmayaddtypestothetype\nhierarchy (e.g., rational numbers, efficiently stored arrays of integers, etc.), although such additions will often be\nprovidedviathestandardlibraryinstead.\nSomeofthetypedescriptionsbelowcontainaparagraphlisting\u2018specialattributes.\u2019 Theseareattributesthatprovide\naccesstotheimplementationandarenotintendedforgeneraluse. Theirdefinitionmaychangeinthefuture.\n3.2.1 None\nThis type has a single value. There is a single object with this value. This object is accessed through the built-in\nname None. It is used to signify the absence of a value in many situations, e.g., it is returned from functions that\ndon\u2019texplicitlyreturnanything. Itstruthvalueisfalse.\n3.2.2 NotImplemented\nThis type has a single value. There is a single object with this value. This object is accessed through the built-in\nnameNotImplemented. Numericmethodsandrichcomparisonmethodsshouldreturnthisvalueiftheydonot\nimplementtheoperationfortheoperandsprovided. (Theinterpreterwillthentrythereflectedoperation, orsome\notherfallback,dependingontheoperator.) Itshouldnotbeevaluatedinabooleancontext.\nSeeimplementing-the-arithmetic-operationsformoredetails.\nChangedinversion3.9: EvaluatingNotImplementedinabooleancontextisdeprecated. Whileitcurrentlyevalu-\natesastrue,itwillemitaDeprecationWarning. ItwillraiseaTypeErrorinafutureversionofPython.\n3.2.3 Ellipsis\nThistypehasasinglevalue. Thereisasingleobjectwiththisvalue. Thisobjectisaccessedthroughtheliteral...\northebuilt-innameEllipsis. Itstruthvalueistrue.\n3.2.4 numbers.Number\nThesearecreatedbynumericliteralsandreturnedasresultsbyarithmeticoperatorsandarithmeticbuilt-infunctions.\nNumeric objects are immutable; once created their value never changes. Python numbers are of course strongly\nrelatedtomathematicalnumbers,butsubjecttothelimitationsofnumericalrepresentationincomputers.\nThestringrepresentationsofthenumericclasses,computedby__repr__()and__str__(),havethefollowing\nproperties:\n\u2022 They are valid numeric literals which, when passed to their class constructor, produce an object having the\nvalueoftheoriginalnumeric.\n\u2022 Therepresentationisinbase10,whenpossible.\n\u2022 Leadingzeros,possiblyexceptingasinglezerobeforeadecimalpoint,arenotshown.\n\u2022 Trailingzeros,possiblyexceptingasinglezeroafteradecimalpoint,arenotshown.\n18 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\n\u2022 Asignisshownonlywhenthenumberisnegative.\nPythondistinguishesbetweenintegers,floating-pointnumbers,andcomplexnumbers:\nnumbers.Integral\nTheserepresentelementsfromthemathematicalsetofintegers(positiveandnegative).\n(cid:174) Note\nThe rules for integer representation are intended to give the most meaningful interpretation of shift and mask\noperationsinvolvingnegativeintegers.\nTherearetwotypesofintegers:\nIntegers(int)\nTheserepresentnumbersinanunlimitedrange,subjecttoavailable(virtual)memoryonly. Forthepurpose\nofshiftandmaskoperations, abinaryrepresentationisassumed, andnegativenumbersarerepresentedina\nvariantof2\u2019scomplementwhichgivestheillusionofaninfinitestringofsignbitsextendingtotheleft.\nBooleans(bool)\nTheserepresentthetruthvaluesFalseandTrue. ThetwoobjectsrepresentingthevaluesFalseandTrueare\ntheonlyBooleanobjects. TheBooleantypeisasubtypeoftheintegertype,andBooleanvaluesbehavelike\nthevalues0and1,respectively,inalmostallcontexts,theexceptionbeingthatwhenconvertedtoastring,the\nstrings\"False\"or\"True\"arereturned,respectively.\nnumbers.Real(float)\nThese represent machine-level double precision floating-point numbers. You are at the mercy of the underlying\nmachinearchitecture(andCorJavaimplementation)fortheacceptedrangeandhandlingofoverflow. Pythondoes\nnotsupportsingle-precisionfloating-pointnumbers;thesavingsinprocessorandmemoryusagethatareusuallythe\nreasonforusingthesearedwarfedbytheoverheadofusingobjectsinPython,sothereisnoreasontocomplicatethe\nlanguagewithtwokindsoffloating-pointnumbers.\nnumbers.Complex(complex)\nThese represent complex numbers as a pair of machine-level double precision floating-point numbers. The same\ncaveatsapplyasforfloating-pointnumbers. Therealandimaginarypartsofacomplexnumberzcanberetrieved\nthroughtheread-onlyattributesz.realandz.imag.\n3.2.5 Sequences\nTheserepresentfiniteorderedsetsindexedbynon-negativenumbers. Thebuilt-infunctionlen()returnsthenumber\nofitemsofasequence. Whenthelengthofasequenceisn,theindexsetcontainsthenumbers0,1,\u2026,n-1. Item\niofsequenceaisselectedbya[i]. Somesequences,includingbuilt-insequences,interpretnegativesubscriptsby\naddingthesequencelength. Forexample,a[-2]equalsa[n-2],thesecondtolastitemofsequenceawithlength\nn.\nSequencesalsosupportslicing:a[i:j]selectsallitemswithindexksuchthati<=k<j. Whenusedasanexpression,\na slice is a sequence of the same type. The comment above about negative indexes also applies to negative slice\npositions.\nSomesequencesalsosupport\u201cextendedslicing\u201dwithathird\u201cstep\u201dparameter: a[i:j:k]selectsallitemsofawith\nindexxwherex = i + n*k,n>=0andi<=x<j.\nSequencesaredistinguishedaccordingtotheirmutability:\n3.2. Thestandardtypehierarchy 19\nThePythonLanguageReference,Release3.13.3\nImmutablesequences\nAn object of an immutable sequence type cannot change once it is created. (If the object contains references to\notherobjects,theseotherobjectsmaybemutableandmaybechanged; however,thecollectionofobjectsdirectly\nreferencedbyanimmutableobjectcannotchange.)\nThefollowingtypesareimmutablesequences:\nStrings\nAstringisasequenceofvaluesthatrepresentUnicodecodepoints. AllthecodepointsintherangeU+0000\n- U+10FFFFcanberepresentedinastring. Pythondoesn\u2019thaveachartype;instead,everycodepointinthe\nstringisrepresentedasastringobjectwithlength1. Thebuilt-infunctionord()convertsacodepointfrom\nitsstringformtoanintegerintherange0 - 10FFFF;chr()convertsanintegerintherange0 - 10FFFF\ntothecorrespondinglength1stringobject. str.encode()canbeusedtoconvertastrtobytesusingthe\ngiventextencoding,andbytes.decode()canbeusedtoachievetheopposite.\nTuples\nTheitemsofatuplearearbitraryPythonobjects. Tuplesoftwoormoreitemsareformedbycomma-separated\nlistsofexpressions. Atupleofoneitem(a\u2018singleton\u2019)canbeformedbyaffixingacommatoanexpression(an\nexpressionbyitselfdoesnotcreateatuple,sinceparenthesesmustbeusableforgroupingofexpressions). An\nemptytuplecanbeformedbyanemptypairofparentheses.\nBytes\nAbytesobjectisanimmutablearray. Theitemsare8-bitbytes,representedbyintegersintherange0<=x\n<256. Bytesliterals(likeb'abc')andthebuilt-inbytes()constructorcanbeusedtocreatebytesobjects.\nAlso,bytesobjectscanbedecodedtostringsviathedecode()method.\nMutablesequences\nMutablesequencescanbechangedaftertheyarecreated. Thesubscriptionandslicingnotationscanbeusedasthe\ntargetofassignmentanddel(delete)statements.\n(cid:174) Note\nThecollectionsandarraymoduleprovideadditionalexamplesofmutablesequencetypes.\nTherearecurrentlytwointrinsicmutablesequencetypes:\nLists\nTheitemsofalistarearbitraryPythonobjects. Listsareformedbyplacingacomma-separatedlistofexpres-\nsionsinsquarebrackets. (Notethattherearenospecialcasesneededtoformlistsoflength0or1.)\nByteArrays\nAbytearrayobjectisamutablearray. Theyarecreatedbythebuilt-inbytearray()constructor. Asidefrom\nbeingmutable(andhenceunhashable),bytearraysotherwiseprovidethesameinterfaceandfunctionalityas\nimmutablebytesobjects.\n3.2.6 Set types\nTheserepresentunordered, finitesetsofunique, immutableobjects. Assuch, theycannotbeindexedbyanysub-\nscript. However, they can be iterated over, and the built-in function len() returns the number of items in a set.\nCommonusesforsetsarefastmembershiptesting,removingduplicatesfromasequence,andcomputingmathemat-\nicaloperationssuchasintersection,union,difference,andsymmetricdifference.\nForsetelements,thesameimmutabilityrulesapplyasfordictionarykeys. Notethatnumerictypesobeythenormal\nrulesfornumericcomparison: iftwonumberscompareequal(e.g.,1and1.0),onlyoneofthemcanbecontained\ninaset.\nTherearecurrentlytwointrinsicsettypes:\n20 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nSets\nTheserepresentamutableset. Theyarecreatedbythebuilt-inset()constructorandcanbemodifiedafter-\nwardsbyseveralmethods,suchasadd().\nFrozensets\nTheserepresentanimmutableset. Theyarecreatedbythebuilt-infrozenset()constructor. Asafrozenset\nisimmutableandhashable,itcanbeusedagainasanelementofanotherset,orasadictionarykey.\n3.2.7 Mappings\nTheserepresentfinitesetsofobjectsindexedbyarbitraryindexsets. Thesubscriptnotationa[k]selectstheitem\nindexedbykfromthemappinga;thiscanbeusedinexpressionsandasthetargetofassignmentsordelstatements.\nThebuilt-infunctionlen()returnsthenumberofitemsinamapping.\nThereiscurrentlyasingleintrinsicmappingtype:\nDictionaries\nThese represent finite sets of objects indexed by nearly arbitrary values. The only types of values not acceptable\naskeysarevaluescontaininglistsordictionariesorothermutabletypesthatarecomparedbyvalueratherthanby\nobjectidentity,thereasonbeingthattheefficientimplementationofdictionariesrequiresakey\u2019shashvaluetoremain\nconstant. Numerictypesusedforkeysobeythenormalrulesfornumericcomparison: iftwonumberscompareequal\n(e.g.,1and1.0)thentheycanbeusedinterchangeablytoindexthesamedictionaryentry.\nDictionaries preserve insertion order, meaning that keys will be produced in the same order they were added se-\nquentially over the dictionary. Replacing an existing key does not change the order, however removing a key and\nre-insertingitwilladdittotheendinsteadofkeepingitsoldplace.\nDictionariesaremutable;theycanbecreatedbythe{}notation(seesectionDictionarydisplays).\nThe extension modules dbm.ndbm and dbm.gnu provide additional examples of mapping types, as does the\ncollectionsmodule.\nChangedinversion3.7: DictionariesdidnotpreserveinsertionorderinversionsofPythonbefore3.6. InCPython\n3.6,insertionorderwaspreserved,butitwasconsideredanimplementationdetailatthattimeratherthanalanguage\nguarantee.\n3.2.8 Callable types\nThesearethetypestowhichthefunctioncalloperation(seesectionCalls)canbeapplied:\nUser-definedfunctions\nAuser-definedfunctionobjectiscreatedbyafunctiondefinition(seesectionFunctiondefinitions). Itshouldbecalled\nwithanargumentlistcontainingthesamenumberofitemsasthefunction\u2019sformalparameterlist.\nSpecialread-onlyattributes\nAttribute Meaning\nA reference to the dictionary that holds the func-\nfunction.__globals__ tion\u2019s global variables \u2013 the global namespace of the\nmoduleinwhichthefunctionwasdefined.\nNoneoratupleofcellsthatcontainbindingsforthe\nfunction.__closure__ names specified in the co_freevars attribute of the\nfunction\u2019scode object.\nAcellobjecthastheattributecell_contents. This\ncan be used to get the value of the cell, as well as set\nthevalue.\n3.2. Thestandardtypehierarchy 21\nThePythonLanguageReference,Release3.13.3\nSpecialwritableattributes\nMostoftheseattributescheckthetypeoftheassignedvalue:\nAttribute Meaning\nThe function\u2019s documentation string, or None if un-\nfunction.__doc__ available.\nThe function\u2019s name. See also: __name__\nfunction.__name__ attributes.\nThe function\u2019s qualified name. See also:\nfunction.__qualname__ __qualname__ attributes.\nAddedinversion3.3.\nThenameofthemodulethefunctionwasdefinedin,or\nfunction.__module__ Noneifunavailable.\nAtuplecontainingdefaultparametervaluesforthose\nfunction.__defaults__ parametersthathavedefaults,orNoneifnoparameters\nhaveadefaultvalue.\nThe code object representing the compiled function\nfunction.__code__ body.\nThenamespacesupportingarbitraryfunctionattributes.\nfunction.__dict__ Seealso: __dict__ attributes.\nAdictionarycontainingannotationsofparameters.\nfunction.__annotations__ Thekeysofthedictionaryaretheparameternames,and\n'return'forthereturnannotation, ifprovided. See\nalso: annotations-howto.\nA dictionary containing defaults for keyword-only\nfunction.__kwdefaults__ parameters.\nA tuple containing the type parameters of a generic\nfunction.__type_params__ function.\nAddedinversion3.12.\nFunction objects also support getting and setting arbitrary attributes, which can be used, for example, to attach\nmetadatatofunctions. Regularattributedot-notationisusedtogetandsetsuchattributes.\nCPython implementation detail: CPython\u2019s current implementation only supports function attributes on user-\ndefinedfunctions. Functionattributesonbuilt-infunctionsmaybesupportedinthefuture.\nAdditionalinformationaboutafunction\u2019sdefinitioncanberetrievedfromitscodeobject(accessibleviathe__code__\nattribute).\nInstancemethods\nAninstancemethodobjectcombinesaclass,aclassinstanceandanycallableobject(normallyauser-definedfunc-\ntion).\nSpecialread-onlyattributes:\n22 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nReferstotheclassinstanceobjecttowhichthemethod\nmethod.__self__ isbound\nReferstotheoriginalfunctionobject\nmethod.__func__\nThe method\u2019s documentation (same as method.\nmethod.__doc__ __func__.__doc__). Astringiftheoriginalfunc-\ntionhadadocstring,elseNone.\nThe name of the method (same as method.\nmethod.__name__ __func__.__name__)\nThenameofthemodulethemethodwasdefinedin,or\nmethod.__module__ Noneifunavailable.\nMethodsalsosupportaccessing(butnotsetting)thearbitraryfunctionattributesontheunderlyingfunctionobject.\nUser-defined method objects may be created when getting an attribute of a class (perhaps via an instance of that\nclass),ifthatattributeisauser-definedfunctionobjectoraclassmethodobject.\nWhen an instance method object is created by retrieving a user-defined function object from a class via one of its\ninstances, its __self__ attribute is the instance, and the method object is said to be bound. The new method\u2019s\n__func__attributeistheoriginalfunctionobject.\nWhen an instance method object is created by retrieving a classmethod object from a class or instance, its\n__self__attributeistheclassitself,andits__func__attributeisthefunctionobjectunderlyingtheclassmethod.\nWhenaninstancemethodobjectiscalled,theunderlyingfunction(__func__)iscalled,insertingtheclassinstance\n(__self__)infrontoftheargumentlist. Forinstance,whenCisaclasswhichcontainsadefinitionforafunction\nf(),andxisaninstanceofC,callingx.f(1)isequivalenttocallingC.f(x, 1).\nWhenaninstancemethodobjectisderivedfromaclassmethodobject,the\u201cclassinstance\u201dstoredin__self__\nwillactuallybetheclassitself,sothatcallingeitherx.f(1)orC.f(1)isequivalenttocallingf(C,1)wherefis\ntheunderlyingfunction.\nItisimportanttonotethatuser-definedfunctionswhichareattributesofaclassinstancearenotconvertedtobound\nmethods;thisonlyhappenswhenthefunctionisanattributeoftheclass.\nGeneratorfunctions\nAfunctionormethodwhichusestheyieldstatement(seesectionTheyieldstatement)iscalledageneratorfunction.\nSuchafunction,whencalled,alwaysreturnsaniteratorobjectwhichcanbeusedtoexecutethebodyofthefunction:\ncalling the iterator\u2019s iterator.__next__() method will cause the function to execute until it provides a value\nusingtheyieldstatement. Whenthefunctionexecutesareturnstatementorfallsofftheend,aStopIteration\nexceptionisraisedandtheiteratorwillhavereachedtheendofthesetofvaluestobereturned.\nCoroutinefunctions\nAfunctionormethodwhichisdefinedusingasync defiscalledacoroutinefunction. Suchafunction,whencalled,\nreturnsacoroutineobject. Itmaycontainawaitexpressions,aswellasasync withandasync forstatements.\nSeealsotheCoroutineObjectssection.\nAsynchronousgeneratorfunctions\nA function or method which is defined using async def and which uses the yield statement is called a asyn-\nchronous generator function. Such a function, when called, returns an asynchronous iterator object which can be\nusedinanasync forstatementtoexecutethebodyofthefunction.\nCallingtheasynchronousiterator\u2019saiterator.__anext__methodwillreturnanawaitablewhichwhenawaited\nwill execute until it provides a value using the yield expression. When the function executes an empty return\n3.2. Thestandardtypehierarchy 23\nThePythonLanguageReference,Release3.13.3\nstatementorfallsofftheend,aStopAsyncIterationexceptionisraisedandtheasynchronousiteratorwillhave\nreachedtheendofthesetofvaluestobeyielded.\nBuilt-infunctions\nAbuilt-infunctionobjectisawrapperaroundaCfunction. Examplesofbuilt-infunctionsarelen()andmath.\nsin()(mathisastandardbuilt-inmodule). ThenumberandtypeoftheargumentsaredeterminedbytheCfunction.\nSpecialread-onlyattributes:\n\u2022 __doc__isthefunction\u2019sdocumentationstring,orNoneifunavailable. Seefunction.__doc__.\n\u2022 __name__isthefunction\u2019sname. Seefunction.__name__.\n\u2022 __self__issettoNone(butseethenextitem).\n\u2022 __module__isthenameofthemodulethefunctionwasdefinedinorNoneifunavailable. Seefunction.\n__module__.\nBuilt-inmethods\nThisisreallyadifferentdisguiseofabuilt-infunction,thistimecontaininganobjectpassedtotheCfunctionasan\nimplicitextraargument. Anexampleofabuilt-inmethodisalist.append(),assumingalist isalistobject. In\nthiscase,thespecialread-onlyattribute__self__issettotheobjectdenotedbyalist. (Theattributehasthesame\nsemanticsasitdoeswithother instance methods.)\nClasses\nClasses are callable. These objects normally act as factories for new instances of themselves, but variations are\npossibleforclasstypesthatoverride__new__(). Theargumentsofthecallarepassedto__new__()and,inthe\ntypicalcase,to__init__()toinitializethenewinstance.\nClassInstances\nInstancesofarbitraryclassescanbemadecallablebydefininga__call__()methodintheirclass.\n3.2.9 Modules\nModulesareabasicorganizationalunitofPythoncode,andarecreatedbytheimportsystemasinvokedeitherbythe\nimportstatement,orbycallingfunctionssuchasimportlib.import_module()andbuilt-in__import__().\nAmoduleobjecthasanamespaceimplementedbyadictionaryobject(thisisthedictionaryreferencedbythe\n__globals__attributeoffunctionsdefinedinthemodule). Attributereferencesaretranslatedtolookupsinthis\ndictionary,e.g.,m.xisequivalenttom.__dict__[\"x\"]. Amoduleobjectdoesnotcontainthecodeobjectusedto\ninitializethemodule(sinceitisn\u2019tneededoncetheinitializationisdone).\nAttributeassignmentupdatesthemodule\u2019snamespacedictionary,e.g.,m.x = 1isequivalenttom.__dict__[\"x\"]\n= 1.\nImport-relatedattributesonmoduleobjects\nModule objects have the following attributes that relate to the import system. When a module is created using the\nmachinery associated with the import system, these attributes are filled in based on the module\u2019s spec, before the\nloaderexecutesandloadsthemodule.\nTocreateamoduledynamicallyratherthanusingtheimportsystem,it\u2019srecommendedtouseimportlib.util.\nmodule_from_spec(),whichwillsetthevariousimport-controlledattributestoappropriatevalues. It\u2019salsopos-\nsibletousethetypes.ModuleTypeconstructortocreatemodulesdirectly,butthistechniqueismoreerror-prone,\nasmostattributesmustbemanuallysetonthemoduleobjectafterithasbeencreatedwhenusingthisapproach.\n24 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\n(cid:1002) Caution\nWith the exception of __name__, it is strongly recommended that you rely on __spec__ and its attributes\ninstead of any of the other individual attributes listed in this subsection. Note that updating an attribute on\n__spec__willnotupdatethecorrespondingattributeonthemoduleitself:\n>>> import typing\n>>> typing.__name__, typing.__spec__.name\n('typing', 'typing')\n>>> typing.__spec__.name = 'spelling'\n>>> typing.__name__, typing.__spec__.name\n('typing', 'spelling')\n>>> typing.__name__ = 'keyboard_smashing'\n>>> typing.__name__, typing.__spec__.name\n('keyboard_smashing', 'spelling')\nmodule.__name__\nThenameusedtouniquelyidentifythemoduleintheimportsystem. Foradirectlyexecutedmodule,thiswill\nbesetto\"__main__\".\nThis attribute must be set to the fully qualified name of the module. It is expected to match the value of\nmodule.__spec__.name.\nmodule.__spec__\nArecordofthemodule\u2019simport-system-relatedstate.\nSettothemodule specthatwasusedwhenimportingthemodule. SeeModulespecsformoredetails.\nAddedinversion3.4.\nmodule.__package__\nThepackageamodulebelongsto.\nIf the module is top-level (that is, not a part of any specific package) then the attribute should be set to ''\n(theemptystring). Otherwise, itshouldbesettothenameofthemodule\u2019spackage(whichcanbeequalto\nmodule.__name__ifthemoduleitselfisapackage). SeePEP366forfurtherdetails.\nThisattributeisusedinsteadof__name__tocalculateexplicitrelativeimportsformainmodules. Itdefaultsto\nNoneformodulescreateddynamicallyusingthetypes.ModuleTypeconstructor;useimportlib.util.\nmodule_from_spec()insteadtoensuretheattributeissettoastr.\nItisstronglyrecommendedthatyouusemodule.__spec__.parentinsteadofmodule.__package__.\n__package__isnowonlyusedasafallbackif__spec__.parentisnotset,andthisfallbackpathisdep-\nrecated.\nChangedinversion3.4:ThisattributenowdefaultstoNoneformodulescreateddynamicallyusingthetypes.\nModuleTypeconstructor. Previouslytheattributewasoptional.\nChanged in version 3.6: The value of __package__ is expected to be the same as __spec__.parent.\n__package__isnowonlyusedasafallbackduringimportresolutionif__spec__.parentisnotdefined.\nChanged in version 3.10: ImportWarning is raised if an import resolution falls back to __package__\ninsteadof__spec__.parent.\nChanged in version 3.12: Raise DeprecationWarning instead of ImportWarning when falling back to\n__package__duringimportresolution.\nDeprecatedsinceversion3.13,willberemovedinversion3.15: __package__willceasetobesetortaken\nintoconsiderationbytheimportsystemorstandardlibrary.\nmodule.__loader__\nTheloaderobjectthattheimportmachineryusedtoloadthemodule.\n3.2. Thestandardtypehierarchy 25\nThePythonLanguageReference,Release3.13.3\nThisattributeismostlyusefulforintrospection,butcanbeusedforadditionalloader-specificfunctionality,for\nexamplegettingdataassociatedwithaloader.\n__loader__defaultstoNoneformodulescreateddynamicallyusingthetypes.ModuleTypeconstructor;\nuseimportlib.util.module_from_spec()insteadtoensuretheattributeissettoaloaderobject.\nItisstronglyrecommendedthatyouusemodule.__spec__.loaderinsteadofmodule.__loader__.\nChangedinversion3.4:ThisattributenowdefaultstoNoneformodulescreateddynamicallyusingthetypes.\nModuleTypeconstructor. Previouslytheattributewasoptional.\nDeprecated since version 3.12, will be removed in version 3.16: Setting __loader__ on a module while\nfailingtoset__spec__.loaderisdeprecated. InPython3.16,__loader__willceasetobesetortaken\nintoconsiderationbytheimportsystemorthestandardlibrary.\nmodule.__path__\nA (possibly empty) sequence of strings enumerating the locations where the package\u2019s submodules will be\nfound. Non-packagemodulesshouldnothavea__path__attribute. See__path__attributesonmodulesfor\nmoredetails.\nItisstronglyrecommendedthatyouusemodule.__spec__.submodule_search_locationsinsteadof\nmodule.__path__.\nmodule.__file__\nmodule.__cached__\n__file__and__cached__arebothoptionalattributesthatmayormaynotbeset. Bothattributesshould\nbeastrwhentheyareavailable.\n__file__indicatesthepathnameofthefilefromwhichthemodulewasloaded(ifloadedfromafile),orthe\npathnameofthesharedlibraryfileforextensionmodulesloadeddynamicallyfromasharedlibrary. Itmight\nbemissingforcertaintypesofmodules,suchasCmodulesthatarestaticallylinkedintotheinterpreter,and\ntheimportsystemmayopttoleaveitunsetifithasnosemanticmeaning(forexample,amoduleloadedfrom\nadatabase).\nIf__file__issetthenthe__cached__attributemightalsobeset,whichisthepathtoanycompiledversion\nofthecode(forexample,abyte-compiledfile). Thefiledoesnotneedtoexisttosetthisattribute; thepath\ncansimplypointtowherethecompiledfilewouldexist(seePEP3147).\nNote that __cached__ may be set even if __file__ is not set. However, that scenario is quite atypical.\nUltimately,theloaderiswhatmakesuseofthemodulespecprovidedbythefinder(fromwhich__file__\nand __cached__ are derived). So if a loader can load from a cached module but otherwise does not load\nfromafile,thatatypicalscenariomaybeappropriate.\nItisstronglyrecommendedthatyouusemodule.__spec__.cachedinsteadofmodule.__cached__.\nDeprecated since version 3.13, will be removed in version 3.15: Setting __cached__ on a module while\nfailingtoset__spec__.cachedisdeprecated. InPython3.15,__cached__willceasetobesetortaken\nintoconsiderationbytheimportsystemorstandardlibrary.\nOtherwritableattributesonmoduleobjects\nAswellastheimport-relatedattributeslistedabove,moduleobjectsalsohavethefollowingwritableattributes:\nmodule.__doc__\nThemodule\u2019sdocumentationstring,orNoneifunavailable. Seealso: __doc__ attributes.\nmodule.__annotations__\nAdictionarycontainingvariableannotationscollectedduringmodulebodyexecution. Forbestpracticeson\nworkingwith__annotations__,pleaseseeannotations-howto.\n26 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nModuledictionaries\nModuleobjectsalsohavethefollowingspecialread-onlyattribute:\nmodule.__dict__\nThemodule\u2019snamespaceasadictionaryobject. Uniquelyamongtheattributeslistedhere,__dict__cannot\nbeaccessedasaglobalvariablefromwithinamodule;itcanonlybeaccessedasanattributeonmoduleobjects.\nCPythonimplementationdetail: BecauseofthewayCPythonclearsmoduledictionaries,themoduledic-\ntionarywillbeclearedwhenthemodulefallsoutofscopeevenifthedictionarystillhaslivereferences. To\navoidthis,copythedictionaryorkeepthemodulearoundwhileusingitsdictionarydirectly.\n3.2.10 Custom classes\nCustomclasstypesaretypicallycreatedbyclassdefinitions(seesectionClassdefinitions). Aclasshasanamespace\nimplementedbyadictionaryobject. Classattributereferencesaretranslatedtolookupsinthisdictionary,e.g.,C.x\nistranslatedtoC.__dict__[\"x\"](althoughthereareanumberofhookswhichallowforothermeansoflocating\nattributes). Whentheattributenameisnotfoundthere,theattributesearchcontinuesinthebaseclasses. Thissearch\nofthebaseclassesusestheC3methodresolutionorderwhichbehavescorrectlyeveninthepresenceof\u2018diamond\u2019\ninheritance structures where there are multiple inheritance paths leading back to a common ancestor. Additional\ndetailsontheC3MROusedbyPythoncanbefoundatpython_2.3_mro.\nWhenaclassattributereference(forclassC,say)wouldyieldaclassmethodobject,itistransformedintoaninstance\nmethodobjectwhose__self__attributeisC.Whenitwouldyieldastaticmethodobject,itistransformedinto\nthe object wrapped by the static method object. See section Implementing Descriptors for another way in which\nattributesretrievedfromaclassmaydifferfromthoseactuallycontainedinits__dict__.\nClassattributeassignmentsupdatetheclass\u2019sdictionary,neverthedictionaryofabaseclass.\nAclassobjectcanbecalled(seeabove)toyieldaclassinstance(seebelow).\n3.2. Thestandardtypehierarchy 27\nThePythonLanguageReference,Release3.13.3\nSpecialattributes\nAttribute Meaning\nTheclass\u2019sname. Seealso: __name__ attributes.\ntype.__name__\nTheclass\u2019squalifiedname. Seealso: __qualname__\ntype.__qualname__ attributes.\nThenameofthemoduleinwhichtheclasswasdefined.\ntype.__module__\nA mapping proxy providing a read-only view of\ntype.__dict__ the class\u2019s namespace. See also: __dict__\nattributes.\nA tuple containing the class\u2019s bases. In most\ntype.__bases__ cases, fora classdefined as class X(A, B, C), X.\n__bases__willbeexactlyequalto(A, B, C).\nTheclass\u2019sdocumentationstring,orNoneifundefined.\ntype.__doc__ Notinheritedbysubclasses.\nA dictionary containing variable annotations col-\ntype.__annotations__ lected during class body execution. For best prac-\nticesonworkingwith__annotations__,pleasesee\nannotations-howto.\n(cid:1002) Caution\nAccessing the __annotations__ attribute of a\nclass object directly may yield incorrect results\nin the presence of metaclasses. In addition, the\nattribute may not exist for some classes. Use\ninspect.get_annotations()toretrieveclass\nannotationssafely.\nA tuple containing the type parameters of a generic\ntype.__type_params__ class.\nAddedinversion3.12.\nA tuple containing names of attributes of this class\ntype.__static_attributes__ whichareassignedthroughself.Xfromanyfunction\ninitsbody.\nAddedinversion3.13.\nThe line number of the first line of the class defini-\ntype.__firstlineno__ tion, including decorators. Setting the __module__\nattribute removes the __firstlineno__ item from\nthetype\u2019sdictionary.\nAddedinversion3.13.\nThetupleofclassesthatareconsideredwhenlooking\ntype.__mro__ forbaseclassesduringmethodresolution.\nSpecialmethods\nInadditiontothespecialattributesdescribedabove,allPythonclassesalsohavethefollowingtwomethodsavailable:\ntype.mro()\nThismethodcanbeoverriddenbyametaclasstocustomizethemethodresolutionorderforitsinstances. Itis\n28 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\ncalledatclassinstantiation,anditsresultisstoredin__mro__.\ntype.__subclasses__()\nEachclasskeepsalistofweakreferencestoitsimmediatesubclasses. Thismethodreturnsalistofallthose\nreferencesstillalive. Thelistisindefinitionorder. Example:\n>>> class A: pass\n>>> class B(A): pass\n>>> A.__subclasses__()\n[<class 'B'>]\n3.2.11 Class instances\nAclassinstanceiscreatedbycallingaclassobject(seeabove). Aclassinstancehasanamespaceimplementedasa\ndictionarywhichisthefirstplaceinwhichattributereferencesaresearched. Whenanattributeisnotfoundthere,\nandtheinstance\u2019sclasshasanattributebythatname,thesearchcontinueswiththeclassattributes. Ifaclassattribute\nis found that is a user-defined function object, it is transformed into an instance method object whose __self__\nattribute is the instance. Static method and class method objects are also transformed; see above under \u201cClasses\u201d.\nSee section Implementing Descriptors for another way in which attributes of a class retrieved via its instances may\ndifferfromtheobjectsactuallystoredintheclass\u2019s__dict__. Ifnoclassattributeisfound,andtheobject\u2019sclass\nhasa__getattr__()method,thatiscalledtosatisfythelookup.\nAttribute assignments and deletions update the instance\u2019s dictionary, never a class\u2019s dictionary. If the class has a\n__setattr__()or__delattr__()method,thisiscalledinsteadofupdatingtheinstancedictionarydirectly.\nClassinstancescanpretendtobenumbers,sequences,ormappingsiftheyhavemethodswithcertainspecialnames.\nSeesectionSpecialmethodnames.\nSpecialattributes\nobject.__class__\nTheclasstowhichaclassinstancebelongs.\nobject.__dict__\nAdictionaryorothermappingobjectusedtostoreanobject\u2019s(writable)attributes. Notallinstanceshavea\n__dict__attribute;seethesectionon__slots__formoredetails.\n3.2.12 I/O objects (also known as file objects)\nA file object represents an open file. Various shortcuts are available to create file objects: the open() built-in\nfunction, andalsoos.popen(), os.fdopen(), andthemakefile()methodofsocketobjects(andperhapsby\notherfunctionsormethodsprovidedbyextensionmodules).\nTheobjectssys.stdin,sys.stdoutandsys.stderrareinitializedtofileobjectscorrespondingtotheinter-\npreter\u2019s standard input, output and error streams; they are all open in text mode and therefore follow the interface\ndefinedbytheio.TextIOBaseabstractclass.\n3.2.13 Internal types\nA few types used internally by the interpreter are exposed to the user. Their definitions may change with future\nversionsoftheinterpreter,buttheyarementionedhereforcompleteness.\nCodeobjects\nCode objects represent byte-compiled executable Python code, or bytecode. The difference between a code object\nandafunctionobjectisthatthefunctionobjectcontainsanexplicitreferencetothefunction\u2019sglobals(themodule\ninwhichitwasdefined),whileacodeobjectcontainsnocontext;alsothedefaultargumentvaluesarestoredinthe\nfunctionobject,notinthecodeobject(becausetheyrepresentvaluescalculatedatrun-time). Unlikefunctionobjects,\ncodeobjectsareimmutableandcontainnoreferences(directlyorindirectly)tomutableobjects.\n3.2. Thestandardtypehierarchy 29\nThePythonLanguageReference,Release3.13.3\nSpecialread-onlyattributes\nThefunctionname\ncodeobject.co_name\nThefullyqualifiedfunctionname\ncodeobject.co_qualname Addedinversion3.11.\nThe total number of positional parameters (including\ncodeobject.co_argcount positional-onlyparametersandparameterswithdefault\nvalues)thatthefunctionhas\nThe number of positional-only parameters (including\ncodeobject.co_posonlyargcount argumentswithdefaultvalues)thatthefunctionhas\nThenumberofkeyword-onlyparameters(includingar-\ncodeobject.co_kwonlyargcount gumentswithdefaultvalues)thatthefunctionhas\nThenumberoflocalvariablesusedbythefunction(in-\ncodeobject.co_nlocals cludingparameters)\nAtuplecontainingthenamesofthelocalvariablesin\ncodeobject.co_varnames thefunction(startingwiththeparameternames)\nA tuple containing the names of local variables that\ncodeobject.co_cellvars arereferencedfromatleastonenestedscopeinsidethe\nfunction\nA tuple containing the names of free (closure) vari-\ncodeobject.co_freevars ables that a nested scope references in an outer scope.\nSeealsofunction.__closure__.\nNote: referencestoglobalandbuiltinnamesarenotin-\ncluded.\nAstringrepresentingthesequenceofbytecodeinstruc-\ncodeobject.co_code tionsinthefunction\nAtuplecontainingtheliteralsusedbythebytecodein\ncodeobject.co_consts thefunction\nAtuplecontainingthenamesusedbythebytecodein\ncodeobject.co_names thefunction\nThenameofthefilefromwhichthecodewascompiled\ncodeobject.co_filename\nThelinenumberofthefirstlineofthefunction\ncodeobject.co_firstlineno\nAstringencodingthemappingfrombytecodeoffsetsto\ncodeobject.co_lnotab line numbers. For details, see the source code of the\ninterpreter.\nDeprecated since version 3.12: This attribute of code\nobjects is deprecated, and may be removed in Python\n3.15.\nTherequiredstacksizeofthecodeobject\ncodeobject.co_stacksize\nAnintegerencodinganumberofflagsfortheinter-\ncodeobject.co_flags preter.\n30 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nThe following flag bits are defined for co_flags: bit 0x04 is set if the function uses the *arguments syntax to\nacceptanarbitrarynumberofpositionalarguments;bit0x08issetifthefunctionusesthe**keywordssyntaxto\nacceptarbitrarykeywordarguments; bit0x20issetifthefunctionisagenerator. Seeinspect-module-co-flagsfor\ndetailsonthesemanticsofeachflagsthatmightbepresent.\nFuturefeaturedeclarations(forexample,from __future__ import division)alsousebitsinco_flagsto\nindicatewhetheracodeobjectwascompiledwithaparticularfeatureenabled. Seecompiler_flag.\nOtherbitsinco_flagsarereservedforinternaluse.\nIfacodeobjectrepresentsafunction, thefirstiteminco_constsisthedocumentationstringofthefunction, or\nNoneifundefined.\nMethodsoncodeobjects\ncodeobject.co_positions()\nReturnsaniterableoverthesourcecodepositionsofeachbytecodeinstructioninthecodeobject.\nTheiteratorreturnstuplescontainingthe(start_line, end_line, start_column, end_column).\nThe i-th tuple corresponds to the position of the source code that compiled to the i-th code unit. Column\ninformationis0-indexedutf-8byteoffsetsonthegivensourceline.\nThispositionalinformationcanbemissing. Anon-exhaustivelistsofcaseswherethismayhappen:\n\u2022 Runningtheinterpreterwith-Xno_debug_ranges.\n\u2022 Loadingapycfilecompiledwhileusing-Xno_debug_ranges.\n\u2022 Positiontuplescorrespondingtoartificialinstructions.\n\u2022 Lineandcolumnnumbersthatcan\u2019tberepresentedduetoimplementationspecificlimitations.\nWhenthisoccurs,someorallofthetupleelementscanbeNone.\nAddedinversion3.11.\n(cid:174) Note\nThisfeaturerequiresstoringcolumnpositionsincodeobjectswhichmayresultinasmallincreaseofdisk\nusageofcompiledPythonfilesorinterpretermemoryusage. Toavoidstoringtheextrainformationand/or\ndeactivateprintingtheextratracebackinformation,the-Xno_debug_rangescommandlineflagorthe\nPYTHONNODEBUGRANGESenvironmentvariablecanbeused.\ncodeobject.co_lines()\nReturns an iterator that yields information about successive ranges of bytecodes. Each item yielded is a\n(start, end, lineno)tuple:\n\u2022 start(anint)representstheoffset(inclusive)ofthestartofthebytecoderange\n\u2022 end(anint)representstheoffset(exclusive)oftheendofthebytecoderange\n\u2022 linenoisanintrepresentingthelinenumberofthebytecoderange,orNoneifthebytecodesinthe\ngivenrangehavenolinenumber\nTheitemsyieldedwillhavethefollowingproperties:\n\u2022 Thefirstrangeyieldedwillhaveastartof0.\n\u2022 The(start, end)rangeswillbenon-decreasingandconsecutive. Thatis,foranypairoftuples,the\nstartofthesecondwillbeequaltotheendofthefirst.\n\u2022 Norangewillbebackwards: end >= startforalltriples.\n\u2022 Thelasttupleyieldedwillhaveendequaltothesizeofthebytecode.\n3.2. Thestandardtypehierarchy 31\nThePythonLanguageReference,Release3.13.3\nZero-widthranges,wherestart == end,areallowed. Zero-widthrangesareusedforlinesthatarepresent\ninthesourcecode,buthavebeeneliminatedbythebytecodecompiler.\nAddedinversion3.10.\n(cid:181) Seealso\nPEP626-Preciselinenumbersfordebuggingandothertools.\nThePEPthatintroducedtheco_lines()method.\ncodeobject.replace(**kwargs)\nReturnacopyofthecodeobjectwithnewvaluesforthespecifiedfields.\nCodeobjectsarealsosupportedbythegenericfunctioncopy.replace().\nAddedinversion3.8.\nFrameobjects\nFrame objects represent execution frames. They may occur in traceback objects, and are also passed to registered\ntracefunctions.\nSpecialread-onlyattributes\nPointstothepreviousstackframe(towardsthecaller),\nframe.f_back orNoneifthisisthebottomstackframe\nThe code object being executed in this frame. Ac-\nframe.f_code cessingthisattributeraisesanauditingeventobject.\n__getattr__withargumentsobjand\"f_code\".\nThemappingusedbytheframetolookuplocalvari-\nframe.f_locals ables. Iftheframereferstoanoptimizedscope,thismay\nreturnawrite-throughproxyobject.\nChangedinversion3.13: Returnaproxyforoptimized\nscopes.\nThedictionaryusedbytheframetolookupglobalvari-\nframe.f_globals ables\nThedictionaryusedbytheframetolookupbuilt-in(in-\nframe.f_builtins trinsic)names\nThe\u201cpreciseinstruction\u201doftheframeobject(thisisan\nframe.f_lasti indexintothebytecodestringofthecodeobject)\n32 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nSpecialwritableattributes\nIfnotNone,thisisafunctioncalledforvariousevents\nframe.f_trace duringcodeexecution(thisisusedbydebuggers). Nor-\nmallyaneventistriggeredforeachnewsourceline(see\nf_trace_lines).\nSetthisattributetoFalsetodisabletriggeringatracing\nframe.f_trace_lines eventforeachsourceline.\nSet this attribute to True to allow per-opcode events\nframe.f_trace_opcodes to be requested. Note that this may lead to undefined\ninterpreter behaviour if exceptions raised by the trace\nfunctionescapetothefunctionbeingtraced.\nThecurrentlinenumberoftheframe\u2013writingtothis\nframe.f_lineno from within a trace function jumps to the given line\n(onlyforthebottom-mostframe). Adebuggercanim-\nplementaJumpcommand(akaSetNextStatement)by\nwritingtothisattribute.\nFrameobjectmethods\nFrameobjectssupportonemethod:\nframe.clear()\nThismethodclearsallreferencestolocalvariablesheldbytheframe. Also,iftheframebelongedtoagenerator,\nthegeneratorisfinalized. Thishelpsbreakreferencecyclesinvolvingframeobjects(forexamplewhencatching\nanexceptionandstoringitstracebackforlateruse).\nRuntimeErrorisraisediftheframeiscurrentlyexecutingorsuspended.\nAddedinversion3.4.\nChangedinversion3.13: AttemptingtoclearasuspendedframeraisesRuntimeError(ashasalwaysbeen\nthecaseforexecutingframes).\nTracebackobjects\nTraceback objects represent the stack trace of an exception. A traceback object is implicitly created when an ex-\nceptionoccurs,andmayalsobeexplicitlycreatedbycallingtypes.TracebackType.\nChangedinversion3.7: TracebackobjectscannowbeexplicitlyinstantiatedfromPythoncode.\nFor implicitly created tracebacks, when the search for an exception handler unwinds the execution stack, at each\nunwoundlevelatracebackobjectisinsertedinfrontofthecurrenttraceback. Whenanexceptionhandlerisentered,\nthestacktraceismadeavailabletotheprogram. (SeesectionThetrystatement.) Itisaccessibleasthethirditemof\nthetuplereturnedbysys.exc_info(),andasthe__traceback__attributeofthecaughtexception.\nWhen the program contains no suitable handler, the stack trace is written (nicely formatted) to the standard error\nstream;iftheinterpreterisinteractive,itisalsomadeavailabletotheuserassys.last_traceback.\nForexplicitlycreatedtracebacks,itisuptothecreatorofthetracebacktodeterminehowthetb_nextattributes\nshouldbelinkedtoformafullstacktrace.\nSpecialread-onlyattributes:\n3.2. Thestandardtypehierarchy 33\nThePythonLanguageReference,Release3.13.3\nPointstotheexecutionframeofthecurrentlevel.\ntraceback.tb_frame Accessing this attribute raises an auditing event\nobject.__getattr__ with arguments obj and\n\"tb_frame\".\nGivesthelinenumberwheretheexceptionoccurred\ntraceback.tb_lineno\nIndicatesthe\u201cpreciseinstruction\u201d.\ntraceback.tb_lasti\nThe line number and last instruction in the traceback may differ from the line number of its frame object if the\nexceptionoccurredinatrystatementwithnomatchingexceptclauseorwithafinallyclause.\ntraceback.tb_next\nThespecialwritableattributetb_nextisthenextlevelinthestacktrace(towardstheframewheretheex-\nceptionoccurred),orNoneifthereisnonextlevel.\nChangedinversion3.7: Thisattributeisnowwritable\nSliceobjects\nSlice objects are used to represent slices for __getitem__() methods. They are also created by the built-in\nslice()function.\nSpecial read-only attributes: start is the lower bound; stop is the upper bound; step is the step value; each is\nNoneifomitted. Theseattributescanhaveanytype.\nSliceobjectssupportonemethod:\nslice.indices(self,length)\nThis method takes a single integer argument length and computes information about the slice that the slice\nobjectwoulddescribeifappliedtoasequenceoflengthitems. Itreturnsatupleofthreeintegers;respectively\nthesearethestartandstopindicesandthesteporstridelengthoftheslice. Missingorout-of-boundsindices\narehandledinamannerconsistentwithregularslices.\nStaticmethodobjects\nStaticmethodobjectsprovideawayofdefeatingthetransformationoffunctionobjectstomethodobjectsdescribed\nabove. Astaticmethodobjectisawrapperaroundanyotherobject,usuallyauser-definedmethodobject. Whena\nstaticmethodobjectisretrievedfromaclassoraclassinstance,theobjectactuallyreturnedisthewrappedobject,\nwhichisnotsubjecttoanyfurthertransformation. Staticmethodobjectsarealsocallable. Staticmethodobjectsare\ncreatedbythebuilt-instaticmethod()constructor.\nClassmethodobjects\nAclassmethodobject,likeastaticmethodobject,isawrapperaroundanotherobjectthataltersthewayinwhich\nthatobjectisretrievedfromclassesandclassinstances. Thebehaviourofclassmethodobjectsuponsuchretrieval\nis described above, under \u201cinstance methods\u201d. Class method objects are created by the built-in classmethod()\nconstructor.\n3.3 Special method names\nAclasscanimplementcertainoperationsthatareinvokedbyspecialsyntax(suchasarithmeticoperationsorsub-\nscripting and slicing) by defining methods with special names. This is Python\u2019s approach to operator overloading,\nallowing classes to define their own behavior with respect to language operators. For instance, if a class defines a\nmethodnamed__getitem__(),andxisaninstanceofthisclass,thenx[i]isroughlyequivalenttotype(x).\n__getitem__(x, i). Except where mentioned, attempts to execute an operation raise an exception when no\nappropriatemethodisdefined(typicallyAttributeErrororTypeError).\n34 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nSettingaspecialmethodtoNoneindicatesthatthecorrespondingoperationisnotavailable. Forexample,ifaclass\nsets __iter__() to None, the class is not iterable, so calling iter() on its instances will raise a TypeError\n(withoutfallingbackto__getitem__()).2\nWhenimplementingaclassthatemulatesanybuilt-intype,itisimportantthattheemulationonlybeimplemented\ntothedegreethatitmakessensefortheobjectbeingmodelled. Forexample,somesequencesmayworkwellwith\nretrievalofindividualelements,butextractingaslicemaynotmakesense. (OneexampleofthisistheNodeList\ninterfaceintheW3C\u2019sDocumentObjectModel.)\n3.3.1 Basic customization\n[ ]\nobject.__new__(cls ,... )\nCalled to create a new instance of class cls. __new__() is a static method (special-cased so you need not\ndeclareitassuch)thattakestheclassofwhichaninstancewasrequestedasitsfirstargument. Theremaining\narguments are those passed to the object constructor expression (the call to the class). The return value of\n__new__()shouldbethenewobjectinstance(usuallyaninstanceofcls).\nTypicalimplementationscreateanewinstanceoftheclassbyinvokingthesuperclass\u2019s__new__()method\nusingsuper().__new__(cls[, ...])withappropriateargumentsandthenmodifyingthenewlycreated\ninstanceasnecessarybeforereturningit.\nIf__new__()isinvokedduringobjectconstructionanditreturnsaninstanceofcls,thenthenewinstance\u2019s\n__init__() method will be invoked like __init__(self[, ...]), where self is the new instance and\ntheremainingargumentsarethesameaswerepassedtotheobjectconstructor.\nIf __new__() does not return an instance of cls, then the new instance\u2019s __init__() method will not be\ninvoked.\n__new__() is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize\ninstancecreation. Itisalsocommonlyoverriddenincustommetaclassesinordertocustomizeclasscreation.\n[ ]\nobject.__init__(self ,... )\nCalledaftertheinstancehasbeencreated(by__new__()),butbeforeitisreturnedtothecaller. Theargu-\nmentsarethosepassedtotheclassconstructorexpression. Ifabaseclasshasan__init__()method,the\nderivedclass\u2019s__init__()method,ifany,mustexplicitlycallittoensureproperinitializationofthebase\nclasspartoftheinstance;forexample: super().__init__([args...]).\nBecause__new__()and__init__()worktogetherinconstructingobjects(__new__()tocreateit,and\n__init__() to customize it), no non-None value may be returned by __init__(); doing so will cause a\nTypeErrortoberaisedatruntime.\nobject.__del__(self)\nCalledwhentheinstanceisabouttobedestroyed. Thisisalsocalledafinalizeror(improperly)adestructor.\nIfabaseclasshasa__del__()method,thederivedclass\u2019s__del__()method,ifany,mustexplicitlycall\nittoensureproperdeletionofthebaseclasspartoftheinstance.\nItispossible(thoughnotrecommended!) forthe__del__()methodtopostponedestructionoftheinstance\nbycreatinganewreferencetoit. Thisiscalledobjectresurrection. Itisimplementation-dependentwhether\n__del__()iscalledasecondtimewhenaresurrectedobjectisabouttobedestroyed;thecurrentCPython\nimplementationonlycallsitonce.\nItisnotguaranteedthat__del__()methodsarecalledforobjectsthatstillexistwhentheinterpreterexits.\nweakref.finalizeprovidesastraightforwardwaytoregisteracleanupfunctiontobecalledwhenanobject\nisgarbagecollected.\n(cid:174) Note\ndel xdoesn\u2019tdirectlycallx.__del__()\u2014theformerdecrementsthereferencecountforxbyone,and\nthelatterisonlycalledwhenx\u2019sreferencecountreacheszero.\n2The__hash__(),__iter__(),__reversed__(),__contains__(),__class_getitem__()and__fspath__()methodshave\nspecialhandlingforthis.OtherswillstillraiseaTypeError,butmaydosobyrelyingonthebehaviorthatNoneisnotcallable.\n3.3. Specialmethodnames 35\nThePythonLanguageReference,Release3.13.3\nCPythonimplementationdetail:Itispossibleforareferencecycletopreventthereferencecountofanobject\nfromgoingtozero. Inthiscase,thecyclewillbelaterdetectedanddeletedbythecyclicgarbagecollector. A\ncommoncauseofreferencecyclesiswhenanexceptionhasbeencaughtinalocalvariable. Theframe\u2019slocals\nthen reference the exception, which references its own traceback, which references the locals of all frames\ncaughtinthetraceback.\n(cid:181) Seealso\nDocumentationforthegcmodule.\n(cid:193) Warning\nDuetotheprecariouscircumstancesunderwhich__del__()methodsareinvoked,exceptionsthatoccur\nduringtheirexecutionareignored,andawarningisprintedtosys.stderrinstead. Inparticular:\n\u2022 __del__() can be invoked when arbitrary code is being executed, including from any arbitrary\nthread. If__del__()needstotakealockorinvokeanyotherblockingresource,itmaydeadlock\nastheresourcemayalreadybetakenbythecodethatgetsinterruptedtoexecute__del__().\n\u2022 __del__()canbeexecutedduringinterpretershutdown. Asaconsequence,theglobalvariables\nitneedstoaccess(includingothermodules)mayalreadyhavebeendeletedorsettoNone. Python\nguaranteesthatglobalswhosenamebeginswithasingleunderscorearedeletedfromtheirmodule\nbeforeotherglobalsaredeleted;ifnootherreferencestosuchglobalsexist,thismayhelpinassuring\nthatimportedmodulesarestillavailableatthetimewhenthe__del__()methodiscalled.\nobject.__repr__(self)\nCalled by the repr() built-in function to compute the \u201cofficial\u201d string representation of an object. If at\nall possible, this should look like a valid Python expression that could be used to recreate an object with\nthe same value (given an appropriate environment). If this is not possible, a string of the form <...some\nuseful description...>shouldbereturned. Thereturnvaluemustbeastringobject. Ifaclassdefines\n__repr__()butnot__str__(),then__repr__()isalsousedwhenan\u201cinformal\u201dstringrepresentation\nofinstancesofthatclassisrequired.\nThisistypicallyusedfordebugging,soitisimportantthattherepresentationisinformation-richandunam-\nbiguous. Adefaultimplementationisprovidedbytheobjectclassitself.\nobject.__str__(self)\nCalledbystr(object),thedefault__format__()implementation,andthebuilt-infunctionprint(),to\ncomputethe\u201cinformal\u201dornicelyprintablestringrepresentationofanobject. Thereturnvaluemustbeastr\nobject.\nThismethoddiffersfromobject.__repr__()inthatthereisnoexpectationthat__str__()returnavalid\nPythonexpression: amoreconvenientorconciserepresentationcanbeused.\nThedefaultimplementationdefinedbythebuilt-intypeobjectcallsobject.__repr__().\nobject.__bytes__(self)\nCalledbybytestocomputeabyte-stringrepresentationofanobject. Thisshouldreturnabytesobject. The\nobjectclassitselfdoesnotprovidethismethod.\nobject.__format__(self,format_spec)\nCalledbytheformat()built-infunction,andbyextension,evaluationofformattedstringliteralsandthestr.\nformat()method, toproducea\u201cformatted\u201dstringrepresentationofanobject. Theformat_spec argument\nisastringthatcontainsadescriptionoftheformattingoptionsdesired. Theinterpretationoftheformat_spec\nargumentisuptothetypeimplementing__format__(),howevermostclasseswilleitherdelegateformatting\ntooneofthebuilt-intypes,oruseasimilarformattingoptionsyntax.\nSeeformatspecforadescriptionofthestandardformattingsyntax.\nThereturnvaluemustbeastringobject.\n36 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nThedefaultimplementationbytheobjectclassshouldbegivenanemptyformat_specstring. Itdelegatesto\n__str__().\nChanged in version 3.4: The __format__ method of object itself raises a TypeError if passed any non-\nemptystring.\nChanged in version 3.7: object.__format__(x, '') is now equivalent to str(x) rather than\nformat(str(x), '').\nobject.__lt__(self,other)\nobject.__le__(self,other)\nobject.__eq__(self,other)\nobject.__ne__(self,other)\nobject.__gt__(self,other)\nobject.__ge__(self,other)\nThese are the so-called \u201crich comparison\u201d methods. The correspondence between operator symbols and\nmethodnamesisasfollows: x<ycallsx.__lt__(y),x<=ycallsx.__le__(y),x==ycallsx.__eq__(y),\nx!=ycallsx.__ne__(y),x>ycallsx.__gt__(y),andx>=ycallsx.__ge__(y).\nArichcomparisonmethodmayreturnthesingletonNotImplementedifitdoesnotimplementtheoperation\nfor a given pair of arguments. By convention, False and True are returned for a successful comparison.\nHowever,thesemethodscanreturnanyvalue,soifthecomparisonoperatorisusedinaBooleancontext(e.g.,\nintheconditionofanifstatement),Pythonwillcallbool()onthevaluetodetermineiftheresultistrueor\nfalse.\nBy default, object implements __eq__() by using is, returning NotImplemented in the case of a\nfalse comparison: True if x is y else NotImplemented. For __ne__(), by default it delegates to\n__eq__() and inverts the result unless it is NotImplemented. There are no other implied relationships\namongthecomparisonoperatorsordefaultimplementations;forexample,thetruthof(x<y or x==y)does\nnotimplyx<=y. Toautomaticallygenerateorderingoperationsfromasinglerootoperation,seefunctools.\ntotal_ordering().\nBydefault,theobjectclassprovidesimplementationsconsistentwithValuecomparisons: equalitycompares\naccording to object identity, and order comparisons raise TypeError. Each default method may generate\ntheseresultsdirectly,butmayalsoreturnNotImplemented.\nSee the paragraph on __hash__() for some important notes on creating hashable objects which support\ncustomcomparisonoperationsandareusableasdictionarykeys.\nTherearenoswapped-argumentversionsofthesemethods(tobeusedwhentheleftargumentdoesnotsup-\nporttheoperationbuttherightargumentdoes);rather,__lt__()and__gt__()areeachother\u2019sreflection,\n__le__()and__ge__()areeachother\u2019sreflection,and__eq__()and__ne__()aretheirownreflection.\nIf theoperandsareofdifferent types, andtherightoperand\u2019s type isa director indirectsubclassoftheleft\noperand\u2019stype,thereflectedmethodoftherightoperandhaspriority,otherwisetheleftoperand\u2019smethodhas\npriority. Virtualsubclassingisnotconsidered.\nWhennoappropriatemethodreturnsanyvalueotherthanNotImplemented,the==and!=operatorswill\nfallbacktoisandis not,respectively.\nobject.__hash__(self)\nCalled by built-in function hash() and for operations on members of hashed collections including set,\nfrozenset, and dict. The __hash__() method should return an integer. The only required property\nisthatobjectswhichcompareequalhavethesamehashvalue;itisadvisedtomixtogetherthehashvaluesof\nthecomponentsoftheobjectthatalsoplayapartincomparisonofobjectsbypackingthemintoatupleand\nhashingthetuple. Example:\ndef __hash__(self):\nreturn hash((self.name, self.nick, self.color))\n3.3. Specialmethodnames 37\nThePythonLanguageReference,Release3.13.3\n(cid:174) Note\nhash() truncates the value returned from an object\u2019s custom __hash__() method to the size of a\nPy_ssize_t. This is typically 8 bytes on 64-bit builds and 4 bytes on 32-bit builds. If an object\u2019s\n__hash__() must interoperate on builds of different bit sizes, be sure to check the width on all sup-\nportedbuilds. Aneasywaytodothisiswithpython -c \"import sys; print(sys.hash_info.\nwidth)\".\nIf a class does not define an __eq__() method it should not define a __hash__() operation either; if it\ndefines__eq__()butnot__hash__(),itsinstanceswillnotbeusableasitemsinhashablecollections. Ifa\nclassdefinesmutableobjectsandimplementsan__eq__()method,itshouldnotimplement__hash__(),\nsincetheimplementationofhashablecollectionsrequiresthatakey\u2019shashvalueisimmutable(iftheobject\u2019s\nhashvaluechanges,itwillbeinthewronghashbucket).\nUser-definedclasseshave__eq__()and__hash__()methodsbydefault(inheritedfromtheobjectclass);\nwiththem,allobjectscompareunequal(exceptwiththemselves)andx.__hash__()returnsanappropriate\nvaluesuchthatx == yimpliesboththatx is yandhash(x) == hash(y).\nAclassthatoverrides__eq__()anddoesnotdefine__hash__()willhaveits__hash__()implicitlyset\ntoNone. Whenthe__hash__()methodofaclassisNone,instancesoftheclasswillraiseanappropriate\nTypeError when a program attempts to retrieve their hash value, and will also be correctly identified as\nunhashablewhencheckingisinstance(obj, collections.abc.Hashable).\nIfaclassthatoverrides__eq__()needstoretaintheimplementationof__hash__()fromaparentclass,\ntheinterpretermustbetoldthisexplicitlybysetting__hash__ = <ParentClass>.__hash__.\nIfaclassthatdoesnotoverride__eq__()wishestosuppresshashsupport, itshouldinclude__hash__ =\nNoneintheclassdefinition. Aclasswhichdefinesitsown__hash__()thatexplicitlyraisesaTypeError\nwouldbeincorrectlyidentifiedashashablebyanisinstance(obj, collections.abc.Hashable)call.\n(cid:174) Note\nBy default, the __hash__() values of str and bytes objects are \u201csalted\u201d with an unpredictable random\nvalue. AlthoughtheyremainconstantwithinanindividualPythonprocess,theyarenotpredictablebetween\nrepeatedinvocationsofPython.\nThis is intended to provide protection against a denial-of-service caused by carefully chosen inputs that\nexploittheworstcaseperformanceofadictinsertion,O(n2)complexity. Seehttp://ocert.org/advisories/\nocert-2011-003.htmlfordetails.\nChanging hash values affects the iteration order of sets. Python has never made guarantees about this\nordering(andittypicallyvariesbetween32-bitand64-bitbuilds).\nSeealsoPYTHONHASHSEED.\nChangedinversion3.3: Hashrandomizationisenabledbydefault.\nobject.__bool__(self)\nCalled to implement truth value testing and the built-in operation bool(); should return False or True.\nWhenthismethodisnotdefined,__len__()iscalled,ifitisdefined,andtheobjectisconsideredtrueifits\nresultisnonzero. Ifaclassdefinesneither__len__()nor__bool__()(whichistrueoftheobjectclass\nitself),allitsinstancesareconsideredtrue.\n3.3.2 Customizing attribute access\nThefollowingmethodscanbedefinedtocustomizethemeaningofattributeaccess(useof,assignmentto,ordeletion\nofx.name)forclassinstances.\nobject.__getattr__(self,name)\nCalledwhenthedefaultattributeaccessfailswithanAttributeError(either__getattribute__()raises\n38 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nanAttributeErrorbecausenameisnotaninstanceattributeoranattributeintheclasstreeforself;or\n__get__()ofanamepropertyraisesAttributeError). Thismethodshouldeitherreturnthe(computed)\nattributevalueorraiseanAttributeErrorexception. Theobjectclassitselfdoesnotprovidethismethod.\nNote that if the attribute is found through the normal mechanism, __getattr__() is not called. (This is\nanintentionalasymmetrybetween__getattr__()and__setattr__().) Thisisdonebothforefficiency\nreasonsandbecauseotherwise__getattr__()wouldhavenowaytoaccessotherattributesoftheinstance.\nNotethatatleastforinstancevariables,youcantaketotalcontrolbynotinsertinganyvaluesintheinstance\nattributedictionary(butinsteadinsertingtheminanotherobject). Seethe__getattribute__()method\nbelowforawaytoactuallygettotalcontroloverattributeaccess.\nobject.__getattribute__(self,name)\nCalled unconditionally to implement attribute accesses for instances of the class. If the class also de-\nfines __getattr__(), the latter will not be called unless __getattribute__() either calls it explic-\nitly or raises an AttributeError. This method should return the (computed) attribute value or raise an\nAttributeErrorexception. Inordertoavoidinfiniterecursioninthismethod, itsimplementationshould\nalwayscallthebaseclassmethodwiththesamenametoaccessanyattributesitneeds,forexample,object.\n__getattribute__(self, name).\n(cid:174) Note\nThismethodmaystillbebypassedwhenlookingupspecialmethodsastheresultofimplicitinvocationvia\nlanguagesyntaxorbuilt-infunctions. SeeSpecialmethodlookup.\nForcertainsensitiveattributeaccesses,raisesanauditingeventobject.__getattr__withargumentsobj\nandname.\nobject.__setattr__(self,name,value)\nCalledwhenanattributeassignmentisattempted. Thisiscalledinsteadofthenormalmechanism(i.e. store\nthevalueintheinstancedictionary). nameistheattributename,valueisthevaluetobeassignedtoit.\nIf__setattr__()wantstoassigntoaninstanceattribute,itshouldcallthebaseclassmethodwiththesame\nname,forexample,object.__setattr__(self, name, value).\nForcertainsensitiveattributeassignments, raisesanauditingeventobject.__setattr__witharguments\nobj,name,value.\nobject.__delattr__(self,name)\nLike__setattr__()butforattributedeletioninsteadofassignment. Thisshouldonlybeimplementedif\ndel obj.nameismeaningfulfortheobject.\nForcertainsensitiveattributedeletions,raisesanauditingeventobject.__delattr__withargumentsobj\nandname.\nobject.__dir__(self)\nCalledwhendir()iscalledontheobject. Aniterablemustbereturned. dir()convertsthereturnediterable\ntoalistandsortsit.\nCustomizingmoduleattributeaccess\nSpecial names __getattr__ and __dir__ can be also used to customize access to module attributes. The\n__getattr__ function at the module level should accept one argument which is the name of an attribute and\nreturnthecomputedvalueorraiseanAttributeError. Ifanattributeisnotfoundonamoduleobjectthroughthe\nnormal lookup, i.e. object.__getattribute__(), then __getattr__ is searched in the module __dict__\nbeforeraisinganAttributeError. Iffound,itiscalledwiththeattributenameandtheresultisreturned.\n3.3. Specialmethodnames 39\nThePythonLanguageReference,Release3.13.3\nThe__dir__functionshouldacceptnoarguments,andreturnaniterableofstringsthatrepresentsthenamesac-\ncessibleonmodule. Ifpresent,thisfunctionoverridesthestandarddir()searchonamodule.\nFora morefinegrainedcustomizationofthemodulebehavior(settingattributes, properties, etc.), onecansetthe\n__class__attributeofamoduleobjecttoasubclassoftypes.ModuleType. Forexample:\nimport sys\nfrom types import ModuleType\nclass VerboseModule(ModuleType):\ndef __repr__(self):\nreturn f'Verbose {self.__name__}'\ndef __setattr__(self, attr, value):\nprint(f'Setting {attr}...')\nsuper().__setattr__(attr, value)\nsys.modules[__name__].__class__ = VerboseModule\n(cid:174) Note\nDefining module __getattr__ and setting module __class__ only affect lookups made using the attribute\naccesssyntax\u2013directlyaccessingthemoduleglobals(whetherbycodewithinthemodule,orviaareferenceto\nthemodule\u2019sglobalsdictionary)isunaffected.\nChangedinversion3.5: __class__moduleattributeisnowwritable.\nAddedinversion3.7: __getattr__and__dir__moduleattributes.\n(cid:181) Seealso\nPEP562-Module__getattr__and__dir__\nDescribesthe__getattr__and__dir__functionsonmodules.\nImplementingDescriptors\nThefollowingmethodsonlyapplywhenaninstanceoftheclasscontainingthemethod(aso-calleddescriptorclass)\nappearsinanownerclass(thedescriptormustbeineithertheowner\u2019sclassdictionaryorintheclassdictionaryfor\noneofitsparents). Intheexamplesbelow,\u201ctheattribute\u201dreferstotheattributewhosenameisthekeyoftheproperty\nintheownerclass\u2019__dict__. Theobjectclassitselfdoesnotimplementanyoftheseprotocols.\nobject.__get__(self,instance,owner=None)\nCalledtogettheattributeoftheownerclass(classattributeaccess)orofaninstanceofthatclass(instance\nattribute access). The optional owner argument is the owner class, while instance is the instance that the\nattributewasaccessedthrough,orNonewhentheattributeisaccessedthroughtheowner.\nThismethodshouldreturnthecomputedattributevalueorraiseanAttributeErrorexception.\nPEP252specifiesthat__get__()iscallablewithoneortwoarguments. Python\u2019sownbuilt-indescriptors\nsupport this specification; however, it is likely that some third-party tools have descriptors that require both\narguments. Python\u2019sown__getattribute__()implementationalwayspassesinbothargumentswhether\ntheyarerequiredornot.\nobject.__set__(self,instance,value)\nCalledtosettheattributeonaninstanceinstanceoftheownerclasstoanewvalue,value.\nNote,adding__set__()or__delete__()changesthekindofdescriptortoa\u201cdatadescriptor\u201d. SeeIn-\nvokingDescriptorsformoredetails.\n40 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nobject.__delete__(self,instance)\nCalledtodeletetheattributeonaninstanceinstanceoftheownerclass.\nInstancesofdescriptorsmayalsohavethe__objclass__attributepresent:\nobject.__objclass__\nTheattribute__objclass__isinterpretedbytheinspectmoduleasspecifyingtheclasswherethisobject\nwas defined (setting this appropriately can assist in runtime introspection of dynamic class attributes). For\ncallables,itmayindicatethataninstanceofthegiventype(orasubclass)isexpectedorrequiredasthefirst\npositionalargument(forexample, CPythonsetsthisattributeforunboundmethodsthatareimplementedin\nC).\nInvokingDescriptors\nIngeneral,adescriptorisanobjectattributewith\u201cbindingbehavior\u201d,onewhoseattributeaccesshasbeenoverridden\nbymethodsinthedescriptorprotocol: __get__(),__set__(),and__delete__(). Ifanyofthosemethodsare\ndefinedforanobject,itissaidtobeadescriptor.\nThedefaultbehaviorforattributeaccessistoget,set,ordeletetheattributefromanobject\u2019sdictionary. Forinstance,\na.xhasalookupchainstartingwitha.__dict__['x'],thentype(a).__dict__['x'],andcontinuingthrough\nthebaseclassesoftype(a)excludingmetaclasses.\nHowever,ifthelooked-upvalueisanobjectdefiningoneofthedescriptormethods,thenPythonmayoverridethe\ndefaultbehaviorandinvokethedescriptormethodinstead. Wherethisoccursintheprecedencechaindependson\nwhichdescriptormethodsweredefinedandhowtheywerecalled.\nThestartingpointfordescriptorinvocationisabinding,a.x. Howtheargumentsareassembleddependsona:\nDirectCall\nThesimplestandleastcommoncalliswhenusercodedirectlyinvokesadescriptormethod: x.__get__(a).\nInstanceBinding\nIfbindingtoanobjectinstance,a.xistransformedintothecall: type(a).__dict__['x'].__get__(a,\ntype(a)).\nClassBinding\nIfbindingtoaclass,A.xistransformedintothecall: A.__dict__['x'].__get__(None, A).\nSuperBinding\nAdottedlookupsuchassuper(A, a).xsearchesa.__class__.__mro__forabaseclassBfollowingA\nandthenreturnsB.__dict__['x'].__get__(a, A).Ifnotadescriptor,xisreturnedunchanged.\nFor instance bindings, the precedence of descriptor invocation depends on which descriptor methods are defined.\nA descriptor can define any combination of __get__(), __set__() and __delete__(). If it does not define\n__get__(),thenaccessingtheattributewillreturnthedescriptorobjectitselfunlessthereisavalueintheobject\u2019s\ninstancedictionary. Ifthedescriptordefines__set__()and/or__delete__(),itisadatadescriptor;ifitdefines\nneither,itisanon-datadescriptor. Normally,datadescriptorsdefineboth__get__()and__set__(),whilenon-\ndata descriptors have just the __get__() method. Data descriptors with __get__() and __set__() (and/or\n__delete__())definedalwaysoverridearedefinitioninaninstancedictionary. Incontrast,non-datadescriptors\ncanbeoverriddenbyinstances.\nPythonmethods(includingthosedecoratedwith@staticmethodand@classmethod)areimplementedasnon-\ndata descriptors. Accordingly, instances can redefine and override methods. This allows individual instances to\nacquirebehaviorsthatdifferfromotherinstancesofthesameclass.\nTheproperty()functionisimplementedasadatadescriptor. Accordingly,instancescannotoverridethebehavior\nofaproperty.\n__slots__\n__slots__ allow us to explicitly declare data members (like properties) and deny the creation of __dict__ and\n__weakref__(unlessexplicitlydeclaredin__slots__oravailableinaparent.)\nThespacesavedoverusing__dict__canbesignificant. Attributelookupspeedcanbesignificantlyimprovedas\nwell.\n3.3. Specialmethodnames 41\nThePythonLanguageReference,Release3.13.3\nobject.__slots__\nThisclassvariablecanbeassignedastring, iterable, orsequenceofstringswithvariablenamesusedbyin-\nstances. __slots__reservesspaceforthedeclaredvariablesandpreventstheautomaticcreationof__dict__\nand__weakref__foreachinstance.\nNotesonusing__slots__:\n\u2022 When inheriting from a class without __slots__, the __dict__ and __weakref__ attribute of the instances\nwillalwaysbeaccessible.\n\u2022 Withouta__dict__variable,instancescannotbeassignednewvariablesnotlistedinthe__slots__definition.\nAttempts to assign to an unlisted variable name raises AttributeError. If dynamic assignment of new\nvariablesisdesired,thenadd'__dict__'tothesequenceofstringsinthe__slots__declaration.\n\u2022 Without a __weakref__ variable for each instance, classes defining __slots__ do not support weak\nreferences to its instances. If weak reference support is needed, then add '__weakref__' to the se-\nquenceofstringsinthe__slots__declaration.\n\u2022 __slots__areimplementedattheclasslevelbycreatingdescriptorsforeachvariablename. Asaresult,class\nattributescannotbeusedtosetdefaultvaluesforinstancevariablesdefinedby__slots__;otherwise,theclass\nattributewouldoverwritethedescriptorassignment.\n\u2022 Theactionofa__slots__declarationisnotlimitedtotheclasswhereitisdefined. __slots__declaredinparents\nareavailableinchildclasses. However, instancesofachildsubclasswillgeta__dict__and__weakref__\nunlessthesubclassalsodefines__slots__(whichshouldonlycontainnamesofanyadditionalslots).\n\u2022 If a class defines a slot also defined in a base class, the instance variable defined by the base class slot is\ninaccessible(exceptbyretrievingitsdescriptordirectlyfromthebaseclass). Thisrendersthemeaningofthe\nprogramundefined. Inthefuture,acheckmaybeaddedtopreventthis.\n\u2022 TypeErrorwillberaisedifnonempty__slots__aredefinedforaclassderivedfroma\"variable-length\"\nbuilt-in typesuchasint,bytes,andtuple.\n\u2022 Anynon-stringiterablemaybeassignedto__slots__.\n\u2022 Ifadictionaryisusedtoassign__slots__,thedictionarykeyswillbeusedastheslotnames. Thevaluesof\nthedictionarycanbeusedtoprovideper-attributedocstringsthatwillberecognisedbyinspect.getdoc()\nanddisplayedintheoutputofhelp().\n\u2022 __class__assignmentworksonlyifbothclasseshavethesame__slots__.\n\u2022 Multipleinheritancewithmultipleslottedparentclassescanbeused,butonlyoneparentisallowedtohave\nattributescreatedbyslots(theotherbasesmusthaveemptyslotlayouts)-violationsraiseTypeError.\n\u2022 Ifaniterator isusedfor__slots__thenadescriptor iscreatedforeachoftheiterator\u2019svalues. However,the\n__slots__attributewillbeanemptyiterator.\n3.3.3 Customizing class creation\nWhenevera classinherits fromanother class, __init_subclass__() iscalled onthe parentclass. This way, it\nispossibletowriteclasseswhichchangethebehaviorofsubclasses. Thisiscloselyrelatedtoclassdecorators,but\nwhereclassdecoratorsonlyaffectthespecificclassthey\u2019reappliedto,__init_subclass__solelyappliestofuture\nsubclassesoftheclassdefiningthemethod.\nclassmethod object.__init_subclass__(cls)\nThismethodiscalledwheneverthecontainingclassissubclassed. clsisthenthenewsubclass. Ifdefinedasa\nnormalinstancemethod,thismethodisimplicitlyconvertedtoaclassmethod.\nKeyword arguments which are given to a new class are passed to the parent class\u2019s __init_subclass__.\nFor compatibility with other classes using __init_subclass__, one should take out the needed keyword\nargumentsandpasstheothersovertothebaseclass,asin:\nclass Philosopher:\ndef __init_subclass__(cls, /, default_name, **kwargs):\nsuper().__init_subclass__(**kwargs)\n(continuesonnextpage)\n42 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\ncls.default_name = default_name\nclass AustralianPhilosopher(Philosopher, default_name=\"Bruce\"):\npass\nThe default implementation object.__init_subclass__ does nothing, but raises an error if it is called\nwithanyarguments.\n(cid:174) Note\nThe metaclass hint metaclass is consumed by the rest of the type machinery, and is never passed to\n__init_subclass__ implementations. The actual metaclass (rather than the explicit hint) can be ac-\ncessedastype(cls).\nAddedinversion3.6.\nWhen a class is created, type.__new__() scans the class variables and makes callbacks to those with a\n__set_name__()hook.\nobject.__set_name__(self,owner,name)\nAutomaticallycalledatthetimetheowningclassowneriscreated. Theobjecthasbeenassignedtonamein\nthatclass:\nclass A:\nx = C() # Automatically calls: x.__set_name__(A, 'x')\nIftheclassvariableisassignedaftertheclassiscreated,__set_name__()willnotbecalledautomatically.\nIfneeded,__set_name__()canbecalleddirectly:\nclass A:\npass\nc = C()\nA.x = c # The hook is not called\nc.__set_name__(A, 'x') # Manually invoke the hook\nSeeCreatingtheclassobjectformoredetails.\nAddedinversion3.6.\nMetaclasses\nBydefault,classesareconstructedusingtype(). Theclassbodyisexecutedinanewnamespaceandtheclassname\nisboundlocallytotheresultoftype(name, bases, namespace).\nTheclasscreationprocesscanbecustomizedbypassingthemetaclasskeywordargumentintheclassdefinition\nline,orbyinheritingfromanexistingclassthatincludedsuchanargument. Inthefollowingexample,bothMyClass\nandMySubclassareinstancesofMeta:\nclass Meta(type):\npass\nclass MyClass(metaclass=Meta):\npass\nclass MySubclass(MyClass):\npass\n3.3. Specialmethodnames 43\nThePythonLanguageReference,Release3.13.3\nAnyotherkeywordargumentsthatarespecifiedintheclassdefinitionarepassedthroughtoallmetaclassoperations\ndescribedbelow.\nWhenaclassdefinitionisexecuted,thefollowingstepsoccur:\n\u2022 MROentriesareresolved;\n\u2022 theappropriatemetaclassisdetermined;\n\u2022 theclassnamespaceisprepared;\n\u2022 theclassbodyisexecuted;\n\u2022 theclassobjectiscreated.\nResolvingMROentries\nobject.__mro_entries__(self,bases)\nIfabasethatappearsinaclassdefinitionisnotaninstanceoftype,thenan__mro_entries__()method\nissearchedonthebase. Ifan__mro_entries__()methodisfound,thebaseissubstitutedwiththeresult\nofacallto__mro_entries__()whencreatingtheclass. Themethodiscalledwiththeoriginalbasestuple\npassed to the bases parameter, and must return a tuple of classes thatwill be used insteadof the base. The\nreturnedtuplemaybeempty: inthesecases,theoriginalbaseisignored.\n(cid:181) Seealso\ntypes.resolve_bases()\nDynamicallyresolvebasesthatarenotinstancesoftype.\ntypes.get_original_bases()\nRetrieveaclass\u2019s\u201coriginalbases\u201dpriortomodificationsby__mro_entries__().\nPEP560\nCoresupportfortypingmoduleandgenerictypes.\nDeterminingtheappropriatemetaclass\nTheappropriatemetaclassforaclassdefinitionisdeterminedasfollows:\n\u2022 ifnobasesandnoexplicitmetaclassaregiven,thentype()isused;\n\u2022 ifanexplicitmetaclassisgivenanditisnotaninstanceoftype(),thenitisuseddirectlyasthemetaclass;\n\u2022 ifaninstanceoftype()isgivenastheexplicitmetaclass,orbasesaredefined,thenthemostderivedmetaclass\nisused.\nThe most derived metaclass is selected from the explicitly specified metaclass (if any) and the metaclasses (i.e.\ntype(cls)) of all specified base classes. The most derived metaclass is one which is a subtype of all of these\ncandidate metaclasses. If none of the candidate metaclasses meets that criterion, then the class definition will fail\nwithTypeError.\nPreparingtheclassnamespace\nOnce the appropriate metaclass has been identified, then the class namespace is prepared. If the metaclass has\na__prepare__attribute,itiscalledasnamespace = metaclass.__prepare__(name, bases, **kwds)\n(wheretheadditionalkeywordarguments,ifany,comefromtheclassdefinition). The__prepare__methodshould\nbeimplementedasaclassmethod. Thenamespacereturnedby__prepare__ispassedinto__new__,butwhen\nthefinalclassobjectiscreatedthenamespaceiscopiedintoanewdict.\nIfthemetaclasshasno__prepare__attribute,thentheclassnamespaceisinitialisedasanemptyorderedmapping.\n(cid:181) Seealso\n44 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nPEP3115-MetaclassesinPython3000\nIntroducedthe__prepare__namespacehook\nExecutingtheclassbody\nTheclassbodyisexecuted(approximately)asexec(body, globals(), namespace). Thekeydifferencefrom\na normal call to exec() is that lexical scoping allows the class body (including any methods) to reference names\nfromthecurrentandouterscopeswhentheclassdefinitionoccursinsideafunction.\nHowever,evenwhentheclassdefinitionoccursinsidethefunction,methodsdefinedinsidetheclassstillcannotsee\nnamesdefinedattheclassscope. Classvariablesmustbeaccessedthroughthefirstparameterofinstanceorclass\nmethods,orthroughtheimplicitlexicallyscoped__class__referencedescribedinthenextsection.\nCreatingtheclassobject\nOnce the class namespace has been populated by executing the class body, the class object is created by calling\nmetaclass(name, bases, namespace, **kwds)(theadditionalkeywordspassedherearethesameasthose\npassedto__prepare__).\nThisclassobjectistheonethatwillbereferencedbythezero-argumentformofsuper(). __class__isanimplicit\nclosurereferencecreatedbythecompilerifanymethodsinaclassbodyrefertoeither__class__orsuper. This\nallows the zero argument form of super() to correctly identify the class being defined based on lexical scoping,\nwhiletheclassorinstancethatwasusedtomakethecurrentcallisidentifiedbasedonthefirstargumentpassedto\nthemethod.\nCPython implementation detail: In CPython 3.6 and later, the __class__ cell is passed to the metaclass as a\n__classcell__entryintheclassnamespace. Ifpresent,thismustbepropagateduptothetype.__new__call\ninorderfortheclasstobeinitialisedcorrectly. FailingtodosowillresultinaRuntimeErrorinPython3.8.\nWhenusingthedefaultmetaclasstype,oranymetaclassthatultimatelycallstype.__new__,thefollowingaddi-\ntionalcustomizationstepsareinvokedaftercreatingtheclassobject:\n1) The type.__new__ method collects all of the attributes in the class namespace that define a\n__set_name__()method;\n2) Those__set_name__methodsarecalledwiththeclassbeingdefinedandtheassignednameofthatparticular\nattribute;\n3) The__init_subclass__()hookiscalledontheimmediateparentofthenewclassinitsmethodresolution\norder.\nAftertheclassobjectiscreated,itispassedtotheclassdecoratorsincludedintheclassdefinition(ifany)andthe\nresultingobjectisboundinthelocalnamespaceasthedefinedclass.\nWhenanewclassiscreatedbytype.__new__,theobjectprovidedasthenamespaceparameteriscopiedtoanew\norderedmappingandtheoriginalobjectisdiscarded. Thenewcopyiswrappedinaread-onlyproxy,whichbecomes\nthe__dict__attributeoftheclassobject.\n(cid:181) Seealso\nPEP3135-Newsuper\nDescribestheimplicit__class__closurereference\nUsesformetaclasses\nThe potential uses for metaclasses are boundless. Some ideas that have been explored include enum, logging, in-\nterface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource\nlocking/synchronization.\n3.3. Specialmethodnames 45\nThePythonLanguageReference,Release3.13.3\n3.3.4 Customizing instance and subclass checks\nThefollowingmethodsareusedtooverridethedefaultbehavioroftheisinstance()andissubclass()built-in\nfunctions.\nInparticular,themetaclassabc.ABCMetaimplementsthesemethodsinordertoallowtheadditionofAbstractBase\nClasses(ABCs)as\u201cvirtualbaseclasses\u201dtoanyclassortype(includingbuilt-intypes),includingotherABCs.\ntype.__instancecheck__(self,instance)\nReturntrueifinstanceshouldbeconsidereda(directorindirect)instanceofclass. Ifdefined,calledtoimple-\nmentisinstance(instance, class).\ntype.__subclasscheck__(self,subclass)\nReturntrueifsubclassshouldbeconsidereda(directorindirect)subclassofclass. Ifdefined,calledtoimple-\nmentissubclass(subclass, class).\nNotethatthesemethodsarelookeduponthetype(metaclass)ofaclass. Theycannotbedefinedasclassmethodsin\ntheactualclass. Thisisconsistentwiththelookupofspecialmethodsthatarecalledoninstances,onlyinthiscase\ntheinstanceisitselfaclass.\n(cid:181) Seealso\nPEP3119-IntroducingAbstractBaseClasses\nIncludes the specification for customizing isinstance() and issubclass() behavior through\n__instancecheck__()and__subclasscheck__(),withmotivationforthisfunctionalityinthecon-\ntextofaddingAbstractBaseClasses(seetheabcmodule)tothelanguage.\n3.3.5 Emulating generic types\nWhenusingtypeannotations,itisoftenusefultoparameterizeagenerictypeusingPython\u2019ssquare-bracketsnotation.\nForexample,theannotationlist[int]mightbeusedtosignifyalistinwhichalltheelementsareoftypeint.\n(cid:181) Seealso\nPEP484-TypeHints\nIntroducingPython\u2019sframeworkfortypeannotations\nGenericAliasTypes\nDocumentationforobjectsrepresentingparameterizedgenericclasses\nGenerics,user-definedgenericsandtyping.Generic\nDocumentationonhowtoimplementgenericclassesthatcanbeparameterizedatruntimeandunderstood\nbystatictype-checkers.\nAclasscangenerallyonlybeparameterizedifitdefinesthespecialclassmethod__class_getitem__().\nclassmethod object.__class_getitem__(cls,key)\nReturnanobjectrepresentingthespecializationofagenericclassbytypeargumentsfoundinkey.\nWhendefinedonaclass,__class_getitem__()isautomaticallyaclassmethod. Assuch,thereisnoneed\nforittobedecoratedwith@classmethodwhenitisdefined.\nThepurposeof__class_getitem__\nThepurposeof__class_getitem__()istoallowruntimeparameterizationofstandard-librarygenericclassesin\nordertomoreeasilyapplytypehintstotheseclasses.\nToimplementcustomgenericclassesthatcanbeparameterizedatruntimeandunderstoodbystatictype-checkers,\nusersshouldeitherinheritfromastandardlibraryclassthatalreadyimplements__class_getitem__(),orinherit\nfromtyping.Generic,whichhasitsownimplementationof__class_getitem__().\n46 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nCustomimplementationsof__class_getitem__()onclassesdefinedoutsideofthestandardlibrarymaynotbe\nunderstoodbythird-partytype-checkerssuchasmypy. Using__class_getitem__()onanyclassforpurposes\notherthantypehintingisdiscouraged.\n__class_getitem__versus__getitem__\nUsually,thesubscriptionofanobjectusingsquarebracketswillcallthe__getitem__()instancemethoddefinedon\ntheobject\u2019sclass. However,iftheobjectbeingsubscribedisitselfaclass,theclassmethod__class_getitem__()\nmaybecalledinstead. __class_getitem__()shouldreturnaGenericAliasobjectifitisproperlydefined.\nPresentedwiththeexpressionobj[x],thePythoninterpreterfollowssomethinglikethefollowingprocesstodecide\nwhether__getitem__()or__class_getitem__()shouldbecalled:\nfrom inspect import isclass\ndef subscribe(obj, x):\n\"\"\"Return the result of the expression 'obj[x]'\"\"\"\nclass_of_obj = type(obj)\n# If the class of obj defines __getitem__,\n# call class_of_obj.__getitem__(obj, x)\nif hasattr(class_of_obj, '__getitem__'):\nreturn class_of_obj.__getitem__(obj, x)\n# Else, if obj is a class and defines __class_getitem__,\n# call obj.__class_getitem__(x)\nelif isclass(obj) and hasattr(obj, '__class_getitem__'):\nreturn obj.__class_getitem__(x)\n# Else, raise an exception\nelse:\nraise TypeError(\nf\"'{class_of_obj.__name__}' object is not subscriptable\"\n)\nInPython,allclassesarethemselvesinstancesofotherclasses. Theclassofaclassisknownasthatclass\u2019smetaclass,\nandmostclasseshavethetypeclassastheirmetaclass. typedoesnotdefine__getitem__(),meaningthatexpres-\nsionssuchaslist[int],dict[str, float]andtuple[str, bytes]allresultin__class_getitem__()\nbeingcalled:\n>>> # list has class \"type\" as its metaclass, like most classes:\n>>> type(list)\n<class 'type'>\n>>> type(dict) == type(list) == type(tuple) == type(str) == type(bytes)\nTrue\n>>> # \"list[int]\" calls \"list.__class_getitem__(int)\"\n>>> list[int]\nlist[int]\n>>> # list.__class_getitem__ returns a GenericAlias object:\n>>> type(list[int])\n<class 'types.GenericAlias'>\nHowever,ifaclasshasacustommetaclassthatdefines__getitem__(),subscribingtheclassmayresultindifferent\nbehaviour. Anexampleofthiscanbefoundintheenummodule:\n>>> from enum import Enum\n>>> class Menu(Enum):\n... \"\"\"A breakfast menu\"\"\"\n(continuesonnextpage)\n3.3. Specialmethodnames 47\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n... SPAM = 'spam'\n... BACON = 'bacon'\n...\n>>> # Enum classes have a custom metaclass:\n>>> type(Menu)\n<class 'enum.EnumMeta'>\n>>> # EnumMeta defines __getitem__,\n>>> # so __class_getitem__ is not called,\n>>> # and the result is not a GenericAlias object:\n>>> Menu['SPAM']\n<Menu.SPAM: 'spam'>\n>>> type(Menu['SPAM'])\n<enum 'Menu'>\n(cid:181) Seealso\nPEP560-CoreSupportfortypingmoduleandgenerictypes\nIntroducing __class_getitem__(), and outlining when a subscription results in\n__class_getitem__()beingcalledinsteadof__getitem__()\n3.3.6 Emulating callable objects\n[ ]\nobject.__call__(self ,args... )\nCalledwhentheinstanceis\u201ccalled\u201dasafunction;ifthismethodisdefined,x(arg1, arg2, ...)roughly\ntranslatestotype(x).__call__(x, arg1, ...). Theobjectclassitselfdoesnotprovidethismethod.\n3.3.7 Emulating container types\nThefollowingmethodscanbedefinedtoimplementcontainerobjects. Noneofthemareprovidedbytheobject\nclass itself. Containers usually are sequences (such as lists or tuples) or mappings (like dictionaries), but can\nrepresent other containers as well. The first set of methods is used either to emulate a sequence or to emulate a\nmapping; thedifferenceisthatforasequence,theallowablekeysshouldbetheintegersk forwhich0 <= k < N\nwhere N is the length of the sequence, or slice objects, which define a range of items. It is also recommended\nthat mappings provide the methods keys(), values(), items(), get(), clear(), setdefault(), pop(),\npopitem(), copy(), and update() behaving similar to those for Python\u2019s standard dictionary objects. The\ncollections.abc module provides a MutableMapping abstract base class to help create those methods from\na base set of __getitem__(), __setitem__(), __delitem__(), and keys(). Mutable sequences should\nprovide methods append(), count(), index(), extend(), insert(), pop(), remove(), reverse() and\nsort(),likePythonstandardlistobjects. Finally,sequencetypesshouldimplementaddition(meaningconcate-\nnation)andmultiplication(meaningrepetition)bydefiningthemethods__add__(),__radd__(),__iadd__(),\n__mul__(), __rmul__() and __imul__() described below; they should not define other numerical operators.\nItisrecommendedthatbothmappingsandsequencesimplementthe__contains__()methodtoallowefficient\nuseoftheinoperator;formappings,inshouldsearchthemapping\u2019skeys;forsequences,itshouldsearchthrough\nthe values. It is further recommended that both mappings and sequences implement the __iter__() method to\nallowefficientiterationthroughthecontainer;formappings,__iter__()shoulditeratethroughtheobject\u2019skeys;\nforsequences,itshoulditeratethroughthevalues.\nobject.__len__(self)\nCalledtoimplementthebuilt-infunctionlen(). Shouldreturnthelengthoftheobject,aninteger>=0. Also,\nanobjectthatdoesn\u2019tdefinea__bool__()methodandwhose__len__()methodreturnszeroisconsidered\ntobefalseinaBooleancontext.\nCPython implementation detail: In CPython, the length is required to be at most sys.maxsize. If the\nlengthislargerthansys.maxsizesomefeatures(suchaslen())mayraiseOverflowError. Toprevent\nraisingOverflowErrorbytruthvaluetesting,anobjectmustdefinea__bool__()method.\n48 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nobject.__length_hint__(self)\nCalledtoimplementoperator.length_hint(). Shouldreturnanestimatedlengthfortheobject(which\nmaybegreaterorlessthantheactuallength). Thelengthmustbeaninteger>=0. Thereturnvaluemayalso\nbeNotImplemented,whichistreatedthesameasifthe__length_hint__methoddidn\u2019texistatall. This\nmethodispurelyanoptimizationandisneverrequiredforcorrectness.\nAddedinversion3.4.\n(cid:174) Note\nSlicingisdoneexclusivelywiththefollowingthreemethods. Acalllike\na[1:2] = b\nistranslatedto\na[slice(1, 2, None)] = b\nandsoforth. MissingsliceitemsarealwaysfilledinwithNone.\nobject.__getitem__(self,key)\nCalled to implement evaluation of self[key]. For sequence types, the accepted keys should be integers.\nOptionally,theymaysupportsliceobjectsaswell. Negativeindexsupportisalsooptional. Ifkeyisofan\ninappropriate type, TypeError may be raised; if key is a value outside the set of indexes for the sequence\n(afteranyspecialinterpretationofnegativevalues),IndexErrorshouldberaised. Formappingtypes,ifkey\nismissing(notinthecontainer),KeyErrorshouldberaised.\n(cid:174) Note\nfor loopsexpectthatanIndexErrorwillberaisedforillegalindexestoallowproperdetectionofthe\nendofthesequence.\n(cid:174) Note\nWhen subscripting a class, the special class method __class_getitem__() may be called instead of\n__getitem__(). See__class_getitem__versus__getitem__formoredetails.\nobject.__setitem__(self,key,value)\nCalled to implement assignment to self[key]. Same note as for __getitem__(). This should only be\nimplementedformappingsiftheobjectssupportchangestothevaluesforkeys,orifnewkeyscanbeadded,\norforsequencesifelementscanbereplaced. Thesameexceptionsshouldberaisedforimproperkeyvalues\nasforthe__getitem__()method.\nobject.__delitem__(self,key)\nCalledtoimplementdeletionofself[key]. Samenoteasfor__getitem__(). Thisshouldonlybeim-\nplementedformappingsiftheobjectssupportremovalofkeys,orforsequencesifelementscanberemoved\nfromthesequence. Thesameexceptionsshouldberaisedforimproperkeyvaluesasforthe__getitem__()\nmethod.\nobject.__missing__(self,key)\nCalledbydict.__getitem__()toimplementself[key]fordictsubclasseswhenkeyisnotinthedictio-\nnary.\nobject.__iter__(self)\nThismethodiscalledwhenaniterator isrequiredforacontainer. Thismethodshouldreturnanewiterator\nobjectthatcaniterateoveralltheobjectsinthecontainer. Formappings,itshoulditerateoverthekeysofthe\ncontainer.\n3.3. Specialmethodnames 49\nThePythonLanguageReference,Release3.13.3\nobject.__reversed__(self)\nCalled(ifpresent)bythereversed()built-intoimplementreverseiteration. Itshouldreturnanewiterator\nobjectthatiteratesoveralltheobjectsinthecontainerinreverseorder.\nIfthe__reversed__()methodisnotprovided,thereversed()built-inwillfallbacktousingthesequence\nprotocol(__len__()and__getitem__()). Objectsthatsupportthesequenceprotocolshouldonlyprovide\n__reversed__() if they can provide an implementation that is more efficient than the one provided by\nreversed().\nThe membership test operators (in and not in) are normally implemented as an iteration through a container.\nHowever, container objects can supply the following special method with a more efficient implementation, which\nalsodoesnotrequiretheobjectbeiterable.\nobject.__contains__(self,item)\nCalled to implement membership test operators. Should return true if item is in self, false otherwise. For\nmappingobjects,thisshouldconsiderthekeysofthemappingratherthanthevaluesorthekey-itempairs.\nFor objects that don\u2019t define __contains__(), the membership test first tries iteration via __iter__(),\nthentheoldsequenceiterationprotocolvia__getitem__(),seethissectioninthelanguagereference.\n3.3.8 Emulating numeric types\nThefollowingmethodscanbedefinedtoemulatenumericobjects. Methodscorrespondingtooperationsthatarenot\nsupportedbytheparticularkindofnumberimplemented(e.g.,bitwiseoperationsfornon-integralnumbers)should\nbeleftundefined.\nobject.__add__(self,other)\nobject.__sub__(self,other)\nobject.__mul__(self,other)\nobject.__matmul__(self,other)\nobject.__truediv__(self,other)\nobject.__floordiv__(self,other)\nobject.__mod__(self,other)\nobject.__divmod__(self,other)\n[ ]\nobject.__pow__(self,other ,modulo )\nobject.__lshift__(self,other)\nobject.__rshift__(self,other)\nobject.__and__(self,other)\nobject.__xor__(self,other)\nobject.__or__(self,other)\nThese methods are called to implement the binary arithmetic operations (+, -, *, @, /, //, %, divmod(),\npow(),**,<<,>>,&,^,|). Forinstance,toevaluatetheexpressionx + y,wherexisaninstanceofaclass\nthathasan__add__()method,type(x).__add__(x, y)iscalled. The__divmod__()methodshould\nbetheequivalenttousing__floordiv__()and__mod__();itshouldnotberelatedto__truediv__().\nNote that __pow__() should be defined to accept an optional third argument if the ternary version of the\nbuilt-inpow()functionistobesupported.\nIf one of those methods does not support the operation with the supplied arguments, it should return\nNotImplemented.\nobject.__radd__(self,other)\nobject.__rsub__(self,other)\nobject.__rmul__(self,other)\nobject.__rmatmul__(self,other)\nobject.__rtruediv__(self,other)\nobject.__rfloordiv__(self,other)\n50 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nobject.__rmod__(self,other)\nobject.__rdivmod__(self,other)\n[ ]\nobject.__rpow__(self,other ,modulo )\nobject.__rlshift__(self,other)\nobject.__rrshift__(self,other)\nobject.__rand__(self,other)\nobject.__rxor__(self,other)\nobject.__ror__(self,other)\nThese methods are called to implement the binary arithmetic operations (+, -, *, @, /, //, %, divmod(),\npow(), **, <<, >>, &, ^, |) with reflected (swapped) operands. These functions are only called if the left\noperanddoesnotsupportthecorrespondingoperation3andtheoperandsareofdifferenttypes.4 Forinstance,\ntoevaluatetheexpressionx - y,whereyisaninstanceofaclassthathasan__rsub__()method,type(y).\n__rsub__(y, x)iscallediftype(x).__sub__(x, y)returnsNotImplemented.\nNotethatternarypow()willnottrycalling__rpow__()(thecoercionruleswouldbecometoocomplicated).\n(cid:174) Note\nIftherightoperand\u2019stypeisasubclassoftheleftoperand\u2019stypeandthatsubclassprovidesadifferentim-\nplementationofthereflectedmethodfortheoperation,thismethodwillbecalledbeforetheleftoperand\u2019s\nnon-reflectedmethod. Thisbehaviorallowssubclassestooverridetheirancestors\u2019operations.\nobject.__iadd__(self,other)\nobject.__isub__(self,other)\nobject.__imul__(self,other)\nobject.__imatmul__(self,other)\nobject.__itruediv__(self,other)\nobject.__ifloordiv__(self,other)\nobject.__imod__(self,other)\n[ ]\nobject.__ipow__(self,other ,modulo )\nobject.__ilshift__(self,other)\nobject.__irshift__(self,other)\nobject.__iand__(self,other)\nobject.__ixor__(self,other)\nobject.__ior__(self,other)\nThesemethodsarecalledtoimplementtheaugmentedarithmeticassignments(+=,-=,*=,@=,/=,//=,%=,\n**=,<<=,>>=,&=,^=,|=). Thesemethodsshouldattempttodotheoperationin-place(modifyingself)and\nreturntheresult(whichcouldbe,butdoesnothavetobe,self). Ifaspecificmethodisnotdefined,orifthat\nmethodreturnsNotImplemented,theaugmentedassignmentfallsbacktothenormalmethods. Forinstance,\nifx isaninstanceofaclasswithan__iadd__()method, x += yisequivalenttox = x.__iadd__(y)\n. If__iadd__()doesnotexist,orifx.__iadd__(y)returnsNotImplemented,x.__add__(y)andy.\n__radd__(x)areconsidered,aswiththeevaluationofx + y. Incertainsituations,augmentedassignment\ncanresultinunexpectederrors(seefaq-augmented-assignment-tuple-error),butthisbehaviorisinfactpartof\nthedatamodel.\nobject.__neg__(self)\nobject.__pos__(self)\nobject.__abs__(self)\n3\u201cDoesnotsupport\u201dheremeansthattheclasshasnosuchmethod,orthemethodreturnsNotImplemented.DonotsetthemethodtoNone\nifyouwanttoforcefallbacktotherightoperand\u2019sreflectedmethod\u2014thatwillinsteadhavetheoppositeeffectofexplicitlyblockingsuchfallback.\n4Foroperandsofthesametype,itisassumedthatifthenon-reflectedmethod\u2013suchas__add__()\u2013failsthentheoveralloperationisnot\nsupported,whichiswhythereflectedmethodisnotcalled.\n3.3. Specialmethodnames 51\nThePythonLanguageReference,Release3.13.3\nobject.__invert__(self)\nCalledtoimplementtheunaryarithmeticoperations(-,+,abs()and~).\nobject.__complex__(self)\nobject.__int__(self)\nobject.__float__(self)\nCalledtoimplementthebuilt-infunctionscomplex(), int()andfloat(). Shouldreturnavalueofthe\nappropriatetype.\nobject.__index__(self)\nCalled to implement operator.index(), and whenever Python needs to losslessly convert the numeric\nobjecttoanintegerobject(suchasinslicing,orinthebuilt-inbin(),hex()andoct()functions). Presence\nofthismethodindicatesthatthenumericobjectisanintegertype. Mustreturnaninteger.\nIf __int__(), __float__() and __complex__() are not defined then corresponding built-in functions\nint(),float()andcomplex()fallbackto__index__().\n[ ]\nobject.__round__(self ,ndigits )\nobject.__trunc__(self)\nobject.__floor__(self)\nobject.__ceil__(self)\nCalled to implement the built-in function round() and math functions trunc(), floor() and ceil().\nUnlessndigitsispassedto__round__()allthesemethodsshouldreturnthevalueoftheobjecttruncatedto\nanIntegral(typicallyanint).\nThebuilt-infunctionint()fallsbackto__trunc__()ifneither__int__()nor__index__()isdefined.\nChangedinversion3.11: Thedelegationofint()to__trunc__()isdeprecated.\n3.3.9 With Statement Context Managers\nAcontextmanagerisanobjectthatdefinestheruntimecontexttobeestablishedwhenexecutingawithstatement.\nThecontextmanagerhandlestheentryinto,andtheexitfrom,thedesiredruntimecontextfortheexecutionofthe\nblock of code. Context managers are normally invoked using the with statement (described in section The with\nstatement),butcanalsobeusedbydirectlyinvokingtheirmethods.\nTypicalusesofcontextmanagersincludesavingandrestoringvariouskindsofglobalstate,lockingandunlocking\nresources,closingopenedfiles,etc.\nFormoreinformationoncontextmanagers,seetypecontextmanager. Theobjectclassitselfdoesnotprovidethe\ncontextmanagermethods.\nobject.__enter__(self)\nEntertheruntimecontextrelatedtothisobject. Thewithstatementwillbindthismethod\u2019sreturnvalueto\nthetarget(s)specifiedintheasclauseofthestatement,ifany.\nobject.__exit__(self,exc_type,exc_value,traceback)\nExittheruntimecontextrelatedtothisobject. Theparametersdescribetheexceptionthatcausedthecontext\ntobeexited. Ifthecontextwasexitedwithoutanexception,allthreeargumentswillbeNone.\nIfanexceptionissupplied,andthemethodwishestosuppresstheexception(i.e.,preventitfrombeingprop-\nagated),itshouldreturnatruevalue. Otherwise,theexceptionwillbeprocessednormallyuponexitfromthis\nmethod.\nNotethat__exit__()methodsshouldnotreraisethepassed-inexception;thisisthecaller\u2019sresponsibility.\n(cid:181) Seealso\nPEP343-The\u201cwith\u201dstatement\nThespecification,background,andexamplesforthePythonwithstatement.\n52 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\n3.3.10 Customizing positional arguments in class pattern matching\nWhen using a class name in a pattern, positional arguments in the pattern are not allowed by default, i.e. case\nMyClass(x, y)istypicallyinvalidwithoutspecialsupportinMyClass. Tobeabletousethatkindofpattern,the\nclassneedstodefinea__match_args__attribute.\nobject.__match_args__\nThisclassvariablecanbeassignedatupleofstrings. Whenthisclassisusedinaclasspatternwithpositional\narguments,eachpositionalargumentwillbeconvertedintoakeywordargument,usingthecorrespondingvalue\nin__match_args__asthekeyword. Theabsenceofthisattributeisequivalenttosettingitto().\nFor example, if MyClass.__match_args__ is (\"left\", \"center\", \"right\") that means that case\nMyClass(x, y) is equivalent to case MyClass(left=x, center=y). Note that the number of arguments\ninthepatternmustbesmallerthanorequaltothenumberofelementsin__match_args__;ifitislarger,thepattern\nmatchattemptwillraiseaTypeError.\nAddedinversion3.10.\n(cid:181) Seealso\nPEP634-StructuralPatternMatching\nThespecificationforthePythonmatchstatement.\n3.3.11 Emulating buffer types\nThebufferprotocolprovidesawayforPythonobjectstoexposeefficientaccesstoalow-levelmemoryarray. This\nprotocol is implemented by builtin types such as bytes and memoryview, and third-party libraries may define\nadditionalbuffertypes.\nWhilebuffertypesareusuallyimplementedinC,itisalsopossibletoimplementtheprotocolinPython.\nobject.__buffer__(self,flags)\nCalledwhenabufferisrequestedfromself(forexample,bythememoryviewconstructor). Theflagsargument\nisanintegerrepresentingthekindofbufferrequested,affectingforexamplewhetherthereturnedbufferisread-\nonlyorwritable. inspect.BufferFlagsprovidesaconvenientwaytointerprettheflags. Themethodmust\nreturnamemoryviewobject.\nobject.__release_buffer__(self,buffer)\nCalledwhenabufferisnolongerneeded. Thebufferargumentisamemoryviewobjectthatwaspreviously\nreturnedby__buffer__(). Themethodmustreleaseanyresourcesassociatedwiththebuffer. Thismethod\nshouldreturnNone. Bufferobjectsthatdonotneedtoperformanycleanuparenotrequiredtoimplementthis\nmethod.\nAddedinversion3.12.\n(cid:181) Seealso\nPEP688-MakingthebufferprotocolaccessibleinPython\nIntroducesthePython__buffer__and__release_buffer__methods.\ncollections.abc.Buffer\nABCforbuffertypes.\n3.3.12 Special method lookup\nForcustomclasses, implicitinvocationsofspecialmethodsareonlyguaranteedtoworkcorrectlyifdefinedonan\nobject\u2019stype,notintheobject\u2019sinstancedictionary. Thatbehaviouristhereasonwhythefollowingcoderaisesan\nexception:\n3.3. Specialmethodnames 53\nThePythonLanguageReference,Release3.13.3\n>>> class C:\n... pass\n...\n>>> c = C()\n>>> c.__len__ = lambda: 5\n>>> len(c)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: object of type 'C' has no len()\nTherationalebehindthisbehaviourlieswithanumberofspecialmethodssuchas__hash__()and__repr__()\nthatareimplementedbyallobjects, includingtypeobjects. Iftheimplicitlookupofthesemethodsusedthecon-\nventionallookupprocess,theywouldfailwheninvokedonthetypeobjectitself:\n>>> 1 .__hash__() == hash(1)\nTrue\n>>> int.__hash__() == hash(int)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: descriptor '__hash__' of 'int' object needs an argument\nIncorrectly attempting to invoke an unbound method of a class in this way is sometimes referred to as \u2018metaclass\nconfusion\u2019,andisavoidedbybypassingtheinstancewhenlookingupspecialmethods:\n>>> type(1).__hash__(1) == hash(1)\nTrue\n>>> type(int).__hash__(int) == hash(int)\nTrue\nInadditiontobypassinganyinstanceattributesintheinterestofcorrectness,implicitspecialmethodlookupgenerally\nalsobypassesthe__getattribute__()methodevenoftheobject\u2019smetaclass:\n>>> class Meta(type):\n... def __getattribute__(*args):\n... print(\"Metaclass getattribute invoked\")\n... return type.__getattribute__(*args)\n...\n>>> class C(object, metaclass=Meta):\n... def __len__(self):\n... return 10\n... def __getattribute__(*args):\n... print(\"Class getattribute invoked\")\n... return object.__getattribute__(*args)\n...\n>>> c = C()\n>>> c.__len__() # Explicit lookup via instance\nClass getattribute invoked\n10\n>>> type(c).__len__(c) # Explicit lookup via type\nMetaclass getattribute invoked\n10\n>>> len(c) # Implicit lookup\n10\nBypassingthe__getattribute__()machineryinthisfashionprovidessignificantscopeforspeedoptimisations\nwithintheinterpreter,atthecostofsomeflexibilityinthehandlingofspecialmethods(thespecialmethodmustbe\nsetontheclassobjectitselfinordertobeconsistentlyinvokedbytheinterpreter).\n54 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\n3.4 Coroutines\n3.4.1 Awaitable Objects\nAnawaitableobjectgenerallyimplementsan__await__()method. Coroutineobjectsreturnedfromasync def\nfunctionsareawaitable.\n(cid:174) Note\nThegeneratoriteratorobjectsreturnedfromgeneratorsdecoratedwithtypes.coroutine()arealsoawaitable,\nbuttheydonotimplement__await__().\nobject.__await__(self)\nMust return an iterator. Should be used to implement awaitable objects. For instance, asyncio.Future\nimplementsthismethodtobecompatiblewiththeawaitexpression. Theobjectclassitselfisnotawaitable\nanddoesnotprovidethismethod.\n(cid:174) Note\nThelanguagedoesn\u2019tplaceanyrestrictiononthetypeorvalueoftheobjectsyieldedbytheiteratorreturned\nby__await__, asthisisspecifictotheimplementationoftheasynchronousexecutionframework(e.g.\nasyncio)thatwillbemanagingtheawaitableobject.\nAddedinversion3.5.\n(cid:181) Seealso\nPEP492foradditionalinformationaboutawaitableobjects.\n3.4.2 Coroutine Objects\nCoroutine objects are awaitable objects. A coroutine\u2019s execution can be controlled by calling __await__() and\niteratingovertheresult. Whenthecoroutinehasfinishedexecutingandreturns,theiteratorraisesStopIteration,\nandtheexception\u2019svalueattributeholdsthereturnvalue. Ifthecoroutineraisesanexception,itispropagatedby\ntheiterator. CoroutinesshouldnotdirectlyraiseunhandledStopIterationexceptions.\nCoroutines also have the methods listed below, which are analogous to those of generators (see Generator-iterator\nmethods). However,unlikegenerators,coroutinesdonotdirectlysupportiteration.\nChangedinversion3.5.2: ItisaRuntimeErrortoawaitonacoroutinemorethanonce.\ncoroutine.send(value)\nStarts or resumes execution of the coroutine. If value is None, this is equivalent to advancing the iterator\nreturnedby__await__(). IfvalueisnotNone,thismethoddelegatestothesend()methodoftheiterator\nthat caused the coroutine to suspend. The result (return value, StopIteration, or other exception) is the\nsameaswheniteratingoverthe__await__()returnvalue,describedabove.\ncoroutine.throw(value)\n[ [ ]]\ncoroutine.throw(type ,value ,traceback )\nRaisesthespecifiedexceptioninthecoroutine. Thismethoddelegatestothethrow()methodoftheiterator\nthatcausedthecoroutinetosuspend,ifithassuchamethod. Otherwise,theexceptionisraisedatthesuspen-\nsionpoint. Theresult(returnvalue,StopIteration,orotherexception)isthesameaswheniteratingover\nthe__await__()returnvalue,describedabove. Iftheexceptionisnotcaughtinthecoroutine,itpropagates\nbacktothecaller.\nChangedinversion3.12: Thesecondsignature(type[,value[,traceback]])isdeprecatedandmayberemoved\ninafutureversionofPython.\n3.4. Coroutines 55\nThePythonLanguageReference,Release3.13.3\ncoroutine.close()\nCausesthecoroutinetocleanitselfupandexit. Ifthecoroutineissuspended,thismethodfirstdelegatestothe\nclose()methodoftheiteratorthatcausedthecoroutinetosuspend,ifithassuchamethod. Thenitraises\nGeneratorExit at the suspension point, causing the coroutine to immediately clean itself up. Finally, the\ncoroutineismarkedashavingfinishedexecuting,evenifitwasneverstarted.\nCoroutineobjectsareautomaticallyclosedusingtheaboveprocesswhentheyareabouttobedestroyed.\n3.4.3 Asynchronous Iterators\nAnasynchronousiteratorcancallasynchronouscodeinits__anext__method.\nAsynchronousiteratorscanbeusedinanasync forstatement.\nTheobjectclassitselfdoesnotprovidethesemethods.\nobject.__aiter__(self)\nMustreturnanasynchronousiteratorobject.\nobject.__anext__(self)\nMustreturnanawaitableresultinginanextvalueoftheiterator. ShouldraiseaStopAsyncIterationerror\nwhentheiterationisover.\nAnexampleofanasynchronousiterableobject:\nclass Reader:\nasync def readline(self):\n...\ndef __aiter__(self):\nreturn self\nasync def __anext__(self):\nval = await self.readline()\nif val == b'':\nraise StopAsyncIteration\nreturn val\nAddedinversion3.5.\nChanged in version 3.7: Prior to Python 3.7, __aiter__() could return an awaitable that would resolve to an\nasynchronousiterator.\nStartingwithPython3.7,__aiter__()mustreturnanasynchronousiteratorobject. Returninganythingelsewill\nresultinaTypeErrorerror.\n3.4.4 Asynchronous Context Managers\nAn asynchronous context manager is a context manager that is able to suspend execution in its __aenter__ and\n__aexit__methods.\nAsynchronouscontextmanagerscanbeusedinanasync withstatement.\nTheobjectclassitselfdoesnotprovidethesemethods.\nobject.__aenter__(self)\nSemanticallysimilarto__enter__(),theonlydifferencebeingthatitmustreturnanawaitable.\nobject.__aexit__(self,exc_type,exc_value,traceback)\nSemanticallysimilarto__exit__(),theonlydifferencebeingthatitmustreturnanawaitable.\nAnexampleofanasynchronouscontextmanagerclass:\n56 Chapter3. Datamodel\nThePythonLanguageReference,Release3.13.3\nclass AsyncContextManager:\nasync def __aenter__(self):\nawait log('entering context')\nasync def __aexit__(self, exc_type, exc, tb):\nawait log('exiting context')\nAddedinversion3.5.\n3.4. Coroutines 57\nThePythonLanguageReference,Release3.13.3\n58 Chapter3. Datamodel\nCHAPTER\nFOUR\nEXECUTION MODEL\n4.1 Structure of a program\nAPythonprogramisconstructedfromcodeblocks. AblockisapieceofPythonprogramtextthatisexecutedasa\nunit. Thefollowingareblocks: amodule,afunctionbody,andaclassdefinition. Eachcommandtypedinteractively\nisablock. Ascriptfile(afilegivenasstandardinputtotheinterpreterorspecifiedasacommandlineargumentto\ntheinterpreter)isacodeblock. Ascriptcommand(acommandspecifiedontheinterpretercommandlinewiththe\n-coption)isacodeblock. Amodulerunasatoplevelscript(asmodule__main__)fromthecommandlineusing\na-margumentisalsoacodeblock. Thestringargumentpassedtothebuilt-infunctionseval()andexec()isa\ncodeblock.\nAcodeblockisexecutedinanexecutionframe. Aframecontainssomeadministrativeinformation(usedfordebug-\nging)anddetermineswhereandhowexecutioncontinuesafterthecodeblock\u2019sexecutionhascompleted.\n4.2 Naming and binding\n4.2.1 Binding of names\nNamesrefertoobjects. Namesareintroducedbynamebindingoperations.\nThefollowingconstructsbindnames:\n\u2022 formalparameterstofunctions,\n\u2022 classdefinitions,\n\u2022 functiondefinitions,\n\u2022 assignmentexpressions,\n\u2022 targetsthatareidentifiersifoccurringinanassignment:\n\u2013 forloopheader,\n\u2013 afterasinawithstatement,exceptclause,except*clause,orintheas-patterninstructuralpattern\nmatching,\n\u2013 inacapturepatterninstructuralpatternmatching\n\u2022 importstatements.\n\u2022 typestatements.\n\u2022 typeparameterlists.\nTheimportstatementoftheformfrom ... import *bindsallnamesdefinedintheimportedmodule,except\nthosebeginningwithanunderscore. Thisformmayonlybeusedatthemodulelevel.\nAtargetoccurringinadelstatementisalsoconsideredboundforthispurpose(thoughtheactualsemanticsareto\nunbindthename).\nEachassignmentorimportstatementoccurswithinablockdefinedbyaclassorfunctiondefinitionoratthemodule\nlevel(thetop-levelcodeblock).\n59\nThePythonLanguageReference,Release3.13.3\nIfanameisboundinablock,itisalocalvariableofthatblock,unlessdeclaredasnonlocalorglobal. Ifaname\nisboundatthemodulelevel,itisaglobalvariable. (Thevariablesofthemodulecodeblockarelocalandglobal.) If\navariableisusedinacodeblockbutnotdefinedthere,itisafreevariable.\nEachoccurrenceofanameintheprogramtextreferstothebindingofthatnameestablishedbythefollowingname\nresolutionrules.\n4.2.2 Resolution of names\nAscopedefinesthevisibilityofanamewithinablock. Ifalocalvariableisdefinedinablock,itsscopeincludesthat\nblock. Ifthedefinitionoccursinafunctionblock,thescopeextendstoanyblockscontainedwithinthedefiningone,\nunlessacontainedblockintroducesadifferentbindingforthename.\nWhen a name is used in a code block, it is resolved using the nearest enclosing scope. The set of all such scopes\nvisibletoacodeblockiscalledtheblock\u2019senvironment.\nWhen a name is not found at all, a NameError exception is raised. If the current scope is a function scope, and\nthe name refers to a local variable that has not yet been bound to a value at the point where the name is used, an\nUnboundLocalErrorexceptionisraised. UnboundLocalErrorisasubclassofNameError.\nIfanamebindingoperationoccursanywherewithinacodeblock,allusesofthenamewithintheblockaretreated\nasreferencestothecurrentblock. Thiscanleadtoerrorswhenanameisusedwithinablockbeforeitisbound. This\nruleissubtle. Pythonlacksdeclarationsandallowsnamebindingoperationstooccuranywherewithinacodeblock.\nThe local variables of a code block can be determined by scanning the entire text of the block for name binding\noperations. SeetheFAQentryonUnboundLocalErrorforexamples.\nIftheglobalstatementoccurswithinablock,allusesofthenamesspecifiedinthestatementrefertothebindings\nofthosenamesinthetop-levelnamespace. Namesareresolvedinthetop-levelnamespacebysearchingtheglobal\nnamespace,i.e. thenamespaceofthemodulecontainingthecodeblock,andthebuiltinsnamespace,thenamespace\nof the module builtins. The global namespace is searched first. If the names are not found there, the builtins\nnamespaceissearchednext. Ifthenamesarealsonotfoundinthebuiltinsnamespace,newvariablesarecreatedin\ntheglobalnamespace. Theglobalstatementmustprecedeallusesofthelistednames.\nTheglobalstatementhasthesamescopeasanamebindingoperationinthesameblock. Ifthenearestenclosing\nscopeforafreevariablecontainsaglobalstatement,thefreevariableistreatedasaglobal.\nThenonlocalstatementcausescorrespondingnamestorefertopreviouslyboundvariablesinthenearestenclosing\nfunctionscope. SyntaxErrorisraisedatcompiletimeifthegivennamedoesnotexistinanyenclosingfunction\nscope. Typeparameterscannotbereboundwiththenonlocalstatement.\nThenamespaceforamoduleisautomaticallycreatedthefirsttimeamoduleisimported. Themainmodulefora\nscriptisalwayscalled__main__.\nClassdefinitionblocksandargumentstoexec()andeval()arespecialinthecontextofnameresolution. Aclass\ndefinitionisanexecutablestatementthatmayuseanddefinenames. Thesereferencesfollowthenormalrulesforname\nresolution with an exception that unbound local variables are looked up in the global namespace. The namespace\nof the class definition becomes the attribute dictionary of the class. The scope of names defined in a class block\nislimitedtotheclassblock; itdoesnotextendtothecodeblocksofmethods. Thisincludescomprehensionsand\ngeneratorexpressions, butitdoesnotincludeannotationscopes, whichhaveaccesstotheirenclosingclassscopes.\nThismeansthatthefollowingwillfail:\nclass A:\na = 42\nb = list(a + i for i in range(10))\nHowever,thefollowingwillsucceed:\nclass A:\ntype Alias = Nested\nclass Nested: pass\nprint(A.Alias.__value__) # <type 'A.Nested'>\n60 Chapter4. Executionmodel\nThePythonLanguageReference,Release3.13.3\n4.2.3 Annotation scopes\nTypeparameterlistsandtypestatementsintroduceannotationscopes,whichbehavemostlylikefunctionscopes,but\nwithsomeexceptionsdiscussedbelow. Annotationscurrentlydonotuseannotationscopes,buttheyareexpectedto\nuseannotationscopesinPython3.13whenPEP649isimplemented.\nAnnotationscopesareusedinthefollowingcontexts:\n\u2022 Typeparameterlistsforgenerictypealiases.\n\u2022 Typeparameterlistsforgenericfunctions. Agenericfunction\u2019sannotationsareexecutedwithintheannotation\nscope,butitsdefaultsanddecoratorsarenot.\n\u2022 Typeparameterlistsforgenericclasses. Agenericclass\u2019sbaseclassesandkeywordargumentsareexecuted\nwithintheannotationscope,butitsdecoratorsarenot.\n\u2022 Thebounds,constraints,anddefaultvaluesfortypeparameters(lazilyevaluated).\n\u2022 Thevalueoftypealiases(lazilyevaluated).\nAnnotationscopesdifferfromfunctionscopesinthefollowingways:\n\u2022 Annotation scopes have access to their enclosing class namespace. If an annotation scope is immediately\nwithinaclassscope,orwithinanotherannotationscopethatisimmediatelywithinaclassscope,thecodein\ntheannotationscopecanusenamesdefinedintheclassscopeasifitwereexecuteddirectlywithintheclass\nbody. Thiscontrastswithregularfunctionsdefinedwithinclasses,whichcannotaccessnamesdefinedinthe\nclassscope.\n\u2022 Expressions in annotation scopes cannot contain yield, yield from, await, or := expressions. (These\nexpressionsareallowedinotherscopescontainedwithintheannotationscope.)\n\u2022 Names defined in annotation scopes cannot be rebound with nonlocal statements in inner scopes. This\nincludes only type parameters, as no other syntactic elements that can appear within annotation scopes can\nintroducenewnames.\n\u2022 While annotation scopes have an internal name, that name is not reflected in the qualified name of objects\ndefinedwithinthescope. Instead,the__qualname__ofsuchobjectsisasiftheobjectweredefinedinthe\nenclosingscope.\nAddedinversion3.12: AnnotationscopeswereintroducedinPython3.12aspartofPEP695.\nChangedinversion3.13: Annotationscopesarealsousedfortypeparameterdefaults,asintroducedbyPEP696.\n4.2.4 Lazy evaluation\nThevaluesoftypealiasescreatedthroughthetypestatementarelazilyevaluated. Thesameappliestothebounds,\nconstraints, and default values of type variables created through the type parameter syntax. This means that they\narenotevaluatedwhenthetypealiasortypevariableiscreated. Instead,theyareonlyevaluatedwhendoingsois\nnecessarytoresolveanattributeaccess.\nExample:\n>>> type Alias = 1/0\n>>> Alias.__value__\nTraceback (most recent call last):\n...\nZeroDivisionError: division by zero\n>>> def func[T: 1/0](): pass\n>>> T = func.__type_params__[0]\n>>> T.__bound__\nTraceback (most recent call last):\n...\nZeroDivisionError: division by zero\nHeretheexceptionisraisedonlywhenthe__value__attributeofthetypealiasorthe__bound__attributeofthe\ntypevariableisaccessed.\n4.2. Namingandbinding 61\nThePythonLanguageReference,Release3.13.3\nThisbehaviorisprimarilyusefulforreferencestotypesthathavenotyetbeendefinedwhenthetypealiasortype\nvariableiscreated. Forexample,lazyevaluationenablescreationofmutuallyrecursivetypealiases:\nfrom typing import Literal\ntype SimpleExpr = int | Parenthesized\ntype Parenthesized = tuple[Literal[\"(\"], Expr, Literal[\")\"]]\ntype Expr = SimpleExpr | tuple[SimpleExpr, Literal[\"+\", \"-\"], Expr]\nLazily evaluated values are evaluated in annotation scope, which means that names that appear inside the lazily\nevaluatedvaluearelookedupasiftheywereusedintheimmediatelyenclosingscope.\nAddedinversion3.12.\n4.2.5 Builtins and restricted execution\nCPythonimplementationdetail: Usersshouldnottouch__builtins__; itisstrictlyanimplementationdetail.\nUsers wanting to override values in the builtins namespace should import the builtins module and modify its\nattributesappropriately.\nThe builtins namespace associated with the execution of a code block is actually found by looking up the name\n__builtins__ in its global namespace; this should be a dictionary or a module (in the latter case the module\u2019s\ndictionaryisused). Bydefault,wheninthe__main__module,__builtins__isthebuilt-inmodulebuiltins;\nwheninanyothermodule,__builtins__isanaliasforthedictionaryofthebuiltinsmoduleitself.\n4.2.6 Interaction with dynamic features\nNameresolutionoffreevariablesoccursatruntime, notatcompiletime. Thismeansthatthefollowingcodewill\nprint42:\ni = 10\ndef f():\nprint(i)\ni = 42\nf()\nTheeval()andexec()functionsdonothaveaccesstothefullenvironmentforresolvingnames. Namesmaybe\nresolved in the local and global namespaces of the caller. Free variables are not resolved in the nearest enclosing\nnamespace,butintheglobalnamespace.1 Theexec()andeval()functionshaveoptionalargumentstooverride\ntheglobalandlocalnamespace. Ifonlyonenamespaceisspecified,itisusedforboth.\n4.3 Exceptions\nExceptionsareameansofbreakingoutofthenormalflowofcontrolofacodeblockinordertohandleerrorsor\notherexceptionalconditions. Anexceptionisraised atthepointwheretheerrorisdetected;itmaybehandled by\nthesurroundingcodeblockorbyanycodeblockthatdirectlyorindirectlyinvokedthecodeblockwheretheerror\noccurred.\nThe Python interpreter raises an exception when it detects a run-time error (such as division by zero). A Python\nprogramcanalsoexplicitlyraiseanexceptionwiththeraisestatement. Exceptionhandlersarespecifiedwiththe\ntry\u2026exceptstatement. Thefinallyclauseofsuchastatementcanbeusedtospecifycleanupcodewhichdoes\nnothandletheexception,butisexecutedwhetheranexceptionoccurredornotintheprecedingcode.\nPythonusesthe\u201ctermination\u201dmodeloferrorhandling:anexceptionhandlercanfindoutwhathappenedandcontinue\nexecutionatanouterlevel,butitcannotrepairthecauseoftheerrorandretrythefailingoperation(exceptbyre-\nenteringtheoffendingpieceofcodefromthetop).\nWhenanexceptionisnothandledatall,theinterpreterterminatesexecutionoftheprogram,orreturnstoitsinter-\nactivemainloop. Ineithercase,itprintsastacktraceback,exceptwhentheexceptionisSystemExit.\n1Thislimitationoccursbecausethecodethatisexecutedbytheseoperationsisnotavailableatthetimethemoduleiscompiled.\n62 Chapter4. Executionmodel\nThePythonLanguageReference,Release3.13.3\nExceptionsareidentifiedbyclassinstances. Theexceptclauseisselecteddependingontheclassoftheinstance:\nitmustreferencetheclassoftheinstanceoranon-virtualbaseclass thereof. Theinstancecanbereceivedbythe\nhandlerandcancarryadditionalinformationabouttheexceptionalcondition.\n(cid:174) Note\nException messages are not part of the Python API. Their contents may change from one version of Python\ntothenextwithoutwarningandshouldnotbereliedonbycodewhichwillrunundermultipleversionsofthe\ninterpreter.\nSeealsothedescriptionofthetrystatementinsectionThetrystatementandraisestatementinsectionTheraise\nstatement.\n4.3. Exceptions 63\nThePythonLanguageReference,Release3.13.3\n64 Chapter4. Executionmodel\nCHAPTER\nFIVE\nTHE IMPORT SYSTEM\nPythoncodeinonemodulegainsaccesstothecodeinanothermodulebytheprocessofimportingit. Theimport\nstatementisthemostcommonwayofinvokingtheimportmachinery,butitisnottheonlyway. Functionssuchas\nimportlib.import_module()andbuilt-in__import__()canalsobeusedtoinvoketheimportmachinery.\nThe import statement combines two operations; it searches for the named module, then it binds the results of\nthatsearchtoanameinthelocalscope. Thesearchoperationoftheimportstatementisdefinedasacalltothe\n__import__()function,withtheappropriatearguments. Thereturnvalueof__import__()isusedtoperform\nthenamebindingoperationoftheimportstatement. Seetheimportstatementfortheexactdetailsofthatname\nbindingoperation.\nA direct call to __import__() performs only the module search and, if found, the module creation operation.\nWhilecertainside-effectsmayoccur,suchastheimportingofparentpackages,andtheupdatingofvariouscaches\n(includingsys.modules),onlytheimportstatementperformsanamebindingoperation.\nWhenanimportstatementisexecuted,thestandardbuiltin__import__()functioniscalled. Othermechanisms\nforinvokingtheimportsystem(suchasimportlib.import_module())maychoosetobypass__import__()\nandusetheirownsolutionstoimplementimportsemantics.\nWhenamoduleisfirstimported,Pythonsearchesforthemoduleandiffound,itcreatesamoduleobject1,initializing\nit. Ifthenamedmodulecannotbefound,aModuleNotFoundErrorisraised. Pythonimplementsvariousstrategies\ntosearchforthenamedmodulewhentheimportmachineryisinvoked. Thesestrategiescanbemodifiedandextended\nbyusingvarioushooksdescribedinthesectionsbelow.\nChanged in version 3.3: The import system has been updated to fully implement the second phase of PEP 302.\nThereisnolongeranyimplicitimportmachinery-thefullimportsystemisexposedthroughsys.meta_path. In\naddition,nativenamespacepackagesupporthasbeenimplemented(seePEP420).\n5.1 importlib\nThe importlib module provides a rich API for interacting with the import system. For example importlib.\nimport_module()providesarecommended, simplerAPIthanbuilt-in__import__()forinvokingtheimport\nmachinery. Refertotheimportliblibrarydocumentationforadditionaldetail.\n5.2 Packages\nPython has only one type of module object, and all modules are of this type, regardless of whether the module is\nimplementedinPython, C, orsomethingelse. Tohelporganizemodulesandprovidea naminghierarchy, Python\nhasaconceptofpackages.\nYoucanthinkofpackagesasthedirectoriesonafilesystemandmodulesasfileswithindirectories,butdon\u2019ttake\nthisanalogytooliterallysincepackagesandmodulesneednotoriginatefromthefilesystem. Forthepurposesof\nthisdocumentation,we\u2019llusethisconvenientanalogyofdirectoriesandfiles. Likefilesystemdirectories,packages\nareorganizedhierarchically,andpackagesmaythemselvescontainsubpackages,aswellasregularmodules.\n1Seetypes.ModuleType.\n65\nThePythonLanguageReference,Release3.13.3\nIt\u2019simportanttokeepinmindthatallpackagesaremodules,butnotallmodulesarepackages. Orputanotherway,\npackagesarejustaspecialkindofmodule. Specifically,anymodulethatcontainsa__path__attributeisconsidered\napackage.\nAllmoduleshaveaname. Subpackagenamesareseparatedfromtheirparentpackagenamebyadot,akintoPython\u2019s\nstandardattributeaccesssyntax. Thusyoumighthaveapackagecalledemail,whichinturnhasasubpackagecalled\nemail.mimeandamodulewithinthatsubpackagecalledemail.mime.text.\n5.2.1 Regular packages\nPythondefinestwotypesofpackages,regularpackagesandnamespacepackages. Regularpackagesaretraditional\npackagesastheyexistedinPython3.2andearlier. Aregularpackageistypicallyimplementedasadirectorycon-\ntainingan__init__.pyfile. Whenaregularpackageisimported,this__init__.pyfileisimplicitlyexecuted,\nandtheobjectsitdefinesareboundtonamesinthepackage\u2019snamespace. The__init__.pyfilecancontainthe\nsamePythoncodethatanyothermodulecancontain,andPythonwilladdsomeadditionalattributestothemodule\nwhenitisimported.\nForexample,thefollowingfilesystemlayoutdefinesatoplevelparentpackagewiththreesubpackages:\nparent/\n__init__.py\none/\n__init__.py\ntwo/\n__init__.py\nthree/\n__init__.py\nImportingparent.onewillimplicitlyexecuteparent/__init__.pyandparent/one/__init__.py. Subse-\nquentimportsofparent.twoorparent.threewillexecuteparent/two/__init__.pyandparent/three/\n__init__.pyrespectively.\n5.2.2 Namespace packages\nAnamespacepackageisacompositeofvariousportions,whereeachportioncontributesasubpackagetotheparent\npackage. Portionsmayresideindifferentlocationsonthefilesystem. Portionsmayalsobefoundinzipfiles,onthe\nnetwork, or anywhere else that Python searches during import. Namespace packages may or may not correspond\ndirectlytoobjectsonthefilesystem;theymaybevirtualmodulesthathavenoconcreterepresentation.\nNamespacepackagesdonotuseanordinarylistfortheir__path__attribute. Theyinsteaduseacustomiterabletype\nwhichwillautomaticallyperformanewsearchforpackageportionsonthenextimportattemptwithinthatpackage\nifthepathoftheirparentpackage(orsys.pathforatoplevelpackage)changes.\nWithnamespacepackages,thereisnoparent/__init__.pyfile. Infact,theremaybemultipleparentdirectories\nfound during import search, where each one is provided by a different portion. Thus parent/one may not be\nphysically located next to parent/two. In this case, Python will create a namespace package for the top-level\nparentpackagewheneveritoroneofitssubpackagesisimported.\nSeealsoPEP420forthenamespacepackagespecification.\n5.3 Searching\nTobeginthesearch,Pythonneedsthefullyqualified nameofthemodule(orpackage,butforthepurposesofthis\ndiscussion,thedifferenceisimmaterial)beingimported. Thisnamemaycomefromvariousargumentstotheimport\nstatement,orfromtheparameterstotheimportlib.import_module()or__import__()functions.\nThisnamewillbeusedinvariousphasesoftheimportsearch, anditmaybethedottedpathtoasubmodule, e.g.\nfoo.bar.baz. Inthiscase,Pythonfirsttriestoimportfoo,thenfoo.bar,andfinallyfoo.bar.baz. Ifanyof\ntheintermediateimportsfail,aModuleNotFoundErrorisraised.\n66 Chapter5. Theimportsystem\nThePythonLanguageReference,Release3.13.3\n5.3.1 The module cache\nThefirstplacecheckedduringimportsearchissys.modules. Thismappingservesasacacheofallmodulesthat\nhave been previously imported, including the intermediate paths. So if foo.bar.baz was previously imported,\nsys.modules will contain entries for foo, foo.bar, and foo.bar.baz. Each key will have as its value the\ncorrespondingmoduleobject.\nDuringimport,themodulenameislookedupinsys.modulesandifpresent,theassociatedvalueisthemodule\nsatisfyingtheimport,andtheprocesscompletes. However,ifthevalueisNone,thenaModuleNotFoundErroris\nraised. Ifthemodulenameismissing,Pythonwillcontinuesearchingforthemodule.\nsys.modulesiswritable. Deletingakeymaynotdestroytheassociatedmodule(asothermodulesmayholdrefer-\nencestoit),butitwillinvalidatethecacheentryforthenamedmodule,causingPythontosearchanewforthenamed\nmoduleuponitsnextimport. ThekeycanalsobeassignedtoNone,forcingthenextimportofthemoduletoresult\ninaModuleNotFoundError.\nBewarethough,asifyoukeepareferencetothemoduleobject,invalidateitscacheentryinsys.modules,andthen\nre-import the named module, the two module objects will not be the same. By contrast, importlib.reload()\nwillreusethesamemoduleobject,andsimplyreinitialisethemodulecontentsbyrerunningthemodule\u2019scode.\n5.3.2 Finders and loaders\nIfthenamedmoduleisnotfoundinsys.modules,thenPython\u2019simportprotocolisinvokedtofindandloadthe\nmodule. Thisprotocolconsistsoftwoconceptualobjects,findersandloaders. Afinder\u2019sjobistodeterminewhether\nitcanfindthenamedmoduleusingwhateverstrategyitknowsabout. Objectsthatimplementbothoftheseinterfaces\narereferredtoasimporters-theyreturnthemselveswhentheyfindthattheycanloadtherequestedmodule.\nPythonincludesanumberofdefaultfindersandimporters. Thefirstoneknowshowtolocatebuilt-inmodules,and\nthe second knows how to locate frozen modules. A third default finder searches an import path for modules. The\nimportpathisalistoflocationsthatmaynamefilesystempathsorzipfiles. Itcanalsobeextendedtosearchforany\nlocatableresource,suchasthoseidentifiedbyURLs.\nTheimportmachineryisextensible,sonewfinderscanbeaddedtoextendtherangeandscopeofmodulesearching.\nFindersdonotactuallyloadmodules. Iftheycanfindthenamedmodule,theyreturnamodulespec,anencapsulation\nofthemodule\u2019simport-relatedinformation,whichtheimportmachinerythenuseswhenloadingthemodule.\nThefollowingsectionsdescribetheprotocolforfindersandloadersinmoredetail,includinghowyoucancreateand\nregisternewonestoextendtheimportmachinery.\nChangedinversion3.4: InpreviousversionsofPython,findersreturnedloadersdirectly,whereasnowtheyreturn\nmodulespecswhichcontainloaders. Loadersarestillusedduringimportbuthavefewerresponsibilities.\n5.3.3 Import hooks\nTheimportmachineryisdesignedtobeextensible;theprimarymechanismforthisaretheimporthooks. Thereare\ntwotypesofimporthooks: metahooksandimportpathhooks.\nMetahooksarecalledatthestartofimportprocessing,beforeanyotherimportprocessinghasoccurred,otherthan\nsys.modulescachelookup. Thisallowsmetahookstooverridesys.pathprocessing,frozenmodules,oreven\nbuilt-inmodules. Metahooksareregisteredbyaddingnewfinderobjectstosys.meta_path,asdescribedbelow.\nImportpathhooksarecalledaspartofsys.path(orpackage.__path__)processing, atthepointwheretheir\nassociatedpathitemisencountered. Importpathhooksareregisteredbyaddingnewcallablestosys.path_hooks\nasdescribedbelow.\n5.3.4 The meta path\nWhen the named module is not found in sys.modules, Python next searches sys.meta_path, which contains\nalistofmetapathfinderobjects. Thesefindersarequeriedinordertoseeiftheyknowhowtohandlethenamed\nmodule. Metapathfindersmustimplementamethodcalledfind_spec()whichtakesthreearguments: aname,\nanimportpath, and(optionally)atargetmodule. Themetapathfindercanuseanystrategyitwantstodetermine\nwhetheritcanhandlethenamedmoduleornot.\n5.3. Searching 67\nThePythonLanguageReference,Release3.13.3\nIfthemetapathfinderknowshowtohandlethenamedmodule,itreturnsaspecobject. Ifitcannothandlethenamed\nmodule, it returns None. If sys.meta_path processing reaches the end of its list without returning a spec, then\na ModuleNotFoundError is raised. Any other exceptions raised are simply propagated up, aborting the import\nprocess.\nThefind_spec()methodofmetapathfindersiscalledwithtwoorthreearguments. Thefirstisthefullyqualified\nnameof the module being imported, for example foo.bar.baz. The second argument is the path entriesto use\nforthemodulesearch. Fortop-levelmodules,thesecondargumentisNone,butforsubmodulesorsubpackages,the\nsecond argument is the value of the parent package\u2019s __path__ attribute. If the appropriate __path__ attribute\ncannotbeaccessed,aModuleNotFoundErrorisraised. Thethirdargumentisanexistingmoduleobjectthatwill\nbethetargetofloadinglater. Theimportsystempassesinatargetmoduleonlyduringreload.\nThe meta path may be traversed multiple times for a single import request. For example, assuming none of the\nmodules involved has already been cached, importing foo.bar.baz will first perform a top level import, calling\nmpf.find_spec(\"foo\", None, None) on each meta path finder (mpf). After foo has been imported, foo.\nbar will be imported by traversing the meta path a second time, calling mpf.find_spec(\"foo.bar\", foo.\n__path__, None). Oncefoo.barhasbeenimported,thefinaltraversalwillcallmpf.find_spec(\"foo.bar.\nbaz\", foo.bar.__path__, None).\nSomemetapathfindersonlysupporttoplevelimports. TheseimporterswillalwaysreturnNonewhenanythingother\nthanNoneispassedasthesecondargument.\nPython\u2019sdefaultsys.meta_pathhasthreemetapathfinders,onethatknowshowtoimportbuilt-inmodules,one\nthatknowshowtoimportfrozenmodules,andonethatknowshowtoimportmodulesfromanimportpath(i.e. the\npathbasedfinder).\nChangedinversion3.4: Thefind_spec()methodofmetapathfindersreplacedfind_module(),whichisnow\ndeprecated. Whileitwillcontinuetoworkwithoutchange,theimportmachinerywilltryitonlyifthefinderdoes\nnotimplementfind_spec().\nChangedinversion3.10: Useoffind_module()bytheimportsystemnowraisesImportWarning.\nChangedinversion3.12: find_module()hasbeenremoved. Usefind_spec()instead.\n5.4 Loading\nIfandwhenamodulespecisfound,theimportmachinerywilluseit(andtheloaderitcontains)whenloadingthe\nmodule. Hereisanapproximationofwhathappensduringtheloadingportionofimport:\nmodule = None\nif spec.loader is not None and hasattr(spec.loader, 'create_module'):\n# It is assumed 'exec_module' will also be defined on the loader.\nmodule = spec.loader.create_module(spec)\nif module is None:\nmodule = ModuleType(spec.name)\n# The import-related module attributes get set here:\n_init_module_attrs(spec, module)\nif spec.loader is None:\n# unsupported\nraise ImportError\nif spec.origin is None and spec.submodule_search_locations is not None:\n# namespace package\nsys.modules[spec.name] = module\nelif not hasattr(spec.loader, 'exec_module'):\nmodule = spec.loader.load_module(spec.name)\nelse:\nsys.modules[spec.name] = module\ntry:\nspec.loader.exec_module(module)\n(continuesonnextpage)\n68 Chapter5. Theimportsystem\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nexcept BaseException:\ntry:\ndel sys.modules[spec.name]\nexcept KeyError:\npass\nraise\nreturn sys.modules[spec.name]\nNotethefollowingdetails:\n\u2022 Ifthereisanexistingmoduleobjectwiththegivennameinsys.modules,importwillhavealreadyreturned\nit.\n\u2022 Themodulewillexistinsys.modulesbeforetheloaderexecutesthemodulecode. Thisiscrucialbecause\nthe module code may (directly or indirectly) import itself; adding it to sys.modules beforehand prevents\nunboundedrecursionintheworstcaseandmultipleloadinginthebest.\n\u2022 Ifloadingfails, thefailingmodule\u2013andonlythefailingmodule\u2013getsremovedfromsys.modules. Any\nmodulealreadyinthesys.modulescache,andanymodulethatwassuccessfullyloadedasaside-effect,must\nremaininthecache. Thiscontrastswithreloadingwhereeventhefailingmoduleisleftinsys.modules.\n\u2022 After the module is created but before execution, the import machinery sets the import-related module at-\ntributes(\u201c_init_module_attrs\u201dinthepseudo-codeexampleabove),assummarizedinalatersection.\n\u2022 Moduleexecutionisthekeymomentofloadinginwhichthemodule\u2019snamespacegetspopulated. Execution\nisentirelydelegatedtotheloader,whichgetstodecidewhatgetspopulatedandhow.\n\u2022 Themodulecreatedduringloadingandpassedtoexec_module()maynotbetheonereturnedattheendof\nimport2.\nChanged in version 3.4: The import system has taken over the boilerplate responsibilities of loaders. These were\npreviouslyperformedbytheimportlib.abc.Loader.load_module()method.\n5.4.1 Loaders\nModule loaders provide the critical function of loading: module execution. The import machinery calls the\nimportlib.abc.Loader.exec_module()methodwithasingleargument, themoduleobjecttoexecute. Any\nvaluereturnedfromexec_module()isignored.\nLoadersmustsatisfythefollowingrequirements:\n\u2022 If the module is a Python module (as opposed to a built-in module or a dynamically loaded extension), the\nloadershouldexecutethemodule\u2019scodeinthemodule\u2019sglobalnamespace(module.__dict__).\n\u2022 Iftheloadercannotexecutethemodule,itshouldraiseanImportError,althoughanyotherexceptionraised\nduringexec_module()willbepropagated.\nIn many cases, the finder and loader can be the same object; in such cases the find_spec() method would just\nreturnaspecwiththeloadersettoself.\nModule loaders may opt in to creating the module object during loading by implementing a create_module()\nmethod. It takes one argument, the module spec, and returns the new module object to use during loading.\ncreate_module() does not need to set any attributes on the module object. If the method returns None, the\nimportmachinerywillcreatethenewmoduleitself.\nAddedinversion3.4: Thecreate_module()methodofloaders.\nChangedinversion3.4: Theload_module()methodwasreplacedbyexec_module()andtheimportmachinery\nassumedalltheboilerplateresponsibilitiesofloading.\n2Theimportlibimplementationavoidsusingthereturnvaluedirectly. Instead,itgetsthemoduleobjectbylookingthemodulenameup\ninsys.modules. Theindirecteffectofthisisthatanimportedmodulemayreplaceitselfinsys.modules. Thisisimplementation-specific\nbehaviorthatisnotguaranteedtoworkinotherPythonimplementations.\n5.4. Loading 69\nThePythonLanguageReference,Release3.13.3\nForcompatibilitywithexistingloaders,theimportmachinerywillusetheload_module()methodofloadersifit\nexistsandtheloaderdoesnotalsoimplementexec_module(). However,load_module()hasbeendeprecated\nandloadersshouldimplementexec_module()instead.\nTheload_module()methodmustimplementalltheboilerplateloadingfunctionalitydescribedaboveinaddition\ntoexecutingthemodule. Allthesameconstraintsapply,withsomeadditionalclarification:\n\u2022 Ifthereisanexistingmoduleobjectwiththegivennameinsys.modules,theloadermustusethatexisting\nmodule. (Otherwise,importlib.reload()willnotworkcorrectly.) Ifthenamedmoduledoesnotexistin\nsys.modules,theloadermustcreateanewmoduleobjectandaddittosys.modules.\n\u2022 Themodulemust existinsys.modulesbeforetheloaderexecutesthemodulecode,topreventunbounded\nrecursionormultipleloading.\n\u2022 Ifloadingfails,theloadermustremoveanymodulesithasinsertedintosys.modules,butitmustremove\nonlythefailingmodule(s),andonlyiftheloaderitselfhasloadedthemodule(s)explicitly.\nChanged in version 3.5: A DeprecationWarning is raised when exec_module() is defined but\ncreate_module()isnot.\nChangedinversion3.6: AnImportErrorisraisedwhenexec_module()isdefinedbutcreate_module()is\nnot.\nChangedinversion3.10: Useofload_module()willraiseImportWarning.\n5.4.2 Submodules\nWhenasubmoduleisloadedusinganymechanism(e.g. importlibAPIs,theimportorimport-fromstatements,\nor built-in __import__()) a binding is placed in the parent module\u2019s namespace to the submodule object. For\nexample,ifpackagespamhasasubmodulefoo,afterimportingspam.foo,spamwillhaveanattributefoowhich\nisboundtothesubmodule. Let\u2019ssayyouhavethefollowingdirectorystructure:\nspam/\n__init__.py\nfoo.py\nandspam/__init__.pyhasthefollowinglineinit:\nfrom .foo import Foo\nthenexecutingthefollowingputsnamebindingsforfooandFoointhespammodule:\n>>> import spam\n>>> spam.foo\n<module 'spam.foo' from '/tmp/imports/spam/foo.py'>\n>>> spam.Foo\n<class 'spam.foo.Foo'>\nGiven Python\u2019s familiar name binding rules this might seem surprising, but it\u2019s actually a fundamental feature of\ntheimportsystem. Theinvariantholdingisthatifyouhavesys.modules['spam']andsys.modules['spam.\nfoo'](asyouwouldaftertheaboveimport),thelattermustappearasthefooattributeoftheformer.\n5.4.3 Module specs\nThe import machinery uses a variety of information about each module during import, especially before loading.\nMostoftheinformationiscommontoallmodules. Thepurposeofamodule\u2019sspecistoencapsulatethisimport-\nrelatedinformationonaper-modulebasis.\nUsingaspecduringimportallowsstatetobetransferredbetweenimportsystemcomponents,e.g. betweenthefinder\nthat creates the module spec and the loader that executes it. Most importantly, it allows the import machinery to\nperformtheboilerplateoperationsofloading,whereaswithoutamodulespectheloaderhadthatresponsibility.\n70 Chapter5. Theimportsystem\nThePythonLanguageReference,Release3.13.3\nThemodule\u2019sspecisexposedasmodule.__spec__. Setting__spec__appropriatelyappliesequallytomodules\ninitializedduringinterpreterstartup. Theoneexceptionis__main__,where__spec__issettoNoneinsomecases.\nSeeModuleSpecfordetailsonthecontentsofthemodulespec.\nAddedinversion3.4.\n5.4.4 __path__ attributes on modules\nThe__path__attributeshouldbea(possiblyempty)sequenceofstringsenumeratingthelocationswherethepack-\nage\u2019ssubmoduleswillbefound. Bydefinition,ifamodulehasa__path__attribute,itisapackage.\nApackage\u2019s__path__attributeisusedduringimportsofitssubpackages. Withintheimportmachinery,itfunctions\nmuch the same as sys.path, i.e. providing a list of locations to search for modules during import. However,\n__path__istypicallymuchmoreconstrainedthansys.path.\nThesamerulesusedforsys.pathalsoapplytoapackage\u2019s__path__. sys.path_hooks(describedbelow)are\nconsultedwhentraversingapackage\u2019s__path__.\nA package\u2019s __init__.py file may set or alter the package\u2019s __path__ attribute, and this was typically the way\nnamespace packages were implemented prior to PEP 420. With the adoption of PEP 420, namespace packages\nnolongerneedtosupply__init__.pyfilescontainingonly__path__manipulationcode;theimportmachinery\nautomaticallysets__path__correctlyforthenamespacepackage.\n5.4.5 Module reprs\nBydefault,allmoduleshaveausablerepr,howeverdependingontheattributessetabove,andinthemodule\u2019sspec,\nyoucanmoreexplicitlycontrolthereprofmoduleobjects.\nIfthemodulehasaspec(__spec__),theimportmachinerywilltrytogenerateareprfromit. Ifthatfailsorthereis\nnospec,theimportsystemwillcraftadefaultreprusingwhateverinformationisavailableonthemodule. Itwilltryto\nusethemodule.__name__,module.__file__,andmodule.__loader__asinputintotherepr,withdefaults\nforwhateverinformationismissing.\nHerearetheexactrulesused:\n\u2022 Ifthemodulehasa__spec__attribute,theinformationinthespecisusedtogeneratetherepr. The\u201cname\u201d,\n\u201cloader\u201d,\u201corigin\u201d,and\u201chas_location\u201dattributesareconsulted.\n\u2022 Ifthemodulehasa__file__attribute,thisisusedaspartofthemodule\u2019srepr.\n\u2022 Ifthemodulehasno__file__butdoeshavea__loader__thatisnotNone,thentheloader\u2019sreprisused\naspartofthemodule\u2019srepr.\n\u2022 Otherwise,justusethemodule\u2019s__name__intherepr.\nChangedinversion3.12:Useofmodule_repr(),havingbeendeprecatedsincePython3.4,wasremovedinPython\n3.12andisnolongercalledduringtheresolutionofamodule\u2019srepr.\n5.4.6 Cached bytecode invalidation\nBefore Python loads cached bytecode from a .pyc file, it checks whether the cache is up-to-date with the source\n.pyfile. Bydefault,Pythondoesthisbystoringthesource\u2019slast-modifiedtimestampandsizeinthecachefilewhen\nwritingit. Atruntime,theimportsystemthenvalidatesthecachefilebycheckingthestoredmetadatainthecache\nfileagainstthesource\u2019smetadata.\nPythonalsosupports\u201chash-based\u201dcachefiles,whichstoreahashofthesourcefile\u2019scontentsratherthanitsmetadata.\nTherearetwovariantsofhash-based.pycfiles: checkedandunchecked. Forcheckedhash-based.pycfiles,Python\nvalidatesthecachefilebyhashingthesourcefileandcomparingtheresultinghashwiththehashinthecachefile. If\nacheckedhash-basedcachefileisfoundtobeinvalid,Pythonregeneratesitandwritesanewcheckedhash-based\ncachefile. Foruncheckedhash-based.pycfiles,Pythonsimplyassumesthecachefileisvalidifitexists. Hash-based\n.pycfilesvalidationbehaviormaybeoverriddenwiththe--check-hash-based-pycsflag.\nChangedinversion3.7: Addedhash-based.pycfiles. Previously,Pythononlysupportedtimestamp-basedinvali-\ndationofbytecodecaches.\n5.4. Loading 71\nThePythonLanguageReference,Release3.13.3\n5.5 The Path Based Finder\nAsmentionedpreviously,Pythoncomeswithseveraldefaultmetapathfinders. Oneofthese,calledthepathbased\nfinder(PathFinder),searchesanimportpath,whichcontainsalistofpathentries. Eachpathentrynamesalocation\ntosearchformodules.\nThepathbasedfinderitselfdoesn\u2019tknowhowtoimportanything. Instead, ittraversestheindividualpathentries,\nassociatingeachofthemwithapathentryfinderthatknowshowtohandlethatparticularkindofpath.\nThe default set of path entry finders implement all the semantics for finding modules on the file system, handling\nspecialfiletypessuchasPythonsourcecode(.pyfiles),Pythonbytecode(.pycfiles)andsharedlibraries(e.g. .so\nfiles). Whensupportedbythezipimportmoduleinthestandardlibrary,thedefaultpathentryfindersalsohandle\nloadingallofthesefiletypes(otherthansharedlibraries)fromzipfiles.\nPath entries need not be limited to file system locations. They can refer to URLs, database queries, or any other\nlocationthatcanbespecifiedasastring.\nThe path based finder provides additional hooks and protocols so that you can extend and customize the types of\nsearchablepathentries. Forexample,ifyouwantedtosupportpathentriesasnetworkURLs,youcouldwriteahook\nthatimplementsHTTPsemanticstofindmodulesontheweb. Thishook(acallable)wouldreturnapathentryfinder\nsupportingtheprotocoldescribedbelow,whichwasthenusedtogetaloaderforthemodulefromtheweb.\nAwordofwarning: thissectionandthepreviousbothusethetermfinder,distinguishingbetweenthembyusingthe\ntermsmetapathfinderandpathentryfinder. Thesetwotypesoffindersareverysimilar,supportsimilarprotocols,\nandfunctioninsimilarwaysduringtheimportprocess,butit\u2019simportanttokeepinmindthattheyaresubtlydifferent.\nInparticular, metapathfindersoperateatthebeginningoftheimportprocess, askeyedoffthesys.meta_path\ntraversal.\nBycontrast,pathentryfindersareinasenseanimplementationdetailofthepathbasedfinder,andinfact,ifthepath\nbasedfinderweretoberemovedfromsys.meta_path,noneofthepathentryfindersemanticswouldbeinvoked.\n5.5.1 Path entry finders\nThepathbasedfinderisresponsibleforfindingandloadingPythonmodulesandpackageswhoselocationisspecified\nwithastringpathentry. Mostpathentriesnamelocationsinthefilesystem,buttheyneednotbelimitedtothis.\nAsametapathfinder,thepathbasedfinderimplementsthefind_spec()protocolpreviouslydescribed,however\nitexposesadditionalhooksthatcanbeusedtocustomizehowmodulesarefoundandloadedfromtheimportpath.\nThree variables are used by the path based finder, sys.path, sys.path_hooks and sys.\npath_importer_cache. The __path__ attributes on package objects are also used. These provide additional\nwaysthattheimportmachinerycanbecustomized.\nsys.pathcontainsalistofstringsprovidingsearchlocationsformodulesandpackages. Itisinitializedfromthe\nPYTHONPATHenvironmentvariableandvariousotherinstallation-andimplementation-specificdefaults. Entriesin\nsys.pathcannamedirectoriesonthefilesystem,zipfiles,andpotentiallyother\u201clocations\u201d(seethesitemodule)\nthatshouldbesearchedformodules,suchasURLs,ordatabasequeries. Onlystringsshouldbepresentonsys.path;\nallotherdatatypesareignored.\nThe path based finder is a meta path finder, so the import machinery begins the import path search by calling the\npathbasedfinder\u2019sfind_spec()methodasdescribedpreviously. Whenthepathargumenttofind_spec()is\ngiven,itwillbealistofstringpathstotraverse-typicallyapackage\u2019s__path__attributeforanimportwithinthat\npackage. IfthepathargumentisNone,thisindicatesatoplevelimportandsys.pathisused.\nThe path based finder iterates over every entry in the search path, and for each of these, looks for an appropriate\npathentryfinder (PathEntryFinder)forthepathentry. Becausethiscanbeanexpensiveoperation(e.g. there\nmay be stat() call overheads for this search), the path based finder maintains a cache mapping path entries to\npathentryfinders. Thiscacheismaintainedinsys.path_importer_cache(despitethename,thiscacheactually\nstoresfinderobjectsratherthanbeinglimitedtoimporterobjects). Inthisway,theexpensivesearchforaparticular\npath entry location\u2019s path entry finder need only be done once. User code is free to remove cache entries from\nsys.path_importer_cacheforcingthepathbasedfindertoperformthepathentrysearchagain.\nIfthepathentryisnotpresentinthecache,thepathbasedfinderiteratesovereverycallableinsys.path_hooks.\nEachofthepathentryhooksinthislistiscalledwithasingleargument,thepathentrytobesearched. Thiscallable\n72 Chapter5. Theimportsystem\nThePythonLanguageReference,Release3.13.3\nmayeitherreturnapathentryfinderthatcanhandlethepathentry,oritmayraiseImportError. AnImportError\nisusedbythepathbasedfindertosignalthatthehookcannotfindapathentryfinderforthatpathentry. Theexception\nisignoredandimportpathiterationcontinues. Thehookshouldexpecteitherastringorbytesobject;theencoding\nofbytesobjectsisuptothehook(e.g. itmaybeafilesystemencoding,UTF-8,orsomethingelse),andifthehook\ncannotdecodetheargument,itshouldraiseImportError.\nIf sys.path_hooks iteration ends with no path entry finder being returned, then the path based finder\u2019s\nfind_spec() method will store None in sys.path_importer_cache (to indicate that there is no finder for\nthispathentry)andreturnNone,indicatingthatthismetapathfindercouldnotfindthemodule.\nIfapathentryfinder isreturnedbyoneofthepathentryhookcallablesonsys.path_hooks,thenthefollowing\nprotocolisusedtoaskthefinderforamodulespec,whichisthenusedwhenloadingthemodule.\nThe current working directory \u2013 denoted by an empty string \u2013 is handled slightly differently from other en-\ntries on sys.path. First, if the current working directory is found to not exist, no value is stored in sys.\npath_importer_cache. Second, the value for the current working directory is looked up fresh for each mod-\nule lookup. Third, the path used for sys.path_importer_cache and returned by importlib.machinery.\nPathFinder.find_spec()willbetheactualcurrentworkingdirectoryandnottheemptystring.\n5.5.2 Path entry finder protocol\nInordertosupportimportsofmodulesandinitializedpackagesandalsotocontributeportionstonamespacepackages,\npathentryfindersmustimplementthefind_spec()method.\nfind_spec()takestwoarguments: thefullyqualifiednameofthemodulebeingimported,andthe(optional)target\nmodule. find_spec()returnsafullypopulatedspecforthemodule. Thisspecwillalwayshave\u201cloader\u201dset(with\noneexception).\nTo indicate to the import machinery that the spec represents a namespace portion, the path entry finder sets\nsubmodule_search_locationstoalistcontainingtheportion.\nChangedinversion3.4: find_spec()replacedfind_loader()andfind_module(),bothofwhicharenow\ndeprecated,butwillbeusediffind_spec()isnotdefined.\nOlderpathentryfindersmayimplementoneofthesetwodeprecatedmethodsinsteadoffind_spec(). Themeth-\nods are still respected for the sake of backward compatibility. However, if find_spec() is implemented on the\npathentryfinder,thelegacymethodsareignored.\nfind_loader() takes one argument, the fully qualified name of the module being imported. find_loader()\nreturnsa2-tuplewherethefirstitemistheloaderandtheseconditemisanamespaceportion.\nForbackwardscompatibilitywithotherimplementationsoftheimportprotocol,manypathentryfindersalsosup-\nport the same, traditional find_module() method that meta path finders support. However path entry finder\nfind_module() methods are never called with a path argument (they are expected to record the appropriate\npathinformationfromtheinitialcalltothepathhook).\nThe find_module() method on path entry finders is deprecated, as it does not allow the path entry finder to\ncontributeportionstonamespacepackages. Ifbothfind_loader()andfind_module()existonapathentry\nfinder,theimportsystemwillalwayscallfind_loader()inpreferencetofind_module().\nChanged in version 3.10: Calls to find_module() and find_loader() by the import system will raise\nImportWarning.\nChangedinversion3.12: find_module()andfind_loader()havebeenremoved.\n5.6 Replacing the standard import system\nThe most reliable mechanism for replacing the entire import system is to delete the default contents of sys.\nmeta_path,replacingthementirelywithacustommetapathhook.\nIfitisacceptabletoonlyalterthebehaviourofimportstatementswithoutaffectingotherAPIsthataccesstheimport\nsystem,thenreplacingthebuiltin__import__()functionmaybesufficient. Thistechniquemayalsobeemployed\natthemoduleleveltoonlyalterthebehaviourofimportstatementswithinthatmodule.\n5.6. Replacingthestandardimportsystem 73\nThePythonLanguageReference,Release3.13.3\nTo selectively prevent the import of some modules from a hook early on the meta path (rather than disabling the\nstandardimportsystementirely),itissufficienttoraiseModuleNotFoundErrordirectlyfromfind_spec()in-\nsteadofreturningNone. Thelatterindicatesthatthemetapathsearchshouldcontinue,whileraisinganexception\nterminatesitimmediately.\n5.7 Package Relative Imports\nRelativeimportsuseleadingdots. Asingleleadingdotindicatesarelativeimport,startingwiththecurrentpackage.\nTwoormoreleadingdotsindicatearelativeimporttotheparent(s)ofthecurrentpackage,onelevelperdotafter\nthefirst. Forexample,giventhefollowingpackagelayout:\npackage/\n__init__.py\nsubpackage1/\n__init__.py\nmoduleX.py\nmoduleY.py\nsubpackage2/\n__init__.py\nmoduleZ.py\nmoduleA.py\nIneithersubpackage1/moduleX.pyorsubpackage1/__init__.py,thefollowingarevalidrelativeimports:\nfrom .moduleY import spam\nfrom .moduleY import spam as ham\nfrom . import moduleY\nfrom ..subpackage1 import moduleY\nfrom ..subpackage2.moduleZ import eggs\nfrom ..moduleA import foo\nAbsoluteimportsmayuseeithertheimport <>orfrom <> import <>syntax, butrelativeimportsmayonly\nusethesecondform;thereasonforthisisthat:\nimport XXX.YYY.ZZZ\nshouldexposeXXX.YYY.ZZZasausableexpression,but.moduleYisnotavalidexpression.\n5.8 Special considerations for __main__\nThe __main__ module is a special case relative to Python\u2019s import system. As noted elsewhere, the __main__\nmodule is directly initialized at interpreter startup, much like sys and builtins. However, unlike those two, it\ndoesn\u2019tstrictlyqualifyasabuilt-inmodule. Thisisbecausethemannerinwhich__main__isinitializeddependson\ntheflagsandotheroptionswithwhichtheinterpreterisinvoked.\n5.8.1 __main__.__spec__\nDependingonhow__main__isinitialized,__main__.__spec__getssetappropriatelyortoNone.\nWhen Python is started with the -m option, __spec__ is set to the module spec of the corresponding module or\npackage. __spec__isalsopopulatedwhenthe__main__moduleisloadedaspartofexecutingadirectory,zipfile\norothersys.pathentry.\nIntheremainingcases__main__.__spec__issettoNone,asthecodeusedtopopulatethe__main__doesnot\ncorresponddirectlywithanimportablemodule:\n\u2022 interactiveprompt\n\u2022 -coption\n74 Chapter5. Theimportsystem\nThePythonLanguageReference,Release3.13.3\n\u2022 runningfromstdin\n\u2022 runningdirectlyfromasourceorbytecodefile\nNotethat__main__.__spec__isalwaysNoneinthelastcase,evenifthefilecouldtechnicallybeimporteddirectly\nasamoduleinstead. Usethe-mswitchifvalidmodulemetadataisdesiredin__main__.\nNote also that even when __main__ corresponds with an importable module and __main__.__spec__ is set\naccordingly,they\u2019restillconsidereddistinct modules. Thisisduetothefactthatblocksguardedbyif __name__\n== \"__main__\": checks only execute when the module is used to populate the __main__ namespace, and not\nduringnormalimport.\n5.9 References\nTheimportmachineryhasevolvedconsiderablysincePython\u2019searlydays. Theoriginalspecificationforpackagesis\nstillavailabletoread,althoughsomedetailshavechangedsincethewritingofthatdocument.\nTheoriginalspecificationforsys.meta_pathwasPEP302,withsubsequentextensioninPEP420.\nPEP420introducednamespacepackagesforPython3.3. PEP420alsointroducedthefind_loader()protocol\nasanalternativetofind_module().\nPEP366describestheadditionofthe__package__attributeforexplicitrelativeimportsinmainmodules.\nPEP328introducedabsoluteandexplicitrelativeimportsandinitiallyproposed__name__forsemanticsPEP366\nwouldeventuallyspecifyfor__package__.\nPEP338definesexecutingmodulesasscripts.\nPEP451addstheencapsulationofper-moduleimportstateinspecobjects. Italsooff-loadsmostoftheboilerplate\nresponsibilitiesofloadersbackontotheimportmachinery. ThesechangesallowthedeprecationofseveralAPIsin\ntheimportsystemandalsoadditionofnewmethodstofindersandloaders.\n5.9. References 75\nThePythonLanguageReference,Release3.13.3\n76 Chapter5. Theimportsystem\nCHAPTER\nSIX\nEXPRESSIONS\nThischapterexplainsthemeaningoftheelementsofexpressionsinPython.\nSyntaxNotes: Inthisandthefollowingchapters,extendedBNFnotationwillbeusedtodescribesyntax,notlexical\nanalysis. When(onealternativeof)asyntaxrulehastheform\nname ::= othername\nandnosemanticsaregiven,thesemanticsofthisformofnamearethesameasforothername.\n6.1 Arithmetic conversions\nWhen a description of an arithmetic operator below uses the phrase \u201cthe numeric arguments are converted to a\ncommontype\u201d,thismeansthattheoperatorimplementationforbuilt-intypesworksasfollows:\n\u2022 Ifeitherargumentisacomplexnumber,theotherisconvertedtocomplex;\n\u2022 otherwise,ifeitherargumentisafloating-pointnumber,theotherisconvertedtofloatingpoint;\n\u2022 otherwise,bothmustbeintegersandnoconversionisnecessary.\nSomeadditionalrulesapplyforcertainoperators(e.g., astringasaleftargumenttothe\u2018%\u2019operator). Extensions\nmustdefinetheirownconversionbehavior.\n6.2 Atoms\nAtomsarethemostbasicelementsofexpressions. Thesimplestatomsareidentifiersorliterals. Formsenclosedin\nparentheses,bracketsorbracesarealsocategorizedsyntacticallyasatoms. Thesyntaxforatomsis:\natom ::= identifier | literal | enclosure\nenclosure ::= parenth_form | list_display | dict_display | set_display\n| generator_expression | yield_atom\n6.2.1 Identifiers (Names)\nAnidentifieroccurringasanatomisaname. SeesectionIdentifiersandkeywordsforlexicaldefinitionandsection\nNamingandbindingfordocumentationofnamingandbinding.\nWhen the name is bound to an object, evaluation of the atom yields that object. When a name is not bound, an\nattempttoevaluateitraisesaNameErrorexception.\nPrivatenamemangling\nWhenanidentifierthattextuallyoccursinaclassdefinitionbeginswithtwoormoreunderscorecharactersanddoes\nnotendintwoormoreunderscores,itisconsideredaprivatenameofthatclass.\n77\nThePythonLanguageReference,Release3.13.3\n(cid:181) Seealso\nTheclassspecifications.\nMoreprecisely,privatenamesaretransformedtoalongerformbeforecodeisgeneratedforthem. Ifthetransformed\nnameislongerthan255characters,implementation-definedtruncationmayhappen.\nThe transformation is independent of the syntactical context in which the identifier is used but only the following\nprivateidentifiersaremangled:\n\u2022 Anynameusedasthenameofavariablethatisassignedorreadoranynameofanattributebeingaccessed.\nThe__name__attributeofnestedfunctions,classes,andtypealiasesishowevernotmangled.\n\u2022 Thenameofimportedmodules,e.g.,__spaminimport __spam. Ifthemoduleispartofapackage(i.e.,\nitsnamecontainsadot),thenameisnotmangled,e.g.,the__fooinimport __foo.barisnotmangled.\n\u2022 Thenameofanimportedmember,e.g.,__finfrom spam import __f.\nThetransformationruleisdefinedasfollows:\n\u2022 Theclassname,withleadingunderscoresremovedandasingleleadingunderscoreinserted,isinsertedinfront\noftheidentifier,e.g.,theidentifier__spamoccurringinaclassnamedFoo,_Fooor__Fooistransformedto\n_Foo__spam.\n\u2022 Iftheclassnameconsistsonlyofunderscores, thetransformationistheidentity, e.g., theidentifier__spam\noccurringinaclassnamed_or__isleftasis.\n6.2.2 Literals\nPythonsupportsstringandbytesliteralsandvariousnumericliterals:\nliteral ::= stringliteral | bytesliteral\n| integer | floatnumber | imagnumber\nEvaluationofaliteralyieldsanobjectofthegiventype(string,bytes,integer,floating-pointnumber,complexnum-\nber) with the given value. The value may be approximated in the case of floating-point and imaginary (complex)\nliterals. SeesectionLiteralsfordetails.\nAll literals correspond to immutable data types, and hence the object\u2019s identity is less important than its value.\nMultiple evaluations of literals with the same value (either the same occurrence in the program text or a different\noccurrence)mayobtainthesameobjectoradifferentobjectwiththesamevalue.\n6.2.3 Parenthesized forms\nAparenthesizedformisanoptionalexpressionlistenclosedinparentheses:\nparenth_form ::= \"(\" [starred_expression] \")\"\nAparenthesizedexpressionlistyieldswhateverthatexpressionlistyields: ifthelistcontainsatleastonecomma,it\nyieldsatuple;otherwise,ityieldsthesingleexpressionthatmakesuptheexpressionlist.\nAnemptypairofparenthesesyieldsanemptytupleobject. Sincetuplesareimmutable,thesamerulesasforliterals\napply(i.e.,twooccurrencesoftheemptytuplemayormaynotyieldthesameobject).\nNotethattuplesarenotformedbytheparentheses,butratherbyuseofthecomma. Theexceptionistheemptytuple,\nfor which parentheses are required \u2014 allowing unparenthesized \u201cnothing\u201d in expressions would cause ambiguities\nandallowcommontypostopassuncaught.\n78 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\n6.2.4 Displays for lists, sets and dictionaries\nFor constructing a list, a set or a dictionary Python provides special syntax called \u201cdisplays\u201d, each of them in two\nflavors:\n\u2022 eitherthecontainercontentsarelistedexplicitly,or\n\u2022 theyarecomputedviaasetofloopingandfilteringinstructions,calledacomprehension.\nCommonsyntaxelementsforcomprehensionsare:\ncomprehension ::= assignment_expression comp_for\ncomp_for ::= [\"async\"] \"for\" target_list \"in\" or_test [comp_iter]\ncomp_iter ::= comp_for | comp_if\ncomp_if ::= \"if\" or_test [comp_iter]\nThecomprehensionconsistsofasingleexpressionfollowedbyatleastoneforclauseandzeroormorefororif\nclauses. Inthiscase,theelementsofthenewcontainerarethosethatwouldbeproducedbyconsideringeachofthe\nfororifclausesablock,nestingfromlefttoright,andevaluatingtheexpressiontoproduceanelementeachtime\ntheinnermostblockisreached.\nHowever,asidefromtheiterableexpressionintheleftmostforclause,thecomprehensionisexecutedinaseparate\nimplicitlynestedscope. Thisensuresthatnamesassignedtointhetargetlistdon\u2019t\u201cleak\u201dintotheenclosingscope.\nTheiterableexpressionintheleftmostforclauseisevaluateddirectlyintheenclosingscopeandthenpassedasan\nargumenttotheimplicitlynestedscope. Subsequentforclausesandanyfilterconditionintheleftmostforclause\ncannotbeevaluatedintheenclosingscopeastheymaydependonthevaluesobtainedfromtheleftmostiterable. For\nexample: [x*y for x in range(10) for y in range(x, x+10)].\nToensurethecomprehensionalwaysresultsinacontaineroftheappropriatetype,yieldandyield fromexpres-\nsionsareprohibitedintheimplicitlynestedscope.\nSince Python 3.6, in an async def function, an async for clause may be used to iterate over a asynchronous\niterator. Acomprehensioninanasync deffunctionmayconsistofeitherafororasync forclausefollowing\ntheleadingexpression,maycontainadditionalfororasync forclauses,andmayalsouseawaitexpressions.\nIfacomprehensioncontainsasync forclauses, orifitcontainsawaitexpressionsorotherasynchronouscom-\nprehensionsanywhereexcepttheiterableexpressionintheleftmostforclause,itiscalledanasynchronouscompre-\nhension. Anasynchronouscomprehensionmaysuspendtheexecutionofthecoroutinefunctioninwhichitappears.\nSeealsoPEP530.\nAddedinversion3.6: Asynchronouscomprehensionswereintroduced.\nChangedinversion3.8: yieldandyield fromprohibitedintheimplicitlynestedscope.\nChanged in version 3.11: Asynchronous comprehensions are now allowed inside comprehensions in asynchronous\nfunctions. Outercomprehensionsimplicitlybecomeasynchronous.\n6.2.5 List displays\nAlistdisplayisapossiblyemptyseriesofexpressionsenclosedinsquarebrackets:\nlist_display ::= \"[\" [flexible_expression_list | comprehension] \"]\"\nAlistdisplayyieldsanewlistobject,thecontentsbeingspecifiedbyeitheralistofexpressionsoracomprehension.\nWhenacomma-separatedlistofexpressionsissupplied,itselementsareevaluatedfromlefttorightandplacedinto\nthelistobjectinthatorder. Whenacomprehensionissupplied, thelistisconstructedfromtheelementsresulting\nfromthecomprehension.\n6.2.6 Set displays\nAsetdisplayisdenotedbycurlybracesanddistinguishablefromdictionarydisplaysbythelackofcolonsseparating\nkeysandvalues:\nset_display ::= \"{\" (flexible_expression_list | comprehension) \"}\"\n6.2. Atoms 79\nThePythonLanguageReference,Release3.13.3\nAsetdisplayyieldsanewmutablesetobject,thecontentsbeingspecifiedbyeitherasequenceofexpressionsora\ncomprehension. Whenacomma-separatedlistofexpressionsissupplied,itselementsareevaluatedfromlefttoright\nandaddedtothesetobject. Whenacomprehensionissupplied, thesetisconstructedfromtheelementsresulting\nfromthecomprehension.\nAnemptysetcannotbeconstructedwith{};thisliteralconstructsanemptydictionary.\n6.2.7 Dictionary displays\nAdictionarydisplayisapossiblyemptyseriesofdictitems(key/valuepairs)enclosedincurlybraces:\ndict_display ::= \"{\" [dict_item_list | dict_comprehension] \"}\"\ndict_item_list ::= dict_item (\",\" dict_item)* [\",\"]\ndict_item ::= expression \":\" expression | \"**\" or_expr\ndict_comprehension ::= expression \":\" expression comp_for\nAdictionarydisplayyieldsanewdictionaryobject.\nIfacomma-separatedsequenceofdictitemsisgiven,theyareevaluatedfromlefttorighttodefinetheentriesofthe\ndictionary: eachkeyobjectisusedasakeyintothedictionarytostorethecorrespondingvalue. Thismeansthatyou\ncanspecifythesamekeymultipletimesinthedictitemlist,andthefinaldictionary\u2019svalueforthatkeywillbethe\nlastonegiven.\nAdoubleasterisk**denotesdictionaryunpacking. Itsoperandmustbeamapping. Eachmappingitemisaddedto\nthenewdictionary. Latervaluesreplacevaluesalreadysetbyearlierdictitemsandearlierdictionaryunpackings.\nAddedinversion3.5: Unpackingintodictionarydisplays,originallyproposedbyPEP448.\nA dict comprehension, in contrast to list and set comprehensions, needs two expressions separated with a colon\nfollowedbytheusual\u201cfor\u201dand\u201cif\u201dclauses. Whenthecomprehensionisrun,theresultingkeyandvalueelements\nareinsertedinthenewdictionaryintheordertheyareproduced.\nRestrictionsonthetypesofthekeyvaluesarelistedearlierinsectionThestandardtypehierarchy. (Tosummarize,the\nkeytypeshouldbehashable,whichexcludesallmutableobjects.) Clashesbetweenduplicatekeysarenotdetected;\nthelastvalue(textuallyrightmostinthedisplay)storedforagivenkeyvalueprevails.\nChangedinversion3.8: PriortoPython3.8,indictcomprehensions,theevaluationorderofkeyandvaluewasnot\nwell-defined. InCPython,thevaluewasevaluatedbeforethekey. Startingwith3.8,thekeyisevaluatedbeforethe\nvalue,asproposedbyPEP572.\n6.2.8 Generator expressions\nAgeneratorexpressionisacompactgeneratornotationinparentheses:\ngenerator_expression ::= \"(\" expression comp_for \")\"\nAgeneratorexpressionyieldsanewgeneratorobject. Itssyntaxisthesameasforcomprehensions,exceptthatitis\nenclosedinparenthesesinsteadofbracketsorcurlybraces.\nVariablesusedinthegeneratorexpressionareevaluatedlazilywhenthe__next__()methodiscalledforthegen-\neratorobject(inthesamefashionasnormalgenerators). However,theiterableexpressionintheleftmostforclause\nisimmediatelyevaluated,sothatanerrorproducedbyitwillbeemittedatthepointwherethegeneratorexpression\nisdefined,ratherthanatthepointwherethefirstvalueisretrieved. Subsequentforclausesandanyfiltercondition\nin the leftmost for clause cannot be evaluated in the enclosing scope as they may depend on the values obtained\nfromtheleftmostiterable. Forexample: (x*y for x in range(10) for y in range(x, x+10)).\nTheparenthesescanbeomittedoncallswithonlyoneargument. SeesectionCallsfordetails.\nToavoidinterferingwiththeexpectedoperationofthegeneratorexpressionitself,yieldandyield fromexpres-\nsionsareprohibitedintheimplicitlydefinedgenerator.\nIf a generator expression contains either async for clauses or await expressions it is called an asynchronous\ngeneratorexpression. Anasynchronousgeneratorexpressionreturnsanewasynchronousgeneratorobject,whichis\nanasynchronousiterator(seeAsynchronousIterators).\n80 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\nAddedinversion3.6: Asynchronousgeneratorexpressionswereintroduced.\nChangedinversion3.7: PriortoPython3.7,asynchronousgeneratorexpressionscouldonlyappearinasync def\ncoroutines. Startingwith3.7,anyfunctioncanuseasynchronousgeneratorexpressions.\nChangedinversion3.8: yieldandyield fromprohibitedintheimplicitlynestedscope.\n6.2.9 Yield expressions\nyield_atom ::= \"(\" yield_expression \")\"\nyield_from ::= \"yield\" \"from\" expression\nyield_expression ::= \"yield\" yield_list | yield_from\nTheyieldexpressionisusedwhendefiningageneratorfunctionoranasynchronousgeneratorfunctionandthuscan\nonlybeusedinthebodyofafunctiondefinition. Usingayieldexpressioninafunction\u2019sbodycausesthatfunction\nto be a generator function, and using it in an async def function\u2019s body causes that coroutine function to be an\nasynchronousgeneratorfunction. Forexample:\ndef gen(): # defines a generator function\nyield 123\nasync def agen(): # defines an asynchronous generator function\nyield 123\nDuetotheirsideeffectsonthecontainingscope,yieldexpressionsarenotpermittedaspartoftheimplicitlydefined\nscopesusedtoimplementcomprehensionsandgeneratorexpressions.\nChangedinversion3.8: Yieldexpressionsprohibitedintheimplicitlynestedscopesusedtoimplementcomprehen-\nsionsandgeneratorexpressions.\nGeneratorfunctionsaredescribedbelow,whileasynchronousgeneratorfunctionsaredescribedseparatelyinsection\nAsynchronousgeneratorfunctions.\nWhen a generator function is called, it returns an iterator known as a generator. That generator then controls the\nexecutionofthegeneratorfunction. Theexecutionstartswhenoneofthegenerator\u2019smethodsiscalled. Atthattime,\ntheexecutionproceedstothefirstyieldexpression,whereitissuspendedagain,returningthevalueofyield_list\ntothegenerator\u2019scaller,orNoneifyield_listisomitted. Bysuspended,wemeanthatalllocalstateisretained,\nincludingthecurrentbindingsoflocalvariables,theinstructionpointer,theinternalevaluationstack,andthestate\nofanyexceptionhandling. Whentheexecutionisresumedbycallingoneofthegenerator\u2019smethods,thefunction\ncanproceedexactlyasiftheyieldexpressionwerejustanotherexternalcall. Thevalueoftheyieldexpressionafter\nresumingdependsonthemethodwhichresumedtheexecution. If__next__()isused(typicallyviaeitherafor\northenext()builtin)thentheresultisNone. Otherwise,ifsend()isused,thentheresultwillbethevaluepassed\nintothatmethod.\nAllofthismakesgeneratorfunctionsquitesimilartocoroutines;theyyieldmultipletimes,theyhavemorethanone\nentry point and their execution can be suspended. The only difference is that a generator function cannot control\nwheretheexecutionshouldcontinueafterityields;thecontrolisalwaystransferredtothegenerator\u2019scaller.\nYield expressions are allowed anywhere in a try construct. If the generator is not resumed before it is finalized\n(byreachingazeroreferencecountorbybeinggarbagecollected),thegenerator-iterator\u2019sclose()methodwillbe\ncalled,allowinganypendingfinallyclausestoexecute.\nWhenyield from <expr>isused,thesuppliedexpressionmustbeaniterable. Thevaluesproducedbyiterating\nthatiterablearepasseddirectlytothecallerofthecurrentgenerator\u2019smethods. Anyvaluespassedinwithsend()\nandanyexceptionspassedinwiththrow()arepassedtotheunderlyingiteratorifithastheappropriatemethods.\nIfthisisnotthecase,thensend()willraiseAttributeErrororTypeError,whilethrow()willjustraisethe\npassedinexceptionimmediately.\nWhentheunderlyingiteratoriscomplete,thevalueattributeoftheraisedStopIterationinstancebecomesthe\nvalueoftheyieldexpression. ItcanbeeithersetexplicitlywhenraisingStopIteration, orautomaticallywhen\nthesubiteratorisagenerator(byreturningavaluefromthesubgenerator).\nChangedinversion3.3: Addedyield from <expr>todelegatecontrolflowtoasubiterator.\n6.2. Atoms 81\nThePythonLanguageReference,Release3.13.3\nTheparenthesesmaybeomittedwhentheyieldexpressionisthesoleexpressionontherighthandsideofanassign-\nmentstatement.\n(cid:181) Seealso\nPEP255-SimpleGenerators\nTheproposalforaddinggeneratorsandtheyieldstatementtoPython.\nPEP342-CoroutinesviaEnhancedGenerators\nTheproposaltoenhancetheAPIandsyntaxofgenerators,makingthemusableassimplecoroutines.\nPEP380-SyntaxforDelegatingtoaSubgenerator\nTheproposaltointroducetheyield_fromsyntax,makingdelegationtosubgeneratorseasy.\nPEP525-AsynchronousGenerators\nTheproposalthatexpandedonPEP492byaddinggeneratorcapabilitiestocoroutinefunctions.\nGenerator-iteratormethods\nThissubsectiondescribesthemethodsofageneratoriterator. Theycanbeusedtocontroltheexecutionofagenerator\nfunction.\nNotethatcallinganyofthegeneratormethodsbelowwhenthegeneratorisalreadyexecutingraisesaValueError\nexception.\ngenerator.__next__()\nStartstheexecutionofageneratorfunctionorresumesitatthelastexecutedyieldexpression. Whenagenerator\nfunctionisresumedwitha__next__()method,thecurrentyieldexpressionalwaysevaluatestoNone. The\nexecutionthencontinuestothenextyieldexpression,wherethegeneratorissuspendedagain,andthevalueof\ntheyield_listisreturnedto__next__()\u2019scaller. Ifthegeneratorexitswithoutyieldinganothervalue,a\nStopIterationexceptionisraised.\nThismethodisnormallycalledimplicitly,e.g. byaforloop,orbythebuilt-innext()function.\ngenerator.send(value)\nResumestheexecutionand\u201csends\u201davalueintothegeneratorfunction. Thevalueargumentbecomestheresult\nofthecurrentyieldexpression. Thesend()methodreturnsthenextvalueyieldedbythegenerator,orraises\nStopIteration if the generator exits without yielding another value. When send() is called to start the\ngenerator,itmustbecalledwithNoneastheargument,becausethereisnoyieldexpressionthatcouldreceive\nthevalue.\ngenerator.throw(value)\n[ [ ]]\ngenerator.throw(type ,value ,traceback )\nRaises an exception at the point where the generator was paused, and returns the next value yielded by the\ngenerator function. If the generator exits without yielding another value, a StopIteration exception is\nraised. Ifthegeneratorfunctiondoesnotcatchthepassed-inexception,orraisesadifferentexception,then\nthatexceptionpropagatestothecaller.\nIntypicaluse,thisiscalledwithasingleexceptioninstancesimilartothewaytheraisekeywordisused.\nForbackwardscompatibility,however,thesecondsignatureissupported,followingaconventionfromolder\nversionsofPython. Thetypeargumentshouldbeanexceptionclass,andvalueshouldbeanexceptioninstance.\nIfthevalueisnotprovided,thetypeconstructoriscalledtogetaninstance. Iftracebackisprovided,itisset\nontheexception,otherwiseanyexisting__traceback__attributestoredinvaluemaybecleared.\nChangedinversion3.12: Thesecondsignature(type[,value[,traceback]])isdeprecatedandmayberemoved\ninafutureversionofPython.\ngenerator.close()\nRaises a GeneratorExit at the point where the generator function was paused. If the generator function\ncatches the exception and returns a value, this value is returned from close(). If the generator function\n82 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\nisalreadyclosed,orraisesGeneratorExit(bynotcatchingtheexception),close()returnsNone. Ifthe\ngeneratoryieldsavalue,aRuntimeErrorisraised. Ifthegeneratorraisesanyotherexception,itispropagated\ntothecaller. Ifthegeneratorhasalreadyexitedduetoanexceptionornormalexit,close()returnsNone\nandhasnoothereffect.\nChangedinversion3.13: Ifageneratorreturnsavalueuponbeingclosed,thevalueisreturnedbyclose().\nExamples\nHereisasimpleexamplethatdemonstratesthebehaviorofgeneratorsandgeneratorfunctions:\n>>> def echo(value=None):\n... print(\"Execution starts when 'next()' is called for the first time.\")\n... try:\n... while True:\n... try:\n... value = (yield value)\n... except Exception as e:\n... value = e\n... finally:\n... print(\"Don't forget to clean up when 'close()' is called.\")\n...\n>>> generator = echo(1)\n>>> print(next(generator))\nExecution starts when 'next()' is called for the first time.\n1\n>>> print(next(generator))\nNone\n>>> print(generator.send(2))\n2\n>>> generator.throw(TypeError, \"spam\")\nTypeError('spam',)\n>>> generator.close()\nDon't forget to clean up when 'close()' is called.\nForexamplesusingyield from,seepep-380in\u201cWhat\u2019sNewinPython.\u201d\nAsynchronousgeneratorfunctions\nThepresenceofayieldexpressioninafunctionormethoddefinedusingasync deffurtherdefinesthefunctionas\nanasynchronousgeneratorfunction.\nWhenanasynchronousgeneratorfunctioniscalled, itreturnsanasynchronousiteratorknownasanasynchronous\ngeneratorobject. Thatobjectthencontrolstheexecutionofthegeneratorfunction. Anasynchronousgeneratorobject\nistypicallyusedinanasync forstatementinacoroutinefunctionanalogouslytohowageneratorobjectwouldbe\nusedinaforstatement.\nCallingoneoftheasynchronousgenerator\u2019smethodsreturnsanawaitableobject,andtheexecutionstartswhenthis\nobjectisawaitedon. Atthattime,theexecutionproceedstothefirstyieldexpression,whereitissuspendedagain,\nreturningthevalueofyield_listtotheawaitingcoroutine. Aswithagenerator,suspensionmeansthatalllocal\nstateisretained,includingthecurrentbindingsoflocalvariables,theinstructionpointer,theinternalevaluationstack,\nandthestateofanyexceptionhandling. Whentheexecutionisresumedbyawaitingonthenextobjectreturnedby\ntheasynchronousgenerator\u2019smethods,thefunctioncanproceedexactlyasiftheyieldexpressionwerejustanother\nexternalcall. Thevalueoftheyieldexpressionafterresumingdependsonthemethodwhichresumedtheexecution.\nIf__anext__()isusedthentheresultisNone. Otherwise,ifasend()isused,thentheresultwillbethevalue\npassedintothatmethod.\nIf an asynchronousgeneratorhappensto exit earlyby break, thecallertaskbeingcancelled, orotherexceptions,\nthegenerator\u2019sasynccleanupcodewillrunandpossiblyraiseexceptionsoraccesscontextvariablesinanunexpected\ncontext\u2013perhapsafterthelifetimeoftasksitdepends,orduringtheeventloopshutdownwhentheasync-generator\n6.2. Atoms 83\nThePythonLanguageReference,Release3.13.3\ngarbage collection hook is called. To prevent this, the caller must explicitly close the async generator by calling\naclose()methodtofinalizethegeneratorandultimatelydetachitfromtheeventloop.\nInanasynchronousgeneratorfunction,yieldexpressionsareallowedanywhereinatry construct. However,ifan\nasynchronousgeneratorisnotresumedbeforeitisfinalized(byreachingazeroreferencecountorbybeinggarbage\ncollected), then a yield expression within a try construct could result in a failure to execute pending finally\nclauses. Inthiscase,itistheresponsibilityoftheeventlooporschedulerrunningtheasynchronousgeneratortocall\nthe asynchronous generator-iterator\u2019s aclose() method and run the resulting coroutine object, thus allowing any\npendingfinallyclausestoexecute.\nTotakecareoffinalizationuponeventlooptermination,aneventloopshoulddefineafinalizerfunctionwhichtakes\nanasynchronousgenerator-iteratorandpresumablycallsaclose()andexecutesthecoroutine. Thisfinalizermaybe\nregisteredbycallingsys.set_asyncgen_hooks(). Whenfirstiteratedover,anasynchronousgenerator-iterator\nwillstoretheregisteredfinalizertobecalleduponfinalization. Forareferenceexampleofafinalizermethodseethe\nimplementationofasyncio.Loop.shutdown_asyncgensinLib/asyncio/base_events.py.\nTheexpressionyield from <expr>isasyntaxerrorwhenusedinanasynchronousgeneratorfunction.\nAsynchronousgenerator-iteratormethods\nThissubsectiondescribesthemethodsofanasynchronousgeneratoriterator,whichareusedtocontroltheexecution\nofageneratorfunction.\nasync agen.__anext__()\nReturnsanawaitablewhichwhenrunstartstoexecutetheasynchronousgeneratororresumesitatthelastexe-\ncutedyieldexpression. Whenanasynchronousgeneratorfunctionisresumedwithan__anext__()method,\nthe current yield expression always evaluates to None in the returned awaitable, which when run will con-\ntinuetothenextyieldexpression. Thevalueoftheyield_listoftheyieldexpressionisthevalueofthe\nStopIterationexceptionraisedbythecompletingcoroutine. Iftheasynchronousgeneratorexitswithout\nyielding another value, the awaitable instead raises a StopAsyncIteration exception, signalling that the\nasynchronousiterationhascompleted.\nThismethodisnormallycalledimplicitlybyaasync forloop.\nasync agen.asend(value)\nReturns an awaitable which when run resumes the execution of the asynchronous generator. As with the\nsend()methodforagenerator,this\u201csends\u201davalueintotheasynchronousgeneratorfunction,andthevalue\nargumentbecomestheresultofthecurrentyieldexpression. Theawaitablereturnedbytheasend()method\nwill return the next value yielded by the generator as the value of the raised StopIteration, or raises\nStopAsyncIterationiftheasynchronousgeneratorexitswithoutyieldinganothervalue. Whenasend()\niscalledtostarttheasynchronousgenerator,itmustbecalledwithNoneastheargument,becausethereisno\nyieldexpressionthatcouldreceivethevalue.\nasync agen.athrow(value)\n[ [ ]]\nasync agen.athrow(type ,value ,traceback )\nReturnsanawaitablethatraisesanexceptionoftypetypeatthepointwheretheasynchronousgeneratorwas\npaused,andreturnsthenextvalueyieldedbythegeneratorfunctionasthevalueoftheraisedStopIteration\nexception. If the asynchronous generator exits without yielding another value, a StopAsyncIteration\nexceptionisraisedbytheawaitable. Ifthegeneratorfunctiondoesnotcatchthepassed-inexception,orraises\nadifferentexception,thenwhentheawaitableisrunthatexceptionpropagatestothecalleroftheawaitable.\nChangedinversion3.12: Thesecondsignature(type[,value[,traceback]])isdeprecatedandmayberemoved\ninafutureversionofPython.\nasync agen.aclose()\nReturns an awaitable that when run will throw a GeneratorExit into the asynchronous generator func-\ntion at the point where it was paused. If the asynchronous generator function then exits gracefully, is al-\nready closed, or raises GeneratorExit (by not catching the exception), then the returned awaitable will\nraiseaStopIterationexception. Anyfurtherawaitablesreturnedbysubsequentcallstotheasynchronous\ngenerator will raise a StopAsyncIteration exception. If the asynchronous generator yields a value, a\nRuntimeError is raised by the awaitable. If the asynchronous generator raises any other exception, it is\n84 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\npropagatedtothecalleroftheawaitable. Iftheasynchronousgeneratorhasalreadyexitedduetoanexception\nornormalexit,thenfurthercallstoaclose()willreturnanawaitablethatdoesnothing.\n6.3 Primaries\nPrimariesrepresentthemosttightlyboundoperationsofthelanguage. Theirsyntaxis:\nprimary ::= atom | attributeref | subscription | slicing | call\n6.3.1 Attribute references\nAnattributereferenceisaprimaryfollowedbyaperiodandaname:\nattributeref ::= primary \".\" identifier\nThe primary must evaluate to an object of a type that supports attribute references, which most objects do. This\nobjectisthenaskedtoproducetheattributewhosenameistheidentifier. Thetypeandvalueproducedisdetermined\nbytheobject. Multipleevaluationsofthesameattributereferencemayyielddifferentobjects.\nThis production can be customized by overriding the __getattribute__() method or the __getattr__()\nmethod. The__getattribute__()methodiscalledfirstandeitherreturnsavalueorraisesAttributeError\niftheattributeisnotavailable.\nIfanAttributeErrorisraisedandtheobjecthasa__getattr__()method,thatmethodiscalledasafallback.\n6.3.2 Subscriptions\nThe subscription of an instance of a container class will generally select an element from the container. The sub-\nscriptionofagenericclasswillgenerallyreturnaGenericAliasobject.\nsubscription ::= primary \"[\" flexible_expression_list \"]\"\nWhenanobjectissubscripted,theinterpreterwillevaluatetheprimaryandtheexpressionlist.\nTheprimarymustevaluatetoanobjectthatsupportssubscription. Anobjectmaysupportsubscriptionthroughdefin-\ningoneorbothof__getitem__()and__class_getitem__(). Whentheprimaryissubscripted,theevaluated\nresultoftheexpressionlistwillbepassedtooneofthesemethods. Formoredetailsonwhen__class_getitem__\niscalledinsteadof__getitem__,see__class_getitem__versus__getitem__.\nIf the expression list contains at least one comma, or if any of the expressions are starred, the expression list will\nevaluate to a tuple containing the items of the expression list. Otherwise, the expression list will evaluate to the\nvalueofthelist\u2019ssolemember.\nChangedinversion3.11: Expressionsinanexpressionlistmaybestarred. SeePEP646.\nForbuilt-inobjects,therearetwotypesofobjectsthatsupportsubscriptionvia__getitem__():\n1. Mappings. Iftheprimaryisamapping,theexpressionlistmustevaluatetoanobjectwhosevalueisoneofthe\nkeysofthemapping,andthesubscriptionselectsthevalueinthemappingthatcorrespondstothatkey. An\nexampleofabuiltinmappingclassisthedictclass.\n2. Sequences. Iftheprimaryisasequence,theexpressionlistmustevaluatetoanintoraslice(asdiscussed\ninthefollowingsection). Examplesofbuiltinsequenceclassesincludethestr,listandtupleclasses.\nThe formal syntax makes no special provision for negative indices in sequences. However, built-in sequences all\nprovidea__getitem__()methodthatinterpretsnegativeindicesbyaddingthelengthofthesequencetotheindex\nsothat, forexample, x[-1]selectsthelastitemofx. Theresultingvaluemustbeanonnegativeintegerlessthan\nthenumberofitemsinthesequence,andthesubscriptionselectstheitemwhoseindexisthatvalue(countingfrom\nzero). Sincethesupportfornegativeindicesandslicingoccursintheobject\u2019s__getitem__()method,subclasses\noverridingthismethodwillneedtoexplicitlyaddthatsupport.\nAstringisaspecialkindofsequencewhoseitemsarecharacters. Acharacterisnotaseparatedatatypebuta\nstringofexactlyonecharacter.\n6.3. Primaries 85\nThePythonLanguageReference,Release3.13.3\n6.3.3 Slicings\nAslicingselectsarangeofitemsinasequenceobject(e.g.,astring,tupleorlist). Slicingsmaybeusedasexpressions\norastargetsinassignmentordelstatements. Thesyntaxforaslicing:\nslicing ::= primary \"[\" slice_list \"]\"\nslice_list ::= slice_item (\",\" slice_item)* [\",\"]\nslice_item ::= expression | proper_slice\nproper_slice ::= [lower_bound] \":\" [upper_bound] [ \":\" [stride] ]\nlower_bound ::= expression\nupper_bound ::= expression\nstride ::= expression\nThereisambiguityintheformalsyntaxhere: anythingthatlookslikeanexpressionlistalsolookslikeaslicelist,so\nanysubscriptioncanbeinterpretedasaslicing. Ratherthanfurthercomplicatingthesyntax,thisisdisambiguated\nbydefiningthatinthiscasetheinterpretationasasubscriptiontakespriorityovertheinterpretationasaslicing(this\nisthecaseiftheslicelistcontainsnoproperslice).\nThe semantics for a slicing are as follows. The primary is indexed (using the same __getitem__() method as\nnormalsubscription)withakeythatisconstructedfromtheslicelist,asfollows. Iftheslicelistcontainsatleastone\ncomma,thekeyisatuplecontainingtheconversionofthesliceitems;otherwise,theconversionofthelonesliceitem\nisthekey. Theconversionofasliceitemthatisanexpressionisthatexpression. Theconversionofapropersliceis\nasliceobject(seesectionThestandardtypehierarchy)whosestart,stopandstepattributesarethevaluesofthe\nexpressionsgivenaslowerbound,upperboundandstride,respectively,substitutingNoneformissingexpressions.\n6.3.4 Calls\nAcallcallsacallableobject(e.g.,afunction)withapossiblyemptyseriesofarguments:\ncall ::= primary \"(\" [argument_list [\",\"] | comprehension] \")\"\nargument_list ::= positional_arguments [\",\" starred_and_keywords]\n[\",\" keywords_arguments]\n| starred_and_keywords [\",\" keywords_arguments]\n| keywords_arguments\npositional_arguments ::= positional_item (\",\" positional_item)*\npositional_item ::= assignment_expression | \"*\" expression\nstarred_and_keywords ::= (\"*\" expression | keyword_item)\n(\",\" \"*\" expression | \",\" keyword_item)*\nkeywords_arguments ::= (keyword_item | \"**\" expression)\n(\",\" keyword_item | \",\" \"**\" expression)*\nkeyword_item ::= identifier \"=\" expression\nAn optional trailing comma may be present after the positional and keyword arguments but does not affect the\nsemantics.\nTheprimarymustevaluatetoacallableobject(user-definedfunctions,built-infunctions,methodsofbuilt-inobjects,\nclassobjects,methodsofclassinstances,andallobjectshavinga__call__()methodarecallable). Allargument\nexpressionsareevaluatedbeforethecallisattempted. PleaserefertosectionFunctiondefinitionsforthesyntaxof\nformalparameterlists.\nIfkeywordargumentsarepresent,theyarefirstconvertedtopositionalarguments,asfollows. First,alistofunfilled\nslotsiscreatedfortheformalparameters. IfthereareNpositionalarguments, theyareplacedinthefirstNslots.\nNext,foreachkeywordargument,theidentifierisusedtodeterminethecorrespondingslot(iftheidentifieristhe\nsameasthefirstformalparametername,thefirstslotisused,andsoon). Iftheslotisalreadyfilled,aTypeError\nexceptionisraised. Otherwise,theargumentisplacedintheslot,fillingit(eveniftheexpressionisNone,itfillsthe\nslot). Whenallargumentshavebeenprocessed,theslotsthatarestillunfilledarefilledwiththecorrespondingdefault\nvaluefromthefunctiondefinition. (Defaultvaluesarecalculated,once,whenthefunctionisdefined;thus,amutable\nobjectsuchasalistordictionaryusedasdefaultvaluewillbesharedbyallcallsthatdon\u2019tspecifyanargumentvalue\nforthecorrespondingslot;thisshouldusuallybeavoided.) Ifthereareanyunfilledslotsforwhichnodefaultvalueis\nspecified,aTypeErrorexceptionisraised. Otherwise,thelistoffilledslotsisusedastheargumentlistforthecall.\n86 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\nCPythonimplementationdetail: Animplementationmayprovidebuilt-infunctionswhosepositionalparameters\ndonothavenames,eveniftheyare\u2018named\u2019forthepurposeofdocumentation,andwhichthereforecannotbesupplied\nbykeyword. InCPython,thisisthecaseforfunctionsimplementedinCthatusePyArg_ParseTuple()toparse\ntheirarguments.\nIftherearemorepositionalargumentsthanthereareformalparameterslots,aTypeErrorexceptionisraised,unless\naformalparameterusingthesyntax*identifierispresent; inthiscase, thatformalparameterreceivesatuple\ncontainingtheexcesspositionalarguments(oranemptytupleiftherewerenoexcesspositionalarguments).\nIfanykeywordargumentdoesnotcorrespondtoaformalparametername,aTypeErrorexceptionisraised,unlessa\nformalparameterusingthesyntax**identifierispresent;inthiscase,thatformalparameterreceivesadictionary\ncontaining the excess keyword arguments (using the keywords as keys and the argument values as corresponding\nvalues),ora(new)emptydictionaryiftherewerenoexcesskeywordarguments.\nIfthesyntax*expressionappearsinthefunctioncall,expressionmustevaluatetoaniterable. Elementsfrom\ntheseiterablesaretreatedasiftheywereadditionalpositionalarguments. Forthecallf(x1, x2, *y, x3, x4),\nifyevaluatestoasequencey1,\u2026,yM,thisisequivalenttoacallwithM+4positionalargumentsx1,x2,y1,\u2026,yM,\nx3,x4.\nAconsequenceofthisisthatalthoughthe*expressionsyntaxmayappearafterexplicitkeywordarguments,itis\nprocessedbeforethekeywordarguments(andany**expressionarguments\u2013seebelow). So:\n>>> def f(a, b):\n... print(a, b)\n...\n>>> f(b=1, *(2,))\n2 1\n>>> f(a=1, *(2,))\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: f() got multiple values for keyword argument 'a'\n>>> f(1, *(2,))\n1 2\nItisunusualforbothkeywordargumentsandthe*expressionsyntaxtobeusedinthesamecall,soinpractice\nthisconfusiondoesnotoftenarise.\nIfthesyntax**expressionappearsinthefunctioncall, expressionmustevaluatetoamapping, thecontents\nofwhicharetreatedasadditionalkeywordarguments. Ifaparametermatchingakeyhasalreadybeengivenavalue\n(byanexplicitkeywordargument,orfromanotherunpacking),aTypeErrorexceptionisraised.\nWhen**expressionisused,eachkeyinthismappingmustbeastring. Eachvaluefromthemappingisassigned\ntothefirstformalparametereligibleforkeywordassignmentwhosenameisequaltothekey. Akeyneednotbea\nPythonidentifier(e.g. \"max-temp \u00b0F\"isacceptable,althoughitwillnotmatchanyformalparameterthatcouldbe\ndeclared). Ifthereisnomatchtoaformalparameterthekey-valuepairiscollectedbythe**parameter,ifthereis\none,orifthereisnot,aTypeErrorexceptionisraised.\nFormalparametersusingthesyntax*identifieror**identifiercannotbeusedaspositionalargumentslots\noraskeywordargumentnames.\nChangedinversion3.5: Functioncallsacceptanynumberof*and**unpackings,positionalargumentsmayfollow\niterable unpackings (*), and keyword arguments may follow dictionary unpackings (**). Originally proposed by\nPEP448.\nAcallalwaysreturnssomevalue,possiblyNone,unlessitraisesanexception. Howthisvalueiscomputeddepends\nonthetypeofthecallableobject.\nIfitis\u2014\nauser-definedfunction:\nThecodeblockforthefunctionisexecuted,passingittheargumentlist. Thefirstthingthecodeblockwilldo\nisbindtheformalparameterstothearguments;thisisdescribedinsectionFunctiondefinitions. Whenthecode\nblockexecutesareturnstatement, thisspecifiesthereturnvalueofthefunctioncall. Ifexecutionreaches\ntheendofthecodeblockwithoutexecutingareturnstatement,thereturnvalueisNone.\n6.3. Primaries 87\nThePythonLanguageReference,Release3.13.3\nabuilt-infunctionormethod:\nTheresultisuptotheinterpreter;seebuilt-in-funcsforthedescriptionsofbuilt-infunctionsandmethods.\naclassobject:\nAnewinstanceofthatclassisreturned.\naclassinstancemethod:\nThecorrespondinguser-definedfunctioniscalled,withanargumentlistthatisonelongerthantheargument\nlistofthecall: theinstancebecomesthefirstargument.\naclassinstance:\nTheclassmustdefinea__call__()method;theeffectisthenthesameasifthatmethodwascalled.\n6.4 Await expression\nSuspendtheexecutionofcoroutineonanawaitableobject. Canonlybeusedinsideacoroutinefunction.\nawait_expr ::= \"await\" primary\nAddedinversion3.5.\n6.5 The power operator\nThepoweroperatorbindsmoretightlythanunaryoperatorsonitsleft;itbindslesstightlythanunaryoperatorson\nitsright. Thesyntaxis:\npower ::= (await_expr | primary) [\"**\" u_expr]\nThus, inanunparenthesizedsequenceofpowerandunaryoperators, theoperatorsareevaluatedfromrighttoleft\n(thisdoesnotconstraintheevaluationorderfortheoperands): -1**2resultsin-1.\nThepoweroperatorhasthesamesemanticsasthebuilt-inpow()function,whencalledwithtwoarguments: ityields\nitsleftargumentraisedtothepowerofitsrightargument. Thenumericargumentsarefirstconvertedtoacommon\ntype,andtheresultisofthattype.\nForintoperands,theresulthasthesametypeastheoperandsunlessthesecondargumentisnegative;inthatcase,all\nargumentsareconvertedtofloatandafloatresultisdelivered. Forexample,10**2returns100,but10**-2returns\n0.01.\nRaising0.0toanegativepowerresultsinaZeroDivisionError. Raisinganegativenumbertoafractionalpower\nresultsinacomplexnumber. (InearlierversionsitraisedaValueError.)\nThisoperationcanbecustomizedusingthespecial__pow__()and__rpow__()methods.\n6.6 Unary arithmetic and bitwise operations\nAllunaryarithmeticandbitwiseoperationshavethesamepriority:\nu_expr ::= power | \"-\" u_expr | \"+\" u_expr | \"~\" u_expr\nTheunary-(minus)operatoryieldsthenegationofitsnumericargument;theoperationcanbeoverriddenwiththe\n__neg__()specialmethod.\nThe unary + (plus) operator yields its numeric argument unchanged; the operation can be overridden with the\n__pos__()specialmethod.\nThe unary ~ (invert) operator yields the bitwise inversion of its integer argument. The bitwise inversion of x is\ndefinedas-(x+1). Itonlyappliestointegralnumbersortocustomobjectsthatoverridethe__invert__()special\nmethod.\nInallthreecases,iftheargumentdoesnothavethepropertype,aTypeErrorexceptionisraised.\n88 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\n6.7 Binary arithmetic operations\nThe binary arithmetic operations have the conventional priority levels. Note that some of these operations also\napplytocertainnon-numerictypes. Apartfromthepoweroperator,thereareonlytwolevels,oneformultiplicative\noperatorsandoneforadditiveoperators:\nm_expr ::= u_expr | m_expr \"*\" u_expr | m_expr \"@\" m_expr |\nm_expr \"//\" u_expr | m_expr \"/\" u_expr |\nm_expr \"%\" u_expr\na_expr ::= m_expr | a_expr \"+\" m_expr | a_expr \"-\" m_expr\nThe*(multiplication)operatoryieldstheproductofitsarguments. Theargumentsmusteitherbothbenumbers,or\noneargumentmustbeanintegerandtheothermustbeasequence. Intheformercase,thenumbersareconvertedtoa\ncommontypeandthenmultipliedtogether. Inthelattercase,sequencerepetitionisperformed;anegativerepetition\nfactoryieldsanemptysequence.\nThisoperationcanbecustomizedusingthespecial__mul__()and__rmul__()methods.\nThe@(at)operatorisintendedtobeusedformatrixmultiplication. NobuiltinPythontypesimplementthisoperator.\nThisoperationcanbecustomizedusingthespecial__matmul__()and__rmatmul__()methods.\nAddedinversion3.5.\nThe/(division)and//(floordivision)operatorsyieldthequotientoftheirarguments. Thenumericargumentsare\nfirst converted to a common type. Division of integers yields a float, while floor division of integers results in an\ninteger; the result is that of mathematical division with the \u2018floor\u2019 function applied to the result. Division by zero\nraisestheZeroDivisionErrorexception.\nThedivisionoperationcanbecustomizedusingthespecial__truediv__()and__rtruediv__()methods. The\nfloordivisionoperationcanbecustomizedusingthespecial__floordiv__()and__rfloordiv__()methods.\nThe%(modulo)operatoryieldstheremainderfromthedivisionofthefirstargumentbythesecond. Thenumeric\nargumentsarefirstconvertedtoacommontype. AzerorightargumentraisestheZeroDivisionErrorexception.\nTheargumentsmaybefloating-pointnumbers,e.g.,3.14%0.7equals0.34(since3.14equals4*0.7 + 0.34.)\nThemodulooperatoralwaysyieldsaresultwiththesamesignasitssecondoperand(orzero);theabsolutevalueof\ntheresultisstrictlysmallerthantheabsolutevalueofthesecondoperand1.\nThefloordivisionandmodulooperatorsareconnectedbythefollowingidentity: x == (x//y)*y + (x%y). Floor\ndivisionandmoduloarealsoconnectedwiththebuilt-infunctiondivmod():divmod(x, y) == (x//y, x%y).2.\nInadditiontoperformingthemodulooperationonnumbers, the%operatorisalsooverloadedbystringobjectsto\nperformold-stylestringformatting(alsoknownasinterpolation). Thesyntaxforstringformattingisdescribedinthe\nPythonLibraryReference,sectionold-string-formatting.\nThemodulooperationcanbecustomizedusingthespecial__mod__()and__rmod__()methods.\nThefloordivisionoperator,themodulooperator,andthedivmod()functionarenotdefinedforcomplexnumbers.\nInstead,converttoafloating-pointnumberusingtheabs()functionifappropriate.\nThe + (addition) operator yields the sum of its arguments. The arguments must either both be numbers or both\nbe sequences of the same type. In the former case, the numbers are converted to a common type and then added\ntogether. Inthelattercase,thesequencesareconcatenated.\nThisoperationcanbecustomizedusingthespecial__add__()and__radd__()methods.\nThe-(subtraction)operatoryieldsthedifferenceofitsarguments. Thenumericargumentsarefirstconvertedtoa\ncommontype.\nThisoperationcanbecustomizedusingthespecial__sub__()and__rsub__()methods.\n1Whileabs(x%y) < abs(y)istruemathematically,forfloatsitmaynotbetruenumericallyduetoroundoff.Forexample,andassuming\naplatformonwhichaPythonfloatisanIEEE754double-precisionnumber,inorderthat-1e-100 % 1e100havethesamesignas1e100,\nthecomputedresultis-1e-100 + 1e100,whichisnumericallyexactlyequalto1e100. Thefunctionmath.fmod()returnsaresultwhose\nsignmatchesthesignofthefirstargumentinstead,andsoreturns-1e-100inthiscase. Whichapproachismoreappropriatedependsonthe\napplication.\n2Ifxisveryclosetoanexactintegermultipleofy,it\u2019spossibleforx//ytobeonelargerthan(x-x%y)//yduetorounding.Insuchcases,\nPythonreturnsthelatterresult,inordertopreservethatdivmod(x,y)[0] * y + x % ybeveryclosetox.\n6.7. Binaryarithmeticoperations 89\nThePythonLanguageReference,Release3.13.3\n6.8 Shifting operations\nTheshiftingoperationshavelowerprioritythanthearithmeticoperations:\nshift_expr ::= a_expr | shift_expr (\"<<\" | \">>\") a_expr\nTheseoperatorsacceptintegersasarguments. Theyshiftthefirstargumenttotheleftorrightbythenumberofbits\ngivenbythesecondargument.\nTheleftshiftoperationcanbecustomizedusingthespecial__lshift__()and__rlshift__()methods. The\nrightshiftoperationcanbecustomizedusingthespecial__rshift__()and__rrshift__()methods.\nArightshiftbynbitsisdefinedasfloordivisionbypow(2,n). Aleftshiftbynbitsisdefinedasmultiplicationwith\npow(2,n).\n6.9 Binary bitwise operations\nEachofthethreebitwiseoperationshasadifferentprioritylevel:\nand_expr ::= shift_expr | and_expr \"&\" shift_expr\nxor_expr ::= and_expr | xor_expr \"^\" and_expr\nor_expr ::= xor_expr | or_expr \"|\" xor_expr\nThe&operatoryieldsthebitwiseANDofitsarguments,whichmustbeintegersoroneofthemmustbeacustom\nobjectoverriding__and__()or__rand__()specialmethods.\nThe^operatoryieldsthebitwiseXOR(exclusiveOR)ofitsarguments,whichmustbeintegersoroneofthemmust\nbeacustomobjectoverriding__xor__()or__rxor__()specialmethods.\nThe|operatoryieldsthebitwise(inclusive)ORofitsarguments,whichmustbeintegersoroneofthemmustbea\ncustomobjectoverriding__or__()or__ror__()specialmethods.\n6.10 Comparisons\nUnlike C, all comparison operations in Python have the same priority, which is lower than that of any arithmetic,\nshiftingorbitwiseoperation. AlsounlikeC,expressionslikea < b < chavetheinterpretationthatisconventional\ninmathematics:\ncomparison ::= or_expr (comp_operator or_expr)*\ncomp_operator ::= \"<\" | \">\" | \"==\" | \">=\" | \"<=\" | \"!=\"\n| \"is\" [\"not\"] | [\"not\"] \"in\"\nComparisonsyieldbooleanvalues:TrueorFalse. Customrichcomparisonmethodsmayreturnnon-booleanvalues.\nInthiscasePythonwillcallbool()onsuchvalueinbooleancontexts.\nComparisonscanbechainedarbitrarily,e.g.,x < y <= zisequivalenttox < y and y <= z,exceptthatyis\nevaluatedonlyonce(butinbothcaseszisnotevaluatedatallwhenx < yisfoundtobefalse).\nFormally,ifa, b, c,\u2026, y, zareexpressionsandop1, op2,\u2026, opN arecomparisonoperators,thena op1 b op2\nc ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is\nevaluatedatmostonce.\nNote that a op1 b op2 c doesn\u2019t imply any kind of comparison between a and c, so that, e.g., x < y > z is\nperfectlylegal(thoughperhapsnotpretty).\n6.10.1 Value comparisons\nTheoperators<,>,==,>=,<=,and!=comparethevaluesoftwoobjects. Theobjectsdonotneedtohavethesame\ntype.\nChapterObjects,valuesandtypesstatesthatobjectshaveavalue(inadditiontotypeandidentity). Thevalueofan\nobjectisaratherabstractnotioninPython: Forexample,thereisnocanonicalaccessmethodforanobject\u2019svalue.\n90 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\nAlso,thereisnorequirementthatthevalueofanobjectshouldbeconstructedinaparticularway,e.g. comprised\nofallitsdataattributes. Comparisonoperatorsimplementaparticularnotionofwhatthevalueofanobjectis. One\ncanthinkofthemasdefiningthevalueofanobjectindirectly,bymeansoftheircomparisonimplementation.\nBecause all types are (direct or indirect) subtypes of object, they inherit the default comparison behavior from\nobject. Typescancustomizetheircomparisonbehaviorbyimplementingrichcomparisonmethodslike__lt__(),\ndescribedinBasiccustomization.\nThedefaultbehaviorforequalitycomparison(==and!=)isbasedontheidentityoftheobjects. Hence, equality\ncomparisonofinstanceswiththesameidentityresultsinequality,andequalitycomparisonofinstanceswithdifferent\nidentitiesresultsininequality. Amotivationforthisdefaultbehavioristhedesirethatallobjectsshouldbereflexive\n(i.e. x is yimpliesx == y).\nAdefaultordercomparison(<,>,<=,and>=)isnotprovided;anattemptraisesTypeError. Amotivationforthis\ndefaultbehavioristhelackofasimilarinvariantasforequality.\nThebehaviorofthedefaultequalitycomparison,thatinstanceswithdifferentidentitiesarealwaysunequal,maybe\nincontrasttowhattypeswillneedthathaveasensibledefinitionofobjectvalueandvalue-basedequality. Suchtypes\nwillneedtocustomizetheircomparisonbehavior,andinfact,anumberofbuilt-intypeshavedonethat.\nThefollowinglistdescribesthecomparisonbehaviorofthemostimportantbuilt-intypes.\n\u2022 Numbersofbuilt-innumerictypes(typesnumeric)andofthestandardlibrarytypesfractions.Fraction\nanddecimal.Decimalcanbecomparedwithinandacrosstheirtypes,withtherestrictionthatcomplexnum-\nbersdonotsupportordercomparison. Withinthelimitsofthetypesinvolved,theycomparemathematically\n(algorithmically)correctwithoutlossofprecision.\nThenot-a-numbervaluesfloat('NaN')anddecimal.Decimal('NaN')arespecial. Anyorderedcom-\nparison of a number to a not-a-number value is false. A counter-intuitive implication is that not-a-number\nvaluesarenotequaltothemselves. Forexample,ifx = float('NaN'),3 < x,x < 3andx == xareall\nfalse,whilex != xistrue. ThisbehavioriscompliantwithIEEE754.\n\u2022 NoneandNotImplementedaresingletons. PEP8advisesthatcomparisonsforsingletonsshouldalwaysbe\ndonewithisoris not,nevertheequalityoperators.\n\u2022 Binarysequences(instancesofbytesorbytearray)canbecomparedwithinandacrosstheirtypes. They\ncomparelexicographicallyusingthenumericvaluesoftheirelements.\n\u2022 Strings(instancesofstr)comparelexicographicallyusingthenumericalUnicodecodepoints(theresultof\nthebuilt-infunctionord())oftheircharacters.3\nStringsandbinarysequencescannotbedirectlycompared.\n\u2022 Sequences(instancesoftuple,list,orrange)canbecomparedonlywithineachoftheirtypes,withthe\nrestriction that ranges do not support order comparison. Equality comparison across these types results in\ninequality,andorderingcomparisonacrossthesetypesraisesTypeError.\nSequences compare lexicographically using comparison of corresponding elements. The built-in containers\ntypically assume identical objects are equal to themselves. That lets them bypass equality tests for identical\nobjectstoimproveperformanceandtomaintaintheirinternalinvariants.\nLexicographicalcomparisonbetweenbuilt-incollectionsworksasfollows:\n\u2013 For two collections to compare equal, they must be of the same type, have the same length, and each\npair of corresponding elements must compare equal (for example, [1,2] == (1,2) is false because\nthetypeisnotthesame).\n3TheUnicodestandarddistinguishesbetweencodepoints(e.g.U+0041)andabstractcharacters(e.g.\u201cLATINCAPITALLETTERA\u201d).While\nmostabstractcharactersinUnicodeareonlyrepresentedusingonecodepoint,thereisanumberofabstractcharactersthatcaninadditionbe\nrepresentedusingasequenceofmorethanonecodepoint.Forexample,theabstractcharacter\u201cLATINCAPITALLETTERCWITHCEDILLA\u201d\ncanberepresentedasasingleprecomposedcharacteratcodepositionU+00C7,orasasequenceofabasecharacteratcodepositionU+0043\n(LATINCAPITALLETTERC),followedbyacombiningcharacteratcodepositionU+0327(COMBININGCEDILLA).\nThecomparisonoperatorsonstringscompareatthelevelofUnicodecodepoints. Thismaybecounter-intuitivetohumans. Forexample,\n\"\\u00C7\" == \"\\u0043\\u0327\"isFalse,eventhoughbothstringsrepresentthesameabstractcharacter\u201cLATINCAPITALLETTERC\nWITHCEDILLA\u201d.\nTocomparestringsatthelevelofabstractcharacters(thatis,inawayintuitivetohumans),useunicodedata.normalize().\n6.10. Comparisons 91\nThePythonLanguageReference,Release3.13.3\n\u2013 Collectionsthatsupportordercomparisonareorderedthesameastheirfirstunequalelements(forex-\nample, [1,2,x] <= [1,2,y] has the same value as x <= y). If a corresponding element does not\nexist,theshortercollectionisorderedfirst(forexample,[1,2] < [1,2,3]istrue).\n\u2022 Mappings(instancesofdict)compareequalifandonlyiftheyhaveequal(key, value)pairs. Equality\ncomparisonofthekeysandvaluesenforcesreflexivity.\nOrdercomparisons(<,>,<=,and>=)raiseTypeError.\n\u2022 Sets(instancesofsetorfrozenset)canbecomparedwithinandacrosstheirtypes.\nTheydefineordercomparisonoperatorstomeansubsetandsupersettests. Thoserelationsdonotdefinetotal\norderings(forexample,thetwosets{1,2}and{2,3}arenotequal,norsubsetsofoneanother,norsupersets\nofoneanother). Accordingly,setsarenotappropriateargumentsforfunctionswhichdependontotalordering\n(forexample,min(),max(),andsorted()produceundefinedresultsgivenalistofsetsasinputs).\nComparisonofsetsenforcesreflexivityofitselements.\n\u2022 Mostotherbuilt-intypeshavenocomparisonmethodsimplemented, sotheyinheritthedefaultcomparison\nbehavior.\nUser-definedclassesthatcustomizetheircomparisonbehaviorshouldfollowsomeconsistencyrules,ifpossible:\n\u2022 Equalitycomparisonshouldbereflexive. Inotherwords,identicalobjectsshouldcompareequal:\nx is yimpliesx == y\n\u2022 Comparisonshouldbesymmetric. Inotherwords,thefollowingexpressionsshouldhavethesameresult:\nx == yandy == x\nx != yandy != x\nx < yandy > x\nx <= yandy >= x\n\u2022 Comparisonshouldbetransitive. Thefollowing(non-exhaustive)examplesillustratethat:\nx > y and y > zimpliesx > z\nx < y and y <= zimpliesx < z\n\u2022 Inverse comparison should result in the boolean negation. In other words, the following expressions should\nhavethesameresult:\nx == yandnot x != y\nx < yandnot x >= y(fortotalordering)\nx > yandnot x <= y(fortotalordering)\nThelasttwoexpressionsapplytototallyorderedcollections(e.g. tosequences,butnottosetsormappings).\nSeealsothetotal_ordering()decorator.\n\u2022 Thehash()resultshouldbeconsistentwithequality. Objectsthatareequalshouldeitherhavethesamehash\nvalue,orbemarkedasunhashable.\nPythondoesnotenforcetheseconsistencyrules. Infact,thenot-a-numbervaluesareanexamplefornotfollowing\ntheserules.\n6.10.2 Membership test operations\nTheoperatorsinandnot intestformembership. x in sevaluatestoTrueifx isamemberofs, andFalse\notherwise. x not in sreturnsthenegationofx in s. Allbuilt-insequencesandsettypessupportthisaswell\nasdictionary,forwhichintestswhetherthedictionaryhasagivenkey. Forcontainertypessuchaslist,tuple,set,\nfrozenset,dict,orcollections.deque,theexpressionx in yisequivalenttoany(x is e or x == e for e in\ny).\nForthestringandbytestypes,x in yisTrueifandonlyifxisasubstringofy. Anequivalenttestisy.find(x)\n!= -1. Emptystringsarealwaysconsideredtobeasubstringofanyotherstring,so\"\" in \"abc\"willreturnTrue.\n92 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\nFor user-defined classes which define the __contains__() method, x in y returns True if y.\n__contains__(x)returnsatruevalue,andFalseotherwise.\nForuser-definedclasseswhichdonotdefine__contains__()butdodefine__iter__(),x in yisTrueifsome\nvaluez,forwhichtheexpressionx is z or x == zistrue,isproducedwhileiteratingovery. Ifanexceptionis\nraisedduringtheiteration,itisasifinraisedthatexception.\nLastly, theold-styleiterationprotocolistried: ifaclassdefines__getitem__(), x in yisTrueifandonlyif\nthereisanon-negativeintegerindexisuchthatx is y[i] or x == y[i],andnolowerintegerindexraisesthe\nIndexErrorexception. (Ifanyotherexceptionisraised,itisasifinraisedthatexception).\nTheoperatornot inisdefinedtohavetheinversetruthvalueofin.\n6.10.3 Identity comparisons\nTheoperatorsisandis nottestforanobject\u2019sidentity: x is yistrueifandonlyifxandyarethesameobject.\nAnObject\u2019sidentityisdeterminedusingtheid()function. x is not yyieldstheinversetruthvalue.4\n6.11 Boolean operations\nor_test ::= and_test | or_test \"or\" and_test\nand_test ::= not_test | and_test \"and\" not_test\nnot_test ::= comparison | \"not\" not_test\nInthecontextofBooleanoperations,andalsowhenexpressionsareusedbycontrolflowstatements,thefollowing\nvaluesareinterpretedasfalse: False,None,numericzeroofalltypes,andemptystringsandcontainers(including\nstrings,tuples,lists,dictionaries,setsandfrozensets). Allothervaluesareinterpretedastrue. User-definedobjects\ncancustomizetheirtruthvaluebyprovidinga__bool__()method.\nTheoperatornotyieldsTrueifitsargumentisfalse,Falseotherwise.\nTheexpressionx and yfirstevaluatesx;ifxisfalse,itsvalueisreturned;otherwise,yisevaluatedandtheresulting\nvalueisreturned.\nTheexpressionx or yfirstevaluatesx;ifxistrue,itsvalueisreturned;otherwise,yisevaluatedandtheresulting\nvalueisreturned.\nNotethatneitherand noror restrictthevalueandtypetheyreturntoFalseandTrue,butratherreturnthelast\nevaluated argument. This is sometimes useful, e.g., if s is a string that should be replaced by a default value if it\nisempty,theexpressions or 'foo'yieldsthedesiredvalue. Becausenothastocreateanewvalue,itreturnsa\nbooleanvalueregardlessofthetypeofitsargument(forexample,not 'foo'producesFalseratherthan''.)\n6.12 Assignment expressions\nassignment_expression ::= [identifier \":=\"] expression\nAnassignmentexpression(sometimesalsocalleda\u201cnamedexpression\u201dor\u201cwalrus\u201d)assignsanexpressiontoan\nidentifier,whilealsoreturningthevalueoftheexpression.\nOnecommonusecaseiswhenhandlingmatchedregularexpressions:\nif matching := pattern.search(data):\ndo_something(matching)\nOr,whenprocessingafilestreaminchunks:\nwhile chunk := file.read(9000):\nprocess(chunk)\n4Duetoautomaticgarbage-collection,freelists,andthedynamicnatureofdescriptors,youmaynoticeseeminglyunusualbehaviourincertain\nusesoftheisoperator,likethoseinvolvingcomparisonsbetweeninstancemethods,orconstants.Checktheirdocumentationformoreinfo.\n6.11. Booleanoperations 93\nThePythonLanguageReference,Release3.13.3\nAssignment expressions must be surrounded by parentheses when used as expression statements and when used\nas sub-expressions in slicing, conditional, lambda, keyword-argument, and comprehension-if expressions and in\nassert, with, and assignment statements. In all other places where they can be used, parentheses are not re-\nquired,includinginifandwhilestatements.\nAddedinversion3.8: SeePEP572formoredetailsaboutassignmentexpressions.\n6.13 Conditional expressions\nconditional_expression ::= or_test [\"if\" or_test \"else\" expression]\nexpression ::= conditional_expression | lambda_expr\nConditionalexpressions(sometimescalleda\u201cternaryoperator\u201d)havethelowestpriorityofallPythonoperations.\nThe expression x if C else y first evaluates the condition, C rather than x. If C is true, x is evaluated and its\nvalueisreturned;otherwise,yisevaluatedanditsvalueisreturned.\nSeePEP308formoredetailsaboutconditionalexpressions.\n6.14 Lambdas\nlambda_expr ::= \"lambda\" [parameter_list] \":\" expression\nLambda expressions (sometimes called lambda forms) are used to create anonymous functions. The expression\nlambda parameters: expressionyieldsafunctionobject. Theunnamedobjectbehaveslikeafunctionobject\ndefinedwith:\ndef <lambda>(parameters):\nreturn expression\nSeesectionFunctiondefinitionsforthesyntaxofparameterlists. Notethatfunctionscreatedwithlambdaexpressions\ncannotcontainstatementsorannotations.\n6.15 Expression lists\nstarred_expression ::= [\"*\"] or_expr\nflexible_expression ::= assignment_expression | starred_expression\nflexible_expression_list ::= flexible_expression (\",\" flexible_expression)* [\",\"]\nstarred_expression_list ::= starred_expression (\",\" starred_expression)* [\",\"]\nexpression_list ::= expression (\",\" expression)* [\",\"]\nyield_list ::= expression_list | starred_expression \",\" [starred_expression_list]\nExceptwhenpartofalistorsetdisplay,anexpressionlistcontainingatleastonecommayieldsatuple. Thelength\nofthetupleisthenumberofexpressionsinthelist. Theexpressionsareevaluatedfromlefttoright.\nAnasterisk*denotesiterableunpacking. Itsoperandmustbeaniterable. Theiterableisexpandedintoasequence\nofitems,whichareincludedinthenewtuple,list,orset,atthesiteoftheunpacking.\nAddedinversion3.5: Iterableunpackinginexpressionlists,originallyproposedbyPEP448.\nAddedinversion3.11: Anyiteminanexpressionlistmaybestarred. SeePEP646.\nAtrailingcommaisrequiredonlytocreateaone-itemtuple, suchas1,; itisoptionalinallothercases. Asingle\nexpressionwithoutatrailingcommadoesn\u2019tcreateatuple,butratheryieldsthevalueofthatexpression. (Tocreate\nanemptytuple,useanemptypairofparentheses: ().)\n94 Chapter6. Expressions\nThePythonLanguageReference,Release3.13.3\n6.16 Evaluation order\nPython evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is\nevaluatedbeforetheleft-handside.\nInthefollowinglines,expressionswillbeevaluatedinthearithmeticorderoftheirsuffixes:\nexpr1, expr2, expr3, expr4\n(expr1, expr2, expr3, expr4)\n{expr1: expr2, expr3: expr4}\nexpr1 + expr2 * (expr3 - expr4)\nexpr1(expr2, expr3, *expr4, **expr5)\nexpr3, expr4 = expr1, expr2\n6.17 Operator precedence\nThefollowingtablesummarizestheoperatorprecedenceinPython,fromhighestprecedence(mostbinding)tolowest\nprecedence (least binding). Operators in the same box have the same precedence. Unless the syntax is explicitly\ngiven,operatorsarebinary. Operatorsinthesameboxgrouplefttoright(exceptforexponentiationandconditional\nexpressions,whichgroupfromrighttoleft).\nNotethatcomparisons, membershiptests, andidentitytests, allhavethesameprecedenceandhavealeft-to-right\nchainingfeatureasdescribedintheComparisonssection.\nOperator Description\n(expressions...), Binding or parenthesized expression, list display,\n[expressions...], {key: value...}, dictionarydisplay,setdisplay\n{expressions...}\nx[index], x[index:index], x(arguments...), x. Subscription,slicing,call,attributereference\nattribute\nawait x Awaitexpression\n** Exponentiation5\n+x,-x,~x Positive,negative,bitwiseNOT\n*,@,/,//,% Multiplication, matrix multiplication, division,\nfloordivision,remainder6\n+,- Additionandsubtraction\n<<,>> Shifts\n& BitwiseAND\n^ BitwiseXOR\n| BitwiseOR\nin,not in,is,is not,<,<=,>,>=,!=,== Comparisons, including membership tests and\nidentitytests\nnot x BooleanNOT\nand BooleanAND\nor BooleanOR\nif \u2013else Conditionalexpression\nlambda Lambdaexpression\n:= Assignmentexpression\n5Thepoweroperator**bindslesstightlythananarithmeticorbitwiseunaryoperatoronitsright,thatis,2**-1is0.5.\n6The%operatorisalsousedforstringformatting;thesameprecedenceapplies.\n6.16. Evaluationorder 95\nThePythonLanguageReference,Release3.13.3\n96 Chapter6. Expressions\nCHAPTER\nSEVEN\nSIMPLE STATEMENTS\nAsimplestatementiscomprisedwithinasinglelogicalline. Severalsimplestatementsmayoccuronasingleline\nseparatedbysemicolons. Thesyntaxforsimplestatementsis:\nsimple_stmt ::= expression_stmt\n| assert_stmt\n| assignment_stmt\n| augmented_assignment_stmt\n| annotated_assignment_stmt\n| pass_stmt\n| del_stmt\n| return_stmt\n| yield_stmt\n| raise_stmt\n| break_stmt\n| continue_stmt\n| import_stmt\n| future_stmt\n| global_stmt\n| nonlocal_stmt\n| type_stmt\n7.1 Expression statements\nExpressionstatementsareused(mostlyinteractively)tocomputeandwriteavalue,or(usually)tocallaprocedure\n(afunctionthatreturnsnomeaningfulresult;inPython,proceduresreturnthevalueNone). Otherusesofexpression\nstatementsareallowedandoccasionallyuseful. Thesyntaxforanexpressionstatementis:\nexpression_stmt ::= starred_expression\nAnexpressionstatementevaluatestheexpressionlist(whichmaybeasingleexpression).\nIninteractivemode,ifthevalueisnotNone,itisconvertedtoastringusingthebuilt-inrepr()functionandthe\nresultingstringiswrittentostandardoutputonalinebyitself(exceptiftheresultisNone,sothatprocedurecalls\ndonotcauseanyoutput.)\n7.2 Assignment statements\nAssignmentstatementsareusedto(re)bindnamestovaluesandtomodifyattributesoritemsofmutableobjects:\nassignment_stmt ::= (target_list \"=\")+ (starred_expression | yield_expression)\ntarget_list ::= target (\",\" target)* [\",\"]\ntarget ::= identifier\n| \"(\" [target_list] \")\"\n| \"[\" [target_list] \"]\"\n| attributeref\n97\nThePythonLanguageReference,Release3.13.3\n| subscription\n| slicing\n| \"*\" target\n(SeesectionPrimariesforthesyntaxdefinitionsforattributeref,subscription,andslicing.)\nAnassignmentstatementevaluatestheexpressionlist(rememberthatthiscanbeasingleexpressionoracomma-\nseparatedlist,thelatteryieldingatuple)andassignsthesingleresultingobjecttoeachofthetargetlists,fromleftto\nright.\nAssignmentisdefinedrecursivelydependingontheformofthetarget(list). Whenatargetispartofamutableobject\n(anattributereference,subscriptionorslicing),themutableobjectmustultimatelyperformtheassignmentanddecide\naboutitsvalidity,andmayraiseanexceptioniftheassignmentisunacceptable. Therulesobservedbyvarioustypes\nandtheexceptionsraisedaregivenwiththedefinitionoftheobjecttypes(seesectionThestandardtypehierarchy).\nAssignmentofanobjecttoatargetlist,optionallyenclosedinparenthesesorsquarebrackets,isrecursivelydefined\nasfollows.\n\u2022 Ifthetargetlistisasingletargetwithnotrailingcomma,optionallyinparentheses,theobjectisassignedto\nthattarget.\n\u2022 Else:\n\u2013 Ifthetargetlistcontainsonetargetprefixedwithanasterisk,calleda\u201cstarred\u201dtarget: Theobjectmust\nbeaniterablewithatleastasmanyitemsastherearetargetsinthetargetlist,minusone. Thefirstitems\noftheiterableareassigned,fromlefttoright,tothetargetsbeforethestarredtarget. Thefinalitemsof\ntheiterableareassignedtothetargetsafterthestarredtarget. Alistoftheremainingitemsintheiterable\nisthenassignedtothestarredtarget(thelistcanbeempty).\n\u2013 Else: Theobjectmustbeaniterablewiththesamenumberofitemsastherearetargetsinthetargetlist,\nandtheitemsareassigned,fromlefttoright,tothecorrespondingtargets.\nAssignmentofanobjecttoasingletargetisrecursivelydefinedasfollows.\n\u2022 Ifthetargetisanidentifier(name):\n\u2013 Ifthenamedoesnotoccurinaglobalornonlocalstatementinthecurrentcodeblock: thenameis\nboundtotheobjectinthecurrentlocalnamespace.\n\u2013 Otherwise: thenameisboundtotheobjectintheglobalnamespaceortheouternamespacedetermined\nbynonlocal,respectively.\nThe name is rebound if it was already bound. This may cause the reference count for the object previously\nboundtothenametoreachzero,causingtheobjecttobedeallocatedanditsdestructor(ifithasone)tobe\ncalled.\n\u2022 If the target is an attribute reference: The primary expression in the reference is evaluated. It should yield\nan object with assignable attributes; if this is not the case, TypeError is raised. That object is then asked\ntoassigntheassignedobjecttothegivenattribute;ifitcannotperformtheassignment,itraisesanexception\n(usuallybutnotnecessarilyAttributeError).\nNote:Iftheobjectisaclassinstanceandtheattributereferenceoccursonbothsidesoftheassignmentoperator,\ntheright-handsideexpression,a.xcanaccesseitheraninstanceattributeor(ifnoinstanceattributeexists)a\nclassattribute. Theleft-handsidetargeta.xisalwayssetasaninstanceattribute,creatingitifnecessary. Thus,\nthe two occurrences of a.x do not necessarily refer to the same attribute: if the right-hand side expression\nreferstoaclassattribute,theleft-handsidecreatesanewinstanceattributeasthetargetoftheassignment:\nclass Cls:\nx = 3 # class variable\ninst = Cls()\ninst.x = inst.x + 1 # writes inst.x as 4 leaving Cls.x as 3\nThis description does not necessarily apply to descriptor attributes, such as properties created with\nproperty().\n98 Chapter7. Simplestatements\nThePythonLanguageReference,Release3.13.3\n\u2022 If the target is a subscription: The primary expression in the reference is evaluated. It should yield either\na mutable sequence object (such as a list) or a mapping object (such as a dictionary). Next, the subscript\nexpressionisevaluated.\nIftheprimaryisamutablesequenceobject(suchasalist),thesubscriptmustyieldaninteger. Ifitisnegative,\nthesequence\u2019slengthisaddedtoit. Theresultingvaluemustbeanonnegativeintegerlessthanthesequence\u2019s\nlength,andthesequenceisaskedtoassigntheassignedobjecttoitsitemwiththatindex. Iftheindexisout\nofrange,IndexErrorisraised(assignmenttoasubscriptedsequencecannotaddnewitemstoalist).\nIftheprimaryisamappingobject(suchasadictionary),thesubscriptmusthaveatypecompatiblewiththe\nmapping\u2019skeytype,andthemappingisthenaskedtocreateakey/valuepairwhichmapsthesubscripttothe\nassigned object. This can either replace an existing key/value pair with the same key value, or insert a new\nkey/valuepair(ifnokeywiththesamevalueexisted).\nForuser-definedobjects,the__setitem__()methodiscalledwithappropriatearguments.\n\u2022 Ifthetargetisaslicing:Theprimaryexpressioninthereferenceisevaluated. Itshouldyieldamutablesequence\nobject(suchasalist). Theassignedobjectshouldbeasequenceobjectofthesametype. Next,thelowerand\nupperboundexpressionsareevaluated, insofartheyarepresent; defaultsarezeroandthesequence\u2019slength.\nTheboundsshouldevaluatetointegers. Ifeitherboundisnegative,thesequence\u2019slengthisaddedtoit. The\nresulting bounds are clipped to lie between zero and the sequence\u2019s length, inclusive. Finally, the sequence\nobject is asked to replace the slice with the items of the assigned sequence. The length of the slice may be\ndifferentfromthelengthoftheassignedsequence,thuschangingthelengthofthetargetsequence,ifthetarget\nsequenceallowsit.\nCPythonimplementationdetail: Inthecurrentimplementation,thesyntaxfortargetsistakentobethesameas\nforexpressions,andinvalidsyntaxisrejectedduringthecodegenerationphase,causinglessdetailederrormessages.\nAlthoughthedefinitionofassignmentimpliesthatoverlapsbetweentheleft-handsideandtheright-handsideare\u2018si-\nmultaneous\u2019(forexamplea, b = b, aswapstwovariables),overlapswithinthecollectionofassigned-tovariables\noccurleft-to-right,sometimesresultinginconfusion. Forinstance,thefollowingprogramprints[0, 2]:\nx = [0, 1]\ni = 0\ni, x[i] = 1, 2 # i is updated, then x[i] is updated\nprint(x)\n(cid:181) Seealso\nPEP3132-ExtendedIterableUnpacking\nThespecificationforthe*targetfeature.\n7.2.1 Augmented assignment statements\nAugmentedassignmentisthecombination,inasinglestatement,ofabinaryoperationandanassignmentstatement:\naugmented_assignment_stmt ::= augtarget augop (expression_list | yield_expression)\naugtarget ::= identifier | attributeref | subscription | slicing\naugop ::= \"+=\" | \"-=\" | \"*=\" | \"@=\" | \"/=\" | \"//=\" | \"%=\" | \"**=\"\n| \">>=\" | \"<<=\" | \"&=\" | \"^=\" | \"|=\"\n(SeesectionPrimariesforthesyntaxdefinitionsofthelastthreesymbols.)\nAnaugmentedassignmentevaluatesthetarget(which,unlikenormalassignmentstatements,cannotbeanunpacking)\nand the expression list, performs the binary operation specific to the type of assignment on the two operands, and\nassignstheresulttotheoriginaltarget. Thetargetisonlyevaluatedonce.\nAn augmented assignment statement like x += 1 can be rewritten as x = x + 1 to achieve a similar, but not\nexactlyequaleffect. Intheaugmentedversion,xisonlyevaluatedonce. Also,whenpossible,theactualoperationis\nperformedin-place,meaningthatratherthancreatinganewobjectandassigningthattothetarget,theoldobjectis\nmodifiedinstead.\n7.2. Assignmentstatements 99\nThePythonLanguageReference,Release3.13.3\nUnlikenormalassignments,augmentedassignmentsevaluatetheleft-handsidebeforeevaluatingtheright-handside.\nForexample, a[i] += f(x)firstlooks-upa[i], thenitevaluatesf(x)andperformstheaddition, andlastly, it\nwritestheresultbacktoa[i].\nWith the exception of assigning to tuples and multiple targets in a single statement, the assignment done by aug-\nmentedassignmentstatementsishandledthesamewayasnormalassignments. Similarly,withtheexceptionofthe\npossiblein-placebehavior,thebinaryoperationperformedbyaugmentedassignmentisthesameasthenormalbinary\noperations.\nFortargetswhichareattributereferences,thesamecaveataboutclassandinstanceattributesappliesasforregular\nassignments.\n7.2.2 Annotated assignment statements\nAnnotationassignmentisthecombination,inasinglestatement,ofavariableorattributeannotationandanoptional\nassignmentstatement:\nannotated_assignment_stmt ::= augtarget \":\" expression\n[\"=\" (starred_expression | yield_expression)]\nThedifferencefromnormalAssignmentstatementsisthatonlyasingletargetisallowed.\nTheassignmenttargetisconsidered\u201csimple\u201difitconsistsofasinglenamethatisnotenclosedinparentheses. For\nsimple assignment targets, if in class or module scope, the annotations are evaluated and stored in a special class\nor module attribute __annotations__ that is a dictionary mapping from variable names (mangled if private) to\nevaluated annotations. This attribute is writable and is automatically created at the start of class or module body\nexecution,ifannotationsarefoundstatically.\nIftheassignmenttargetisnotsimple(anattribute,subscriptnode,orparenthesizedname),theannotationisevaluated\nifinclassormodulescope,butnotstored.\nIfanameisannotatedinafunctionscope,thenthisnameislocalforthatscope. Annotationsareneverevaluated\nandstoredinfunctionscopes.\nIftherighthandsideispresent,anannotatedassignmentperformstheactualassignmentbeforeevaluatingannotations\n(whereapplicable). Iftherighthandsideisnotpresentforanexpressiontarget, thentheinterpreterevaluatesthe\ntargetexceptforthelast__setitem__()or__setattr__()call.\n(cid:181) Seealso\nPEP526-SyntaxforVariableAnnotations\nTheproposalthataddedsyntaxforannotatingthetypesofvariables(includingclassvariablesandinstance\nvariables),insteadofexpressingthemthroughcomments.\nPEP484-Typehints\nTheproposalthataddedthetypingmoduletoprovideastandardsyntaxfortypeannotationsthatcanbe\nusedinstaticanalysistoolsandIDEs.\nChanged in version 3.8: Now annotated assignments allow the same expressions in the right hand side as regular\nassignments. Previously,someexpressions(likeun-parenthesizedtupleexpressions)causedasyntaxerror.\n7.3 The assert statement\nAssertstatementsareaconvenientwaytoinsertdebuggingassertionsintoaprogram:\nassert_stmt ::= \"assert\" expression [\",\" expression]\nThesimpleform,assert expression,isequivalentto\nif __debug__:\nif not expression: raise AssertionError\n100 Chapter7. Simplestatements\nThePythonLanguageReference,Release3.13.3\nTheextendedform,assert expression1, expression2,isequivalentto\nif __debug__:\nif not expression1: raise AssertionError(expression2)\nTheseequivalencesassumethat__debug__andAssertionErrorrefertothebuilt-invariableswiththosenames.\nInthecurrentimplementation,thebuilt-invariable__debug__isTrueundernormalcircumstances,Falsewhen\noptimization is requested (command line option -O). The current code generator emits no code for an assert\nstatementwhenoptimizationisrequestedatcompiletime. Notethatitisunnecessarytoincludethesourcecodefor\ntheexpressionthatfailedintheerrormessage;itwillbedisplayedaspartofthestacktrace.\nAssignmentsto__debug__areillegal. Thevalueforthebuilt-invariableisdeterminedwhentheinterpreterstarts.\n7.4 The pass statement\npass_stmt ::= \"pass\"\npassisanulloperation\u2014whenitisexecuted,nothinghappens. Itisusefulasaplaceholderwhenastatementis\nrequiredsyntactically,butnocodeneedstobeexecuted,forexample:\ndef f(arg): pass # a function that does nothing (yet)\nclass C: pass # a class with no methods (yet)\n7.5 The del statement\ndel_stmt ::= \"del\" target_list\nDeletionisrecursivelydefinedverysimilartothewayassignmentisdefined. Ratherthanspellingitoutinfulldetails,\nherearesomehints.\nDeletionofatargetlistrecursivelydeleteseachtarget,fromlefttoright.\nDeletionofanameremovesthebindingofthatnamefromthelocalorglobalnamespace,dependingonwhetherthe\nnameoccursinaglobalstatementinthesamecodeblock. Ifthenameisunbound,aNameErrorexceptionwill\nberaised.\nDeletion of attribute references, subscriptions and slicings is passed to the primary object involved; deletion of a\nslicingisingeneralequivalenttoassignmentofanemptysliceoftherighttype(buteventhisisdeterminedbythe\nslicedobject).\nChanged in version 3.2: Previously it was illegal to delete a name from the local namespace if it occurs as a free\nvariableinanestedblock.\n7.6 The return statement\nreturn_stmt ::= \"return\" [expression_list]\nreturnmayonlyoccursyntacticallynestedinafunctiondefinition,notwithinanestedclassdefinition.\nIfanexpressionlistispresent,itisevaluated,elseNoneissubstituted.\nreturnleavesthecurrentfunctioncallwiththeexpressionlist(orNone)asreturnvalue.\nWhenreturnpassescontroloutofatrystatementwithafinallyclause,thatfinallyclauseisexecutedbefore\nreallyleavingthefunction.\nInageneratorfunction,thereturnstatementindicatesthatthegeneratorisdoneandwillcauseStopIteration\nto be raised. The returned value (if any) is used as an argument to construct StopIteration and becomes the\nStopIteration.valueattribute.\n7.4. Thepassstatement 101\nThePythonLanguageReference,Release3.13.3\nIn an asynchronous generator function, an empty return statement indicates that the asynchronous generator is\ndoneandwillcauseStopAsyncIterationtoberaised. Anon-emptyreturnstatementisasyntaxerrorinan\nasynchronousgeneratorfunction.\n7.7 The yield statement\nyield_stmt ::= yield_expression\nAyield statementissemanticallyequivalenttoayieldexpression. Theyieldstatementcanbeusedtoomitthe\nparentheses that would otherwise be required in the equivalent yield expression statement. For example, the yield\nstatements\nyield <expr>\nyield from <expr>\nareequivalenttotheyieldexpressionstatements\n(yield <expr>)\n(yield from <expr>)\nYieldexpressionsandstatementsareonlyusedwhendefiningageneratorfunction,andareonlyusedinthebodyof\nthegeneratorfunction. Usingyieldinafunctiondefinitionissufficienttocausethatdefinitiontocreateagenerator\nfunctioninsteadofanormalfunction.\nForfulldetailsofyieldsemantics,refertotheYieldexpressionssection.\n7.8 The raise statement\nraise_stmt ::= \"raise\" [expression [\"from\" expression]]\nIfnoexpressionsarepresent,raisere-raisestheexceptionthatiscurrentlybeinghandled,whichisalsoknownas\ntheactiveexception. Ifthereisn\u2019tcurrentlyanactiveexception,aRuntimeErrorexceptionisraisedindicatingthat\nthisisanerror.\nOtherwise,raiseevaluatesthefirstexpressionastheexceptionobject. Itmustbeeitherasubclassoraninstance\nofBaseException. Ifitisaclass,theexceptioninstancewillbeobtainedwhenneededbyinstantiatingtheclass\nwithnoarguments.\nThetypeoftheexceptionistheexceptioninstance\u2019sclass,thevalueistheinstanceitself.\nA traceback object is normally created automatically when an exception is raised and attached to it as the\n__traceback__ attribute. You can create an exception and set your own traceback in one step using the\nwith_traceback() exception method (which returns the same exception instance, with its traceback set to its\nargument),likeso:\nraise Exception(\"foo occurred\").with_traceback(tracebackobj)\nThe from clause is used for exception chaining: if given, the second expression must be another exception class\nor instance. If the second expression is an exception instance, it will be attached to the raised exception as the\n__cause__attribute(whichiswritable). Iftheexpressionisanexceptionclass, theclasswillbeinstantiatedand\ntheresultingexceptioninstancewillbeattachedtotheraisedexceptionasthe__cause__attribute. Iftheraised\nexceptionisnothandled,bothexceptionswillbeprinted:\n>>> try:\n... print(1 / 0)\n... except Exception as exc:\n... raise RuntimeError(\"Something bad happened\") from exc\n...\nTraceback (most recent call last):\n(continuesonnextpage)\n102 Chapter7. Simplestatements\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nFile \"<stdin>\", line 2, in <module>\nprint(1 / 0)\n~~^~~\nZeroDivisionError: division by zero\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\nFile \"<stdin>\", line 4, in <module>\nraise RuntimeError(\"Something bad happened\") from exc\nRuntimeError: Something bad happened\nAsimilarmechanismworksimplicitlyifanewexceptionisraisedwhenanexceptionisalreadybeinghandled. An\nexceptionmaybehandledwhenanexceptorfinallyclause,orawithstatement,isused. Thepreviousexception\nisthenattachedasthenewexception\u2019s__context__attribute:\n>>> try:\n... print(1 / 0)\n... except:\n... raise RuntimeError(\"Something bad happened\")\n...\nTraceback (most recent call last):\nFile \"<stdin>\", line 2, in <module>\nprint(1 / 0)\n~~^~~\nZeroDivisionError: division by zero\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\nFile \"<stdin>\", line 4, in <module>\nraise RuntimeError(\"Something bad happened\")\nRuntimeError: Something bad happened\nExceptionchainingcanbeexplicitlysuppressedbyspecifyingNoneinthefromclause:\n>>> try:\n... print(1 / 0)\n... except:\n... raise RuntimeError(\"Something bad happened\") from None\n...\nTraceback (most recent call last):\nFile \"<stdin>\", line 4, in <module>\nRuntimeError: Something bad happened\nAdditionalinformationonexceptionscanbefoundinsectionExceptions,andinformationabouthandlingexceptions\nisinsectionThetrystatement.\nChangedinversion3.3: NoneisnowpermittedasYinraise X from Y.\nAddedthe__suppress_context__attributetosuppressautomaticdisplayoftheexceptioncontext.\nChanged in version 3.11: If the traceback of the active exception is modified in an except clause, a subsequent\nraisestatementre-raisestheexceptionwiththemodifiedtraceback. Previously,theexceptionwasre-raisedwith\nthetracebackithadwhenitwascaught.\n7.8. Theraisestatement 103\nThePythonLanguageReference,Release3.13.3\n7.9 The break statement\nbreak_stmt ::= \"break\"\nbreakmayonlyoccursyntacticallynestedinafororwhileloop,butnotnestedinafunctionorclassdefinition\nwithinthatloop.\nItterminatesthenearestenclosingloop,skippingtheoptionalelseclauseiftheloophasone.\nIfaforloopisterminatedbybreak,theloopcontroltargetkeepsitscurrentvalue.\nWhenbreakpassescontroloutofatrystatementwithafinallyclause,thatfinallyclauseisexecutedbefore\nreallyleavingtheloop.\n7.10 The continue statement\ncontinue_stmt ::= \"continue\"\ncontinuemayonlyoccursyntacticallynestedinafororwhileloop,butnotnestedinafunctionorclassdefinition\nwithinthatloop. Itcontinueswiththenextcycleofthenearestenclosingloop.\nWhencontinuepassescontroloutofatry statementwithafinally clause, thatfinallyclauseisexecuted\nbeforereallystartingthenextloopcycle.\n7.11 The import statement\nimport_stmt ::= \"import\" module [\"as\" identifier] (\",\" module [\"as\" identifier])*\n| \"from\" relative_module \"import\" identifier [\"as\" identifier]\n(\",\" identifier [\"as\" identifier])*\n| \"from\" relative_module \"import\" \"(\" identifier [\"as\" identifier]\n(\",\" identifier [\"as\" identifier])* [\",\"] \")\"\n| \"from\" relative_module \"import\" \"*\"\nmodule ::= (identifier \".\")* identifier\nrelative_module ::= \".\"* module | \".\"+\nThebasicimportstatement(nofromclause)isexecutedintwosteps:\n1. findamodule,loadingandinitializingitifnecessary\n2. defineanameornamesinthelocalnamespaceforthescopewheretheimportstatementoccurs.\nWhen the statement contains multiple clauses (separated by commas) the two steps are carried out separately for\neachclause,justasthoughtheclauseshadbeenseparatedoutintoindividualimportstatements.\nThedetailsofthefirststep,findingandloadingmodules,aredescribedingreaterdetailinthesectionontheimport\nsystem,whichalsodescribesthevarioustypesofpackagesandmodulesthatcanbeimported,aswellasallthehooks\nthatcanbeusedtocustomizetheimportsystem. Notethatfailuresinthisstepmayindicateeitherthatthemodule\ncouldnotbelocated,orthatanerroroccurredwhileinitializingthemodule,whichincludesexecutionofthemodule\u2019s\ncode.\nIf the requested module is retrieved successfully, it will be made available in the local namespace in one of three\nways:\n\u2022 Ifthemodulenameisfollowedbyas,thenthenamefollowingasisbounddirectlytotheimportedmodule.\n\u2022 Ifnoothernameisspecified,andthemodulebeingimportedisatoplevelmodule,themodule\u2019snameisbound\ninthelocalnamespaceasareferencetotheimportedmodule\n\u2022 Ifthemodulebeingimportedisnot atoplevelmodule,thenthenameofthetoplevelpackagethatcontains\nthemoduleisboundinthelocalnamespaceasareferencetothetoplevelpackage. Theimportedmodulemust\nbeaccessedusingitsfullqualifiednameratherthandirectly\nThefromformusesaslightlymorecomplexprocess:\n104 Chapter7. Simplestatements\nThePythonLanguageReference,Release3.13.3\n1. findthemodulespecifiedinthefromclause,loadingandinitializingitifnecessary;\n2. foreachoftheidentifiersspecifiedintheimportclauses:\n1. checkiftheimportedmodulehasanattributebythatname\n2. ifnot,attempttoimportasubmodulewiththatnameandthenchecktheimportedmoduleagainforthat\nattribute\n3. iftheattributeisnotfound,ImportErrorisraised.\n4. otherwise,areferencetothatvalueisstoredinthelocalnamespace,usingthenameintheasclauseifit\nispresent,otherwiseusingtheattributename\nExamples:\nimport foo # foo imported and bound locally\nimport foo.bar.baz # foo, foo.bar, and foo.bar.baz imported, foo bound\u2423\n,\u2192locally\nimport foo.bar.baz as fbb # foo, foo.bar, and foo.bar.baz imported, foo.bar.baz\u2423\n,\u2192bound as fbb\nfrom foo.bar import baz # foo, foo.bar, and foo.bar.baz imported, foo.bar.baz\u2423\n,\u2192bound as baz\nfrom foo import attr # foo imported and foo.attr bound as attr\nIf the list of identifiers is replaced by a star ('*'), all public names defined in the module are bound in the local\nnamespaceforthescopewheretheimportstatementoccurs.\nThe public names defined by a module are determined by checking the module\u2019s namespace for a variable named\n__all__; if defined, it must be a sequence of strings which are names defined or imported by that module. The\nnamesgivenin__all__areallconsideredpublicandarerequiredtoexist. If__all__isnotdefined,thesetof\npublicnamesincludesallnamesfoundinthemodule\u2019snamespacewhichdonotbeginwithanunderscorecharacter\n('_'). __all__shouldcontaintheentirepublicAPI.Itisintendedtoavoidaccidentallyexportingitemsthatare\nnotpartoftheAPI(suchaslibrarymoduleswhichwereimportedandusedwithinthemodule).\nThewildcardformofimport\u2014from module import *\u2014isonlyallowedatthemodulelevel. Attemptingto\nuseitinclassorfunctiondefinitionswillraiseaSyntaxError.\nWhenspecifyingwhatmoduletoimportyoudonothavetospecifytheabsolutenameofthemodule. Whenamodule\norpackageiscontainedwithinanotherpackageitispossibletomakearelativeimportwithinthesametoppackage\nwithouthavingtomentionthepackagename. Byusingleadingdotsinthespecifiedmoduleorpackageafterfrom\nyoucanspecifyhowhightotraverseupthecurrentpackagehierarchywithoutspecifyingexactnames. Oneleading\ndotmeansthecurrentpackagewherethemodulemakingtheimportexists. Twodotsmeansuponepackagelevel.\nThreedotsisuptwolevels,etc. Soifyouexecutefrom . import modfromamoduleinthepkgpackagethenyou\nwillendupimportingpkg.mod. Ifyouexecutefrom ..subpkg2 import modfromwithinpkg.subpkg1you\nwillimportpkg.subpkg2.mod. ThespecificationforrelativeimportsiscontainedinthePackageRelativeImports\nsection.\nimportlib.import_module()isprovidedtosupportapplicationsthatdeterminedynamicallythemodulestobe\nloaded.\nRaises an auditing event import with arguments module, filename, sys.path, sys.meta_path, sys.\npath_hooks.\n7.11.1 Future statements\nAfuturestatementisadirectivetothecompilerthataparticularmoduleshouldbecompiledusingsyntaxorsemantics\nthatwillbeavailableinaspecifiedfuturereleaseofPythonwherethefeaturebecomesstandard.\nThefuturestatementisintendedtoeasemigrationtofutureversionsofPythonthatintroduceincompatiblechangesto\nthelanguage. Itallowsuseofthenewfeaturesonaper-modulebasisbeforethereleaseinwhichthefeaturebecomes\nstandard.\nfuture_stmt ::= \"from\" \"__future__\" \"import\" feature [\"as\" identifier]\n7.11. Theimportstatement 105\nThePythonLanguageReference,Release3.13.3\n(\",\" feature [\"as\" identifier])*\n| \"from\" \"__future__\" \"import\" \"(\" feature [\"as\" identifier]\n(\",\" feature [\"as\" identifier])* [\",\"] \")\"\nfeature ::= identifier\nAfuturestatementmustappearnearthetopofthemodule. Theonlylinesthatcanappearbeforeafuturestatement\nare:\n\u2022 themoduledocstring(ifany),\n\u2022 comments,\n\u2022 blanklines,and\n\u2022 otherfuturestatements.\nTheonlyfeaturethatrequiresusingthefuturestatementisannotations(seePEP563).\nAll historical features enabled by the future statement are still recognized by Python 3. The list includes\nabsolute_import, division, generators, generator_stop, unicode_literals, print_function,\nnested_scopesandwith_statement. Theyareallredundantbecausetheyarealwaysenabled, andonlykept\nforbackwardscompatibility.\nAfuturestatementisrecognizedandtreatedspeciallyatcompiletime: Changestothesemanticsofcoreconstructs\nareoftenimplementedbygeneratingdifferentcode. Itmayevenbethecasethatanewfeatureintroducesnewincom-\npatiblesyntax(suchasanewreservedword),inwhichcasethecompilermayneedtoparsethemoduledifferently.\nSuchdecisionscannotbepushedoffuntilruntime.\nForanygivenrelease,thecompilerknowswhichfeaturenameshavebeendefined,andraisesacompile-timeerror\nifafuturestatementcontainsafeaturenotknowntoit.\nThedirectruntimesemanticsarethesameasforanyimportstatement: thereisastandardmodule__future__,\ndescribedlater,anditwillbeimportedintheusualwayatthetimethefuturestatementisexecuted.\nTheinterestingruntimesemanticsdependonthespecificfeatureenabledbythefuturestatement.\nNotethatthereisnothingspecialaboutthestatement:\nimport __future__ [as name]\nThatisnotafuturestatement;it\u2019sanordinaryimportstatementwithnospecialsemanticsorsyntaxrestrictions.\nCode compiled by calls to the built-in functions exec() and compile() that occur in a module M containing a\nfuturestatementwill,bydefault,usethenewsyntaxorsemanticsassociatedwiththefuturestatement. Thiscanbe\ncontrolledbyoptionalargumentstocompile()\u2014seethedocumentationofthatfunctionfordetails.\nAfuturestatementtypedataninteractiveinterpreterpromptwilltakeeffectfortherestoftheinterpretersession.\nIf an interpreter is started with the -i option, is passed a script name to execute, and the script includes a future\nstatement,itwillbeineffectintheinteractivesessionstartedafterthescriptisexecuted.\n(cid:181) Seealso\nPEP236-Backtothe__future__\nTheoriginalproposalforthe__future__mechanism.\n7.12 The global statement\nglobal_stmt ::= \"global\" identifier (\",\" identifier)*\nTheglobalstatementcausesthelistedidentifierstobeinterpretedasglobals. Itwouldbeimpossibletoassigntoa\nglobalvariablewithoutglobal,althoughfreevariablesmayrefertoglobalswithoutbeingdeclaredglobal.\nTheglobalstatementappliestotheentirescopeofafunctionorclassbody. ASyntaxErrorisraisedifavariable\nisusedorassignedtopriortoitsglobaldeclarationinthescope.\n106 Chapter7. Simplestatements\nThePythonLanguageReference,Release3.13.3\nProgrammer\u2019s note: global is a directive to the parser. It applies only to code parsed at the same time as the\nglobal statement. In particular, a global statementcontainedina stringorcodeobjectsuppliedto thebuilt-in\nexec() function does not affect the code block containing the function call, and code contained in such a string\nisunaffectedbyglobalstatementsinthecodecontainingthefunctioncall. Thesameappliestotheeval()and\ncompile()functions.\n7.13 The nonlocal statement\nnonlocal_stmt ::= \"nonlocal\" identifier (\",\" identifier)*\nWhenthedefinitionofafunctionorclassisnested(enclosed)withinthedefinitionsofotherfunctions,itsnonlocal\nscopesarethelocalscopesoftheenclosingfunctions. Thenonlocalstatementcausesthelistedidentifierstorefer\ntonamespreviouslyboundinnonlocalscopes. Itallowsencapsulatedcodetorebindsuchnonlocalidentifiers. Ifa\nnameisboundinmorethanonenonlocalscope,thenearestbindingisused. Ifanameisnotboundinanynonlocal\nscope,orifthereisnononlocalscope,aSyntaxErrorisraised.\nThe nonlocal statement applies to the entire scope of a function or class body. A SyntaxError is raised if a\nvariableisusedorassignedtopriortoitsnonlocaldeclarationinthescope.\n(cid:181) Seealso\nPEP3104-AccesstoNamesinOuterScopes\nThespecificationforthenonlocalstatement.\nProgrammer\u2019snote: nonlocalisadirectivetotheparserandappliesonlytocodeparsedalongwithit. Seethe\nnotefortheglobalstatement.\n7.14 The type statement\ntype_stmt ::= 'type' identifier [type_params] \"=\" expression\nThetypestatementdeclaresatypealias,whichisaninstanceoftyping.TypeAliasType.\nForexample,thefollowingstatementcreatesatypealias:\ntype Point = tuple[float, float]\nThiscodeisroughlyequivalentto:\nannotation-def VALUE_OF_Point():\nreturn tuple[float, float]\nPoint = typing.TypeAliasType(\"Point\", VALUE_OF_Point())\nannotation-defindicatesanannotationscope,whichbehavesmostlylikeafunction,butwithseveralsmalldif-\nferences.\nThevalueofthetypealiasisevaluatedintheannotationscope. Itisnotevaluatedwhenthetypealiasiscreated,but\nonlywhenthevalueisaccessedthroughthetypealias\u2019s__value__attribute(seeLazyevaluation). Thisallowsthe\ntypealiastorefertonamesthatarenotyetdefined.\nTypealiasesmaybemadegenericbyaddingatypeparameterlistafterthename. SeeGenerictypealiasesformore.\ntypeisasoftkeyword.\nAddedinversion3.12.\n(cid:181) Seealso\n7.13. Thenonlocalstatement 107\nThePythonLanguageReference,Release3.13.3\nPEP695-TypeParameterSyntax\nIntroducedthetypestatementandsyntaxforgenericclassesandfunctions.\n108 Chapter7. Simplestatements\nCHAPTER\nEIGHT\nCOMPOUND STATEMENTS\nCompoundstatementscontain(groupsof)otherstatements;theyaffectorcontroltheexecutionofthoseotherstate-\nmentsinsomeway. Ingeneral, compoundstatementsspanmultiplelines, althoughinsimpleincarnationsawhole\ncompoundstatementmaybecontainedinoneline.\nTheif,whileandforstatementsimplementtraditionalcontrolflowconstructs. tryspecifiesexceptionhandlers\nand/orcleanupcodeforagroupofstatements, whilethewithstatementallowstheexecutionofinitializationand\nfinalizationcodearoundablockofcode. Functionandclassdefinitionsarealsosyntacticallycompoundstatements.\nAcompoundstatementconsistsofoneormore\u2018clauses.\u2019 Aclauseconsistsofaheaderanda\u2018suite.\u2019 Theclauseheaders\nofaparticularcompoundstatementareallatthesameindentationlevel. Eachclauseheaderbeginswithauniquely\nidentifyingkeywordandendswithacolon. Asuiteisagroupofstatementscontrolledbyaclause. Asuitecanbeone\normoresemicolon-separatedsimplestatementsonthesamelineastheheader,followingtheheader\u2019scolon,oritcan\nbeoneormoreindentedstatementsonsubsequentlines. Onlythelatterformofasuitecancontainnestedcompound\nstatements;thefollowingisillegal,mostlybecauseitwouldn\u2019tbecleartowhichif clauseafollowingelseclause\nwouldbelong:\nif test1: if test2: print(x)\nAlsonotethatthesemicolonbindstighterthanthecoloninthiscontext,sothatinthefollowingexample,eitherall\nornoneoftheprint()callsareexecuted:\nif x < y < z: print(x); print(y); print(z)\nSummarizing:\ncompound_stmt ::= if_stmt\n| while_stmt\n| for_stmt\n| try_stmt\n| with_stmt\n| match_stmt\n| funcdef\n| classdef\n| async_with_stmt\n| async_for_stmt\n| async_funcdef\nsuite ::= stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT\nstatement ::= stmt_list NEWLINE | compound_stmt\nstmt_list ::= simple_stmt (\";\" simple_stmt)* [\";\"]\nNotethatstatementsalwaysendinaNEWLINEpossiblyfollowedbyaDEDENT.Alsonotethatoptionalcontinuation\nclausesalwaysbeginwithakeywordthatcannotstartastatement,thustherearenoambiguities(the\u2018danglingelse\u2019\nproblemissolvedinPythonbyrequiringnestedif statementstobeindented).\nTheformattingofthegrammarrulesinthefollowingsectionsplaceseachclauseonaseparatelineforclarity.\n109\nThePythonLanguageReference,Release3.13.3\n8.1 The if statement\nTheif statementisusedforconditionalexecution:\nif_stmt ::= \"if\" assignment_expression \":\" suite\n(\"elif\" assignment_expression \":\" suite)*\n[\"else\" \":\" suite]\nItselectsexactlyoneofthesuitesbyevaluatingtheexpressionsonebyoneuntiloneisfoundtobetrue(seesection\nBoolean operations for the definition of true and false); then that suite is executed (and no other part of the if\nstatementisexecutedorevaluated). Ifallexpressionsarefalse,thesuiteoftheelseclause,ifpresent,isexecuted.\n8.2 The while statement\nThewhilestatementisusedforrepeatedexecutionaslongasanexpressionistrue:\nwhile_stmt ::= \"while\" assignment_expression \":\" suite\n[\"else\" \":\" suite]\nThisrepeatedlyteststheexpressionand,ifitistrue,executesthefirstsuite;iftheexpressionisfalse(whichmaybe\nthefirsttimeitistested)thesuiteoftheelseclause,ifpresent,isexecutedandtheloopterminates.\nA break statement executed in the first suite terminates the loop without executing the else clause\u2019s suite. A\ncontinuestatementexecutedinthefirstsuiteskipstherestofthesuiteandgoesbacktotestingtheexpression.\n8.3 The for statement\nTheforstatementisusedtoiterateovertheelementsofasequence(suchasastring,tupleorlist)orotheriterable\nobject:\nfor_stmt ::= \"for\" target_list \"in\" starred_list \":\" suite\n[\"else\" \":\" suite]\nThestarred_listexpressionisevaluatedonce; itshouldyieldaniterableobject. Aniterator iscreatedforthat\niterable. Thefirstitemprovidedbytheiteratoristhenassignedtothetargetlistusingthestandardrulesforassign-\nments (see Assignment statements), and the suite is executed. This repeats for each item provided by the iterator.\nWhentheiteratorisexhausted,thesuiteintheelseclause,ifpresent,isexecuted,andtheloopterminates.\nA break statement executed in the first suite terminates the loop without executing the else clause\u2019s suite. A\ncontinuestatementexecutedinthefirstsuiteskipstherestofthesuiteandcontinueswiththenextitem,orwith\ntheelseclauseifthereisnonextitem.\nThefor-loopmakesassignmentstothevariablesinthetargetlist. Thisoverwritesallpreviousassignmentstothose\nvariablesincludingthosemadeinthesuiteofthefor-loop:\nfor i in range(10):\nprint(i)\ni = 5 # this will not affect the for-loop\n# because i will be overwritten with the next\n# index in the range\nNames in the target list are not deleted when the loop is finished, but if the sequence is empty, they will not have\nbeenassignedtoatallbytheloop. Hint: thebuilt-intyperange()representsimmutablearithmeticsequencesof\nintegers. Forinstance,iteratingrange(3)successivelyyields0,1,andthen2.\nChangedinversion3.11: Starredelementsarenowallowedintheexpressionlist.\n110 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\n8.4 The try statement\nThetrystatementspecifiesexceptionhandlersand/orcleanupcodeforagroupofstatements:\ntry_stmt ::= try1_stmt | try2_stmt | try3_stmt\ntry1_stmt ::= \"try\" \":\" suite\n(\"except\" [expression [\"as\" identifier]] \":\" suite)+\n[\"else\" \":\" suite]\n[\"finally\" \":\" suite]\ntry2_stmt ::= \"try\" \":\" suite\n(\"except\" \"*\" expression [\"as\" identifier] \":\" suite)+\n[\"else\" \":\" suite]\n[\"finally\" \":\" suite]\ntry3_stmt ::= \"try\" \":\" suite\n\"finally\" \":\" suite\nAdditionalinformationonexceptionscanbefoundinsectionExceptions,andinformationonusingtheraisestate-\nmenttogenerateexceptionsmaybefoundinsectionTheraisestatement.\n8.4.1 except clause\nThe except clause(s) specify one or more exception handlers. When no exception occurs in the try clause, no\nexceptionhandlerisexecuted. Whenanexceptionoccursinthetrysuite,asearchforanexceptionhandlerisstarted.\nThissearchinspectstheexceptclausesinturnuntiloneisfoundthatmatchestheexception. Anexpression-less\nexceptclause,ifpresent,mustbelast;itmatchesanyexception.\nForanexceptclausewithanexpression,theexpressionmustevaluatetoanexceptiontypeoratupleofexception\ntypes. Theraisedexceptionmatchesanexceptclausewhoseexpressionevaluatestotheclassoranon-virtualbase\nclassoftheexceptionobject,ortoatuplethatcontainssuchaclass.\nIfnoexceptclausematchestheexception,thesearchforanexceptionhandlercontinuesinthesurroundingcode\nandontheinvocationstack.1\nIftheevaluationofanexpressionintheheaderofanexceptclauseraisesanexception, theoriginalsearchfora\nhandleriscanceledandasearchstartsforthenewexceptioninthesurroundingcodeandonthecallstack(itistreated\nasiftheentiretrystatementraisedtheexception).\nWhenamatchingexceptclauseisfound,theexceptionisassignedtothetargetspecifiedaftertheaskeywordinthat\nexceptclause,ifpresent,andtheexceptclause\u2019ssuiteisexecuted. Allexceptclausesmusthaveanexecutable\nblock. Whentheendofthisblockisreached, executioncontinuesnormallyaftertheentiretry statement. (This\nmeans that if two nested handlers exist for the same exception, and the exception occurs in the try clause of the\ninnerhandler,theouterhandlerwillnothandletheexception.)\nWhenanexceptionhasbeenassignedusingas target,itisclearedattheendoftheexceptclause. Thisisasif\nexcept E as N:\nfoo\nwastranslatedto\nexcept E as N:\ntry:\nfoo\nfinally:\ndel N\nThis means the exception must be assigned to a different name to be able to refer to it after the except clause.\nExceptions are cleared because with the traceback attached to them, they form a reference cycle with the stack\nframe,keepingalllocalsinthatframealiveuntilthenextgarbagecollectionoccurs.\n1Theexceptionispropagatedtotheinvocationstackunlessthereisafinallyclausewhichhappenstoraiseanotherexception. Thatnew\nexceptioncausestheoldonetobelost.\n8.4. Thetrystatement 111\nThePythonLanguageReference,Release3.13.3\nBefore an except clause\u2019s suite is executed, the exception is stored in the sys module, where it can be accessed\nfromwithinthebodyoftheexceptclausebycallingsys.exception(). Whenleavinganexceptionhandler,the\nexceptionstoredinthesysmoduleisresettoitspreviousvalue:\n>>> print(sys.exception())\nNone\n>>> try:\n... raise TypeError\n... except:\n... print(repr(sys.exception()))\n... try:\n... raise ValueError\n... except:\n... print(repr(sys.exception()))\n... print(repr(sys.exception()))\n...\nTypeError()\nValueError()\nTypeError()\n>>> print(sys.exception())\nNone\n8.4.2 except* clause\nTheexcept*clause(s)areusedforhandlingExceptionGroups. Theexceptiontypeformatchingisinterpreted\nasinthecaseofexcept,butinthecaseofexceptiongroupswecanhavepartialmatcheswhenthetypematches\nsomeoftheexceptionsinthegroup. Thismeansthatmultipleexcept*clausescanexecute,eachhandlingpartof\ntheexceptiongroup. Eachclauseexecutesatmostonceandhandlesanexceptiongroupofallmatchingexceptions.\nEachexceptioninthegroupishandledbyatmostoneexcept*clause,thefirstthatmatchesit.\n>>> try:\n... raise ExceptionGroup(\"eg\",\n... [ValueError(1), TypeError(2), OSError(3), OSError(4)])\n... except* TypeError as e:\n... print(f'caught {type(e)} with nested {e.exceptions}')\n... except* OSError as e:\n... print(f'caught {type(e)} with nested {e.exceptions}')\n...\ncaught <class 'ExceptionGroup'> with nested (TypeError(2),)\ncaught <class 'ExceptionGroup'> with nested (OSError(3), OSError(4))\n+ Exception Group Traceback (most recent call last):\n| File \"<stdin>\", line 2, in <module>\n| ExceptionGroup: eg\n+-+---------------- 1 ----------------\n| ValueError: 1\n+------------------------------------\nAny remaining exceptions that were not handled by any except* clause are re-raised at the end, along with all\nexceptionsthatwereraisedfromwithintheexcept*clauses. Ifthislistcontainsmorethanoneexceptiontoreraise,\ntheyarecombinedintoanexceptiongroup.\nIftheraisedexceptionisnotanexceptiongroupanditstypematchesoneoftheexcept*clauses,itiscaughtand\nwrappedbyanexceptiongroupwithanemptymessagestring.\n>>> try:\n... raise BlockingIOError\n... except* BlockingIOError as e:\n... print(repr(e))\n(continuesonnextpage)\n112 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n...\nExceptionGroup('', (BlockingIOError()))\nAnexcept*clausemusthaveamatchingexpression;itcannotbeexcept*:. Furthermore,thisexpressioncannot\ncontainexceptiongrouptypes,becausethatwouldhaveambiguoussemantics.\nItisnotpossibletomixexceptandexcept*inthesametry. break,continueandreturncannotappearin\nanexcept*clause.\n8.4.3 else clause\nTheoptionalelseclauseisexecutedifthecontrolflowleavesthetrysuite,noexceptionwasraised,andnoreturn,\ncontinue, or break statement was executed. Exceptions in the else clause are not handled by the preceding\nexceptclauses.\n8.4.4 finally clause\nIffinallyispresent,itspecifiesa\u2018cleanup\u2019handler. Thetryclauseisexecuted,includinganyexceptandelse\nclauses. If an exception occurs in any of the clauses and is not handled, the exception is temporarily saved. The\nfinallyclauseisexecuted. Ifthereisasavedexceptionitisre-raisedattheendofthefinallyclause. Ifthe\nfinally clause raises another exception, the saved exception is set as the context of the new exception. If the\nfinallyclauseexecutesareturn,breakorcontinuestatement,thesavedexceptionisdiscarded:\n>>> def f():\n... try:\n... 1/0\n... finally:\n... return 42\n...\n>>> f()\n42\nTheexceptioninformationisnotavailabletotheprogramduringexecutionofthefinallyclause.\nWhenareturn,breakorcontinuestatementisexecutedinthetry suiteofatry\u2026finallystatement,the\nfinallyclauseisalsoexecuted\u2018onthewayout.\u2019\nThe return value of a function is determined by the last return statement executed. Since the finally clause\nalwaysexecutes,areturnstatementexecutedinthefinallyclausewillalwaysbethelastoneexecuted:\n>>> def foo():\n... try:\n... return 'try'\n... finally:\n... return 'finally'\n...\n>>> foo()\n'finally'\nChanged in version 3.8: Prior to Python 3.8, a continue statement was illegal in the finally clause due to a\nproblemwiththeimplementation.\n8.5 The with statement\nThe with statement is used to wrap the execution of a block with methods defined by a context manager (see\nsection With Statement Context Managers). This allows common try\u2026except\u2026finally usage patterns to be\nencapsulatedforconvenientreuse.\n8.5. Thewithstatement 113\nThePythonLanguageReference,Release3.13.3\nwith_stmt ::= \"with\" ( \"(\" with_stmt_contents \",\"? \")\" | with_stmt_contents ) \":\" suite\nwith_stmt_contents ::= with_item (\",\" with_item)*\nwith_item ::= expression [\"as\" target]\nTheexecutionofthewithstatementwithone\u201citem\u201dproceedsasfollows:\n1. Thecontextexpression(theexpressiongiveninthewith_item)isevaluatedtoobtainacontextmanager.\n2. Thecontextmanager\u2019s__enter__()isloadedforlateruse.\n3. Thecontextmanager\u2019s__exit__()isloadedforlateruse.\n4. Thecontextmanager\u2019s__enter__()methodisinvoked.\n5. Ifatargetwasincludedinthewithstatement,thereturnvaluefrom__enter__()isassignedtoit.\n(cid:174) Note\nThe with statement guarantees that if the __enter__() method returns without an error, then\n__exit__() will always be called. Thus, if an error occurs during the assignment to the target list, it\nwillbetreatedthesameasanerroroccurringwithinthesuitewouldbe. Seestep7below.\n6. Thesuiteisexecuted.\n7. Thecontextmanager\u2019s__exit__()methodisinvoked. Ifanexceptioncausedthesuitetobeexited,itstype,\nvalue,andtracebackarepassedasargumentsto__exit__(). Otherwise,threeNoneargumentsaresupplied.\nIfthesuitewasexitedduetoanexception,andthereturnvaluefromthe__exit__()methodwasfalse,the\nexceptionisreraised. Ifthereturnvaluewastrue,theexceptionissuppressed,andexecutioncontinueswith\nthestatementfollowingthewithstatement.\nIfthesuitewasexitedforanyreasonotherthananexception,thereturnvaluefrom__exit__()isignored,\nandexecutionproceedsatthenormallocationforthekindofexitthatwastaken.\nThefollowingcode:\nwith EXPRESSION as TARGET:\nSUITE\nissemanticallyequivalentto:\nmanager = (EXPRESSION)\nenter = type(manager).__enter__\nexit = type(manager).__exit__\nvalue = enter(manager)\nhit_except = False\ntry:\nTARGET = value\nSUITE\nexcept:\nhit_except = True\nif not exit(manager, *sys.exc_info()):\nraise\nfinally:\nif not hit_except:\nexit(manager, None, None, None)\nWithmorethanoneitem,thecontextmanagersareprocessedasifmultiplewithstatementswerenested:\nwith A() as a, B() as b:\nSUITE\n114 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\nissemanticallyequivalentto:\nwith A() as a:\nwith B() as b:\nSUITE\nYou can also write multi-item context managers in multiple lines if the items are surrounded by parentheses. For\nexample:\nwith (\nA() as a,\nB() as b,\n):\nSUITE\nChangedinversion3.1: Supportformultiplecontextexpressions.\nChangedinversion3.10: Supportforusinggroupingparenthesestobreakthestatementinmultiplelines.\n(cid:181) Seealso\nPEP343-The\u201cwith\u201dstatement\nThespecification,background,andexamplesforthePythonwithstatement.\n8.6 The match statement\nAddedinversion3.10.\nThematchstatementisusedforpatternmatching. Syntax:\nmatch_stmt ::= 'match' subject_expr \":\" NEWLINE INDENT case_block+ DEDENT\nsubject_expr ::= star_named_expression \",\" star_named_expressions?\n| named_expression\ncase_block ::= 'case' patterns [guard] \":\" block\n(cid:174) Note\nThissectionusessinglequotestodenotesoftkeywords.\nPatternmatchingtakesapatternasinput(followingcase)andasubjectvalue(followingmatch). Thepattern(which\nmaycontainsubpatterns)ismatchedagainstthesubjectvalue. Theoutcomesare:\n\u2022 Amatchsuccessorfailure(alsotermedapatternsuccessorfailure).\n\u2022 Possiblebindingofmatchedvaluestoaname. Theprerequisitesforthisarefurtherdiscussedbelow.\nThematchandcasekeywordsaresoftkeywords.\n(cid:181) Seealso\n\u2022 PEP634\u2013StructuralPatternMatching: Specification\n\u2022 PEP636\u2013StructuralPatternMatching: Tutorial\n8.6. Thematchstatement 115\nThePythonLanguageReference,Release3.13.3\n8.6.1 Overview\nHere\u2019sanoverviewofthelogicalflowofamatchstatement:\n1. The subject expression subject_expr is evaluated and a resulting subject value obtained. If the subject\nexpressioncontainsacomma,atupleisconstructedusingthestandardrules.\n2. Each pattern in a case_block is attempted to match with the subject value. The specific rules for success\norfailurearedescribedbelow. Thematchattemptcanalsobindsomeorallofthestandalonenameswithin\nthepattern. Theprecisepatternbindingrulesvaryperpatterntypeandarespecifiedbelow. Namebindings\nmade during a successful pattern match outlive the executed block and can be used after the match\nstatement.\n(cid:174) Note\nDuringfailedpatternmatches,somesubpatternsmaysucceed. Donotrelyonbindingsbeingmadefora\nfailedmatch. Conversely, donotrelyonvariablesremainingunchangedafterafailedmatch. Theexact\nbehavior is dependent on implementation and may vary. This is an intentional decision made to allow\ndifferentimplementationstoaddoptimizations.\n3. Ifthepatternsucceeds,thecorrespondingguard(ifpresent)isevaluated. Inthiscaseallnamebindingsare\nguaranteedtohavehappened.\n\u2022 Iftheguardevaluatesastrueorismissing,theblockinsidecase_blockisexecuted.\n\u2022 Otherwise,thenextcase_blockisattemptedasdescribedabove.\n\u2022 Iftherearenofurthercaseblocks,thematchstatementiscompleted.\n(cid:174) Note\nUsers should generally never rely on a pattern being evaluated. Depending on implementation, the interpreter\nmaycachevaluesoruseotheroptimizationswhichskiprepeatedevaluations.\nAsamplematchstatement:\n>>> flag = False\n>>> match (100, 200):\n... case (100, 300): # Mismatch: 200 != 300\n... print('Case 1')\n... case (100, 200) if flag: # Successful match, but guard fails\n... print('Case 2')\n... case (100, y): # Matches and binds y to 200\n... print(f'Case 3, y: {y}')\n... case _: # Pattern not attempted\n... print('Case 4, I match anything!')\n...\nCase 3, y: 200\nInthiscase,if flagisaguard. Readmoreaboutthatinthenextsection.\n8.6.2 Guards\nguard ::= \"if\" named_expression\nAguard(whichispartofthecase)mustsucceedforcodeinsidethecaseblocktoexecute. Ittakestheform: if\nfollowedbyanexpression.\nThelogicalflowofacaseblockwithaguardfollows:\n116 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\n1. Checkthatthepatterninthecaseblocksucceeded. Ifthepatternfailed,theguardisnotevaluatedandthe\nnextcaseblockischecked.\n2. Ifthepatternsucceeded,evaluatetheguard.\n\u2022 Iftheguardconditionevaluatesastrue,thecaseblockisselected.\n\u2022 Iftheguardconditionevaluatesasfalse,thecaseblockisnotselected.\n\u2022 Iftheguardraisesanexceptionduringevaluation,theexceptionbubblesup.\nGuardsareallowedtohavesideeffectsastheyareexpressions. Guardevaluationmustproceedfromthefirsttothe\nlastcaseblock,oneatatime,skippingcaseblockswhosepattern(s)don\u2019tallsucceed. (I.e.,guardevaluationmust\nhappeninorder.) Guardevaluationmuststoponceacaseblockisselected.\n8.6.3 Irrefutable Case Blocks\nAnirrefutablecaseblockisamatch-allcaseblock. Amatchstatementmayhaveatmostoneirrefutablecaseblock,\nanditmustbelast.\nAcaseblockisconsideredirrefutableifithasnoguardanditspatternisirrefutable. Apatternisconsideredirrefutable\nifwecanprovefromitssyntaxalonethatitwillalwayssucceed. Onlythefollowingpatternsareirrefutable:\n\u2022 ASPatternswhoseleft-handsideisirrefutable\n\u2022 ORPatternscontainingatleastoneirrefutablepattern\n\u2022 CapturePatterns\n\u2022 WildcardPatterns\n\u2022 parenthesizedirrefutablepatterns\n8.6.4 Patterns\n(cid:174) Note\nThissectionusesgrammarnotationsbeyondstandardEBNF:\n\u2022 thenotationSEP.RULE+isshorthandforRULE (SEP RULE)*\n\u2022 thenotation!RULEisshorthandforanegativelookaheadassertion\nThetop-levelsyntaxforpatternsis:\npatterns ::= open_sequence_pattern | pattern\npattern ::= as_pattern | or_pattern\nclosed_pattern ::= | literal_pattern\n| capture_pattern\n| wildcard_pattern\n| value_pattern\n| group_pattern\n| sequence_pattern\n| mapping_pattern\n| class_pattern\nThedescriptionsbelowwillincludeadescription\u201cinsimpleterms\u201dofwhatapatterndoesforillustrationpurposes\n(creditstoRaymondHettingerforadocumentthatinspiredmostofthedescriptions). Notethatthesedescriptions\nare purely for illustration purposes and may not reflect the underlying implementation. Furthermore, they do not\ncoverallvalidforms.\n8.6. Thematchstatement 117\nThePythonLanguageReference,Release3.13.3\nORPatterns\nAnORpatternistwoormorepatternsseparatedbyverticalbars|. Syntax:\nor_pattern ::= \"|\".closed_pattern+\nOnlythefinalsubpatternmaybeirrefutable,andeachsubpatternmustbindthesamesetofnamestoavoidambiguity.\nAnORpatternmatcheseachofitssubpatternsinturntothesubjectvalue, untilonesucceeds. TheORpatternis\nthenconsideredsuccessful. Otherwise,ifnoneofthesubpatternssucceed,theORpatternfails.\nInsimpleterms,P1 | P2 | ...willtrytomatchP1,ifitfailsitwilltrytomatchP2,succeedingimmediatelyif\nanysucceeds,failingotherwise.\nASPatterns\nAnASpatternmatchesanORpatternontheleftoftheaskeywordagainstasubject. Syntax:\nas_pattern ::= or_pattern \"as\" capture_pattern\nIftheORpatternfails,theASpatternfails. Otherwise,theASpatternbindsthesubjecttothenameontherightof\ntheaskeywordandsucceeds. capture_patterncannotbea_.\nInsimpletermsP as NAMEwillmatchwithP,andonsuccessitwillsetNAME = <subject>.\nLiteralPatterns\nAliteralpatterncorrespondstomostliteralsinPython. Syntax:\nliteral_pattern ::= signed_number\n| signed_number \"+\" NUMBER\n| signed_number \"-\" NUMBER\n| strings\n| \"None\"\n| \"True\"\n| \"False\"\nsigned_number ::= [\"-\"] NUMBER\nThe rule strings and the token NUMBER are defined in the standard Python grammar. Triple-quoted strings are\nsupported. Rawstringsandbytestringsaresupported. f-stringsarenotsupported.\nTheformssigned_number '+' NUMBERandsigned_number '-' NUMBERareforexpressingcomplexnum-\nbers;theyrequirearealnumberontheleftandanimaginarynumberontheright. E.g. 3 + 4j.\nIn simple terms, LITERAL will succeed only if <subject> == LITERAL. For the singletons None, True and\nFalse,theisoperatorisused.\nCapturePatterns\nAcapturepatternbindsthesubjectvaluetoaname. Syntax:\ncapture_pattern ::= !'_' NAME\nA single underscore _ is not a capture pattern (this is what !'_' expresses). It is instead treated as a\nwildcard_pattern.\nInagivenpattern,agivennamecanonlybeboundonce. E.g. case x, x: ... isinvalidwhilecase [x] | x:\n... isallowed.\nCapturepatternsalwayssucceed. Thebindingfollowsscopingrulesestablishedbytheassignmentexpressionoperator\ninPEP572;thenamebecomesalocalvariableintheclosestcontainingfunctionscopeunlessthere\u2019sanapplicable\nglobalornonlocalstatement.\nInsimpletermsNAMEwillalwayssucceedanditwillsetNAME = <subject>.\n118 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\nWildcardPatterns\nAwildcardpatternalwayssucceeds(matchesanything)andbindsnoname. Syntax:\nwildcard_pattern ::= '_'\n_isasoftkeywordwithinanypattern,butonlywithinpatterns. Itisanidentifier,asusual,evenwithinmatchsubject\nexpressions,guards,andcaseblocks.\nInsimpleterms,_willalwayssucceed.\nValuePatterns\nAvaluepatternrepresentsanamedvalueinPython. Syntax:\nvalue_pattern ::= attr\nattr ::= name_or_attr \".\" NAME\nname_or_attr ::= attr | NAME\nThedottednameinthepatternislookedupusingstandardPythonnameresolutionrules. Thepatternsucceedsifthe\nvaluefoundcomparesequaltothesubjectvalue(usingthe==equalityoperator).\nInsimpletermsNAME1.NAME2willsucceedonlyif<subject> == NAME1.NAME2\n(cid:174) Note\nIfthesamevalueoccursmultipletimesinthesamematchstatement, theinterpretermaycachethefirstvalue\nfoundandreuseitratherthanrepeatthesamelookup. Thiscacheisstrictlytiedtoagivenexecutionofagiven\nmatchstatement.\nGroupPatterns\nAgrouppatternallowsuserstoaddparenthesesaroundpatternstoemphasizetheintendedgrouping. Otherwise,it\nhasnoadditionalsyntax. Syntax:\ngroup_pattern ::= \"(\" pattern \")\"\nInsimpleterms(P)hasthesameeffectasP.\nSequencePatterns\nAsequencepatterncontainsseveralsubpatternstobematchedagainstsequenceelements. Thesyntaxissimilarto\ntheunpackingofalistortuple.\nsequence_pattern ::= \"[\" [maybe_sequence_pattern] \"]\"\n| \"(\" [open_sequence_pattern] \")\"\nopen_sequence_pattern ::= maybe_star_pattern \",\" [maybe_sequence_pattern]\nmaybe_sequence_pattern ::= \",\".maybe_star_pattern+ \",\"?\nmaybe_star_pattern ::= star_pattern | pattern\nstar_pattern ::= \"*\" (capture_pattern | wildcard_pattern)\nThereisnodifferenceifparenthesesorsquarebracketsareusedforsequencepatterns(i.e. (...)vs[...]).\n(cid:174) Note\nAsinglepatternenclosedinparentheseswithoutatrailingcomma(e.g. (3 | 4))isagrouppattern. Whilea\nsinglepatternenclosedinsquarebrackets(e.g. [3 | 4])isstillasequencepattern.\nAt most one star subpattern may be in a sequence pattern. The star subpattern may occur in any position. If no\nstar subpatternis present, thesequence patternisa fixed-lengthsequencepattern; otherwiseit isa variable-length\nsequencepattern.\n8.6. Thematchstatement 119\nThePythonLanguageReference,Release3.13.3\nThefollowingisthelogicalflowformatchingasequencepatternagainstasubjectvalue:\n1. Ifthesubjectvalueisnotasequence2,thesequencepatternfails.\n2. Ifthesubjectvalueisaninstanceofstr,bytesorbytearraythesequencepatternfails.\n3. Thesubsequentstepsdependonwhetherthesequencepatternisfixedorvariable-length.\nIfthesequencepatternisfixed-length:\n1. Ifthelengthofthesubjectsequenceisnotequaltothenumberofsubpatterns,thesequencepatternfails\n2. Subpatterns in the sequence pattern are matched to their corresponding items in the subject sequence\nfromlefttoright. Matchingstopsassoonasasubpatternfails. Ifallsubpatternssucceedinmatching\ntheircorrespondingitem,thesequencepatternsucceeds.\nOtherwise,ifthesequencepatternisvariable-length:\n1. Ifthelengthofthesubjectsequenceislessthanthenumberofnon-starsubpatterns,thesequencepattern\nfails.\n2. Theleadingnon-starsubpatternsarematchedtotheircorrespondingitemsasforfixed-lengthsequences.\n3. Ifthepreviousstepsucceeds,thestarsubpatternmatchesalistformedoftheremainingsubjectitems,\nexcludingtheremainingitemscorrespondingtonon-starsubpatternsfollowingthestarsubpattern.\n4. Remainingnon-starsubpatternsarematchedtotheircorrespondingsubjectitems,asforafixed-length\nsequence.\n(cid:174) Note\nThelengthofthesubjectsequenceisobtainedvialen()(i.e. viathe__len__()protocol). Thislength\nmaybecachedbytheinterpreterinasimilarmannerasvaluepatterns.\nInsimpleterms[P1, P2, P3,\u2026, P<N>]matchesonlyifallthefollowinghappens:\n\u2022 check<subject>isasequence\n\u2022 len(subject) == <N>\n\u2022 P1matches<subject>[0](notethatthismatchcanalsobindnames)\n\u2022 P2matches<subject>[1](notethatthismatchcanalsobindnames)\n\u2022 \u2026andsoonforthecorrespondingpattern/element.\n2Inpatternmatching,asequenceisdefinedasoneofthefollowing:\n\u2022 aclassthatinheritsfromcollections.abc.Sequence\n\u2022 aPythonclassthathasbeenregisteredascollections.abc.Sequence\n\u2022 abuiltinclassthathasits(CPython)Py_TPFLAGS_SEQUENCEbitset\n\u2022 aclassthatinheritsfromanyoftheabove\nThefollowingstandardlibraryclassesaresequences:\n\u2022 array.array\n\u2022 collections.deque\n\u2022 list\n\u2022 memoryview\n\u2022 range\n\u2022 tuple\n(cid:174) Note\nSubjectvaluesoftypestr,bytes,andbytearraydonotmatchsequencepatterns.\n120 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\nMappingPatterns\nAmappingpatterncontainsoneormorekey-valuepatterns. Thesyntaxissimilartotheconstructionofadictionary.\nSyntax:\nmapping_pattern ::= \"{\" [items_pattern] \"}\"\nitems_pattern ::= \",\".key_value_pattern+ \",\"?\nkey_value_pattern ::= (literal_pattern | value_pattern) \":\" pattern\n| double_star_pattern\ndouble_star_pattern ::= \"**\" capture_pattern\nAtmostonedoublestarpatternmaybeinamappingpattern. Thedoublestarpatternmustbethelastsubpatternin\nthemappingpattern.\nDuplicatekeysinmappingpatternsaredisallowed. DuplicateliteralkeyswillraiseaSyntaxError. Twokeysthat\notherwisehavethesamevaluewillraiseaValueErroratruntime.\nThefollowingisthelogicalflowformatchingamappingpatternagainstasubjectvalue:\n1. Ifthesubjectvalueisnotamapping3,themappingpatternfails.\n2. Ifeverykeygiveninthemappingpatternispresentinthesubjectmapping,andthepatternforeachkeymatches\nthecorrespondingitemofthesubjectmapping,themappingpatternsucceeds.\n3. Ifduplicatekeysaredetectedinthemappingpattern,thepatternisconsideredinvalid. ASyntaxErroris\nraisedforduplicateliteralvalues;oraValueErrorfornamedkeysofthesamevalue.\n(cid:174) Note\nKey-value pairs are matched using the two-argument form of the mapping subject\u2019s get() method. Matched\nkey-value pairs must already be present in the mapping, and not created on-the-fly via __missing__() or\n__getitem__().\nInsimpleterms{KEY1: P1, KEY2: P2, ... }matchesonlyifallthefollowinghappens:\n\u2022 check<subject>isamapping\n\u2022 KEY1 in <subject>\n\u2022 P1matches<subject>[KEY1]\n\u2022 \u2026andsoonforthecorrespondingKEY/patternpair.\nClassPatterns\nAclasspatternrepresentsaclassanditspositionalandkeywordarguments(ifany). Syntax:\nclass_pattern ::= name_or_attr \"(\" [pattern_arguments \",\"?] \")\"\npattern_arguments ::= positional_patterns [\",\" keyword_patterns]\n| keyword_patterns\npositional_patterns ::= \",\".pattern+\nkeyword_patterns ::= \",\".keyword_pattern+\nkeyword_pattern ::= NAME \"=\" pattern\nThesamekeywordshouldnotberepeatedinclasspatterns.\nThefollowingisthelogicalflowformatchingaclasspatternagainstasubjectvalue:\n1. Ifname_or_attrisnotaninstanceofthebuiltintype,raiseTypeError.\n3Inpatternmatching,amappingisdefinedasoneofthefollowing:\n\u2022 aclassthatinheritsfromcollections.abc.Mapping\n\u2022 aPythonclassthathasbeenregisteredascollections.abc.Mapping\n\u2022 abuiltinclassthathasits(CPython)Py_TPFLAGS_MAPPINGbitset\n\u2022 aclassthatinheritsfromanyoftheabove\nThestandardlibraryclassesdictandtypes.MappingProxyTypearemappings.\n8.6. Thematchstatement 121\nThePythonLanguageReference,Release3.13.3\n2. Ifthesubjectvalueisnotaninstanceofname_or_attr(testedviaisinstance()),theclasspatternfails.\n3. Ifnopatternargumentsarepresent,thepatternsucceeds. Otherwise,thesubsequentstepsdependonwhether\nkeywordorpositionalargumentpatternsarepresent.\nForanumberofbuilt-intypes(specifiedbelow),asinglepositionalsubpatternisacceptedwhichwillmatch\ntheentiresubject;forthesetypeskeywordpatternsalsoworkasforothertypes.\nIfonlykeywordpatternsarepresent,theyareprocessedasfollows,onebyone:\nI.Thekeywordislookedupasanattributeonthesubject.\n\u2022 IfthisraisesanexceptionotherthanAttributeError,theexceptionbubblesup.\n\u2022 IfthisraisesAttributeError,theclasspatternhasfailed.\n\u2022 Else,thesubpatternassociatedwiththekeywordpatternismatchedagainstthesubject\u2019sattributevalue.\nIfthisfails,theclasspatternfails;ifthissucceeds,thematchproceedstothenextkeyword.\nII.Ifallkeywordpatternssucceed,theclasspatternsucceeds.\nIf any positional patterns are present, they are converted to keyword patterns using the __match_args__\nattributeontheclassname_or_attrbeforematching:\nI.Theequivalentofgetattr(cls, \"__match_args__\", ())iscalled.\n\u2022 Ifthisraisesanexception,theexceptionbubblesup.\n\u2022 Ifthereturnedvalueisnotatuple,theconversionfailsandTypeErrorisraised.\n\u2022 If there are more positional patterns than len(cls.__match_args__), TypeError is\nraised.\n\u2022 Otherwise,positionalpatterniisconvertedtoakeywordpatternusing__match_args__[i]\nasthekeyword. __match_args__[i]mustbeastring;ifnotTypeErrorisraised.\n\u2022 Ifthereareduplicatekeywords,TypeErrorisraised.\n(cid:181) Seealso\nCustomizingpositionalargumentsinclasspatternmatching\nII.Onceallpositionalpatternshavebeenconvertedtokeywordpatterns,\nthematchproceedsasiftherewereonlykeywordpatterns.\nForthefollowingbuilt-intypesthehandlingofpositionalsubpatternsisdifferent:\n\u2022 bool\n\u2022 bytearray\n\u2022 bytes\n\u2022 dict\n\u2022 float\n\u2022 frozenset\n\u2022 int\n\u2022 list\n\u2022 set\n\u2022 str\n\u2022 tuple\nTheseclassesacceptasinglepositionalargument, andthepatternthereismatchedagainstthewholeobject\nratherthananattribute. Forexampleint(0|1)matchesthevalue0,butnotthevalue0.0.\n122 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\nInsimpletermsCLS(P1, attr=P2)matchesonlyifthefollowinghappens:\n\u2022 isinstance(<subject>, CLS)\n\u2022 convertP1toakeywordpatternusingCLS.__match_args__\n\u2022 Foreachkeywordargumentattr=P2:\n\u2013 hasattr(<subject>, \"attr\")\n\u2013 P2matches<subject>.attr\n\u2022 \u2026andsoonforthecorrespondingkeywordargument/patternpair.\n(cid:181) Seealso\n\u2022 PEP634\u2013StructuralPatternMatching: Specification\n\u2022 PEP636\u2013StructuralPatternMatching: Tutorial\n8.7 Function definitions\nAfunctiondefinitiondefinesauser-definedfunctionobject(seesectionThestandardtypehierarchy):\nfuncdef ::= [decorators] \"def\" funcname [type_params] \"(\" [parameter_list] \")\"\n[\"->\" expression] \":\" suite\ndecorators ::= decorator+\ndecorator ::= \"@\" assignment_expression NEWLINE\nparameter_list ::= defparameter (\",\" defparameter)* \",\" \"/\" [\",\" [parameter_list_no_posonly]]\n| parameter_list_no_posonly\nparameter_list_no_posonly ::= defparameter (\",\" defparameter)* [\",\" [parameter_list_starargs]]\n| parameter_list_starargs\nparameter_list_starargs ::= \"*\" [star_parameter] (\",\" defparameter)* [\",\" [parameter_star_kwargs]]\n| \"*\" (\",\" defparameter)+ [\",\" [parameter_star_kwargs]]\n| parameter_star_kwargs\nparameter_star_kwargs ::= \"**\" parameter [\",\"]\nparameter ::= identifier [\":\" expression]\nstar_parameter ::= identifier [\":\" [\"*\"] expression]\ndefparameter ::= parameter [\"=\" expression]\nfuncname ::= identifier\nAfunctiondefinitionisanexecutablestatement. Itsexecutionbindsthefunctionnameinthecurrentlocalnamespace\ntoafunctionobject(awrapperaroundtheexecutablecodeforthefunction). Thisfunctionobjectcontainsareference\ntothecurrentglobalnamespaceastheglobalnamespacetobeusedwhenthefunctioniscalled.\nThefunctiondefinitiondoesnotexecutethefunctionbody;thisgetsexecutedonlywhenthefunctioniscalled.4\nAfunctiondefinitionmaybewrappedbyoneormoredecorator expressions. Decoratorexpressionsareevaluated\nwhenthefunctionisdefined,inthescopethatcontainsthefunctiondefinition. Theresultmustbeacallable,which\nisinvokedwiththefunctionobjectastheonlyargument. Thereturnedvalueisboundtothefunctionnameinstead\nofthefunctionobject. Multipledecoratorsareappliedinnestedfashion. Forexample,thefollowingcode\n@f1(arg)\n@f2\ndef func(): pass\nisroughlyequivalentto\n4Astringliteralappearingasthefirststatementinthefunctionbodyistransformedintothefunction\u2019s__doc__attributeandthereforethe\nfunction\u2019sdocstring.\n8.7. Functiondefinitions 123\nThePythonLanguageReference,Release3.13.3\ndef func(): pass\nfunc = f1(arg)(f2(func))\nexceptthattheoriginalfunctionisnottemporarilyboundtothenamefunc.\nChanged in version 3.9: Functions may be decorated with any valid assignment_expression. Previously, the\ngrammarwasmuchmorerestrictive;seePEP614fordetails.\nAlistoftypeparametersmaybegiveninsquarebracketsbetweenthefunction\u2019snameandtheopeningparenthesisfor\nitsparameterlist. Thisindicatestostatictypecheckersthatthefunctionisgeneric. Atruntime,thetypeparameters\ncanberetrievedfromthefunction\u2019s__type_params__attribute. SeeGenericfunctionsformore.\nChangedinversion3.12: TypeparameterlistsarenewinPython3.12.\nWhenoneormoreparametershavetheformparameter=expression,thefunctionissaidtohave\u201cdefaultparameter\nvalues.\u201d Foraparameterwithadefaultvalue,thecorrespondingargumentmaybeomittedfromacall,inwhichcase\ntheparameter\u2019sdefaultvalueissubstituted. Ifaparameterhasadefaultvalue,allfollowingparametersupuntilthe\n\u201c*\u201dmustalsohaveadefaultvalue\u2014thisisasyntacticrestrictionthatisnotexpressedbythegrammar.\nDefaultparametervaluesareevaluatedfromlefttorightwhenthefunctiondefinitionisexecuted. Thismeans\nthattheexpressionisevaluatedonce,whenthefunctionisdefined,andthatthesame\u201cpre-computed\u201dvalueisused\nforeachcall. Thisisespeciallyimportanttounderstandwhenadefaultparametervalueisamutableobject,suchas\nalistoradictionary: ifthefunctionmodifiestheobject(e.g. byappendinganitemtoalist),thedefaultparameter\nvalueisineffectmodified. Thisisgenerallynotwhatwasintended. AwayaroundthisistouseNoneasthedefault,\nandexplicitlytestforitinthebodyofthefunction,e.g.:\ndef whats_on_the_telly(penguin=None):\nif penguin is None:\npenguin = []\npenguin.append(\"property of the zoo\")\nreturn penguin\nFunctioncallsemanticsaredescribedinmoredetailinsectionCalls. Afunctioncallalwaysassignsvaluestoallpa-\nrametersmentionedintheparameterlist,eitherfrompositionalarguments,fromkeywordarguments,orfromdefault\nvalues. Iftheform\u201c*identifier\u201dispresent,itisinitializedtoatuplereceivinganyexcesspositionalparameters,\ndefaultingtotheemptytuple. If theform\u201c**identifier\u201dispresent, itisinitializedtoaneworderedmapping\nreceiving any excess keyword arguments, defaulting to a new empty mapping of the same type. Parameters after\n\u201c*\u201dor\u201c*identifier\u201darekeyword-onlyparametersandmayonlybepassedbykeywordarguments. Parameters\nbefore\u201c/\u201darepositional-onlyparametersandmayonlybepassedbypositionalarguments.\nChangedinversion3.8: The/functionparametersyntaxmaybeusedtoindicatepositional-onlyparameters. See\nPEP570fordetails.\nParametersmayhaveanannotationoftheform\u201c: expression\u201dfollowingtheparametername. Anyparameter\nmayhaveanannotation,eventhoseoftheform*identifieror**identifier. (Asaspecialcase,parameters\noftheform*identifiermayhaveanannotation\u201c: *expression\u201d.) Functionsmayhave\u201creturn\u201dannotation\nof the form \u201c-> expression\u201d after the parameter list. These annotations can be any valid Python expression.\nThe presence of annotations does not change the semantics of a function. The annotation values are available as\nvaluesofadictionarykeyedbytheparameters\u2019namesinthe__annotations__attributeofthefunctionobject. If\ntheannotationsimportfrom__future__isused,annotationsarepreservedasstringsatruntimewhichenables\npostponedevaluation. Otherwise,theyareevaluatedwhenthefunctiondefinitionisexecuted. Inthiscaseannotations\nmaybeevaluatedinadifferentorderthantheyappearinthesourcecode.\nChangedinversion3.11: Parametersoftheform\u201c*identifier\u201dmayhaveanannotation\u201c: *expression\u201d. See\nPEP646.\nItisalsopossibletocreateanonymousfunctions(functionsnotboundtoaname),forimmediateuseinexpressions.\nThisuseslambdaexpressions,describedinsectionLambdas. Notethatthelambdaexpressionismerelyashorthand\nfor a simplified function definition; a function defined in a \u201cdef\u201d statement can be passed around or assigned to\nanothernamejustlikeafunctiondefinedbyalambdaexpression. The\u201cdef\u201dformisactuallymorepowerfulsinceit\nallowstheexecutionofmultiplestatementsandannotations.\n124 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\nProgrammer\u2019s note: Functions are first-class objects. A \u201cdef\u201d statement executed inside a function definition\ndefinesalocalfunctionthatcanbereturnedorpassedaround. Freevariablesusedinthenestedfunctioncanaccess\nthelocalvariablesofthefunctioncontainingthedef. SeesectionNamingandbindingfordetails.\n(cid:181) Seealso\nPEP3107-FunctionAnnotations\nTheoriginalspecificationforfunctionannotations.\nPEP484-TypeHints\nDefinitionofastandardmeaningforannotations: typehints.\nPEP526-SyntaxforVariableAnnotations\nAbilitytotypehintvariabledeclarations,includingclassvariablesandinstancevariables.\nPEP563-PostponedEvaluationofAnnotations\nSupport for forward references within annotations by preserving annotations in a string form at runtime\ninsteadofeagerevaluation.\nPEP318-DecoratorsforFunctionsandMethods\nFunctionandmethoddecoratorswereintroduced. ClassdecoratorswereintroducedinPEP3129.\n8.8 Class definitions\nAclassdefinitiondefinesaclassobject(seesectionThestandardtypehierarchy):\nclassdef ::= [decorators] \"class\" classname [type_params] [inheritance] \":\" suite\ninheritance ::= \"(\" [argument_list] \")\"\nclassname ::= identifier\nAclassdefinitionisanexecutablestatement. Theinheritancelistusuallygivesalistofbaseclasses(seeMetaclasses\nformoreadvanceduses),soeachiteminthelistshouldevaluatetoaclassobjectwhichallowssubclassing. Classes\nwithoutaninheritancelistinherit,bydefault,fromthebaseclassobject;hence,\nclass Foo:\npass\nisequivalentto\nclass Foo(object):\npass\nThe class\u2019s suite is then executed in a new execution frame (see Naming and binding), using a newly created local\nnamespace and theoriginal global namespace. (Usually, the suite containsmostly function definitions.) Whenthe\nclass\u2019ssuitefinishesexecution,itsexecutionframeisdiscardedbutitslocalnamespaceissaved.5 Aclassobjectis\nthencreatedusingtheinheritancelistforthebaseclassesandthesavedlocalnamespacefortheattributedictionary.\nTheclassnameisboundtothisclassobjectintheoriginallocalnamespace.\nTheorderinwhichattributesaredefinedintheclassbodyispreservedinthenewclass\u2019s__dict__. Notethatthis\nisreliableonlyrightaftertheclassiscreatedandonlyforclassesthatweredefinedusingthedefinitionsyntax.\nClasscreationcanbecustomizedheavilyusingmetaclasses.\nClassescanalsobedecorated: justlikewhendecoratingfunctions,\n@f1(arg)\n@f2\nclass Foo: pass\n5Astringliteralappearingasthefirststatementintheclassbodyistransformedintothenamespace\u2019s__doc__itemandthereforetheclass\u2019s\ndocstring.\n8.8. Classdefinitions 125\nThePythonLanguageReference,Release3.13.3\nisroughlyequivalentto\nclass Foo: pass\nFoo = f1(arg)(f2(Foo))\nTheevaluationrulesforthedecoratorexpressionsarethesameasforfunctiondecorators. Theresultisthenbound\ntotheclassname.\nChanged in version 3.9: Classes may be decorated with any valid assignment_expression. Previously, the\ngrammarwasmuchmorerestrictive;seePEP614fordetails.\nA list of type parameters may be given in square brackets immediately after the class\u2019s name. This indicates to\nstatic type checkers that the class is generic. At runtime, the type parameters can be retrieved from the class\u2019s\n__type_params__attribute. SeeGenericclassesformore.\nChangedinversion3.12: TypeparameterlistsarenewinPython3.12.\nProgrammer\u2019snote: Variablesdefinedintheclassdefinitionareclassattributes;theyaresharedbyinstances. In-\nstanceattributescanbesetinamethodwithself.name = value. Bothclassandinstanceattributesareaccessible\nthroughthenotation\u201cself.name\u201d, andaninstanceattributehidesaclassattributewiththesamenamewhenac-\ncessedinthisway. Classattributescanbeusedasdefaultsforinstanceattributes,butusingmutablevaluestherecan\nleadtounexpectedresults. Descriptorscanbeusedtocreateinstancevariableswithdifferentimplementationdetails.\n(cid:181) Seealso\nPEP3115-MetaclassesinPython3000\nTheproposalthatchangedthedeclarationofmetaclassestothecurrentsyntax,andthesemanticsforhow\nclasseswithmetaclassesareconstructed.\nPEP3129-ClassDecorators\nTheproposalthataddedclassdecorators. FunctionandmethoddecoratorswereintroducedinPEP318.\n8.9 Coroutines\nAddedinversion3.5.\n8.9.1 Coroutine function definition\nasync_funcdef ::= [decorators] \"async\" \"def\" funcname \"(\" [parameter_list] \")\"\n[\"->\" expression] \":\" suite\nExecutionofPythoncoroutinescanbesuspendedandresumedatmanypoints(seecoroutine). awaitexpressions,\nasync forandasync withcanonlybeusedinthebodyofacoroutinefunction.\nFunctions defined with async def syntax are always coroutine functions, even if they do not contain await or\nasynckeywords.\nItisaSyntaxErrortouseayield fromexpressioninsidethebodyofacoroutinefunction.\nAnexampleofacoroutinefunction:\nasync def func(param1, param2):\ndo_stuff()\nawait some_coroutine()\nChangedinversion3.7: awaitandasyncarenowkeywords;previouslytheywereonlytreatedassuchinsidethe\nbodyofacoroutinefunction.\n126 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\n8.9.2 The async for statement\nasync_for_stmt ::= \"async\" for_stmt\nAnasynchronousiterableprovidesan__aiter__methodthatdirectlyreturnsanasynchronousiterator,whichcan\ncallasynchronouscodeinits__anext__method.\nTheasync forstatementallowsconvenientiterationoverasynchronousiterables.\nThefollowingcode:\nasync for TARGET in ITER:\nSUITE\nelse:\nSUITE2\nIssemanticallyequivalentto:\niter = (ITER)\niter = type(iter).__aiter__(iter)\nrunning = True\nwhile running:\ntry:\nTARGET = await type(iter).__anext__(iter)\nexcept StopAsyncIteration:\nrunning = False\nelse:\nSUITE\nelse:\nSUITE2\nSeealso__aiter__()and__anext__()fordetails.\nItisaSyntaxErrortouseanasync forstatementoutsidethebodyofacoroutinefunction.\n8.9.3 The async with statement\nasync_with_stmt ::= \"async\" with_stmt\nAnasynchronouscontextmanagerisacontextmanagerthatisabletosuspendexecutioninitsenterandexitmethods.\nThefollowingcode:\nasync with EXPRESSION as TARGET:\nSUITE\nissemanticallyequivalentto:\nmanager = (EXPRESSION)\naenter = type(manager).__aenter__\naexit = type(manager).__aexit__\nvalue = await aenter(manager)\nhit_except = False\ntry:\nTARGET = value\nSUITE\nexcept:\nhit_except = True\nif not await aexit(manager, *sys.exc_info()):\n(continuesonnextpage)\n8.9. Coroutines 127\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nraise\nfinally:\nif not hit_except:\nawait aexit(manager, None, None, None)\nSeealso__aenter__()and__aexit__()fordetails.\nItisaSyntaxErrortouseanasync withstatementoutsidethebodyofacoroutinefunction.\n(cid:181) Seealso\nPEP492-Coroutineswithasyncandawaitsyntax\nTheproposalthatmadecoroutinesaproperstandaloneconceptinPython,andaddedsupportingsyntax.\n8.10 Type parameter lists\nAddedinversion3.12.\nChangedinversion3.13: Supportfordefaultvalueswasadded(seePEP696).\ntype_params ::= \"[\" type_param (\",\" type_param)* \"]\"\ntype_param ::= typevar | typevartuple | paramspec\ntypevar ::= identifier (\":\" expression)? (\"=\" expression)?\ntypevartuple ::= \"*\" identifier (\"=\" expression)?\nparamspec ::= \"**\" identifier (\"=\" expression)?\nFunctions(includingcoroutines),classesandtypealiasesmaycontainatypeparameterlist:\ndef max[T](args: list[T]) -> T:\n...\nasync def amax[T](args: list[T]) -> T:\n...\nclass Bag[T]:\ndef __iter__(self) -> Iterator[T]:\n...\ndef add(self, arg: T) -> None:\n...\ntype ListOrSet[T] = list[T] | set[T]\nSemantically,thisindicatesthatthefunction,class,ortypealiasisgenericoveratypevariable. Thisinformationis\nprimarilyusedbystatictypecheckers,andatruntime,genericobjectsbehavemuchliketheirnon-genericcounter-\nparts.\nTypeparametersaredeclaredinsquarebrackets([])immediatelyafterthenameofthefunction,class,ortypealias.\nThetypeparametersareaccessiblewithinthescopeofthegenericobject,butnotelsewhere. Thus,afteradeclaration\ndef func[T](): pass,thenameTisnotavailableinthemodulescope. Below,thesemanticsofgenericobjects\naredescribedwithmoreprecision. Thescopeoftypeparametersismodeledwithaspecialfunction(technically,an\nannotationscope)thatwrapsthecreationofthegenericobject.\nGenericfunctions,classes,andtypealiaseshavea__type_params__attributelistingtheirtypeparameters.\nTypeparameterscomeinthreekinds:\n\u2022 typing.TypeVar,introducedbyaplainname(e.g.,T).Semantically,thisrepresentsasingletypetoatype\nchecker.\n128 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\n\u2022 typing.TypeVarTuple,introducedbyanameprefixedwithasingleasterisk(e.g.,*Ts). Semantically,this\nstandsforatupleofanynumberoftypes.\n\u2022 typing.ParamSpec,introducedbyanameprefixedwithtwoasterisks(e.g.,**P).Semantically,thisstands\nfortheparametersofacallable.\ntyping.TypeVar declarations can define bounds and constraints with a colon (:) followed by an expression. A\nsingle expression after the colon indicates a bound (e.g. T: int). Semantically, this means that the typing.\nTypeVarcanonlyrepresenttypesthatareasubtypeofthisbound. Aparenthesizedtupleofexpressionsafterthe\ncolonindicatesasetofconstraints(e.g. T: (str, bytes)). Eachmemberofthetupleshouldbeatype(again,\nthisisnotenforcedatruntime). Constrainedtypevariablescanonlytakeononeofthetypesinthelistofconstraints.\nFortyping.TypeVarsdeclaredusingthetypeparameterlistsyntax,theboundandconstraintsarenotevaluated\nwhenthegenericobjectiscreated,butonlywhenthevalueisexplicitlyaccessedthroughtheattributes__bound__\nand__constraints__. Toaccomplishthis,theboundsorconstraintsareevaluatedinaseparateannotationscope.\ntyping.TypeVarTuplesandtyping.ParamSpecscannothaveboundsorconstraints.\nAll three flavors of type parameters can also have a default value, which is used when the type parameter is not\nexplicitlyprovided. Thisisaddedbyappendingasingleequalssign(=)followedbyanexpression. Likethebounds\nandconstraintsoftypevariables,thedefaultvalueisnotevaluatedwhentheobjectiscreated,butonlywhenthetype\nparameter\u2019s__default__attributeisaccessed. Tothisend,thedefaultvalueisevaluatedinaseparateannotation\nscope. Ifnodefaultvalueisspecifiedforatypeparameter,the__default__attributeissettothespecialsentinel\nobjecttyping.NoDefault.\nThefollowingexampleindicatesthefullsetofallowedtypeparameterdeclarations:\ndef overly_generic[\nSimpleTypeVar,\nTypeVarWithDefault = int,\nTypeVarWithBound: int,\nTypeVarWithConstraints: (str, bytes),\n*SimpleTypeVarTuple = (int, float),\n**SimpleParamSpec = (str, bytearray),\n](\na: SimpleTypeVar,\nb: TypeVarWithDefault,\nc: TypeVarWithBound,\nd: Callable[SimpleParamSpec, TypeVarWithConstraints],\n*e: SimpleTypeVarTuple,\n): ...\n8.10.1 Generic functions\nGenericfunctionsaredeclaredasfollows:\ndef func[T](arg: T): ...\nThissyntaxisequivalentto:\nannotation-def TYPE_PARAMS_OF_func():\nT = typing.TypeVar(\"T\")\ndef func(arg: T): ...\nfunc.__type_params__ = (T,)\nreturn func\nfunc = TYPE_PARAMS_OF_func()\nHereannotation-defindicatesanannotationscope, whichisnotactuallyboundtoanynameatruntime. (One\notherlibertyistakeninthetranslation: thesyntaxdoesnotgothroughattributeaccessonthetypingmodule,but\ncreatesaninstanceoftyping.TypeVardirectly.)\n8.10. Typeparameterlists 129\nThePythonLanguageReference,Release3.13.3\nTheannotationsofgenericfunctionsareevaluatedwithintheannotationscopeusedfordeclaringthetypeparameters,\nbutthefunction\u2019sdefaultsanddecoratorsarenot.\nThefollowingexampleillustratesthescopingrulesforthesecases,aswellasforadditionalflavorsoftypeparameters:\n@decorator\ndef func[T: int, *Ts, **P](*args: *Ts, arg: Callable[P, T] = some_default):\n...\nExceptforthelazyevaluationoftheTypeVarbound,thisisequivalentto:\nDEFAULT_OF_arg = some_default\nannotation-def TYPE_PARAMS_OF_func():\nannotation-def BOUND_OF_T():\nreturn int\n# In reality, BOUND_OF_T() is evaluated only on demand.\nT = typing.TypeVar(\"T\", bound=BOUND_OF_T())\nTs = typing.TypeVarTuple(\"Ts\")\nP = typing.ParamSpec(\"P\")\ndef func(*args: *Ts, arg: Callable[P, T] = DEFAULT_OF_arg):\n...\nfunc.__type_params__ = (T, Ts, P)\nreturn func\nfunc = decorator(TYPE_PARAMS_OF_func())\nThecapitalizednameslikeDEFAULT_OF_argarenotactuallyboundatruntime.\n8.10.2 Generic classes\nGenericclassesaredeclaredasfollows:\nclass Bag[T]: ...\nThissyntaxisequivalentto:\nannotation-def TYPE_PARAMS_OF_Bag():\nT = typing.TypeVar(\"T\")\nclass Bag(typing.Generic[T]):\n__type_params__ = (T,)\n...\nreturn Bag\nBag = TYPE_PARAMS_OF_Bag()\nHere again annotation-def (not a real keyword) indicates an annotation scope, and the name\nTYPE_PARAMS_OF_Bagisnotactuallyboundatruntime.\nGeneric classes implicitly inherit from typing.Generic. The base classes and keyword arguments of generic\nclassesareevaluatedwithinthetypescopeforthetypeparameters,anddecoratorsareevaluatedoutsidethatscope.\nThisisillustratedbythisexample:\n@decorator\nclass Bag(Base[T], arg=T): ...\nThisisequivalentto:\n130 Chapter8. Compoundstatements\nThePythonLanguageReference,Release3.13.3\nannotation-def TYPE_PARAMS_OF_Bag():\nT = typing.TypeVar(\"T\")\nclass Bag(Base[T], typing.Generic[T], arg=T):\n__type_params__ = (T,)\n...\nreturn Bag\nBag = decorator(TYPE_PARAMS_OF_Bag())\n8.10.3 Generic type aliases\nThetypestatementcanalsobeusedtocreateagenerictypealias:\ntype ListOrSet[T] = list[T] | set[T]\nExceptforthelazyevaluationofthevalue,thisisequivalentto:\nannotation-def TYPE_PARAMS_OF_ListOrSet():\nT = typing.TypeVar(\"T\")\nannotation-def VALUE_OF_ListOrSet():\nreturn list[T] | set[T]\n# In reality, the value is lazily evaluated\nreturn typing.TypeAliasType(\"ListOrSet\", VALUE_OF_ListOrSet(), type_params=(T,\n,\u2192))\nListOrSet = TYPE_PARAMS_OF_ListOrSet()\nHere, annotation-def (not a real keyword) indicates an annotation scope. The capitalized names like\nTYPE_PARAMS_OF_ListOrSetarenotactuallyboundatruntime.\n8.10. Typeparameterlists 131\nThePythonLanguageReference,Release3.13.3\n132 Chapter8. Compoundstatements\nCHAPTER\nNINE\nTOP-LEVEL COMPONENTS\nThePythoninterpretercangetitsinputfromanumberofsources: fromascriptpassedtoitasstandardinputoras\nprogramargument,typedininteractively,fromamodulesourcefile,etc. Thischaptergivesthesyntaxusedinthese\ncases.\n9.1 Complete Python programs\nWhilealanguagespecificationneednotprescribehowthelanguageinterpreterisinvoked,itisusefultohaveanotion\nofacompletePythonprogram. AcompletePythonprogramisexecutedinaminimallyinitializedenvironment: all\nbuilt-inandstandardmodulesareavailable,butnonehavebeeninitialized,exceptforsys(varioussystemservices),\nbuiltins (built-in functions, exceptions and None) and __main__. The latter is used to provide the local and\nglobalnamespaceforexecutionofthecompleteprogram.\nThesyntaxforacompletePythonprogramisthatforfileinput,describedinthenextsection.\nTheinterpretermayalsobeinvokedininteractivemode;inthiscase,itdoesnotreadandexecuteacompleteprogram\nbutreadsandexecutesonestatement(possiblycompound)atatime. Theinitialenvironmentisidenticaltothatofa\ncompleteprogram;eachstatementisexecutedinthenamespaceof__main__.\nAcompleteprogramcanbepassedtotheinterpreterinthreeforms: withthe-cstringcommandlineoption,asa\nfilepassedasthefirstcommandlineargument,orasstandardinput. Ifthefileorstandardinputisattydevice,the\ninterpreterentersinteractivemode;otherwise,itexecutesthefileasacompleteprogram.\n9.2 File input\nAllinputreadfromnon-interactivefileshasthesameform:\nfile_input ::= (NEWLINE | statement)*\nThissyntaxisusedinthefollowingsituations:\n\u2022 whenparsingacompletePythonprogram(fromafileorfromastring);\n\u2022 whenparsingamodule;\n\u2022 whenparsingastringpassedtotheexec()function;\n9.3 Interactive input\nInputininteractivemodeisparsedusingthefollowinggrammar:\ninteractive_input ::= [stmt_list] NEWLINE | compound_stmt NEWLINE\nNotethata(top-level)compoundstatementmustbefollowedbyablanklineininteractivemode;thisisneededto\nhelptheparserdetecttheendoftheinput.\n133\nThePythonLanguageReference,Release3.13.3\n9.4 Expression input\neval()isusedforexpressioninput. Itignoresleadingwhitespace. Thestringargumenttoeval()musthavethe\nfollowingform:\neval_input ::= expression_list NEWLINE*\n134 Chapter9. Top-levelcomponents\nCHAPTER\nTEN\nFULL GRAMMAR SPECIFICATION\nThisisthefullPythongrammar,deriveddirectlyfromthegrammarusedtogeneratetheCPythonparser(seeGram-\nmar/python.gram). Theversionhereomitsdetailsrelatedtocodegenerationanderrorrecovery.\nThenotationisamixtureofEBNFandPEG.Inparticular, &followedbyasymbol, tokenorparenthesizedgroup\nindicatesapositivelookahead(i.e.,isrequiredtomatchbutnotconsumed),while!indicatesanegativelookahead\n(i.e.,isrequirednot tomatch). Weusethe|separatortomeanPEG\u2019s\u201corderedchoice\u201d(writtenas/intraditional\nPEGgrammars). SeePEP617formoredetailsonthegrammar\u2019ssyntax.\n# PEG grammar for Python\n# ========================= START OF THE GRAMMAR =========================\n# General grammatical elements and rules:\n#\n# * Strings with double quotes (\") denote SOFT KEYWORDS\n# * Strings with single quotes (') denote KEYWORDS\n# * Upper case names (NAME) denote tokens in the Grammar/Tokens file\n# * Rule names starting with \"invalid_\" are used for specialized syntax errors\n# - These rules are NOT used in the first pass of the parser.\n# - Only if the first pass fails to parse, a second pass including the invalid\n# rules will be executed.\n# - If the parser fails in the second phase with a generic syntax error, the\n# location of the generic failure of the first pass will be used (this avoids\n# reporting incorrect locations due to the invalid rules).\n# - The order of the alternatives involving invalid rules matter\n# (like any rule in PEG).\n#\n# Grammar Syntax (see PEP 617 for more information):\n#\n# rule_name: expression\n# Optionally, a type can be included right after the rule name, which\n# specifies the return type of the C or Python function corresponding to the\n# rule:\n# rule_name[return_type]: expression\n# If the return type is omitted, then a void * is returned in C and an Any in\n# Python.\n# e1 e2\n# Match e1, then match e2.\n# e1 | e2\n# Match e1 or e2.\n# The first alternative can also appear on the line after the rule name for\n# formatting purposes. In that case, a | must be used before the first\n# alternative, like so:\n(continuesonnextpage)\n135\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n# rule_name[return_type]:\n# | first_alt\n# | second_alt\n# ( e )\n# Match e (allows also to use other operators in the group like '(e)*')\n# [ e ] or e?\n# Optionally match e.\n# e*\n# Match zero or more occurrences of e.\n# e+\n# Match one or more occurrences of e.\n# s.e+\n# Match one or more occurrences of e, separated by s. The generated parse tree\n# does not include the separator. This is otherwise identical to (e (s e)*).\n# &e\n# Succeed if e can be parsed, without consuming any input.\n# !e\n# Fail if e can be parsed, without consuming any input.\n# ~\n# Commit to the current alternative, even if it fails to parse.\n# &&e\n# Eager parse e. The parser will not backtrack and will immediately\n# fail with SyntaxError if e cannot be parsed.\n#\n# STARTING RULES\n# ==============\nfile: [statements] ENDMARKER\ninteractive: statement_newline\neval: expressions NEWLINE* ENDMARKER\nfunc_type: '(' [type_expressions] ')' '->' expression NEWLINE* ENDMARKER\n# GENERAL STATEMENTS\n# ==================\nstatements: statement+\nstatement: compound_stmt | simple_stmts\nstatement_newline:\n| compound_stmt NEWLINE\n| simple_stmts\n| NEWLINE\n| ENDMARKER\nsimple_stmts:\n| simple_stmt !';' NEWLINE # Not needed, there for speedup\n| ';'.simple_stmt+ [';'] NEWLINE\n# NOTE: assignment MUST precede expression, else parsing a simple assignment\n# will throw a SyntaxError.\nsimple_stmt:\n| assignment\n| type_alias\n| star_expressions\n(continuesonnextpage)\n136 Chapter10. FullGrammarspecification\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n| return_stmt\n| import_stmt\n| raise_stmt\n| 'pass'\n| del_stmt\n| yield_stmt\n| assert_stmt\n| 'break'\n| 'continue'\n| global_stmt\n| nonlocal_stmt\ncompound_stmt:\n| function_def\n| if_stmt\n| class_def\n| with_stmt\n| for_stmt\n| try_stmt\n| while_stmt\n| match_stmt\n# SIMPLE STATEMENTS\n# =================\n# NOTE: annotated_rhs may start with 'yield'; yield_expr must start with 'yield'\nassignment:\n| NAME ':' expression ['=' annotated_rhs ]\n| ('(' single_target ')'\n| single_subscript_attribute_target) ':' expression ['=' annotated_rhs ]\n| (star_targets '=' )+ (yield_expr | star_expressions) !'=' [TYPE_COMMENT]\n| single_target augassign ~ (yield_expr | star_expressions)\nannotated_rhs: yield_expr | star_expressions\naugassign:\n| '+='\n| '-='\n| '*='\n| '@='\n| '/='\n| '%='\n| '&='\n| '|='\n| '^='\n| '<<='\n| '>>='\n| '**='\n| '//='\nreturn_stmt:\n| 'return' [star_expressions]\nraise_stmt:\n| 'raise' expression ['from' expression ]\n| 'raise'\n(continuesonnextpage)\n137\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nglobal_stmt: 'global' ','.NAME+\nnonlocal_stmt: 'nonlocal' ','.NAME+\ndel_stmt:\n| 'del' del_targets &(';' | NEWLINE)\nyield_stmt: yield_expr\nassert_stmt: 'assert' expression [',' expression ]\nimport_stmt:\n| import_name\n| import_from\n# Import statements\n# -----------------\nimport_name: 'import' dotted_as_names\n# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS\nimport_from:\n| 'from' ('.' | '...')* dotted_name 'import' import_from_targets\n| 'from' ('.' | '...')+ 'import' import_from_targets\nimport_from_targets:\n| '(' import_from_as_names [','] ')'\n| import_from_as_names !','\n| '*'\nimport_from_as_names:\n| ','.import_from_as_name+\nimport_from_as_name:\n| NAME ['as' NAME ]\ndotted_as_names:\n| ','.dotted_as_name+\ndotted_as_name:\n| dotted_name ['as' NAME ]\ndotted_name:\n| dotted_name '.' NAME\n| NAME\n# COMPOUND STATEMENTS\n# ===================\n# Common elements\n# ---------------\nblock:\n| NEWLINE INDENT statements DEDENT\n| simple_stmts\ndecorators: ('@' named_expression NEWLINE )+\n# Class definitions\n# -----------------\nclass_def:\n(continuesonnextpage)\n138 Chapter10. FullGrammarspecification\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n| decorators class_def_raw\n| class_def_raw\nclass_def_raw:\n| 'class' NAME [type_params] ['(' [arguments] ')' ] ':' block\n# Function definitions\n# --------------------\nfunction_def:\n| decorators function_def_raw\n| function_def_raw\nfunction_def_raw:\n| 'def' NAME [type_params] '(' [params] ')' ['->' expression ] ':' [func_type_\n,\u2192comment] block\n| 'async' 'def' NAME [type_params] '(' [params] ')' ['->' expression ] ':'\u2423\n,\u2192[func_type_comment] block\n# Function parameters\n# -------------------\nparams:\n| parameters\nparameters:\n| slash_no_default param_no_default* param_with_default* [star_etc]\n| slash_with_default param_with_default* [star_etc]\n| param_no_default+ param_with_default* [star_etc]\n| param_with_default+ [star_etc]\n| star_etc\n# Some duplication here because we can't write (',' | &')'),\n# which is because we don't support empty alternatives (yet).\nslash_no_default:\n| param_no_default+ '/' ','\n| param_no_default+ '/' &')'\nslash_with_default:\n| param_no_default* param_with_default+ '/' ','\n| param_no_default* param_with_default+ '/' &')'\nstar_etc:\n| '*' param_no_default param_maybe_default* [kwds]\n| '*' param_no_default_star_annotation param_maybe_default* [kwds]\n| '*' ',' param_maybe_default+ [kwds]\n| kwds\nkwds:\n| '**' param_no_default\n# One parameter. This *includes* a following comma and type comment.\n#\n# There are three styles:\n# - No default\n# - With default\n(continuesonnextpage)\n139\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n# - Maybe with default\n#\n# There are two alternative forms of each, to deal with type comments:\n# - Ends in a comma followed by an optional type comment\n# - No comma, optional type comment, must be followed by close paren\n# The latter form is for a final parameter without trailing comma.\n#\nparam_no_default:\n| param ',' TYPE_COMMENT?\n| param TYPE_COMMENT? &')'\nparam_no_default_star_annotation:\n| param_star_annotation ',' TYPE_COMMENT?\n| param_star_annotation TYPE_COMMENT? &')'\nparam_with_default:\n| param default ',' TYPE_COMMENT?\n| param default TYPE_COMMENT? &')'\nparam_maybe_default:\n| param default? ',' TYPE_COMMENT?\n| param default? TYPE_COMMENT? &')'\nparam: NAME annotation?\nparam_star_annotation: NAME star_annotation\nannotation: ':' expression\nstar_annotation: ':' star_expression\ndefault: '=' expression | invalid_default\n# If statement\n# ------------\nif_stmt:\n| 'if' named_expression ':' block elif_stmt\n| 'if' named_expression ':' block [else_block]\nelif_stmt:\n| 'elif' named_expression ':' block elif_stmt\n| 'elif' named_expression ':' block [else_block]\nelse_block:\n| 'else' ':' block\n# While statement\n# ---------------\nwhile_stmt:\n| 'while' named_expression ':' block [else_block]\n# For statement\n# -------------\nfor_stmt:\n| 'for' star_targets 'in' ~ star_expressions ':' [TYPE_COMMENT] block [else_\n,\u2192block]\n| 'async' 'for' star_targets 'in' ~ star_expressions ':' [TYPE_COMMENT] block\u2423\n,\u2192[else_block]\n# With statement\n# --------------\n(continuesonnextpage)\n140 Chapter10. FullGrammarspecification\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nwith_stmt:\n| 'with' '(' ','.with_item+ ','? ')' ':' [TYPE_COMMENT] block\n| 'with' ','.with_item+ ':' [TYPE_COMMENT] block\n| 'async' 'with' '(' ','.with_item+ ','? ')' ':' block\n| 'async' 'with' ','.with_item+ ':' [TYPE_COMMENT] block\nwith_item:\n| expression 'as' star_target &(',' | ')' | ':')\n| expression\n# Try statement\n# -------------\ntry_stmt:\n| 'try' ':' block finally_block\n| 'try' ':' block except_block+ [else_block] [finally_block]\n| 'try' ':' block except_star_block+ [else_block] [finally_block]\n# Except statement\n# ----------------\nexcept_block:\n| 'except' expression ['as' NAME ] ':' block\n| 'except' ':' block\nexcept_star_block:\n| 'except' '*' expression ['as' NAME ] ':' block\nfinally_block:\n| 'finally' ':' block\n# Match statement\n# ---------------\nmatch_stmt:\n| \"match\" subject_expr ':' NEWLINE INDENT case_block+ DEDENT\nsubject_expr:\n| star_named_expression ',' star_named_expressions?\n| named_expression\ncase_block:\n| \"case\" patterns guard? ':' block\nguard: 'if' named_expression\npatterns:\n| open_sequence_pattern\n| pattern\npattern:\n| as_pattern\n| or_pattern\nas_pattern:\n| or_pattern 'as' pattern_capture_target\n(continuesonnextpage)\n141\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nor_pattern:\n| '|'.closed_pattern+\nclosed_pattern:\n| literal_pattern\n| capture_pattern\n| wildcard_pattern\n| value_pattern\n| group_pattern\n| sequence_pattern\n| mapping_pattern\n| class_pattern\n# Literal patterns are used for equality and identity constraints\nliteral_pattern:\n| signed_number !('+' | '-')\n| complex_number\n| strings\n| 'None'\n| 'True'\n| 'False'\n# Literal expressions are used to restrict permitted mapping pattern keys\nliteral_expr:\n| signed_number !('+' | '-')\n| complex_number\n| strings\n| 'None'\n| 'True'\n| 'False'\ncomplex_number:\n| signed_real_number '+' imaginary_number\n| signed_real_number '-' imaginary_number\nsigned_number:\n| NUMBER\n| '-' NUMBER\nsigned_real_number:\n| real_number\n| '-' real_number\nreal_number:\n| NUMBER\nimaginary_number:\n| NUMBER\ncapture_pattern:\n| pattern_capture_target\npattern_capture_target:\n| !\"_\" NAME !('.' | '(' | '=')\nwildcard_pattern:\n(continuesonnextpage)\n142 Chapter10. FullGrammarspecification\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n| \"_\"\nvalue_pattern:\n| attr !('.' | '(' | '=')\nattr:\n| name_or_attr '.' NAME\nname_or_attr:\n| attr\n| NAME\ngroup_pattern:\n| '(' pattern ')'\nsequence_pattern:\n| '[' maybe_sequence_pattern? ']'\n| '(' open_sequence_pattern? ')'\nopen_sequence_pattern:\n| maybe_star_pattern ',' maybe_sequence_pattern?\nmaybe_sequence_pattern:\n| ','.maybe_star_pattern+ ','?\nmaybe_star_pattern:\n| star_pattern\n| pattern\nstar_pattern:\n| '*' pattern_capture_target\n| '*' wildcard_pattern\nmapping_pattern:\n| '{' '}'\n| '{' double_star_pattern ','? '}'\n| '{' items_pattern ',' double_star_pattern ','? '}'\n| '{' items_pattern ','? '}'\nitems_pattern:\n| ','.key_value_pattern+\nkey_value_pattern:\n| (literal_expr | attr) ':' pattern\ndouble_star_pattern:\n| '**' pattern_capture_target\nclass_pattern:\n| name_or_attr '(' ')'\n| name_or_attr '(' positional_patterns ','? ')'\n| name_or_attr '(' keyword_patterns ','? ')'\n| name_or_attr '(' positional_patterns ',' keyword_patterns ','? ')'\npositional_patterns:\n| ','.pattern+\n(continuesonnextpage)\n143\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nkeyword_patterns:\n| ','.keyword_pattern+\nkeyword_pattern:\n| NAME '=' pattern\n# Type statement\n# ---------------\ntype_alias:\n| \"type\" NAME [type_params] '=' expression\n# Type parameter declaration\n# --------------------------\ntype_params:\n| invalid_type_params\n| '[' type_param_seq ']'\ntype_param_seq: ','.type_param+ [',']\ntype_param:\n| NAME [type_param_bound] [type_param_default]\n| '*' NAME [type_param_starred_default]\n| '**' NAME [type_param_default]\ntype_param_bound: ':' expression\ntype_param_default: '=' expression\ntype_param_starred_default: '=' star_expression\n# EXPRESSIONS\n# -----------\nexpressions:\n| expression (',' expression )+ [',']\n| expression ','\n| expression\nexpression:\n| disjunction 'if' disjunction 'else' expression\n| disjunction\n| lambdef\nyield_expr:\n| 'yield' 'from' expression\n| 'yield' [star_expressions]\nstar_expressions:\n| star_expression (',' star_expression )+ [',']\n| star_expression ','\n| star_expression\nstar_expression:\n| '*' bitwise_or\n| expression\n(continuesonnextpage)\n144 Chapter10. FullGrammarspecification\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nstar_named_expressions: ','.star_named_expression+ [',']\nstar_named_expression:\n| '*' bitwise_or\n| named_expression\nassignment_expression:\n| NAME ':=' ~ expression\nnamed_expression:\n| assignment_expression\n| expression !':='\ndisjunction:\n| conjunction ('or' conjunction )+\n| conjunction\nconjunction:\n| inversion ('and' inversion )+\n| inversion\ninversion:\n| 'not' inversion\n| comparison\n# Comparison operators\n# --------------------\ncomparison:\n| bitwise_or compare_op_bitwise_or_pair+\n| bitwise_or\ncompare_op_bitwise_or_pair:\n| eq_bitwise_or\n| noteq_bitwise_or\n| lte_bitwise_or\n| lt_bitwise_or\n| gte_bitwise_or\n| gt_bitwise_or\n| notin_bitwise_or\n| in_bitwise_or\n| isnot_bitwise_or\n| is_bitwise_or\neq_bitwise_or: '==' bitwise_or\nnoteq_bitwise_or:\n| ('!=' ) bitwise_or\nlte_bitwise_or: '<=' bitwise_or\nlt_bitwise_or: '<' bitwise_or\ngte_bitwise_or: '>=' bitwise_or\ngt_bitwise_or: '>' bitwise_or\nnotin_bitwise_or: 'not' 'in' bitwise_or\nin_bitwise_or: 'in' bitwise_or\nisnot_bitwise_or: 'is' 'not' bitwise_or\nis_bitwise_or: 'is' bitwise_or\n(continuesonnextpage)\n145\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n# Bitwise operators\n# -----------------\nbitwise_or:\n| bitwise_or '|' bitwise_xor\n| bitwise_xor\nbitwise_xor:\n| bitwise_xor '^' bitwise_and\n| bitwise_and\nbitwise_and:\n| bitwise_and '&' shift_expr\n| shift_expr\nshift_expr:\n| shift_expr '<<' sum\n| shift_expr '>>' sum\n| sum\n# Arithmetic operators\n# --------------------\nsum:\n| sum '+' term\n| sum '-' term\n| term\nterm:\n| term '*' factor\n| term '/' factor\n| term '//' factor\n| term '%' factor\n| term '@' factor\n| factor\nfactor:\n| '+' factor\n| '-' factor\n| '~' factor\n| power\npower:\n| await_primary '**' factor\n| await_primary\n# Primary elements\n# ----------------\n# Primary elements are things like \"obj.something.something\", \"obj[something]\",\n,\u2192\"obj(something)\", \"obj\" ...\nawait_primary:\n| 'await' primary\n| primary\n(continuesonnextpage)\n146 Chapter10. FullGrammarspecification\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nprimary:\n| primary '.' NAME\n| primary genexp\n| primary '(' [arguments] ')'\n| primary '[' slices ']'\n| atom\nslices:\n| slice !','\n| ','.(slice | starred_expression)+ [',']\nslice:\n| [expression] ':' [expression] [':' [expression] ]\n| named_expression\natom:\n| NAME\n| 'True'\n| 'False'\n| 'None'\n| strings\n| NUMBER\n| (tuple | group | genexp)\n| (list | listcomp)\n| (dict | set | dictcomp | setcomp)\n| '...'\ngroup:\n| '(' (yield_expr | named_expression) ')'\n# Lambda functions\n# ----------------\nlambdef:\n| 'lambda' [lambda_params] ':' expression\nlambda_params:\n| lambda_parameters\n# lambda_parameters etc. duplicates parameters but without annotations\n# or type comments, and if there's no comma after a parameter, we expect\n# a colon, not a close parenthesis. (For more, see parameters above.)\n#\nlambda_parameters:\n| lambda_slash_no_default lambda_param_no_default* lambda_param_with_default*\u2423\n,\u2192[lambda_star_etc]\n| lambda_slash_with_default lambda_param_with_default* [lambda_star_etc]\n| lambda_param_no_default+ lambda_param_with_default* [lambda_star_etc]\n| lambda_param_with_default+ [lambda_star_etc]\n| lambda_star_etc\nlambda_slash_no_default:\n| lambda_param_no_default+ '/' ','\n| lambda_param_no_default+ '/' &':'\n(continuesonnextpage)\n147\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nlambda_slash_with_default:\n| lambda_param_no_default* lambda_param_with_default+ '/' ','\n| lambda_param_no_default* lambda_param_with_default+ '/' &':'\nlambda_star_etc:\n| '*' lambda_param_no_default lambda_param_maybe_default* [lambda_kwds]\n| '*' ',' lambda_param_maybe_default+ [lambda_kwds]\n| lambda_kwds\nlambda_kwds:\n| '**' lambda_param_no_default\nlambda_param_no_default:\n| lambda_param ','\n| lambda_param &':'\nlambda_param_with_default:\n| lambda_param default ','\n| lambda_param default &':'\nlambda_param_maybe_default:\n| lambda_param default? ','\n| lambda_param default? &':'\nlambda_param: NAME\n# LITERALS\n# ========\nfstring_middle:\n| fstring_replacement_field\n| FSTRING_MIDDLE\nfstring_replacement_field:\n| '{' annotated_rhs '='? [fstring_conversion] [fstring_full_format_spec] '}'\nfstring_conversion:\n| \"!\" NAME\nfstring_full_format_spec:\n| ':' fstring_format_spec*\nfstring_format_spec:\n| FSTRING_MIDDLE\n| fstring_replacement_field\nfstring:\n| FSTRING_START fstring_middle* FSTRING_END\nstring: STRING\nstrings: (fstring|string)+\nlist:\n| '[' [star_named_expressions] ']'\ntuple:\n| '(' [star_named_expression ',' [star_named_expressions] ] ')'\nset: '{' star_named_expressions '}'\n# Dicts\n# -----\ndict:\n(continuesonnextpage)\n148 Chapter10. FullGrammarspecification\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n| '{' [double_starred_kvpairs] '}'\ndouble_starred_kvpairs: ','.double_starred_kvpair+ [',']\ndouble_starred_kvpair:\n| '**' bitwise_or\n| kvpair\nkvpair: expression ':' expression\n# Comprehensions & Generators\n# ---------------------------\nfor_if_clauses:\n| for_if_clause+\nfor_if_clause:\n| 'async' 'for' star_targets 'in' ~ disjunction ('if' disjunction )*\n| 'for' star_targets 'in' ~ disjunction ('if' disjunction )*\nlistcomp:\n| '[' named_expression for_if_clauses ']'\nsetcomp:\n| '{' named_expression for_if_clauses '}'\ngenexp:\n| '(' ( assignment_expression | expression !':=') for_if_clauses ')'\ndictcomp:\n| '{' kvpair for_if_clauses '}'\n# FUNCTION CALL ARGUMENTS\n# =======================\narguments:\n| args [','] &')'\nargs:\n| ','.(starred_expression | ( assignment_expression | expression !':=') !'=')+\u2423\n,\u2192[',' kwargs ]\n| kwargs\nkwargs:\n| ','.kwarg_or_starred+ ',' ','.kwarg_or_double_starred+\n| ','.kwarg_or_starred+\n| ','.kwarg_or_double_starred+\nstarred_expression:\n| '*' expression\nkwarg_or_starred:\n| NAME '=' expression\n| starred_expression\nkwarg_or_double_starred:\n(continuesonnextpage)\n149\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n| NAME '=' expression\n| '**' expression\n# ASSIGNMENT TARGETS\n# ==================\n# Generic targets\n# ---------------\n# NOTE: star_targets may contain *bitwise_or, targets may not.\nstar_targets:\n| star_target !','\n| star_target (',' star_target )* [',']\nstar_targets_list_seq: ','.star_target+ [',']\nstar_targets_tuple_seq:\n| star_target (',' star_target )+ [',']\n| star_target ','\nstar_target:\n| '*' (!'*' star_target)\n| target_with_star_atom\ntarget_with_star_atom:\n| t_primary '.' NAME !t_lookahead\n| t_primary '[' slices ']' !t_lookahead\n| star_atom\nstar_atom:\n| NAME\n| '(' target_with_star_atom ')'\n| '(' [star_targets_tuple_seq] ')'\n| '[' [star_targets_list_seq] ']'\nsingle_target:\n| single_subscript_attribute_target\n| NAME\n| '(' single_target ')'\nsingle_subscript_attribute_target:\n| t_primary '.' NAME !t_lookahead\n| t_primary '[' slices ']' !t_lookahead\nt_primary:\n| t_primary '.' NAME &t_lookahead\n| t_primary '[' slices ']' &t_lookahead\n| t_primary genexp &t_lookahead\n| t_primary '(' [arguments] ')' &t_lookahead\n| atom &t_lookahead\nt_lookahead: '(' | '[' | '.'\n# Targets for del statements\n# --------------------------\n(continuesonnextpage)\n150 Chapter10. FullGrammarspecification\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\ndel_targets: ','.del_target+ [',']\ndel_target:\n| t_primary '.' NAME !t_lookahead\n| t_primary '[' slices ']' !t_lookahead\n| del_t_atom\ndel_t_atom:\n| NAME\n| '(' del_target ')'\n| '(' [del_targets] ')'\n| '[' [del_targets] ']'\n# TYPING ELEMENTS\n# ---------------\n# type_expressions allow */** but ignore them\ntype_expressions:\n| ','.expression+ ',' '*' expression ',' '**' expression\n| ','.expression+ ',' '*' expression\n| ','.expression+ ',' '**' expression\n| '*' expression ',' '**' expression\n| '*' expression\n| '**' expression\n| ','.expression+\nfunc_type_comment:\n| NEWLINE TYPE_COMMENT &(NEWLINE INDENT) # Must be followed by indented block\n| TYPE_COMMENT\n# ========================= END OF THE GRAMMAR ===========================\n# ========================= START OF INVALID RULES =======================\n151\nThePythonLanguageReference,Release3.13.3\n152 Chapter10. FullGrammarspecification\nAPPENDIX\nA\nGLOSSARY\n>>>\nThe default Python prompt of the interactive shell. Often seen for code examples which can be executed\ninteractivelyintheinterpreter.\n...\nCanreferto:\n\u2022 ThedefaultPythonpromptoftheinteractiveshellwhenenteringthecodeforanindentedcodeblock,\nwhen within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or\ntriplequotes),orafterspecifyingadecorator.\n\u2022 TheEllipsisbuilt-inconstant.\nabstractbaseclass\nAbstractbaseclassescomplementduck-typingbyprovidingawaytodefineinterfaceswhenothertechniques\nlikehasattr()wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual\nsubclasses, which are classes that don\u2019t inherit from a class but are still recognized by isinstance() and\nissubclass();seetheabcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-\ntures(inthecollections.abcmodule),numbers(inthenumbersmodule),streams(intheiomodule),\nimportfindersandloaders(intheimportlib.abcmodule). YoucancreateyourownABCswiththeabc\nmodule.\nannotation\nAlabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention\nasatypehint.\nAnnotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-\ntributes, andfunctionsarestoredinthe__annotations__specialattributeofmodules, classes, andfunc-\ntions,respectively.\nSeevariableannotation,functionannotation,PEP484andPEP526,whichdescribethisfunctionality. Also\nseeannotations-howtoforbestpracticesonworkingwithannotations.\nargument\nAvaluepassedtoafunction(ormethod)whencallingthefunction. Therearetwokindsofargument:\n\u2022 keywordargument: anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa\nvalueinadictionaryprecededby**. Forexample,3and5arebothkeywordargumentsinthefollowing\ncallstocomplex():\ncomplex(real=3, imag=5)\ncomplex(**{'real': 3, 'imag': 5})\n\u2022 positionalargument: anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe\nbeginningofanargumentlistand/orbepassedaselementsofaniterableprecededby*. Forexample,3\nand5arebothpositionalargumentsinthefollowingcalls:\ncomplex(3, 5)\ncomplex(*(3, 5))\n153\nThePythonLanguageReference,Release3.13.3\nArguments are assigned to the named local variables in a function body. See the Calls section for the rules\ngoverningthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument;theevaluated\nvalueisassignedtothelocalvariable.\nSeealsotheparameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\nandPEP362.\nasynchronouscontextmanager\nAnobjectwhichcontrolstheenvironmentseeninanasync withstatementbydefining__aenter__()and\n__aexit__()methods. IntroducedbyPEP492.\nasynchronousgenerator\nAfunctionwhichreturnsanasynchronousgeneratoriterator. Itlookslikeacoroutinefunctiondefinedwith\nasync def except that it contains yield expressions for producing a series of values usable in an async\nforloop.\nUsuallyreferstoanasynchronousgeneratorfunction, butmayrefertoanasynchronousgeneratoriterator in\nsomecontexts. Incaseswheretheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\nAnasynchronousgeneratorfunctionmaycontainawaitexpressionsaswellasasync for,andasync with\nstatements.\nasynchronousgeneratoriterator\nAnobjectcreatedbyaasynchronousgeneratorfunction.\nThisisanasynchronousiteratorwhichwhencalledusingthe__anext__()methodreturnsanawaitableobject\nwhichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenextyieldexpression.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npendingtry-statements). Whentheasynchronousgeneratoriteratoreffectivelyresumeswithanotherawaitable\nreturnedby__anext__(),itpicksupwhereitleftoff. SeePEP492andPEP525.\nasynchronousiterable\nAn object, that can be used in an async for statement. Must return an asynchronous iterator from its\n__aiter__()method. IntroducedbyPEP492.\nasynchronousiterator\nAn object that implements the __aiter__() and __anext__() methods. __anext__() must return an\nawaitableobject. async for resolvestheawaitablesreturnedbyanasynchronousiterator\u2019s__anext__()\nmethoduntilitraisesaStopAsyncIterationexception. IntroducedbyPEP492.\nattribute\nAvalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,\nifanobjectohasanattributeaitwouldbereferencedaso.a.\nItispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyIdentifiersandkeywords,\nforexampleusingsetattr(),iftheobjectallowsit. Suchanattributewillnotbeaccessibleusingadotted\nexpression,andwouldinsteadneedtoberetrievedwithgetattr().\nawaitable\nAnobjectthatcanbeusedinanawaitexpression. Canbeacoroutineoranobjectwithan__await__()\nmethod. SeealsoPEP492.\nBDFL\nBenevolentDictatorForLife,a.k.a. GuidovanRossum,Python\u2019screator.\nbinaryfile\nAfileobjectabletoreadandwritebytes-likeobjects. Examplesofbinaryfilesarefilesopenedinbinarymode\n('rb','wb'or'rb+'),sys.stdin.buffer,sys.stdout.buffer,andinstancesofio.BytesIOand\ngzip.GzipFile.\nSeealsotextfileforafileobjectabletoreadandwritestrobjects.\nborrowedreference\nInPython\u2019sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot\nownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection\ncanremovethelaststrongreferencetotheobjectandsodestroyit.\n154 AppendixA. Glossary\nThePythonLanguageReference,Release3.13.3\nCallingPy_INCREF()ontheborrowedreferenceisrecommendedtoconvertittoastrongreferencein-place,\nexceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. ThePy_NewRef()\nfunctioncanbeusedtocreateanewstrongreference.\nbytes-likeobject\nAn object that supports the bufferobjects and can export a C-contiguous buffer. This includes all bytes,\nbytearray,andarray.arrayobjects,aswellasmanycommonmemoryviewobjects. Bytes-likeobjects\ncanbeusedforvariousoperationsthatworkwithbinarydata;theseincludecompression,savingtoabinary\nfile,andsendingoverasocket.\nSomeoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas\u201cread-write\nbytes-likeobjects\u201d. Examplemutablebufferobjectsincludebytearrayandamemoryviewofabytearray.\nOther operations require the binary data to be stored in immutable objects (\u201cread-only bytes-like objects\u201d);\nexamplesoftheseincludebytesandamemoryviewofabytesobject.\nbytecode\nPythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython\ninterpreter. Thebytecodeisalsocachedin.pycfilessothatexecutingthesamefileisfasterthesecondtime\n(recompilation from source to bytecode can be avoided). This \u201cintermediate language\u201d is said to run on a\nvirtualmachinethatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare\nnotexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.\nAlistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.\ncallable\nAcallableisanobjectthatcanbecalled,possiblywithasetofarguments(seeargument),withthefollowing\nsyntax:\ncallable(argument1, argument2, argumentN)\nAfunction,andbyextensionamethod,isacallable. Aninstanceofaclassthatimplementsthe__call__()\nmethodisalsoacallable.\ncallback\nAsubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.\nclass\nA template for creating user-defined objects. Class definitions normally contain method definitions which\noperateoninstancesoftheclass.\nclassvariable\nAvariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).\nclosurevariable\nAfreevariablereferencedfromanestedscopethatisdefinedinanouterscoperatherthanbeingresolvedat\nruntime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to\nallowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.\nForexample,intheinnerfunctioninthefollowingcode,bothxandprintarefreevariables,butonlyxis\naclosurevariable:\ndef outer():\nx = 0\ndef inner():\nnonlocal x\nx += 1\nprint(x)\nreturn inner\nDuetothecodeobject.co_freevarsattribute(which,despiteitsname,onlyincludesthenamesofclosure\nvariablesratherthanlistingallreferencedfreevariables),themoregeneralfreevariabletermissometimesused\nevenwhentheintendedmeaningistoreferspecificallytoclosurevariables.\n155\nThePythonLanguageReference,Release3.13.3\ncomplexnumber\nAnextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand\nanimaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof-1),often\nwritten i in mathematics or j in engineering. Python has built-in support for complex numbers, which are\nwrittenwiththislatternotation;theimaginarypartiswrittenwithajsuffix,e.g.,3+1j. Togetaccesstocom-\nplexequivalentsofthemathmodule,usecmath. Useofcomplexnumbersisafairlyadvancedmathematical\nfeature. Ifyou\u2019renotawareofaneedforthem,it\u2019salmostcertainyoucansafelyignorethem.\ncontext\nThistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:\n\u2022 Thetemporarystateorenvironmentestablishedbyacontextmanagerviaawithstatement.\n\u2022 The collection of keyvalue bindings associated with a particular contextvars.Context object and\naccessedviaContextVarobjects. Alsoseecontextvariable.\n\u2022 Acontextvars.Contextobject. Alsoseecurrentcontext.\ncontextmanagementprotocol\nThe__enter__()and__exit__()methodscalledbythewithstatement. SeePEP343.\ncontextmanager\nAnobjectwhichimplementsthecontextmanagementprotocol andcontrolstheenvironmentseenina with\nstatement. SeePEP343.\ncontextvariable\nA variable whose value depends on which context is the current context. Values are accessed via\ncontextvars.ContextVarobjects. Contextvariablesareprimarilyusedtoisolatestatebetweenconcur-\nrentasynchronoustasks.\ncontiguous\nAbufferisconsideredcontiguousexactlyifitiseitherC-contiguousorFortrancontiguous. Zero-dimensional\nbuffersareCandFortrancontiguous. Inone-dimensionalarrays,theitemsmustbelaidoutinmemorynext\ntoeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the\nlastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous\narrays,thefirstindexvariesthefastest.\ncoroutine\nCoroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at\nanotherpoint. Coroutinescanbeentered,exited,andresumedatmanydifferentpoints. Theycanbeimple-\nmentedwiththeasync def statement. SeealsoPEP492.\ncoroutinefunction\nAfunctionwhichreturnsacoroutineobject. Acoroutinefunctionmaybedefinedwiththeasync defstate-\nment, and may contain await, async for, and async with keywords. These were introduced by PEP\n492.\nCPython\nThecanonicalimplementationofthePythonprogramminglanguage,asdistributedonpython.org. Theterm\n\u201cCPython\u201disusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.\ncurrentcontext\nThecontext (contextvars.Contextobject)thatiscurrentlyusedbyContextVarobjectstoaccess(get\nor set) the values of context variables. Each thread has its own current context. Frameworks for executing\nasynchronous tasks (see asyncio) associate each task with a context which becomes the current context\nwheneverthetaskstartsorresumesexecution.\ndecorator\nAfunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe@wrappersyntax.\nCommonexamplesfordecoratorsareclassmethod()andstaticmethod().\nThedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-\nalent:\n156 AppendixA. Glossary\nThePythonLanguageReference,Release3.13.3\ndef f(arg):\n...\nf = staticmethod(f)\n@staticmethod\ndef f(arg):\n...\nThe same concept exists for classes, but is less commonly used there. See the documentation for function\ndefinitionsandclassdefinitionsformoreaboutdecorators.\ndescriptor\nAnyobjectwhichdefinesthemethods__get__(),__set__(),or__delete__(). Whenaclassattribute\nis a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.b to get,\nset or delete an attribute looks up the object named b in the class dictionary for a, but if b is a descriptor,\ntherespectivedescriptormethodgetscalled. Understandingdescriptorsisakeytoadeepunderstandingof\nPythonbecausetheyarethebasisformanyfeaturesincludingfunctions,methods,properties,classmethods,\nstaticmethods,andreferencetosuperclasses.\nFor more information about descriptors\u2019 methods, see Implementing Descriptors or the Descriptor How To\nGuide.\ndictionary\nAnassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith__hash__()\nand__eq__()methods. CalledahashinPerl.\ndictionarycomprehension\nA compact way to process all or part of the elements in an iterable and return a dictionary with the re-\nsults. results = {n: n ** 2 for n in range(10)}generatesadictionarycontainingkeynmapped\ntovaluen ** 2. SeeDisplaysforlists,setsanddictionaries.\ndictionaryview\nTheobjectsreturnedfromdict.keys(),dict.values(),anddict.items()arecalleddictionaryviews.\nTheyprovideadynamicviewonthedictionary\u2019sentries,whichmeansthatwhenthedictionarychanges,the\nview reflects these changes. To force the dictionary view to become a full list use list(dictview). See\ndict-views.\ndocstring\nAstringliteralwhichappearsasthefirstexpressioninaclass,functionormodule. Whileignoredwhenthe\nsuiteisexecuted,itisrecognizedbythecompilerandputintothe__doc__attributeoftheenclosingclass,\nfunctionormodule. Sinceitisavailableviaintrospection,itisthecanonicalplacefordocumentationofthe\nobject.\nduck-typing\nAprogrammingstylewhichdoesnotlookatanobject\u2019stypetodetermineifithastherightinterface;instead,\nthe method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be\na duck.\u201d) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility\nby allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). (Note,\nhowever, that duck-typing can be complemented with abstract base classes.) Instead, it typically employs\nhasattr()testsorEAFPprogramming.\nEAFP\nEasier to ask for forgiveness than permission. This common Python coding style assumes the existence of\nvalid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is\ncharacterizedbythepresenceofmanytry andexceptstatements. ThetechniquecontrastswiththeLBYL\nstylecommontomanyotherlanguagessuchasC.\nexpression\nApieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof\nexpressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In\ncontrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealsostatementswhich\ncannotbeusedasexpressions,suchaswhile. Assignmentsarealsostatements,notexpressions.\n157\nThePythonLanguageReference,Release3.13.3\nextensionmodule\nAmodulewritteninCorC++,usingPython\u2019sCAPItointeractwiththecoreandwithusercode.\nf-string\nString literals prefixed with 'f' or 'F' are commonly called \u201cf-strings\u201d which is short for formatted string\nliterals. SeealsoPEP498.\nfileobject\nAnobjectexposingafile-orientedAPI(withmethodssuchasread()orwrite())toanunderlyingresource.\nDependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof\nstorageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).\nFileobjectsarealsocalledfile-likeobjectsorstreams.\nThereareactuallythreecategoriesoffileobjects: rawbinaryfiles, bufferedbinaryfilesandtextfiles. Their\ninterfaces are defined in the io module. The canonical way to create a file object is by using the open()\nfunction.\nfile-likeobject\nAsynonymforfileobject.\nfilesystemencodinganderrorhandler\nEncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto\ntheoperatingsystem.\nThefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding\nfailstoprovidethisguarantee,APIfunctionscanraiseUnicodeError.\nThe sys.getfilesystemencoding() and sys.getfilesystemencodeerrors() functions can be\nusedtogetthefilesystemencodinganderrorhandler.\nThefilesystemencodinganderrorhandlerareconfiguredatPythonstartupbythePyConfig_Read()func-\ntion: seefilesystem_encodingandfilesystem_errorsmembersofPyConfig.\nSeealsothelocaleencoding.\nfinder\nAnobjectthattriestofindtheloaderforamodulethatisbeingimported.\nTherearetwotypesoffinder: metapathfindersforusewithsys.meta_path,andpathentryfindersforuse\nwithsys.path_hooks.\nSeeFindersandloadersandimportlibformuchmoredetail.\nfloordivision\nMathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris//. Forexample,the\nexpression11 // 4evaluatesto2incontrasttothe2.75returnedbyfloattruedivision. Notethat(-11)\n// 4is-3becausethatis-2.75roundeddownward. SeePEP238.\nfreethreading\nAthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.\nThisisincontrasttotheglobalinterpreterlockwhichallowsonlyonethreadtoexecutePythonbytecodeata\ntime. SeePEP703.\nfreevariable\nFormally,asdefinedinthelanguageexecutionmodel,afreevariableisanyvariableusedinanamespacewhich\nisnotalocalvariableinthatnamespace. Seeclosurevariableforanexample. Pragmatically,duetothenameof\nthecodeobject.co_freevarsattribute,thetermisalsosometimesusedasasynonymforclosurevariable.\nfunction\nAseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormoreargumentswhich\nmaybeusedintheexecutionofthebody. Seealsoparameter,method,andtheFunctiondefinitionssection.\nfunctionannotation\nAnannotationofafunctionparameterorreturnvalue.\nFunction annotations are usually used for type hints: for example, this function is expected to take two int\nargumentsandisalsoexpectedtohaveanintreturnvalue:\n158 AppendixA. Glossary\nThePythonLanguageReference,Release3.13.3\ndef sum_two_numbers(a: int, b: int) -> int:\nreturn a + b\nFunctionannotationsyntaxisexplainedinsectionFunctiondefinitions.\nSeevariableannotationandPEP484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest\npracticesonworkingwithannotations.\n__future__\nAfuturestatement, from __future__ import <feature>, directsthecompilertocompilethecurrent\nmoduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The__future__\nmoduledocumentsthepossiblevaluesoffeature. Byimportingthismoduleandevaluatingitsvariables,you\ncanseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:\n>>> import __future__\n>>> __future__.division\n_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)\ngarbagecollection\nTheprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference\ncountingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector\ncanbecontrolledusingthegcmodule.\ngenerator\nA function which returns a generator iterator. It looks like a normal function except that it contains yield\nexpressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe\nnext()function.\nUsuallyreferstoageneratorfunction,butmayrefertoageneratoriterator insomecontexts. Incaseswhere\ntheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\ngeneratoriterator\nAnobjectcreatedbyageneratorfunction.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npending try-statements). When the generator iterator resumes, it picks up where it left off (in contrast to\nfunctionswhichstartfreshoneveryinvocation).\ngeneratorexpression\nAnexpressionthatreturnsaniterator. Itlookslikeanormalexpressionfollowedbyaforclausedefininga\nloop variable, range, andan optional if clause. The combinedexpressiongeneratesvaluesfor an enclosing\nfunction:\n>>> sum(i*i for i in range(10)) # sum of squares 0, 1, 4, ... 81\n285\ngenericfunction\nAfunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-\nplementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.\nSeealsothesingledispatchglossaryentry,thefunctools.singledispatch()decorator,andPEP443.\ngenerictype\nAtypethatcanbeparameterized; typicallyacontainerclasssuchaslistordict. Usedfortypehintsand\nannotations.\nFormoredetails,seegenericaliastypes,PEP483,PEP484,PEP585,andthetypingmodule.\nGIL\nSeeglobalinterpreterlock.\nglobalinterpreterlock\nThe mechanism used by the CPython interpreter to assure that only one thread executes Python bytecode at\na time. This simplifies the CPython implementation by making the object model (including critical built-in\n159\nThePythonLanguageReference,Release3.13.3\ntypessuchasdict)implicitlysafeagainstconcurrentaccess. Lockingtheentireinterpretermakesiteasier\nfortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor\nmachines.\nHowever,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen\ndoingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen\ndoingI/O.\nAsofPython3.13, theGILcanbedisabledusingthe--disable-gilbuildconfiguration. Afterbuilding\nPythonwiththisoption,codemustberunwith-X gil=0oraftersettingthePYTHON_GIL=0environment\nvariable. This feature enables improved performance for multi-threaded applications and makes it easier to\nusemulti-coreCPUsefficiently. Formoredetails,seePEP703.\nhash-basedpyc\nAbytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto\ndetermineitsvalidity. SeeCachedbytecodeinvalidation.\nhashable\nAnobjectishashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa__hash__()\nmethod), and can be compared to other objects (it needs an __eq__() method). Hashable objects which\ncompareequalmusthavethesamehashvalue.\nHashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe\nhashvalueinternally.\nMost of Python\u2019s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)\narenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.\nObjectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except\nwiththemselves),andtheirhashvalueisderivedfromtheirid().\nIDLE\nAnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-\nronmentwhichshipswiththestandarddistributionofPython.\nimmortal\nImmortalobjectsareaCPythonimplementationdetailintroducedinPEP683.\nIfanobjectisimmortal,itsreferencecount isnevermodified,andthereforeitisneverdeallocatedwhilethe\ninterpreterisrunning. Forexample,TrueandNoneareimmortalinCPython.\nimmutable\nAnobjectwithafixedvalue. Immutableobjectsincludenumbers,stringsandtuples. Suchanobjectcannot\nbealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein\nplaceswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.\nimportpath\nAlistoflocations(orpathentries)thataresearchedbythepathbasedfinderformodulestoimport. During\nimport,thislistoflocationsusuallycomesfromsys.path,butforsubpackagesitmayalsocomefromthe\nparentpackage\u2019s__path__attribute.\nimporting\nTheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.\nimporter\nAnobjectthatbothfindsandloadsamodule;bothafinderandloaderobject.\ninteractive\nPythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter\nprompt, immediately execute them and see their results. Just launch python with no arguments (possibly\nby selecting it fromyour computer\u2019s mainmenu). It isa very powerfulway to testout new ideas orinspect\nmodulesandpackages(rememberhelp(x)). Formoreoninteractivemode,seetut-interac.\ninterpreted\nPythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause\nofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly\n160 AppendixA. Glossary\nThePythonLanguageReference,Release3.13.3\ncreating an executable which is then run. Interpreted languages typically have a shorter development/debug\ncyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealsointeractive.\ninterpretershutdown\nWhenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated\nresources, suchasmodulesandvariouscriticalinternalstructures. Italsomakesseveralcallstothegarbage\ncollector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-\ncutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction\nanymore(commonexamplesarelibrarymodulesorthewarningsmachinery).\nThemainreasonforinterpretershutdownisthatthe__main__moduleorthescriptbeingrunhasfinished\nexecuting.\niterable\nAnobjectcapableofreturningitsmembersoneatatime. Examplesofiterablesincludeallsequencetypes\n(such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any\nclassesyoudefinewithan__iter__()methodorwitha__getitem__()methodthatimplementssequence\nsemantics.\nIterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(),\n\u2026). Whenaniterableobjectispassedasanargumenttothebuilt-infunctioniter(),itreturnsaniterator\nfortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot\nnecessarytocalliter()ordealwithiteratorobjectsyourself. Theforstatementdoesthatautomaticallyfor\nyou,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealsoiterator,\nsequence,andgenerator.\niterator\nAn object representing a stream of data. Repeated calls to the iterator\u2019s __next__() method (or passing\nittothebuilt-infunctionnext())returnsuccessiveitemsinthestream. Whennomoredataareavailablea\nStopIterationexceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls\ntoits__next__()methodjustraiseStopIterationagain. Iteratorsarerequiredtohavean__iter__()\nmethodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces\nwhereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A\ncontainerobject(suchasalist)producesafreshnewiteratoreachtimeyoupassittotheiter()function\noruseitinaforloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused\ninthepreviousiterationpass,makingitappearlikeanemptycontainer.\nMoreinformationcanbefoundintypeiter.\nCPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine\n__iter__(). Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof\niteratoroperations.\nkeyfunction\nAkeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,\nlocale.strxfrm()isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.\nA number of tools in Python accept key functions to control how elements are ordered or grouped. They\ninclude min(), max(), sorted(), list.sort(), heapq.merge(), heapq.nsmallest(), heapq.\nnlargest(),anditertools.groupby().\nThere are several ways to create a key function. For example. the str.lower() method can serve as a\nkey function for case insensitive sorts. Alternatively, a key function can be built from a lambda expression\nsuchaslambda r: (r[0], r[2]). Also,operator.attrgetter(),operator.itemgetter(),and\noperator.methodcaller()arethreekeyfunctionconstructors. SeetheSortingHOWTOforexamples\nofhowtocreateandusekeyfunctions.\nkeywordargument\nSeeargument.\nlambda\nAnanonymousinlinefunctionconsistingofasingleexpressionwhichisevaluatedwhenthefunctioniscalled.\nThesyntaxtocreatealambdafunctionislambda [parameters]: expression\n161\nThePythonLanguageReference,Release3.13.3\nLBYL\nLookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This\nstylecontrastswiththeEAFPapproachandischaracterizedbythepresenceofmanyif statements.\nIn a multi-threaded environment, the LBYL approach can risk introducing a race condition between \u201cthe\nlooking\u201dand\u201ctheleaping\u201d. Forexample, thecode, if key in mapping: return mapping[key] can\nfailifanotherthreadremoveskeyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved\nwithlocksorbyusingtheEAFPapproach.\nlexicalanalyzer\nFormalnameforthetokenizer;seetoken.\nlist\nAbuilt-inPythonsequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist\nsinceaccesstoelementsisO(1).\nlistcomprehension\nAcompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result\n= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0]generatesalistofstringscon-\ntainingevenhexnumbers(0x..) intherangefrom0to255. Theifclauseisoptional. Ifomitted,allelements\ninrange(256)areprocessed.\nloader\nAn object that loads a module. It must define the exec_module() and create_module() methods to\nimplementtheLoaderinterface. Aloaderistypicallyreturnedbyafinder. Seealso:\n\u2022 Findersandloaders\n\u2022 importlib.abc.Loader\n\u2022 PEP302\nlocaleencoding\nOn Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.\nLC_CTYPE, new_locale).\nOnWindows,itistheANSIcodepage(ex: \"cp1252\").\nOnAndroidandVxWorks,Pythonuses\"utf-8\"asthelocaleencoding.\nlocale.getencoding()canbeusedtogetthelocaleencoding.\nSeealsothefilesystemencodinganderrorhandler.\nmagicmethod\nAninformalsynonymforspecialmethod.\nmapping\nA container object that supports arbitrary key lookups and implements the methods specified in the\ncollections.abc.Mapping or collections.abc.MutableMapping abstract base classes. Exam-\nples include dict, collections.defaultdict, collections.OrderedDict and collections.\nCounter.\nmetapathfinder\nAfinderreturnedbyasearchofsys.meta_path. Metapathfindersarerelatedto,butdifferentfrompath\nentryfinders.\nSeeimportlib.abc.MetaPathFinderforthemethodsthatmetapathfindersimplement.\nmetaclass\nTheclassofaclass. Classdefinitionscreateaclassname, aclassdictionary, andalistofbaseclasses. The\nmetaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-\ngramming languages provide a default implementation. What makes Python special is that it is possible to\ncreatecustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide\npowerful,elegantsolutions. Theyhavebeenusedforloggingattributeaccess,addingthread-safety,tracking\nobjectcreation,implementingsingletons,andmanyothertasks.\nMoreinformationcanbefoundinMetaclasses.\n162 AppendixA. Glossary\nThePythonLanguageReference,Release3.13.3\nmethod\nAfunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod\nwillgettheinstanceobjectasitsfirstargument(whichisusuallycalledself). Seefunctionandnestedscope.\nmethodresolutionorder\nMethod Resolution Order is the order in which base classes are searched for a member during lookup. See\npython_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.\nmodule\nAnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary\nPythonobjects. ModulesareloadedintoPythonbytheprocessofimporting.\nSeealsopackage.\nmodulespec\nAnamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceofimportlib.\nmachinery.ModuleSpec.\nSeealsoModulespecs.\nMRO\nSeemethodresolutionorder.\nmutable\nMutableobjectscanchangetheirvaluebutkeeptheirid(). Seealsoimmutable.\nnamedtuple\nTheterm\u201cnamedtuple\u201dappliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare\nalsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.\nSeveral built-in types are named tuples, including the values returned by time.localtime() and os.\nstat(). Anotherexampleissys.float_info:\n>>> sys.float_info[1] # indexed access\n1024\n>>> sys.float_info.max_exp # named field access\n1024\n>>> isinstance(sys.float_info, tuple) # kind of tuple\nTrue\nSome named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be\ncreated from a regular class definition that inherits from tuple and that defines named fields. Such a class\ncanbewrittenbyhand,oritcanbecreatedbyinheritingtyping.NamedTuple,orwiththefactoryfunction\ncollections.namedtuple(). Thelattertechniquesalsoaddsomeextramethodsthatmaynotbefound\ninhand-writtenorbuilt-innamedtuples.\nnamespace\nThe place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,\nglobal and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support\nmodularitybypreventingnamingconflicts. Forinstance,thefunctionsbuiltins.openandos.open()are\ndistinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear\nwhich module implements a function. For instance, writing random.seed() or itertools.islice()\nmakesitclearthatthosefunctionsareimplementedbytherandomanditertoolsmodules,respectively.\nnamespacepackage\nA package which serves only as a container for subpackages. Namespace packages may have no physical\nrepresentation,andspecificallyarenotlikearegularpackagebecausetheyhaveno__init__.pyfile.\nNamespacepackagesallowseveralindividuallyinstallablepackagestohaveacommonparentpackage. Oth-\nerwise,itisrecommendedtousearegularpackage.\nFormoreinformation,seePEP420andNamespacepackages.\nSeealsomodule.\n163\nThePythonLanguageReference,Release3.13.3\nnestedscope\nThe ability to refer to a variable in an enclosing definition. For instance, a function defined inside another\nfunctioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference\nandnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables\nreadandwritetotheglobalnamespace. Thenonlocalallowswritingtoouterscopes.\nnew-styleclass\nOld name for the flavor of classes now used for all class objects. In earlier Python versions, only\nnew-style classes could use Python\u2019s newer, versatile features like __slots__, descriptors, properties,\n__getattribute__(),classmethods,andstaticmethods.\nobject\nAnydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany\nnew-styleclass.\noptimizedscope\nA scope where target local variable names are reliably known to the compiler when the code is compiled,\nallowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,\ncoroutines,comprehensions,andgeneratorexpressionsareoptimizedinthisfashion. Note: mostinterpreter\noptimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames\narerestrictedtooptimizedscopes.\npackage\nA Python module which can contain submodules or recursively, subpackages. Technically, a package is a\nPythonmodulewitha__path__attribute.\nSeealsoregularpackageandnamespacepackage.\nparameter\nAnamedentityinafunction(ormethod)definitionthatspecifiesanargument (orinsomecases,arguments)\nthatthefunctioncanaccept. Therearefivekindsofparameter:\n\u2022 positional-or-keyword: specifiesanargumentthatcanbepassedeitherpositionallyorasakeywordargu-\nment. Thisisthedefaultkindofparameter,forexamplefooandbarinthefollowing:\ndef func(foo, bar=None): ...\n\u2022 positional-only: specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters\ncanbedefinedbyincludinga/characterintheparameterlistofthefunctiondefinitionafterthem,for\nexampleposonly1andposonly2inthefollowing:\ndef func(posonly1, posonly2, /, positional_or_keyword): ...\n\u2022 keyword-only: specifiesanargumentthatcanbesuppliedonlybykeyword. Keyword-onlyparameters\ncanbedefinedbyincludingasinglevar-positionalparameterorbare*intheparameterlistofthefunction\ndefinitionbeforethem,forexamplekw_only1andkw_only2inthefollowing:\ndef func(arg, *, kw_only1, kw_only2): ...\n\u2022 var-positional: specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition\ntoanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby\nprependingtheparameternamewith*,forexampleargsinthefollowing:\ndef func(*args, **kwargs): ...\n\u2022 var-keyword: specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-\nwordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending\ntheparameternamewith**,forexamplekwargsintheexampleabove.\nParameters can specify both optional and required arguments, as well as default values for some optional\narguments.\nSeealsotheargumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\ntheinspect.Parameterclass,theFunctiondefinitionssection,andPEP362.\n164 AppendixA. Glossary\nThePythonLanguageReference,Release3.13.3\npathentry\nAsinglelocationontheimportpathwhichthepathbasedfinderconsultstofindmodulesforimporting.\npathentryfinder\nA finder returned by a callable on sys.path_hooks (i.e. a path entry hook) which knows how to locate\nmodulesgivenapathentry.\nSeeimportlib.abc.PathEntryFinderforthemethodsthatpathentryfindersimplement.\npathentryhook\nAcallableonthesys.path_hookslistwhichreturnsapathentryfinderifitknowshowtofindmoduleson\naspecificpathentry.\npathbasedfinder\nOneofthedefaultmetapathfinderswhichsearchesanimportpathformodules.\npath-likeobject\nAn object representing a file system path. A path-like object is either a str or bytes object representing\na path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike\nprotocol can be converted to a str or bytes file system path by calling the os.fspath() function; os.\nfsdecode() and os.fsencode() can be used to guarantee a str or bytes result instead, respectively.\nIntroducedbyPEP519.\nPEP\nPythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,\nordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical\nspecificationandarationaleforproposedfeatures.\nPEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity\ninputonanissue, andfordocumentingthedesigndecisionsthathavegoneintoPython. ThePEPauthoris\nresponsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.\nSeePEP1.\nportion\nA set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as\ndefinedinPEP420.\npositionalargument\nSeeargument.\nprovisionalAPI\nA provisional API is one which has been deliberately excluded from the standard library\u2019s backwards com-\npatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked\nprovisional, backwards incompatible changes (up to and including removal of the interface) may occur if\ndeemednecessarybycoredevelopers. Suchchangeswillnotbemadegratuitously\u2013theywilloccuronlyif\nseriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.\nEven for provisional APIs, backwards incompatible changes are seen as a \u201csolution of last resort\u201d - every\nattemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.\nThisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign\nerrorsforextendedperiodsoftime. SeePEP411formoredetails.\nprovisionalpackage\nSeeprovisionalAPI.\nPython3000\nNicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe\ndistantfuture.) Thisisalsoabbreviated\u201cPy3k\u201d.\nPythonic\nAnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan\nimplementingcodeusingconceptscommontootherlanguages. Forexample,acommonidiominPythonis\ntoloopoverallelementsofaniterableusingaforstatement. Manyotherlanguagesdon\u2019thavethistypeof\nconstruct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:\n165\nThePythonLanguageReference,Release3.13.3\nfor i in range(len(food)):\nprint(food[i])\nAsopposedtothecleaner,Pythonicmethod:\nfor piece in food:\nprint(piece)\nqualifiedname\nAdottednameshowingthe\u201cpath\u201dfromamodule\u2019sglobalscopetoaclass,functionormethoddefinedinthat\nmodule, as defined in PEP 3155. For top-level functions and classes, the qualified name is the same as the\nobject\u2019sname:\n>>> class C:\n... class D:\n... def meth(self):\n... pass\n...\n>>> C.__qualname__\n'C'\n>>> C.D.__qualname__\n'C.D'\n>>> C.D.meth.__qualname__\n'C.D.meth'\nWhenusedtorefertomodules,thefullyqualifiednamemeanstheentiredottedpathtothemodule,including\nanyparentpackages,e.g. email.mime.text:\n>>> import email.mime.text\n>>> email.mime.text.__name__\n'email.mime.text'\nreferencecount\nThenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.\nSome objects are immortal and have reference counts that are never modified, and therefore the objects are\nneverdeallocated. ReferencecountingisgenerallynotvisibletoPythoncode, butitisakeyelementofthe\nCPythonimplementation. Programmerscancallthesys.getrefcount()functiontoreturnthereference\ncountforaparticularobject.\nregularpackage\nAtraditionalpackage,suchasadirectorycontainingan__init__.pyfile.\nSeealsonamespacepackage.\nREPL\nAnacronymforthe\u201cread\u2013eval\u2013printloop\u201d,anothernamefortheinteractiveinterpretershell.\n__slots__\nAdeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating\ninstancedictionaries. Thoughpopular,thetechniqueissomewhattrickytogetrightandisbestreservedfor\nrarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.\nsequence\nAn iterable which supports efficient element access using integer indices via the __getitem__() special\nmethod and defines a __len__() method that returns the length of the sequence. Some built-in sequence\ntypesarelist,str,tuple,andbytes. Notethatdictalsosupports__getitem__()and__len__(),\nbut is considered a mapping rather than a sequence because the lookups use arbitrary hashable keys rather\nthanintegers.\nThecollections.abc.Sequenceabstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust\n__getitem__()and__len__(),addingcount(),index(),__contains__(),and__reversed__().\n166 AppendixA. Glossary\nThePythonLanguageReference,Release3.13.3\nTypes that implement this expanded interface can be registered explicitly using register(). For more\ndocumentationonsequencemethodsgenerally,seeCommonSequenceOperations.\nsetcomprehension\nAcompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results\n= {c for c in 'abracadabra' if c not in 'abc'}generatesthesetofstrings{'r', 'd'}. See\nDisplaysforlists,setsanddictionaries.\nsingledispatch\nAformofgenericfunctiondispatchwheretheimplementationischosenbasedonthetypeofasingleargument.\nslice\nAnobjectusuallycontainingaportionofasequence. Asliceiscreatedusingthesubscriptnotation,[]with\ncolons between numbers when several are given, such as in variable_name[1:3:5]. The bracket (sub-\nscript)notationusessliceobjectsinternally.\nsoftdeprecated\nAsoftdeprecatedAPIshouldnotbeusedinnewcode,butitissafeforalreadyexistingcodetouseit. The\nAPIremainsdocumentedandtested,butwillnotbeenhancedfurther.\nSoftdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.\nSeePEP387: SoftDeprecation.\nspecialmethod\nAmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such\nmethodshavenamesstartingandendingwithdoubleunderscores. SpecialmethodsaredocumentedinSpecial\nmethodnames.\nstatement\nAstatementispartofasuite(a\u201cblock\u201dofcode). Astatementiseitheranexpressionoroneofseveralconstructs\nwithakeyword,suchasif,whileorfor.\nstatictypechecker\nAnexternaltoolthatreadsPythoncodeandanalyzesit, lookingforissuessuchasincorrecttypes. Seealso\ntypehintsandthetypingmodule.\nstrongreference\nIn Python\u2019s C API, a strong reference is a reference to an object which is owned by the code holding the\nreference. ThestrongreferenceistakenbycallingPy_INCREF()whenthereferenceiscreatedandreleased\nwithPy_DECREF()whenthereferenceisdeleted.\nThePy_NewRef()functioncanbeusedtocreateastrongreferencetoanobject. Usually,thePy_DECREF()\nfunctionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking\nonereference.\nSeealsoborrowedreference.\ntextencoding\nAstringinPythonisasequenceofUnicodecodepoints(inrangeU+0000\u2013U+10FFFF).Tostoreortransfer\nastring,itneedstobeserializedasasequenceofbytes.\nSerializingastringintoasequenceofbytesisknownas\u201cencoding\u201d,andrecreatingthestringfromthesequence\nofbytesisknownas\u201cdecoding\u201d.\nThereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas\u201ctextencodings\u201d.\ntextfile\nAfileobjectabletoreadandwritestrobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream\nandhandlesthetextencodingautomatically. Examplesoftextfilesarefilesopenedintextmode('r'or'w'),\nsys.stdin,sys.stdout,andinstancesofio.StringIO.\nSeealsobinaryfileforafileobjectabletoreadandwritebytes-likeobjects.\ntoken\nA small unit of source code, generated by the lexical analyzer (also called the tokenizer). Names, numbers,\nstrings,operators,newlinesandsimilararerepresentedbytokens.\n167\nThePythonLanguageReference,Release3.13.3\nThe tokenize module exposes Python\u2019s lexical analyzer. The token module contains information on the\nvarioustypesoftokens.\ntriple-quotedstring\nAstringwhichisboundbythreeinstancesofeitheraquotationmark(\u201d)oranapostrophe(\u2018). Whiletheydon\u2019t\nprovide any functionality not available with single-quoted strings, they are useful for a number of reasons.\nTheyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines\nwithouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.\ntype\nThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject\u2019stypeis\naccessibleasits__class__attributeorcanberetrievedwithtype(obj).\ntypealias\nAsynonymforatype,createdbyassigningthetypetoanidentifier.\nTypealiasesareusefulforsimplifyingtypehints. Forexample:\ndef remove_gray_shades(\ncolors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\npass\ncouldbemademorereadablelikethis:\nColor = tuple[int, int, int]\ndef remove_gray_shades(colors: list[Color]) -> list[Color]:\npass\nSeetypingandPEP484,whichdescribethisfunctionality.\ntypehint\nAnannotationthatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn\nvalue.\nTypehintsareoptionalandarenotenforcedbyPythonbuttheyareusefultostatictypecheckers. Theycan\nalsoaidIDEswithcodecompletionandrefactoring.\nType hints of global variables, class attributes, and functions, but not local variables, can be accessed using\ntyping.get_type_hints().\nSeetypingandPEP484,whichdescribethisfunctionality.\nuniversalnewlines\nAmannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix\nend-of-lineconvention'\\n',theWindowsconvention'\\r\\n',andtheoldMacintoshconvention'\\r'. See\nPEP278andPEP3116,aswellasbytes.splitlines()foranadditionaluse.\nvariableannotation\nAnannotationofavariableoraclassattribute.\nWhenannotatingavariableoraclassattribute,assignmentisoptional:\nclass C:\nfield: 'annotation'\nVariableannotationsareusuallyusedfortypehints: forexamplethisvariableisexpectedtotakeintvalues:\ncount: int = 0\nVariableannotationsyntaxisexplainedinsectionAnnotatedassignmentstatements.\nSeefunctionannotation,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto\nforbestpracticesonworkingwithannotations.\n168 AppendixA. Glossary\nThePythonLanguageReference,Release3.13.3\nvirtualenvironment\nAcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade\nPythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon\nthesamesystem.\nSeealsovenv.\nvirtualmachine\nAcomputerdefinedentirelyinsoftware. Python\u2019svirtualmachineexecutesthebytecodeemittedbythebyte-\ncodecompiler.\nZenofPython\nListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.\nThelistingcanbefoundbytyping\u201cimport this\u201dattheinteractiveprompt.\n169\nThePythonLanguageReference,Release3.13.3\n170 AppendixA. Glossary\nAPPENDIX\nB\nABOUT THIS DOCUMENTATION\nPython\u2019sdocumentationisgeneratedfromreStructuredTextsourcesusingSphinx,adocumentationgeneratororigi-\nnallycreatedforPythonandnowmaintainedasanindependentproject.\nDevelopment of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you\nwanttocontribute,pleasetakealookatthereporting-bugspageforinformationonhowtodoso. Newvolunteers\narealwayswelcome!\nManythanksgoto:\n\u2022 FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandauthorofmuchofthecontent;\n\u2022 theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;\n\u2022 FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.\nB.1 Contributors to the Python documentation\nManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.\nSeeMisc/ACKSinthePythonsourcedistributionforapartiallistofcontributors.\nItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation\n\u2013ThankYou!\n171\nThePythonLanguageReference,Release3.13.3\n172 AppendixB. Aboutthisdocumentation\nAPPENDIX\nC\nHISTORY AND LICENSE\nC.1 History of the software\nPythonwascreatedintheearly1990sbyGuidovanRossumatStichtingMathematischCentrum(CWI,seehttps:\n//www.cwi.nl)intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython\u2019sprincipalauthor,\nalthoughitincludesmanycontributionsfromothers.\nIn1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,seehttps:\n//www.cnri.reston.va.us)inReston,Virginiawherehereleasedseveralversionsofthesoftware.\nInMay2000,GuidoandthePythoncoredevelopmentteammovedtoBeOpen.comtoformtheBeOpenPythonLabs\nteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations,whichbecameZopeCorpo-\nration. In2001,thePythonSoftwareFoundation(PSF,seehttps://www.python.org/psf/)wasformed,anon-profit\norganization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring\nmemberofthePSF.\nAllPythonreleasesareOpenSource(seehttps://opensource.orgfortheOpenSourceDefinition). Historically,most,\nbutnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.\nRelease Derivedfrom Year Owner GPL-compatible? (1)\n0.9.0thru1.2 n/a 1991-1995 CWI yes\n1.3thru1.5.2 1.2 1995-1999 CNRI yes\n1.6 1.5.2 2000 CNRI no\n2.0 1.6 2000 BeOpen.com no\n1.6.1 1.6 2001 CNRI yes(2)\n2.1 2.0+1.6.1 2001 PSF no\n2.0.1 2.0+1.6.1 2001 PSF yes\n2.1.1 2.1+2.0.1 2001 PSF yes\n2.1.2 2.1.1 2002 PSF yes\n2.1.3 2.1.2 2002 PSF yes\n2.2andabove 2.1.1 2001-now PSF yes\n(cid:174) Note\n(1) GPL-compatibledoesn\u2019tmeanthatwe\u2019redistributingPythonundertheGPL.AllPythonlicenses,unlike\nthe GPL, let you distribute a modified version without making your changes open source. The GPL-\ncompatible licenses make it possible to combine Python with other software that is released under the\nGPL;theothersdon\u2019t.\n(2) AccordingtoRichardStallman,1.6.1isnotGPL-compatible,becauseitslicensehasachoiceoflawclause.\nAccordingtoCNRI,however, Stallman\u2019slawyerhastoldCNRI\u2019slawyerthat1.6.1is\u201cnotincompatible\u201d\nwiththeGPL.\nThankstothemanyoutsidevolunteerswhohaveworkedunderGuido\u2019sdirectiontomakethesereleasespossible.\n173\nThePythonLanguageReference,Release3.13.3\nC.2 Terms and conditions for accessing or otherwise using Python\nPythonsoftwareanddocumentationarelicensedunderthePythonSoftwareFoundationLicenseVersion2.\nStartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF\nLicenseVersion2andtheZero-ClauseBSDlicense.\nSomesoftwareincorporatedintoPythonisunderdifferentlicenses. Thelicensesarelistedwithcodefallingunder\nthatlicense. SeeLicensesandAcknowledgementsforIncorporatedSoftwareforanincompletelistoftheselicenses.\nC.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\nthe Individual or Organization (\"Licensee\") accessing and otherwise using this\nsoftware (\"Python\") in source or binary form and its associated documentation.\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative\nversion, provided, however, that PSF's License Agreement and PSF's notice of\ncopyright, i.e., \"Copyright \u00a9 2001-2024 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python or any part thereof, and wants to make the\nderivative work available to others as provided herein, then Licensee hereby\nagrees to include in any such work a brief summary of the changes made to\u2423\n,\u2192Python.\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\nPSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. Nothing in this License Agreement shall be deemed to create any relationship\nof agency, partnership, or joint venture between PSF and Licensee. This License\nAgreement does not grant permission to use PSF trademarks or trade name in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.\n8. By copying, installing or otherwise using Python, Licensee agrees\nto be bound by the terms and conditions of this License Agreement.\n174 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\nC.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nBEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n(\"Licensee\") accessing and otherwise using this software in source or binary\nform and its associated documentation (\"the Software\").\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\nBeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\nto reproduce, analyze, test, perform and/or display publicly, prepare derivative\nworks, distribute, and otherwise use the Software alone or in any derivative\nversion, provided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\nBEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\nMODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\nADVISED OF THE POSSIBILITY THEREOF.\n5. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n6. This License Agreement shall be governed by and interpreted in all respects\nby the law of the State of California, excluding conflict of law provisions.\nNothing in this License Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between BeOpen and Licensee. This License\nAgreement does not grant permission to use BeOpen trademarks or trade names in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party. As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the permissions\ngranted on that web page.\n7. By copying, installing or otherwise using the software, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\nC.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n1. This LICENSE AGREEMENT is between the Corporation for National Research\nInitiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n(\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using Python 1.6.1 software in source or binary form and its\nassociated documentation.\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python 1.6.1 alone or in any derivative version,\nprovided, however, that CNRI's License Agreement and CNRI's notice of copyright,\ni.e., \"Copyright \u00a9 1995-2001 Corporation for National Research Initiatives; All\n(continuesonnextpage)\nC.2. TermsandconditionsforaccessingorotherwiseusingPython 175\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nRights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\nprepared by Licensee. Alternately, in lieu of CNRI's License Agreement,\nLicensee may substitute the following text (omitting the quotes): \"Python 1.6.1\nis made available subject to the terms and conditions in CNRI's License\nAgreement. This Agreement together with Python 1.6.1 may be located on the\ninternet using the following unique, persistent identifier (known as a handle):\n1895.22/1013. This Agreement may also be obtained from a proxy server on the\ninternet using the following URL: http://hdl.handle.net/1895.22/1013\".\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python 1.6.1 or any part thereof, and wants to make the derivative\nwork available to others as provided herein, then Licensee hereby agrees to\ninclude in any such work a brief summary of the changes made to Python 1.6.1.\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI\nMAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,\nBUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\nOF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\nPYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. This License Agreement shall be governed by the federal intellectual property\nlaw of the United States, including without limitation the federal copyright\nlaw, and, to the extent such U.S. federal law does not apply, by the law of the\nCommonwealth of Virginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based on Python\n1.6.1 that incorporate non-separable material that was previously distributed\nunder the GNU General Public License (GPL), the law of the Commonwealth of\nVirginia shall govern this License Agreement only as to issues arising under or\nwith respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in\nthis License Agreement shall be deemed to create any relationship of agency,\npartnership, or joint venture between CNRI and Licensee. This License Agreement\ndoes not grant permission to use CNRI trademarks or trade name in a trademark\nsense to endorse or promote products or services of Licensee, or any third\nparty.\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\nor otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\nconditions of this License Agreement.\nC.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nCopyright \u00a9 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands. All rights reserved.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\n(continuesonnextpage)\n176 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\nC.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTA-\nTION\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3 Licenses and Acknowledgements for Incorporated Software\nThissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated\ninthePythondistribution.\nC.3.1 Mersenne Twister\nThe_randomCextensionunderlyingtherandommoduleincludescodebasedonadownloadfromhttp://www.math.\nsci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. Thefollowingaretheverbatimcommentsfromthe\noriginalcode:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 177\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\nC.3.2 Sockets\nThesocketmoduleusesthefunctions,getaddrinfo(),andgetnameinfo(),whicharecodedinseparatesource\nfilesfromtheWIDEProject,https://www.wide.ad.jp/.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n178 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\nC.3.3 Asynchronous socket services\nThetest.support.asynchatandtest.support.asyncoremodulescontainthefollowingnotice:\nCopyright 1996 by Sam Rushing\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nC.3.4 Cookie management\nThehttp.cookiesmodulecontainsthefollowingnotice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3.5 Execution tracing\nThetracemodulecontainsthefollowingnotice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr... reserved and offered to the public under the terms of the\nPython 2.2 license.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 179\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\nC.3.6 UUencode and UUdecode functions\nTheuucodeccontainsthefollowingnotice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\nbetween ascii and binary. This results in a 1000-fold speedup. The C\nversion is still 5 times faster, though.\n- Arguments more compliant with Python standard\n180 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\nC.3.7 XML Remote Procedure Calls\nThexmlrpc.clientmodulecontainsthefollowingnotice:\nThe XML-RPC client interface is\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\nC.3.8 test_epoll\nThetest.test_epollmodulecontainsthefollowingnotice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 181\nThePythonLanguageReference,Release3.13.3\nC.3.9 Select kqueue\nTheselectmodulecontainsthefollowingnoticeforthekqueueinterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.10 SipHash24\nThefilePython/pyhash.ccontainsMarekMajkowski\u2019implementationofDanBernstein\u2019sSipHash24algorithm.\nItcontainsthefollowingnote:\n<MIT License>\nCopyright (c) 2013 Marek Majkowski <marek@popcount.org>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\nOriginal location:\nhttps://github.com/majek/csiphash/\nSolution inspired by code from:\nSamuel Neves (supercop/crypto_auth/siphash24/little)\ndjb (supercop/crypto_auth/siphash24/little2)\nJean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\n182 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\nC.3.11 strtod and dtoa\nThefilePython/dtoa.c,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,\nisderivedfromthefileofthesamenamebyDavidM.Gay, currentlyavailablefromhttps://web.archive.org/web/\n20220517033456/http://www.netlib.org/fp/dtoa.c. The original file, as retrieved on March 16, 2009, contains the\nfollowingcopyrightandlicensingnotice:\n/****************************************************************\n*\n* The author of this software is David M. Gay.\n*\n* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n*\n* Permission to use, copy, modify, and distribute this software for any\n* purpose without fee is hereby granted, provided that this entire notice\n* is included in all copies of any software which is or includes a copy\n* or modification of this software and in all copies of the supporting\n* documentation for such software.\n*\n* THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n*\n***************************************************************/\nC.3.12 OpenSSL\nThemoduleshashlib,posixandsslusetheOpenSSLlibraryforaddedperformanceifmadeavailablebythe\noperatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL\nlibraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived\nfromthat,theApacheLicensev2applies:\nApache License\nVersion 2.0, January 2004\nhttps://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 183\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\n(continuesonnextpage)\n184 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 185\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nC.3.13 expat\nThe pyexpat extension is built using an included copy of the expat sources unless the build is configured\n--with-system-expat:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\nand Clark Cooper\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n(continuesonnextpage)\n186 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.14 libffi\nThe_ctypesCextensionunderlyingthectypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless\nthebuildisconfigured--with-system-libffi:\nCopyright (c) 1996-2008 Red Hat, Inc and others.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nC.3.15 zlib\nThezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo\noldtobeusedforthebuild:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 187\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\nJean-loup Gailly Mark Adler\njloup@gzip.org madler@alumni.caltech.edu\nC.3.16 cfuhash\nTheimplementationofthehashtableusedbythetracemallocisbasedonthecfuhashproject:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\nThis code is released under the BSD license:\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n* Neither the name of the author nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\nC.3.17 libmpdec\nThe_decimalCextensionunderlyingthedecimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary\nunlessthebuildisconfigured--with-system-libmpdec:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\nRedistribution and use in source and binary forms, with or without\n(continuesonnextpage)\n188 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.18 W3C C14N test suite\nTheC14N2.0testsuiteinthetestpackage(Lib/test/xmltestdata/c14n-20/)wasretrievedfromtheW3C\nwebsiteathttps://www.w3.org/TR/xml-c14n2-testcases/andisdistributedunderthe3-clauseBSDlicense:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of works must retain the original copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\nused to endorse or promote products derived from this work without\nspecific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 189\nThePythonLanguageReference,Release3.13.3\nC.3.19 mimalloc\nMITLicense:\nCopyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nC.3.20 asyncio\nPartsoftheasynciomoduleareincorporatedfromuvloop0.16,whichisdistributedundertheMITlicense:\nCopyright (c) 2015-2021 MagicStack Inc. http://magic.io\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.21 Global Unbounded Sequences (GUS)\nThe file Python/qsbr.c is adapted from FreeBSD\u2019s \u201cGlobal Unbounded Sequences\u201d safe memory reclamation\nschemeinsubr_smr.c. Thefileisdistributedunderthe2-ClauseBSDLicense:\nCopyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\n(continuesonnextpage)\n190 AppendixC. HistoryandLicense\nThePythonLanguageReference,Release3.13.3\n(continuedfrompreviouspage)\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice unmodified, this list of conditions, and the following\ndisclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 191\nThePythonLanguageReference,Release3.13.3\n192 AppendixC. HistoryandLicense\nAPPENDIX\nD\nCOPYRIGHT\nPythonandthisdocumentationis:\nCopyright\u00a92001-2024PythonSoftwareFoundation. Allrightsreserved.\nCopyright\u00a92000BeOpen.com. Allrightsreserved.\nCopyright\u00a91995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.\nCopyright\u00a91991-1995StichtingMathematischCentrum. Allrightsreserved.\nSeeHistoryandLicenseforcompletelicenseandpermissionsinformation.\n193\nThePythonLanguageReference,Release3.13.3\n194 AppendixD. Copyright\nINDEX\nNon-alphabetical\nin expression lists,94\n...,153 in function calls,87\nellipsis literal,18\noperator,89\n**\n'''\nstring literal,10 function definition,124\n{}(curlybrackets) in dictionary displays,80\ndictionary expression,80 in function calls,87\nin formatted string literal,12\noperator,88\nset expression,79 **=\n. (dot) augmented assignment,99\nattribute reference,85 *=\nin numeric literal,14 augmented assignment,99\n! (exclamation)\n+(plus)\nin formatted string literal,12 binary operator,89\n-(minus) unary operator,88\nbinary operator,89 +=\nunary operator,88 augmented assignment,99\n'(singlequote)\n,(comma),78\nstring literal,9 argument list,86\n! patterns,117 expression list,79,94,100,125\n\"(doublequote) identifier list,106,107\nstring literal,9 import statement,104\nin dictionary displays,80\n\"\"\"\nstring literal,10 in target list,98\n#(hash) parameter list,123\ncomment,5\nslicing,86\nsource encoding declaration,5 with statement,113\n%(percent)\n/(slash)\noperator,89 function definition,124\noperator,89\n%=\naugmented assignment,99 //\n&(ampersand)\noperator,89\noperator,90 //=\naugmented assignment,99\n&=\naugmented assignment,99 /=\n()(parentheses) augmented assignment,99\ncall,86 0b\nclass definition,125 integer literal,14\nfunction definition,123 0o\ngenerator expression,80 integer literal,14\nin assignment target list,98 0x\ntuple display,78 integer literal,14\n*(asterisk) : (colon)\nfunction definition,124 annotated variable,100\nimport statement,105 compound statement,110,111,113,115,123,\n125\nin assignment target list,98\n195\nThePythonLanguageReference,Release3.13.3\nfunction annotations,124 escape sequence,10\nin dictionary expressions,80 \\n\nin formatted string literal,12 escape sequence,10\nlambda expression,94 \\r\nslicing,86 escape sequence,10\n:=(colonequals),93 \\t\n;(semicolon),109 escape sequence,10\n<(less) \\U\noperator,90 escape sequence,10\n<< \\u\noperator,90 escape sequence,10\n<<= \\v\naugmented assignment,99 escape sequence,10\n<= \\x\noperator,90 escape sequence,10\n!= ^(caret)\noperator,90 operator,90\n-= ^=\naugmented assignment,99 augmented assignment,99\n=(equals) _(underscore)\nassignment statement,97 in numeric literal,14\nclass definition,43 _, identifiers,9\nfor help in debugging using string __, identifiers,9\nliterals,12 __abs__()(objectmethod),51\nfunction definition,124 __add__()(objectmethod),50\nin function calls,86 __aenter__()(objectmethod),56\n== __aexit__()(objectmethod),56\noperator,90 __aiter__()(objectmethod),56\n-> __all__(optionalmoduleattribute),105\nfunction annotations,124 __and__()(objectmethod),50\n>(greater) __anext__()(agenmethod),84\noperator,90 __anext__()(objectmethod),56\n>= __annotations__(classattribute),28\noperator,90 __annotations__(functionattribute),22\n>> __annotations__(moduleattribute),24,26\noperator,90 __annotations__(typeattribute),28\n>>= __await__()(objectmethod),55\naugmented assignment,99 __bases__(classattribute),28\n>>>,153 __bases__(typeattribute),28\n@(at) __bool__()(objectmethod),38,48\nclass definition,125 __buffer__()(objectmethod),53\nfunction definition,123 __bytes__()(objectmethod),36\noperator,89 __cached__(moduleattribute),24,26\n[](squarebrackets) __call__()(objectmethod),48,88\nin assignment target list,98 __cause__(exceptionattribute),102\nlist expression,79 __ceil__()(objectmethod),52\nsubscription,85 __class__(instanceattribute),29\n\\(backslash) __class__(methodcell),45\nescape sequence,10 __class__(moduleattribute),39\n\\\\ __class__(objectattribute),29\nescape sequence,10 __class_getitem__()(objectclassmethod),46\n\\a __classcell__(classnamespaceentry),45\nescape sequence,10 __closure__(functionattribute),21\n\\b __code__(functionattribute),22\nescape sequence,10 __complex__()(objectmethod),52\n\\f __contains__()(objectmethod),50\nescape sequence,10 __context__(exceptionattribute),102\n\\N __debug__,101\n196 Index\nThePythonLanguageReference,Release3.13.3\n__defaults__(functionattribute),22 __isub__()(objectmethod),51\n__del__()(objectmethod),35 __iter__()(objectmethod),49\n__delattr__()(objectmethod),39 __itruediv__()(objectmethod),51\n__delete__()(objectmethod),40 __ixor__()(objectmethod),51\n__delitem__()(objectmethod),49 __kwdefaults__(functionattribute),22\n__dict__(classattribute),28 __le__()(objectmethod),37\n__dict__(functionattribute),22 __len__()(mappingobjectmethod),38\n__dict__(instanceattribute),29 __len__()(objectmethod),48\n__dict__(moduleattribute),27 __length_hint__()(objectmethod),48\n__dict__(objectattribute),29 __loader__(moduleattribute),24,25\n__dict__(typeattribute),28 __lshift__()(objectmethod),50\n__dir__(moduleattribute),39 __lt__()(objectmethod),37\n__dir__()(objectmethod),39 __main__\n__divmod__()(objectmethod),50 module,60,133\n__doc__(classattribute),28 __matmul__()(objectmethod),50\n__doc__(functionattribute),22 __missing__()(objectmethod),49\n__doc__(methodattribute),22,23 __mod__()(objectmethod),50\n__doc__(moduleattribute),24,26 __module__(classattribute),28\n__doc__(typeattribute),28 __module__(functionattribute),22\n__enter__()(objectmethod),52 __module__(methodattribute),22,23\n__eq__()(objectmethod),37 __module__(typeattribute),28\n__exit__()(objectmethod),52 __mro__(typeattribute),28\n__file__(moduleattribute),24,26 __mro_entries__()(objectmethod),44\n__firstlineno__(classattribute),28 __mul__()(objectmethod),50\n__firstlineno__(typeattribute),28 __name__(classattribute),28\n__float__()(objectmethod),52 __name__(functionattribute),22\n__floor__()(objectmethod),52 __name__(methodattribute),22,23\n__floordiv__()(objectmethod),50 __name__(moduleattribute),24,25\n__format__()(objectmethod),36 __name__(typeattribute),28\n__func__(methodattribute),22,23 __ne__()(objectmethod),37\n__future__,159 __neg__()(objectmethod),51\nfuture statement,105 __new__()(objectmethod),35\n__ge__()(objectmethod),37 __next__()(generatormethod),82\n__get__()(objectmethod),40 __objclass__(objectattribute),41\n__getattr__(moduleattribute),39 __or__()(objectmethod),50\n__getattr__()(objectmethod),38 __package__(moduleattribute),24,25\n__getattribute__()(objectmethod),39 __path__(moduleattribute),24,26\n__getitem__()(mappingobjectmethod),34 __pos__()(objectmethod),51\n__getitem__()(objectmethod),49 __pow__()(objectmethod),50\n__globals__(functionattribute),21 __prepare__(metaclassmethod),44\n__gt__()(objectmethod),37 __qualname__(functionattribute),22\n__hash__()(objectmethod),37 __qualname__(typeattribute),28\n__iadd__()(objectmethod),51 __radd__()(objectmethod),50\n__iand__()(objectmethod),51 __rand__()(objectmethod),50\n__ifloordiv__()(objectmethod),51 __rdivmod__()(objectmethod),50\n__ilshift__()(objectmethod),51 __release_buffer__()(objectmethod),53\n__imatmul__()(objectmethod),51 __repr__()(objectmethod),36\n__imod__()(objectmethod),51 __reversed__()(objectmethod),49\n__imul__()(objectmethod),51 __rfloordiv__()(objectmethod),50\n__index__()(objectmethod),52 __rlshift__()(objectmethod),50\n__init__()(objectmethod),35 __rmatmul__()(objectmethod),50\n__init_subclass__()(objectclassmethod),42 __rmod__()(objectmethod),50\n__instancecheck__()(typemethod),46 __rmul__()(objectmethod),50\n__int__()(objectmethod),52 __ror__()(objectmethod),50\n__invert__()(objectmethod),51 __round__()(objectmethod),52\n__ior__()(objectmethod),51 __rpow__()(objectmethod),50\n__ipow__()(objectmethod),51 __rrshift__()(objectmethod),50\n__irshift__()(objectmethod),51 __rshift__()(objectmethod),50\nIndex 197\nThePythonLanguageReference,Release3.13.3\n__rsub__()(objectmethod),50 import statement,104\n__rtruediv__()(objectmethod),50 keyword,104,111,113,115\n__rxor__()(objectmethod),50 match statement,115\n__self__(methodattribute),22,23 with statement,113\n__set__()(objectmethod),40 AS pattern, OR pattern, capture pattern,\n__set_name__()(objectmethod),43 wildcard pattern,117\n__setattr__()(objectmethod),39 ASCII,4,9\n__setitem__()(objectmethod),49 asend()(agenmethod),84\n__slots__,166 assert\n__spec__(moduleattribute),24,25 statement,100\n__static_attributes__(classattribute),28 AssertionError\n__static_attributes__(typeattribute),28 exception,101\n__str__()(objectmethod),36 assertions\n__sub__()(objectmethod),50 debugging,100\n__subclasscheck__()(typemethod),46 assignment\n__subclasses__()(typemethod),29 annotated,100\n__traceback__(exceptionattribute),102 attribute,97,98\n__truediv__()(objectmethod),50 augmented,99\n__trunc__()(objectmethod),52 classattribute,27\n__type_params__(classattribute),28 class instanceattribute,29\n__type_params__(functionattribute),22 expression,93\n__type_params__(typeattribute),28 slicing,99\n__xor__()(objectmethod),50 statement,20,97\n|(verticalbar) subscription,98\noperator,90 targetlist,98\n|= assignment expression,93\naugmented assignment,99 async\n~(tilde) keyword,126\noperator,88 async def\nstatement,126\nA\nasync for\nabs in comprehensions,79\nbuilt-in function,52 statement,126\nabstract base class,153 async with\naclose()(agenmethod),84 statement,127\naddition,89 asynchronous context manager,154\nand asynchronous generator,154\nbitwise,90 asynchronous iterator,23\noperator,93 function,23\nannotated asynchronous generator iterator,154\nassignment,100 asynchronous iterable,154\nannotation,153 asynchronous iterator,154\nannotations asynchronous-generator\nfunction,124 object,84\nanonymous athrow()(agenmethod),84\nfunction,94 atom,77\nargument,153 attribute,18,154\ncall semantics,86 assignment,97,98\nfunction,21 assignment,class,27\nfunction definition,124 assignment,class instance,29\narithmetic class,27\nconversion,77 class instance,29\noperation,binary,89 deletion,101\noperation,unary,88 genericspecial,18\narray reference,85\nmodule,20 special,18\nas AttributeError\nexcept clause,111 exception,85\n198 Index\nThePythonLanguageReference,Release3.13.3\naugmented pow,50,51\nassignment,99 print,36\nawait range,110\nin comprehensions,79 repr,97\nkeyword,88,126 round,52\nawaitable,154 slice,34\ntype,17,43\nB\nbuilt-in method\nb' call,88\nbytes literal,10 object,24,88\nb\" builtins\nbytes literal,10 module,133\nbackslash character,6 byte,20\nBDFL,154 bytearray,20\nbinary bytecode,29,155\narithmeticoperation,89 bytes,20\nbitwiseoperation,90 built-in function,36\nbinary file,154 bytes literal,9\nbinary literal,14 bytes-like object,155\nbinding\nC\nglobalname,106\nname,59,97,104,123,125 C,10\nbitwise language,18,19,24,90\nand,90 call,86\noperation,binary,90 built-in function,88\noperation,unary,88 built-in method,88\nor,90 class instance,88\nxor,90 class object,27,88\nblank line,6 function,21,87,88\nblock,59 instance,48,88\ncode,59 method,88\nBNF,4,77 procedure,97\nBoolean user-definedfunction,87\nobject,19 callable,155\noperation,93 object,21,86\nborrowed reference,154 callback,155\nbreak case\nstatement,104,110,113 keyword,115\nbuilt-in match,115\nmethod,24 case block,117\nbuilt-in function C-contiguous,156\nabs,52 chaining\nbytes,36 comparisons,90\ncall,88 exception,102\nchr,20 character,20,85\ncompile,106 chr\ncomplex,52 built-in function,20\ndivmod,50,51 class,155\neval,106,134 attribute,27\nexec,106 attributeassignment,27\nfloat,52 body,45\nhash,37 constructor,35\nid,17 definition,101,125\nint,52 instance,29\nlen,1921,48 name,125\nobject,24,88 object,27,88,125\nopen,29 statement,125\nord,20 class instance\nIndex 199\nThePythonLanguageReference,Release3.13.3\nattribute,29 comparisons,37\nattributeassignment,29 chaining,90\ncall,88 compile\nobject,27,29,88 built-in function,106\nclass object complex\ncall,27,88 built-in function,52\nclass variable,155 number,19\nclause,109 object,19\nclear()(framemethod),33 complex literal,14\nclose()(coroutinemethod),56 complex number,156\nclose()(generatormethod),82 compound\nclosure variable,155 statement,109\nco_argcount(codeobjectattribute),29 comprehensions,79\nco_argcount(codeobjectattribute),30 dictionary,80\nco_cellvars(codeobjectattribute),29 list,79\nco_cellvars(codeobjectattribute),30 set,79\nco_code(codeobjectattribute),29 Conditional\nco_code(codeobjectattribute),30 expression,93\nco_consts(codeobjectattribute),29 conditional\nco_consts(codeobjectattribute),30 expression,94\nco_filename(codeobjectattribute),29 constant,9\nco_filename(codeobjectattribute),30 constructor\nco_firstlineno(codeobjectattribute),29 class,35\nco_firstlineno(codeobjectattribute),30 container,17,27\nco_flags(codeobjectattribute),29 context,156\nco_flags(codeobjectattribute),30 context management protocol,156\nco_freevars(codeobjectattribute),29 context manager,52,156\nco_freevars(codeobjectattribute),30 context variable,156\nco_kwonlyargcount(codeobjectattribute),29 contiguous,156\nco_kwonlyargcount(codeobjectattribute),30 continue\nco_lines()(codeobjectmethod),31 statement,104,110,113\nco_lnotab(codeobjectattribute),29 conversion\nco_lnotab(codeobjectattribute),30 arithmetic,77\nco_name(codeobjectattribute),29 string,36,97\nco_name(codeobjectattribute),30 coroutine,54,81,156\nco_names(codeobjectattribute),29 function,23\nco_names(codeobjectattribute),30 coroutine function,156\nco_nlocals(codeobjectattribute),29 CPython,156\nco_nlocals(codeobjectattribute),30 current context,156\nco_positions()(codeobjectmethod),31\nD\nco_posonlyargcount(codeobjectattribute),29\nco_posonlyargcount(codeobjectattribute),30 dangling\nco_qualname(codeobjectattribute),29 else,109\nco_qualname(codeobjectattribute),30 data,17\nco_stacksize(codeobjectattribute),29 type,18\nco_stacksize(codeobjectattribute),30 type,immutable,78\nco_varnames(codeobjectattribute),29 dbm.gnu\nco_varnames(codeobjectattribute),30 module,21\ncode dbm.ndbm\nblock,59 module,21\ncode object,29 debugging\ncollections assertions,100\nmodule,20 decimal literal,14\ncomma,78 decorator,156\ntrailing,94 DEDENT token,7,109\ncommand line,133 def\ncomment,5 statement,123\ncomparison,90 default\n200 Index\nThePythonLanguageReference,Release3.13.3\nparametervalue,124 order,95\ndefinition exc_info(inmodulesys),33\nclass,101,125 except\nfunction,101,123 keyword,111\ndel except_star\nstatement,35,101 keyword,112\ndeletion exception,62,102\nattribute,101 AssertionError,101\ntarget,101 AttributeError,85\ntargetlist,101 chaining,102\ndelimiters,15 GeneratorExit,82,84\ndescriptor,157 handler,33\ndestructor,35,98 ImportError,104\ndictionary,157 NameError,77\ncomprehensions,80 raising,102\ndisplay,80 StopAsyncIteration,84\nobject,21,27,37,80,85,99 StopIteration,82,102\ndictionary comprehension,157 TypeError,88\ndictionary view,157 ValueError,90\ndisplay ZeroDivisionError,89\ndictionary,80 exception handler,62\nlist,79 exclusive\nset,79 or,90\ndivision,89 exec\ndivmod built-in function,106\nbuilt-in function,50,51 execution\ndocstring,125,157 frame,59,125\ndocumentation string,31 restricted,62\nduck-typing,157 stack,33\nexecution model,59\nE\nexpression,77,157\ne assignment,93\nin numeric literal,14 Conditional,93\nEAFP,157 conditional,94\nelif generator,80\nkeyword,110 lambda,94,124\nEllipsis list,94,97\nobject,18 statement,97\nelse yield,81\nconditional expression,94 extension\ndangling,109 module,18\nkeyword,104,110,111,113 extension module,158\nempty\nF\nlist,79\ntuple,20,78 f'\nencoding declarations(sourcefile),5 formatted string literal,10\nenvironment,60 f\"\nenvironment variable formatted string literal,10\nPYTHON_GIL,160 f-string,158\nPYTHONHASHSEED,38 f_back(frameattribute),32\nPYTHONNODEBUGRANGES,31 f_builtins(frameattribute),32\nPYTHONPATH,72 f_code(frameattribute),32\nerror handling,62 f_globals(frameattribute),32\nerrors,62 f_lasti(frameattribute),32\nescape sequence,10 f_lineno(frameattribute),32,33\neval f_locals(frameattribute),32\nbuilt-in function,106,134 f_trace(frameattribute),32,33\nevaluation f_trace_lines(frameattribute),32,33\nIndex 201\nThePythonLanguageReference,Release3.13.3\nf_trace_opcodes(frameattribute),32,33 G\nFalse,19\ngarbage collection,17,159\nfile object,158 generator,159\nfile-like object,158 expression,80\nfilesystem encoding and error handler,158 function,23,81,102\nfinalizer,35\niterator,23,102\nfinally object,31,80,82\nkeyword,101,104,111,113\ngenerator expression,159\nfind_spec generator iterator,159\nfinder,67\nGeneratorExit\nfinder,67,158\nexception,82,84\nfind_spec,67\ngeneric\nfloat specialattribute,18\nbuilt-in function,52 generic function,159\nfloating-point generic type,159\nnumber,19\nGIL,159\nobject,19\nglobal\nfloating-point literal,14 namebinding,106\nfloor division,158 namespace,21\nfor statement,101,106\nin comprehensions,79 global interpreter lock,159\nstatement,104,110\ngrammar,4\nform grouping,6\nlambda,94\nguard,116\nformat()(built-infunction)\n__str__()(objectmethod),36 H\nformatted string literal,12\nhandle an exception,62\nFortran contiguous,156\nhandler\nframe\nexception,33\nexecution,59,125\nhash\nobject,32\nbuilt-in function,37\nfree\nhash character,5\nvariable,59\nhash-based pyc,160\nfree threading,158\nhashable,80,160\nfree variable,158\nhexadecimal literal,14\nfrom\nhierarchy\nimport statement,59,104\ntype,18\nkeyword,81,104\nhooks\nyield from expression,81\nimport,67\nfrozenset\nmeta,67\nobject,21\npath,67\nfstring,12\nf-string,12 I\nfunction,158\nid\nannotations,124\nbuilt-in function,17\nanonymous,94\nidentifier,8,77\nargument,21\nidentity\ncall,21,87,88\ntest,93\ncall,user-defined,87\nidentity of an object,17\ndefinition,101,123\nIDLE,160\ngenerator,81,102\nif\nname,123\nconditional expression,94\nobject,21,24,87,88,123\nin comprehensions,79\nuser-defined,21\nkeyword,115\nfunction annotation,158\nstatement,110\nfuture\nimaginary literal,14\nstatement,105\nimmortal,160\nimmutable,160\n202 Index\nThePythonLanguageReference,Release3.13.3\ndatatype,78 iterable,161\nobject,20,78,80 unpacking,94\nimmutable object,17 iterator,161\nimmutable sequence\nJ\nobject,20\nimmutable types j\nsubclassing,35 in numeric literal,15\nimport Java\nhooks,67 language,19\nstatement,24,104\nK\nimport hooks,67\nimport machinery,65 key,80\nimport path,160 key function,161\nimporter,160 key/value pair,80\nImportError keyword,8,9\nexception,104 as,104,111,113,115\nimporting,160 async,126\nin await,88,126\nkeyword,110 case,115\noperator,93 elif,110\ninclusive else,104,110,111,113\nor,90 except,111\nINDENT token,7 except_star,112\nindentation,6 finally,101,104,111,113\nindex operation,19 from,81,104\nindices()(slicemethod),34 if,115\ninheritance,125 in,110\ninput,134 yield,81\ninstance keyword argument,161\ncall,48,88\nclass,29 L\nobject,27,29,88\nlambda,161\nint\nexpression,94,124\nbuilt-in function,52\nform,94\ninteger,20\nlanguage\nobject,19\nC,18,19,24,90\nrepresentation,19\nJava,19\ninteger literal,14\nlast_traceback(inmodulesys),33\ninteractive,160\nLBYL,162\ninteractive mode,133\nleading whitespace,6\ninternal type,29\nlen\ninterpolated string literal,12\nbuilt-in function,1921,48\ninterpreted,160\nlexical analysis,5\ninterpreter,133\nlexical analyzer,162\ninterpreter shutdown,161\nlexical definitions,4\ninversion,88\nline continuation,6\ninvocation,21\nline joining,5,6\nio\nline structure,5\nmodule,29\nlist,162\nirrefutable case block,117\nassignment,target,98\nis\ncomprehensions,79\noperator,93\ndeletiontarget,101\nis not\ndisplay,79\noperator,93\nempty,79\nitem\nexpression,94,97\nsequence,85\nobject,20,79,85,86,99\nstring,85\ntarget,98,110\nitem selection,19\nlist comprehension,162\nIndex 203\nThePythonLanguageReference,Release3.13.3\nliteral,9,78 object,20,97,98\nloader,67,162 mutable object,17\nlocale encoding,162 mutable sequence\nlogical line,5 object,20\nloop\nN\nstatement,104,110\nloop control name,8,59,77\ntarget,104 binding,59,97,104,123,125\nbinding,global,106\nM\nclass,125\nmagic function,123\nmethod,162 mangling,77\nmagic method,162 rebinding,97\nmakefile()(socketmethod),29 unbinding,101\nmangling named expression,93\nname,77 named tuple,163\nmapping,162 NameError\nobject,21,29,85,99 exception,77\nmatch NameError(built-inexception),60\ncase,115 names\nstatement,115 private,77\nmatrix multiplication,89 namespace,59,163\nmembership global,21\ntest,93 module,24\nmeta package,66\nhooks,67 namespace package,163\nmeta hooks,67 negation,88\nmeta path finder,162 nested scope,164\nmetaclass,43,162 new-style class,164\nmetaclass hint,44 NEWLINE token,5,109\nmethod,163 None\nbuilt-in,24 object,18,97\ncall,88 nonlocal\nmagic,162 statement,107\nobject,22,24,88 not\nspecial,167 operator,93\nuser-defined,22 not in\nmethod resolution order,163 operator,93\nminus,88 notation,4\nmodule,163 NotImplemented\n__main__,60,133 object,18\narray,20 null\nbuiltins,133 operation,101\ncollections,20 number,14\ndbm.gnu,21 complex,19\ndbm.ndbm,21 floating-point,19\nextension,18 numeric\nimporting,104 object,18,29\nio,29 numeric literal,14\nnamespace,24\nO\nobject,24,85\nsys,111,133 object,17,164\nmodule spec,67,163 asynchronous-generator,84\nmodulo,89 Boolean,19\nMRO,163 built-in function,24,88\nmro()(typemethod),28 built-in method,24,88\nmultiplication,89 callable,21,86\nmutable,163 class,27,88,125\n204 Index\nThePythonLanguageReference,Release3.13.3\nclass instance,27,29,88 !=,90\ncode,29 ==,90\ncomplex,19 >(greater),90\ndictionary,21,27,37,80,85,99 >=,90\nEllipsis,18 >>,90\nfloating-point,19 @(at),89\nframe,32 ^(caret),90\nfrozenset,21 |(verticalbar),90\nfunction,21,24,87,88,123 ~(tilde),88\ngenerator,31,80,82 and,93\nimmutable,20,78,80 in,93\nimmutable sequence,20 is,93\ninstance,27,29,88 is not,93\ninteger,19 not,93\nlist,20,79,85,86,99 not in,93\nmapping,21,29,85,99 or,93\nmethod,22,24,88 overloading,34\nmodule,24,85 precedence,95\nmutable,20,97,98 ternary,94\nmutable sequence,20 operators,15\nNone,18,97 optimized scope,164\nNotImplemented,18 or\nnumeric,18,29 bitwise,90\nsequence,19,29,85,86,93,99,110 exclusive,90\nset,21,79 inclusive,90\nset type,20 operator,93\nslice,49 ord\nstring,85,86 built-in function,20\ntraceback,33,102,111 order\ntuple,20,85,86,94 evaluation,95\nuser-defined function,21,87,123 output,97\nuser-defined method,22 standard,97\nobject.__match_args__(built-invariable),53 overloading\nobject.__slots__(built-invariable),41 operator,34\noctal literal,14\nP\nopen\nbuilt-in function,29 package,65,164\noperation namespace,66\nbinaryarithmetic,89 portion,66\nbinarybitwise,90 regular,66\nBoolean,93 parameter,164\nnull,101 call semantics,86\npower,88 function definition,123\nshifting,90 value,default,124\nunaryarithmetic,88 parenthesized form,78\nunarybitwise,88 parser,5\noperator pass\n-(minus),88,89 statement,101\n%(percent),89 path\n&(ampersand),90 hooks,67\n*(asterisk),89 path based finder,72,165\n**,88 path entry,165\n+(plus),88,89 path entry finder,165\n/(slash),89 path entry hook,165\n//,89 path hooks,67\n<(less),90 path-like object,165\n<<,90 pattern matching,115\n<=,90 PEP,165\nIndex 205\nThePythonLanguageReference,Release3.13.3\nphysical line,5,6,10 PEP 562,40\nplus,88 PEP 563,106,125\npopen()(inmoduleos),29 PEP 570,124\nportion,165 PEP 572,80,94,118\npackage,66 PEP 585,159\npositional argument,165 PEP 614,124,126\npow PEP 617,135\nbuilt-in function,50,51 PEP 626,32\npower PEP 634,53,115,123\noperation,88 PEP 636,115,123\nprecedence PEP 646,85,94,124\noperator,95 PEP 649,61\nprimary,85 PEP 683,160\nprint PEP 688,53\nbuilt-in function,36 PEP 695,61,108\nprint()(built-infunction) PEP 696,61,128\n__str__()(objectmethod),36 PEP 703,158,160\nprivate PEP 3104,107\nnames,77 PEP 3107,125\nprocedure PEP 3115,45,126\ncall,97 PEP 3116,168\nprogram,133 PEP 3119,46\nprovisional API,165 PEP 3120,5\nprovisional package,165 PEP 3129,125,126\nPython 3000,165 PEP 3131,8\nPython Enhancement Proposals PEP 3132,99\nPEP 1,165 PEP 3135,45\nPEP 8,91 PEP 3147,26\nPEP 236,106 PEP 3155,166\nPEP 238,158 PYTHON_GIL,160\nPEP 252,40 PYTHONHASHSEED,38\nPEP 255,82 Pythonic,165\nPEP 278,168 PYTHONNODEBUGRANGES,31\nPEP 302,65,75,162 PYTHONPATH,72\nPEP 308,94\nQ\nPEP 318,125,126\nPEP 328,75 qualified name,166\nPEP 338,75\nPEP 342,82 R\nPEP 343,52,115,156\nr'\nPEP 362,154,164\nraw string literal,10\nPEP 366,25,75\nr\"\nPEP 380,82\nraw string literal,10\nPEP 411,165\nraise\nPEP 414,10\nstatement,102\nPEP 420,65,66,71,75,163,165\nraise an exception,62\nPEP 443,159\nraising\nPEP 448,80,87,94\nexception,102\nPEP 451,75\nrange\nPEP 483,159\nbuilt-in function,110\nPEP 484,46,100,125,153,159,168\nraw string,10\nPEP 492,55,82,128,154,156\nrebinding\nPEP 498,14,158\nname,97\nPEP 519,165\nreference\nPEP 525,82,154\nattribute,85\nPEP 526,100,125,153,168\nreference count,166\nPEP 530,79\nreference counting,17\nPEP 560,44,48\nregular\n206 Index\nThePythonLanguageReference,Release3.13.3\npackage,66 standard\nregular package,166 output,97\nrelative Standard C,10\nimport,105 standard input,133\nREPL,166 start(sliceobjectattribute),34,86\nreplace()(codeobjectmethod),32 statement,167\nrepr assert,100\nbuilt-in function,97 assignment,20,97\nrepr()(built-infunction) assignment, annotated,100\n__repr__()(objectmethod),36 assignment, augmented,99\nrepresentation async def,126\ninteger,19 async for,126\nreserved word,8 async with,127\nrestricted break,104,110,113\nexecution,62 class,125\nreturn compound,109\nstatement,101,113 continue,104,110,113\nround def,123\nbuilt-in function,52 del,35,101\nexpression,97\nS\nfor,104,110\nscope,59,60 future,105\nsend()(coroutinemethod),55 global,101,106\nsend()(generatormethod),82 if,110\nsequence,166 import,24,104\nitem,85 loop,104,110\nobject,19,29,85,86,93,99,110 match,115\nset nonlocal,107\ncomprehensions,79 pass,101\ndisplay,79 raise,102\nobject,21,79 return,101,113\nset comprehension,167 simple,97\nset type try,33,111\nobject,20 type,107\nshifting while,104,110\noperation,90 with,52,113\nsimple yield,102\nstatement,97 statement grouping,6\nsingle dispatch,167 static type checker,167\nsingleton stderr(inmodulesys),29\ntuple,20 stdin(inmodulesys),29\nslice,86,167 stdio,29\nbuilt-in function,34 stdout(inmodulesys),29\nobject,49 step(sliceobjectattribute),34,86\nslicing,19,20,86 stop(sliceobjectattribute),34,86\nassignment,99 StopAsyncIteration\nsoft deprecated,167 exception,84\nsoft keyword,9 StopIteration\nsource character set,5 exception,82,102\nspace,6 string\nspecial __format__()(objectmethod),36\nattribute,18 __str__()(objectmethod),36\nattribute,generic,18 conversion,36,97\nmethod,167 formatted literal,12\nspecial method,167 immutable sequences,20\nstack interpolated literal,12\nexecution,33 item,85\ntrace,33 object,85,86\nIndex 207\nThePythonLanguageReference,Release3.13.3\nstring literal,9 tuple\nstrong reference,167 empty,20,78\nsubclassing object,20,85,86,94\nimmutable types,35 singleton,20\nsubscription,1921,85 type,18,168\nassignment,98 built-in function,17,43\nsubtraction,89 data,18\nsuite,109 hierarchy,18\nsyntax,4 immutabledata,78\nsys statement,107\nmodule,111,133 type alias,168\nsys.exc_info,33 type hint,168\nsys.exception,33 type of an object,17\nsys.last_traceback,33 type parameters,128\nsys.meta_path,67 TypeError\nsys.modules,67 exception,88\nsys.path,72 types, internal,29\nsys.path_hooks,72\nU\nsys.path_importer_cache,72\nsys.stderr,29 u'\nsys.stdin,29 string literal,9\nsys.stdout,29 u\"\nSystemExit(built-inexception),62 string literal,9\nunary\nT\narithmeticoperation,88\ntab,6 bitwiseoperation,88\ntarget,98 unbinding\ndeletion,101 name,101\nlist,98,110 UnboundLocalError,60\nlistassignment,98 Unicode,20\nlist,deletion,101 Unicode Consortium,10\nloop control,104 universal newlines,168\ntb_frame(tracebackattribute),33,34 UNIX,133\ntb_lasti(tracebackattribute),33,34 unpacking\ntb_lineno(tracebackattribute),33,34 dictionary,80\ntb_next(tracebackattribute),34 in function calls,87\ntermination model,62 iterable,94\nternary unreachable object,17\noperator,94 unrecognized escape sequence,11\ntest user-defined\nidentity,93 function,21\nmembership,93 functioncall,87\ntext encoding,167 method,22\ntext file,167 user-defined function\nthrow()(coroutinemethod),55 object,21,87,123\nthrow()(generatormethod),82 user-defined method\ntoken,5,167 object,22\ntrace\nV\nstack,33\ntraceback value,80\nobject,33,102,111 defaultparameter,124\ntrailing value of an object,17\ncomma,94 ValueError\ntriple-quoted string,168 exception,90\ntriple-quoted string,10 values\nTrue,19 writing,97\ntry variable\nstatement,33,111 free,59\n208 Index\nThePythonLanguageReference,Release3.13.3\nvariable annotation,168\nvirtual environment,169\nvirtual machine,169\nW\nwalrus operator,93\nwhile\nstatement,104,110\nWindows,133\nwith\nstatement,52,113\nwriting\nvalues,97\nX\nxor\nbitwise,90\nY\nyield\nexamples,83\nexpression,81\nkeyword,81\nstatement,102\nZ\nZen of Python,169\nZeroDivisionError\nexception,89\nIndex 209\n",
  "context": "8.6.2 Guards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n8.6.3 IrrefutableCaseBlocks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n8.6.4 Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117",
  "source_file": "resources\\Year 3\\Python\\reference.pdf",
  "line_numbers": [
    177,
    9148
  ]
}