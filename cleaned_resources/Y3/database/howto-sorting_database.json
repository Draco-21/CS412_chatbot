{
  "title": "howto-sorting",
  "language": "python",
  "topics": [
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "Email: docs@python.org Contents 1 SortingBasics 1",
  "code": "2 KeyFunctions 2\n3 OperatorModuleFunctionsandPartialFunctionEvaluation 3\n4 AscendingandDescending 3\n5 SortStabilityandComplexSorts 3\n6 Decorate-Sort-Undecorate 4\n7 ComparisonFunctions 5\n8 OddsandEnds 5\n9 PartialSorts 6\nIndex 7\nAuthor\nAndrewDalkeandRaymondHettinger\nPythonlistshaveabuilt-inlist.sort()methodthatmodifiesthelistin-place. Thereisalsoasorted()built-in\nfunctionthatbuildsanewsortedlistfromaniterable.\nInthisdocument,weexplorethevarioustechniquesforsortingdatausingPython.\n1 Sorting Basics\nAsimpleascendingsortisveryeasy: justcallthesorted()function. Itreturnsanewsortedlist:\n>>> sorted([5, 2, 3, 1, 4])\n[1, 2, 3, 4, 5]\nYou can also use the list.sort() method. It modifies the list in-place (and returns None to avoid confusion).\nUsuallyit\u2019slessconvenientthansorted()-butifyoudon\u2019tneedtheoriginallist,it\u2019sslightlymoreefficient.\n1\n>>> a = [5, 2, 3, 1, 4]\n>>> a.sort()\n>>> a\n[1, 2, 3, 4, 5]\nAnotherdifferenceisthatthelist.sort()methodisonlydefinedforlists. Incontrast, thesorted()function\nacceptsanyiterable.\n>>> sorted({1: 'D', 2: 'B', 3: 'B', 4: 'E', 5: 'A'})\n[1, 2, 3, 4, 5]\n2 Key Functions\nBoth list.sort()andsorted()havea keyparametertospecifyafunction(orothercallable)tobe calledon\neachlistelementpriortomakingcomparisons.\nForexample,here\u2019sacase-insensitivestringcomparison:\n>>> sorted(\"This is a test string from Andrew\".split(), key=str.casefold)\n['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']\nThe value of the key parameter should be a function (or other callable) that takes a single argument and returns a\nkeytouseforsortingpurposes. Thistechniqueisfastbecausethekeyfunctioniscalledexactlyonceforeachinput\nrecord.\nAcommonpatternistosortcomplexobjectsusingsomeoftheobject\u2019sindicesaskeys. Forexample:\n>>> student_tuples = [\n... ('john', 'A', 15),\n... ('jane', 'B', 12),\n... ('dave', 'B', 10),\n... ]\n>>> sorted(student_tuples, key=lambda student: student[2]) # sort by age\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\nThesametechniqueworksforobjectswithnamedattributes. Forexample:\n>>> class Student:\n... def __init__(self, name, grade, age):\n... self.name = name\n... self.grade = grade\n... self.age = age\n... def __repr__(self):\n... return repr((self.name, self.grade, self.age))\n>>> student_objects = [\n... Student('john', 'A', 15),\n... Student('jane', 'B', 12),\n... Student('dave', 'B', 10),\n... ]\n>>> sorted(student_objects, key=lambda student: student.age) # sort by age\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\nObjectswithnamedattributescanbemadebyaregularclassasshownabove,ortheycanbeinstancesofdataclass\noranamedtuple.\n2\n3 Operator Module Functions and Partial Function Evaluation\nThekeyfunctionpatternsshownaboveareverycommon,soPythonprovidesconveniencefunctionstomakeaccessor\nfunctionseasierandfaster. Theoperatormodulehasitemgetter(),attrgetter(),andamethodcaller()\nfunction.\nUsingthosefunctions,theaboveexamplesbecomesimplerandfaster:\n>>> from operator import itemgetter, attrgetter\n>>> sorted(student_tuples, key=itemgetter(2))\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\n>>> sorted(student_objects, key=attrgetter('age'))\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\nTheoperatormodulefunctionsallowmultiplelevelsofsorting. Forexample,tosortbygradethenbyage:\n>>> sorted(student_tuples, key=itemgetter(1,2))\n[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]\n>>> sorted(student_objects, key=attrgetter('grade', 'age'))\n[('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]\nThe functools module provides another helpful tool for making key-functions. The partial() function can\nreducethearityofamulti-argumentfunctionmakingitsuitableforuseasakey-function.\n>>> from functools import partial\n>>> from unicodedata import normalize\n>>> names = 'Zo\u00eb \u00c5bj\u00f8rn N\u00fa\u00f1ez \u00c9lana Zeke Abe Nubia Eloise'.split()\n>>> sorted(names, key=partial(normalize, 'NFD'))\n['Abe', '\u00c5bj\u00f8rn', 'Eloise', '\u00c9lana', 'Nubia', 'N\u00fa\u00f1ez', 'Zeke', 'Zo\u00eb']\n>>> sorted(names, key=partial(normalize, 'NFC'))\n['Abe', 'Eloise', 'Nubia', 'N\u00fa\u00f1ez', 'Zeke', 'Zo\u00eb', '\u00c5bj\u00f8rn', '\u00c9lana']\n4 Ascending and Descending\nBothlist.sort()andsorted()acceptareverseparameterwithabooleanvalue. Thisisusedtoflagdescending\nsorts. Forexample,togetthestudentdatainreverseageorder:\n>>> sorted(student_tuples, key=itemgetter(2), reverse=True)\n[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]\n>>> sorted(student_objects, key=attrgetter('age'), reverse=True)\n[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]\n5 Sort Stability and Complex Sorts\nSortsareguaranteedtobestable. Thatmeansthatwhenmultiplerecordshavethesamekey,theiroriginalorderis\npreserved.\n>>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]\n>>> sorted(data, key=itemgetter(0))\n[('blue', 1), ('blue', 2), ('red', 1), ('red', 2)]\n3\nNotice how the two records for blue retain their original order so that ('blue', 1) is guaranteed to precede\n('blue', 2).\nThis wonderful property lets you build complex sorts in a series of sorting steps. For example, to sort the student\ndatabydescendinggradeandthenascendingage,dotheagesortfirstandthensortagainusinggrade:\n>>> s = sorted(student_objects, key=attrgetter('age')) # sort on secondary key\n>>> sorted(s, key=attrgetter('grade'), reverse=True) # now sort on primary\u2423\n,\u2192key, descending\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\nThiscanbeabstractedoutintoawrapperfunctionthatcantakealistandtuplesoffieldandordertosortthemon\nmultiplepasses.\n>>> def multisort(xs, specs):\n... for key, reverse in reversed(specs):\n... xs.sort(key=attrgetter(key), reverse=reverse)\n... return xs\n>>> multisort(list(student_objects), (('grade', True), ('age', False)))\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\nTheTimsortalgorithmusedinPythondoesmultiplesortsefficientlybecauseitcantakeadvantageofanyordering\nalreadypresentinadataset.\n6 Decorate-Sort-Undecorate\nThisidiomiscalledDecorate-Sort-Undecorateafteritsthreesteps:\n\u2022 First,theinitiallistisdecoratedwithnewvaluesthatcontrolthesortorder.\n\u2022 Second,thedecoratedlistissorted.\n\u2022 Finally,thedecorationsareremoved,creatingalistthatcontainsonlytheinitialvaluesintheneworder.\nForexample,tosortthestudentdatabygradeusingtheDSUapproach:\n>>> decorated = [(student.grade, i, student) for i, student in enumerate(student_\n,\u2192objects)]\n>>> decorated.sort()\n>>> [student for grade, i, student in decorated] # undecorate\n[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]\nThisidiomworksbecausetuplesarecomparedlexicographically;thefirstitemsarecompared;iftheyarethesame\nthentheseconditemsarecompared,andsoon.\nItisnotstrictlynecessaryinallcasestoincludetheindexiinthedecoratedlist,butincludingitgivestwobenefits:\n\u2022 Thesortisstable\u2013iftwoitemshavethesamekey,theirorderwillbepreservedinthesortedlist.\n\u2022 Theoriginalitemsdonothavetobecomparablebecausetheorderingofthedecoratedtupleswillbedetermined\nbyatmostthefirsttwoitems. Soforexampletheoriginallistcouldcontaincomplexnumberswhichcannot\nbesorteddirectly.\nAnother name for this idiom is Schwartzian transform, after Randal L. Schwartz, who popularized it among Perl\nprogrammers.\nNowthatPythonsortingprovideskey-functions,thistechniqueisnotoftenneeded.\n4\n7 Comparison Functions\nUnlikekeyfunctionsthatreturnanabsolutevalueforsorting,acomparisonfunctioncomputestherelativeordering\nfortwoinputs.\nForexample,abalancescalecomparestwosamplesgivingarelativeordering: lighter,equal,orheavier. Likewise,a\ncomparisonfunctionsuchascmp(a, b)willreturnanegativevalueforless-than,zeroiftheinputsareequal,ora\npositivevalueforgreater-than.\nIt is common to encounter comparison functions when translating algorithms from other languages. Also, some\nlibraries provide comparison functions as part of their API. For example, locale.strcoll() is a comparison\nfunction.\nToaccommodatethosesituations,Pythonprovidesfunctools.cmp_to_keytowrapthecomparisonfunctionto\nmakeitusableasakeyfunction:\nsorted(words, key=cmp_to_key(strcoll)) # locale-aware sort order\n8 Odds and Ends\n\u2022 For locale aware sorting, use locale.strxfrm() for a key function or locale.strcoll() for a com-\nparisonfunction. Thisisnecessarybecause\u201calphabetical\u201dsortorderingscanvaryacrossculturesevenifthe\nunderlyingalphabetisthesame.\n\u2022 Thereverseparameterstillmaintainssortstability(sothatrecordswithequalkeysretaintheoriginalorder).\nInterestingly, that effect can be simulated without the parameter by using the builtin reversed() function\ntwice:\n>>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]\n>>> standard_way = sorted(data, key=itemgetter(0), reverse=True)\n>>> double_reversed = list(reversed(sorted(reversed(data), key=itemgetter(0))))\n>>> assert standard_way == double_reversed\n>>> standard_way\n[('red', 1), ('red', 2), ('blue', 1), ('blue', 2)]\n\u2022 Thesortroutinesuse<whenmakingcomparisonsbetweentwoobjects. So,itiseasytoaddastandardsort\nordertoaclassbydefiningan__lt__()method:\n>>> Student.__lt__ = lambda self, other: self.age < other.age\n>>> sorted(student_objects)\n[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]\nHowever, note that < can fall back to using __gt__() if __lt__() is not implemented (see object.\n__lt__() for details on the mechanics). To avoid surprises, PEP 8 recommends that all six comparison\nmethodsbeimplemented. Thetotal_ordering()decoratorisprovidedtomakethattaskeasier.\n\u2022 Keyfunctionsneednotdependdirectlyontheobjectsbeingsorted. Akeyfunctioncanalsoaccessexternal\nresources. Forinstance,ifthestudentgradesarestoredinadictionary,theycanbeusedtosortaseparatelist\nofstudentnames:\n>>> students = ['dave', 'john', 'jane']\n>>> newgrades = {'john': 'F', 'jane':'A', 'dave': 'C'}\n>>> sorted(students, key=newgrades.__getitem__)\n['jane', 'dave', 'john']\n5\n9 Partial Sorts\nSomeapplicationsrequireonlysomeofthedatatobeordered. Thestandardlibraryprovidesseveraltoolsthatdo\nlessworkthanafullsort:\n\u2022 min()andmax()returnthesmallestandlargestvalues,respectively. Thesefunctionsmakeasinglepassover\ntheinputdataandrequirealmostnoauxiliarymemory.\n\u2022 heapq.nsmallest()andheapq.nlargest()returnthensmallestandlargestvalues,respectively. These\nfunctionsmakeasinglepassoverthedatakeepingonlynelementsinmemoryatatime. Forvaluesofnthat\naresmallrelativetothenumberofinputs,thesefunctionsmakefarfewercomparisonsthanafullsort.\n\u2022 heapq.heappush()andheapq.heappop()createandmaintainapartiallysortedarrangementofdatathat\nkeepsthesmallestelementatposition0. Thesefunctionsaresuitableforimplementingpriorityqueueswhich\narecommonlyusedfortaskscheduling.\n6\nIndex\nP\nPython Enhancement Proposals\nPEP 8,5\n7\n",
  "context": "Email: docs@python.org\nContents\n1 SortingBasics 1",
  "source_file": "resources\\Year 3\\Python\\howto-sorting.pdf",
  "line_numbers": [
    9,
    209
  ]
}