{
  "title": "howto-curses",
  "language": "python",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "networking",
    "data_structures",
    "database"
  ],
  "purpose": "Thisdocumentdescribeshowtousethecursesextensionmoduletocontroltext-modedisplays.",
  "code": "minals;suchterminalsincludeVT100s,theLinuxconsole,andthesimulatedterminalprovidedbyvariousprograms.\nDisplayterminalssupportvariouscontrolcodestoperformcommonoperationssuchasmovingthecursor,scrolling\nthescreen,anderasingareas. Differentterminalsusewidelydifferingcodes,andoftenhavetheirownminorquirks.\nInaworldofgraphicaldisplays, onemightask\u201cwhybother\u201d? It\u2019struethatcharacter-celldisplayterminalsarean\nobsolete technology, but there are niches in which being able to do fancy things with them are still valuable. One\nnicheisonsmall-footprintorembeddedUnixesthatdon\u2019trunanXserver. AnotheristoolssuchasOSinstallersand\nkernelconfiguratorsthatmayhavetorunbeforeanygraphicalsupportisavailable.\n1\nThe curses library provides fairly basic functionality, providing the programmer with an abstraction of a display\ncontainingmultiplenon-overlappingwindowsoftext. Thecontentsofawindowcanbechangedinvariousways\u2014\naddingtext,erasingit,changingitsappearance\u2014andthecurseslibrarywillfigureoutwhatcontrolcodesneedtobe\nsenttotheterminaltoproducetherightoutput. cursesdoesn\u2019tprovidemanyuser-interfaceconceptssuchasbuttons,\ncheckboxes,ordialogs;ifyouneedsuchfeatures,considerauserinterfacelibrarysuchasUrwid.\nThecurseslibrarywasoriginallywrittenforBSDUnix;thelaterSystemVversionsofUnixfromAT&Taddedmany\nenhancementsandnewfunctions. BSDcursesisnolongermaintained,havingbeenreplacedbyncurses,whichisan\nopen-sourceimplementationoftheAT&Tinterface. Ifyou\u2019reusinganopen-sourceUnixsuchasLinuxorFreeBSD,\nyoursystemalmostcertainlyusesncurses. SincemostcurrentcommercialUnixversionsarebasedonSystemVcode,\nallthefunctionsdescribedherewillprobablybeavailable. Theolderversionsofcursescarriedbysomeproprietary\nUnixesmaynotsupporteverything,though.\nTheWindowsversionofPythondoesn\u2019tincludethecursesmodule. AportedversioncalledUniCursesisavailable.\n1.1 The Python curses module\nThe Python module is a fairly simple wrapper over the C functions provided by curses; if you\u2019re already familiar\nwithcursesprogramminginC,it\u2019sreallyeasytotransferthatknowledgetoPython. Thebiggestdifferenceisthat\nthePythoninterfacemakesthingssimplerbymergingdifferentCfunctionssuchasaddstr(),mvaddstr(),and\nmvwaddstr()intoasingleaddstr()method. You\u2019llseethiscoveredinmoredetaillater.\nThisHOWTOisanintroductiontowritingtext-modeprogramswithcursesandPython. Itdoesn\u2019tattempttobea\ncompleteguidetothecursesAPI;forthat,seethePythonlibraryguide\u2019ssectiononncurses,andtheCmanualpages\nforncurses. Itwill,however,giveyouthebasicideas.\n2 Starting and ending a curses application\nBefore doing anything, curses must be initialized. This is done by calling the initscr() function, which will\ndeterminetheterminaltype,sendanyrequiredsetupcodestotheterminal,andcreatevariousinternaldatastructures.\nIfsuccessful,initscr()returnsawindowobjectrepresentingtheentirescreen;thisisusuallycalledstdscrafter\nthenameofthecorrespondingCvariable.\nimport curses\nstdscr = curses.initscr()\nUsuallycursesapplicationsturnoffautomaticechoingofkeystothescreen,inordertobeabletoreadkeysandonly\ndisplaythemundercertaincircumstances. Thisrequirescallingthenoecho()function.\ncurses.noecho()\nApplicationswillalsocommonlyneedtoreacttokeysinstantly,withoutrequiringtheEnterkeytobepressed;this\niscalledcbreakmode,asopposedtotheusualbufferedinputmode.\ncurses.cbreak()\nTerminals usually return special keys, such as the cursor keys or navigation keys such as Page Up and Home, as\na multibyte escape sequence. While you could write your application to expect such sequences and process them\naccordingly,cursescandoitforyou,returningaspecialvaluesuchascurses.KEY_LEFT.Togetcursestodothe\njob,you\u2019llhavetoenablekeypadmode.\nstdscr.keypad(True)\nTerminatingacursesapplicationismucheasierthanstartingone. You\u2019llneedtocall:\ncurses.nocbreak()\nstdscr.keypad(False)\ncurses.echo()\n2\ntoreversethecurses-friendlyterminalsettings. Thencalltheendwin()functiontorestoretheterminaltoitsoriginal\noperatingmode.\ncurses.endwin()\nA common problem when debugging a curses application is to get your terminal messed up when the application\ndieswithoutrestoringtheterminaltoitspreviousstate. InPythonthiscommonlyhappenswhenyourcodeisbuggy\nandraisesanuncaughtexception. Keysarenolongerechoedtothescreenwhenyoutypethem,forexample,which\nmakesusingtheshelldifficult.\nInPythonyoucanavoidthesecomplicationsandmakedebuggingmucheasierbyimportingthecurses.wrapper()\nfunctionandusingitlikethis:\nfrom curses import wrapper\ndef main(stdscr):\n# Clear screen\nstdscr.clear()\n# This raises ZeroDivisionError when i == 10.\nfor i in range(0, 11):\nv = i-10\nstdscr.addstr(i, 0, '10 divided by {} is {}'.format(v, 10/v))\nstdscr.refresh()\nstdscr.getkey()\nwrapper(main)\nThewrapper()functiontakesacallableobjectanddoestheinitializationsdescribedabove,alsoinitializingcolors\nif color support is present. wrapper() then runs your provided callable. Once the callable returns, wrapper()\nwillrestoretheoriginalstateoftheterminal. Thecallableiscalledinsideatry\u2026exceptthatcatchesexceptions,\nrestoresthestateoftheterminal,andthenre-raisestheexception. Thereforeyourterminalwon\u2019tbeleftinafunny\nstateonexceptionandyou\u2019llbeabletoreadtheexception\u2019smessageandtraceback.\n3 Windows and Pads\nWindows are the basic abstraction in curses. A window object represents a rectangular area of the screen, and\nsupportsmethodstodisplaytext,eraseit,allowtheusertoinputstrings,andsoforth.\nThe stdscr object returned by the initscr() function is a window object that covers the entire screen. Many\nprogramsmayneedonlythissinglewindow,butyoumightwishtodividethescreenintosmallerwindows,inorder\ntoredraworclearthemseparately. Thenewwin()functioncreatesanewwindowofagivensize,returningthenew\nwindowobject.\nbegin_x = 20; begin_y = 7\nheight = 5; width = 40\nwin = curses.newwin(height, width, begin_y, begin_x)\nNotethatthecoordinatesystemusedincursesisunusual. Coordinatesarealwayspassedintheordery,x, andthe\ntop-leftcornerofawindowiscoordinate(0,0). Thisbreaksthenormalconventionforhandlingcoordinateswhere\nthexcoordinatecomesfirst. Thisisanunfortunatedifferencefrommostothercomputerapplications,butit\u2019sbeen\npartofcursessinceitwasfirstwritten,andit\u2019stoolatetochangethingsnow.\nYourapplicationcandeterminethesizeofthescreenbyusingthecurses.LINESandcurses.COLSvariablesto\nobtaintheyandxsizes. Legalcoordinateswillthenextendfrom(0,0)to(curses.LINES - 1, curses.COLS\n- 1).\nWhenyoucallamethodtodisplayorerasetext,theeffectdoesn\u2019timmediatelyshowuponthedisplay. Insteadyou\nmustcalltherefresh()methodofwindowobjectstoupdatethescreen.\n3\nThisisbecausecurseswasoriginallywrittenwithslow300-baudterminalconnectionsinmind;withtheseterminals,\nminimizingthetimerequiredtoredrawthescreenwasveryimportant. Insteadcursesaccumulateschangestothe\nscreen and displays them in the most efficient manner when you call refresh(). For example, if your program\ndisplayssometextinawindowandthenclearsthewindow,there\u2019snoneedtosendtheoriginaltextbecausethey\u2019re\nnevervisible.\nInpractice, explicitlytellingcursestoredrawawindowdoesn\u2019treallycomplicateprogrammingwithcursesmuch.\nMostprogramsgointoaflurryofactivity,andthenpausewaitingforakeypressorsomeotheractiononthepartof\ntheuser. Allyouhavetodoistobesurethatthescreenhasbeenredrawnbeforepausingtowaitforuserinput,by\nfirstcallingstdscr.refresh()ortherefresh()methodofsomeotherrelevantwindow.\nA pad is a special case of a window; it can be larger than the actual display screen, and only a portion of the pad\ndisplayedatatime. Creatingapadrequiresthepad\u2019sheightandwidth, whilerefreshingapadrequiresgivingthe\ncoordinatesoftheon-screenareawhereasubsectionofthepadwillbedisplayed.\npad = curses.newpad(100, 100)\n# These loops fill the pad with letters; addch() is\n# explained in the next section\nfor y in range(0, 99):\nfor x in range(0, 99):\npad.addch(y,x, ord('a') + (x*x+y*y) % 26)\n# Displays a section of the pad in the middle of the screen.\n# (0,0) : coordinate of upper-left corner of pad area to display.\n# (5,5) : coordinate of upper-left corner of window area to be filled\n# with pad content.\n# (20, 75) : coordinate of lower-right corner of window area to be\n# : filled with pad content.\npad.refresh( 0,0, 5,5, 20,75)\nThe refresh() call displays a section of the pad in the rectangle extending from coordinate (5,5) to coordinate\n(20,75) on the screen; the upper left corner of the displayed section is coordinate (0,0) on the pad. Beyond that\ndifference,padsareexactlylikeordinarywindowsandsupportthesamemethods.\nIf you have multiple windows and pads on screen there is a more efficient way to update the screen and prevent\nannoyingscreenflickeraseachpartofthescreengetsupdated. refresh()actuallydoestwothings:\n1) Callsthe noutrefresh() methodofeachwindowtoupdatean underlyingdatastructurerepresentingthe\ndesiredstateofthescreen.\n2) Callsthefunctiondoupdate()functiontochangethephysicalscreentomatchthedesiredstaterecordedin\nthedatastructure.\nInstead you can call noutrefresh() on a number of windows to update the data structure, and then call\ndoupdate()toupdatethescreen.\n4 Displaying Text\nFromaCprogrammer\u2019spointofview,cursesmaysometimeslooklikeatwistymazeoffunctions,allsubtlydifferent.\nForexample,addstr()displaysastringatthecurrentcursorlocationinthestdscrwindow,whilemvaddstr()\nmoves to a given y,x coordinate first before displaying the string. waddstr() is just like addstr(), but allows\nspecifyingawindowtouseinsteadofusingstdscrbydefault. mvwaddstr()allowsspecifyingbothawindowand\nacoordinate.\nFortunatelythePythoninterfacehidesallthesedetails. stdscrisawindowobjectlikeanyother,andmethodssuch\nasaddstr()acceptmultipleargumentforms. Usuallytherearefourdifferentforms.\n4\nForm Description\nstrorch Displaythestringstrorcharacterchatthecurrentposition\nstrorch,attr Displaythestringstrorcharacterch,usingattributeattratthecurrentposition\ny,x,strorch Movetopositiony,xwithinthewindow,anddisplaystrorch\ny,x,strorch,attr Movetopositiony,xwithinthewindow,anddisplaystrorch,usingattributeattr\nAttributesallowdisplayingtextinhighlightedformssuchasboldface,underline,reversecode,orincolor. They\u2019llbe\nexplainedinmoredetailinthenextsubsection.\nTheaddstr()methodtakesaPythonstringorbytestringasthevaluetobedisplayed. Thecontentsofbytestrings\naresenttotheterminalas-is. Stringsareencodedtobytesusingthevalueofthewindow\u2019sencodingattribute;this\ndefaultstothedefaultsystemencodingasreturnedbylocale.getencoding().\nThe addch() methods take a character, which can be either a string of length 1, a bytestring of length 1, or an\ninteger.\nConstants are provided for extension characters; these constants are integers greater than 255. For example,\nACS_PLMINUSisa+/-symbol,andACS_ULCORNERistheupperleftcornerofabox(handyfordrawingborders).\nYoucanalsousetheappropriateUnicodecharacter.\nWindows remember where the cursor was left after the last operation, so if you leave out the y,x coordinates, the\nstring or character will be displayed wherever the last operation left off. You can also move the cursor with the\nmove(y,x) method. Because some terminals always display a flashing cursor, you may want to ensure that the\ncursorispositionedinsomelocationwhereitwon\u2019tbedistracting;itcanbeconfusingtohavethecursorblinkingat\nsomeapparentlyrandomlocation.\nIfyourapplicationdoesn\u2019tneedablinkingcursoratall,youcancallcurs_set(False)tomakeitinvisible. For\ncompatibility with older curses versions, there\u2019s a leaveok(bool) function that\u2019s a synonym for curs_set().\nWhenboolistrue,thecurseslibrarywillattempttosuppresstheflashingcursor,andyouwon\u2019tneedtoworryabout\nleavingitinoddlocations.\n4.1 Attributes and Color\nCharacterscanbedisplayedindifferentways. Statuslinesinatext-basedapplicationarecommonlyshowninreverse\nvideo,oratextviewermayneedtohighlightcertainwords. cursessupportsthisbyallowingyoutospecifyanattribute\nforeachcellonthescreen.\nAnattributeisaninteger,eachbitrepresentingadifferentattribute. Youcantrytodisplaytextwithmultipleattribute\nbitsset,butcursesdoesn\u2019tguaranteethatallthepossiblecombinationsareavailable,orthatthey\u2019reallvisuallydistinct.\nThatdependsontheabilityoftheterminalbeingused,soit\u2019ssafesttosticktothemostcommonlyavailableattributes,\nlistedhere.\nAttribute Description\nA_BLINK Blinkingtext\nA_BOLD Extrabrightorboldtext\nA_DIM Halfbrighttext\nA_REVERSE Reverse-videotext\nA_STANDOUT Thebesthighlightingmodeavailable\nA_UNDERLINE Underlinedtext\nSo,todisplayareverse-videostatuslineonthetoplineofthescreen,youcouldcode:\nstdscr.addstr(0, 0, \"Current mode: Typing mode\",\ncurses.A_REVERSE)\nstdscr.refresh()\nThecurseslibraryalsosupportscoloronthoseterminalsthatprovideit. Themostcommonsuchterminalisprobably\ntheLinuxconsole,followedbycolorxterms.\n5\nTousecolor,youmustcallthestart_color()functionsoonaftercallinginitscr(),toinitializethedefaultcolor\nset (the curses.wrapper() function does this automatically). Once that\u2019s done, the has_colors() function\nreturns TRUE if the terminal in use can actually display color. (Note: curses uses the American spelling \u2018color\u2019,\ninsteadoftheCanadian/Britishspelling\u2018colour\u2019. Ifyou\u2019reusedtotheBritishspelling,you\u2019llhavetoresignyourself\ntomisspellingitforthesakeofthesefunctions.)\nThecurseslibrarymaintainsafinitenumberofcolorpairs,containingaforeground(ortext)colorandabackground\ncolor. Youcangettheattributevaluecorrespondingtoacolorpairwiththecolor_pair()function; thiscanbe\nbitwise-OR\u2019edwithotherattributessuchasA_REVERSE,butagain,suchcombinationsarenotguaranteedtowork\nonallterminals.\nAnexample,whichdisplaysalineoftextusingcolorpair1:\nstdscr.addstr(\"Pretty text\", curses.color_pair(1))\nstdscr.refresh()\nAsIsaidbefore,acolorpairconsistsofaforegroundandbackgroundcolor. Theinit_pair(n, f, b)function\nchangesthedefinitionofcolorpairn,toforegroundcolorfandbackgroundcolorb. Colorpair0ishard-wiredto\nwhiteonblack,andcannotbechanged.\nColorsarenumbered,andstart_color()initializes8basiccolorswhenitactivatescolormode. Theyare:0:black,\n1:red,2:green,3:yellow,4:blue,5:magenta,6:cyan,and7:white. Thecursesmoduledefinesnamedconstantsfor\neachofthesecolors: curses.COLOR_BLACK,curses.COLOR_RED,andsoforth.\nLet\u2019sputallthistogether. Tochangecolor1toredtextonawhitebackground,youwouldcall:\ncurses.init_pair(1, curses.COLOR_RED, curses.COLOR_WHITE)\nWhenyouchangeacolorpair, anytextalreadydisplayedusingthatcolorpairwillchangetothenewcolors. You\ncanalsodisplaynewtextinthiscolorwith:\nstdscr.addstr(0,0, \"RED ALERT!\", curses.color_pair(1))\nVeryfancyterminalscanchangethedefinitionsoftheactualcolorstoagivenRGBvalue. Thisletsyouchangecolor\n1,whichisusuallyred,topurpleorblueoranyothercoloryoulike. Unfortunately,theLinuxconsoledoesn\u2019tsupport\nthis,soI\u2019munabletotryitout,andcan\u2019tprovideanyexamples. Youcancheckifyourterminalcandothisbycalling\ncan_change_color(),whichreturnsTrueifthecapabilityisthere. Ifyou\u2019reluckyenoughtohavesuchatalented\nterminal,consultyoursystem\u2019smanpagesformoreinformation.\n5 User Input\nThe C curses library offers only very simple input mechanisms. Python\u2019s curses module adds a basic text-input\nwidget. (OtherlibrariessuchasUrwidhavemoreextensivecollectionsofwidgets.)\nTherearetwomethodsforgettinginputfromawindow:\n\u2022 getch()refreshesthescreenandthenwaitsfortheusertohitakey,displayingthekeyifecho()hasbeen\ncalledearlier. Youcanoptionallyspecifyacoordinatetowhichthecursorshouldbemovedbeforepausing.\n\u2022 getkey()doesthesamethingbutconvertstheintegertoastring. Individualcharactersarereturnedas1-\ncharacterstrings,andspecialkeyssuchasfunctionkeysreturnlongerstringscontainingakeynamesuchas\nKEY_UPor^G.\nIt\u2019spossibletonotwaitfortheuserusingthenodelay()windowmethod. Afternodelay(True),getch()and\ngetkey()forthewindowbecomenon-blocking. Tosignalthatnoinputisready,getch()returnscurses.ERR\n(avalueof-1)andgetkey()raisesanexception. There\u2019salsoahalfdelay()function,whichcanbeusedto(in\neffect)setatimeroneachgetch();ifnoinputbecomesavailablewithinaspecifieddelay(measuredintenthsofa\nsecond),cursesraisesanexception.\nThegetch()methodreturnsaninteger;ifit\u2019sbetween0and255,itrepresentstheASCIIcodeofthekeypressed.\nValues greater than 255 are special keys such as Page Up, Home, or the cursor keys. You can compare the value\nreturned to constants such as curses.KEY_PPAGE, curses.KEY_HOME, or curses.KEY_LEFT. The main loop\nofyourprogrammaylooksomethinglikethis:\n6\nwhile True:\nc = stdscr.getch()\nif c == ord('p'):\nPrintDocument()\nelif c == ord('q'):\nbreak # Exit the while loop\nelif c == curses.KEY_HOME:\nx = y = 0\nThecurses.asciimodulesuppliesASCIIclassmembershipfunctionsthattakeeitherintegeror1-characterstring\narguments;thesemaybeusefulinwritingmorereadabletestsforsuchloops. Italsosuppliesconversionfunctionsthat\ntakeeitherintegeror1-character-stringargumentsandreturnthesametype. Forexample,curses.ascii.ctrl()\nreturnsthecontrolcharactercorrespondingtoitsargument.\nThere\u2019salsoamethodtoretrieveanentirestring,getstr(). Itisn\u2019tusedveryoften,becauseitsfunctionalityisquite\nlimited;theonlyeditingkeysavailablearethebackspacekeyandtheEnterkey,whichterminatesthestring. Itcan\noptionallybelimitedtoafixednumberofcharacters.\ncurses.echo() # Enable echoing of characters\n# Get a 15-character string, with the cursor on the top line\ns = stdscr.getstr(0,0, 15)\nThecurses.textpadmodulesuppliesatextboxthatsupportsanEmacs-likesetofkeybindings. Variousmethods\noftheTextboxclasssupporteditingwithinputvalidationandgatheringtheeditresultseitherwithorwithouttrailing\nspaces. Here\u2019sanexample:\nimport curses\nfrom curses.textpad import Textbox, rectangle\ndef main(stdscr):\nstdscr.addstr(0, 0, \"Enter IM message: (hit Ctrl-G to send)\")\neditwin = curses.newwin(5,30, 2,1)\nrectangle(stdscr, 1,0, 1+5+1, 1+30+1)\nstdscr.refresh()\nbox = Textbox(editwin)\n# Let the user edit until Ctrl-G is struck.\nbox.edit()\n# Get resulting contents\nmessage = box.gather()\nSeethelibrarydocumentationoncurses.textpadformoredetails.\n6 For More Information\nThisHOWTOdoesn\u2019tcoversomeadvancedtopics, suchasreadingthecontentsofthescreenorcapturingmouse\neventsfromanxterminstance,butthePythonlibrarypageforthecursesmoduleisnowreasonablycomplete. You\nshouldbrowseitnext.\nIf you\u2019re in doubt about the detailed behavior of the curses functions, consult the manual pages for your curses\nimplementation, whether it\u2019s ncursesor a proprietaryUnix vendor\u2019s. The manual pageswill document anyquirks,\nandprovidecompletelistsofallthefunctions,attributes,andACS_*charactersavailabletoyou.\nBecausethecursesAPIissolarge,somefunctionsaren\u2019tsupportedinthePythoninterface. Oftenthisisn\u2019tbecause\nthey\u2019redifficulttoimplement,butbecausenoonehasneededthemyet. Also,Pythondoesn\u2019tyetsupportthemenu\n7\nlibrary associated with ncurses. Patches adding support for these would be welcome; see the Python Developer\u2019s\nGuidetolearnmoreaboutsubmittingpatchestoPython.\n\u2022 WritingProgramswithNCURSES:alengthytutorialforCprogrammers.\n\u2022 Thencursesmanpage\n\u2022 ThencursesFAQ\n\u2022 \u201cUsecurses\u2026don\u2019tswear\u201d: videoofaPyCon2013talkoncontrollingterminalsusingcursesorUrwid.\n\u2022 \u201cConsoleApplicationswithUrwid\u201d: videoofaPyConCA2012talkdemonstratingsomeapplicationswritten\nusingUrwid.\n8\n",
  "context": "Thisdocumentdescribeshowtousethecursesextensionmoduletocontroltext-modedisplays.\n1 What is curses?\nThecurseslibrarysuppliesaterminal-independentscreen-paintingandkeyboard-handlingfacilityfortext-basedter-",
  "source_file": "resources\\Year 3\\Python\\howto-curses.pdf",
  "line_numbers": [
    24,
    311
  ]
}