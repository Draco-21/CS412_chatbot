{
  "title": "c-api",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "5.11 StandardWarningCategories .",
  "code": "6.2 SystemFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n6.3 ProcessControl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\n6.4 ImportingModules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n6.5 Datamarshallingsupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n6.6 Parsingargumentsandbuildingvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\ni\n6.6.1 Parsingarguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n6.6.2 Buildingvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n6.7 Stringconversionandformatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n6.8 PyHashAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\n6.9 Reflection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n6.10 Codecregistryandsupportfunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n6.10.1 CodeclookupAPI. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86\n6.10.2 RegistryAPIforUnicodeencodingerrorhandlers . . . . . . . . . . . . . . . . . . . . . 86\n6.11 PyTimeCAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n6.11.1 Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n6.11.2 ClockFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n6.11.3 RawClockFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n6.11.4 Conversionfunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n6.12 SupportforPerfMaps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n7 AbstractObjectsLayer 91\n7.1 ObjectProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n7.2 CallProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\n7.2.1 Thetp_callProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\n7.2.2 TheVectorcallProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\n7.2.3 ObjectCallingAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100\n7.2.4 CallSupportAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n7.3 NumberProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\n7.4 SequenceProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106\n7.5 MappingProtocol. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n7.6 IteratorProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\n7.7 BufferProtocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\n7.7.1 Bufferstructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n7.7.2 Bufferrequesttypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n7.7.3 Complexarrays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n7.7.4 Buffer-relatedfunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n8 ConcreteObjectsLayer 117\n8.1 FundamentalObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n8.1.1 TypeObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117\n8.1.2 TheNoneObject . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n8.2 NumericObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n8.2.1 IntegerObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\n8.2.2 BooleanObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n8.2.3 Floating-PointObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n8.2.4 ComplexNumberObjects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132\n8.3 SequenceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n8.3.1 BytesObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\n8.3.2 ByteArrayObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\n8.3.3 UnicodeObjectsandCodecs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136\n8.3.4 TupleObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n8.3.5 StructSequenceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\n8.3.6 ListObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157\n8.4 ContainerObjects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159\n8.4.1 DictionaryObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159\n8.4.2 SetObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164\n8.5 FunctionObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\n8.5.1 FunctionObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165\n8.5.2 InstanceMethodObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167\n8.5.3 MethodObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168\n8.5.4 CellObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168\n8.5.5 CodeObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169\n8.5.6 Extrainformation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172\nii\n8.6 OtherObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\n8.6.1 FileObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\n8.6.2 ModuleObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174\n8.6.3 IteratorObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\n8.6.4 DescriptorObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\n8.6.5 SliceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\n8.6.6 MemoryViewobjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185\n8.6.7 WeakReferenceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185\n8.6.8 Capsules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187\n8.6.9 FrameObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\n8.6.10 GeneratorObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191\n8.6.11 CoroutineObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191\n8.6.12 ContextVariablesObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192\n8.6.13 DateTimeObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193\n8.6.14 ObjectsforTypeHinting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197\n9 Initialization,Finalization,andThreads 199\n9.1 BeforePythonInitialization. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199\n9.2 Globalconfigurationvariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200\n9.3 Initializingandfinalizingtheinterpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\n9.4 Process-wideparameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206\n9.5 ThreadStateandtheGlobalInterpreterLock . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\n9.5.1 ReleasingtheGILfromextensioncode . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\n9.5.2 Non-Pythoncreatedthreads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\n9.5.3 Cautionsaboutfork() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\n9.5.4 High-levelAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\n9.5.5 Low-levelAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\n9.6 Sub-interpretersupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\n9.6.1 APer-InterpreterGIL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218\n9.6.2 Bugsandcaveats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\n9.7 AsynchronousNotifications. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\n9.8 ProfilingandTracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220\n9.9 Referencetracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221\n9.10 AdvancedDebuggerSupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222\n9.11 ThreadLocalStorageSupport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222\n9.11.1 ThreadSpecificStorage(TSS)API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223\n9.11.2 ThreadLocalStorage(TLS)API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224\n9.12 SynchronizationPrimitives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225\n9.12.1 PythonCriticalSectionAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225\n10 PythonInitializationConfiguration 227\n10.1 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227\n10.2 PyWideStringList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228\n10.3 PyStatus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228\n10.4 PyPreConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230\n10.5 PreinitializePythonwithPyPreConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231\n10.6 PyConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232\n10.7 InitializationwithPyConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243\n10.8 IsolatedConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n10.9 PythonConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n10.10 PythonPathConfiguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\n10.11 Py_GetArgcArgv() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246\n10.12 Multi-PhaseInitializationPrivateProvisionalAPI . . . . . . . . . . . . . . . . . . . . . . . . . . 247\n11 MemoryManagement 249\n11.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249\n11.2 AllocatorDomains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250\n11.3 RawMemoryInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250\n11.4 MemoryInterface. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251\niii\n11.5 Objectallocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252\n11.6 DefaultMemoryAllocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253\n11.7 CustomizeMemoryAllocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254\n11.8 DebughooksonthePythonmemoryallocators . . . . . . . . . . . . . . . . . . . . . . . . . . . 255\n11.9 Thepymallocallocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\n11.9.1 CustomizepymallocArenaAllocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\n11.10 Themimallocallocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\n11.11 tracemallocCAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257\n11.12 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258\n12 ObjectImplementationSupport 259\n12.1 AllocatingObjectsontheHeap. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259\n12.2 CommonObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260\n12.2.1 Baseobjecttypesandmacros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260\n12.2.2 Implementingfunctionsandmethods . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261\n12.2.3 Accessingattributesofextensiontypes . . . . . . . . . . . . . . . . . . . . . . . . . . . 265\n12.3 TypeObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268\n12.3.1 QuickReference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269\n12.3.2 PyTypeObjectDefinition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273\n12.3.3 PyObjectSlots. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274\n12.3.4 PyVarObjectSlots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275\n12.3.5 PyTypeObjectSlots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275\n12.3.6 StaticTypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294\n12.3.7 HeapTypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295\n12.3.8 NumberObjectStructures. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295\n12.3.9 MappingObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297\n12.3.10 SequenceObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297\n12.3.11 BufferObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298\n12.3.12 AsyncObjectStructures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299\n12.3.13 SlotTypetypedefs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300\n12.3.14 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301\n12.4 SupportingCyclicGarbageCollection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304\n12.4.1 ControllingtheGarbageCollectorState. . . . . . . . . . . . . . . . . . . . . . . . . . . 306\n12.4.2 QueryingGarbageCollectorState. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307\n13 APIandABIVersioning 309\n14 MonitoringCAPI 311\n15 GeneratingExecutionEvents 313\n15.1 ManagingtheMonitoringState . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314\nA Glossary 317\nB Aboutthisdocumentation 335\nB.1 ContributorstothePythondocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335\nC HistoryandLicense 337\nC.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337\nC.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 338\nC.2.1 PYTHONSOFTWAREFOUNDATIONLICENSEVERSION2 . . . . . . . . . . . . . 338\nC.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 339\nC.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 339\nC.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 340\nC.2.5 ZERO-CLAUSEBSDLICENSEFORCODEINTHEPYTHONDOCUMENTATION . 341\nC.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 341\nC.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341\nC.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342\nC.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343\niv\nC.3.4 Cookiemanagement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343\nC.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343\nC.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 344\nC.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345\nC.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345\nC.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346\nC.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346\nC.3.11 strtodanddtoa. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347\nC.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347\nC.3.13 expat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350\nC.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351\nC.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351\nC.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352\nC.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352\nC.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353\nC.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354\nC.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354\nC.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354\nD Copyright 357\nIndex 359\nv\nvi\nThePython/CAPI,Release3.13.3\nThismanualdocumentstheAPIusedbyCandC++programmerswhowanttowriteextensionmodulesorembed\nPython. Itisacompaniontoextending-index,whichdescribesthegeneralprinciplesofextensionwritingbutdoes\nnotdocumenttheAPIfunctionsindetail.\nCONTENTS 1\nThePython/CAPI,Release3.13.3\n2 CONTENTS\nCHAPTER\nONE\nINTRODUCTION\nTheApplicationProgrammer\u2019sInterfacetoPythongivesCandC++programmersaccesstothePythoninterpreter\natavarietyoflevels. TheAPIisequallyusablefromC++,butforbrevityitisgenerallyreferredtoasthePython/C\nAPI.TherearetwofundamentallydifferentreasonsforusingthePython/CAPI.Thefirstreasonistowriteextension\nmodules for specific purposes; these are C modules that extend the Python interpreter. This is probably the most\ncommonuse. ThesecondreasonistousePythonasacomponentinalargerapplication;thistechniqueisgenerally\nreferredtoasembeddingPythoninanapplication.\nWritinganextensionmoduleisarelativelywell-understoodprocess,wherea\u201ccookbook\u201dapproachworkswell. There\nareseveraltoolsthatautomatetheprocesstosomeextent. WhilepeoplehaveembeddedPythoninotherapplications\nsinceitsearlyexistence,theprocessofembeddingPythonislessstraightforwardthanwritinganextension.\nMany API functions are useful independent of whether you\u2019re embedding or extending Python; moreover, most\napplications that embed Python will need to provide a custom extension as well, so it\u2019s probably a good idea to\nbecomefamiliarwithwritinganextensionbeforeattemptingtoembedPythoninarealapplication.\n1.1 Coding standards\nIfyou\u2019rewritingCcodeforinclusioninCPython,youmustfollowtheguidelinesandstandardsdefinedinPEP7.\nTheseguidelinesapplyregardlessoftheversionofPythonyouarecontributingto. Followingtheseconventionsis\nnotnecessaryforyourownthirdpartyextensionmodules,unlessyoueventuallyexpecttocontributethemtoPython.\n1.2 Include Files\nAllfunction,typeandmacrodefinitionsneededtousethePython/CAPIareincludedinyourcodebythefollowing\nline:\n#define PY_SSIZE_T_CLEAN\n#include <Python.h>\nThisimpliesinclusionofthefollowingstandardheaders: <stdio.h>,<string.h>,<errno.h>,<limits.h>,\n<assert.h>and<stdlib.h>(ifavailable).\n(cid:174) Note\nSincePythonmaydefinesomepre-processordefinitionswhichaffectthestandardheadersonsomesystems,you\nmustincludePython.hbeforeanystandardheadersareincluded.\nItisrecommendedtoalwaysdefinePY_SSIZE_T_CLEANbeforeincludingPython.h. SeeParsingarguments\nandbuildingvaluesforadescriptionofthismacro.\nAlluservisiblenamesdefinedbyPython.h(exceptthosedefinedbytheincludedstandardheaders)haveoneofthe\nprefixesPyor_Py. Namesbeginningwith_PyareforinternalusebythePythonimplementationandshouldnotbe\nusedbyextensionwriters. Structuremembernamesdonothaveareservedprefix.\n3\nThePython/CAPI,Release3.13.3\n(cid:174) Note\nUsercodeshouldneverdefinenamesthatbeginwithPyor_Py. Thisconfusesthereader,andjeopardizesthe\nportabilityoftheusercodetofuturePythonversions,whichmaydefineadditionalnamesbeginningwithoneof\ntheseprefixes.\nTheheaderfilesaretypicallyinstalledwithPython. OnUnix,thesearelocatedinthedirectoriesprefix/include/\npythonversion/ and exec_prefix/include/pythonversion/, where prefix and exec_prefix are\ndefined by the corresponding parameters to Python\u2019s configure script and version is '%d.%d' % sys.\nversion_info[:2]. OnWindows,theheadersareinstalledinprefix/include,whereprefixistheinstalla-\ntiondirectoryspecifiedtotheinstaller.\nToincludetheheaders,placebothdirectories(ifdifferent)onyourcompiler\u2019ssearchpathforincludes. Donotplace\nthe parent directories on the search path and then use #include <pythonX.Y/Python.h>; this will break on\nmulti-platform builds since the platform independent headers under prefix include the platform specific headers\nfromexec_prefix.\nC++usersshouldnotethatalthoughtheAPIisdefinedentirelyusingC,theheaderfilesproperlydeclaretheentry\npointstobeextern \"C\". Asaresult,thereisnoneedtodoanythingspecialtousetheAPIfromC++.\n1.3 Useful macros\nSeveralusefulmacrosaredefinedinthePythonheaderfiles. Manyaredefinedclosertowheretheyareuseful(e.g.\nPy_RETURN_NONE).Othersofamoregeneralutilityaredefinedhere. Thisisnotnecessarilyacompletelisting.\nPyMODINIT_FUNC\nDeclare an extension module PyInit initialization function. The function return type is PyObject*. The\nmacrodeclaresanyspeciallinkagedeclarationsrequiredbytheplatform,andforC++declaresthefunctionas\nextern \"C\".\nTheinitializationfunctionmustbenamedPyInit_name,wherenameisthenameofthemodule,andshould\nbetheonlynon-staticitemdefinedinthemodulefile. Example:\nstatic struct PyModuleDef spam_module = {\nPyModuleDef_HEAD_INIT,\n.m_name = \"spam\",\n...\n};\nPyMODINIT_FUNC\nPyInit_spam(void)\n{\nreturn PyModule_Create(&spam_module);\n}\nPy_ABS(x)\nReturntheabsolutevalueofx.\nAddedinversion3.3.\nPy_ALWAYS_INLINE\nAskthecompilertoalwaysinlineastaticinlinefunction. Thecompilercanignoreitanddecidetonotinline\nthefunction.\nItcanbeusedtoinlineperformancecriticalstaticinlinefunctionswhenbuildingPythonindebugmodewith\nfunctioninliningdisabled. Forexample,MSCdisablesfunctioninliningwhenbuildingindebugmode.\nMarking blindly a static inline function with Py_ALWAYS_INLINE can result in worse performances (due\nto increasedcode sizefor example). Thecompiler isusuallysmarter thanthe developerfor thecost/benefit\nanalysis.\n4 Chapter1. Introduction\nThePython/CAPI,Release3.13.3\nIfPythonisbuiltindebugmode(ifthePy_DEBUG macroisdefined),thePy_ALWAYS_INLINEmacrodoes\nnothing.\nItmustbespecifiedbeforethefunctionreturntype. Usage:\nstatic inline Py_ALWAYS_INLINE int random(void) { return 4; }\nAddedinversion3.11.\nPy_CHARMASK(c)\nArgumentmustbeacharacteroranintegerintherange[-128,127]or[0,255]. Thismacroreturnsccastto\nanunsigned char.\nPy_DEPRECATED(version)\nUsethisfordeprecateddeclarations. Themacromustbeplacedbeforethesymbolname.\nExample:\nPy_DEPRECATED(3.8) PyAPI_FUNC(int) Py_OldFunction(void);\nChangedinversion3.8: MSVCsupportwasadded.\nPy_GETENV(s)\nLike getenv(s), but returns NULL if -E was passed on the command line (see PyConfig.\nuse_environment).\nPy_MAX(x,y)\nReturnthemaximumvaluebetweenxandy.\nAddedinversion3.3.\nPy_MEMBER_SIZE(type,member)\nReturnthesizeofastructure(type)memberinbytes.\nAddedinversion3.6.\nPy_MIN(x,y)\nReturntheminimumvaluebetweenxandy.\nAddedinversion3.3.\nPy_NO_INLINE\nDisableinliningonafunction. Forexample,itreducestheCstackconsumption: usefulonLTO+PGObuilds\nwhichheavilyinlinecode(seebpo-33720).\nUsage:\nPy_NO_INLINE static int random(void) { return 4; }\nAddedinversion3.11.\nPy_STRINGIFY(x)\nConvertxtoaCstring. E.g. Py_STRINGIFY(123)returns\"123\".\nAddedinversion3.4.\nPy_UNREACHABLE()\nUsethiswhenyouhaveacodepaththatcannotbereachedbydesign. Forexample,inthedefault: clause\ninaswitchstatementforwhichallpossiblevaluesarecoveredincasestatements. Usethisinplaceswhere\nyoumightbetemptedtoputanassert(0)orabort()call.\nInreleasemode,themacrohelpsthecompilertooptimizethecode,andavoidsawarningaboutunreachable\ncode. Forexample,themacroisimplementedwith__builtin_unreachable()onGCCinreleasemode.\nA use for Py_UNREACHABLE() is following a call a function that never returns but that is not declared\n_Py_NO_RETURN.\n1.3. Usefulmacros 5\nThePython/CAPI,Release3.13.3\nIfacodepathisveryunlikelycodebutcanbereachedunderexceptionalcase,thismacromustnotbeused.\nForexample,underlowmemoryconditionorifasystemcallreturnsavalueoutoftheexpectedrange. Inthis\ncase,it\u2019sbettertoreporttheerrortothecaller. Iftheerrorcannotbereportedtocaller,Py_FatalError()\ncanbeused.\nAddedinversion3.7.\nPy_UNUSED(arg)\nUsethisforunusedargumentsinafunctiondefinitiontosilencecompilerwarnings. Example:int func(int\na, int Py_UNUSED(b)) { return a; }.\nAddedinversion3.4.\nPyDoc_STRVAR(name,str)\nCreatesavariablewithnamenamethatcanbeusedindocstrings. IfPythonisbuiltwithoutdocstrings,the\nvaluewillbeempty.\nUsePyDoc_STRVARfordocstringstosupportbuildingPythonwithoutdocstrings,asspecifiedinPEP7.\nExample:\nPyDoc_STRVAR(pop_doc, \"Remove and return the rightmost element.\");\nstatic PyMethodDef deque_methods[] = {\n// ...\n{\"pop\", (PyCFunction)deque_pop, METH_NOARGS, pop_doc},\n// ...\n}\nPyDoc_STR(str)\nCreatesadocstringforthegiveninputstringoranemptystringifdocstringsaredisabled.\nUsePyDoc_STRinspecifyingdocstringstosupportbuildingPythonwithoutdocstrings,asspecifiedinPEP\n7.\nExample:\nstatic PyMethodDef pysqlite_row_methods[] = {\n{\"keys\", (PyCFunction)pysqlite_row_keys, METH_NOARGS,\nPyDoc_STR(\"Returns the keys of the row.\")},\n{NULL, NULL}\n};\n1.4 Objects, Types and Reference Counts\nMostPython/CAPIfunctionshaveoneormoreargumentsaswellasareturnvalueoftypePyObject*. Thistype\nisapointertoanopaquedatatyperepresentinganarbitraryPythonobject. SinceallPythonobjecttypesaretreated\nthe same way by the Python language in most situations (e.g., assignments, scope rules, and argument passing), it\nis only fitting that they should be represented by a single C type. Almost all Python objects live on the heap: you\nneverdeclareanautomaticorstaticvariableoftypePyObject,onlypointervariablesoftypePyObject*canbe\ndeclared. The sole exception are the type objects; since these must never be deallocated, they are typically static\nPyTypeObjectobjects.\nAllPythonobjects(evenPythonintegers)haveatypeandareferencecount. Anobject\u2019stypedetermineswhatkind\nofobjectitis(e.g.,aninteger,alist,orauser-definedfunction;therearemanymoreasexplainedintypes). Foreach\nofthewell-knowntypesthereisamacrotocheckwhetheranobjectisofthattype;forinstance,PyList_Check(a)\nistrueif(andonlyif)theobjectpointedtobyaisaPythonlist.\n6 Chapter1. Introduction\nThePython/CAPI,Release3.13.3\n1.4.1 Reference Counts\nThereferencecountisimportantbecausetoday\u2019scomputershaveafinite(andoftenseverelylimited)memorysize;\nitcountshowmanydifferentplacestherearethathaveastrongreferencetoanobject. Suchaplacecouldbeanother\nobject,oraglobal(orstatic)Cvariable,oralocalvariableinsomeCfunction. Whenthelaststrongreferencetoan\nobjectisreleased(i.e. itsreferencecountbecomeszero),theobjectisdeallocated. Ifitcontainsreferencestoother\nobjects,thosereferencesarereleased. Thoseotherobjectsmaybedeallocatedinturn,iftherearenomorereferences\ntothem,andsoon. (There\u2019sanobviousproblemwithobjectsthatreferenceeachotherhere;fornow,thesolutionis\n\u201cdon\u2019tdothat.\u201d)\nReferencecountsarealwaysmanipulatedexplicitly. ThenormalwayistousethemacroPy_INCREF()totakeanew\nreferencetoanobject(i.e. incrementitsreferencecountbyone),andPy_DECREF()toreleasethatreference(i.e.\ndecrementthereferencecountbyone). ThePy_DECREF()macroisconsiderablymorecomplexthantheincrefone,\nsinceitmustcheckwhetherthereferencecountbecomeszeroandthencausetheobject\u2019sdeallocatortobecalled. The\ndeallocatorisafunctionpointercontainedintheobject\u2019stypestructure. Thetype-specificdeallocatortakescareof\nreleasingreferencesforotherobjectscontainedintheobjectifthisisacompoundobjecttype,suchasalist,aswellas\nperforminganyadditionalfinalizationthat\u2019sneeded. There\u2019snochancethatthereferencecountcanoverflow;atleast\nasmanybitsareusedtoholdthereferencecountastherearedistinctmemorylocationsinvirtualmemory(assuming\nsizeof(Py_ssize_t) >= sizeof(void*)). Thus,thereferencecountincrementisasimpleoperation.\nItisnotnecessarytoholdastrongreference(i.e. incrementthereferencecount)foreverylocalvariablethatcontains\napointertoanobject. Intheory,theobject\u2019sreferencecountgoesupbyonewhenthevariableismadetopointto\nitanditgoesdownbyonewhenthevariablegoesoutofscope. However,thesetwocanceleachotherout,soatthe\nendthereferencecounthasn\u2019tchanged. Theonlyrealreasontousethereferencecountistopreventtheobjectfrom\nbeingdeallocatedaslongasourvariableispointingtoit. Ifweknowthatthereisatleastoneotherreferencetothe\nobjectthatlivesatleastaslongasourvariable, thereisnoneedtotakeanew strongreference(i.e. incrementthe\nreferencecount)temporarily. Animportantsituationwherethisarisesisinobjectsthatarepassedasargumentsto\nCfunctionsinanextensionmodulethatarecalledfromPython;thecallmechanismguaranteestoholdareference\ntoeveryargumentforthedurationofthecall.\nHowever, a common pitfall is to extract an object from a list and hold on to it for a while without taking a new\nreference. Some other operation might conceivably remove the object from the list, releasing that reference, and\npossiblydeallocatingit. Therealdangeristhatinnocent-lookingoperationsmayinvokearbitraryPythoncodewhich\ncoulddothis;thereisacodepathwhichallowscontroltoflowbacktotheuserfromaPy_DECREF(),soalmostany\noperationispotentiallydangerous.\nAsafeapproachistoalwaysusethegenericoperations(functionswhosenamebeginswithPyObject_,PyNumber_,\nPySequence_orPyMapping_). Theseoperationsalwayscreateanewstrongreference(i.e. incrementthereference\ncount)oftheobjecttheyreturn. ThisleavesthecallerwiththeresponsibilitytocallPy_DECREF()whentheyare\ndonewiththeresult;thissoonbecomessecondnature.\nReferenceCountDetails\nThereferencecountbehavioroffunctionsinthePython/CAPIisbestexplainedintermsofownershipofreferences.\nOwnership pertains to references, never to objects (objects are not owned: they are always shared). \u201cOwning a\nreference\u201dmeansbeingresponsibleforcallingPy_DECREFonitwhenthereferenceisnolongerneeded. Ownership\ncanalsobetransferred,meaningthatthecodethatreceivesownershipofthereferencethenbecomesresponsiblefor\neventuallyreleasingitbycallingPy_DECREF()orPy_XDECREF()whenit\u2019snolongerneeded\u2014orpassingonthis\nresponsibility (usually to its caller). When a function passes ownership of a reference on to its caller, the caller is\nsaidtoreceiveanewreference. Whennoownershipistransferred,thecallerissaidtoborrowthereference. Nothing\nneedstobedoneforaborrowedreference.\nConversely,whenacallingfunctionpassesinareferencetoanobject,therearetwopossibilities: thefunctionsteals\nareferencetotheobject,oritdoesnot. Stealingareferencemeansthatwhenyoupassareferencetoafunction,that\nfunctionassumesthatitnowownsthatreference,andyouarenotresponsibleforitanylonger.\nFew functions steal references; the two notable exceptions are PyList_SetItem() and PyTuple_SetItem(),\nwhich steal a reference to the item (but not to the tuple or list into which the item is put!). These functions were\ndesignedtostealareferencebecauseofacommonidiomforpopulatingatupleorlistwithnewlycreatedobjects;for\nexample, thecodetocreatethetuple(1, 2, \"three\")couldlooklikethis(forgettingabouterrorhandlingfor\nthemoment;abetterwaytocodethisisshownbelow):\n1.4. Objects,TypesandReferenceCounts 7\nThePython/CAPI,Release3.13.3\nPyObject *t;\nt = PyTuple_New(3);\nPyTuple_SetItem(t, 0, PyLong_FromLong(1L));\nPyTuple_SetItem(t, 1, PyLong_FromLong(2L));\nPyTuple_SetItem(t, 2, PyUnicode_FromString(\"three\"));\nHere,PyLong_FromLong()returnsanewreferencewhichisimmediatelystolenbyPyTuple_SetItem(). When\nyou want to keep using an object although the reference to it will be stolen, use Py_INCREF() to grab another\nreferencebeforecallingthereference-stealingfunction.\nIncidentally, PyTuple_SetItem() is the only way to set tuple items; PySequence_SetItem() and\nPyObject_SetItem() refuse to do this since tuples are an immutable data type. You should only use\nPyTuple_SetItem()fortuplesthatyouarecreatingyourself.\nEquivalentcodeforpopulatingalistcanbewrittenusingPyList_New()andPyList_SetItem().\nHowever, in practice, you will rarely use these ways of creating and populating a tuple or list. There\u2019s a generic\nfunction, Py_BuildValue(), that can create most common objects from C values, directed by a format string.\nForexample, theabovetwoblocksofcodecouldbe replacedbythefollowing(whichalsotakescareoftheerror\nchecking):\nPyObject *tuple, *list;\ntuple = Py_BuildValue(\"(iis)\", 1, 2, \"three\");\nlist = Py_BuildValue(\"[iis]\", 1, 2, \"three\");\nIt is much more common to use PyObject_SetItem() and friends with items whose references you are only\nborrowing,likeargumentsthatwerepassedintothefunctionyouarewriting. Inthatcase,theirbehaviourregarding\nreferencesismuchsaner,sinceyoudon\u2019thavetotakeanewreferencejustsoyoucangivethatreferenceaway(\u201chave\nitbestolen\u201d). Forexample,thisfunctionsetsallitemsofalist(actually,anymutablesequence)toagivenitem:\nint\nset_all(PyObject *target, PyObject *item)\n{\nPy_ssize_t i, n;\nn = PyObject_Length(target);\nif (n < 0)\nreturn -1;\nfor (i = 0; i < n; i++) {\nPyObject *index = PyLong_FromSsize_t(i);\nif (!index)\nreturn -1;\nif (PyObject_SetItem(target, index, item) < 0) {\nPy_DECREF(index);\nreturn -1;\n}\nPy_DECREF(index);\n}\nreturn 0;\n}\nThe situation is slightly different for function return values. While passing a reference to most functions does not\nchangeyourownershipresponsibilitiesforthatreference,manyfunctionsthatreturnareferencetoanobjectgiveyou\nownershipofthereference. Thereasonissimple: inmanycases, thereturnedobjectiscreatedonthefly, andthe\nreferenceyougetistheonlyreferencetotheobject. Therefore,thegenericfunctionsthatreturnobjectreferences,\nlikePyObject_GetItem()andPySequence_GetItem(),alwaysreturnanewreference(thecallerbecomesthe\nownerofthereference).\n8 Chapter1. Introduction\nThePython/CAPI,Release3.13.3\nItisimportanttorealizethatwhetheryouownareferencereturnedbyafunctiondependsonwhichfunctionyoucall\nonly\u2014theplumage(thetypeoftheobjectpassedasanargumenttothefunction)doesn\u2019tenterintoit! Thus,ifyou\nextractanitemfromalistusingPyList_GetItem(), youdon\u2019townthereference\u2014butifyouobtainthesame\nitemfromthesamelistusingPySequence_GetItem()(whichhappenstotakeexactlythesamearguments),you\ndoownareferencetothereturnedobject.\nHereisanexampleofhowyoucouldwriteafunctionthatcomputesthesumoftheitemsinalistofintegers;once\nusingPyList_GetItem(),andonceusingPySequence_GetItem().\nlong\nsum_list(PyObject *list)\n{\nPy_ssize_t i, n;\nlong total = 0, value;\nPyObject *item;\nn = PyList_Size(list);\nif (n < 0)\nreturn -1; /* Not a list */\nfor (i = 0; i < n; i++) {\nitem = PyList_GetItem(list, i); /* Can't fail */\nif (!PyLong_Check(item)) continue; /* Skip non-integers */\nvalue = PyLong_AsLong(item);\nif (value == -1 && PyErr_Occurred())\n/* Integer too big to fit in a C long, bail out */\nreturn -1;\ntotal += value;\n}\nreturn total;\n}\nlong\nsum_sequence(PyObject *sequence)\n{\nPy_ssize_t i, n;\nlong total = 0, value;\nPyObject *item;\nn = PySequence_Length(sequence);\nif (n < 0)\nreturn -1; /* Has no length */\nfor (i = 0; i < n; i++) {\nitem = PySequence_GetItem(sequence, i);\nif (item == NULL)\nreturn -1; /* Not a sequence, or other failure */\nif (PyLong_Check(item)) {\nvalue = PyLong_AsLong(item);\nPy_DECREF(item);\nif (value == -1 && PyErr_Occurred())\n/* Integer too big to fit in a C long, bail out */\nreturn -1;\ntotal += value;\n}\nelse {\nPy_DECREF(item); /* Discard reference ownership */\n}\n}\nreturn total;\n}\n1.4. Objects,TypesandReferenceCounts 9\nThePython/CAPI,Release3.13.3\n1.4.2 Types\nTherearefewotherdatatypesthatplayasignificantroleinthePython/CAPI;mostaresimpleCtypessuchasint,\nlong,doubleandchar*. Afewstructuretypesareusedtodescribestatictablesusedtolistthefunctionsexported\nbyamoduleorthedataattributesofanewobjecttype,andanotherisusedtodescribethevalueofacomplexnumber.\nThesewillbediscussedtogetherwiththefunctionsthatusethem.\ntypePy_ssize_t\nPart of the Stable ABI. A signed integral type such that sizeof(Py_ssize_t) == sizeof(size_t).\nC99 doesn\u2019t define such a thing directly (size_t is an unsigned integral type). See PEP 353 for details.\nPY_SSIZE_T_MAXisthelargestpositivevalueoftypePy_ssize_t.\n1.5 Exceptions\nThePythonprogrammeronlyneedstodealwithexceptionsifspecificerrorhandlingisrequired;unhandledexcep-\ntionsareautomaticallypropagatedto thecaller, thento thecaller\u2019scaller, andso on, untiltheyreachthetop-level\ninterpreter,wheretheyarereportedtotheuseraccompaniedbyastacktraceback.\nForCprogrammers,however,errorcheckingalwayshastobeexplicit. AllfunctionsinthePython/CAPIcanraise\nexceptions, unless an explicit claim is made otherwise in a function\u2019s documentation. In general, when a function\nencountersanerror,itsetsanexception,discardsanyobjectreferencesthatitowns,andreturnsanerrorindicator.\nIf not documented otherwise, this indicator is either NULL or -1, depending on the function\u2019s return type. A few\nfunctionsreturnaBooleantrue/falseresult,withfalseindicatinganerror. Veryfewfunctionsreturnnoexpliciterror\nindicatororhaveanambiguousreturnvalue,andrequireexplicittestingforerrorswithPyErr_Occurred(). These\nexceptionsarealwaysexplicitlydocumented.\nExceptionstateismaintainedinper-threadstorage(thisisequivalenttousingglobalstorageinanunthreadedappli-\ncation). Athreadcanbeinoneoftwostates: anexceptionhasoccurred,ornot. ThefunctionPyErr_Occurred()\ncan be used to check for this: it returns a borrowed reference to the exception type object when an exception has\noccurred,andNULLotherwise. Thereareanumberoffunctionstosettheexceptionstate: PyErr_SetString()\nisthemostcommon(thoughnotthemostgeneral)functiontosettheexceptionstate,andPyErr_Clear()clears\ntheexceptionstate.\nThefullexceptionstateconsistsofthreeobjects(allofwhichcanbeNULL):theexceptiontype,thecorresponding\nexception value, and the traceback. These have the same meanings as the Python result of sys.exc_info();\nhowever,theyarenotthesame: thePythonobjectsrepresentthelastexceptionbeinghandledbyaPythontry\u2026\nexcept statement, while the C level exception state only exists while an exception is being passed on between C\nfunctions until it reaches the Python bytecode interpreter\u2019s main loop, which takes care of transferring it to sys.\nexc_info()andfriends.\nNote that starting with Python 1.5, the preferred, thread-safe way to access the exception state from Python code\nistocallthefunctionsys.exc_info(), whichreturnstheper-threadexceptionstateforPythoncode. Also, the\nsemanticsofbothwaystoaccesstheexceptionstatehavechangedsothatafunctionwhichcatchesanexceptionwill\nsaveandrestoreitsthread\u2019sexceptionstatesoastopreservetheexceptionstateofitscaller. Thispreventscommon\nbugsinexceptionhandlingcodecausedbyaninnocent-lookingfunctionoverwritingtheexceptionbeinghandled;it\nalsoreducestheoftenunwantedlifetimeextensionforobjectsthatarereferencedbythestackframesinthetraceback.\nAsageneralprinciple,afunctionthatcallsanotherfunctiontoperformsometaskshouldcheckwhetherthecalled\nfunctionraisedanexception,andifso,passtheexceptionstateontoitscaller. Itshoulddiscardanyobjectreferences\nthatitowns,andreturnanerrorindicator,butitshouldnotsetanotherexception\u2014thatwouldoverwritetheexception\nthatwasjustraised,andloseimportantinformationabouttheexactcauseoftheerror.\nAsimpleexampleofdetectingexceptionsandpassingthemonisshowninthesum_sequence()exampleabove.\nItsohappensthatthisexampledoesn\u2019tneedtocleanupanyownedreferenceswhenitdetectsanerror. Thefollowing\nexample function shows some error cleanup. First, to remind you why you like Python, we show the equivalent\nPythoncode:\ndef incr_item(dict, key):\ntry:\nitem = dict[key]\n(continuesonnextpage)\n10 Chapter1. Introduction\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nexcept KeyError:\nitem = 0\ndict[key] = item + 1\nHereisthecorrespondingCcode,inallitsglory:\nint\nincr_item(PyObject *dict, PyObject *key)\n{\n/* Objects all initialized to NULL for Py_XDECREF */\nPyObject *item = NULL, *const_one = NULL, *incremented_item = NULL;\nint rv = -1; /* Return value initialized to -1 (failure) */\nitem = PyObject_GetItem(dict, key);\nif (item == NULL) {\n/* Handle KeyError only: */\nif (!PyErr_ExceptionMatches(PyExc_KeyError))\ngoto error;\n/* Clear the error and use zero: */\nPyErr_Clear();\nitem = PyLong_FromLong(0L);\nif (item == NULL)\ngoto error;\n}\nconst_one = PyLong_FromLong(1L);\nif (const_one == NULL)\ngoto error;\nincremented_item = PyNumber_Add(item, const_one);\nif (incremented_item == NULL)\ngoto error;\nif (PyObject_SetItem(dict, key, incremented_item) < 0)\ngoto error;\nrv = 0; /* Success */\n/* Continue with cleanup code */\nerror:\n/* Cleanup code, shared by success and failure path */\n/* Use Py_XDECREF() to ignore NULL references */\nPy_XDECREF(item);\nPy_XDECREF(const_one);\nPy_XDECREF(incremented_item);\nreturn rv; /* -1 for error, 0 for success */\n}\nThis example represents an endorsed use of the goto statement in C! It illustrates the use of\nPyErr_ExceptionMatches()andPyErr_Clear()tohandlespecificexceptions,andtheuseofPy_XDECREF()\nto dispose of owned references that may be NULL (note the 'X' in the name; Py_DECREF() would crash when\nconfrontedwithaNULLreference). Itisimportantthatthevariablesusedtoholdownedreferencesareinitializedto\nNULLforthistowork;likewise,theproposedreturnvalueisinitializedto-1(failure)andonlysettosuccessafter\nthefinalcallmadeissuccessful.\n1.5. Exceptions 11\nThePython/CAPI,Release3.13.3\n1.6 Embedding Python\nTheoneimportanttaskthatonlyembedders(asopposedtoextensionwriters)ofthePythoninterpreterhavetoworry\naboutistheinitialization,andpossiblythefinalization,ofthePythoninterpreter. Mostfunctionalityoftheinterpreter\ncanonlybeusedaftertheinterpreterhasbeeninitialized.\nThebasicinitializationfunctionisPy_Initialize(). Thisinitializesthetableofloadedmodules,andcreatesthe\nfundamentalmodulesbuiltins,__main__,andsys. Italsoinitializesthemodulesearchpath(sys.path).\nPy_Initialize()doesnotsetthe\u201cscriptargumentlist\u201d(sys.argv). IfthisvariableisneededbyPythoncodethat\nwillbeexecutedlater,settingPyConfig.argvandPyConfig.parse_argvmustbeset: seePythonInitialization\nConfiguration.\nOn most systems (in particular, on Unix and Windows, although the details are slightly different),\nPy_Initialize() calculates the module search path based upon its best guess for the location of the standard\nPython interpreter executable, assuming that the Python library is found in a fixed location relative to the Python\ninterpreterexecutable. Inparticular,itlooksforadirectorynamedlib/pythonX.Yrelativetotheparentdirectory\nwheretheexecutablenamedpythonisfoundontheshellcommandsearchpath(theenvironmentvariablePATH).\nForinstance,ifthePythonexecutableisfoundin/usr/local/bin/python,itwillassumethatthelibrariesarein\n/usr/local/lib/pythonX.Y.(Infact,thisparticularpathisalsothe\u201cfallback\u201dlocation,usedwhennoexecutable\nfilenamedpythonisfoundalongPATH.)Theusercanoverridethisbehaviorbysettingtheenvironmentvariable\nPYTHONHOME,orinsertadditionaldirectoriesinfrontofthestandardpathbysettingPYTHONPATH.\nThe embedding application can steer the search by setting PyConfig.program_name before calling\nPy_InitializeFromConfig(). Note that PYTHONHOME still overrides this and PYTHONPATH is still inserted\nin front of the standard path. An application that requires total control has to provide its own implementation of\nPy_GetPath(),Py_GetPrefix(),Py_GetExecPrefix(),andPy_GetProgramFullPath()(alldefinedin\nModules/getpath.c).\nSometimes,itisdesirableto\u201cuninitialize\u201dPython. Forinstance,theapplicationmaywanttostartover(makeanother\ncalltoPy_Initialize())ortheapplicationissimplydonewithitsuseofPythonandwantstofreememoryallo-\ncatedbyPython. ThiscanbeaccomplishedbycallingPy_FinalizeEx(). ThefunctionPy_IsInitialized()\nreturnstrueifPythoniscurrentlyintheinitializedstate. Moreinformationaboutthesefunctionsisgiveninalater\nchapter. NoticethatPy_FinalizeEx()doesnotfreeallmemoryallocatedbythePythoninterpreter,e.g. memory\nallocatedbyextensionmodulescurrentlycannotbereleased.\n1.7 Debugging Builds\nPython can be built with several macros to enable extra checks of the interpreter and extension modules. These\ncheckstendtoaddalargeamountofoverheadtotheruntimesotheyarenotenabledbydefault.\nAfulllistofthevarioustypesofdebuggingbuildsisinthefileMisc/SpecialBuilds.txtinthePythonsource\ndistribution. Buildsareavailablethatsupporttracingofreferencecounts,debuggingthememoryallocator,orlow-\nlevelprofilingofthemaininterpreterloop. Onlythemostfrequentlyusedbuildswillbedescribedintheremainder\nofthissection.\nPy_DEBUG\nCompilingtheinterpreterwiththePy_DEBUGmacrodefinedproduceswhatisgenerallymeantbyadebugbuildof\nPython. Py_DEBUGisenabledintheUnixbuildbyadding--with-pydebugtothe./configurecommand. It\nisalsoimpliedbythepresenceofthenot-Python-specific_DEBUGmacro. WhenPy_DEBUGisenabledintheUnix\nbuild,compileroptimizationisdisabled.\nInadditiontothereferencecountdebuggingdescribedbelow,extrachecksareperformed,seePythonDebugBuild.\nDefiningPy_TRACE_REFSenablesreferencetracing(seetheconfigure --with-trace-refs option). When\ndefined,acirculardoublylinkedlistofactiveobjectsismaintainedbyaddingtwoextrafieldstoeveryPyObject.\nTotalallocationsaretrackedaswell. Uponexit,allexistingreferencesareprinted. (Ininteractivemodethishappens\naftereverystatementrunbytheinterpreter.)\nPleaserefertoMisc/SpecialBuilds.txtinthePythonsourcedistributionformoredetailedinformation.\n12 Chapter1. Introduction\nCHAPTER\nTWO\nC API STABILITY\nUnlessdocumentedotherwise,Python\u2019sCAPIiscoveredbytheBackwardsCompatibilityPolicy,PEP387. Most\nchangestoitaresource-compatible(typicallybyonlyaddingnewAPI).ChangingexistingAPIorremovingAPIis\nonlydoneafteradeprecationperiodortofixseriousissues.\nCPython\u2019sApplicationBinaryInterface(ABI)isforward-andbackwards-compatibleacrossaminorrelease(ifthese\narecompiledthesameway;seePlatformConsiderationsbelow). So,codecompiledforPython3.10.0willworkon\n3.10.8andviceversa,butwillneedtobecompiledseparatelyfor3.9.xand3.11.x.\nTherearetwotiersofCAPIwithdifferentstabilityexpectations:\n\u2022 UnstableAPI,maychangeinminorversionswithoutadeprecationperiod. ItismarkedbythePyUnstable\nprefixinnames.\n\u2022 LimitedAPI,iscompatibleacrossseveralminorreleases. WhenPy_LIMITED_APIisdefined,onlythissubset\nisexposedfromPython.h.\nThesearediscussedinmoredetailbelow.\nNamesprefixedbyanunderscore, suchas_Py_InternalState, areprivateAPIthatcanchangewithoutnotice\neveninpatchreleases. IfyouneedtousethisAPI,considerreachingouttoCPythondeveloperstodiscussadding\npublicAPIforyourusecase.\n2.1 Unstable C API\nAny API named with the PyUnstable prefix exposes CPython implementation details, and may change in every\nminor release (e.g. from 3.9 to 3.10) without any deprecation warnings. However, it will not change in a bugfix\nrelease(e.g. from3.10.0to3.10.1).\nItisgenerallyintendedforspecialized,low-leveltoolslikedebuggers.\nProjectsthatusethisAPIareexpectedtofollowCPythondevelopmentandspendextraeffortadjustingtochanges.\n2.2 Stable Application Binary Interface\nForsimplicity,thisdocumenttalksaboutextensions,buttheLimitedAPIandStableABIworkthesamewayforall\nusesoftheAPI\u2013forexample,embeddingPython.\n2.2.1 Limited C API\nPython3.2introducedtheLimitedAPI,asubsetofPython\u2019sCAPI.ExtensionsthatonlyusetheLimitedAPIcanbe\ncompiledonceandbeloadedonmultipleversionsofPython. ContentsoftheLimitedAPIarelistedbelow.\nPy_LIMITED_API\nDefinethismacrobeforeincludingPython.htooptintoonlyusetheLimitedAPI,andtoselecttheLimited\nAPIversion.\nDefinePy_LIMITED_APItothevalueofPY_VERSION_HEXcorrespondingtothelowestPythonversionyour\nextensionsupports. TheextensionwillbeABI-compatiblewithallPython3releasesfromthespecifiedone\nonward,andcanuseLimitedAPIintroduceduptothatversion.\n13\nThePython/CAPI,Release3.13.3\nRather than using the PY_VERSION_HEX macro directly, hardcode a minimum minor version (e.g.\n0x030A0000forPython3.10)forstabilitywhencompilingwithfuturePythonversions.\nYoucanalsodefinePy_LIMITED_APIto3. Thisworksthesameas0x03020000(Python3.2,theversion\nthatintroducedLimitedAPI).\n2.2.2 Stable ABI\nToenablethis,PythonprovidesaStableABI:asetofsymbolsthatwillremainABI-compatibleacrossPython3.x\nversions.\n(cid:174) Note\nTheStableABIpreventsABIissues,likelinkererrorsduetomissingsymbolsordatacorruptionduetochangesin\nstructurelayoutsorfunctionsignatures. However,otherchangesinPythoncanchangethebehaviorofextensions.\nSeePython\u2019sBackwardsCompatibilityPolicy(PEP387)fordetails.\nTheStableABIcontainssymbolsexposedintheLimitedAPI,butalsootherones\u2013forexample,functionsnecessary\ntosupportolderversionsoftheLimitedAPI.\nOnWindows,extensionsthatusetheStableABIshouldbelinkedagainstpython3.dllratherthanaversion-specific\nlibrarysuchaspython39.dll.\nOnsomeplatforms, Pythonwilllookforandloadsharedlibraryfilesnamedwiththeabi3tag(e.g. mymodule.\nabi3.so). ItdoesnotcheckifsuchextensionsconformtoaStableABI.Theuser(ortheirpackagingtools)needto\nensurethat,forexample,extensionsbuiltwiththe3.10+LimitedAPIarenotinstalledforlowerversionsofPython.\nAllfunctionsintheStableABIarepresentasfunctionsinPython\u2019ssharedlibrary,notsolelyasmacros. Thismakes\nthemusablefromlanguagesthatdon\u2019tusetheCpreprocessor.\n2.2.3 Limited API Scope and Performance\nThegoalfortheLimitedAPIistoalloweverythingthatispossiblewiththefullCAPI,butpossiblywithaperfor-\nmancepenalty.\nForexample,whilePyList_GetItem()isavailable,its\u201cunsafe\u201dmacrovariantPyList_GET_ITEM()isnot. The\nmacrocanbefasterbecauseitcanrelyonversion-specificimplementationdetailsofthelistobject.\nWithout Py_LIMITED_API defined, some C API functions are inlined or replaced by macros. Defining\nPy_LIMITED_API disables this inlining, allowing stability as Python\u2019s data structures are improved, but possibly\nreducingperformance.\nByleavingoutthePy_LIMITED_APIdefinition,itispossibletocompileaLimitedAPIextensionwithaversion-\nspecificABI.ThiscanimproveperformanceforthatPythonversion, butwilllimitcompatibility. Compilingwith\nPy_LIMITED_APIwillthenyieldanextensionthatcanbedistributedwhereaversion-specificoneisnotavailable\n\u2013forexample,forprereleasesofanupcomingPythonversion.\n2.2.4 Limited API Caveats\nNotethatcompilingwithPy_LIMITED_APIisnot acompleteguaranteethatcodeconformstotheLimitedAPI or\ntheStableABI.Py_LIMITED_APIonlycoversdefinitions,butanAPIalsoincludesotherissues,suchasexpected\nsemantics.\nOneissuethat Py_LIMITED_API doesnotguard againstiscalling a functionwith argumentsthatareinvalid ina\nlowerPythonversion. Forexample,considerafunctionthatstartsacceptingNULLforanargument. InPython3.9,\nNULLnowselectsadefaultbehavior,butinPython3.8,theargumentwillbeuseddirectly,causingaNULLdereference\nandcrash. Asimilarargumentworksforfieldsofstructs.\nAnother issue is that some struct fields are currently not hidden when Py_LIMITED_API is defined, even though\nthey\u2019repartoftheLimitedAPI.\n14 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\nForthesereasons,werecommendtestinganextensionwithallminorPythonversionsitsupports,andpreferablyto\nbuildwiththelowestsuchversion.\nWealsorecommendreviewingdocumentationofallusedAPItocheckifitisexplicitlypartoftheLimitedAPI.Even\nwithPy_LIMITED_APIdefined,afewprivatedeclarationsareexposedfortechnicalreasons(orevenunintentionally,\nasbugs).\nAlsonotethattheLimitedAPIisnotnecessarilystable: compilingwithPy_LIMITED_APIwithPython3.8means\nthattheextensionwillrunwithPython3.12,butitwillnotnecessarilycompilewithPython3.12. Inparticular,parts\noftheLimitedAPImaybedeprecatedandremoved,providedthattheStableABIstaysstable.\n2.3 Platform Considerations\nABIstabilitydependsnotonlyonPython,butalsoonthecompilerused,lower-levellibrariesandcompileroptions.\nFor the purposes of the Stable ABI, these details define a \u201cplatform\u201d. They usually depend on the OS type and\nprocessorarchitecture\nIt is the responsibility of each particular distributor of Python to ensure that all Python versions on a particular\nplatformarebuiltinawaythatdoesnotbreaktheStableABI.ThisisthecasewithWindowsandmacOSreleases\nfrompython.organdmanythird-partydistributors.\n2.4 Contents of Limited API\nCurrently,theLimitedAPI includesthefollowingitems:\n\u2022 PY_VECTORCALL_ARGUMENTS_OFFSET\n\u2022 PyAIter_Check()\n\u2022 PyArg_Parse()\n\u2022 PyArg_ParseTuple()\n\u2022 PyArg_ParseTupleAndKeywords()\n\u2022 PyArg_UnpackTuple()\n\u2022 PyArg_VaParse()\n\u2022 PyArg_VaParseTupleAndKeywords()\n\u2022 PyArg_ValidateKeywordArguments()\n\u2022 PyBaseObject_Type\n\u2022 PyBool_FromLong()\n\u2022 PyBool_Type\n\u2022 PyBuffer_FillContiguousStrides()\n\u2022 PyBuffer_FillInfo()\n\u2022 PyBuffer_FromContiguous()\n\u2022 PyBuffer_GetPointer()\n\u2022 PyBuffer_IsContiguous()\n\u2022 PyBuffer_Release()\n\u2022 PyBuffer_SizeFromFormat()\n\u2022 PyBuffer_ToContiguous()\n\u2022 PyByteArrayIter_Type\n\u2022 PyByteArray_AsString()\n2.3. PlatformConsiderations 15\nThePython/CAPI,Release3.13.3\n\u2022 PyByteArray_Concat()\n\u2022 PyByteArray_FromObject()\n\u2022 PyByteArray_FromStringAndSize()\n\u2022 PyByteArray_Resize()\n\u2022 PyByteArray_Size()\n\u2022 PyByteArray_Type\n\u2022 PyBytesIter_Type\n\u2022 PyBytes_AsString()\n\u2022 PyBytes_AsStringAndSize()\n\u2022 PyBytes_Concat()\n\u2022 PyBytes_ConcatAndDel()\n\u2022 PyBytes_DecodeEscape()\n\u2022 PyBytes_FromFormat()\n\u2022 PyBytes_FromFormatV()\n\u2022 PyBytes_FromObject()\n\u2022 PyBytes_FromString()\n\u2022 PyBytes_FromStringAndSize()\n\u2022 PyBytes_Repr()\n\u2022 PyBytes_Size()\n\u2022 PyBytes_Type\n\u2022 PyCFunction\n\u2022 PyCFunctionFast\n\u2022 PyCFunctionFastWithKeywords\n\u2022 PyCFunctionWithKeywords\n\u2022 PyCFunction_GetFlags()\n\u2022 PyCFunction_GetFunction()\n\u2022 PyCFunction_GetSelf()\n\u2022 PyCFunction_New()\n\u2022 PyCFunction_NewEx()\n\u2022 PyCFunction_Type\n\u2022 PyCMethod_New()\n\u2022 PyCallIter_New()\n\u2022 PyCallIter_Type\n\u2022 PyCallable_Check()\n\u2022 PyCapsule_Destructor\n\u2022 PyCapsule_GetContext()\n\u2022 PyCapsule_GetDestructor()\n\u2022 PyCapsule_GetName()\n\u2022 PyCapsule_GetPointer()\n16 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyCapsule_Import()\n\u2022 PyCapsule_IsValid()\n\u2022 PyCapsule_New()\n\u2022 PyCapsule_SetContext()\n\u2022 PyCapsule_SetDestructor()\n\u2022 PyCapsule_SetName()\n\u2022 PyCapsule_SetPointer()\n\u2022 PyCapsule_Type\n\u2022 PyClassMethodDescr_Type\n\u2022 PyCodec_BackslashReplaceErrors()\n\u2022 PyCodec_Decode()\n\u2022 PyCodec_Decoder()\n\u2022 PyCodec_Encode()\n\u2022 PyCodec_Encoder()\n\u2022 PyCodec_IgnoreErrors()\n\u2022 PyCodec_IncrementalDecoder()\n\u2022 PyCodec_IncrementalEncoder()\n\u2022 PyCodec_KnownEncoding()\n\u2022 PyCodec_LookupError()\n\u2022 PyCodec_NameReplaceErrors()\n\u2022 PyCodec_Register()\n\u2022 PyCodec_RegisterError()\n\u2022 PyCodec_ReplaceErrors()\n\u2022 PyCodec_StreamReader()\n\u2022 PyCodec_StreamWriter()\n\u2022 PyCodec_StrictErrors()\n\u2022 PyCodec_Unregister()\n\u2022 PyCodec_XMLCharRefReplaceErrors()\n\u2022 PyComplex_FromDoubles()\n\u2022 PyComplex_ImagAsDouble()\n\u2022 PyComplex_RealAsDouble()\n\u2022 PyComplex_Type\n\u2022 PyDescr_NewClassMethod()\n\u2022 PyDescr_NewGetSet()\n\u2022 PyDescr_NewMember()\n\u2022 PyDescr_NewMethod()\n\u2022 PyDictItems_Type\n\u2022 PyDictIterItem_Type\n\u2022 PyDictIterKey_Type\n2.4. ContentsofLimitedAPI 17\nThePython/CAPI,Release3.13.3\n\u2022 PyDictIterValue_Type\n\u2022 PyDictKeys_Type\n\u2022 PyDictProxy_New()\n\u2022 PyDictProxy_Type\n\u2022 PyDictRevIterItem_Type\n\u2022 PyDictRevIterKey_Type\n\u2022 PyDictRevIterValue_Type\n\u2022 PyDictValues_Type\n\u2022 PyDict_Clear()\n\u2022 PyDict_Contains()\n\u2022 PyDict_Copy()\n\u2022 PyDict_DelItem()\n\u2022 PyDict_DelItemString()\n\u2022 PyDict_GetItem()\n\u2022 PyDict_GetItemRef()\n\u2022 PyDict_GetItemString()\n\u2022 PyDict_GetItemStringRef()\n\u2022 PyDict_GetItemWithError()\n\u2022 PyDict_Items()\n\u2022 PyDict_Keys()\n\u2022 PyDict_Merge()\n\u2022 PyDict_MergeFromSeq2()\n\u2022 PyDict_New()\n\u2022 PyDict_Next()\n\u2022 PyDict_SetItem()\n\u2022 PyDict_SetItemString()\n\u2022 PyDict_Size()\n\u2022 PyDict_Type\n\u2022 PyDict_Update()\n\u2022 PyDict_Values()\n\u2022 PyEllipsis_Type\n\u2022 PyEnum_Type\n\u2022 PyErr_BadArgument()\n\u2022 PyErr_BadInternalCall()\n\u2022 PyErr_CheckSignals()\n\u2022 PyErr_Clear()\n\u2022 PyErr_Display()\n\u2022 PyErr_DisplayException()\n\u2022 PyErr_ExceptionMatches()\n18 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyErr_Fetch()\n\u2022 PyErr_Format()\n\u2022 PyErr_FormatV()\n\u2022 PyErr_GetExcInfo()\n\u2022 PyErr_GetHandledException()\n\u2022 PyErr_GetRaisedException()\n\u2022 PyErr_GivenExceptionMatches()\n\u2022 PyErr_NewException()\n\u2022 PyErr_NewExceptionWithDoc()\n\u2022 PyErr_NoMemory()\n\u2022 PyErr_NormalizeException()\n\u2022 PyErr_Occurred()\n\u2022 PyErr_Print()\n\u2022 PyErr_PrintEx()\n\u2022 PyErr_ProgramText()\n\u2022 PyErr_ResourceWarning()\n\u2022 PyErr_Restore()\n\u2022 PyErr_SetExcFromWindowsErr()\n\u2022 PyErr_SetExcFromWindowsErrWithFilename()\n\u2022 PyErr_SetExcFromWindowsErrWithFilenameObject()\n\u2022 PyErr_SetExcFromWindowsErrWithFilenameObjects()\n\u2022 PyErr_SetExcInfo()\n\u2022 PyErr_SetFromErrno()\n\u2022 PyErr_SetFromErrnoWithFilename()\n\u2022 PyErr_SetFromErrnoWithFilenameObject()\n\u2022 PyErr_SetFromErrnoWithFilenameObjects()\n\u2022 PyErr_SetFromWindowsErr()\n\u2022 PyErr_SetFromWindowsErrWithFilename()\n\u2022 PyErr_SetHandledException()\n\u2022 PyErr_SetImportError()\n\u2022 PyErr_SetImportErrorSubclass()\n\u2022 PyErr_SetInterrupt()\n\u2022 PyErr_SetInterruptEx()\n\u2022 PyErr_SetNone()\n\u2022 PyErr_SetObject()\n\u2022 PyErr_SetRaisedException()\n\u2022 PyErr_SetString()\n\u2022 PyErr_SyntaxLocation()\n\u2022 PyErr_SyntaxLocationEx()\n2.4. ContentsofLimitedAPI 19\nThePython/CAPI,Release3.13.3\n\u2022 PyErr_WarnEx()\n\u2022 PyErr_WarnExplicit()\n\u2022 PyErr_WarnFormat()\n\u2022 PyErr_WriteUnraisable()\n\u2022 PyEval_AcquireThread()\n\u2022 PyEval_EvalCode()\n\u2022 PyEval_EvalCodeEx()\n\u2022 PyEval_EvalFrame()\n\u2022 PyEval_EvalFrameEx()\n\u2022 PyEval_GetBuiltins()\n\u2022 PyEval_GetFrame()\n\u2022 PyEval_GetFrameBuiltins()\n\u2022 PyEval_GetFrameGlobals()\n\u2022 PyEval_GetFrameLocals()\n\u2022 PyEval_GetFuncDesc()\n\u2022 PyEval_GetFuncName()\n\u2022 PyEval_GetGlobals()\n\u2022 PyEval_GetLocals()\n\u2022 PyEval_InitThreads()\n\u2022 PyEval_ReleaseThread()\n\u2022 PyEval_RestoreThread()\n\u2022 PyEval_SaveThread()\n\u2022 PyExc_ArithmeticError\n\u2022 PyExc_AssertionError\n\u2022 PyExc_AttributeError\n\u2022 PyExc_BaseException\n\u2022 PyExc_BaseExceptionGroup\n\u2022 PyExc_BlockingIOError\n\u2022 PyExc_BrokenPipeError\n\u2022 PyExc_BufferError\n\u2022 PyExc_BytesWarning\n\u2022 PyExc_ChildProcessError\n\u2022 PyExc_ConnectionAbortedError\n\u2022 PyExc_ConnectionError\n\u2022 PyExc_ConnectionRefusedError\n\u2022 PyExc_ConnectionResetError\n\u2022 PyExc_DeprecationWarning\n\u2022 PyExc_EOFError\n\u2022 PyExc_EncodingWarning\n20 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyExc_EnvironmentError\n\u2022 PyExc_Exception\n\u2022 PyExc_FileExistsError\n\u2022 PyExc_FileNotFoundError\n\u2022 PyExc_FloatingPointError\n\u2022 PyExc_FutureWarning\n\u2022 PyExc_GeneratorExit\n\u2022 PyExc_IOError\n\u2022 PyExc_ImportError\n\u2022 PyExc_ImportWarning\n\u2022 PyExc_IndentationError\n\u2022 PyExc_IndexError\n\u2022 PyExc_InterruptedError\n\u2022 PyExc_IsADirectoryError\n\u2022 PyExc_KeyError\n\u2022 PyExc_KeyboardInterrupt\n\u2022 PyExc_LookupError\n\u2022 PyExc_MemoryError\n\u2022 PyExc_ModuleNotFoundError\n\u2022 PyExc_NameError\n\u2022 PyExc_NotADirectoryError\n\u2022 PyExc_NotImplementedError\n\u2022 PyExc_OSError\n\u2022 PyExc_OverflowError\n\u2022 PyExc_PendingDeprecationWarning\n\u2022 PyExc_PermissionError\n\u2022 PyExc_ProcessLookupError\n\u2022 PyExc_RecursionError\n\u2022 PyExc_ReferenceError\n\u2022 PyExc_ResourceWarning\n\u2022 PyExc_RuntimeError\n\u2022 PyExc_RuntimeWarning\n\u2022 PyExc_StopAsyncIteration\n\u2022 PyExc_StopIteration\n\u2022 PyExc_SyntaxError\n\u2022 PyExc_SyntaxWarning\n\u2022 PyExc_SystemError\n\u2022 PyExc_SystemExit\n\u2022 PyExc_TabError\n2.4. ContentsofLimitedAPI 21\nThePython/CAPI,Release3.13.3\n\u2022 PyExc_TimeoutError\n\u2022 PyExc_TypeError\n\u2022 PyExc_UnboundLocalError\n\u2022 PyExc_UnicodeDecodeError\n\u2022 PyExc_UnicodeEncodeError\n\u2022 PyExc_UnicodeError\n\u2022 PyExc_UnicodeTranslateError\n\u2022 PyExc_UnicodeWarning\n\u2022 PyExc_UserWarning\n\u2022 PyExc_ValueError\n\u2022 PyExc_Warning\n\u2022 PyExc_WindowsError\n\u2022 PyExc_ZeroDivisionError\n\u2022 PyExceptionClass_Name()\n\u2022 PyException_GetArgs()\n\u2022 PyException_GetCause()\n\u2022 PyException_GetContext()\n\u2022 PyException_GetTraceback()\n\u2022 PyException_SetArgs()\n\u2022 PyException_SetCause()\n\u2022 PyException_SetContext()\n\u2022 PyException_SetTraceback()\n\u2022 PyFile_FromFd()\n\u2022 PyFile_GetLine()\n\u2022 PyFile_WriteObject()\n\u2022 PyFile_WriteString()\n\u2022 PyFilter_Type\n\u2022 PyFloat_AsDouble()\n\u2022 PyFloat_FromDouble()\n\u2022 PyFloat_FromString()\n\u2022 PyFloat_GetInfo()\n\u2022 PyFloat_GetMax()\n\u2022 PyFloat_GetMin()\n\u2022 PyFloat_Type\n\u2022 PyFrameObject\n\u2022 PyFrame_GetCode()\n\u2022 PyFrame_GetLineNumber()\n\u2022 PyFrozenSet_New()\n\u2022 PyFrozenSet_Type\n22 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyGC_Collect()\n\u2022 PyGC_Disable()\n\u2022 PyGC_Enable()\n\u2022 PyGC_IsEnabled()\n\u2022 PyGILState_Ensure()\n\u2022 PyGILState_GetThisThreadState()\n\u2022 PyGILState_Release()\n\u2022 PyGILState_STATE\n\u2022 PyGetSetDef\n\u2022 PyGetSetDescr_Type\n\u2022 PyImport_AddModule()\n\u2022 PyImport_AddModuleObject()\n\u2022 PyImport_AddModuleRef()\n\u2022 PyImport_AppendInittab()\n\u2022 PyImport_ExecCodeModule()\n\u2022 PyImport_ExecCodeModuleEx()\n\u2022 PyImport_ExecCodeModuleObject()\n\u2022 PyImport_ExecCodeModuleWithPathnames()\n\u2022 PyImport_GetImporter()\n\u2022 PyImport_GetMagicNumber()\n\u2022 PyImport_GetMagicTag()\n\u2022 PyImport_GetModule()\n\u2022 PyImport_GetModuleDict()\n\u2022 PyImport_Import()\n\u2022 PyImport_ImportFrozenModule()\n\u2022 PyImport_ImportFrozenModuleObject()\n\u2022 PyImport_ImportModule()\n\u2022 PyImport_ImportModuleLevel()\n\u2022 PyImport_ImportModuleLevelObject()\n\u2022 PyImport_ImportModuleNoBlock()\n\u2022 PyImport_ReloadModule()\n\u2022 PyIndex_Check()\n\u2022 PyInterpreterState\n\u2022 PyInterpreterState_Clear()\n\u2022 PyInterpreterState_Delete()\n\u2022 PyInterpreterState_Get()\n\u2022 PyInterpreterState_GetDict()\n\u2022 PyInterpreterState_GetID()\n\u2022 PyInterpreterState_New()\n2.4. ContentsofLimitedAPI 23\nThePython/CAPI,Release3.13.3\n\u2022 PyIter_Check()\n\u2022 PyIter_Next()\n\u2022 PyIter_Send()\n\u2022 PyListIter_Type\n\u2022 PyListRevIter_Type\n\u2022 PyList_Append()\n\u2022 PyList_AsTuple()\n\u2022 PyList_GetItem()\n\u2022 PyList_GetItemRef()\n\u2022 PyList_GetSlice()\n\u2022 PyList_Insert()\n\u2022 PyList_New()\n\u2022 PyList_Reverse()\n\u2022 PyList_SetItem()\n\u2022 PyList_SetSlice()\n\u2022 PyList_Size()\n\u2022 PyList_Sort()\n\u2022 PyList_Type\n\u2022 PyLongObject\n\u2022 PyLongRangeIter_Type\n\u2022 PyLong_AsDouble()\n\u2022 PyLong_AsInt()\n\u2022 PyLong_AsLong()\n\u2022 PyLong_AsLongAndOverflow()\n\u2022 PyLong_AsLongLong()\n\u2022 PyLong_AsLongLongAndOverflow()\n\u2022 PyLong_AsSize_t()\n\u2022 PyLong_AsSsize_t()\n\u2022 PyLong_AsUnsignedLong()\n\u2022 PyLong_AsUnsignedLongLong()\n\u2022 PyLong_AsUnsignedLongLongMask()\n\u2022 PyLong_AsUnsignedLongMask()\n\u2022 PyLong_AsVoidPtr()\n\u2022 PyLong_FromDouble()\n\u2022 PyLong_FromLong()\n\u2022 PyLong_FromLongLong()\n\u2022 PyLong_FromSize_t()\n\u2022 PyLong_FromSsize_t()\n\u2022 PyLong_FromString()\n24 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyLong_FromUnsignedLong()\n\u2022 PyLong_FromUnsignedLongLong()\n\u2022 PyLong_FromVoidPtr()\n\u2022 PyLong_GetInfo()\n\u2022 PyLong_Type\n\u2022 PyMap_Type\n\u2022 PyMapping_Check()\n\u2022 PyMapping_GetItemString()\n\u2022 PyMapping_GetOptionalItem()\n\u2022 PyMapping_GetOptionalItemString()\n\u2022 PyMapping_HasKey()\n\u2022 PyMapping_HasKeyString()\n\u2022 PyMapping_HasKeyStringWithError()\n\u2022 PyMapping_HasKeyWithError()\n\u2022 PyMapping_Items()\n\u2022 PyMapping_Keys()\n\u2022 PyMapping_Length()\n\u2022 PyMapping_SetItemString()\n\u2022 PyMapping_Size()\n\u2022 PyMapping_Values()\n\u2022 PyMem_Calloc()\n\u2022 PyMem_Free()\n\u2022 PyMem_Malloc()\n\u2022 PyMem_RawCalloc()\n\u2022 PyMem_RawFree()\n\u2022 PyMem_RawMalloc()\n\u2022 PyMem_RawRealloc()\n\u2022 PyMem_Realloc()\n\u2022 PyMemberDef\n\u2022 PyMemberDescr_Type\n\u2022 PyMember_GetOne()\n\u2022 PyMember_SetOne()\n\u2022 PyMemoryView_FromBuffer()\n\u2022 PyMemoryView_FromMemory()\n\u2022 PyMemoryView_FromObject()\n\u2022 PyMemoryView_GetContiguous()\n\u2022 PyMemoryView_Type\n\u2022 PyMethodDef\n\u2022 PyMethodDescr_Type\n2.4. ContentsofLimitedAPI 25\nThePython/CAPI,Release3.13.3\n\u2022 PyModuleDef\n\u2022 PyModuleDef_Base\n\u2022 PyModuleDef_Init()\n\u2022 PyModuleDef_Type\n\u2022 PyModule_Add()\n\u2022 PyModule_AddFunctions()\n\u2022 PyModule_AddIntConstant()\n\u2022 PyModule_AddObject()\n\u2022 PyModule_AddObjectRef()\n\u2022 PyModule_AddStringConstant()\n\u2022 PyModule_AddType()\n\u2022 PyModule_Create2()\n\u2022 PyModule_ExecDef()\n\u2022 PyModule_FromDefAndSpec2()\n\u2022 PyModule_GetDef()\n\u2022 PyModule_GetDict()\n\u2022 PyModule_GetFilename()\n\u2022 PyModule_GetFilenameObject()\n\u2022 PyModule_GetName()\n\u2022 PyModule_GetNameObject()\n\u2022 PyModule_GetState()\n\u2022 PyModule_New()\n\u2022 PyModule_NewObject()\n\u2022 PyModule_SetDocString()\n\u2022 PyModule_Type\n\u2022 PyNumber_Absolute()\n\u2022 PyNumber_Add()\n\u2022 PyNumber_And()\n\u2022 PyNumber_AsSsize_t()\n\u2022 PyNumber_Check()\n\u2022 PyNumber_Divmod()\n\u2022 PyNumber_Float()\n\u2022 PyNumber_FloorDivide()\n\u2022 PyNumber_InPlaceAdd()\n\u2022 PyNumber_InPlaceAnd()\n\u2022 PyNumber_InPlaceFloorDivide()\n\u2022 PyNumber_InPlaceLshift()\n\u2022 PyNumber_InPlaceMatrixMultiply()\n\u2022 PyNumber_InPlaceMultiply()\n26 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyNumber_InPlaceOr()\n\u2022 PyNumber_InPlacePower()\n\u2022 PyNumber_InPlaceRemainder()\n\u2022 PyNumber_InPlaceRshift()\n\u2022 PyNumber_InPlaceSubtract()\n\u2022 PyNumber_InPlaceTrueDivide()\n\u2022 PyNumber_InPlaceXor()\n\u2022 PyNumber_Index()\n\u2022 PyNumber_Invert()\n\u2022 PyNumber_Long()\n\u2022 PyNumber_Lshift()\n\u2022 PyNumber_MatrixMultiply()\n\u2022 PyNumber_Multiply()\n\u2022 PyNumber_Negative()\n\u2022 PyNumber_Or()\n\u2022 PyNumber_Positive()\n\u2022 PyNumber_Power()\n\u2022 PyNumber_Remainder()\n\u2022 PyNumber_Rshift()\n\u2022 PyNumber_Subtract()\n\u2022 PyNumber_ToBase()\n\u2022 PyNumber_TrueDivide()\n\u2022 PyNumber_Xor()\n\u2022 PyOS_AfterFork()\n\u2022 PyOS_AfterFork_Child()\n\u2022 PyOS_AfterFork_Parent()\n\u2022 PyOS_BeforeFork()\n\u2022 PyOS_CheckStack()\n\u2022 PyOS_FSPath()\n\u2022 PyOS_InputHook\n\u2022 PyOS_InterruptOccurred()\n\u2022 PyOS_double_to_string()\n\u2022 PyOS_getsig()\n\u2022 PyOS_mystricmp()\n\u2022 PyOS_mystrnicmp()\n\u2022 PyOS_setsig()\n\u2022 PyOS_sighandler_t\n\u2022 PyOS_snprintf()\n\u2022 PyOS_string_to_double()\n2.4. ContentsofLimitedAPI 27\nThePython/CAPI,Release3.13.3\n\u2022 PyOS_strtol()\n\u2022 PyOS_strtoul()\n\u2022 PyOS_vsnprintf()\n\u2022 PyObject\n\u2022 PyObject.ob_refcnt\n\u2022 PyObject.ob_type\n\u2022 PyObject_ASCII()\n\u2022 PyObject_AsFileDescriptor()\n\u2022 PyObject_Bytes()\n\u2022 PyObject_Call()\n\u2022 PyObject_CallFunction()\n\u2022 PyObject_CallFunctionObjArgs()\n\u2022 PyObject_CallMethod()\n\u2022 PyObject_CallMethodObjArgs()\n\u2022 PyObject_CallNoArgs()\n\u2022 PyObject_CallObject()\n\u2022 PyObject_Calloc()\n\u2022 PyObject_CheckBuffer()\n\u2022 PyObject_ClearWeakRefs()\n\u2022 PyObject_CopyData()\n\u2022 PyObject_DelAttr()\n\u2022 PyObject_DelAttrString()\n\u2022 PyObject_DelItem()\n\u2022 PyObject_DelItemString()\n\u2022 PyObject_Dir()\n\u2022 PyObject_Format()\n\u2022 PyObject_Free()\n\u2022 PyObject_GC_Del()\n\u2022 PyObject_GC_IsFinalized()\n\u2022 PyObject_GC_IsTracked()\n\u2022 PyObject_GC_Track()\n\u2022 PyObject_GC_UnTrack()\n\u2022 PyObject_GenericGetAttr()\n\u2022 PyObject_GenericGetDict()\n\u2022 PyObject_GenericSetAttr()\n\u2022 PyObject_GenericSetDict()\n\u2022 PyObject_GetAIter()\n\u2022 PyObject_GetAttr()\n\u2022 PyObject_GetAttrString()\n28 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyObject_GetBuffer()\n\u2022 PyObject_GetItem()\n\u2022 PyObject_GetIter()\n\u2022 PyObject_GetOptionalAttr()\n\u2022 PyObject_GetOptionalAttrString()\n\u2022 PyObject_GetTypeData()\n\u2022 PyObject_HasAttr()\n\u2022 PyObject_HasAttrString()\n\u2022 PyObject_HasAttrStringWithError()\n\u2022 PyObject_HasAttrWithError()\n\u2022 PyObject_Hash()\n\u2022 PyObject_HashNotImplemented()\n\u2022 PyObject_Init()\n\u2022 PyObject_InitVar()\n\u2022 PyObject_IsInstance()\n\u2022 PyObject_IsSubclass()\n\u2022 PyObject_IsTrue()\n\u2022 PyObject_Length()\n\u2022 PyObject_Malloc()\n\u2022 PyObject_Not()\n\u2022 PyObject_Realloc()\n\u2022 PyObject_Repr()\n\u2022 PyObject_RichCompare()\n\u2022 PyObject_RichCompareBool()\n\u2022 PyObject_SelfIter()\n\u2022 PyObject_SetAttr()\n\u2022 PyObject_SetAttrString()\n\u2022 PyObject_SetItem()\n\u2022 PyObject_Size()\n\u2022 PyObject_Str()\n\u2022 PyObject_Type()\n\u2022 PyObject_Vectorcall()\n\u2022 PyObject_VectorcallMethod()\n\u2022 PyProperty_Type\n\u2022 PyRangeIter_Type\n\u2022 PyRange_Type\n\u2022 PyReversed_Type\n\u2022 PySeqIter_New()\n\u2022 PySeqIter_Type\n2.4. ContentsofLimitedAPI 29\nThePython/CAPI,Release3.13.3\n\u2022 PySequence_Check()\n\u2022 PySequence_Concat()\n\u2022 PySequence_Contains()\n\u2022 PySequence_Count()\n\u2022 PySequence_DelItem()\n\u2022 PySequence_DelSlice()\n\u2022 PySequence_Fast()\n\u2022 PySequence_GetItem()\n\u2022 PySequence_GetSlice()\n\u2022 PySequence_In()\n\u2022 PySequence_InPlaceConcat()\n\u2022 PySequence_InPlaceRepeat()\n\u2022 PySequence_Index()\n\u2022 PySequence_Length()\n\u2022 PySequence_List()\n\u2022 PySequence_Repeat()\n\u2022 PySequence_SetItem()\n\u2022 PySequence_SetSlice()\n\u2022 PySequence_Size()\n\u2022 PySequence_Tuple()\n\u2022 PySetIter_Type\n\u2022 PySet_Add()\n\u2022 PySet_Clear()\n\u2022 PySet_Contains()\n\u2022 PySet_Discard()\n\u2022 PySet_New()\n\u2022 PySet_Pop()\n\u2022 PySet_Size()\n\u2022 PySet_Type\n\u2022 PySlice_AdjustIndices()\n\u2022 PySlice_GetIndices()\n\u2022 PySlice_GetIndicesEx()\n\u2022 PySlice_New()\n\u2022 PySlice_Type\n\u2022 PySlice_Unpack()\n\u2022 PyState_AddModule()\n\u2022 PyState_FindModule()\n\u2022 PyState_RemoveModule()\n\u2022 PyStructSequence_Desc\n30 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyStructSequence_Field\n\u2022 PyStructSequence_GetItem()\n\u2022 PyStructSequence_New()\n\u2022 PyStructSequence_NewType()\n\u2022 PyStructSequence_SetItem()\n\u2022 PyStructSequence_UnnamedField\n\u2022 PySuper_Type\n\u2022 PySys_Audit()\n\u2022 PySys_AuditTuple()\n\u2022 PySys_FormatStderr()\n\u2022 PySys_FormatStdout()\n\u2022 PySys_GetObject()\n\u2022 PySys_GetXOptions()\n\u2022 PySys_ResetWarnOptions()\n\u2022 PySys_SetArgv()\n\u2022 PySys_SetArgvEx()\n\u2022 PySys_SetObject()\n\u2022 PySys_WriteStderr()\n\u2022 PySys_WriteStdout()\n\u2022 PyThreadState\n\u2022 PyThreadState_Clear()\n\u2022 PyThreadState_Delete()\n\u2022 PyThreadState_Get()\n\u2022 PyThreadState_GetDict()\n\u2022 PyThreadState_GetFrame()\n\u2022 PyThreadState_GetID()\n\u2022 PyThreadState_GetInterpreter()\n\u2022 PyThreadState_New()\n\u2022 PyThreadState_SetAsyncExc()\n\u2022 PyThreadState_Swap()\n\u2022 PyThread_GetInfo()\n\u2022 PyThread_ReInitTLS()\n\u2022 PyThread_acquire_lock()\n\u2022 PyThread_acquire_lock_timed()\n\u2022 PyThread_allocate_lock()\n\u2022 PyThread_create_key()\n\u2022 PyThread_delete_key()\n\u2022 PyThread_delete_key_value()\n\u2022 PyThread_exit_thread()\n2.4. ContentsofLimitedAPI 31\nThePython/CAPI,Release3.13.3\n\u2022 PyThread_free_lock()\n\u2022 PyThread_get_key_value()\n\u2022 PyThread_get_stacksize()\n\u2022 PyThread_get_thread_ident()\n\u2022 PyThread_get_thread_native_id()\n\u2022 PyThread_init_thread()\n\u2022 PyThread_release_lock()\n\u2022 PyThread_set_key_value()\n\u2022 PyThread_set_stacksize()\n\u2022 PyThread_start_new_thread()\n\u2022 PyThread_tss_alloc()\n\u2022 PyThread_tss_create()\n\u2022 PyThread_tss_delete()\n\u2022 PyThread_tss_free()\n\u2022 PyThread_tss_get()\n\u2022 PyThread_tss_is_created()\n\u2022 PyThread_tss_set()\n\u2022 PyTraceBack_Here()\n\u2022 PyTraceBack_Print()\n\u2022 PyTraceBack_Type\n\u2022 PyTupleIter_Type\n\u2022 PyTuple_GetItem()\n\u2022 PyTuple_GetSlice()\n\u2022 PyTuple_New()\n\u2022 PyTuple_Pack()\n\u2022 PyTuple_SetItem()\n\u2022 PyTuple_Size()\n\u2022 PyTuple_Type\n\u2022 PyTypeObject\n\u2022 PyType_ClearCache()\n\u2022 PyType_FromMetaclass()\n\u2022 PyType_FromModuleAndSpec()\n\u2022 PyType_FromSpec()\n\u2022 PyType_FromSpecWithBases()\n\u2022 PyType_GenericAlloc()\n\u2022 PyType_GenericNew()\n\u2022 PyType_GetFlags()\n\u2022 PyType_GetFullyQualifiedName()\n\u2022 PyType_GetModule()\n32 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyType_GetModuleByDef()\n\u2022 PyType_GetModuleName()\n\u2022 PyType_GetModuleState()\n\u2022 PyType_GetName()\n\u2022 PyType_GetQualName()\n\u2022 PyType_GetSlot()\n\u2022 PyType_GetTypeDataSize()\n\u2022 PyType_IsSubtype()\n\u2022 PyType_Modified()\n\u2022 PyType_Ready()\n\u2022 PyType_Slot\n\u2022 PyType_Spec\n\u2022 PyType_Type\n\u2022 PyUnicodeDecodeError_Create()\n\u2022 PyUnicodeDecodeError_GetEncoding()\n\u2022 PyUnicodeDecodeError_GetEnd()\n\u2022 PyUnicodeDecodeError_GetObject()\n\u2022 PyUnicodeDecodeError_GetReason()\n\u2022 PyUnicodeDecodeError_GetStart()\n\u2022 PyUnicodeDecodeError_SetEnd()\n\u2022 PyUnicodeDecodeError_SetReason()\n\u2022 PyUnicodeDecodeError_SetStart()\n\u2022 PyUnicodeEncodeError_GetEncoding()\n\u2022 PyUnicodeEncodeError_GetEnd()\n\u2022 PyUnicodeEncodeError_GetObject()\n\u2022 PyUnicodeEncodeError_GetReason()\n\u2022 PyUnicodeEncodeError_GetStart()\n\u2022 PyUnicodeEncodeError_SetEnd()\n\u2022 PyUnicodeEncodeError_SetReason()\n\u2022 PyUnicodeEncodeError_SetStart()\n\u2022 PyUnicodeIter_Type\n\u2022 PyUnicodeTranslateError_GetEnd()\n\u2022 PyUnicodeTranslateError_GetObject()\n\u2022 PyUnicodeTranslateError_GetReason()\n\u2022 PyUnicodeTranslateError_GetStart()\n\u2022 PyUnicodeTranslateError_SetEnd()\n\u2022 PyUnicodeTranslateError_SetReason()\n\u2022 PyUnicodeTranslateError_SetStart()\n\u2022 PyUnicode_Append()\n2.4. ContentsofLimitedAPI 33\nThePython/CAPI,Release3.13.3\n\u2022 PyUnicode_AppendAndDel()\n\u2022 PyUnicode_AsASCIIString()\n\u2022 PyUnicode_AsCharmapString()\n\u2022 PyUnicode_AsDecodedObject()\n\u2022 PyUnicode_AsDecodedUnicode()\n\u2022 PyUnicode_AsEncodedObject()\n\u2022 PyUnicode_AsEncodedString()\n\u2022 PyUnicode_AsEncodedUnicode()\n\u2022 PyUnicode_AsLatin1String()\n\u2022 PyUnicode_AsMBCSString()\n\u2022 PyUnicode_AsRawUnicodeEscapeString()\n\u2022 PyUnicode_AsUCS4()\n\u2022 PyUnicode_AsUCS4Copy()\n\u2022 PyUnicode_AsUTF16String()\n\u2022 PyUnicode_AsUTF32String()\n\u2022 PyUnicode_AsUTF8AndSize()\n\u2022 PyUnicode_AsUTF8String()\n\u2022 PyUnicode_AsUnicodeEscapeString()\n\u2022 PyUnicode_AsWideChar()\n\u2022 PyUnicode_AsWideCharString()\n\u2022 PyUnicode_BuildEncodingMap()\n\u2022 PyUnicode_Compare()\n\u2022 PyUnicode_CompareWithASCIIString()\n\u2022 PyUnicode_Concat()\n\u2022 PyUnicode_Contains()\n\u2022 PyUnicode_Count()\n\u2022 PyUnicode_Decode()\n\u2022 PyUnicode_DecodeASCII()\n\u2022 PyUnicode_DecodeCharmap()\n\u2022 PyUnicode_DecodeCodePageStateful()\n\u2022 PyUnicode_DecodeFSDefault()\n\u2022 PyUnicode_DecodeFSDefaultAndSize()\n\u2022 PyUnicode_DecodeLatin1()\n\u2022 PyUnicode_DecodeLocale()\n\u2022 PyUnicode_DecodeLocaleAndSize()\n\u2022 PyUnicode_DecodeMBCS()\n\u2022 PyUnicode_DecodeMBCSStateful()\n\u2022 PyUnicode_DecodeRawUnicodeEscape()\n\u2022 PyUnicode_DecodeUTF16()\n34 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 PyUnicode_DecodeUTF16Stateful()\n\u2022 PyUnicode_DecodeUTF32()\n\u2022 PyUnicode_DecodeUTF32Stateful()\n\u2022 PyUnicode_DecodeUTF7()\n\u2022 PyUnicode_DecodeUTF7Stateful()\n\u2022 PyUnicode_DecodeUTF8()\n\u2022 PyUnicode_DecodeUTF8Stateful()\n\u2022 PyUnicode_DecodeUnicodeEscape()\n\u2022 PyUnicode_EncodeCodePage()\n\u2022 PyUnicode_EncodeFSDefault()\n\u2022 PyUnicode_EncodeLocale()\n\u2022 PyUnicode_EqualToUTF8()\n\u2022 PyUnicode_EqualToUTF8AndSize()\n\u2022 PyUnicode_FSConverter()\n\u2022 PyUnicode_FSDecoder()\n\u2022 PyUnicode_Find()\n\u2022 PyUnicode_FindChar()\n\u2022 PyUnicode_Format()\n\u2022 PyUnicode_FromEncodedObject()\n\u2022 PyUnicode_FromFormat()\n\u2022 PyUnicode_FromFormatV()\n\u2022 PyUnicode_FromObject()\n\u2022 PyUnicode_FromOrdinal()\n\u2022 PyUnicode_FromString()\n\u2022 PyUnicode_FromStringAndSize()\n\u2022 PyUnicode_FromWideChar()\n\u2022 PyUnicode_GetDefaultEncoding()\n\u2022 PyUnicode_GetLength()\n\u2022 PyUnicode_InternFromString()\n\u2022 PyUnicode_InternInPlace()\n\u2022 PyUnicode_IsIdentifier()\n\u2022 PyUnicode_Join()\n\u2022 PyUnicode_Partition()\n\u2022 PyUnicode_RPartition()\n\u2022 PyUnicode_RSplit()\n\u2022 PyUnicode_ReadChar()\n\u2022 PyUnicode_Replace()\n\u2022 PyUnicode_Resize()\n\u2022 PyUnicode_RichCompare()\n2.4. ContentsofLimitedAPI 35\nThePython/CAPI,Release3.13.3\n\u2022 PyUnicode_Split()\n\u2022 PyUnicode_Splitlines()\n\u2022 PyUnicode_Substring()\n\u2022 PyUnicode_Tailmatch()\n\u2022 PyUnicode_Translate()\n\u2022 PyUnicode_Type\n\u2022 PyUnicode_WriteChar()\n\u2022 PyVarObject\n\u2022 PyVarObject.ob_base\n\u2022 PyVarObject.ob_size\n\u2022 PyVectorcall_Call()\n\u2022 PyVectorcall_NARGS()\n\u2022 PyWeakReference\n\u2022 PyWeakref_GetObject()\n\u2022 PyWeakref_GetRef()\n\u2022 PyWeakref_NewProxy()\n\u2022 PyWeakref_NewRef()\n\u2022 PyWrapperDescr_Type\n\u2022 PyWrapper_New()\n\u2022 PyZip_Type\n\u2022 Py_AddPendingCall()\n\u2022 Py_AtExit()\n\u2022 Py_BEGIN_ALLOW_THREADS\n\u2022 Py_BLOCK_THREADS\n\u2022 Py_BuildValue()\n\u2022 Py_BytesMain()\n\u2022 Py_CompileString()\n\u2022 Py_DecRef()\n\u2022 Py_DecodeLocale()\n\u2022 Py_END_ALLOW_THREADS\n\u2022 Py_EncodeLocale()\n\u2022 Py_EndInterpreter()\n\u2022 Py_EnterRecursiveCall()\n\u2022 Py_Exit()\n\u2022 Py_FatalError()\n\u2022 Py_FileSystemDefaultEncodeErrors\n\u2022 Py_FileSystemDefaultEncoding\n\u2022 Py_Finalize()\n\u2022 Py_FinalizeEx()\n36 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 Py_GenericAlias()\n\u2022 Py_GenericAliasType\n\u2022 Py_GetBuildInfo()\n\u2022 Py_GetCompiler()\n\u2022 Py_GetConstant()\n\u2022 Py_GetConstantBorrowed()\n\u2022 Py_GetCopyright()\n\u2022 Py_GetExecPrefix()\n\u2022 Py_GetPath()\n\u2022 Py_GetPlatform()\n\u2022 Py_GetPrefix()\n\u2022 Py_GetProgramFullPath()\n\u2022 Py_GetProgramName()\n\u2022 Py_GetPythonHome()\n\u2022 Py_GetRecursionLimit()\n\u2022 Py_GetVersion()\n\u2022 Py_HasFileSystemDefaultEncoding\n\u2022 Py_IncRef()\n\u2022 Py_Initialize()\n\u2022 Py_InitializeEx()\n\u2022 Py_Is()\n\u2022 Py_IsFalse()\n\u2022 Py_IsFinalizing()\n\u2022 Py_IsInitialized()\n\u2022 Py_IsNone()\n\u2022 Py_IsTrue()\n\u2022 Py_LeaveRecursiveCall()\n\u2022 Py_Main()\n\u2022 Py_MakePendingCalls()\n\u2022 Py_NewInterpreter()\n\u2022 Py_NewRef()\n\u2022 Py_ReprEnter()\n\u2022 Py_ReprLeave()\n\u2022 Py_SetProgramName()\n\u2022 Py_SetPythonHome()\n\u2022 Py_SetRecursionLimit()\n\u2022 Py_UCS4\n\u2022 Py_UNBLOCK_THREADS\n\u2022 Py_UTF8Mode\n2.4. ContentsofLimitedAPI 37\nThePython/CAPI,Release3.13.3\n\u2022 Py_VaBuildValue()\n\u2022 Py_Version\n\u2022 Py_XNewRef()\n\u2022 Py_buffer\n\u2022 Py_intptr_t\n\u2022 Py_ssize_t\n\u2022 Py_uintptr_t\n\u2022 allocfunc\n\u2022 binaryfunc\n\u2022 descrgetfunc\n\u2022 descrsetfunc\n\u2022 destructor\n\u2022 getattrfunc\n\u2022 getattrofunc\n\u2022 getbufferproc\n\u2022 getiterfunc\n\u2022 getter\n\u2022 hashfunc\n\u2022 initproc\n\u2022 inquiry\n\u2022 iternextfunc\n\u2022 lenfunc\n\u2022 newfunc\n\u2022 objobjargproc\n\u2022 objobjproc\n\u2022 releasebufferproc\n\u2022 reprfunc\n\u2022 richcmpfunc\n\u2022 setattrfunc\n\u2022 setattrofunc\n\u2022 setter\n\u2022 ssizeargfunc\n\u2022 ssizeobjargproc\n\u2022 ssizessizeargfunc\n\u2022 ssizessizeobjargproc\n\u2022 symtable\n\u2022 ternaryfunc\n\u2022 traverseproc\n\u2022 unaryfunc\n38 Chapter2. CAPIStability\nThePython/CAPI,Release3.13.3\n\u2022 vectorcallfunc\n\u2022 visitproc\n2.4. ContentsofLimitedAPI 39\nThePython/CAPI,Release3.13.3\n40 Chapter2. CAPIStability\nCHAPTER\nTHREE\nTHE VERY HIGH LEVEL LAYER\nThefunctionsinthischapterwillletyouexecutePythonsourcecodegiveninafileorabuffer,buttheywillnotlet\nyouinteractinamoredetailedwaywiththeinterpreter.\nSeveralofthesefunctionsacceptastartsymbolfromthegrammarasaparameter. Theavailablestartsymbolsare\nPy_eval_input,Py_file_input,andPy_single_input. Thesearedescribedfollowingthefunctionswhich\nacceptthemasparameters.\nNote also that several of these functions take FILE* parameters. One particular issue which needs to be handled\ncarefullyisthattheFILEstructurefordifferentClibrariescanbedifferentandincompatible. UnderWindows(at\nleast),itispossiblefordynamicallylinkedextensionstoactuallyusedifferentlibraries,socareshouldbetakenthat\nFILE*parametersareonlypassedtothesefunctionsifitiscertainthattheywerecreatedbythesamelibrarythat\nthePythonruntimeisusing.\nintPyRun_AnyFile(FILE*fp,constchar*filename)\nThisisasimplifiedinterfacetoPyRun_AnyFileExFlags()below, leavingcloseit setto0andflagssetto\nNULL.\nintPyRun_AnyFileFlags(FILE*fp,constchar*filename,PyCompilerFlags*flags)\nThisisasimplifiedinterfacetoPyRun_AnyFileExFlags()below,leavingthecloseitargumentsetto0.\nintPyRun_AnyFileEx(FILE*fp,constchar*filename,intcloseit)\nThisisasimplifiedinterfacetoPyRun_AnyFileExFlags()below,leavingtheflagsargumentsettoNULL.\nintPyRun_AnyFileExFlags(FILE*fp,constchar*filename,intcloseit,PyCompilerFlags*flags)\nIffpreferstoafileassociatedwithaninteractivedevice(consoleorterminalinputorUnixpseudo-terminal),\nreturn the value of PyRun_InteractiveLoop(), otherwise return the result of PyRun_SimpleFile().\nfilename is decoded from the filesystem encoding (sys.getfilesystemencoding()). If filename\nis NULL, this function uses \"???\" as the filename. If closeit is true, the file is closed before\nPyRun_SimpleFileExFlags()returns.\nintPyRun_SimpleString(constchar*command)\nThis is a simplified interface to PyRun_SimpleStringFlags() below, leaving the PyCompilerFlags*\nargumentsettoNULL.\nintPyRun_SimpleStringFlags(constchar*command,PyCompilerFlags*flags)\nExecutesthePythonsourcecodefromcommand inthe__main__moduleaccordingtotheflagsargument.\nIf__main__doesnotalreadyexist,itiscreated. Returns0onsuccessor-1ifanexceptionwasraised. If\ntherewasanerror,thereisnowaytogettheexceptioninformation. Forthemeaningofflags,seebelow.\nNote that if an otherwise unhandled SystemExit is raised, this function will not return -1, but exit the\nprocess,aslongasPyConfig.inspectiszero.\nintPyRun_SimpleFile(FILE*fp,constchar*filename)\nThisisasimplifiedinterfacetoPyRun_SimpleFileExFlags()below,leavingcloseitsetto0andflagsset\ntoNULL.\nintPyRun_SimpleFileEx(FILE*fp,constchar*filename,intcloseit)\nThisisasimplifiedinterfacetoPyRun_SimpleFileExFlags()below,leavingflagssettoNULL.\n41\nThePython/CAPI,Release3.13.3\nintPyRun_SimpleFileExFlags(FILE*fp,constchar*filename,intcloseit,PyCompilerFlags*flags)\nSimilar to PyRun_SimpleStringFlags(), but the Python source code is read from fp instead of an in-\nmemory string. filename should be the name of the file, it is decoded from filesystem encoding and error\nhandler. Ifcloseitistrue,thefileisclosedbeforePyRun_SimpleFileExFlags()returns.\n(cid:174) Note\nOnWindows,fpshouldbeopenedasbinarymode(e.g. fopen(filename, \"rb\")). Otherwise,Python\nmaynothandlescriptfilewithLFlineendingcorrectly.\nintPyRun_InteractiveOne(FILE*fp,constchar*filename)\nThisisasimplifiedinterfacetoPyRun_InteractiveOneFlags()below,leavingflagssettoNULL.\nintPyRun_InteractiveOneFlags(FILE*fp,constchar*filename,PyCompilerFlags*flags)\nRead and execute a single statement from a file associated with an interactive device according to the flags\nargument. Theuserwillbepromptedusingsys.ps1andsys.ps2. filenameisdecodedfromthefilesystem\nencodinganderrorhandler.\nReturns0whentheinputwasexecutedsuccessfully,-1iftherewasanexception,oranerrorcodefromthe\nerrcode.hincludefiledistributedaspartofPythoniftherewasaparseerror. (Notethaterrcode.hisnot\nincludedbyPython.h,somustbeincludedspecificallyifneeded.)\nintPyRun_InteractiveLoop(FILE*fp,constchar*filename)\nThisisasimplifiedinterfacetoPyRun_InteractiveLoopFlags()below,leavingflagssettoNULL.\nintPyRun_InteractiveLoopFlags(FILE*fp,constchar*filename,PyCompilerFlags*flags)\nReadandexecutestatementsfromafileassociatedwithaninteractivedeviceuntilEOFisreached. Theuser\nwillbepromptedusingsys.ps1andsys.ps2. filenameisdecodedfromthefilesystemencodinganderror\nhandler. Returns0atEOForanegativenumberuponfailure.\nint(*PyOS_InputHook)(void)\nPartoftheStableABI.Canbesettopointtoafunctionwiththeprototypeint func(void). Thefunction\nwill be called when Python\u2019s interpreter prompt is about to become idle and wait for user input from the\nterminal. Thereturnvalueisignored. Overridingthishookcanbeusedtointegratetheinterpreter\u2019sprompt\nwithothereventloops,asdoneintheModules/_tkinter.cinthePythonsourcecode.\nChangedinversion3.12: Thisfunctionisonlycalledfromthemaininterpreter.\nchar*(*PyOS_ReadlineFunctionPointer)(FILE*,FILE*,constchar*)\nCanbesettopointtoafunctionwiththeprototypechar *func(FILE *stdin, FILE *stdout, char\n*prompt),overridingthedefaultfunctionusedtoreadasinglelineofinputattheinterpreter\u2019sprompt. The\nfunctionisexpectedtooutputthestringpromptifit\u2019snotNULL,andthenreadalineofinputfromtheprovided\nstandardinputfile,returningtheresultingstring. Forexample,Thereadlinemodulesetsthishooktoprovide\nline-editingandtab-completionfeatures.\nThe result must be a string allocated by PyMem_RawMalloc() or PyMem_RawRealloc(), or NULL if an\nerroroccurred.\nChangedinversion3.4: TheresultmustbeallocatedbyPyMem_RawMalloc()orPyMem_RawRealloc(),\ninsteadofbeingallocatedbyPyMem_Malloc()orPyMem_Realloc().\nChangedinversion3.12: Thisfunctionisonlycalledfromthemaininterpreter.\nPyObject*PyRun_String(constchar*str,intstart,PyObject*globals,PyObject*locals)\nReturnvalue: Newreference. ThisisasimplifiedinterfacetoPyRun_StringFlags()below,leavingflags\nsettoNULL.\nPyObject*PyRun_StringFlags(constchar*str,intstart,PyObject*globals,PyObject*locals,PyCompilerFlags\n*flags)\nReturn value: New reference. Execute Python source code from str in the context specified by the objects\nglobals andlocals withthecompilerflagsspecifiedbyflags. globals mustbeadictionary; locals canbeany\n42 Chapter3. TheVeryHighLevelLayer\nThePython/CAPI,Release3.13.3\nobjectthatimplementsthemappingprotocol. Theparameterstartspecifiesthestarttokenthatshouldbeused\ntoparsethesourcecode.\nReturnstheresultofexecutingthecodeasaPythonobject,orNULLifanexceptionwasraised.\nPyObject*PyRun_File(FILE*fp,constchar*filename,intstart,PyObject*globals,PyObject*locals)\nReturnvalue: Newreference. ThisisasimplifiedinterfacetoPyRun_FileExFlags()below,leavingcloseit\nsetto0andflagssettoNULL.\nPyObject*PyRun_FileEx(FILE*fp,constchar*filename,intstart,PyObject*globals,PyObject*locals,int\ncloseit)\nReturnvalue: Newreference. ThisisasimplifiedinterfacetoPyRun_FileExFlags()below,leavingflags\nsettoNULL.\nPyObject*PyRun_FileFlags(FILE*fp,constchar*filename,intstart,PyObject*globals,PyObject*locals,\nPyCompilerFlags*flags)\nReturnvalue: Newreference. ThisisasimplifiedinterfacetoPyRun_FileExFlags()below,leavingcloseit\nsetto0.\nPyObject*PyRun_FileExFlags(FILE*fp,constchar*filename,intstart,PyObject*globals,PyObject*locals,\nintcloseit,PyCompilerFlags*flags)\nReturnvalue: Newreference. SimilartoPyRun_StringFlags(),butthePythonsourcecodeisreadfrom\nfpinsteadofanin-memorystring. filenameshouldbethenameofthefile,itisdecodedfromthefilesystem\nencodinganderrorhandler. Ifcloseitistrue,thefileisclosedbeforePyRun_FileExFlags()returns.\nPyObject*Py_CompileString(constchar*str,constchar*filename,intstart)\nReturn value: New reference. Part of the Stable ABI. This is a simplified interface to\nPy_CompileStringFlags()below,leavingflagssettoNULL.\nPyObject*Py_CompileStringFlags(constchar*str,constchar*filename,intstart,PyCompilerFlags*flags)\nReturnvalue: Newreference. ThisisasimplifiedinterfacetoPy_CompileStringExFlags()below,with\noptimizesetto-1.\nPyObject*Py_CompileStringObject(constchar*str,PyObject*filename,intstart,PyCompilerFlags*flags,int\noptimize)\nReturn value: New reference. Parse and compile the Python source code in str, returning the resulting code\nobject. The start token is given by start; this can be used to constrain the code which can be compiled and\nshouldbePy_eval_input,Py_file_input,orPy_single_input. Thefilenamespecifiedbyfilename\nisusedtoconstructthecodeobjectandmayappearintracebacksorSyntaxErrorexceptionmessages. This\nreturnsNULLifthecodecannotbeparsedorcompiled.\nThe integer optimize specifies the optimization level of the compiler; a value of -1 selects the optimization\nleveloftheinterpreterasgivenby-Ooptions. Explicitlevelsare0(nooptimization;__debug__istrue),1\n(assertsareremoved,__debug__isfalse)or2(docstringsareremovedtoo).\nAddedinversion3.4.\nPyObject*Py_CompileStringExFlags(constchar*str,constchar*filename,intstart,PyCompilerFlags*flags,\nintoptimize)\nReturn value: New reference. Like Py_CompileStringObject(), but filename is a byte string decoded\nfromthefilesystemencodinganderrorhandler.\nAddedinversion3.2.\nPyObject*PyEval_EvalCode(PyObject*co,PyObject*globals,PyObject*locals)\nReturnvalue:Newreference. PartoftheStableABI.ThisisasimplifiedinterfacetoPyEval_EvalCodeEx(),\nwithjustthecodeobject,andglobalandlocalvariables. TheotherargumentsaresettoNULL.\nPyObject*PyEval_EvalCodeEx(PyObject*co,PyObject*globals,PyObject*locals,PyObject*const*args,int\nargcount,PyObject*const*kws,intkwcount,PyObject*const*defs,int\ndefcount,PyObject*kwdefs,PyObject*closure)\nReturnvalue: Newreference. PartoftheStableABI.Evaluateaprecompiledcodeobject,givenaparticular\n43\nThePython/CAPI,Release3.13.3\nenvironmentforitsevaluation. Thisenvironmentconsistsofadictionaryofglobalvariables,amappingobject\noflocalvariables,arraysofarguments,keywordsanddefaults,adictionaryofdefaultvaluesforkeyword-only\nargumentsandaclosuretupleofcells.\nPyObject*PyEval_EvalFrame(PyFrameObject*f)\nReturnvalue: Newreference. PartoftheStableABI.Evaluateanexecutionframe. Thisisasimplifiedinterface\ntoPyEval_EvalFrameEx(),forbackwardcompatibility.\nPyObject*PyEval_EvalFrameEx(PyFrameObject*f,intthrowflag)\nReturn value: New reference. Part of the Stable ABI. This is the main, unvarnished function of Python in-\nterpretation. The code object associated with the execution frame f is executed, interpreting bytecode and\nexecutingcallsasneeded. Theadditionalthrowflagparametercanmostlybeignored-iftrue,thenitcauses\nanexceptiontoimmediatelybethrown;thisisusedforthethrow()methodsofgeneratorobjects.\nChangedinversion3.4: Thisfunctionnowincludesadebugassertiontohelpensurethatitdoesnotsilently\ndiscardanactiveexception.\nintPyEval_MergeCompilerFlags(PyCompilerFlags*cf)\nThisfunctionchangestheflagsofthecurrentevaluationframe,andreturnstrueonsuccess,falseonfailure.\nintPy_eval_input\nThestartsymbolfromthePythongrammarforisolatedexpressions;forusewithPy_CompileString().\nintPy_file_input\nThestartsymbolfromthePythongrammarforsequencesofstatementsasreadfromafileorothersource;for\nusewithPy_CompileString(). ThisisthesymboltousewhencompilingarbitrarilylongPythonsource\ncode.\nintPy_single_input\nThestartsymbolfromthePythongrammarforasinglestatement;forusewithPy_CompileString(). This\nisthesymbolusedfortheinteractiveinterpreterloop.\nstructPyCompilerFlags\nThisisthestructureusedtoholdcompilerflags. Incaseswherecodeisonlybeingcompiled,itispassedas\nint flags,andincaseswherecodeisbeingexecuted,itispassedasPyCompilerFlags *flags. Inthis\ncase,from __future__ importcanmodifyflags.\nWhenever PyCompilerFlags *flags is NULL, cf_flags is treated as equal to 0, and any modification\nduetofrom __future__ importisdiscarded.\nintcf_flags\nCompilerflags.\nintcf_feature_version\ncf_feature_versionistheminorPythonversion. ItshouldbeinitializedtoPY_MINOR_VERSION.\nThefieldisignoredbydefault,itisusedifandonlyifPyCF_ONLY_ASTflagissetincf_flags.\nChangedinversion3.8: Addedcf_feature_versionfield.\nTheavailablecompilerflagsareaccessibleasmacros:\nPyCF_ALLOW_TOP_LEVEL_AWAIT\nPyCF_ONLY_AST\nPyCF_OPTIMIZED_AST\nPyCF_TYPE_COMMENTS\nSeecompilerflagsindocumentationoftheastPythonmodule,whichexportstheseconstantsunderthe\nsamenames.\nintCO_FUTURE_DIVISION\nThisbitcanbesetinflagstocausedivisionoperator/tobeinterpretedas\u201ctruedivision\u201daccordingto\nPEP238.\n44 Chapter3. TheVeryHighLevelLayer\nCHAPTER\nFOUR\nREFERENCE COUNTING\nThefunctionsandmacrosinthissectionareusedformanagingreferencecountsofPythonobjects.\nPy_ssize_tPy_REFCNT(PyObject*o)\nGetthereferencecountofthePythonobjecto.\nNotethatthereturnedvaluemaynotactuallyreflecthowmanyreferencestotheobjectareactuallyheld. For\nexample,someobjectsareimmortalandhaveaveryhighrefcountthatdoesnotreflecttheactualnumberof\nreferences. Consequently,donotrelyonthereturnedvaluetobeaccurate,otherthanavalueof0or1.\nUsethePy_SET_REFCNT()functiontosetanobjectreferencecount.\nChangedinversion3.10: Py_REFCNT()ischangedtotheinlinestaticfunction.\nChangedinversion3.11: Theparametertypeisnolongerconst PyObject*.\nvoidPy_SET_REFCNT(PyObject*o,Py_ssize_trefcnt)\nSettheobjectoreferencecountertorefcnt.\nOnPythonbuildwithFreeThreading,ifrefcntislargerthanUINT32_MAX,theobjectismadeimmortal.\nThisfunctionhasnoeffectonimmortalobjects.\nAddedinversion3.9.\nChangedinversion3.12: Immortalobjectsarenotmodified.\nvoidPy_INCREF(PyObject*o)\nIndicatetakinganewstrongreferencetoobjecto,indicatingitisinuseandshouldnotbedestroyed.\nThisfunctionhasnoeffectonimmortalobjects.\nThisfunctionisusuallyusedtoconvertaborrowedreferencetoastrongreferencein-place. ThePy_NewRef()\nfunctioncanbeusedtocreateanewstrongreference.\nWhendoneusingtheobject,releaseisbycallingPy_DECREF().\nTheobjectmustnotbeNULL;ifyouaren\u2019tsurethatitisn\u2019tNULL,usePy_XINCREF().\nDonotexpectthisfunctiontoactuallymodifyoinanyway. Foratleastsomeobjects,thisfunctionhasno\neffect.\nChangedinversion3.12: Immortalobjectsarenotmodified.\nvoidPy_XINCREF(PyObject*o)\nSimilartoPy_INCREF(),buttheobjectocanbeNULL,inwhichcasethishasnoeffect.\nSeealsoPy_XNewRef().\nPyObject*Py_NewRef(PyObject*o)\nPartoftheStableABIsinceversion3.10. Createanewstrongreferencetoanobject: callPy_INCREF()ono\nandreturntheobjecto.\nWhenthestrongreferenceisnolongerneeded,Py_DECREF()shouldbecalledonittoreleasethereference.\nTheobjectomustnotbeNULL;usePy_XNewRef()ifocanbeNULL.\n45\nThePython/CAPI,Release3.13.3\nForexample:\nPy_INCREF(obj);\nself->attr = obj;\ncanbewrittenas:\nself->attr = Py_NewRef(obj);\nSeealsoPy_INCREF().\nAddedinversion3.10.\nPyObject*Py_XNewRef(PyObject*o)\nPartoftheStableABIsinceversion3.10. SimilartoPy_NewRef(),buttheobjectocanbeNULL.\nIftheobjectoisNULL,thefunctionjustreturnsNULL.\nAddedinversion3.10.\nvoidPy_DECREF(PyObject*o)\nReleaseastrongreferencetoobjecto,indicatingthereferenceisnolongerused.\nThisfunctionhasnoeffectonimmortalobjects.\nOncethelaststrongreferenceisreleased(i.e. theobject\u2019sreferencecountreaches0),theobject\u2019stype\u2019sdeal-\nlocationfunction(whichmustnotbeNULL)isinvoked.\nThisfunctionisusuallyusedtodeleteastrongreferencebeforeexitingitsscope.\nTheobjectmustnotbeNULL;ifyouaren\u2019tsurethatitisn\u2019tNULL,usePy_XDECREF().\nDonotexpectthisfunctiontoactuallymodifyoinanyway. Foratleastsomeobjects,thisfunctionhasno\neffect.\n(cid:193) Warning\nThedeallocationfunctioncancausearbitraryPythoncodetobeinvoked(e.g. whenaclassinstancewitha\n__del__()methodisdeallocated). Whileexceptionsinsuchcodearenotpropagated,theexecutedcode\nhasfreeaccesstoallPythonglobalvariables. Thismeansthatanyobjectthatisreachablefromaglobal\nvariableshouldbeinaconsistentstatebeforePy_DECREF()isinvoked. Forexample,codetodeletean\nobjectfromalistshouldcopyareferencetothedeletedobjectinatemporaryvariable,updatethelistdata\nstructure,andthencallPy_DECREF()forthetemporaryvariable.\nChangedinversion3.12: Immortalobjectsarenotmodified.\nvoidPy_XDECREF(PyObject*o)\nSimilartoPy_DECREF(),buttheobjectocanbeNULL,inwhichcasethishasnoeffect. Thesamewarning\nfromPy_DECREF()applieshereaswell.\nvoidPy_CLEAR(PyObject*o)\nRelease a strong reference for object o. The object may be NULL, in which case the macro has no effect;\notherwise the effect is the same as for Py_DECREF(), except that the argument is also set to NULL. The\nwarningforPy_DECREF()doesnotapplywithrespecttotheobjectpassedbecausethemacrocarefullyuses\natemporaryvariableandsetstheargumenttoNULLbeforereleasingthereference.\nItisagoodideatousethismacrowheneverreleasingareferencetoanobjectthatmightbetraversedduring\ngarbagecollection.\nChangedinversion3.12: Themacroargumentisnowonlyevaluatedonce. Iftheargumenthassideeffects,\nthesearenolongerduplicated.\n46 Chapter4. ReferenceCounting\nThePython/CAPI,Release3.13.3\nvoidPy_IncRef(PyObject*o)\nPart of the Stable ABI. Indicate taking a new strong reference to object o. A function version of\nPy_XINCREF(). ItcanbeusedforruntimedynamicembeddingofPython.\nvoidPy_DecRef(PyObject*o)\nPartoftheStableABI.Releaseastrongreferencetoobjecto. AfunctionversionofPy_XDECREF(). Itcan\nbeusedforruntimedynamicembeddingofPython.\nPy_SETREF(dst,src)\nMacrosafelyreleasingastrongreferencetoobjectdstandsettingdsttosrc.\nAsincaseofPy_CLEAR(),\u201ctheobvious\u201dcodecanbedeadly:\nPy_DECREF(dst);\ndst = src;\nThesafewayis:\nPy_SETREF(dst, src);\nThatarrangestosetdsttosrc_before_releasingthereferencetotheoldvalueofdst,sothatanycodetriggered\nasaside-effectofdstgettingtorndownnolongerbelievesdstpointstoavalidobject.\nAddedinversion3.6.\nChangedinversion3.12: Themacroargumentsarenowonlyevaluatedonce. Ifanargumenthassideeffects,\nthesearenolongerduplicated.\nPy_XSETREF(dst,src)\nVariantofPy_SETREFmacrothatusesPy_XDECREF()insteadofPy_DECREF().\nAddedinversion3.6.\nChangedinversion3.12: Themacroargumentsarenowonlyevaluatedonce. Ifanargumenthassideeffects,\nthesearenolongerduplicated.\n47\nThePython/CAPI,Release3.13.3\n48 Chapter4. ReferenceCounting\nCHAPTER\nFIVE\nEXCEPTION HANDLING\nThefunctionsdescribedinthischapterwillletyouhandleandraisePythonexceptions. Itisimportanttounderstand\nsome of the basics of Python exception handling. It works somewhat like the POSIX errno variable: there is a\nglobalindicator(perthread)ofthelasterrorthatoccurred. MostCAPIfunctionsdon\u2019tclearthisonsuccess,butwill\nsetittoindicatethecauseoftheerroronfailure. MostCAPIfunctionsalsoreturnanerrorindicator,usuallyNULL\niftheyaresupposedtoreturnapointer,or-1iftheyreturnaninteger(exception: thePyArg_*functionsreturn1\nforsuccessand0forfailure).\nConcretely,theerrorindicatorconsistsofthreeobjectpointers: theexception\u2019stype,theexception\u2019svalue,andthe\ntraceback object. Any of those pointers can be NULL if non-set (although some combinations are forbidden, for\nexampleyoucan\u2019thaveanon-NULLtracebackiftheexceptiontypeisNULL).\nWhen a function must fail because some function it called failed, it generally doesn\u2019t set the error indicator; the\nfunctionitcalledalreadysetit. Itisresponsibleforeitherhandlingtheerrorandclearingtheexceptionorreturning\nafter cleaning up any resources it holds (such as object references or memory allocations); it should not continue\nnormallyifitisnotpreparedtohandletheerror. Ifreturningduetoanerror,itisimportanttoindicatetothecaller\nthatanerrorhasbeenset. Iftheerrorisnothandledorcarefullypropagated,additionalcallsintothePython/CAPI\nmaynotbehaveasintendedandmayfailinmysteriousways.\n(cid:174) Note\nTheerrorindicatorisnottheresultofsys.exc_info(). Theformercorrespondstoanexceptionthatisnotyet\ncaught(andisthereforestillpropagating),whilethelatterreturnsanexceptionafteritiscaught(andhastherefore\nstoppedpropagating).\n5.1 Printing and clearing\nvoidPyErr_Clear()\nPartoftheStableABI.Cleartheerrorindicator. Iftheerrorindicatorisnotset,thereisnoeffect.\nvoidPyErr_PrintEx(intset_sys_last_vars)\nPartoftheStableABI.Printastandardtracebacktosys.stderrandcleartheerrorindicator. Unlessthe\nerror is a SystemExit, in that case no traceback is printed and the Python process will exit with the error\ncodespecifiedbytheSystemExitinstance.\nCallthisfunctiononlywhentheerrorindicatorisset. Otherwiseitwillcauseafatalerror!\nIf set_sys_last_vars is nonzero, the variable sys.last_exc is set to the printed exception. For backwards\ncompatibility, the deprecated variables sys.last_type, sys.last_value and sys.last_traceback\narealsosettothetype,valueandtracebackofthisexception,respectively.\nChangedinversion3.12: Thesettingofsys.last_excwasadded.\nvoidPyErr_Print()\nPartoftheStableABI.AliasforPyErr_PrintEx(1).\n49\nThePython/CAPI,Release3.13.3\nvoidPyErr_WriteUnraisable(PyObject*obj)\nPartoftheStableABI.Callsys.unraisablehook()usingthecurrentexceptionandobjargument.\nThisutilityfunctionprintsawarningmessagetosys.stderrwhenanexceptionhasbeensetbutitisim-\npossiblefortheinterpretertoactuallyraisetheexception. Itisused,forexample,whenanexceptionoccurs\ninan__del__()method.\nThefunctioniscalledwithasingleargumentobjthatidentifiesthecontextinwhichtheunraisableexception\noccurred. Ifpossible,thereprofobjwillbeprintedinthewarningmessage. IfobjisNULL,onlythetraceback\nisprinted.\nAnexceptionmustbesetwhencallingthisfunction.\nChangedinversion3.4: Printatraceback. PrintonlytracebackifobjisNULL.\nChangedinversion3.8: Usesys.unraisablehook().\nvoidPyErr_FormatUnraisable(constchar*format,...)\nSimilar to PyErr_WriteUnraisable(), but the format and subsequent parameters help format\nthe warning message; they have the same meaning and values as in PyUnicode_FromFormat().\nPyErr_WriteUnraisable(obj) is roughly equivalent to PyErr_FormatUnraisable(\"Exception\nignored in: %R\", obj). IfformatisNULL,onlythetracebackisprinted.\nAddedinversion3.13.\nvoidPyErr_DisplayException(PyObject*exc)\nPart of the Stable ABI since version 3.12. Print the standard traceback display of exc to sys.stderr, in-\ncludingchainedexceptionsandnotes.\nAddedinversion3.12.\n5.2 Raising exceptions\nThesefunctionshelpyousetthecurrentthread\u2019serrorindicator. Forconvenience,someofthesefunctionswillalways\nreturnaNULLpointerforuseinareturnstatement.\nvoidPyErr_SetString(PyObject*type,constchar*message)\nPartoftheStableABI.Thisisthemostcommonwaytosettheerrorindicator. Thefirstargumentspecifies\ntheexceptiontype;itisnormallyoneofthestandardexceptions,e.g. PyExc_RuntimeError. Youneednot\ncreateanewstrongreferencetoit(e.g. withPy_INCREF()). Thesecondargumentisanerrormessage;itis\ndecodedfrom'utf-8'.\nvoidPyErr_SetObject(PyObject*type,PyObject*value)\nPart of the Stable ABI. This function is similar to PyErr_SetString() but lets you specify an arbitrary\nPythonobjectforthe\u201cvalue\u201doftheexception.\nPyObject*PyErr_Format(PyObject*exception,constchar*format,...)\nReturnvalue: AlwaysNULL.PartoftheStableABI.ThisfunctionsetstheerrorindicatorandreturnsNULL.\nexception should be a Python exception class. The format and subsequent parameters help format the error\nmessage; they have the same meaning and values as in PyUnicode_FromFormat(). format is an ASCII-\nencodedstring.\nPyObject*PyErr_FormatV(PyObject*exception,constchar*format,va_listvargs)\nReturnvalue: AlwaysNULL.PartoftheStableABIsinceversion3.5. SameasPyErr_Format(),buttaking\nava_listargumentratherthanavariablenumberofarguments.\nAddedinversion3.5.\nvoidPyErr_SetNone(PyObject*type)\nPartoftheStableABI.ThisisashorthandforPyErr_SetObject(type, Py_None).\n50 Chapter5. ExceptionHandling\nThePython/CAPI,Release3.13.3\nintPyErr_BadArgument()\nPartoftheStableABI.ThisisashorthandforPyErr_SetString(PyExc_TypeError, message),where\nmessageindicatesthatabuilt-inoperationwasinvokedwithanillegalargument. Itismostlyforinternaluse.\nPyObject*PyErr_NoMemory()\nReturn value: Always NULL. Part of the Stable ABI. This is a shorthand for\nPyErr_SetNone(PyExc_MemoryError); it returns NULL so an object allocation function can write\nreturn PyErr_NoMemory();whenitrunsoutofmemory.\nPyObject*PyErr_SetFromErrno(PyObject*type)\nReturnvalue: AlwaysNULL.PartoftheStableABI.Thisisaconveniencefunctiontoraiseanexceptionwhen\na C library function has returned an error and set the C variable errno. It constructs a tuple object whose\nfirstitemistheintegererrnovalueandwhoseseconditemisthecorrespondingerrormessage(gottenfrom\nstrerror()), and then calls PyErr_SetObject(type, object). On Unix, when the errno value is\nEINTR, indicating an interrupted system call, this calls PyErr_CheckSignals(), and if that set the error\nindicator,leavesitsettothat. ThefunctionalwaysreturnsNULL,soawrapperfunctionaroundasystemcall\ncanwritereturn PyErr_SetFromErrno(type);whenthesystemcallreturnsanerror.\nPyObject*PyErr_SetFromErrnoWithFilenameObject(PyObject*type,PyObject*filenameObject)\nReturnvalue: AlwaysNULL.PartoftheStableABI.SimilartoPyErr_SetFromErrno(),withtheadditional\nbehaviorthatiffilenameObjectisnotNULL,itispassedtotheconstructoroftypeasathirdparameter. Inthe\ncaseofOSErrorexception,thisisusedtodefinethefilenameattributeoftheexceptioninstance.\nPyObject*PyErr_SetFromErrnoWithFilenameObjects(PyObject*type,PyObject*filenameObject,\nPyObject*filenameObject2)\nReturn value: Always NULL. Part of the Stable ABI since version 3.7. Similar to\nPyErr_SetFromErrnoWithFilenameObject(), but takes a second filename object, for raising\nerrorswhenafunctionthattakestwofilenamesfails.\nAddedinversion3.4.\nPyObject*PyErr_SetFromErrnoWithFilename(PyObject*type,constchar*filename)\nReturn value: Always NULL. Part of the Stable ABI. Similar to\nPyErr_SetFromErrnoWithFilenameObject(), but the filename is given as a C string. filename\nisdecodedfromthefilesystemencodinganderrorhandler.\nPyObject*PyErr_SetFromWindowsErr(intierr)\nReturn value: Always NULL. Part of the Stable ABI on Windows since version 3.7. This is a convenience\nfunctiontoraiseOSError. Ifcalledwithierrof0,theerrorcodereturnedbyacalltoGetLastError()is\nusedinstead. ItcallstheWin32functionFormatMessage()toretrievetheWindowsdescriptionoferrorcode\ngivenbyierrorGetLastError(),thenitconstructsaOSErrorobjectwiththewinerrorattributesettothe\nerrorcode,thestrerrorattributesettothecorrespondingerrormessage(gottenfromFormatMessage()),\nandthencallsPyErr_SetObject(PyExc_OSError, object). ThisfunctionalwaysreturnsNULL.\nAvailability: Windows.\nPyObject*PyErr_SetExcFromWindowsErr(PyObject*type,intierr)\nReturn value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to\nPyErr_SetFromWindowsErr(),withanadditionalparameterspecifyingtheexceptiontypetoberaised.\nAvailability: Windows.\nPyObject*PyErr_SetFromWindowsErrWithFilename(intierr,constchar*filename)\nReturn value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to\nPyErr_SetFromWindowsErr(), with the additional behavior that if filename is not NULL, it is decoded\nfromthefilesystemencoding(os.fsdecode())andpassedtotheconstructorofOSErrorasathirdparam-\netertobeusedtodefinethefilenameattributeoftheexceptioninstance.\nAvailability: Windows.\nPyObject*PyErr_SetExcFromWindowsErrWithFilenameObject(PyObject*type,intierr,PyObject\n*filename)\n5.2. Raisingexceptions 51\nThePython/CAPI,Release3.13.3\nReturn value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to\nPyErr_SetExcFromWindowsErr(),withtheadditionalbehaviorthatiffilenameisnotNULL,itispassedto\ntheconstructorofOSErrorasathirdparametertobeusedtodefinethefilenameattributeoftheexception\ninstance.\nAvailability: Windows.\nPyObject*PyErr_SetExcFromWindowsErrWithFilenameObjects(PyObject*type,intierr,PyObject\n*filename,PyObject*filename2)\nReturn value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to\nPyErr_SetExcFromWindowsErrWithFilenameObject(),butacceptsasecondfilenameobject.\nAvailability: Windows.\nAddedinversion3.4.\nPyObject*PyErr_SetExcFromWindowsErrWithFilename(PyObject*type,intierr,constchar*filename)\nReturn value: Always NULL. Part of the Stable ABI on Windows since version 3.7. Similar to\nPyErr_SetFromWindowsErrWithFilename(), with an additional parameter specifying the exception\ntypetoberaised.\nAvailability: Windows.\nPyObject*PyErr_SetImportError(PyObject*msg,PyObject*name,PyObject*path)\nReturnvalue: AlwaysNULL.PartoftheStableABIsinceversion3.7. Thisisaconveniencefunctiontoraise\nImportError. msgwillbesetastheexception\u2019smessagestring. nameandpath,bothofwhichcanbeNULL,\nwillbesetastheImportError\u2019srespectivenameandpathattributes.\nAddedinversion3.3.\nPyObject*PyErr_SetImportErrorSubclass(PyObject*exception,PyObject*msg,PyObject*name,PyObject\n*path)\nReturnvalue: AlwaysNULL.PartoftheStableABIsinceversion3.6. MuchlikePyErr_SetImportError()\nbutthisfunctionallowsforspecifyingasubclassofImportErrortoraise.\nAddedinversion3.6.\nvoidPyErr_SyntaxLocationObject(PyObject*filename,intlineno,intcol_offset)\nSetfile,line,andoffsetinformationforthecurrentexception. IfthecurrentexceptionisnotaSyntaxError,\nthen it sets additional attributes, which make the exception printing subsystem think the exception is a\nSyntaxError.\nAddedinversion3.4.\nvoidPyErr_SyntaxLocationEx(constchar*filename,intlineno,intcol_offset)\nPartoftheStableABIsinceversion3.7. LikePyErr_SyntaxLocationObject(), butfilenameisabyte\nstringdecodedfromthefilesystemencodinganderrorhandler.\nAddedinversion3.2.\nvoidPyErr_SyntaxLocation(constchar*filename,intlineno)\nPartoftheStableABI.LikePyErr_SyntaxLocationEx(),butthecol_offsetparameterisomitted.\nvoidPyErr_BadInternalCall()\nPart of the Stable ABI. This is a shorthand for PyErr_SetString(PyExc_SystemError, message),\nwheremessageindicatesthataninternaloperation(e.g. aPython/CAPIfunction)wasinvokedwithanillegal\nargument. Itismostlyforinternaluse.\n5.3 Issuing warnings\nUsethesefunctionstoissuewarningsfromCcode. TheymirrorsimilarfunctionsexportedbythePythonwarnings\nmodule. Theynormallyprintawarningmessagetosys.stderr;however,itisalsopossiblethattheuserhasspecified\n52 Chapter5. ExceptionHandling\nThePython/CAPI,Release3.13.3\nthatwarningsaretobeturnedintoerrors, andinthatcasetheywillraiseanexception. Itisalsopossiblethatthe\nfunctionsraiseanexceptionbecauseofaproblemwiththewarningmachinery. Thereturnvalueis0ifnoexception\nisraised,or-1ifanexceptionisraised. (Itisnotpossibletodeterminewhetherawarningmessageisactuallyprinted,\nnorwhatthereasonisfortheexception;thisisintentional.) Ifanexceptionisraised,thecallershoulddoitsnormal\nexceptionhandling(forexample,Py_DECREF()ownedreferencesandreturnanerrorvalue).\nintPyErr_WarnEx(PyObject*category,constchar*message,Py_ssize_tstack_level)\nPart of the Stable ABI. Issue a warning message. The category argument is a warning category (see below)\norNULL;themessageargumentisaUTF-8encodedstring. stack_levelisapositivenumbergivinganumber\nofstackframes; thewarningwillbeissuedfromthecurrentlyexecutinglineofcodeinthatstackframe. A\nstack_levelof1isthefunctioncallingPyErr_WarnEx(),2isthefunctionabovethat,andsoforth.\nWarning categories must be subclasses of PyExc_Warning; PyExc_Warning is a subclass of\nPyExc_Exception;thedefaultwarningcategoryisPyExc_RuntimeWarning. ThestandardPythonwarn-\ningcategoriesareavailableasglobalvariableswhosenamesareenumeratedatStandardWarningCategories.\nForinformationaboutwarningcontrol,seethedocumentationforthewarningsmoduleandthe-Woptionin\nthecommandlinedocumentation. ThereisnoCAPIforwarningcontrol.\nintPyErr_WarnExplicitObject(PyObject*category,PyObject*message,PyObject*filename,intlineno,\nPyObject*module,PyObject*registry)\nIssue a warning message with explicit control over all warning attributes. This is a straightforward wrapper\naroundthePythonfunctionwarnings.warn_explicit();seethereformoreinformation. Themoduleand\nregistryargumentsmaybesettoNULLtogetthedefaulteffectdescribedthere.\nAddedinversion3.4.\nintPyErr_WarnExplicit(PyObject*category,constchar*message,constchar*filename,intlineno,constchar\n*module,PyObject*registry)\nPart of the Stable ABI. Similar to PyErr_WarnExplicitObject() except that message and module are\nUTF-8encodedstrings,andfilenameisdecodedfromthefilesystemencodinganderrorhandler.\nintPyErr_WarnFormat(PyObject*category,Py_ssize_tstack_level,constchar*format,...)\nPartoftheStableABI.FunctionsimilartoPyErr_WarnEx(),butusePyUnicode_FromFormat()toformat\nthewarningmessage. formatisanASCII-encodedstring.\nAddedinversion3.2.\nintPyErr_ResourceWarning(PyObject*source,Py_ssize_tstack_level,constchar*format,...)\nPart of the Stable ABI since version 3.6. Function similar to PyErr_WarnFormat(), but category is\nResourceWarninganditpassessourcetowarnings.WarningMessage.\nAddedinversion3.6.\n5.4 Querying the error indicator\nPyObject*PyErr_Occurred()\nReturn value: Borrowed reference. Part of the Stable ABI. Test whether the error indicator is set. If set,\nreturn the exception type (the first argument to the last call to one of the PyErr_Set* functions or to\nPyErr_Restore()). If not set, return NULL. You do not own a reference to the return value, so you do\nnotneedtoPy_DECREF()it.\nThecallermustholdtheGIL.\n(cid:174) Note\nDo not compare the return value to a specific exception; use PyErr_ExceptionMatches() instead,\nshownbelow. (Thecomparisoncouldeasilyfailsincetheexceptionmaybeaninstanceinsteadofaclass,\ninthecaseofaclassexception,oritmaybeasubclassoftheexpectedexception.)\n5.4. Queryingtheerrorindicator 53\nThePython/CAPI,Release3.13.3\nintPyErr_ExceptionMatches(PyObject*exc)\nPart of the Stable ABI. Equivalent to PyErr_GivenExceptionMatches(PyErr_Occurred(), exc).\nThisshouldonlybecalledwhenanexceptionisactuallyset; amemoryaccessviolationwilloccurifnoex-\nceptionhasbeenraised.\nintPyErr_GivenExceptionMatches(PyObject*given,PyObject*exc)\nPartoftheStableABI.Returntrueifthegivenexceptionmatchestheexceptiontypeinexc. Ifexcisaclass\nobject,thisalsoreturnstruewhengivenisaninstanceofasubclass. Ifexcisatuple,allexceptiontypesinthe\ntuple(andrecursivelyinsubtuples)aresearchedforamatch.\nPyObject*PyErr_GetRaisedException(void)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.12. Returntheexceptioncurrentlybeing\nraised,clearingtheerrorindicatoratthesametime. ReturnNULLiftheerrorindicatorisnotset.\nThisfunctionisusedbycodethatneedstocatchexceptions,orcodethatneedstosaveandrestoretheerror\nindicatortemporarily.\nForexample:\n{\nPyObject *exc = PyErr_GetRaisedException();\n/* ... code that might produce other errors ... */\nPyErr_SetRaisedException(exc);\n}\n(cid:181) Seealso\nPyErr_GetHandledException(),tosavetheexceptioncurrentlybeinghandled.\nAddedinversion3.12.\nvoidPyErr_SetRaisedException(PyObject*exc)\nPartoftheStableABIsinceversion3.12. Setexcastheexceptioncurrentlybeingraised,clearingtheexisting\nexceptionifoneisset.\n(cid:193) Warning\nThiscallstealsareferencetoexc,whichmustbeavalidexception.\nAddedinversion3.12.\nvoidPyErr_Fetch(PyObject**ptype,PyObject**pvalue,PyObject**ptraceback)\nPartoftheStableABI.Deprecatedsinceversion3.12: UsePyErr_GetRaisedException()instead.\nRetrievetheerrorindicatorintothreevariableswhoseaddressesarepassed. Iftheerrorindicatorisnotset,\nsetallthreevariablestoNULL.Ifitisset,itwillbeclearedandyouownareferencetoeachobjectretrieved.\nThevalueandtracebackobjectmaybeNULLevenwhenthetypeobjectisnot.\n(cid:174) Note\nThisfunctionisnormallyonlyusedbylegacycodethatneedstocatchexceptionsorsaveandrestorethe\nerrorindicatortemporarily.\nForexample:\n54 Chapter5. ExceptionHandling\nThePython/CAPI,Release3.13.3\n{\nPyObject *type, *value, *traceback;\nPyErr_Fetch(&type, &value, &traceback);\n/* ... code that might produce other errors ... */\nPyErr_Restore(type, value, traceback);\n}\nvoidPyErr_Restore(PyObject*type,PyObject*value,PyObject*traceback)\nPartoftheStableABI.Deprecatedsinceversion3.12: UsePyErr_SetRaisedException()instead.\nSettheerrorindicatorfromthethreeobjects,type,value,andtraceback,clearingtheexistingexceptionifone\nisset. IftheobjectsareNULL,theerrorindicatoriscleared. DonotpassaNULLtypeandnon-NULLvalueor\ntraceback. Theexceptiontypeshouldbeaclass. Donotpassaninvalidexceptiontypeorvalue. (Violating\ntheseruleswillcausesubtleproblemslater.) Thiscalltakesawayareferencetoeachobject: youmustown\nareferencetoeachobjectbeforethecallandafterthecallyounolongerownthesereferences. (Ifyoudon\u2019t\nunderstandthis,don\u2019tusethisfunction. Iwarnedyou.)\n(cid:174) Note\nThisfunctionisnormallyonlyusedbylegacycodethatneedstosaveandrestoretheerrorindicatortem-\nporarily. UsePyErr_Fetch()tosavethecurrenterrorindicator.\nvoidPyErr_NormalizeException(PyObject**exc,PyObject**val,PyObject**tb)\nPart of the Stable ABI. Deprecated since version 3.12: Use PyErr_GetRaisedException() instead, to\navoidanypossiblede-normalization.\nUndercertaincircumstances,thevaluesreturnedbyPyErr_Fetch()belowcanbe\u201cunnormalized\u201d,meaning\nthat*excisaclassobjectbut*valisnotaninstanceofthesameclass. Thisfunctioncanbeusedtoinstantiate\nthe class in that case. If the values are already normalized, nothing happens. The delayed normalization is\nimplementedtoimproveperformance.\n(cid:174) Note\nThisfunctiondoesnot implicitlysetthe__traceback__attributeontheexceptionvalue. Ifsettingthe\ntracebackappropriatelyisdesired,thefollowingadditionalsnippetisneeded:\nif (tb != NULL) {\nPyException_SetTraceback(val, tb);\n}\nPyObject*PyErr_GetHandledException(void)\nPart of the Stable ABI since version 3.11. Retrieve the active exception instance, as would be returned by\nsys.exception(). Thisreferstoanexceptionthatwasalreadycaught,nottoanexceptionthatwasfreshly\nraised. ReturnsanewreferencetotheexceptionorNULL.Doesnotmodifytheinterpreter\u2019sexceptionstate.\n(cid:174) Note\nThisfunctionisnotnormallyusedbycodethatwantstohandleexceptions. Rather,itcanbeusedwhen\ncodeneedstosaveandrestoretheexceptionstatetemporarily. UsePyErr_SetHandledException()\ntorestoreorcleartheexceptionstate.\nAddedinversion3.11.\n5.4. Queryingtheerrorindicator 55\nThePython/CAPI,Release3.13.3\nvoidPyErr_SetHandledException(PyObject*exc)\nPartoftheStableABIsinceversion3.11. Settheactiveexception,asknownfromsys.exception(). This\nreferstoanexceptionthatwasalreadycaught,nottoanexceptionthatwasfreshlyraised. Tocleartheexception\nstate,passNULL.\n(cid:174) Note\nThisfunctionisnotnormallyusedbycodethatwantstohandleexceptions. Rather,itcanbeusedwhen\ncodeneedstosaveandrestoretheexceptionstatetemporarily. UsePyErr_GetHandledException()\ntogettheexceptionstate.\nAddedinversion3.11.\nvoidPyErr_GetExcInfo(PyObject**ptype,PyObject**pvalue,PyObject**ptraceback)\nPart of the Stable ABI since version 3.7. Retrieve the old-style representation of the exception info, as\nknown from sys.exc_info(). This refers to an exception that was already caught, not to an excep-\ntion that was freshly raised. Returns new references for the three objects, any of which may be NULL.\nDoes not modify the exception info state. This function is kept for backwards compatibility. Prefer using\nPyErr_GetHandledException().\n(cid:174) Note\nThisfunctionisnotnormallyusedbycodethatwantstohandleexceptions. Rather,itcanbeusedwhen\ncodeneedstosaveandrestoretheexceptionstatetemporarily. UsePyErr_SetExcInfo()torestoreor\ncleartheexceptionstate.\nAddedinversion3.3.\nvoidPyErr_SetExcInfo(PyObject*type,PyObject*value,PyObject*traceback)\nPartoftheStableABIsinceversion3.7. Settheexceptioninfo,asknownfromsys.exc_info(). Thisrefers\ntoanexceptionthatwasalreadycaught,nottoanexceptionthatwasfreshlyraised. Thisfunctionstealsthe\nreferencesofthearguments. Tocleartheexceptionstate,passNULLforallthreearguments. Thisfunctionis\nkeptforbackwardscompatibility. PreferusingPyErr_SetHandledException().\n(cid:174) Note\nThisfunctionisnotnormallyusedbycodethatwantstohandleexceptions. Rather,itcanbeusedwhen\ncodeneedstosaveandrestoretheexceptionstatetemporarily. UsePyErr_GetExcInfo()toreadthe\nexceptionstate.\nAddedinversion3.3.\nChangedinversion3.11: ThetypeandtracebackargumentsarenolongerusedandcanbeNULL.The\ninterpreter now derives them from the exception instance (the value argument). The function still steals\nreferencesofallthreearguments.\n5.5 Signal Handling\nintPyErr_CheckSignals()\nPartoftheStableABI.ThisfunctioninteractswithPython\u2019ssignalhandling.\nIfthefunctioniscalledfromthemainthreadandunderthemainPythoninterpreter,itcheckswhetherasignal\nhasbeensenttotheprocessesandifso,invokesthecorrespondingsignalhandler. Ifthesignalmoduleis\nsupported,thiscaninvokeasignalhandlerwritteninPython.\n56 Chapter5. ExceptionHandling\nThePython/CAPI,Release3.13.3\nThefunctionattemptstohandleallpendingsignals,andthenreturns0. However,ifaPythonsignalhandler\nraisesanexception,theerrorindicatorissetandthefunctionreturns-1immediately(suchthatotherpending\nsignalsmaynothavebeenhandledyet: theywillbeonthenextPyErr_CheckSignals()invocation).\nIfthefunctioniscalledfromanon-mainthread,orunderanon-mainPythoninterpreter,itdoesnothingand\nreturns0.\nThisfunctioncanbecalledbylong-runningCcodethatwantstobeinterruptiblebyuserrequests(suchasby\npressingCtrl-C).\n(cid:174) Note\nThedefaultPythonsignalhandlerforSIGINTraisestheKeyboardInterruptexception.\nvoidPyErr_SetInterrupt()\nPart of the Stable ABI. Simulate the effect of a SIGINT signal arriving. This is equivalent to\nPyErr_SetInterruptEx(SIGINT).\n(cid:174) Note\nThisfunctionisasync-signal-safe. ItcanbecalledwithouttheGILandfromaCsignalhandler.\nintPyErr_SetInterruptEx(intsignum)\nPart of the Stable ABI since version 3.10. Simulate the effect of a signal arriving. The next time\nPyErr_CheckSignals()iscalled,thePythonsignalhandlerforthegivensignalnumberwillbecalled.\nThisfunctioncanbecalledbyCcodethatsetsupitsownsignalhandlingandwantsPythonsignalhandlers\nto be invoked as expected when an interruption is requested (for example when the user presses Ctrl-C to\ninterruptanoperation).\nIfthegivensignalisn\u2019thandledbyPython(itwassettosignal.SIG_DFLorsignal.SIG_IGN),itwillbe\nignored.\nIf signum is outside of the allowed range of signal numbers, -1 is returned. Otherwise, 0 is returned. The\nerrorindicatorisneverchangedbythisfunction.\n(cid:174) Note\nThisfunctionisasync-signal-safe. ItcanbecalledwithouttheGILandfromaCsignalhandler.\nAddedinversion3.10.\nintPySignal_SetWakeupFd(intfd)\nThisutilityfunctionspecifiesafiledescriptortowhichthesignalnumberiswrittenasasinglebytewhenever\nasignalisreceived. fdmustbenon-blocking. Itreturnstheprevioussuchfiledescriptor.\nThevalue-1disablesthefeature;thisistheinitialstate. Thisisequivalenttosignal.set_wakeup_fd()\ninPython,butwithoutanyerrorchecking. fd shouldbeavalidfiledescriptor. Thefunctionshouldonlybe\ncalledfromthemainthread.\nChangedinversion3.5: OnWindows,thefunctionnowalsosupportssockethandles.\n5.6 Exception Classes\nPyObject*PyErr_NewException(constchar*name,PyObject*base,PyObject*dict)\nReturnvalue: Newreference. PartoftheStableABI.Thisutilityfunctioncreatesandreturnsanewexception\nclass. Thenameargumentmustbethenameofthenewexception,aCstringoftheformmodule.classname.\n5.6. ExceptionClasses 57\nThePython/CAPI,Release3.13.3\nThebaseanddictargumentsarenormallyNULL.ThiscreatesaclassobjectderivedfromException(acces-\nsibleinCasPyExc_Exception).\nThe__module__attributeofthenewclassissettothefirstpart(uptothelastdot)ofthenameargument,\nandtheclassnameissettothelastpart(afterthelastdot). Thebaseargumentcanbeusedtospecifyalternate\nbaseclasses;itcaneitherbeonlyoneclassoratupleofclasses. Thedict argumentcanbeusedtospecifya\ndictionaryofclassvariablesandmethods.\nPyObject*PyErr_NewExceptionWithDoc(constchar*name,constchar*doc,PyObject*base,PyObject*dict)\nReturnvalue: Newreference. PartoftheStableABI.SameasPyErr_NewException(),exceptthatthenew\nexception class can easily be given a docstring: If doc is non-NULL, it will be used as the docstring for the\nexceptionclass.\nAddedinversion3.2.\n5.7 Exception Objects\nPyObject*PyException_GetTraceback(PyObject*ex)\nReturn value: New reference. Part of the Stable ABI. Return the traceback associated with the exception as\nanewreference, asaccessiblefromPythonthroughthe__traceback__attribute. Ifthereisnotraceback\nassociated,thisreturnsNULL.\nintPyException_SetTraceback(PyObject*ex,PyObject*tb)\nPartoftheStableABI.Setthetracebackassociatedwiththeexceptiontotb. UsePy_Nonetoclearit.\nPyObject*PyException_GetContext(PyObject*ex)\nReturn value: New reference. Part of the Stable ABI. Return the context (another exception instance during\nwhose handling ex was raised) associated with the exception as a new reference, as accessible from Python\nthroughthe__context__attribute. Ifthereisnocontextassociated,thisreturnsNULL.\nvoidPyException_SetContext(PyObject*ex,PyObject*ctx)\nPartoftheStableABI.Setthecontextassociatedwiththeexceptiontoctx. UseNULLtoclearit. Thereisno\ntypechecktomakesurethatctxisanexceptioninstance. Thisstealsareferencetoctx.\nPyObject*PyException_GetCause(PyObject*ex)\nReturnvalue: Newreference. PartoftheStableABI.Returnthecause(eitheranexceptioninstance,orNone,\nsetbyraise ... from ...)associatedwiththeexceptionasanewreference,asaccessiblefromPython\nthroughthe__cause__attribute.\nvoidPyException_SetCause(PyObject*ex,PyObject*cause)\nPartoftheStableABI.Setthecauseassociatedwiththeexceptiontocause. UseNULLtoclearit. Thereisno\ntypechecktomakesurethatcauseiseitheranexceptioninstanceorNone. Thisstealsareferencetocause.\nThe__suppress_context__attributeisimplicitlysettoTruebythisfunction.\nPyObject*PyException_GetArgs(PyObject*ex)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.12. Returnargsofexceptionex.\nvoidPyException_SetArgs(PyObject*ex,PyObject*args)\nPartoftheStableABIsinceversion3.12. Setargsofexceptionextoargs.\nPyObject*PyUnstable_Exc_PrepReraiseStar(PyObject*orig,PyObject*excs)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nImplementpartoftheinterpreter\u2019simplementationofexcept*. origistheoriginalexceptionthatwascaught,\nandexcsisthelistoftheexceptionsthatneedtoberaised. Thislistcontainstheunhandledpartoforig,ifany,\naswellastheexceptionsthatwereraisedfromtheexcept*clauses(sotheyhaveadifferenttracebackfrom\n58 Chapter5. ExceptionHandling\nThePython/CAPI,Release3.13.3\norig)andthosethatwerereraised(andhavethesametracebackasorig). ReturntheExceptionGroupthat\nneedstobereraisedintheend,orNoneifthereisnothingtoreraise.\nAddedinversion3.12.\n5.8 Unicode Exception Objects\nThefollowingfunctionsareusedtocreateandmodifyUnicodeexceptionsfromC.\nPyObject*PyUnicodeDecodeError_Create(constchar*encoding,constchar*object,Py_ssize_tlength,\nPy_ssize_tstart,Py_ssize_tend,constchar*reason)\nReturn value: New reference. Part of the Stable ABI. Create a UnicodeDecodeError object with the at-\ntributesencoding,object,length,start,endandreason. encodingandreasonareUTF-8encodedstrings.\nPyObject*PyUnicodeDecodeError_GetEncoding(PyObject*exc)\nPyObject*PyUnicodeEncodeError_GetEncoding(PyObject*exc)\nReturn value: New reference. Part of the Stable ABI. Return the encoding attribute of the given exception\nobject.\nPyObject*PyUnicodeDecodeError_GetObject(PyObject*exc)\nPyObject*PyUnicodeEncodeError_GetObject(PyObject*exc)\nPyObject*PyUnicodeTranslateError_GetObject(PyObject*exc)\nReturnvalue: Newreference. PartoftheStableABI.Returntheobjectattributeofthegivenexceptionobject.\nintPyUnicodeDecodeError_GetStart(PyObject*exc,Py_ssize_t*start)\nintPyUnicodeEncodeError_GetStart(PyObject*exc,Py_ssize_t*start)\nintPyUnicodeTranslateError_GetStart(PyObject*exc,Py_ssize_t*start)\nPartoftheStableABI.Getthestartattributeofthegivenexceptionobjectandplaceitinto*start. startmust\nnotbeNULL.Return0onsuccess,-1onfailure.\nintPyUnicodeDecodeError_SetStart(PyObject*exc,Py_ssize_tstart)\nintPyUnicodeEncodeError_SetStart(PyObject*exc,Py_ssize_tstart)\nintPyUnicodeTranslateError_SetStart(PyObject*exc,Py_ssize_tstart)\nPartoftheStableABI.Setthestartattributeofthegivenexceptionobjecttostart. Return0onsuccess,-1on\nfailure.\nintPyUnicodeDecodeError_GetEnd(PyObject*exc,Py_ssize_t*end)\nintPyUnicodeEncodeError_GetEnd(PyObject*exc,Py_ssize_t*end)\nintPyUnicodeTranslateError_GetEnd(PyObject*exc,Py_ssize_t*end)\nPartoftheStableABI.Gettheendattributeofthegivenexceptionobjectandplaceitinto*end. endmustnot\nbeNULL.Return0onsuccess,-1onfailure.\nintPyUnicodeDecodeError_SetEnd(PyObject*exc,Py_ssize_tend)\nintPyUnicodeEncodeError_SetEnd(PyObject*exc,Py_ssize_tend)\nintPyUnicodeTranslateError_SetEnd(PyObject*exc,Py_ssize_tend)\nPartoftheStableABI.Settheendattributeofthegivenexceptionobjecttoend. Return0onsuccess,-1on\nfailure.\nPyObject*PyUnicodeDecodeError_GetReason(PyObject*exc)\nPyObject*PyUnicodeEncodeError_GetReason(PyObject*exc)\nPyObject*PyUnicodeTranslateError_GetReason(PyObject*exc)\nReturnvalue: Newreference. PartoftheStableABI.Returnthereasonattributeofthegivenexceptionobject.\nintPyUnicodeDecodeError_SetReason(PyObject*exc,constchar*reason)\nintPyUnicodeEncodeError_SetReason(PyObject*exc,constchar*reason)\nintPyUnicodeTranslateError_SetReason(PyObject*exc,constchar*reason)\nPartoftheStableABI.Setthereasonattributeofthegivenexceptionobjecttoreason. Return0onsuccess,\n-1onfailure.\n5.8. UnicodeExceptionObjects 59\nThePython/CAPI,Release3.13.3\n5.9 Recursion Control\nThesetwofunctionsprovideawaytoperformsaferecursivecallsattheClevel, bothinthecoreandinextension\nmodules. TheyareneedediftherecursivecodedoesnotnecessarilyinvokePythoncode(whichtracksitsrecursion\ndepthautomatically). Theyarealsonotneededfortp_call implementationsbecausethecallprotocol takescareof\nrecursionhandling.\nintPy_EnterRecursiveCall(constchar*where)\nPartoftheStableABIsinceversion3.9. MarksapointwherearecursiveC-levelcallisabouttobeperformed.\nIfUSE_STACKCHECKisdefined,thisfunctionchecksiftheOSstackoverflowedusingPyOS_CheckStack().\nIfthisisthecase,itsetsaMemoryErrorandreturnsanonzerovalue.\nThefunctionthenchecksiftherecursionlimitisreached. Ifthisisthecase,aRecursionErrorissetanda\nnonzerovalueisreturned. Otherwise,zeroisreturned.\nwhere should be a UTF-8 encoded string such as \" in instance check\" to be concatenated to the\nRecursionErrormessagecausedbytherecursiondepthlimit.\nChangedinversion3.9: ThisfunctionisnowalsoavailableinthelimitedAPI.\nvoidPy_LeaveRecursiveCall(void)\nPartoftheStableABIsinceversion3.9. EndsaPy_EnterRecursiveCall(). Mustbecalledonceforeach\nsuccessfulinvocationofPy_EnterRecursiveCall().\nChangedinversion3.9: ThisfunctionisnowalsoavailableinthelimitedAPI.\nProperlyimplementingtp_reprforcontainertypesrequiresspecialrecursionhandling. Inadditiontoprotectingthe\nstack,tp_repralsoneedstotrackobjectstopreventcycles. Thefollowingtwofunctionsfacilitatethisfunctionality.\nEffectively,thesearetheCequivalenttoreprlib.recursive_repr().\nintPy_ReprEnter(PyObject*object)\nPartoftheStableABI.Calledatthebeginningofthetp_reprimplementationtodetectcycles.\nIf the object has already been processed, the function returns a positive integer. In that case the tp_repr\nimplementationshouldreturnastringobjectindicatingacycle. Asexamples,dictobjectsreturn{...}and\nlistobjectsreturn[...].\nThefunctionwillreturnanegativeintegeriftherecursionlimitisreached. Inthatcasethetp_reprimple-\nmentationshouldtypicallyreturnNULL.\nOtherwise,thefunctionreturnszeroandthetp_reprimplementationcancontinuenormally.\nvoidPy_ReprLeave(PyObject*object)\nPart of the Stable ABI. Ends a Py_ReprEnter(). Must be called once for each invocation of\nPy_ReprEnter()thatreturnszero.\n5.10 Standard Exceptions\nAllstandardPythonexceptionsareavailableasglobalvariableswhosenamesarePyExc_followedbythePython\nexception name. These have the type PyObject*; they are all class objects. For completeness, here are all the\nvariables:\nCName PythonName Notes\nPyExc_BaseException BaseException 1\nPyExc_Exception Exception Page61,1\nPyExc_ArithmeticError ArithmeticError Page61,1\nPyExc_AssertionError AssertionError\nPyExc_AttributeError AttributeError\nPyExc_BlockingIOError BlockingIOError\nPyExc_BrokenPipeError BrokenPipeError\ncontinuesonnextpage\n60 Chapter5. ExceptionHandling\nThePython/CAPI,Release3.13.3\nTable 1\u2013continuedfrompreviouspage\nCName PythonName Notes\nPyExc_BufferError BufferError\nPyExc_ChildProcessError ChildProcessError\nPyExc_ConnectionAbortedErrorConnectionAbortedError\nPyExc_ConnectionError ConnectionError\nPyExc_ConnectionRefusedErrorConnectionRefusedError\nPyExc_ConnectionResetError ConnectionResetError\nPyExc_EOFError EOFError\nPyExc_FileExistsError FileExistsError\nPyExc_FileNotFoundError FileNotFoundError\nPyExc_FloatingPointError FloatingPointError\nPyExc_GeneratorExit GeneratorExit\nPyExc_ImportError ImportError\nPyExc_IndentationError IndentationError\nPyExc_IndexError IndexError\nPyExc_InterruptedError InterruptedError\nPyExc_IsADirectoryError IsADirectoryError\nPyExc_KeyError KeyError\nPyExc_KeyboardInterrupt KeyboardInterrupt\nPyExc_LookupError LookupError 1\nPyExc_MemoryError MemoryError\nPyExc_ModuleNotFoundError ModuleNotFoundError\nPyExc_NameError NameError\nPyExc_NotADirectoryError NotADirectoryError\nPyExc_NotImplementedError NotImplementedError\nPyExc_OSError OSError 1\nPyExc_OverflowError OverflowError\nPyExc_PermissionError PermissionError\nPyExc_ProcessLookupError ProcessLookupError\nPyExc_PythonFinalizationErroPrythonFinalizationError\nPyExc_RecursionError RecursionError\nPyExc_ReferenceError ReferenceError\nPyExc_RuntimeError RuntimeError\nPyExc_StopAsyncIteration StopAsyncIteration\nPyExc_StopIteration StopIteration\nPyExc_SyntaxError SyntaxError\nPyExc_SystemError SystemError\nPyExc_SystemExit SystemExit\nPyExc_TabError TabError\nPyExc_TimeoutError TimeoutError\nPyExc_TypeError TypeError\nPyExc_UnboundLocalError UnboundLocalError\nPyExc_UnicodeDecodeError UnicodeDecodeError\nPyExc_UnicodeEncodeError UnicodeEncodeError\nPyExc_UnicodeError UnicodeError\nPyExc_UnicodeTranslateError UnicodeTranslateError\nPyExc_ValueError ValueError\nPyExc_ZeroDivisionError ZeroDivisionError\nAddedinversion3.3: PyExc_BlockingIOError,PyExc_BrokenPipeError,PyExc_ChildProcessError,\nPyExc_ConnectionError, PyExc_ConnectionAbortedError, PyExc_ConnectionRefusedError,\nPyExc_ConnectionResetError, PyExc_FileExistsError, PyExc_FileNotFoundError,\nPyExc_InterruptedError, PyExc_IsADirectoryError, PyExc_NotADirectoryError,\nPyExc_PermissionError, PyExc_ProcessLookupError and PyExc_TimeoutError were introduced\nfollowingPEP3151.\n1Thisisabaseclassforotherstandardexceptions.\n5.10. StandardExceptions 61\nThePython/CAPI,Release3.13.3\nAddedinversion3.5: PyExc_StopAsyncIterationandPyExc_RecursionError.\nAddedinversion3.6: PyExc_ModuleNotFoundError.\nThesearecompatibilityaliasestoPyExc_OSError:\nCName Notes\nPyExc_EnvironmentError\nPyExc_IOError\nPyExc_WindowsError 2\nChangedinversion3.3: Thesealiasesusedtobeseparateexceptiontypes.\nNotes:\n5.11 Standard Warning Categories\nAllstandardPythonwarningcategoriesareavailableasglobalvariableswhosenamesarePyExc_followedbythe\nPythonexceptionname. ThesehavethetypePyObject*;theyareallclassobjects. Forcompleteness,hereareall\nthevariables:\nCName PythonName Notes\nPyExc_Warning Warning 3\nPyExc_BytesWarning BytesWarning\nPyExc_DeprecationWarning DeprecationWarning\nPyExc_FutureWarning FutureWarning\nPyExc_ImportWarning ImportWarning\nPyExc_PendingDeprecationWarning PendingDeprecationWarning\nPyExc_ResourceWarning ResourceWarning\nPyExc_RuntimeWarning RuntimeWarning\nPyExc_SyntaxWarning SyntaxWarning\nPyExc_UnicodeWarning UnicodeWarning\nPyExc_UserWarning UserWarning\nAddedinversion3.2: PyExc_ResourceWarning.\nNotes:\n2OnlydefinedonWindows;protectcodethatusesthisbytestingthatthepreprocessormacroMS_WINDOWSisdefined.\n3Thisisabaseclassforotherstandardwarningcategories.\n62 Chapter5. ExceptionHandling\nCHAPTER\nSIX\nUTILITIES\nThe functions in this chapter perform various utility tasks, ranging from helping C code be more portable across\nplatforms, using Python modules from C, and parsing function arguments and constructing Python values from C\nvalues.\n6.1 Operating System Utilities\nPyObject*PyOS_FSPath(PyObject*path)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.6. Returnthefilesystemrepresentationfor\npath. Iftheobjectisastrorbytesobject,thenanewstrongreferenceisreturned. Iftheobjectimplements\ntheos.PathLikeinterface,then__fspath__()isreturnedaslongasitisastrorbytesobject. Otherwise\nTypeErrorisraisedandNULLisreturned.\nAddedinversion3.6.\nintPy_FdIsInteractive(FILE*fp,constchar*filename)\nReturntrue(nonzero)ifthestandardI/Ofilefpwithnamefilenameisdeemedinteractive. Thisisthecasefor\nfiles for which isatty(fileno(fp)) is true. If the PyConfig.interactive is non-zero, this function\nalsoreturnstrueifthefilenamepointerisNULLorifthenameisequaltooneofthestrings'<stdin>'or\n'???'.\nThisfunctionmustnotbecalledbeforePythonisinitialized.\nvoidPyOS_BeforeFork()\nPart of the Stable ABI on platforms with fork() since version 3.7. Function to prepare some internal state\nbefore a process fork. This should be called before calling fork() or any similar function that clones the\ncurrentprocess. Onlyavailableonsystemswherefork()isdefined.\n(cid:193) Warning\nTheCfork()callshouldonlybemadefromthe\u201cmain\u201dthread (ofthe\u201cmain\u201dinterpreter). Thesameis\ntrueforPyOS_BeforeFork().\nAddedinversion3.7.\nvoidPyOS_AfterFork_Parent()\nPartoftheStableABIonplatformswithfork()sinceversion3.7. Functiontoupdatesomeinternalstateafter\naprocessfork. Thisshouldbecalledfromtheparentprocessaftercallingfork()oranysimilarfunctionthat\nclonesthecurrentprocess, regardlessofwhetherprocesscloningwassuccessful. Onlyavailableonsystems\nwherefork()isdefined.\n(cid:193) Warning\nTheCfork()callshouldonlybemadefromthe\u201cmain\u201dthread (ofthe\u201cmain\u201dinterpreter). Thesameis\ntrueforPyOS_AfterFork_Parent().\n63\nThePython/CAPI,Release3.13.3\nAddedinversion3.7.\nvoidPyOS_AfterFork_Child()\nPartoftheStableABIonplatformswithfork()sinceversion3.7. Functiontoupdateinternalinterpreterstate\nafteraprocessfork. Thismustbecalledfromthechildprocessaftercallingfork(),oranysimilarfunction\nthat clones the current process, if there is any chance the process will call back into the Python interpreter.\nOnlyavailableonsystemswherefork()isdefined.\n(cid:193) Warning\nTheCfork()callshouldonlybemadefromthe\u201cmain\u201dthread (ofthe\u201cmain\u201dinterpreter). Thesameis\ntrueforPyOS_AfterFork_Child().\nAddedinversion3.7.\n(cid:181) Seealso\nos.register_at_fork() allows registering custom Python functions to be called by\nPyOS_BeforeFork(),PyOS_AfterFork_Parent()andPyOS_AfterFork_Child().\nvoidPyOS_AfterFork()\nPartoftheStableABIonplatformswithfork(). Functiontoupdatesomeinternalstateafteraprocessfork;\nthisshouldbecalledinthenewprocessifthePythoninterpreterwillcontinuetobeused. Ifanewexecutable\nisloadedintothenewprocess,thisfunctiondoesnotneedtobecalled.\nDeprecatedsinceversion3.7: ThisfunctionissupersededbyPyOS_AfterFork_Child().\nintPyOS_CheckStack()\nPartoftheStableABIonplatformswithUSE_STACKCHECKsinceversion3.7. Returntruewhentheinterpreter\nruns out of stack space. This is a reliable check, but is only available when USE_STACKCHECK is defined\n(currentlyoncertainversionsofWindowsusingtheMicrosoftVisualC++compiler). USE_STACKCHECKwill\nbedefinedautomatically;youshouldneverchangethedefinitioninyourowncode.\ntypedefvoid(*PyOS_sighandler_t)(int)\nPartoftheStableABI.\nPyOS_sighandler_tPyOS_getsig(inti)\nPart of the Stable ABI. Return the current signal handler for signal i. This is a thin wrapper around either\nsigaction()orsignal(). Donotcallthosefunctionsdirectly!\nPyOS_sighandler_tPyOS_setsig(inti,PyOS_sighandler_th)\nPartoftheStableABI.Setthesignalhandlerforsignalitobeh;returntheoldsignalhandler. Thisisathin\nwrapperaroundeithersigaction()orsignal(). Donotcallthosefunctionsdirectly!\nwchar_t*Py_DecodeLocale(constchar*arg,size_t*size)\nPartoftheStableABIsinceversion3.7.\n(cid:193) Warning\nThis function should not be called directly: use the PyConfig API with the\nPyConfig_SetBytesString()functionwhichensuresthatPythonispreinitialized.\nThisfunctionmustnotbecalledbeforePythonispreinitializedandsothattheLC_CTYPElocaleisproperly\nconfigured: seethePy_PreInitialize()function.\nDecodeabytestringfromthefilesystemencodinganderrorhandler. Iftheerrorhandlerissurrogateescapeer-\nrorhandler,undecodablebytesaredecodedascharactersinrangeU+DC80..U+DCFF;andifabytesequence\n64 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\ncanbedecodedasasurrogatecharacter,thebytesareescapedusingthesurrogateescapeerrorhandlerinstead\nofdecodingthem.\nReturnapointertoanewlyallocatedwidecharacterstring,usePyMem_RawFree()tofreethememory. If\nsizeisnotNULL,writethenumberofwidecharactersexcludingthenullcharacterinto*size\nReturnNULLondecodingerrorormemoryallocationerror. IfsizeisnotNULL,*sizeissetto(size_t)-1\nonmemoryerrororsetto(size_t)-2ondecodingerror.\nThefilesystemencodinganderrorhandlerareselectedbyPyConfig_Read(): seefilesystem_encoding\nandfilesystem_errorsmembersofPyConfig.\nDecodingerrorsshouldneverhappen,unlessthereisabugintheClibrary.\nUsethePy_EncodeLocale()functiontoencodethecharacterstringbacktoabytestring.\n(cid:181) Seealso\nThePyUnicode_DecodeFSDefaultAndSize()andPyUnicode_DecodeLocaleAndSize()func-\ntions.\nAddedinversion3.5.\nChangedinversion3.7: ThefunctionnowusestheUTF-8encodinginthePythonUTF-8Mode.\nChanged in version 3.8: The function now uses the UTF-8 encoding on Windows if PyPreConfig.\nlegacy_windows_fs_encodingiszero;\nchar*Py_EncodeLocale(constwchar_t*text,size_t*error_pos)\nPart of the Stable ABI since version 3.7. Encode a wide character string to the filesystem encoding and\nerror handler. If the error handler is surrogateescape error handler, surrogate characters in the range\nU+DC80..U+DCFFareconvertedtobytes0x80..0xFF.\nReturnapointertoanewlyallocatedbytestring,usePyMem_Free()tofreethememory. ReturnNULLon\nencodingerrorormemoryallocationerror.\nIf error_pos is not NULL, *error_pos is set to (size_t)-1 on success, or set to the index of the invalid\ncharacteronencodingerror.\nThefilesystemencodinganderrorhandlerareselectedbyPyConfig_Read(): seefilesystem_encoding\nandfilesystem_errorsmembersofPyConfig.\nUsethePy_DecodeLocale()functiontodecodethebytesstringbacktoawidecharacterstring.\n(cid:193) Warning\nThisfunctionmustnotbecalledbeforePythonispreinitializedandsothattheLC_CTYPElocaleisproperly\nconfigured: seethePy_PreInitialize()function.\n(cid:181) Seealso\nThePyUnicode_EncodeFSDefault()andPyUnicode_EncodeLocale()functions.\nAddedinversion3.5.\nChangedinversion3.7: ThefunctionnowusestheUTF-8encodinginthePythonUTF-8Mode.\nChanged in version 3.8: The function now uses the UTF-8 encoding on Windows if PyPreConfig.\nlegacy_windows_fs_encodingiszero.\n6.1. OperatingSystemUtilities 65\nThePython/CAPI,Release3.13.3\n6.2 System Functions\nTheseareutilityfunctionsthatmakefunctionalityfromthesysmoduleaccessibletoCcode. Theyallworkwith\nthecurrentinterpreterthread\u2019ssysmodule\u2019sdict,whichiscontainedintheinternalthreadstatestructure.\nPyObject*PySys_GetObject(constchar*name)\nReturnvalue: Borrowedreference. PartoftheStableABI.Returntheobjectnamefromthesysmoduleor\nNULLifitdoesnotexist,withoutsettinganexception.\nintPySys_SetObject(constchar*name,PyObject*v)\nPartoftheStableABI.SetnameinthesysmoduletovunlessvisNULL,inwhichcasenameisdeletedfrom\nthesysmodule. Returns0onsuccess,-1onerror.\nvoidPySys_ResetWarnOptions()\nPart of the Stable ABI. Reset sys.warnoptions to an empty list. This function may be called prior to\nPy_Initialize().\nDeprecatedsinceversion3.13,willberemovedinversion3.15: Clearsys.warnoptionsandwarnings.\nfiltersinstead.\nvoidPySys_WriteStdout(constchar*format,...)\nPartoftheStableABI.Writetheoutputstringdescribedbyformattosys.stdout. Noexceptionsareraised,\neveniftruncationoccurs(seebelow).\nformat shouldlimitthetotalsizeoftheformattedoutputstringto1000bytesorless\u2013after1000bytes,the\noutputstringistruncated. Inparticular,thismeansthatnounrestricted\u201c%s\u201dformatsshouldoccur;theseshould\nbelimitedusing\u201c%.<N>s\u201dwhere<N>isadecimalnumbercalculatedsothat<N>plusthemaximumsizeof\notherformattedtextdoesnotexceed1000bytes. Alsowatchoutfor\u201c%f\u201d,whichcanprinthundredsofdigits\nforverylargenumbers.\nIfaproblemoccurs,orsys.stdoutisunset,theformattedmessageiswrittentothereal(Clevel)stdout.\nvoidPySys_WriteStderr(constchar*format,...)\nPartoftheStableABI.AsPySys_WriteStdout(),butwritetosys.stderrorstderrinstead.\nvoidPySys_FormatStdout(constchar*format,...)\nPart of the Stable ABI. Function similar to PySys_WriteStdout() but format the message using\nPyUnicode_FromFormatV()anddon\u2019ttruncatethemessagetoanarbitrarylength.\nAddedinversion3.2.\nvoidPySys_FormatStderr(constchar*format,...)\nPartoftheStableABI.AsPySys_FormatStdout(),butwritetosys.stderrorstderrinstead.\nAddedinversion3.2.\nPyObject*PySys_GetXOptions()\nReturnvalue: Borrowedreference. PartoftheStableABIsinceversion3.7. Returnthecurrentdictionaryof\n-Xoptions,similarlytosys._xoptions. Onerror,NULLisreturnedandanexceptionisset.\nAddedinversion3.2.\nintPySys_Audit(constchar*event,constchar*format,...)\nPart of the Stable ABI since version 3.13. Raise an auditing event with any active hooks. Return zero for\nsuccessandnon-zerowithanexceptionsetonfailure.\nTheeventstringargumentmustnotbeNULL.\nIf any hooks have been added, format and other arguments will be used to construct a tuple to pass. Apart\nfrom N, the same format characters as used in Py_BuildValue() are available. If the built value is not a\ntuple,itwillbeaddedintoasingle-elementtuple.\nThe N format option must not be used. It consumes a reference, but since there is no way to know whether\nargumentstothisfunctionwillbeconsumed,usingitmaycausereferenceleaks.\n66 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\nNote that # format characters should always be treated as Py_ssize_t, regardless of whether\nPY_SSIZE_T_CLEANwasdefined.\nsys.audit()performsthesamefunctionfromPythoncode.\nSeealsoPySys_AuditTuple().\nAddedinversion3.8.\nChangedinversion3.8.2: RequirePy_ssize_tfor#formatcharacters. Previously,anunavoidabledepre-\ncationwarningwasraised.\nintPySys_AuditTuple(constchar*event,PyObject*args)\nPartoftheStableABIsinceversion3.13. SimilartoPySys_Audit(),butpassargumentsasaPythonobject.\nargsmustbeatuple. Topassnoarguments,argscanbeNULL.\nAddedinversion3.13.\nintPySys_AddAuditHook(Py_AuditHookFunctionhook,void*userData)\nAppendthecallablehooktothelistofactiveauditinghooks. Returnzeroonsuccessandnon-zeroonfailure.\nIftheruntimehasbeeninitialized,alsosetanerroronfailure. HooksaddedthroughthisAPIarecalledforall\ninterpreterscreatedbytheruntime.\nThe userData pointer is passed into the hook function. Since hook functions may be called from different\nruntimes,thispointershouldnotreferdirectlytoPythonstate.\nThisfunctionissafetocallbeforePy_Initialize(). Whencalledafterruntimeinitialization,existingaudit\nhooksarenotifiedandmaysilentlyaborttheoperationbyraisinganerrorsubclassedfromException(other\nerrorswillnotbesilenced).\nThehookfunctionisalwayscalledwiththeGILheldbythePythoninterpreterthatraisedtheevent.\nSeePEP578foradetaileddescriptionofauditing. Functionsintheruntimeandstandardlibrarythatraise\neventsarelistedintheauditeventstable. Detailsareineachfunction\u2019sdocumentation.\nIftheinterpreterisinitialized,thisfunctionraisesanauditingeventsys.addaudithookwithnoarguments.\nIfanyexistinghooksraiseanexceptionderivedfromException, thenewhookwillnotbeaddedandthe\nexceptioniscleared. Asaresult,callerscannotassumethattheirhookhasbeenaddedunlesstheycontrolall\nexistinghooks.\ntypedefint(*Py_AuditHookFunction)(constchar*event,PyObject*args,void*userData)\nThe type of the hook function. event is the C string event argument passed to PySys_Audit() or\nPySys_AuditTuple(). argsisguaranteedtobeaPyTupleObject. userDataistheargumentpassed\ntoPySys_AddAuditHook().\nAddedinversion3.8.\n6.3 Process Control\nvoidPy_FatalError(constchar*message)\nPartoftheStableABI.Printafatalerrormessageandkilltheprocess. Nocleanupisperformed. Thisfunction\nshouldonlybeinvokedwhenaconditionisdetectedthatwouldmakeitdangeroustocontinueusingthePython\ninterpreter; e.g., when the object administration appears to be corrupted. On Unix, the standard C library\nfunctionabort()iscalledwhichwillattempttoproduceacorefile.\nThePy_FatalError()functionisreplacedwithamacrowhichlogsautomaticallythenameofthecurrent\nfunction,unlessthePy_LIMITED_APImacroisdefined.\nChangedinversion3.9: Logthefunctionnameautomatically.\n6.3. ProcessControl 67\nThePython/CAPI,Release3.13.3\nvoidPy_Exit(intstatus)\nPartoftheStableABI.Exitthecurrentprocess. ThiscallsPy_FinalizeEx()andthencallsthestandardC\nlibraryfunctionexit(status). IfPy_FinalizeEx()indicatesanerror,theexitstatusissetto120.\nChangedinversion3.6: Errorsfromfinalizationnolongerignored.\nintPy_AtExit(void(*func)())\nPartoftheStableABI.RegisteracleanupfunctiontobecalledbyPy_FinalizeEx(). Thecleanupfunction\nwillbecalledwithnoargumentsandshouldreturnnovalue. Atmost32cleanupfunctionscanberegistered.\nWhen the registration is successful, Py_AtExit() returns 0; on failure, it returns -1. The cleanup func-\ntionregisteredlastiscalledfirst. Eachcleanupfunctionwillbecalledatmostonce. SincePython\u2019sinternal\nfinalizationwillhavecompletedbeforethecleanupfunction,noPythonAPIsshouldbecalledbyfunc.\n(cid:181) Seealso\nPyUnstable_AtExit()forpassingavoid *dataargument.\n6.4 Importing Modules\nPyObject*PyImport_ImportModule(constchar*name)\nReturnvalue: Newreference. PartoftheStableABI.ThisisawrapperaroundPyImport_Import()which\ntakesaconst char*asanargumentinsteadofaPyObject*.\nPyObject*PyImport_ImportModuleNoBlock(constchar*name)\nReturn value: New reference. Part of the Stable ABI. This function is a deprecated alias of\nPyImport_ImportModule().\nChanged in version 3.3: This function used to fail immediately when the import lock was held by another\nthread. In Python 3.3 though, the locking scheme switched to per-module locks for most purposes, so this\nfunction\u2019sspecialbehaviourisn\u2019tneededanymore.\nDeprecatedsinceversion3.13,willberemovedinversion3.15: UsePyImport_ImportModule()instead.\nPyObject*PyImport_ImportModuleEx(constchar*name,PyObject*globals,PyObject*locals,PyObject\n*fromlist)\nReturn value: New reference. Import a module. This is best described by referring to the built-in Python\nfunction__import__().\nThereturnvalueisanewreferencetotheimportedmoduleortop-levelpackage,orNULLwithanexception\nset on failure. Like for __import__(), the return value when a submodule of a package was requested is\nnormallythetop-levelpackage,unlessanon-emptyfromlistwasgiven.\nFailingimportsremoveincompletemoduleobjects,likewithPyImport_ImportModule().\nPyObject*PyImport_ImportModuleLevelObject(PyObject*name,PyObject*globals,PyObject*locals,\nPyObject*fromlist,intlevel)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.7. Importamodule. Thisisbestdescribed\nby referring to the built-in Python function __import__(), as the standard __import__() function calls\nthisfunctiondirectly.\nThereturnvalueisanewreferencetotheimportedmoduleortop-levelpackage,orNULLwithanexception\nset on failure. Like for __import__(), the return value when a submodule of a package was requested is\nnormallythetop-levelpackage,unlessanon-emptyfromlistwasgiven.\nAddedinversion3.3.\nPyObject*PyImport_ImportModuleLevel(constchar*name,PyObject*globals,PyObject*locals,PyObject\n*fromlist,intlevel)\nReturnvalue:Newreference. PartoftheStableABI.SimilartoPyImport_ImportModuleLevelObject(),\nbutthenameisaUTF-8encodedstringinsteadofaUnicodeobject.\n68 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\nChangedinversion3.3: Negativevaluesforlevelarenolongeraccepted.\nPyObject*PyImport_Import(PyObject*name)\nReturn value: New reference. Part of the Stable ABI. This is a higher-level interface that calls the current\n\u201cimporthookfunction\u201d(withanexplicitlevelof0,meaningabsoluteimport). Itinvokesthe__import__()\nfunctionfromthe__builtins__ofthecurrentglobals. Thismeansthattheimportisdoneusingwhatever\nimporthooksareinstalledinthecurrentenvironment.\nThisfunctionalwaysusesabsoluteimports.\nPyObject*PyImport_ReloadModule(PyObject*m)\nReturnvalue: Newreference. PartoftheStableABI.Reloadamodule. Returnanewreferencetothereloaded\nmodule,orNULLwithanexceptionsetonfailure(themodulestillexistsinthiscase).\nPyObject*PyImport_AddModuleRef(constchar*name)\nReturnvalue:Newreference. PartoftheStableABIsinceversion3.13. Returnthemoduleobjectcorresponding\ntoamodulename.\nThenameargumentmaybeoftheformpackage.module. Firstcheckthemodulesdictionaryifthere\u2019sone\nthere,andifnot,createanewoneandinsertitinthemodulesdictionary.\nReturnastrongreferencetothemoduleonsuccess. ReturnNULLwithanexceptionsetonfailure.\nThemodulenamenameisdecodedfromUTF-8.\nThisfunctiondoesnotloadorimportthemodule;ifthemodulewasn\u2019talreadyloaded,youwillgetanempty\nmoduleobject. UsePyImport_ImportModule()oroneofitsvariantstoimportamodule. Packagestruc-\nturesimpliedbyadottednamefornamearenotcreatedifnotalreadypresent.\nAddedinversion3.13.\nPyObject*PyImport_AddModuleObject(PyObject*name)\nReturn value: Borrowed reference. Part of the Stable ABI since version 3.7. Similar to\nPyImport_AddModuleRef(),butreturnaborrowedreferenceandnameisaPythonstrobject.\nAddedinversion3.3.\nPyObject*PyImport_AddModule(constchar*name)\nReturn value: Borrowed reference. Part of the Stable ABI. Similar to PyImport_AddModuleRef(), but\nreturnaborrowedreference.\nPyObject*PyImport_ExecCodeModule(constchar*name,PyObject*co)\nReturnvalue: Newreference. PartoftheStableABI.Givenamodulename(possiblyoftheformpackage.\nmodule)andacodeobjectreadfromaPythonbytecodefileorobtainedfromthebuilt-infunctioncompile(),\nload the module. Return a new reference to the module object, or NULL with an exception set if an error\noccurred. nameisremovedfromsys.modulesinerrorcases,evenifnamewasalreadyinsys.modules\non entry to PyImport_ExecCodeModule(). Leaving incompletely initialized modules in sys.modules\nis dangerous, as imports of such modules have no way to know that the module object is an unknown (and\nprobablydamagedwithrespecttothemoduleauthor\u2019sintents)state.\nThe module\u2019s __spec__ and __loader__ will be set, if not set already, with the appropriate values. The\nspec\u2019s loader will be set to the module\u2019s __loader__ (if set) and to an instance of SourceFileLoader\notherwise.\nThemodule\u2019s__file__attributewillbesettothecodeobject\u2019sco_filename. Ifapplicable,__cached__\nwillalsobeset.\nThisfunctionwillreloadthemoduleifitwasalreadyimported. SeePyImport_ReloadModule()forthe\nintendedwaytoreloadamodule.\nIfnamepointstoadottednameoftheformpackage.module,anypackagestructuresnotalreadycreated\nwillstillnotbecreated.\nSeealsoPyImport_ExecCodeModuleEx()andPyImport_ExecCodeModuleWithPathnames().\n6.4. ImportingModules 69\nThePython/CAPI,Release3.13.3\nChangedinversion3.12: Thesettingof__cached__and__loader__isdeprecated. SeeModuleSpecfor\nalternatives.\nPyObject*PyImport_ExecCodeModuleEx(constchar*name,PyObject*co,constchar*pathname)\nReturn value: New reference. Part of the Stable ABI. Like PyImport_ExecCodeModule(), but the\n__file__attributeofthemoduleobjectissettopathnameifitisnon-NULL.\nSeealsoPyImport_ExecCodeModuleWithPathnames().\nPyObject*PyImport_ExecCodeModuleObject(PyObject*name,PyObject*co,PyObject*pathname,PyObject\n*cpathname)\nReturn value: New reference. Part of the Stable ABI since version 3.7. Like\nPyImport_ExecCodeModuleEx(), but the __cached__ attribute of the module object is set to\ncpathnameifitisnon-NULL.Ofthethreefunctions,thisisthepreferredonetouse.\nAddedinversion3.3.\nChangedinversion3.12: Setting__cached__isdeprecated. SeeModuleSpecforalternatives.\nPyObject*PyImport_ExecCodeModuleWithPathnames(constchar*name,PyObject*co,constchar\n*pathname,constchar*cpathname)\nReturn value: New reference. Part of the Stable ABI. Like PyImport_ExecCodeModuleObject(), but\nname, pathname and cpathname are UTF-8 encodedstrings. Attemptsare also madeto figureout whatthe\nvalueforpathnameshouldbefromcpathnameiftheformerissettoNULL.\nAddedinversion3.2.\nChangedinversion3.3: Usesimp.source_from_cache()incalculatingthesourcepathifonlythebyte-\ncodepathisprovided.\nChangedinversion3.12: Nolongerusestheremovedimpmodule.\nlongPyImport_GetMagicNumber()\nPart of the Stable ABI. Return the magic number for Python bytecode files (a.k.a. .pyc file). The magic\nnumbershouldbepresentinthefirstfourbytesofthebytecodefile,inlittle-endianbyteorder. Returns-1on\nerror.\nChangedinversion3.3: Returnvalueof-1uponfailure.\nconstchar*PyImport_GetMagicTag()\nPartoftheStableABI.ReturnthemagictagstringforPEP3147formatPythonbytecodefilenames. Keep\ninmindthatthevalueatsys.implementation.cache_tagisauthoritativeandshouldbeusedinsteadof\nthisfunction.\nAddedinversion3.2.\nPyObject*PyImport_GetModuleDict()\nReturnvalue: Borrowedreference. PartoftheStableABI.Returnthedictionaryusedforthemoduleadmin-\nistration(a.k.a. sys.modules). Notethatthisisaper-interpretervariable.\nPyObject*PyImport_GetModule(PyObject*name)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.8. Returnthealreadyimportedmodule\nwith the given name. If the module has not been imported yet then returns NULL but does not set an error.\nReturnsNULLandsetsanerrorifthelookupfailed.\nAddedinversion3.7.\nPyObject*PyImport_GetImporter(PyObject*path)\nReturnvalue: Newreference. PartoftheStableABI.Returnafinderobjectforasys.path/pkg.__path__\nitempath,possiblybyfetchingitfromthesys.path_importer_cachedict. Ifitwasn\u2019tyetcached,traverse\nsys.path_hooksuntilahookisfoundthatcanhandlethepathitem. ReturnNoneifnohookcould; this\ntellsourcallerthatthepathbasedfinder couldnotfindafinderforthispathitem. Cachetheresultinsys.\npath_importer_cache. Returnanewreferencetothefinderobject.\n70 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\nintPyImport_ImportFrozenModuleObject(PyObject*name)\nPartoftheStableABIsinceversion3.7. Loadafrozenmodulenamedname. Return1forsuccess,0ifthe\nmoduleisnotfound,and-1withanexceptionsetiftheinitializationfailed. Toaccesstheimportedmodule\nonasuccessfulload,usePyImport_ImportModule(). (Notethemisnomer\u2014thisfunctionwouldreload\nthemoduleifitwasalreadyimported.)\nAddedinversion3.3.\nChangedinversion3.4: The__file__attributeisnolongersetonthemodule.\nintPyImport_ImportFrozenModule(constchar*name)\nPartoftheStableABI.SimilartoPyImport_ImportFrozenModuleObject(),butthenameisaUTF-8\nencodedstringinsteadofaUnicodeobject.\nstruct_frozen\nThis is the structure type definition for frozen module descriptors, as generated by the freeze utility (see\nTools/freeze/inthePythonsourcedistribution). Itsdefinition,foundinInclude/import.h,is:\nstruct _frozen {\nconst char *name;\nconst unsigned char *code;\nint size;\nbool is_package;\n};\nChangedinversion3.11: Thenewis_packagefieldindicateswhetherthemoduleisapackageornot. This\nreplacessettingthesizefieldtoanegativevalue.\nconststruct_frozen*PyImport_FrozenModules\nThispointerisinitializedtopointtoanarrayof_frozenrecords,terminatedbyonewhosemembersareall\nNULL or zero. When a frozen module is imported, it is searched in this table. Third-party code could play\ntrickswiththistoprovideadynamicallycreatedcollectionoffrozenmodules.\nintPyImport_AppendInittab(constchar*name,PyObject*(*initfunc)(void))\nPartoftheStableABI.Addasinglemoduletotheexistingtableofbuilt-inmodules. Thisisaconvenience\nwrapperaroundPyImport_ExtendInittab(),returning-1ifthetablecouldnotbeextended. Thenew\nmodulecanbeimportedbythenamename,andusesthefunctioninitfuncastheinitializationfunctioncalled\nonthefirstattemptedimport. ThisshouldbecalledbeforePy_Initialize().\nstruct_inittab\nStructuredescribingasingleentryinthelistofbuilt-inmodules. ProgramswhichembedPythonmayusean\narray of these structures in conjunction with PyImport_ExtendInittab() to provide additional built-in\nmodules. Thestructureconsistsoftwomembers:\nconstchar*name\nThemodulename,asanASCIIencodedstring.\nPyObject*(*initfunc)(void)\nInitializationfunctionforamodulebuiltintotheinterpreter.\nintPyImport_ExtendInittab(struct_inittab*newtab)\nAddacollectionofmodulestothetableofbuilt-inmodules. Thenewtabarraymustendwithasentinelentry\nwhich contains NULL for the name field; failure to provide the sentinel value can result in a memory fault.\nReturns0onsuccessor-1ifinsufficientmemorycouldbeallocatedtoextendtheinternaltable. Intheevent\noffailure,nomodulesareaddedtotheinternaltable. ThismustbecalledbeforePy_Initialize().\nIfPythonisinitializedmultipletimes, PyImport_AppendInittab() or PyImport_ExtendInittab()\nmustbecalledbeforeeachPythoninitialization.\n6.4. ImportingModules 71\nThePython/CAPI,Release3.13.3\n6.5 Data marshalling support\nThese routines allow C code to work with serialized objects using the same data format as the marshal module.\nTherearefunctionstowritedataintotheserializationformat,andadditionalfunctionsthatcanbeusedtoreadthe\ndataback. Filesusedtostoremarshalleddatamustbeopenedinbinarymode.\nNumericvaluesarestoredwiththeleastsignificantbytefirst.\nThe module supports two versions of the data format: version 0 is the historical version, version 1 shares in-\nterned strings in the file, and upon unmarshalling. Version 2 uses a binary format for floating-point numbers.\nPy_MARSHAL_VERSIONindicatesthecurrentfileformat(currently2).\nvoidPyMarshal_WriteLongToFile(longvalue,FILE*file,intversion)\nMarshalalonginteger,value,tofile. Thiswillonlywritetheleast-significant32bitsofvalue;regardlessof\nthesizeofthenativelongtype. versionindicatesthefileformat.\nThisfunctioncanfail,inwhichcaseitsetstheerrorindicator. UsePyErr_Occurred()tocheckforthat.\nvoidPyMarshal_WriteObjectToFile(PyObject*value,FILE*file,intversion)\nMarshalaPythonobject,value,tofile. versionindicatesthefileformat.\nThisfunctioncanfail,inwhichcaseitsetstheerrorindicator. UsePyErr_Occurred()tocheckforthat.\nPyObject*PyMarshal_WriteObjectToString(PyObject*value,intversion)\nReturnvalue: Newreference. Returnabytesobjectcontainingthemarshalledrepresentationofvalue. version\nindicatesthefileformat.\nThefollowingfunctionsallowmarshalledvaluestobereadbackin.\nlongPyMarshal_ReadLongFromFile(FILE*file)\nReturnaClongfromthedatastreaminaFILE*openedforreading. Onlya32-bitvaluecanbereadinusing\nthisfunction,regardlessofthenativesizeoflong.\nOnerror,setstheappropriateexception(EOFError)andreturns-1.\nintPyMarshal_ReadShortFromFile(FILE*file)\nReturnaCshortfromthedatastreaminaFILE*openedforreading. Onlya16-bitvaluecanbereadin\nusingthisfunction,regardlessofthenativesizeofshort.\nOnerror,setstheappropriateexception(EOFError)andreturns-1.\nPyObject*PyMarshal_ReadObjectFromFile(FILE*file)\nReturnvalue: Newreference. ReturnaPythonobjectfromthedatastreaminaFILE*openedforreading.\nOnerror,setstheappropriateexception(EOFError,ValueErrororTypeError)andreturnsNULL.\nPyObject*PyMarshal_ReadLastObjectFromFile(FILE*file)\nReturn value: New reference. Return a Python object from the data stream in a FILE* opened for reading.\nUnlike PyMarshal_ReadObjectFromFile(), this function assumes that no further objects will be read\nfromthefile,allowingittoaggressivelyloadfiledataintomemorysothatthede-serializationcanoperatefrom\ndatainmemoryratherthanreadingabyteatatimefromthefile. Onlyusethesevariantifyouarecertainthat\nyouwon\u2019tbereadinganythingelsefromthefile.\nOnerror,setstheappropriateexception(EOFError,ValueErrororTypeError)andreturnsNULL.\nPyObject*PyMarshal_ReadObjectFromString(constchar*data,Py_ssize_tlen)\nReturnvalue: Newreference. ReturnaPythonobjectfromthedatastreaminabytebuffercontaininglenbytes\npointedtobydata.\nOnerror,setstheappropriateexception(EOFError,ValueErrororTypeError)andreturnsNULL.\n72 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\n6.6 Parsing arguments and building values\nThese functions are useful when creating your own extension functions and methods. Additional information and\nexamplesareavailableinextending-index.\nThefirstthreeofthesefunctionsdescribed,PyArg_ParseTuple(),PyArg_ParseTupleAndKeywords(),and\nPyArg_Parse(),alluseformatstringswhichareusedtotellthefunctionabouttheexpectedarguments. Theformat\nstringsusethesamesyntaxforeachofthesefunctions.\n6.6.1 Parsing arguments\nA format string consists of zero or more \u201cformat units.\u201d A format unit describes one Python object; it is usually\na single character or a parenthesized sequence of format units. With a few exceptions, a format unit that is not\na parenthesized sequence normally corresponds to a single address argument to these functions. In the following\ndescription,thequotedformistheformatunit;theentryin(round)parenthesesisthePythonobjecttypethatmatches\ntheformatunit;andtheentryin[square]bracketsisthetypeoftheCvariable(s)whoseaddressshouldbepassed.\nStringsandbuffers\n(cid:174) Note\nOnPython3.12andolder,themacroPY_SSIZE_T_CLEANmustbedefinedbeforeincludingPython.htouse\nall#variantsofformats(s#,y#,etc.) explainedbelow. ThisisnotnecessaryonPython3.13andlater.\nTheseformatsallowaccessinganobjectasacontiguouschunkofmemory. Youdon\u2019thavetoproviderawstorage\nforthereturnedunicodeorbytesarea.\nUnlessotherwisestated,buffersarenotNUL-terminated.\nTherearethreewaysstringsandbufferscanbeconvertedtoC:\n\u2022 Formats such as y* and s* fill a Py_buffer structure. This locks the underlying buffer so that the caller\ncansubsequentlyusethebuffereveninsideaPy_BEGIN_ALLOW_THREADSblockwithouttheriskofmutable\ndatabeingresizedordestroyed. Asaresult,youhavetocallPyBuffer_Release()afteryouhavefinished\nprocessingthedata(orinanyearlyabortcase).\n\u2022 Thees,es#,etandet#formatsallocatetheresultbuffer. YouhavetocallPyMem_Free()afteryouhave\nfinishedprocessingthedata(orinanyearlyabortcase).\n\u2022 Otherformatstakeastroraread-onlybytes-likeobject,suchasbytes,andprovideaconst char *pointer\ntoitsbuffer. Inthiscasethebufferis\u201cborrowed\u201d: itismanagedbythecorrespondingPythonobject,andshares\nthelifetimeofthisobject. Youwon\u2019thavetoreleaseanymemoryyourself.\nTo ensure that the underlying buffer may be safely borrowed, the object\u2019s PyBufferProcs.\nbf_releasebufferfieldmustbeNULL.Thisdisallowscommonmutableobjectssuchasbytearray,but\nalsosomeread-onlyobjectssuchasmemoryviewofbytes.\nBesides this bf_releasebuffer requirement, there is no check to verify whether the input object is im-\nmutable(e.g. whetheritwouldhonorarequestforawritablebuffer,orwhetheranotherthreadcanmutatethe\ndata).\ns(str)[constchar*]\nConvertaUnicodeobjecttoaCpointertoacharacterstring. Apointertoanexistingstringisstoredinthe\ncharacterpointervariablewhoseaddressyoupass. TheCstringisNUL-terminated. ThePythonstringmust\nnot contain embedded null code points; if it does, a ValueError exception is raised. Unicode objects are\nconvertedtoCstringsusing'utf-8'encoding. Ifthisconversionfails,aUnicodeErrorisraised.\n(cid:174) Note\n6.6. Parsingargumentsandbuildingvalues 73\nThePython/CAPI,Release3.13.3\nThisformatdoesnotacceptbytes-likeobjects. Ifyouwanttoacceptfilesystempathsandconvertthemto\nCcharacterstrings,itispreferabletousetheO&formatwithPyUnicode_FSConverter()asconverter.\nChangedinversion3.5:Previously,TypeErrorwasraisedwhenembeddednullcodepointswereencountered\ninthePythonstring.\ns*(strorbytes-likeobject)[Py_buffer]\nThisformatacceptsUnicodeobjectsaswellasbytes-likeobjects. ItfillsaPy_bufferstructureprovidedby\nthecaller. InthiscasetheresultingCstringmaycontainembeddedNULbytes. Unicodeobjectsareconverted\ntoCstringsusing'utf-8'encoding.\ns#(str,read-onlybytes-likeobject)[constchar*,Py_ssize_t]\nLike s*, except that it provides a borrowed buffer. The result is stored into two C variables, the first one a\npointertoaCstring,thesecondoneitslength. Thestringmaycontainembeddednullbytes. Unicodeobjects\nareconvertedtoCstringsusing'utf-8'encoding.\nz(strorNone)[constchar*]\nLikes,butthePythonobjectmayalsobeNone,inwhichcasetheCpointerissettoNULL.\nz*(str,bytes-likeobjectorNone)[Py_buffer]\nLikes*,butthePythonobjectmayalsobeNone,inwhichcasethebufmemberofthePy_bufferstructure\nissettoNULL.\nz#(str,read-onlybytes-likeobjectorNone)[constchar*,Py_ssize_t]\nLikes#,butthePythonobjectmayalsobeNone,inwhichcasetheCpointerissettoNULL.\ny(read-onlybytes-likeobject)[constchar*]\nThisformatconvertsabytes-likeobjecttoaCpointertoaborrowedcharacterstring;itdoesnotacceptUnicode\nobjects. Thebytesbuffermustnotcontainembeddednullbytes;ifitdoes,aValueErrorexceptionisraised.\nChangedinversion3.5: Previously,TypeErrorwasraisedwhenembeddednullbyteswereencounteredin\nthebytesbuffer.\ny*(bytes-likeobject)[Py_buffer]\nThisvariantons*doesn\u2019tacceptUnicodeobjects,onlybytes-likeobjects. Thisistherecommendedwayto\nacceptbinarydata.\ny#(read-onlybytes-likeobject)[constchar*,Py_ssize_t]\nThisvariantons#doesn\u2019tacceptUnicodeobjects,onlybytes-likeobjects.\nS(bytes)[PyBytesObject*]\nRequiresthatthePythonobjectisabytesobject,withoutattemptinganyconversion. RaisesTypeErrorif\ntheobjectisnotabytesobject. TheCvariablemayalsobedeclaredasPyObject*.\nY(bytearray)[PyByteArrayObject*]\nRequires that the Python object is a bytearray object, without attempting any conversion. Raises\nTypeErroriftheobjectisnotabytearrayobject. TheCvariablemayalsobedeclaredasPyObject*.\nU(str)[PyObject*]\nRequiresthatthePythonobjectisaUnicodeobject,withoutattemptinganyconversion. RaisesTypeError\niftheobjectisnotaUnicodeobject. TheCvariablemayalsobedeclaredasPyObject*.\nw*(read-writebytes-likeobject)[Py_buffer]\nThis format accepts any object which implements the read-write buffer interface. It fills a Py_buffer\nstructure provided by the caller. The buffer may contain embedded null bytes. The caller have to call\nPyBuffer_Release()whenitisdonewiththebuffer.\nes(str)[constchar*encoding,char**buffer]\nThisvariantonsisusedforencodingUnicodeintoacharacterbuffer. Itonlyworksforencodeddatawithout\nembeddedNULbytes.\nThisformatrequirestwoarguments. Thefirstisonlyusedasinput,andmustbeaconst char*whichpoints\ntothenameofanencodingasaNUL-terminatedstring,orNULL,inwhichcase'utf-8'encodingisused.\nAnexceptionisraisedifthenamedencodingisnotknowntoPython. Thesecondargumentmustbeachar**;\n74 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\nthevalueofthepointeritreferenceswillbesettoabufferwiththecontentsoftheargumenttext. Thetext\nwillbeencodedintheencodingspecifiedbythefirstargument.\nPyArg_ParseTuple()willallocateabufferoftheneededsize,copytheencodeddataintothisbufferand\nadjust*buffertoreferencethenewlyallocatedstorage. ThecallerisresponsibleforcallingPyMem_Free()to\nfreetheallocatedbufferafteruse.\net(str,bytesorbytearray)[constchar*encoding,char**buffer]\nSameasesexceptthatbytestringobjectsarepassedthroughwithoutrecodingthem. Instead,theimplemen-\ntationassumesthatthebytestringobjectusestheencodingpassedinasparameter.\nes#(str)[constchar*encoding,char**buffer,Py_ssize_t*buffer_length]\nThis variant on s# is used for encoding Unicode into a character buffer. Unlike the es format, this variant\nallowsinputdatawhichcontainsNULcharacters.\nItrequiresthreearguments. Thefirstisonlyusedasinput,andmustbeaconst char*whichpointstothe\nname of an encoding as a NUL-terminated string, or NULL, in which case 'utf-8' encoding is used. An\nexceptionisraisedifthenamedencodingisnotknowntoPython. Thesecondargumentmustbeachar**;\nthevalueofthepointeritreferenceswillbesettoabufferwiththecontentsoftheargumenttext. Thetext\nwillbeencodedintheencodingspecifiedbythefirstargument. Thethirdargumentmustbeapointertoan\ninteger;thereferencedintegerwillbesettothenumberofbytesintheoutputbuffer.\nTherearetwomodesofoperation:\nIf*bufferpointsaNULLpointer,thefunctionwillallocateabufferoftheneededsize,copytheencodeddata\ninto this buffer and set *buffer to reference the newly allocated storage. The caller is responsible for calling\nPyMem_Free()tofreetheallocatedbufferafterusage.\nIf *buffer points to a non-NULL pointer (an already allocated buffer), PyArg_ParseTuple() will use this\nlocationasthebufferandinterprettheinitialvalueof*buffer_lengthasthebuffersize. Itwillthencopythe\nencodeddataintothebufferandNUL-terminateit. Ifthebufferisnotlargeenough,aValueErrorwillbe\nset.\nInbothcases,*buffer_lengthissettothelengthoftheencodeddatawithoutthetrailingNULbyte.\net#(str,bytesorbytearray)[constchar*encoding,char**buffer,Py_ssize_t*buffer_length]\nSame as es# except that byte string objects are passed through without recoding them. Instead, the imple-\nmentationassumesthatthebytestringobjectusestheencodingpassedinasparameter.\nChangedinversion3.12: u,u#,Z,andZ#areremovedbecausetheyusedalegacyPy_UNICODE*representation.\nNumbers\nThese formats allow representing Python numbers or single characters as C numbers. Formats that require\nint, float or complex can also use the corresponding special methods __index__(), __float__() or\n__complex__()toconvertthePythonobjecttotherequiredtype.\nForsignedintegerformats,OverflowErrorisraisedifthevalueisoutofrangefortheCtype. Forunsignedinteger\nformats,norangecheckingisdone\u2014themostsignificantbitsaresilentlytruncatedwhenthereceivingfieldistoo\nsmalltoreceivethevalue.\nb(int)[unsignedchar]\nConvertanonnegativePythonintegertoanunsignedtinyinteger,storedinaCunsigned char.\nB(int)[unsignedchar]\nConvertaPythonintegertoatinyintegerwithoutoverflowchecking,storedinaCunsigned char.\nh(int)[shortint]\nConvertaPythonintegertoaCshort int.\nH(int)[unsignedshortint]\nConvertaPythonintegertoaCunsigned short int,withoutoverflowchecking.\ni(int)[int]\nConvertaPythonintegertoaplainCint.\n6.6. Parsingargumentsandbuildingvalues 75\nThePython/CAPI,Release3.13.3\nI(int)[unsignedint]\nConvertaPythonintegertoaCunsigned int,withoutoverflowchecking.\nl(int)[longint]\nConvertaPythonintegertoaClong int.\nk(int)[unsignedlong]\nConvertaPythonintegertoaCunsigned longwithoutoverflowchecking.\nL(int)[longlong]\nConvertaPythonintegertoaClong long.\nK(int)[unsignedlonglong]\nConvertaPythonintegertoaCunsigned long longwithoutoverflowchecking.\nn(int)[Py_ssize_t]\nConvertaPythonintegertoaCPy_ssize_t.\nc(bytesorbytearrayoflength1)[char]\nConvertaPythonbyte,representedasabytesorbytearrayobjectoflength1,toaCchar.\nChangedinversion3.3: Allowbytearrayobjects.\nC(stroflength1)[int]\nConvertaPythoncharacter,representedasastrobjectoflength1,toaCint.\nf(float)[float]\nConvertaPythonfloating-pointnumbertoaCfloat.\nd(float)[double]\nConvertaPythonfloating-pointnumbertoaCdouble.\nD(complex)[Py_complex]\nConvertaPythoncomplexnumbertoaCPy_complexstructure.\nOtherobjects\nO(object)[PyObject*]\nStoreaPythonobject(withoutanyconversion)inaCobjectpointer. TheCprogramthusreceivestheactual\nobject that was passed. A new strong reference to the object is not created (i.e. its reference count is not\nincreased). ThepointerstoredisnotNULL.\nO!(object)[typeobject,PyObject*]\nStoreaPythonobjectinaCobjectpointer. ThisissimilartoO,buttakestwoCarguments: thefirstisthe\naddressofaPythontypeobject,thesecondistheaddressoftheCvariable(oftypePyObject*)intowhich\ntheobjectpointerisstored. IfthePythonobjectdoesnothavetherequiredtype,TypeErrorisraised.\nO&(object)[converter,address]\nConvertaPythonobjecttoaCvariablethroughaconverter function. Thistakestwoarguments: thefirstis\nafunction, thesecondistheaddressofaCvariable(ofarbitrarytype), convertedtovoid*. Theconverter\nfunctioninturniscalledasfollows:\nstatus = converter(object, address);\nwhereobject isthePythonobjecttobeconvertedandaddressisthevoid*argumentthatwaspassedtothe\nPyArg_Parse*function. Thereturnedstatusshouldbe1forasuccessfulconversionand0iftheconversion\nhasfailed. Whentheconversionfails,theconverterfunctionshouldraiseanexceptionandleavethecontentof\naddressunmodified. Iftheconverter returnsPy_CLEANUP_SUPPORTED,itmaygetcalledasecondtimeif\ntheargumentparsingeventuallyfails,givingtheconverterachancetoreleaseanymemorythatithadalready\nallocated. Inthissecondcall, theobject parameterwillbeNULL;address willhavethesamevalueasinthe\noriginalcall.\nExamplesofconverters: PyUnicode_FSConverter()andPyUnicode_FSDecoder().\nChangedinversion3.1: Py_CLEANUP_SUPPORTEDwasadded.\n76 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\np(bool)[int]\nTeststhevaluepassedinfortruth(abooleanpredicate)andconvertstheresulttoitsequivalentCtrue/false\nintegervalue. Setstheintto1iftheexpressionwastrueand0ifitwasfalse. ThisacceptsanyvalidPython\nvalue. SeetruthformoreinformationabouthowPythontestsvaluesfortruth.\nAddedinversion3.3.\n(items)(tuple)[matching-items]\nTheobjectmustbeaPythonsequencewhoselengthisthenumberofformatunitsinitems. TheCarguments\nmustcorrespondtotheindividualformatunitsinitems. Formatunitsforsequencesmaybenested.\nAfewothercharactershaveameaninginaformatstring. Thesemaynotoccurinsidenestedparentheses. Theyare:\n|\nIndicatesthattheremainingargumentsinthePythonargumentlistareoptional. TheCvariablescorresponding\ntooptionalargumentsshouldbeinitializedtotheirdefaultvalue\u2014whenanoptionalargumentisnotspecified,\nPyArg_ParseTuple()doesnottouchthecontentsofthecorrespondingCvariable(s).\n$\nPyArg_ParseTupleAndKeywords()only: IndicatesthattheremainingargumentsinthePythonargument\nlist are keyword-only. Currently, all keyword-only arguments must also be optional arguments, so | must\nalwaysbespecifiedbefore$intheformatstring.\nAddedinversion3.3.\n:\nThelistofformatunitsendshere;thestringafterthecolonisusedasthefunctionnameinerrormessages(the\n\u201cassociatedvalue\u201doftheexceptionthatPyArg_ParseTuple()raises).\n;\nThelistofformatunitsendshere; thestringafterthesemicolonisusedastheerrormessageinstead ofthe\ndefaulterrormessage. : and;mutuallyexcludeeachother.\nNotethatanyPythonobjectreferenceswhichareprovidedtothecallerareborrowedreferences;donotreleasethem\n(i.e. donotdecrementtheirreferencecount)!\nAdditionalargumentspassedtothesefunctionsmustbeaddressesofvariableswhosetypeisdeterminedbytheformat\nstring;theseareusedtostorevaluesfromtheinputtuple. Thereareafewcases,asdescribedinthelistofformatunits\nabove,wheretheseparametersareusedasinputvalues; theyshouldmatchwhatisspecifiedforthecorresponding\nformatunitinthatcase.\nFortheconversiontosucceed,theargobjectmustmatchtheformatandtheformatmustbeexhausted. Onsuccess,\nthePyArg_Parse*functionsreturntrue,otherwisetheyreturnfalseandraiseanappropriateexception. Whenthe\nPyArg_Parse* functions fail due to conversion failure in one of the format units, the variables at the addresses\ncorrespondingtothatandthefollowingformatunitsareleftuntouched.\nAPIFunctions\nintPyArg_ParseTuple(PyObject*args,constchar*format,...)\nPart of the Stable ABI. Parse the parameters of a function that takes only positional parameters into local\nvariables. Returnstrueonsuccess;onfailure,itreturnsfalseandraisestheappropriateexception.\nintPyArg_VaParse(PyObject*args,constchar*format,va_listvargs)\nPart of the Stable ABI. Identical to PyArg_ParseTuple(), except that it accepts a va_list rather than a\nvariablenumberofarguments.\nintPyArg_ParseTupleAndKeywords(PyObject*args,PyObject*kw,constchar*format,char*const\n*keywords,...)\nPartoftheStableABI.Parsetheparametersofafunctionthattakesbothpositionalandkeywordparameters\nintolocalvariables. ThekeywordsargumentisaNULL-terminatedarrayofkeywordparameternamesspeci-\nfiedasnull-terminatedASCIIorUTF-8encodedCstrings. Emptynamesdenotepositional-onlyparameters.\nReturnstrueonsuccess;onfailure,itreturnsfalseandraisestheappropriateexception.\n6.6. Parsingargumentsandbuildingvalues 77\nThePython/CAPI,Release3.13.3\n(cid:174) Note\nThekeywordsparameterdeclarationischar *const*inCandconst char *const*inC++. This\ncanbeoverriddenwiththePY_CXX_CONSTmacro.\nChangedinversion3.6: Addedsupportforpositional-onlyparameters.\nChanged in version 3.13: The keywords parameter has now type char *const* in C and const char\n*const*inC++,insteadofchar**. Addedsupportfornon-ASCIIkeywordparameternames.\nintPyArg_VaParseTupleAndKeywords(PyObject*args,PyObject*kw,constchar*format,char*const\n*keywords,va_listvargs)\nPart of the Stable ABI. Identical to PyArg_ParseTupleAndKeywords(), except that it accepts a va_list\nratherthanavariablenumberofarguments.\nintPyArg_ValidateKeywordArguments(PyObject*)\nPart of the Stable ABI. Ensure that the keys in the keywords argument dictionary are strings. This is only\nneededifPyArg_ParseTupleAndKeywords()isnotused,sincethelatteralreadydoesthischeck.\nAddedinversion3.2.\nintPyArg_Parse(PyObject*args,constchar*format,...)\nPartoftheStableABI.Parsetheparameterofafunctionthattakesasinglepositionalparameterintoalocal\nvariable. Returnstrueonsuccess;onfailure,itreturnsfalseandraisestheappropriateexception.\nExample:\n// Function using METH_O calling convention\nstatic PyObject*\nmy_function(PyObject *module, PyObject *arg)\n{\nint value;\nif (!PyArg_Parse(arg, \"i:my_function\", &value)) {\nreturn NULL;\n}\n// ... use value ...\n}\nintPyArg_UnpackTuple(PyObject*args,constchar*name,Py_ssize_tmin,Py_ssize_tmax,...)\nPartoftheStableABI.Asimplerformofparameterretrievalwhichdoesnotuseaformatstringtospecifythe\ntypesofthearguments. Functionswhichusethismethodtoretrievetheirparametersshouldbedeclaredas\nMETH_VARARGSinfunctionormethodtables. Thetuplecontainingtheactualparametersshouldbepassedas\nargs;itmustactuallybeatuple. Thelengthofthetuplemustbeatleastminandnomorethanmax;minand\nmaxmaybeequal. Additionalargumentsmustbepassedtothefunction,eachofwhichshouldbeapointerto\naPyObject*variable;thesewillbefilledinwiththevaluesfromargs;theywillcontainborrowedreferences.\nThevariableswhichcorrespondtooptionalparametersnotgivenbyargswillnotbefilledin;theseshouldbe\ninitializedbythecaller. Thisfunctionreturnstrueonsuccessandfalseifargs isnotatupleorcontainsthe\nwrongnumberofelements;anexceptionwillbesetiftherewasafailure.\nThisisanexampleoftheuseofthisfunction, takenfromthesourcesforthe_weakrefhelpermodulefor\nweakreferences:\nstatic PyObject *\nweakref_ref(PyObject *self, PyObject *args)\n{\nPyObject *object;\nPyObject *callback = NULL;\nPyObject *result = NULL;\n(continuesonnextpage)\n78 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nif (PyArg_UnpackTuple(args, \"ref\", 1, 2, &object, &callback)) {\nresult = PyWeakref_NewRef(object, callback);\n}\nreturn result;\n}\nThe call to PyArg_UnpackTuple() in this example is entirely equivalent to this call to\nPyArg_ParseTuple():\nPyArg_ParseTuple(args, \"O|O:ref\", &object, &callback)\nPY_CXX_CONST\nThe value to be inserted, if any, before char *const* in the keywords parameter declaration of\nPyArg_ParseTupleAndKeywords()andPyArg_VaParseTupleAndKeywords(). DefaultemptyforC\nand const for C++ (const char *const*). To override, define it to the desired value before including\nPython.h.\nAddedinversion3.13.\n6.6.2 Building values\nPyObject*Py_BuildValue(constchar*format,...)\nReturnvalue: Newreference. PartoftheStableABI.Createanewvaluebasedonaformatstringsimilarto\nthose accepted by the PyArg_Parse* family of functions and a sequence of values. Returns the value or\nNULLinthecaseofanerror;anexceptionwillberaisedifNULLisreturned.\nPy_BuildValue()doesnotalwaysbuildatuple. Itbuildsatupleonlyifitsformatstringcontainstwoor\nmoreformatunits. Iftheformatstringisempty,itreturnsNone;ifitcontainsexactlyoneformatunit,itreturns\nwhateverobjectisdescribedbythatformatunit. Toforceittoreturnatupleofsize0orone,parenthesizethe\nformatstring.\nWhenmemorybuffersarepassedasparameterstosupplydatatobuildobjects,asforthesands#formats,\nthe required data is copied. Buffers provided by the caller are never referenced by the objects created by\nPy_BuildValue(). In other words, if your code invokes malloc() and passes the allocated memory to\nPy_BuildValue(),yourcodeisresponsibleforcallingfree()forthatmemoryoncePy_BuildValue()\nreturns.\nInthefollowingdescription,thequotedformistheformatunit;theentryin(round)parenthesesisthePython\nobjecttypethattheformatunitwillreturn;andtheentryin[square]bracketsisthetypeoftheCvalue(s)to\nbepassed.\nThecharactersspace,tab,colonandcommaareignoredinformatstrings(butnotwithinformatunitssuchas\ns#). Thiscanbeusedtomakelongformatstringsatadmorereadable.\ns(strorNone)[constchar*]\nConvert a null-terminated C string to a Python str object using 'utf-8' encoding. If the C string\npointerisNULL,Noneisused.\ns#(strorNone)[constchar*,Py_ssize_t]\nConvertaCstringanditslengthtoaPythonstrobjectusing'utf-8'encoding. IftheCstringpointer\nisNULL,thelengthisignoredandNoneisreturned.\ny(bytes)[constchar*]\nThisconvertsaCstringtoaPythonbytesobject. IftheCstringpointerisNULL,Noneisreturned.\ny#(bytes)[constchar*,Py_ssize_t]\nThis converts a C string and its lengths to a Python object. If the C string pointer is NULL, None is\nreturned.\nz(strorNone)[constchar*]\nSameass.\n6.6. Parsingargumentsandbuildingvalues 79\nThePython/CAPI,Release3.13.3\nz#(strorNone)[constchar*,Py_ssize_t]\nSameass#.\nu(str)[constwchar_t*]\nConvert a null-terminated wchar_t buffer of Unicode (UTF-16 or UCS-4) data to a Python Unicode\nobject. IftheUnicodebufferpointerisNULL,Noneisreturned.\nu#(str)[constwchar_t*,Py_ssize_t]\nConvert a Unicode (UTF-16 or UCS-4) data buffer and its length to a Python Unicode object. If the\nUnicodebufferpointerisNULL,thelengthisignoredandNoneisreturned.\nU(strorNone)[constchar*]\nSameass.\nU#(strorNone)[constchar*,Py_ssize_t]\nSameass#.\ni(int)[int]\nConvertaplainCinttoaPythonintegerobject.\nb(int)[char]\nConvertaplainCchartoaPythonintegerobject.\nh(int)[shortint]\nConvertaplainCshort inttoaPythonintegerobject.\nl(int)[longint]\nConvertaClong inttoaPythonintegerobject.\nB(int)[unsignedchar]\nConvertaCunsigned chartoaPythonintegerobject.\nH(int)[unsignedshortint]\nConvertaCunsigned short inttoaPythonintegerobject.\nI(int)[unsignedint]\nConvertaCunsigned inttoaPythonintegerobject.\nk(int)[unsignedlong]\nConvertaCunsigned longtoaPythonintegerobject.\nL(int)[longlong]\nConvertaClong longtoaPythonintegerobject.\nK(int)[unsignedlonglong]\nConvertaCunsigned long longtoaPythonintegerobject.\nn(int)[Py_ssize_t]\nConvertaCPy_ssize_ttoaPythoninteger.\nc(bytesoflength1)[char]\nConvertaCintrepresentingabytetoaPythonbytesobjectoflength1.\nC(stroflength1)[int]\nConvertaCintrepresentingacharactertoPythonstrobjectoflength1.\nd(float)[double]\nConvertaCdoubletoaPythonfloating-pointnumber.\nf(float)[float]\nConvertaCfloattoaPythonfloating-pointnumber.\nD(complex)[Py_complex*]\nConvertaCPy_complexstructuretoaPythoncomplexnumber.\nO(object)[PyObject*]\nPassaPythonobjectuntouchedbutcreateanewstrongreferencetoit(i.e. itsreferencecountisincre-\nmentedbyone). IftheobjectpassedinisaNULLpointer,itisassumedthatthiswascausedbecausethe\n80 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\ncallproducingtheargumentfoundan errorandsetan exception. Therefore, Py_BuildValue() will\nreturnNULLbutwon\u2019traiseanexception. Ifnoexceptionhasbeenraisedyet,SystemErrorisset.\nS(object)[PyObject*]\nSameasO.\nN(object)[PyObject*]\nSameasO,exceptitdoesn\u2019tcreateanewstrongreference. Usefulwhentheobjectiscreatedbyacallto\nanobjectconstructorintheargumentlist.\nO&(object)[converter,anything]\nConvertanythingtoaPythonobjectthroughaconverter function. Thefunctioniscalledwithanything\n(whichshouldbecompatiblewithvoid*)asitsargumentandshouldreturna\u201cnew\u201dPythonobject,or\nNULLifanerroroccurred.\n(items)(tuple)[matching-items]\nConvertasequenceofCvaluestoaPythontuplewiththesamenumberofitems.\n[items](list)[matching-items]\nConvertasequenceofCvaluestoaPythonlistwiththesamenumberofitems.\n{items}(dict)[matching-items]\nConvertasequenceofCvaluestoaPythondictionary. EachpairofconsecutiveCvaluesaddsoneitem\ntothedictionary,servingaskeyandvalue,respectively.\nIfthereisanerrorintheformatstring,theSystemErrorexceptionissetandNULLreturned.\nPyObject*Py_VaBuildValue(constchar*format,va_listvargs)\nReturnvalue: Newreference. PartoftheStableABI.IdenticaltoPy_BuildValue(),exceptthatitacceptsa\nva_listratherthanavariablenumberofarguments.\n6.7 String conversion and formatting\nFunctionsfornumberconversionandformattedstringoutput.\nintPyOS_snprintf(char*str,size_tsize,constchar*format,...)\nPartoftheStableABI.Outputnotmorethansizebytestostr accordingtotheformatstringformat andthe\nextraarguments. SeetheUnixmanpagesnprintf(3).\nintPyOS_vsnprintf(char*str,size_tsize,constchar*format,va_listva)\nPartoftheStableABI.Outputnotmorethansizebytestostr accordingtotheformatstringformat andthe\nvariableargumentlistva. Unixmanpagevsnprintf(3).\nPyOS_snprintf() and PyOS_vsnprintf() wrap the Standard C library functions snprintf() and\nvsnprintf(). Theirpurposeistoguaranteeconsistentbehaviorincornercases,whichtheStandardCfunctions\ndonot.\nThewrappersensurethatstr[size-1]isalways'\\0'uponreturn. Theyneverwritemorethansizebytes(including\nthetrailing'\\0')intostr. Bothfunctionsrequirethatstr != NULL,size > 0,format != NULLandsize <\nINT_MAX.NotethatthismeansthereisnoequivalenttotheC99n = snprintf(NULL, 0, ...)whichwould\ndeterminethenecessarybuffersize.\nThereturnvalue(rv)forthesefunctionsshouldbeinterpretedasfollows:\n\u2022 When0 <= rv < size,theoutputconversionwassuccessfulandrvcharacterswerewrittentostr(excluding\nthetrailing'\\0'byteatstr[rv]).\n\u2022 Whenrv >= size, theoutputconversionwastruncatedandabufferwithrv + 1byteswouldhavebeen\nneededtosucceed. str[size-1]is'\\0'inthiscase.\n\u2022 When rv < 0, \u201csomething bad happened.\u201d str[size-1] is '\\0' in this case too, but the rest of str is\nundefined. Theexactcauseoftheerrordependsontheunderlyingplatform.\nThefollowingfunctionsprovidelocale-independentstringtonumberconversions.\n6.7. Stringconversionandformatting 81\nThePython/CAPI,Release3.13.3\nunsignedlongPyOS_strtoul(constchar*str,char**ptr,intbase)\nPartoftheStableABI.Converttheinitialpartofthestringinstrtoanunsigned longvalueaccordingto\nthegivenbase,whichmustbebetween2and36inclusive,orbethespecialvalue0.\nLeadingwhitespaceandcaseofcharactersareignored. Ifbaseiszeroitlooksforaleading0b,0oor0xto\ntellwhichbase. Iftheseareabsentitdefaultsto10. Basemustbe0orbetween2and36(inclusive). Ifptr\nisnon-NULLitwillcontainapointertotheendofthescan.\nIf the converted value falls out of range of corresponding return type, range error occurs (errno is set to\nERANGE)andULONG_MAXisreturned. Ifnoconversioncanbeperformed,0isreturned.\nSeealsotheUnixmanpagestrtoul(3).\nAddedinversion3.2.\nlongPyOS_strtol(constchar*str,char**ptr,intbase)\nPartoftheStableABI.Converttheinitialpartofthestringinstrtoanlongvalueaccordingtothegiven\nbase,whichmustbebetween2and36inclusive,orbethespecialvalue0.\nSameasPyOS_strtoul(),butreturnalongvalueinsteadandLONG_MAXonoverflows.\nSeealsotheUnixmanpagestrtol(3).\nAddedinversion3.2.\ndoublePyOS_string_to_double(constchar*s,char**endptr,PyObject*overflow_exception)\nPart of the Stable ABI. Convert a string s to a double, raising a Python exception on failure. The set of\naccepted strings corresponds to the set of strings accepted by Python\u2019s float() constructor, except that s\nmustnothaveleadingortrailingwhitespace. Theconversionisindependentofthecurrentlocale.\nIfendptrisNULL,convertthewholestring. RaiseValueErrorandreturn-1.0ifthestringisnotavalid\nrepresentationofafloating-pointnumber.\nIfendptrisnotNULL,convertasmuchofthestringaspossibleandset*endptrtopointtothefirstunconverted\ncharacter. Ifnoinitialsegmentofthestringisthevalidrepresentationofafloating-pointnumber,set*endptr\ntopointtothebeginningofthestring,raiseValueError,andreturn-1.0.\nIf s represents a value that is too large to store in a float (for example, \"1e500\" is such a string on many\nplatforms)thenifoverflow_exceptionisNULLreturnPy_HUGE_VAL(withanappropriatesign)anddon\u2019t\nset any exception. Otherwise, overflow_exception must point to a Python exception object; raise that\nexceptionandreturn-1.0. Inbothcases,set*endptrtopointtothefirstcharacteraftertheconvertedvalue.\nIf any other error occurs during the conversion (for example an out-of-memory error), set the appropriate\nPythonexceptionandreturn-1.0.\nAddedinversion3.1.\nchar*PyOS_double_to_string(doubleval,charformat_code,intprecision,intflags,int*ptype)\nPartoftheStableABI.Convertadoublevaltoastringusingsuppliedformat_code,precision,andflags.\nformat_codemustbeoneof'e','E','f','F','g','G'or'r'. For'r',thesuppliedprecisionmustbe\n0andisignored. The'r'formatcodespecifiesthestandardrepr()format.\nflags can be zero or more of the values Py_DTSF_SIGN, Py_DTSF_ADD_DOT_0, or Py_DTSF_ALT, or-ed\ntogether:\n\u2022 Py_DTSF_SIGNmeanstoalwaysprecedethereturnedstringwithasigncharacter, evenifval isnon-\nnegative.\n\u2022 Py_DTSF_ADD_DOT_0meanstoensurethatthereturnedstringwillnotlooklikeaninteger.\n\u2022 Py_DTSF_ALT means to apply \u201calternate\u201d formatting rules. See the documentation for the\nPyOS_snprintf()'#'specifierfordetails.\nIfptypeisnon-NULL,thenthevalueitpointstowillbesettooneofPy_DTST_FINITE,Py_DTST_INFINITE,\norPy_DTST_NAN,signifyingthatvalisafinitenumber,aninfinitenumber,ornotanumber,respectively.\n82 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\nThereturnvalueisapointertobufferwiththeconvertedstringorNULLiftheconversionfailed. Thecalleris\nresponsibleforfreeingthereturnedstringbycallingPyMem_Free().\nAddedinversion3.1.\nintPyOS_stricmp(constchar*s1,constchar*s2)\nCase insensitive comparison of strings. The function works almost identically to strcmp() except that it\nignoresthecase.\nintPyOS_strnicmp(constchar*s1,constchar*s2,Py_ssize_tsize)\nCase insensitive comparison of strings. The function works almost identically to strncmp() except that it\nignoresthecase.\n6.8 PyHash API\nSeealsothePyTypeObject.tp_hashmemberandnumeric-hash.\ntypePy_hash_t\nHashvaluetype: signedinteger.\nAddedinversion3.2.\ntypePy_uhash_t\nHashvaluetype: unsignedinteger.\nAddedinversion3.2.\nPyHASH_MODULUS\nTheMersenneprimeP = 2**n -1,usedfornumerichashscheme.\nAddedinversion3.13.\nPyHASH_BITS\nTheexponentnofPinPyHASH_MODULUS.\nAddedinversion3.13.\nPyHASH_MULTIPLIER\nPrimemultiplierusedinstringandvariousotherhashes.\nAddedinversion3.13.\nPyHASH_INF\nThehashvaluereturnedforapositiveinfinity.\nAddedinversion3.13.\nPyHASH_IMAG\nThemultiplierusedfortheimaginarypartofacomplexnumber.\nAddedinversion3.13.\ntypePyHash_FuncDef\nHashfunctiondefinitionusedbyPyHash_GetFuncDef().\nconstchar*name\nHashfunctionname(UTF-8encodedstring).\nconstinthash_bits\nInternalsizeofthehashvalueinbits.\nconstintseed_bits\nSizeofseedinputinbits.\nAddedinversion3.4.\n6.8. PyHashAPI 83\nThePython/CAPI,Release3.13.3\nPyHash_FuncDef *PyHash_GetFuncDef(void)\nGetthehashfunctiondefinition.\n(cid:181) Seealso\nPEP456\u201cSecureandinterchangeablehashalgorithm\u201d.\nAddedinversion3.4.\nPy_hash_tPy_HashPointer(constvoid*ptr)\nHashapointervalue: processthepointervalueasaninteger(castittouintptr_tinternally). Thepointeris\nnotdereferenced.\nThefunctioncannotfail: itcannotreturn-1.\nAddedinversion3.13.\nPy_hash_tPyObject_GenericHash(PyObject*obj)\nGenerichashingfunctionthatismeanttobeputintoatypeobject\u2019stp_hashslot. Itsresultonlydependson\ntheobject\u2019sidentity.\nCPythonimplementationdetail: InCPython,itisequivalenttoPy_HashPointer().\nAddedinversion3.13.\n6.9 Reflection\nPyObject*PyEval_GetBuiltins(void)\nReturn value: Borrowed reference. Part of the Stable ABI. Deprecated since version 3.13: Use\nPyEval_GetFrameBuiltins()instead.\nReturnadictionaryofthebuiltinsinthecurrentexecutionframe,ortheinterpreterofthethreadstateifno\nframeiscurrentlyexecuting.\nPyObject*PyEval_GetLocals(void)\nReturn value: Borrowed reference. Part of the Stable ABI. Deprecated since version 3.13: Use either\nPyEval_GetFrameLocals() to obtain the same behaviour as calling locals() in Python code, or else\ncall PyFrame_GetLocals() on the result of PyEval_GetFrame() to access the f_locals attribute of\nthecurrentlyexecutingframe.\nReturnamappingprovidingaccesstothelocalvariablesinthecurrentexecutionframe,orNULLifnoframe\niscurrentlyexecuting.\nRefertolocals()fordetailsofthemappingreturnedatdifferentscopes.\nAs this function returns a borrowed reference, the dictionary returned for optimized scopes is cached on the\nframeobjectandwillremainaliveaslongastheframeobjectdoes. UnlikePyEval_GetFrameLocals()\nand locals(), subsequent calls to this function in the same frame will update the contents of the cached\ndictionarytoreflectchangesinthestateofthelocalvariablesratherthanreturninganewsnapshot.\nChanged in version 3.13: As part of PEP 667, PyFrame_GetLocals(), locals(), and FrameType.\nf_localsnolongermakeuseofthesharedcachedictionary. RefertotheWhat\u2019sNewentryforadditional\ndetails.\nPyObject*PyEval_GetGlobals(void)\nReturn value: Borrowed reference. Part of the Stable ABI. Deprecated since version 3.13: Use\nPyEval_GetFrameGlobals()instead.\nReturn a dictionary of the global variables in the current execution frame, or NULL if no frame is currently\nexecuting.\n84 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\nPyFrameObject*PyEval_GetFrame(void)\nReturn value: Borrowed reference. Part of the Stable ABI. Return the current thread state\u2019s frame, which is\nNULLifnoframeiscurrentlyexecuting.\nSeealsoPyThreadState_GetFrame().\nPyObject*PyEval_GetFrameBuiltins(void)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.13. Returnadictionaryofthebuiltinsin\nthecurrentexecutionframe,ortheinterpreterofthethreadstateifnoframeiscurrentlyexecuting.\nAddedinversion3.13.\nPyObject*PyEval_GetFrameLocals(void)\nReturnvalue:Newreference. PartoftheStableABIsinceversion3.13. Returnadictionaryofthelocalvariables\ninthecurrentexecutionframe,orNULLifnoframeiscurrentlyexecuting. Equivalenttocallinglocals()in\nPythoncode.\nToaccessf_localsonthecurrentframewithoutmakinganindependentsnapshotinoptimizedscopes,call\nPyFrame_GetLocals()ontheresultofPyEval_GetFrame().\nAddedinversion3.13.\nPyObject*PyEval_GetFrameGlobals(void)\nReturn value: New reference. Part of the Stable ABI since version 3.13. Return a dictionary of the global\nvariables in the current execution frame, or NULL if no frame is currently executing. Equivalent to calling\nglobals()inPythoncode.\nAddedinversion3.13.\nconstchar*PyEval_GetFuncName(PyObject*func)\nPartoftheStableABI.Returnthenameoffuncifitisafunction,classorinstanceobject,elsethenameof\nfuncstype.\nconstchar*PyEval_GetFuncDesc(PyObject*func)\nPart of the Stable ABI. Return a description string, depending on the type of func. Return values include\n\u201c()\u201d for functions and methods, \u201c constructor\u201d, \u201c instance\u201d, and \u201c object\u201d. Concatenated with the result of\nPyEval_GetFuncName(),theresultwillbeadescriptionoffunc.\n6.10 Codec registry and support functions\nintPyCodec_Register(PyObject*search_function)\nPartoftheStableABI.Registeranewcodecsearchfunction.\nAssideeffect,thistriestoloadtheencodingspackage,ifnotyetdone,tomakesurethatitisalwaysfirstin\nthelistofsearchfunctions.\nintPyCodec_Unregister(PyObject*search_function)\nPartofthe StableABI sinceversion3.10. Unregisteracodecsearchfunctionandcleartheregistry\u2019scache.\nIfthesearchfunctionisnotregistered,donothing. Return0onsuccess. Raiseanexceptionandreturn-1on\nerror.\nAddedinversion3.10.\nintPyCodec_KnownEncoding(constchar*encoding)\nPartoftheStableABI.Return1or0dependingonwhetherthereisaregisteredcodecforthegivenencoding.\nThisfunctionalwayssucceeds.\nPyObject*PyCodec_Encode(PyObject*object,constchar*encoding,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.GenericcodecbasedencodingAPI.\nobject is passed through the encoder function found for the given encoding using the error handling method\ndefinedbyerrors. errorsmaybeNULLtousethedefaultmethoddefinedforthecodec. RaisesaLookupError\nifnoencodercanbefound.\n6.10. Codecregistryandsupportfunctions 85\nThePython/CAPI,Release3.13.3\nPyObject*PyCodec_Decode(PyObject*object,constchar*encoding,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.GenericcodecbaseddecodingAPI.\nobject is passed through the decoder function found for the given encoding using the error handling method\ndefinedbyerrors. errorsmaybeNULLtousethedefaultmethoddefinedforthecodec. RaisesaLookupError\nifnoencodercanbefound.\n6.10.1 Codec lookup API\nIn the following functions, the encoding string is looked up converted to all lower-case characters, which makes\nencodingslookedupthroughthismechanismeffectivelycase-insensitive. Ifnocodecisfound, aKeyErrorisset\nandNULLreturned.\nPyObject*PyCodec_Encoder(constchar*encoding)\nReturnvalue: Newreference. PartoftheStableABI.Getanencoderfunctionforthegivenencoding.\nPyObject*PyCodec_Decoder(constchar*encoding)\nReturnvalue: Newreference. PartoftheStableABI.Getadecoderfunctionforthegivenencoding.\nPyObject*PyCodec_IncrementalEncoder(constchar*encoding,constchar*errors)\nReturn value: New reference. Part of the Stable ABI. Get an IncrementalEncoder object for the given\nencoding.\nPyObject*PyCodec_IncrementalDecoder(constchar*encoding,constchar*errors)\nReturn value: New reference. Part of the Stable ABI. Get an IncrementalDecoder object for the given\nencoding.\nPyObject*PyCodec_StreamReader(constchar*encoding,PyObject*stream,constchar*errors)\nReturn value: New reference. Part of the Stable ABI. Get a StreamReader factory function for the given\nencoding.\nPyObject*PyCodec_StreamWriter(constchar*encoding,PyObject*stream,constchar*errors)\nReturn value: New reference. Part of the Stable ABI. Get a StreamWriter factory function for the given\nencoding.\n6.10.2 Registry API for Unicode encoding error handlers\nintPyCodec_RegisterError(constchar*name,PyObject*error)\nPartoftheStableABI.Registertheerrorhandlingcallbackfunctionerrorunderthegivenname. Thiscallback\nfunctionwillbecalledbyacodecwhenitencountersunencodablecharacters/undecodablebytesandnameis\nspecifiedastheerrorparameterinthecalltotheencode/decodefunction.\nThe callback gets a single argument, an instance of UnicodeEncodeError, UnicodeDecodeError or\nUnicodeTranslateError that holds information about the problematic sequence of characters or bytes\nandtheiroffsetintheoriginalstring(seeUnicodeExceptionObjectsforfunctionstoextractthisinformation).\nThecallbackmusteitherraisethegivenexception,orreturnatwo-itemtuplecontainingthereplacementfor\nthe problematicsequence, andan integergivingtheoffset intheoriginalstringatwhichencoding/decoding\nshouldberesumed.\nReturn0onsuccess,-1onerror.\nPyObject*PyCodec_LookupError(constchar*name)\nReturnvalue: Newreference. PartoftheStableABI.Lookuptheerrorhandlingcallbackfunctionregistered\nundername. AsaspecialcaseNULLcanbepassed,inwhichcasetheerrorhandlingcallbackfor\u201cstrict\u201dwill\nbereturned.\nPyObject*PyCodec_StrictErrors(PyObject*exc)\nReturnvalue: AlwaysNULL.PartoftheStableABI.Raiseexcasanexception.\nPyObject*PyCodec_IgnoreErrors(PyObject*exc)\nReturnvalue: Newreference. PartoftheStableABI.Ignoretheunicodeerror,skippingthefaultyinput.\n86 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\nPyObject*PyCodec_ReplaceErrors(PyObject*exc)\nReturnvalue: Newreference. PartoftheStableABI.Replacetheunicodeencodeerrorwith?orU+FFFD.\nPyObject*PyCodec_XMLCharRefReplaceErrors(PyObject*exc)\nReturnvalue: Newreference. PartoftheStableABI.ReplacetheunicodeencodeerrorwithXMLcharacter\nreferences.\nPyObject*PyCodec_BackslashReplaceErrors(PyObject*exc)\nReturnvalue: Newreference. PartoftheStableABI.Replacetheunicodeencodeerrorwithbackslashescapes\n(\\x,\\uand\\U).\nPyObject*PyCodec_NameReplaceErrors(PyObject*exc)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.7. Replacetheunicodeencodeerrorwith\n\\N{...}escapes.\nAddedinversion3.5.\n6.11 PyTime C API\nAddedinversion3.13.\nTheclockCAPIprovidesaccesstosystemclocks. ItissimilartothePythontimemodule.\nForCAPIrelatedtothedatetimemodule,seeDateTimeObjects.\n6.11.1 Types\ntypePyTime_t\nAtimestampordurationinnanoseconds,representedasasigned64-bitinteger.\nThereferencepointfortimestampsdependsontheclockused. Forexample,PyTime_Time()returnstimes-\ntampsrelativetotheUNIXepoch.\nThe supported range is around [-292.3 years; +292.3 years]. Using the Unix epoch (January 1st, 1970) as\nreference, the supported date range is around [1677-09-21; 2262-04-11]. The exact limits are exposed as\nconstants:\nPyTime_tPyTime_MIN\nMinimumvalueofPyTime_t.\nPyTime_tPyTime_MAX\nMaximumvalueofPyTime_t.\n6.11.2 Clock Functions\nThefollowingfunctionstakeapointertoaPyTime_tthattheysettothevalueofaparticularclock. Detailsofeach\nclockaregiveninthedocumentationofthecorrespondingPythonfunction.\nThefunctionsreturn0onsuccess,or-1(withanexceptionset)onfailure.\nOnintegeroverflow,theysetthePyExc_OverflowErrorexceptionandset*resulttothevalueclampedtothe\n[PyTime_MIN; PyTime_MAX]range. (Oncurrentsystems,integeroverflowsarelikelycausedbymisconfigured\nsystemtime.)\nAsanyotherCAPI(unlessotherwisespecified),thefunctionsmustbecalledwiththeGILheld.\nintPyTime_Monotonic(PyTime_t*result)\nReadthemonotonicclock. Seetime.monotonic()forimportantdetailsonthisclock.\nintPyTime_PerfCounter(PyTime_t*result)\nReadtheperformancecounter. Seetime.perf_counter()forimportantdetailsonthisclock.\nintPyTime_Time(PyTime_t*result)\nReadthe\u201cwallclock\u201dtime. Seetime.time()fordetailsimportantonthisclock.\n6.11. PyTimeCAPI 87\nThePython/CAPI,Release3.13.3\n6.11.3 Raw Clock Functions\nSimilartoclockfunctions,butdon\u2019tsetanexceptiononerroranddon\u2019trequirethecallertoholdtheGIL.\nOnsuccess,thefunctionsreturn0.\nOnfailure,theyset*resultto0andreturn-1,withoutsettinganexception. Togetthecauseoftheerror,acquire\ntheGILandcalltheregular(non-Raw)function. NotethattheregularfunctionmaysucceedaftertheRawonefailed.\nintPyTime_MonotonicRaw(PyTime_t*result)\nSimilartoPyTime_Monotonic(),butdon\u2019tsetanexceptiononerroranddon\u2019trequireholdingtheGIL.\nintPyTime_PerfCounterRaw(PyTime_t*result)\nSimilartoPyTime_PerfCounter(),butdon\u2019tsetanexceptiononerroranddon\u2019trequireholdingtheGIL.\nintPyTime_TimeRaw(PyTime_t*result)\nSimilartoPyTime_Time(),butdon\u2019tsetanexceptiononerroranddon\u2019trequireholdingtheGIL.\n6.11.4 Conversion functions\ndoublePyTime_AsSecondsDouble(PyTime_tt)\nConvertatimestamptoanumberofsecondsasaCdouble.\nThefunctioncannotfail,butnotethatdoublehaslimitedaccuracyforlargevalues.\n6.12 Support for Perf Maps\nOnsupportedplatforms(asofthiswriting, onlyLinux),theruntimecantakeadvantageofperfmapfilestomake\nPythonfunctionsvisibletoanexternalprofilingtool(suchasperf). Arunningprocessmaycreateafileinthe/tmp\ndirectory,whichcontainsentriesthatcanmapasectionofexecutablecodetoaname. Thisinterfaceisdescribedin\nthedocumentationoftheLinuxPerftool.\nInPython,thesehelperAPIscanbeusedbylibrariesandfeaturesthatrelyongeneratingmachinecodeonthefly.\nNotethatholdingtheGlobalInterpreterLock(GIL)isnotrequiredfortheseAPIs.\nintPyUnstable_PerfMapState_Init(void)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nOpenthe/tmp/perf-$pid.mapfile,unlessit\u2019salreadyopened,andcreatealocktoensurethread-safewrites\ntothefile(providedthewritesaredonethroughPyUnstable_WritePerfMapEntry()). Normally,there\u2019s\nnoneedtocallthisexplicitly;justusePyUnstable_WritePerfMapEntry()anditwillinitializethestate\nonfirstcall.\nReturns0onsuccess,-1onfailuretocreate/opentheperfmapfile,or-2onfailuretocreatealock. Check\nerrnoformoreinformationaboutthecauseofafailure.\nintPyUnstable_WritePerfMapEntry(constvoid*code_addr,unsignedintcode_size,constchar\n*entry_name)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nWrite one single entry to the /tmp/perf-$pid.map file. This function is thread safe. Here is what an\nexampleentrylookslike:\n88 Chapter6. Utilities\nThePython/CAPI,Release3.13.3\n# address size name\n7f3529fcf759 b py::bar:/run/t.py\nWillcallPyUnstable_PerfMapState_Init()beforewritingtheentry,iftheperfmapfileisnotalready\nopened. Returns0onsuccess,orthesameerrorcodesasPyUnstable_PerfMapState_Init()onfailure.\nvoidPyUnstable_PerfMapState_Fini(void)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nClose the perf map file opened by PyUnstable_PerfMapState_Init(). This is called by the runtime\nitself during interpreter shut-down. In general, there shouldn\u2019t be a reason to explicitly call this, except to\nhandlespecificscenariossuchasforking.\n6.12. SupportforPerfMaps 89\nThePython/CAPI,Release3.13.3\n90 Chapter6. Utilities\nCHAPTER\nSEVEN\nABSTRACT OBJECTS LAYER\nThefunctionsinthischapterinteractwithPythonobjectsregardlessoftheirtype,orwithwideclassesofobjecttypes\n(e.g. allnumericaltypes,orallsequencetypes). Whenusedonobjecttypesforwhichtheydonotapply,theywill\nraiseaPythonexception.\nItisnotpossibletousethesefunctionsonobjectsthatarenotproperlyinitialized,suchasalistobjectthathasbeen\ncreatedbyPyList_New(),butwhoseitemshavenotbeensettosomenon-NULLvalueyet.\n7.1 Object Protocol\nPyObject*Py_GetConstant(unsignedintconstant_id)\nPartoftheStableABIsinceversion3.13. Getastrongreferencetoaconstant.\nSetanexceptionandreturnNULLifconstant_idisinvalid.\nconstant_idmustbeoneoftheseconstantidentifiers:\n91\nThePython/CAPI,Release3.13.3\nConstantIdentifier Value Returnedobject\n0 None\nPy_CONSTANT_NONE\n1 False\nPy_CONSTANT_FALSE\n2 True\nPy_CONSTANT_TRUE\n3 Ellipsis\nPy_CONSTANT_ELLIPSIS\n4 NotImplemented\nPy_CONSTANT_NOT_IMPLEMENTED\n5 0\nPy_CONSTANT_ZERO\n6 1\nPy_CONSTANT_ONE\n7 ''\nPy_CONSTANT_EMPTY_STR\n8 b''\nPy_CONSTANT_EMPTY_BYTES\n9 ()\nPy_CONSTANT_EMPTY_TUPLE\nNumericvaluesareonlygivenforprojectswhichcannotusetheconstantidentifiers.\nAddedinversion3.13.\nCPythonimplementationdetail: InCPython,alloftheseconstantsareimmortal.\nPyObject*Py_GetConstantBorrowed(unsignedintconstant_id)\nPartoftheStableABIsinceversion3.13. SimilartoPy_GetConstant(),butreturnaborrowedreference.\nThisfunctionisprimarilyintendedforbackwardscompatibility: usingPy_GetConstant()isrecommended\nfornewcode.\nThereferenceisborrowedfromtheinterpreter,andisvaliduntiltheinterpreterfinalization.\nAddedinversion3.13.\nPyObject*Py_NotImplemented\nTheNotImplementedsingleton,usedtosignalthatanoperationisnotimplementedforthegiventypecom-\nbination.\nPy_RETURN_NOTIMPLEMENTED\nProperlyhandlereturningPy_NotImplementedfromwithinaCfunction(thatis,createanewstrongrefer-\nencetoNotImplementedandreturnit).\nPy_PRINT_RAW\nFlag to be used with multiple functions that print the object (like PyObject_Print() and\nPyFile_WriteObject()). If passed, these function would use the str() of the object instead of the\nrepr().\n92 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyObject_Print(PyObject*o,FILE*fp,intflags)\nPrintanobjecto,onfilefp. Returns-1onerror. Theflagsargumentisusedtoenablecertainprintingoptions.\nTheonlyoptioncurrentlysupportedisPy_PRINT_RAW;ifgiven,thestr()oftheobjectiswritteninsteadof\ntherepr().\nintPyObject_HasAttrWithError(PyObject*o,PyObject*attr_name)\nPartoftheStableABIsinceversion3.13. Returns1ifohastheattributeattr_name,and0otherwise. Thisis\nequivalenttothePythonexpressionhasattr(o, attr_name). Onfailure,return-1.\nAddedinversion3.13.\nintPyObject_HasAttrStringWithError(PyObject*o,constchar*attr_name)\nPart of the Stable ABI since version 3.13. This is the same as PyObject_HasAttrWithError(), but\nattr_nameisspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*.\nAddedinversion3.13.\nintPyObject_HasAttr(PyObject*o,PyObject*attr_name)\nPart of the Stable ABI. Returns 1 if o has the attribute attr_name, and 0 otherwise. This function always\nsucceeds.\n(cid:174) Note\nExceptions that occur when this calls __getattr__() and __getattribute__() methods aren\u2019t\npropagated, but instead given to sys.unraisablehook(). For proper error handling, use\nPyObject_HasAttrWithError(),PyObject_GetOptionalAttr()orPyObject_GetAttr()in-\nstead.\nintPyObject_HasAttrString(PyObject*o,constchar*attr_name)\nPart ofthe StableABI. This isthe sameas PyObject_HasAttr(), but attr_name is specifiedas a const\nchar*UTF-8encodedbytesstring,ratherthanaPyObject*.\n(cid:174) Note\nExceptions that occur when this calls __getattr__() and __getattribute__() methods\nor while creating the temporary str object are silently ignored. For proper error han-\ndling, use PyObject_HasAttrStringWithError(), PyObject_GetOptionalAttrString() or\nPyObject_GetAttrString()instead.\nPyObject*PyObject_GetAttr(PyObject*o,PyObject*attr_name)\nReturn value: New reference. Part of the Stable ABI. Retrieve an attribute named attr_name from object o.\nReturns the attribute value on success, or NULL on failure. This is the equivalent of the Python expression\no.attr_name.\nIf the missing attribute should not be treated as a failure, you can use PyObject_GetOptionalAttr()\ninstead.\nPyObject*PyObject_GetAttrString(PyObject*o,constchar*attr_name)\nReturn value: New reference. Part of the Stable ABI. This is the same as PyObject_GetAttr(), but\nattr_nameisspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*.\nIf the missing attribute should not be treated as a failure, you can use\nPyObject_GetOptionalAttrString()instead.\nintPyObject_GetOptionalAttr(PyObject*obj,PyObject*attr_name,PyObject**result);\nPart of the Stable ABI since version 3.13. Variant of PyObject_GetAttr() which doesn\u2019t raise\nAttributeErroriftheattributeisnotfound.\n7.1. ObjectProtocol 93\nThePython/CAPI,Release3.13.3\nIf the attribute is found, return 1 and set *result to a new strong reference to the attribute. If the attribute\nis not found, return 0 and set *result to NULL; the AttributeError is silenced. If an error other than\nAttributeErrorisraised,return-1andset*resulttoNULL.\nAddedinversion3.13.\nintPyObject_GetOptionalAttrString(PyObject*obj,constchar*attr_name,PyObject**result);\nPart of the Stable ABI since version 3.13. This is the same as PyObject_GetOptionalAttr(), but\nattr_nameisspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*.\nAddedinversion3.13.\nPyObject*PyObject_GenericGetAttr(PyObject*o,PyObject*name)\nReturnvalue: Newreference. PartoftheStableABI.Genericattributegetterfunctionthatismeanttobeput\ninto a type object\u2019s tp_getattro slot. It looks for a descriptor in the dictionary of classes in the object\u2019s\nMROaswellasanattributeintheobject\u2019s__dict__(ifpresent). Asoutlinedindescriptors,datadescriptors\ntakepreferenceoverinstanceattributes,whilenon-datadescriptorsdon\u2019t. Otherwise,anAttributeErroris\nraised.\nintPyObject_SetAttr(PyObject*o,PyObject*attr_name,PyObject*v)\nPart of the Stable ABI. Set the value of the attribute named attr_name, for object o, to the value v. Raise\nan exception and return -1 on failure; return 0 on success. This is the equivalent of the Python statement\no.attr_name = v.\nIfvisNULL,theattributeisdeleted. ThisbehaviourisdeprecatedinfavourofusingPyObject_DelAttr(),\nbuttherearecurrentlynoplanstoremoveit.\nintPyObject_SetAttrString(PyObject*o,constchar*attr_name,PyObject*v)\nPart ofthe StableABI. This isthe sameas PyObject_SetAttr(), but attr_name is specifiedas a const\nchar*UTF-8encodedbytesstring,ratherthanaPyObject*.\nIf v is NULL, the attribute is deleted, but this feature is deprecated in favour of using\nPyObject_DelAttrString().\nThe number of different attribute names passed to this function should be kept small, usually by us-\ning a statically allocated string as attr_name. For attribute names that aren\u2019t known at compile time,\nprefer calling PyUnicode_FromString() and PyObject_SetAttr() directly. For more details, see\nPyUnicode_InternFromString(),whichmaybeusedinternallytocreateakeyobject.\nintPyObject_GenericSetAttr(PyObject*o,PyObject*name,PyObject*value)\nPartoftheStableABI.Genericattributesetteranddeleterfunctionthatismeanttobeputintoatypeobject\u2019s\ntp_setattroslot. Itlooksforadatadescriptorinthedictionaryofclassesintheobject\u2019sMRO,andiffound\nittakespreferenceoversettingordeletingtheattributeintheinstancedictionary. Otherwise,theattributeisset\nordeletedintheobject\u2019s__dict__(ifpresent). Onsuccess,0isreturned,otherwiseanAttributeError\nisraisedand-1isreturned.\nintPyObject_DelAttr(PyObject*o,PyObject*attr_name)\nPart of the Stable ABI since version 3.13. Delete attribute named attr_name, for object o. Returns -1 on\nfailure. ThisistheequivalentofthePythonstatementdel o.attr_name.\nintPyObject_DelAttrString(PyObject*o,constchar*attr_name)\nPart of the Stable ABI since version 3.13. This is the same as PyObject_DelAttr(), but attr_name is\nspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*.\nThe number of different attribute names passed to this function should be kept small, usually by us-\ning a statically allocated string as attr_name. For attribute names that aren\u2019t known at compile time,\nprefer calling PyUnicode_FromString() and PyObject_DelAttr() directly. For more details, see\nPyUnicode_InternFromString(),whichmaybeusedinternallytocreateakeyobjectforlookup.\nPyObject*PyObject_GenericGetDict(PyObject*o,void*context)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.10. Agenericimplementationforthegetter\nofa__dict__descriptor. Itcreatesthedictionaryifnecessary.\n94 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\nThis function may also be called to get the __dict__ of the object o. Pass NULL for context when call-\ning it. Since this function may need to allocate memory for the dictionary, it may be more efficient to call\nPyObject_GetAttr()whenaccessinganattributeontheobject.\nOnfailure,returnsNULLwithanexceptionset.\nAddedinversion3.3.\nintPyObject_GenericSetDict(PyObject*o,PyObject*value,void*context)\nPartoftheStableABIsinceversion3.7. Agenericimplementationforthesetterofa__dict__descriptor.\nThisimplementationdoesnotallowthedictionarytobedeleted.\nAddedinversion3.3.\nPyObject**_PyObject_GetDictPtr(PyObject*obj)\nReturn a pointer to __dict__ of the object obj. If there is no __dict__, return NULL without setting an\nexception.\nThis function may need to allocate memory for the dictionary, so it may be more efficient to call\nPyObject_GetAttr()whenaccessinganattributeontheobject.\nPyObject*PyObject_RichCompare(PyObject*o1,PyObject*o2,intopid)\nReturn value: New reference. Part of the Stable ABI. Compare the values of o1 and o2 using the operation\nspecifiedbyopid,whichmustbeoneofPy_LT,Py_LE,Py_EQ,Py_NE,Py_GT,orPy_GE,correspondingto\n<,<=,==,!=,>,or>=respectively. ThisistheequivalentofthePythonexpressiono1 op o2,whereopis\ntheoperatorcorrespondingtoopid. Returnsthevalueofthecomparisononsuccess,orNULLonfailure.\nintPyObject_RichCompareBool(PyObject*o1,PyObject*o2,intopid)\nPart of the Stable ABI. Compare the values of o1 and o2 using the operation specified by opid, like\nPyObject_RichCompare(),butreturns-1onerror,0iftheresultisfalse,1otherwise.\n(cid:174) Note\nIfo1ando2arethesameobject,PyObject_RichCompareBool()willalwaysreturn1forPy_EQand0for\nPy_NE.\nPyObject*PyObject_Format(PyObject*obj,PyObject*format_spec)\nPart of the Stable ABI. Format obj using format_spec. This is equivalent to the Python expression\nformat(obj, format_spec).\nformat_specmaybeNULL.Inthiscasethecallisequivalenttoformat(obj). Returnstheformattedstring\nonsuccess,NULLonfailure.\nPyObject*PyObject_Repr(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Computeastringrepresentationofobjecto. Returnsthe\nstringrepresentationonsuccess,NULLonfailure. ThisistheequivalentofthePythonexpressionrepr(o).\nCalledbytherepr()built-infunction.\nChangedinversion3.4: Thisfunctionnowincludesadebugassertiontohelpensurethatitdoesnotsilently\ndiscardanactiveexception.\nPyObject*PyObject_ASCII(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.AsPyObject_Repr(),computeastringrepresentation\nofobjecto,butescapethenon-ASCIIcharactersinthestringreturnedbyPyObject_Repr()with\\x,\\uor\n\\Uescapes. ThisgeneratesastringsimilartothatreturnedbyPyObject_Repr()inPython2. Calledbythe\nascii()built-infunction.\nPyObject*PyObject_Str(PyObject*o)\nReturn value: New reference. Part of the Stable ABI. Compute a string representation of object o. Returns\nthestringrepresentationonsuccess,NULLonfailure. ThisistheequivalentofthePythonexpressionstr(o).\nCalledbythestr()built-infunctionand,therefore,bytheprint()function.\n7.1. ObjectProtocol 95\nThePython/CAPI,Release3.13.3\nChangedinversion3.4: Thisfunctionnowincludesadebugassertiontohelpensurethatitdoesnotsilently\ndiscardanactiveexception.\nPyObject*PyObject_Bytes(PyObject*o)\nReturn value: New reference. Part of the Stable ABI. Compute a bytes representation of object o. NULL is\nreturnedonfailureandabytesobjectonsuccess. ThisisequivalenttothePythonexpressionbytes(o),when\noisnotaninteger. Unlikebytes(o),aTypeErrorisraisedwhenoisanintegerinsteadofazero-initialized\nbytesobject.\nintPyObject_IsSubclass(PyObject*derived,PyObject*cls)\nPart of the Stable ABI. Return 1 if the class derived is identical to or derived from the class cls, otherwise\nreturn0. Incaseofanerror,return-1.\nIfclsisatuple,thecheckwillbedoneagainsteveryentryincls. Theresultwillbe1whenatleastoneofthe\nchecksreturns1,otherwiseitwillbe0.\nIfclshasa__subclasscheck__()method,itwillbecalledtodeterminethesubclassstatusasdescribed\nin PEP 3119. Otherwise, derived is a subclass of cls if it is a direct or indirect subclass, i.e. contained in\ncls.__mro__.\nNormallyonlyclassobjects,i.e. instancesoftypeoraderivedclass,areconsideredclasses. However,objects\ncanoverridethisbyhavinga__bases__attribute(whichmustbeatupleofbaseclasses).\nintPyObject_IsInstance(PyObject*inst,PyObject*cls)\nPartoftheStableABI.Return1ifinstisaninstanceoftheclassclsorasubclassofcls,or0ifnot. Onerror,\nreturns-1andsetsanexception.\nIfclsisatuple,thecheckwillbedoneagainsteveryentryincls. Theresultwillbe1whenatleastoneofthe\nchecksreturns1,otherwiseitwillbe0.\nIfclshasa__instancecheck__()method,itwillbecalledtodeterminethesubclassstatusasdescribedin\nPEP3119. Otherwise,instisaninstanceofclsifitsclassisasubclassofcls.\nAninstanceinstcanoverridewhatisconsidereditsclassbyhavinga__class__attribute.\nAn object cls can override if it is considered a class, and what its base classes are, by having a __bases__\nattribute(whichmustbeatupleofbaseclasses).\nPy_hash_tPyObject_Hash(PyObject*o)\nPartoftheStableABI.Computeandreturnthehashvalueofanobjecto. Onfailure,return-1. Thisisthe\nequivalentofthePythonexpressionhash(o).\nChanged in version 3.2: The return type is now Py_hash_t. This is a signed integer the same size as\nPy_ssize_t.\nPy_hash_tPyObject_HashNotImplemented(PyObject*o)\nPartoftheStableABI.SetaTypeErrorindicatingthattype(o)isnothashableandreturn-1. Thisfunction\nreceivesspecialtreatmentwhenstoredinatp_hashslot,allowingatypetoexplicitlyindicatetotheinterpreter\nthatitisnothashable.\nintPyObject_IsTrue(PyObject*o)\nPartoftheStableABI.Returns1iftheobjectoisconsideredtobetrue,and0otherwise. Thisisequivalent\ntothePythonexpressionnot not o. Onfailure,return-1.\nintPyObject_Not(PyObject*o)\nPartoftheStableABI.Returns0iftheobjectoisconsideredtobetrue,and1otherwise. Thisisequivalent\ntothePythonexpressionnot o. Onfailure,return-1.\nPyObject*PyObject_Type(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Whenoisnon-NULL,returnsatypeobjectcorrespond-\ning to the objecttype ofobject o. On failure, raises SystemError and returns NULL. Thisis equivalentto\nthe Python expression type(o). This function creates a new strong reference to the return value. There\u2019s\nreally no reason to use this function instead of the Py_TYPE() function, which returns a pointer of type\nPyTypeObject*,exceptwhenanewstrongreferenceisneeded.\n96 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyObject_TypeCheck(PyObject*o,PyTypeObject*type)\nReturnnon-zeroiftheobjectoisoftypetypeorasubtypeoftype,and0otherwise. Bothparametersmustbe\nnon-NULL.\nPy_ssize_tPyObject_Size(PyObject*o)\nPy_ssize_tPyObject_Length(PyObject*o)\nPartoftheStableABI.Returnthelengthofobjecto. Iftheobjectoprovideseitherthesequenceandmapping\nprotocols, the sequence length is returned. On error, -1 is returned. This is the equivalent to the Python\nexpressionlen(o).\nPy_ssize_tPyObject_LengthHint(PyObject*o,Py_ssize_tdefaultvalue)\nReturn an estimated length for the object o. First try to return its actual length, then an estimate using\n__length_hint__(), and finally return the default value. On error return -1. This is the equivalent to\nthePythonexpressionoperator.length_hint(o, defaultvalue).\nAddedinversion3.4.\nPyObject*PyObject_GetItem(PyObject*o,PyObject*key)\nReturnvalue: Newreference. PartoftheStableABI.Returnelementofocorrespondingtotheobjectkeyor\nNULLonfailure. ThisistheequivalentofthePythonexpressiono[key].\nintPyObject_SetItem(PyObject*o,PyObject*key,PyObject*v)\nPartoftheStableABI.Maptheobjectkeytothevaluev. Raiseanexceptionandreturn-1onfailure;return\n0 on success. This is the equivalent of the Python statement o[key] = v. This function does not steal a\nreferencetov.\nintPyObject_DelItem(PyObject*o,PyObject*key)\nPartoftheStableABI.Removethemappingfortheobjectkeyfromtheobjecto. Return-1onfailure. This\nisequivalenttothePythonstatementdel o[key].\nintPyObject_DelItemString(PyObject*o,constchar*key)\nPartoftheStableABI.ThisisthesameasPyObject_DelItem(),butkeyisspecifiedasaconst char*\nUTF-8encodedbytesstring,ratherthanaPyObject*.\nPyObject*PyObject_Dir(PyObject*o)\nReturn value: New reference. Part of the Stable ABI. This is equivalent to the Python expression dir(o),\nreturninga(possiblyempty)listofstringsappropriatefortheobjectargument,orNULLiftherewasanerror.\nIftheargumentisNULL,thisislikethePythondir(),returningthenamesofthecurrentlocals;inthiscase,\nifnoexecutionframeisactivethenNULLisreturnedbutPyErr_Occurred()willreturnfalse.\nPyObject*PyObject_GetIter(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.ThisisequivalenttothePythonexpressioniter(o). It\nreturnsanewiteratorfortheobjectargument, ortheobjectitselfiftheobjectisalreadyaniterator. Raises\nTypeErrorandreturnsNULLiftheobjectcannotbeiterated.\nPyObject*PyObject_SelfIter(PyObject*obj)\nReturn value: New reference. Part of the Stable ABI. This is equivalent to the Python __iter__(self):\nreturn selfmethod. Itisintendedforiteratortypes,tobeusedinthePyTypeObject.tp_iterslot.\nPyObject*PyObject_GetAIter(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.10. ThisistheequivalenttothePython\nexpression aiter(o). Takes an AsyncIterable object and returns an AsyncIterator for it. This is\ntypicallyanewiteratorbutiftheargumentisanAsyncIterator,thisreturnsitself. RaisesTypeErrorand\nreturnsNULLiftheobjectcannotbeiterated.\nAddedinversion3.10.\nvoid*PyObject_GetTypeData(PyObject*o,PyTypeObject*cls)\nPartoftheStableABIsinceversion3.12. Getapointertosubclass-specificdatareservedforcls.\nThe object o must be an instance of cls, and cls must have been created using negative PyType_Spec.\nbasicsize. Pythondoesnotcheckthis.\n7.1. ObjectProtocol 97\nThePython/CAPI,Release3.13.3\nOnerror,setanexceptionandreturnNULL.\nAddedinversion3.12.\nPy_ssize_tPyType_GetTypeDataSize(PyTypeObject*cls)\nPartoftheStableABIsinceversion3.12. Returnthesizeoftheinstancememoryspacereservedforcls,i.e.\nthesizeofthememoryPyObject_GetTypeData()returns.\nThismaybelargerthanrequestedusing-PyType_Spec.basicsize; itissafetousethislargersize(e.g.\nwithmemset()).\nThetypeclsmusthavebeencreatedusingnegativePyType_Spec.basicsize. Pythondoesnotcheckthis.\nOnerror,setanexceptionandreturnanegativevalue.\nAddedinversion3.12.\nvoid*PyObject_GetItemData(PyObject*o)\nGetapointertoper-itemdataforaclasswithPy_TPFLAGS_ITEMS_AT_END.\nOn error, set an exception and return NULL. TypeError is raised if o does not have\nPy_TPFLAGS_ITEMS_AT_ENDset.\nAddedinversion3.12.\nintPyObject_VisitManagedDict(PyObject*obj,visitprocvisit,void*arg)\nVisitthemanageddictionaryofobj.\nThis function must only be called in a traverse function of the type which has the\nPy_TPFLAGS_MANAGED_DICTflagset.\nAddedinversion3.13.\nvoidPyObject_ClearManagedDict(PyObject*obj)\nClearthemanageddictionaryofobj.\nThis function must only be called in a traverse function of the type which has the\nPy_TPFLAGS_MANAGED_DICTflagset.\nAddedinversion3.13.\n7.2 Call Protocol\nCPythonsupportstwodifferentcallingprotocols: tp_callandvectorcall.\n7.2.1 The tp_call Protocol\nInstancesofclassesthatsettp_callarecallable. Thesignatureoftheslotis:\nPyObject *tp_call(PyObject *callable, PyObject *args, PyObject *kwargs);\nA call is made using a tuple for the positional arguments and a dict for the keyword arguments, similarly to\ncallable(*args, **kwargs) in Python code. args must be non-NULL (use an empty tuple if there are no\narguments)butkwargsmaybeNULLiftherearenokeywordarguments.\nThisconventionisnotonlyusedbytp_call: tp_newandtp_initalsopassargumentsthisway.\nTocallanobject,usePyObject_Call()oranothercallAPI.\n7.2.2 The Vectorcall Protocol\nAddedinversion3.9.\nThevectorcallprotocolwasintroducedinPEP590asanadditionalprotocolformakingcallsmoreefficient.\n98 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\nAsruleofthumb,CPythonwillpreferthevectorcallforinternalcallsifthecallablesupportsit. However,thisisnot\nahardrule. Additionally,somethird-partyextensionsusetp_call directly(ratherthanusingPyObject_Call()).\nTherefore, a class supporting vectorcall must also implement tp_call. Moreover, the callable must behave the\nsame regardless of which protocol is used. The recommended way to achieve this is by setting tp_call to\nPyVectorcall_Call(). Thisbearsrepeating:\n(cid:193) Warning\nAclasssupportingvectorcallmustalsoimplementtp_callwiththesamesemantics.\nChangedinversion3.12: ThePy_TPFLAGS_HAVE_VECTORCALLflagisnowremovedfromaclasswhentheclass\u2019s\n__call__() method is reassigned. (This internally sets tp_call only, and thus may make it behave differently\nthanthevectorcallfunction.) InearlierPythonversions, vectorcallshouldonlybeusedwithimmutableorstatic\ntypes.\nA class should not implement vectorcall if that would be slower than tp_call. For example, if the callee needs to\nconverttheargumentstoanargstupleandkwargsdictanyway,thenthereisnopointinimplementingvectorcall.\nClassescanimplementthevectorcallprotocolbyenablingthePy_TPFLAGS_HAVE_VECTORCALLflagandsetting\ntp_vectorcall_offsettotheoffsetinsidetheobjectstructurewhereavectorcallfuncappears. Thisisapointer\ntoafunctionwiththefollowingsignature:\ntypedefPyObject*(*vectorcallfunc)(PyObject*callable,PyObject*const*args,size_tnargsf,PyObject\n*kwnames)\nPartoftheStableABIsinceversion3.12.\n\u2022 callableistheobjectbeingcalled.\n\u2022 argsisaCarrayconsistingofthepositionalargumentsfollowedbythe\nvaluesofthekeywordarguments. ThiscanbeNULLiftherearenoarguments.\n\u2022 nargsfisthenumberofpositionalargumentspluspossiblythe\nPY_VECTORCALL_ARGUMENTS_OFFSET flag. To get the actual number of positional arguments from\nnargsf,usePyVectorcall_NARGS().\n\u2022 kwnamesisatuplecontainingthenamesofthekeywordarguments;\ninotherwords,thekeysofthekwargsdict. Thesenamesmustbestrings(instancesofstrorasubclass)\nandtheymustbeunique. Iftherearenokeywordarguments,thenkwnamescaninsteadbeNULL.\nPY_VECTORCALL_ARGUMENTS_OFFSET\nPartoftheStableABIsinceversion3.12. Ifthisflagissetinavectorcallnargsfargument,thecalleeisallowed\ntotemporarilychangeargs[-1]. Inotherwords,argspointstoargument1(not0)intheallocatedvector.\nThecalleemustrestorethevalueofargs[-1]beforereturning.\nForPyObject_VectorcallMethod(),thisflagmeansinsteadthatargs[0]maybechanged.\nWhenever they can do so cheaply (without additional allocation), callers are encouraged to use\nPY_VECTORCALL_ARGUMENTS_OFFSET.Doingsowillallowcallablessuchasboundmethodstomaketheir\nonwardcalls(whichincludeaprependedself argument)veryefficiently.\nAddedinversion3.8.\nTo call an object that implements vectorcall, use a call API function as with any other callable.\nPyObject_Vectorcall()willusuallybemostefficient.\nRecursionControl\nWhenusingtp_call,calleesdonotneedtoworryaboutrecursion: CPythonusesPy_EnterRecursiveCall()and\nPy_LeaveRecursiveCall()forcallsmadeusingtp_call.\nForefficiency, thisisnotthecaseforcallsdoneusingvectorcall: thecalleeshoulduse Py_EnterRecursiveCall and\nPy_LeaveRecursiveCallifneeded.\n7.2. CallProtocol 99\nThePython/CAPI,Release3.13.3\nVectorcallSupportAPI\nPy_ssize_tPyVectorcall_NARGS(size_tnargsf)\nPart of the Stable ABI since version 3.12. Given a vectorcall nargsf argument, return the actual number of\narguments. Currentlyequivalentto:\n(Py_ssize_t)(nargsf & ~PY_VECTORCALL_ARGUMENTS_OFFSET)\nHowever,thefunctionPyVectorcall_NARGSshouldbeusedtoallowforfutureextensions.\nAddedinversion3.8.\nvectorcallfuncPyVectorcall_Function(PyObject*op)\nIfopdoesnotsupportthevectorcallprotocol(eitherbecausethetypedoesnotorbecausethespecificinstance\ndoes not), return NULL. Otherwise, return the vectorcall function pointer stored in op. This function never\nraisesanexception.\nThis is mostly useful to check whether or not op supports vectorcall, which can be done by checking\nPyVectorcall_Function(op) != NULL.\nAddedinversion3.9.\nPyObject*PyVectorcall_Call(PyObject*callable,PyObject*tuple,PyObject*dict)\nPart of the Stable ABI since version 3.12. Call callable\u2019s vectorcallfunc with positional and keyword\nargumentsgiveninatupleanddict,respectively.\nThis is a specialized function, intended to be put in the tp_call slot or be used in an implementation of\ntp_call. ItdoesnotcheckthePy_TPFLAGS_HAVE_VECTORCALLflaganditdoesnotfallbacktotp_call.\nAddedinversion3.8.\n7.2.3 Object Calling API\nVariousfunctionsareavailableforcallingaPythonobject. Eachconvertsitsargumentstoaconventionsupported\nbythecalledobject\u2013eithertp_callorvectorcall. Inordertodoaslittleconversionaspossible,pickonethatbestfits\ntheformatofdatayouhaveavailable.\nThefollowingtablesummarizestheavailablefunctions;pleaseseeindividualdocumentationfordetails.\nFunction callable args kwargs\nPyObject_Call() PyObject * tuple dict/NULL\nPyObject_CallNoArgs() PyObject * \u2014 \u2014\nPyObject_CallOneArg() PyObject * 1object \u2014\nPyObject_CallObject() PyObject * tuple/NULL \u2014\nPyObject_CallFunction() PyObject * format \u2014\nPyObject_CallMethod() obj+char* format \u2014\nPyObject_CallFunctionObjArgs() PyObject * variadic \u2014\nPyObject_CallMethodObjArgs() obj+name variadic \u2014\nPyObject_CallMethodNoArgs() obj+name \u2014 \u2014\nPyObject_CallMethodOneArg() obj+name 1object \u2014\nPyObject_Vectorcall() PyObject * vectorcall vectorcall\nPyObject_VectorcallDict() PyObject * vectorcall dict/NULL\nPyObject_VectorcallMethod() arg+name vectorcall vectorcall\nPyObject*PyObject_Call(PyObject*callable,PyObject*args,PyObject*kwargs)\nReturnvalue: Newreference. PartoftheStableABI.CallacallablePythonobjectcallable, witharguments\ngivenbythetupleargs,andnamedargumentsgivenbythedictionarykwargs.\nargsmustnotbeNULL;useanemptytupleifnoargumentsareneeded. Ifnonamedargumentsareneeded,\nkwargscanbeNULL.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\n100 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\nThisistheequivalentofthePythonexpression: callable(*args, **kwargs).\nPyObject*PyObject_CallNoArgs(PyObject*callable)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.10. CallacallablePythonobjectcallable\nwithoutanyarguments. ItisthemostefficientwaytocallacallablePythonobjectwithoutanyargument.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nAddedinversion3.9.\nPyObject*PyObject_CallOneArg(PyObject*callable,PyObject*arg)\nReturnvalue: Newreference. CallacallablePythonobjectcallablewithexactly1positionalargumentargand\nnokeywordarguments.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nAddedinversion3.9.\nPyObject*PyObject_CallObject(PyObject*callable,PyObject*args)\nReturnvalue: Newreference. PartoftheStableABI.CallacallablePythonobjectcallable, witharguments\ngivenbythetupleargs. Ifnoargumentsareneeded,thenargscanbeNULL.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nThisistheequivalentofthePythonexpression: callable(*args).\nPyObject*PyObject_CallFunction(PyObject*callable,constchar*format,...)\nReturn value: New reference. Part of the Stable ABI. Call a callable Python object callable, with a variable\nnumberofCarguments. TheCargumentsaredescribedusingaPy_BuildValue()styleformatstring. The\nformatcanbeNULL,indicatingthatnoargumentsareprovided.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nThisistheequivalentofthePythonexpression: callable(*args).\nNotethatifyouonlypassPyObject*args,PyObject_CallFunctionObjArgs()isafasteralternative.\nChangedinversion3.4: Thetypeofformatwaschangedfromchar *.\nPyObject*PyObject_CallMethod(PyObject*obj,constchar*name,constchar*format,...)\nReturnvalue: Newreference. PartoftheStableABI.Callthemethodnamednameofobjectobjwithavariable\nnumberofCarguments. TheCargumentsaredescribedbyaPy_BuildValue()formatstringthatshould\nproduceatuple.\nTheformatcanbeNULL,indicatingthatnoargumentsareprovided.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nThisistheequivalentofthePythonexpression: obj.name(arg1, arg2, ...).\nNotethatifyouonlypassPyObject*args,PyObject_CallMethodObjArgs()isafasteralternative.\nChangedinversion3.4: Thetypesofnameandformatwerechangedfromchar *.\nPyObject*PyObject_CallFunctionObjArgs(PyObject*callable,...)\nReturn value: New reference. Part of the Stable ABI. Call a callable Python object callable, with a variable\nnumberofPyObject*arguments. Theargumentsareprovidedasavariablenumberofparametersfollowed\nbyNULL.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nThisistheequivalentofthePythonexpression: callable(arg1, arg2, ...).\nPyObject*PyObject_CallMethodObjArgs(PyObject*obj,PyObject*name,...)\nReturnvalue: Newreference. PartoftheStableABI.CallamethodofthePythonobjectobj,wherethename\nofthemethodisgivenasaPythonstringobjectinname. ItiscalledwithavariablenumberofPyObject*\narguments. TheargumentsareprovidedasavariablenumberofparametersfollowedbyNULL.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\n7.2. CallProtocol 101\nThePython/CAPI,Release3.13.3\nPyObject*PyObject_CallMethodNoArgs(PyObject*obj,PyObject*name)\nCallamethodofthePythonobjectobjwithoutarguments,wherethenameofthemethodisgivenasaPython\nstringobjectinname.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nAddedinversion3.9.\nPyObject*PyObject_CallMethodOneArg(PyObject*obj,PyObject*name,PyObject*arg)\nCallamethodofthePythonobjectobjwithasinglepositionalargumentarg,wherethenameofthemethod\nisgivenasaPythonstringobjectinname.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nAddedinversion3.9.\nPyObject*PyObject_Vectorcall(PyObject*callable,PyObject*const*args,size_tnargsf,PyObject\n*kwnames)\nPartoftheStableABIsinceversion3.12. CallacallablePythonobjectcallable. Theargumentsarethesame\nas for vectorcallfunc. If callable supports vectorcall, this directly calls the vectorcall function stored in\ncallable.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nAddedinversion3.9.\nPyObject*PyObject_VectorcallDict(PyObject*callable,PyObject*const*args,size_tnargsf,PyObject\n*kwdict)\nCallcallablewithpositionalargumentspassedexactlyasinthevectorcallprotocol,butwithkeywordarguments\npassedasadictionarykwdict. Theargsarraycontainsonlythepositionalarguments.\nRegardlessofwhichprotocolisusedinternally,aconversionofargumentsneedstobedone. Therefore,this\nfunctionshouldonlybeusedifthecalleralreadyhasadictionaryreadytouseforthekeywordarguments,but\nnotatupleforthepositionalarguments.\nAddedinversion3.9.\nPyObject*PyObject_VectorcallMethod(PyObject*name,PyObject*const*args,size_tnargsf,PyObject\n*kwnames)\nPartofthe StableABI sinceversion3.12. Callamethodusingthevectorcallcallingconvention. Thename\nofthemethodisgivenasaPythonstringname. Theobjectwhosemethodiscalledisargs[0], andtheargs\narraystartingatargs[1]representstheargumentsofthecall. Theremustbeatleastonepositionalargument.\nnargsfisthenumberofpositionalargumentsincludingargs[0],plusPY_VECTORCALL_ARGUMENTS_OFFSET\nif the value of args[0] may temporarily be changed. Keyword arguments can be passed just like in\nPyObject_Vectorcall().\nIftheobjecthasthePy_TPFLAGS_METHOD_DESCRIPTORfeature,thiswillcalltheunboundmethodobject\nwiththefullargsvectorasarguments.\nReturntheresultofthecallonsuccess,orraiseanexceptionandreturnNULLonfailure.\nAddedinversion3.9.\n7.2.4 Call Support API\nintPyCallable_Check(PyObject*o)\nPartoftheStableABI.Determineiftheobjectoiscallable. Return1iftheobjectiscallableand0otherwise.\nThisfunctionalwayssucceeds.\n102 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\n7.3 Number Protocol\nintPyNumber_Check(PyObject*o)\nPartoftheStableABI.Returns1iftheobjectoprovidesnumericprotocols,andfalseotherwise. Thisfunction\nalwayssucceeds.\nChangedinversion3.8: Returns1ifoisanindexinteger.\nPyObject*PyNumber_Add(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofaddingo1ando2,orNULLonfailure.\nThisistheequivalentofthePythonexpressiono1 + o2.\nPyObject*PyNumber_Subtract(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofsubtractingo2fromo1,orNULLon\nfailure. ThisistheequivalentofthePythonexpressiono1 - o2.\nPyObject*PyNumber_Multiply(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofmultiplyingo1ando2,orNULLon\nfailure. ThisistheequivalentofthePythonexpressiono1 * o2.\nPyObject*PyNumber_MatrixMultiply(PyObject*o1,PyObject*o2)\nReturnvalue:Newreference. PartoftheStableABIsinceversion3.7. Returnstheresultofmatrixmultiplication\nono1ando2,orNULLonfailure. ThisistheequivalentofthePythonexpressiono1 @ o2.\nAddedinversion3.5.\nPyObject*PyNumber_FloorDivide(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnthefloorofo1dividedbyo2,orNULLonfailure.\nThisistheequivalentofthePythonexpressiono1 // o2.\nPyObject*PyNumber_TrueDivide(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnareasonableapproximationforthemathematical\nvalueofo1dividedbyo2,orNULLonfailure. Thereturnvalueis\u201capproximate\u201dbecausebinaryfloating-point\nnumbersareapproximate;itisnotpossibletorepresentallrealnumbersinbasetwo. Thisfunctioncanreturn\nafloating-pointvaluewhenpassedtwointegers. ThisistheequivalentofthePythonexpressiono1 / o2.\nPyObject*PyNumber_Remainder(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheremainderofdividingo1byo2,orNULLon\nfailure. ThisistheequivalentofthePythonexpressiono1 % o2.\nPyObject*PyNumber_Divmod(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Seethebuilt-infunctiondivmod(). ReturnsNULLon\nfailure. ThisistheequivalentofthePythonexpressiondivmod(o1, o2).\nPyObject*PyNumber_Power(PyObject*o1,PyObject*o2,PyObject*o3)\nReturn value: New reference. Part of the Stable ABI. See the built-in function pow(). Returns NULL on\nfailure. ThisistheequivalentofthePythonexpressionpow(o1, o2, o3),whereo3isoptional. Ifo3isto\nbeignored,passPy_Noneinitsplace(passingNULLforo3wouldcauseanillegalmemoryaccess).\nPyObject*PyNumber_Negative(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Returnsthenegationofoonsuccess,orNULLonfailure.\nThisistheequivalentofthePythonexpression-o.\nPyObject*PyNumber_Positive(PyObject*o)\nReturn value: New reference. Part of the Stable ABI. Returns o on success, or NULL on failure. This is the\nequivalentofthePythonexpression+o.\nPyObject*PyNumber_Absolute(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheabsolutevalueofo,orNULLonfailure. This\nistheequivalentofthePythonexpressionabs(o).\n7.3. NumberProtocol 103\nThePython/CAPI,Release3.13.3\nPyObject*PyNumber_Invert(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Returnsthebitwisenegationofoonsuccess,orNULLon\nfailure. ThisistheequivalentofthePythonexpression~o.\nPyObject*PyNumber_Lshift(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofleftshiftingo1byo2onsuccess,or\nNULLonfailure. ThisistheequivalentofthePythonexpressiono1 << o2.\nPyObject*PyNumber_Rshift(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofrightshiftingo1byo2onsuccess,\norNULLonfailure. ThisistheequivalentofthePythonexpressiono1 >> o2.\nPyObject*PyNumber_And(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnsthe\u201cbitwiseand\u201dofo1ando2onsuccessand\nNULLonfailure. ThisistheequivalentofthePythonexpressiono1 & o2.\nPyObject*PyNumber_Xor(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnsthe\u201cbitwiseexclusiveor\u201dofo1byo2onsuccess,\norNULLonfailure. ThisistheequivalentofthePythonexpressiono1 ^ o2.\nPyObject*PyNumber_Or(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnsthe\u201cbitwiseor\u201dofo1ando2onsuccess,orNULL\nonfailure. ThisistheequivalentofthePythonexpressiono1 | o2.\nPyObject*PyNumber_InPlaceAdd(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofaddingo1ando2,orNULLonfailure.\nTheoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePythonstatemento1 += o2.\nPyObject*PyNumber_InPlaceSubtract(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofsubtractingo2fromo1,orNULLon\nfailure. Theoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePythonstatemento1\n-= o2.\nPyObject*PyNumber_InPlaceMultiply(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofmultiplyingo1ando2,orNULLon\nfailure. Theoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePythonstatemento1\n*= o2.\nPyObject*PyNumber_InPlaceMatrixMultiply(PyObject*o1,PyObject*o2)\nReturnvalue:Newreference. PartoftheStableABIsinceversion3.7. Returnstheresultofmatrixmultiplication\nono1ando2,orNULLonfailure. Theoperationisdonein-placewheno1supportsit. Thisistheequivalent\nofthePythonstatemento1 @= o2.\nAddedinversion3.5.\nPyObject*PyNumber_InPlaceFloorDivide(PyObject*o1,PyObject*o2)\nReturn value: New reference. Part of the Stable ABI. Returns the mathematical floor of dividing o1 by o2,\norNULLonfailure. Theoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePython\nstatemento1 //= o2.\nPyObject*PyNumber_InPlaceTrueDivide(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnareasonableapproximationforthemathematical\nvalueofo1dividedbyo2,orNULLonfailure. Thereturnvalueis\u201capproximate\u201dbecausebinaryfloating-point\nnumbersareapproximate;itisnotpossibletorepresentallrealnumbersinbasetwo. Thisfunctioncanreturn\nafloating-pointvaluewhenpassedtwointegers. Theoperationisdonein-placewheno1supportsit. Thisis\ntheequivalentofthePythonstatemento1 /= o2.\nPyObject*PyNumber_InPlaceRemainder(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheremainderofdividingo1byo2,orNULLon\nfailure. Theoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePythonstatemento1\n%= o2.\n104 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyNumber_InPlacePower(PyObject*o1,PyObject*o2,PyObject*o3)\nReturnvalue: Newreference. PartoftheStableABI.Seethebuilt-infunctionpow(). ReturnsNULLonfailure.\nTheoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePythonstatemento1 **=\no2wheno3isPy_None,oranin-placevariantofpow(o1, o2, o3)otherwise. Ifo3istobeignored,pass\nPy_Noneinitsplace(passingNULLforo3wouldcauseanillegalmemoryaccess).\nPyObject*PyNumber_InPlaceLshift(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofleftshiftingo1byo2onsuccess,\norNULLonfailure. Theoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePython\nstatemento1 <<= o2.\nPyObject*PyNumber_InPlaceRshift(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheresultofrightshiftingo1byo2onsuccess,\norNULLonfailure. Theoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePython\nstatemento1 >>= o2.\nPyObject*PyNumber_InPlaceAnd(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnsthe\u201cbitwiseand\u201dofo1ando2onsuccessand\nNULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python\nstatemento1 &= o2.\nPyObject*PyNumber_InPlaceXor(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnsthe\u201cbitwiseexclusiveor\u201dofo1byo2onsuccess,\norNULLonfailure. Theoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePython\nstatemento1 ^= o2.\nPyObject*PyNumber_InPlaceOr(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returnsthe\u201cbitwiseor\u201dofo1ando2onsuccess,orNULL\nonfailure. Theoperationisdonein-placewheno1supportsit. ThisistheequivalentofthePythonstatement\no1 |= o2.\nPyObject*PyNumber_Long(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheoconvertedtoanintegerobjectonsuccess,\norNULLonfailure. ThisistheequivalentofthePythonexpressionint(o).\nPyObject*PyNumber_Float(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheoconvertedtoafloatobjectonsuccess,or\nNULLonfailure. ThisistheequivalentofthePythonexpressionfloat(o).\nPyObject*PyNumber_Index(PyObject*o)\nReturn value: New reference. Part of the Stable ABI. Returns the o converted to a Python int on success or\nNULLwithaTypeErrorexceptionraisedonfailure.\nChanged in version 3.10: The result always has exact type int. Previously, the result could have been an\ninstanceofasubclassofint.\nPyObject*PyNumber_ToBase(PyObject*n,intbase)\nReturnvalue: Newreference. PartoftheStableABI.Returnstheintegernconvertedtobasebaseasastring.\nThebaseargumentmustbeoneof2,8,10,or16. Forbase2,8,or16,thereturnedstringisprefixedwithabase\nmarkerof'0b','0o',or'0x',respectively. IfnisnotaPythonint,itisconvertedwithPyNumber_Index()\nfirst.\nPy_ssize_tPyNumber_AsSsize_t(PyObject*o,PyObject*exc)\nPartoftheStableABI.ReturnsoconvertedtoaPy_ssize_tvalueifocanbeinterpretedasaninteger. If\nthecallfails,anexceptionisraisedand-1isreturned.\nIf o can be converted to a Python int but the attempt to convert to a Py_ssize_t value would raise an\nOverflowError,thentheexcargumentisthetypeofexceptionthatwillberaised(usuallyIndexErroror\nOverflowError). IfexcisNULL,thentheexceptionisclearedandthevalueisclippedtoPY_SSIZE_T_MIN\nforanegativeintegerorPY_SSIZE_T_MAXforapositiveinteger.\n7.3. NumberProtocol 105\nThePython/CAPI,Release3.13.3\nintPyIndex_Check(PyObject*o)\nPart of the Stable ABI since version 3.8. Returns 1 if o is an index integer (has the nb_index slot of the\ntp_as_numberstructurefilledin),and0otherwise. Thisfunctionalwayssucceeds.\n7.4 Sequence Protocol\nintPySequence_Check(PyObject*o)\nPartoftheStableABI.Return1iftheobjectprovidesthesequenceprotocol,and0otherwise. Notethatit\nreturns1forPythonclasseswitha__getitem__()method,unlesstheyaredictsubclasses,sinceingeneral\nitisimpossibletodeterminewhattypeofkeystheclasssupports. Thisfunctionalwayssucceeds.\nPy_ssize_tPySequence_Size(PyObject*o)\nPy_ssize_tPySequence_Length(PyObject*o)\nPart of the Stable ABI. Returns the number of objects in sequence o on success, and -1 on failure. This is\nequivalenttothePythonexpressionlen(o).\nPyObject*PySequence_Concat(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returntheconcatenationofo1ando2onsuccess,and\nNULLonfailure. ThisistheequivalentofthePythonexpressiono1 + o2.\nPyObject*PySequence_Repeat(PyObject*o,Py_ssize_tcount)\nReturnvalue: Newreference. PartoftheStableABI.Returntheresultofrepeatingsequenceobjectocount\ntimes,orNULLonfailure. ThisistheequivalentofthePythonexpressiono * count.\nPyObject*PySequence_InPlaceConcat(PyObject*o1,PyObject*o2)\nReturnvalue: Newreference. PartoftheStableABI.Returntheconcatenationofo1ando2onsuccess,and\nNULL on failure. The operation is done in-place when o1 supports it. This is the equivalent of the Python\nexpressiono1 += o2.\nPyObject*PySequence_InPlaceRepeat(PyObject*o,Py_ssize_tcount)\nReturnvalue: Newreference. PartoftheStableABI.Returntheresultofrepeatingsequenceobjectocount\ntimes, or NULL on failure. The operation is done in-place when o supports it. This is the equivalent of the\nPythonexpressiono *= count.\nPyObject*PySequence_GetItem(PyObject*o,Py_ssize_ti)\nReturnvalue: Newreference. PartoftheStableABI.Returntheithelementofo,orNULLonfailure. Thisis\ntheequivalentofthePythonexpressiono[i].\nPyObject*PySequence_GetSlice(PyObject*o,Py_ssize_ti1,Py_ssize_ti2)\nReturnvalue: Newreference. PartoftheStableABI.Returnthesliceofsequenceobjectobetweeni1andi2,\norNULLonfailure. ThisistheequivalentofthePythonexpressiono[i1:i2].\nintPySequence_SetItem(PyObject*o,Py_ssize_ti,PyObject*v)\nPartoftheStableABI.Assignobjectvtotheithelementofo. Raiseanexceptionandreturn-1onfailure;\nreturn0onsuccess. ThisistheequivalentofthePythonstatemento[i] = v. Thisfunctiondoesnotsteala\nreferencetov.\nIfvisNULL,theelementisdeleted,butthisfeatureisdeprecatedinfavourofusingPySequence_DelItem().\nintPySequence_DelItem(PyObject*o,Py_ssize_ti)\nPartoftheStableABI.Deletetheithelementofobjecto. Returns-1onfailure. Thisistheequivalentofthe\nPythonstatementdel o[i].\nintPySequence_SetSlice(PyObject*o,Py_ssize_ti1,Py_ssize_ti2,PyObject*v)\nPartoftheStableABI.Assignthesequenceobjectvtothesliceinsequenceobjectofromi1toi2. Thisisthe\nequivalentofthePythonstatemento[i1:i2] = v.\nintPySequence_DelSlice(PyObject*o,Py_ssize_ti1,Py_ssize_ti2)\nPartoftheStableABI.Deletethesliceinsequenceobjectofromi1toi2. Returns-1onfailure. Thisisthe\nequivalentofthePythonstatementdel o[i1:i2].\n106 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\nPy_ssize_tPySequence_Count(PyObject*o,PyObject*value)\nPart of the Stable ABI. Return the number of occurrences of value in o, that is, return the number of\nkeys for which o[key] == value. On failure, return -1. This is equivalent to the Python expression o.\ncount(value).\nintPySequence_Contains(PyObject*o,PyObject*value)\nPartoftheStableABI.Determineifocontainsvalue. Ifaniteminoisequaltovalue, return1, otherwise\nreturn0. Onerror,return-1. ThisisequivalenttothePythonexpressionvalue in o.\nPy_ssize_tPySequence_Index(PyObject*o,PyObject*value)\nPart of the Stable ABI. Return the first index i for which o[i] == value. On error, return -1. This is\nequivalenttothePythonexpressiono.index(value).\nPyObject*PySequence_List(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Returnalistobjectwiththesamecontentsasthesequence\noriterableo,orNULLonfailure. Thereturnedlistisguaranteedtobenew. ThisisequivalenttothePython\nexpressionlist(o).\nPyObject*PySequence_Tuple(PyObject*o)\nReturn value: New reference. Part of the Stable ABI. Return a tuple object with the same contents as the\nsequenceoriterableo,orNULLonfailure. Ifoisatuple,anewreferencewillbereturned,otherwiseatuple\nwillbeconstructedwiththeappropriatecontents. ThisisequivalenttothePythonexpressiontuple(o).\nPyObject*PySequence_Fast(PyObject*o,constchar*m)\nReturnvalue:Newreference. PartoftheStableABI.Returnthesequenceoriterableoasanobjectusablebythe\notherPySequence_Fast*familyoffunctions. Iftheobjectisnotasequenceoriterable,raisesTypeError\nwithmasthemessagetext. ReturnsNULLonfailure.\nThe PySequence_Fast* functions are thus named because they assume o is a PyTupleObject or a\nPyListObjectandaccessthedatafieldsofodirectly.\nAsaCPythonimplementationdetail,ifoisalreadyasequenceorlist,itwillbereturned.\nPy_ssize_tPySequence_Fast_GET_SIZE(PyObject*o)\nReturnsthelengthofo,assumingthatowasreturnedbyPySequence_Fast()andthatoisnotNULL.The\nsizecanalsoberetrievedbycallingPySequence_Size()ono, butPySequence_Fast_GET_SIZE()is\nfasterbecauseitcanassumeoisalistortuple.\nPyObject*PySequence_Fast_GET_ITEM(PyObject*o,Py_ssize_ti)\nReturn value: Borrowed reference. Return the ith element of o, assuming that o was returned by\nPySequence_Fast(),oisnotNULL,andthatiiswithinbounds.\nPyObject**PySequence_Fast_ITEMS(PyObject*o)\nReturntheunderlyingarrayofPyObjectpointers. AssumesthatowasreturnedbyPySequence_Fast()and\noisnotNULL.\nNote, if a list gets resized, the reallocation may relocate the items array. So, only use the underlying array\npointerincontextswherethesequencecannotchange.\nPyObject*PySequence_ITEM(PyObject*o,Py_ssize_ti)\nReturn value: New reference. Return the ith element of o or NULL on failure. Faster form of\nPySequence_GetItem() but without checking that PySequence_Check() on o is true and without ad-\njustmentfornegativeindices.\n7.5 Mapping Protocol\nSeealsoPyObject_GetItem(),PyObject_SetItem()andPyObject_DelItem().\nintPyMapping_Check(PyObject*o)\nPartoftheStableABI.Return1iftheobjectprovidesthemappingprotocolorsupportsslicing,and0otherwise.\nNotethatitreturns1forPythonclasseswitha__getitem__()method,sinceingeneralitisimpossibleto\ndeterminewhattypeofkeystheclasssupports. Thisfunctionalwayssucceeds.\n7.5. MappingProtocol 107\nThePython/CAPI,Release3.13.3\nPy_ssize_tPyMapping_Size(PyObject*o)\nPy_ssize_tPyMapping_Length(PyObject*o)\nPartoftheStableABI.Returnsthenumberofkeysinobjectoonsuccess,and-1onfailure. Thisisequivalent\ntothePythonexpressionlen(o).\nPyObject*PyMapping_GetItemString(PyObject*o,constchar*key)\nReturnvalue: Newreference. PartoftheStableABI.ThisisthesameasPyObject_GetItem(),butkeyis\nspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*.\nintPyMapping_GetOptionalItem(PyObject*obj,PyObject*key,PyObject**result)\nPartoftheStableABIsinceversion3.13. VariantofPyObject_GetItem()whichdoesn\u2019traiseKeyError\nifthekeyisnotfound.\nIfthekeyisfound,return1andset*result toanewstrongreferencetothecorrespondingvalue. Ifthekeyis\nnot found, return 0 and set *result to NULL; the KeyError is silenced. If an error other than KeyError is\nraised,return-1andset*resulttoNULL.\nAddedinversion3.13.\nintPyMapping_GetOptionalItemString(PyObject*obj,constchar*key,PyObject**result)\nPartoftheStableABIsinceversion3.13. ThisisthesameasPyMapping_GetOptionalItem(),butkeyis\nspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*.\nAddedinversion3.13.\nintPyMapping_SetItemString(PyObject*o,constchar*key,PyObject*v)\nPartoftheStableABI.ThisisthesameasPyObject_SetItem(),butkeyisspecifiedasaconst char*\nUTF-8encodedbytesstring,ratherthanaPyObject*.\nintPyMapping_DelItem(PyObject*o,PyObject*key)\nThisisanaliasofPyObject_DelItem().\nintPyMapping_DelItemString(PyObject*o,constchar*key)\nThis isthesameas PyObject_DelItem(), but key is specifiedas a const char* UTF-8 encodedbytes\nstring,ratherthanaPyObject*.\nintPyMapping_HasKeyWithError(PyObject*o,PyObject*key)\nPart of the Stable ABI since version 3.13. Return 1 if the mapping object has the key key and 0 otherwise.\nThisisequivalenttothePythonexpressionkey in o. Onfailure,return-1.\nAddedinversion3.13.\nintPyMapping_HasKeyStringWithError(PyObject*o,constchar*key)\nPartoftheStableABIsinceversion3.13. ThisisthesameasPyMapping_HasKeyWithError(),butkeyis\nspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*.\nAddedinversion3.13.\nintPyMapping_HasKey(PyObject*o,PyObject*key)\nPartoftheStableABI.Return1ifthemappingobjecthasthekeykeyand0otherwise. Thisisequivalentto\nthePythonexpressionkey in o. Thisfunctionalwayssucceeds.\n(cid:174) Note\nExceptions which occur when this calls __getitem__() method are silently ignored. For\npropererrorhandling,usePyMapping_HasKeyWithError(),PyMapping_GetOptionalItem()or\nPyObject_GetItem()instead.\nintPyMapping_HasKeyString(PyObject*o,constchar*key)\nPartoftheStableABI.ThisisthesameasPyMapping_HasKey(),butkeyisspecifiedasaconst char*\nUTF-8encodedbytesstring,ratherthanaPyObject*.\n108 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\n(cid:174) Note\nExceptionsthatoccurwhenthiscalls__getitem__()methodorwhilecreatingthetemporarystrob-\nject are silently ignored. For proper error handling, use PyMapping_HasKeyStringWithError(),\nPyMapping_GetOptionalItemString()orPyMapping_GetItemString()instead.\nPyObject*PyMapping_Keys(PyObject*o)\nReturn value: New reference. Part of the Stable ABI. On success, return a list of the keys in object o. On\nfailure,returnNULL.\nChangedinversion3.7: Previously,thefunctionreturnedalistoratuple.\nPyObject*PyMapping_Values(PyObject*o)\nReturnvalue: Newreference. Partofthe StableABI. Onsuccess, returnalistofthevaluesinobject o. On\nfailure,returnNULL.\nChangedinversion3.7: Previously,thefunctionreturnedalistoratuple.\nPyObject*PyMapping_Items(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Onsuccess,returnalistoftheitemsinobjecto,where\neachitemisatuplecontainingakey-valuepair. Onfailure,returnNULL.\nChangedinversion3.7: Previously,thefunctionreturnedalistoratuple.\n7.6 Iterator Protocol\nTherearetwofunctionsspecificallyforworkingwithiterators.\nintPyIter_Check(PyObject*o)\nPart of the Stable ABI since version 3.8. Return non-zero if the object o can be safely passed to\nPyIter_Next(),and0otherwise. Thisfunctionalwayssucceeds.\nintPyAIter_Check(PyObject*o)\nPart of the Stable ABI since version 3.10. Return non-zero if the object o provides the AsyncIterator\nprotocol,and0otherwise. Thisfunctionalwayssucceeds.\nAddedinversion3.10.\nPyObject*PyIter_Next(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Returnthenextvaluefromtheiteratoro. Theobjectmust\nbeaniteratoraccordingtoPyIter_Check()(itisuptothecallertocheckthis). Iftherearenoremaining\nvalues, returns NULL with no exception set. If an error occurs while retrieving the item, returns NULL and\npassesalongtheexception.\nTowritealoopwhichiteratesoveraniterator,theCcodeshouldlooksomethinglikethis:\nPyObject *iterator = PyObject_GetIter(obj);\nPyObject *item;\nif (iterator == NULL) {\n/* propagate error */\n}\nwhile ((item = PyIter_Next(iterator))) {\n/* do something with item */\n...\n/* release reference when done */\nPy_DECREF(item);\n}\n(continuesonnextpage)\n7.6. IteratorProtocol 109\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nPy_DECREF(iterator);\nif (PyErr_Occurred()) {\n/* propagate error */\n}\nelse {\n/* continue doing useful work */\n}\ntypePySendResult\nTheenumvalueusedtorepresentdifferentresultsofPyIter_Send().\nAddedinversion3.10.\nPySendResultPyIter_Send(PyObject*iter,PyObject*arg,PyObject**presult)\nPartoftheStableABIsinceversion3.10. Sendstheargvalueintotheiteratoriter. Returns:\n\u2022 PYGEN_RETURNifiteratorreturns. Returnvalueisreturnedviapresult.\n\u2022 PYGEN_NEXTifiteratoryields. Yieldedvalueisreturnedviapresult.\n\u2022 PYGEN_ERRORifiteratorhasraisedandexception. presultissettoNULL.\nAddedinversion3.10.\n7.7 Buffer Protocol\nCertainobjectsavailableinPythonwrapaccesstoanunderlyingmemoryarrayorbuffer. Suchobjectsincludethe\nbuilt-in bytes and bytearray, and some extension types like array.array. Third-party libraries may define\ntheirowntypesforspecialpurposes,suchasimageprocessingornumericanalysis.\nWhile each of these types have their own semantics, they share the common characteristic of being backed by a\npossibly large memory buffer. It is then desirable, in some situations, to access that buffer directly and without\nintermediatecopying.\nPythonprovidessuchafacilityattheClevelintheformofthebufferprotocol. Thisprotocolhastwosides:\n\u2022 ontheproducerside,atypecanexporta\u201cbufferinterface\u201dwhichallowsobjectsofthattypetoexposeinfor-\nmationabouttheirunderlyingbuffer. ThisinterfaceisdescribedinthesectionBufferObjectStructures;\n\u2022 ontheconsumerside,severalmeansareavailabletoobtainapointertotherawunderlyingdataofanobject\n(forexampleamethodparameter).\nSimpleobjectssuchasbytesandbytearrayexposetheirunderlyingbufferinbyte-orientedform. Otherforms\narepossible;forexample,theelementsexposedbyanarray.arraycanbemulti-bytevalues.\nAn example consumer of the bufferinterface is the write() method of file objects: any object thatcan export a\nseriesofbytesthroughthebufferinterfacecanbewrittentoafile. Whilewrite()onlyneedsread-onlyaccesstothe\ninternalcontentsoftheobjectpassedtoit,othermethodssuchasreadinto()needwriteaccesstothecontentsof\ntheirargument. Thebufferinterfaceallowsobjectstoselectivelyalloworrejectexportingofread-writeandread-only\nbuffers.\nTherearetwowaysforaconsumerofthebufferinterfacetoacquireabufferoveratargetobject:\n\u2022 callPyObject_GetBuffer()withtherightparameters;\n\u2022 callPyArg_ParseTuple()(oroneofitssiblings)withoneofthey*,w*ors*formatcodes.\nInbothcases,PyBuffer_Release()mustbecalledwhenthebufferisn\u2019tneededanymore. Failuretodosocould\nleadtovariousissuessuchasresourceleaks.\n110 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\n7.7.1 Buffer structure\nBufferstructures(orsimply\u201cbuffers\u201d)areusefulasawaytoexposethebinarydatafromanotherobjecttothePython\nprogrammer. Theycanalsobeusedasazero-copyslicingmechanism. Usingtheirabilitytoreferenceablockof\nmemory, it is possible to expose any data to the Python programmer quite easily. The memory could be a large,\nconstantarrayinaCextension,itcouldbearawblockofmemoryformanipulationbeforepassingtoanoperating\nsystemlibrary,oritcouldbeusedtopassaroundstructureddatainitsnative,in-memoryformat.\nContrarytomostdatatypesexposedbythePythoninterpreter,buffersarenotPyObjectpointersbutrathersimple\nC structures. This allows them to be created and copied very simply. When a generic wrapper around a buffer is\nneeded,amemoryviewobjectcanbecreated.\nFor short instructions how to write an exporting object, see Buffer Object Structures. For obtaining a buffer, see\nPyObject_GetBuffer().\ntypePy_buffer\nPartoftheStableABI(includingallmembers)sinceversion3.11.\nvoid*buf\nA pointer to the start of the logical structure described by the buffer fields. This can be any location\nwithintheunderlyingphysicalmemoryblockoftheexporter. Forexample,withnegativestridesthe\nvaluemaypointtotheendofthememoryblock.\nForcontiguousarrays,thevaluepointstothebeginningofthememoryblock.\nPyObject*obj\nA new reference to the exporting object. The reference is owned by the consumer and automatically\nreleased(i.e. referencecountdecremented)andsettoNULLbyPyBuffer_Release(). Thefieldisthe\nequivalentofthereturnvalueofanystandardC-APIfunction.\nAs a special case, for temporary buffers that are wrapped by PyMemoryView_FromBuffer() or\nPyBuffer_FillInfo()thisfieldisNULL.Ingeneral,exportingobjectsMUSTNOTusethisscheme.\nPy_ssize_tlen\nproduct(shape) * itemsize. Forcontiguousarrays, thisisthelengthoftheunderlyingmemory\nblock. Fornon-contiguousarrays,itisthelengththatthelogicalstructurewouldhaveifitwerecopied\ntoacontiguousrepresentation.\nAccessing((char *)buf)[0] up to ((char *)buf)[len-1]isonlyvalidifthebufferhasbeen\nobtainedbyarequestthatguaranteescontiguity. InmostcasessucharequestwillbePyBUF_SIMPLE\norPyBUF_WRITABLE.\nintreadonly\nAnindicatorofwhetherthebufferisread-only. ThisfieldiscontrolledbythePyBUF_WRITABLEflag.\nPy_ssize_titemsize\nItemsizeinbytesofasingleelement. Sameasthevalueofstruct.calcsize()calledonnon-NULL\nformatvalues.\nImportantexception: IfaconsumerrequestsabufferwithoutthePyBUF_FORMAT flag,formatwillbe\nsettoNULL,butitemsizestillhasthevaluefortheoriginalformat.\nIfshapeispresent,theequalityproduct(shape) * itemsize == lenstillholdsandtheconsumer\ncanuseitemsizetonavigatethebuffer.\nIfshapeisNULLasaresultofaPyBUF_SIMPLEoraPyBUF_WRITABLErequest,theconsumermust\ndisregarditemsizeandassumeitemsize == 1.\nchar*format\nANULLterminatedstringinstructmodulestylesyntaxdescribingthecontentsofasingleitem. If\nthisisNULL,\"B\"(unsignedbytes)isassumed.\nThisfieldiscontrolledbythePyBUF_FORMATflag.\n7.7. BufferProtocol 111\nThePython/CAPI,Release3.13.3\nintndim\nThenumberofdimensionsthememoryrepresentsasann-dimensionalarray. Ifitis0,buf pointstoa\nsingleitemrepresentingascalar. Inthiscase,shape,stridesandsuboffsetsMUSTbeNULL.The\nmaximumnumberofdimensionsisgivenbyPyBUF_MAX_NDIM.\nPy_ssize_t*shape\nAnarrayofPy_ssize_toflengthndimindicatingtheshapeofthememoryasann-dimensionalarray.\nNotethatshape[0] * ... * shape[ndim-1] * itemsizeMUSTbeequaltolen.\nShapevaluesarerestrictedtoshape[n] >= 0. Thecaseshape[n] == 0requiresspecialattention.\nSeecomplexarraysforfurtherinformation.\nTheshapearrayisread-onlyfortheconsumer.\nPy_ssize_t*strides\nAnarrayofPy_ssize_toflengthndimgivingthenumberofbytestoskiptogettoanewelementin\neachdimension.\nStridevaluescanbeanyinteger. Forregulararrays,stridesareusuallypositive,butaconsumerMUST\nbeabletohandlethecasestrides[n] <= 0. Seecomplexarraysforfurtherinformation.\nThestridesarrayisread-onlyfortheconsumer.\nPy_ssize_t*suboffsets\nAnarrayofPy_ssize_toflengthndim. Ifsuboffsets[n] >= 0,thevaluesstoredalongthenth\ndimensionarepointersandthesuboffsetvaluedictateshowmanybytestoaddtoeachpointerafterde-\nreferencing. Asuboffsetvaluethatisnegativeindicatesthatnode-referencingshouldoccur(stridingin\nacontiguousmemoryblock).\nIfallsuboffsetsarenegative(i.e. node-referencingisneeded),thenthisfieldmustbeNULL(thedefault\nvalue).\nThistypeofarrayrepresentationisusedbythePythonImagingLibrary(PIL).Seecomplexarraysfor\nfurtherinformationhowtoaccesselementsofsuchanarray.\nThesuboffsetsarrayisread-onlyfortheconsumer.\nvoid*internal\nThisisforuseinternallybytheexportingobject. Forexample,thismightbere-castasanintegerbythe\nexporter and used to store flags about whether or not the shape, strides, and suboffsets arrays must be\nfreedwhenthebufferisreleased. TheconsumerMUSTNOTalterthisvalue.\nConstants:\nPyBUF_MAX_NDIM\nThemaximumnumberofdimensionsthememoryrepresents. ExportersMUSTrespectthislimit,consumers\nofmulti-dimensionalbuffersSHOULDbeabletohandleuptoPyBUF_MAX_NDIMdimensions. Currentlyset\nto64.\n7.7.2 Buffer request types\nBuffersareusuallyobtainedbysendingabufferrequesttoanexportingobjectviaPyObject_GetBuffer(). Since\nthecomplexityofthelogicalstructureofthememorycanvarydrastically,theconsumerusestheflagsargumentto\nspecifytheexactbuffertypeitcanhandle.\nAllPy_bufferfieldsareunambiguouslydefinedbytherequesttype.\nrequest-independentfields\nThefollowingfieldsarenotinfluencedbyflagsandmustalwaysbefilledinwiththecorrectvalues: obj,buf,len,\nitemsize,ndim.\n112 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\nreadonly,format\nPyBUF_WRITABLE\nControlsthereadonly field. Ifset,theexporterMUSTprovideawritablebufferorelsereport\nfailure. Otherwise,theexporterMAYprovideeitheraread-onlyorwritablebuffer,butthechoice\nMUSTbeconsistentforallconsumers. Forexample,PyBUF_SIMPLE | PyBUF_WRITABLEcan\nbeusedtorequestasimplewritablebuffer.\nPyBUF_FORMAT\nControls the format field. If set, this field MUST be filled in correctly. Otherwise, this field\nMUSTbeNULL.\nPyBUF_WRITABLE can be |\u2019d to any of the flags in the next section. Since PyBUF_SIMPLE is defined as 0,\nPyBUF_WRITABLEcanbeusedasastand-aloneflagtorequestasimplewritablebuffer.\nPyBUF_FORMAT mustbe|\u2019dtoanyoftheflagsexceptPyBUF_SIMPLE,becausethelatteralreadyimpliesformatB\n(unsignedbytes). PyBUF_FORMATcannotbeusedonitsown.\nshape,strides,suboffsets\nTheflagsthatcontrolthelogicalstructureofthememoryarelistedindecreasingorderofcomplexity. Notethateach\nflagcontainsallbitsoftheflagsbelowit.\nRequest shape strides suboffsets\nyes yes ifneeded\nPyBUF_INDIRECT\nyes yes NULL\nPyBUF_STRIDES\nyes NULL NULL\nPyBUF_ND\nNULL NULL NULL\nPyBUF_SIMPLE\ncontiguityrequests\nCorFortrancontiguitycanbeexplicitlyrequested,withandwithoutstrideinformation. Withoutstrideinformation,\nthebuffermustbeC-contiguous.\nRequest shape strides suboffsets contig\nyes yes NULL C\nPyBUF_C_CONTIGUOUS\nyes yes NULL F\nPyBUF_F_CONTIGUOUS\nyes yes NULL CorF\nPyBUF_ANY_CONTIGUOUS\nPyBUF_ND yes NULL NULL C\n7.7. BufferProtocol 113\nThePython/CAPI,Release3.13.3\ncompoundrequests\nAllpossiblerequestsarefullydefinedbysomecombinationoftheflagsintheprevioussection. Forconvenience,the\nbufferprotocolprovidesfrequentlyusedcombinationsassingleflags.\nIn the following table U stands for undefined contiguity. The consumer would have to call\nPyBuffer_IsContiguous()todeterminecontiguity.\nRequest shape strides suboffsets contig readonly format\nyes yes ifneeded U 0 yes\nPyBUF_FULL\nyes yes ifneeded U 1or0 yes\nPyBUF_FULL_RO\nyes yes NULL U 0 yes\nPyBUF_RECORDS\nyes yes NULL U 1or0 yes\nPyBUF_RECORDS_RO\nyes yes NULL U 0 NULL\nPyBUF_STRIDED\nyes yes NULL U 1or0 NULL\nPyBUF_STRIDED_RO\nyes NULL NULL C 0 NULL\nPyBUF_CONTIG\nyes NULL NULL C 1or0 NULL\nPyBUF_CONTIG_RO\n7.7.3 Complex arrays\nNumPy-style: shapeandstrides\nThelogicalstructureofNumPy-stylearraysisdefinedbyitemsize,ndim,shapeandstrides.\nIf ndim == 0, thememorylocationpointedtobybuf isinterpretedasa scalarofsizeitemsize. Inthatcase,\nbothshapeandstridesareNULL.\nIf strides is NULL, the array is interpreted as a standard n-dimensional C-array. Otherwise, the consumer must\naccessann-dimensionalarrayasfollows:\nptr = (char *)buf + indices[0] * strides[0] + ... + indices[n-1] * strides[n-1];\nitem = *((typeof(item) *)ptr);\nAsnotedabove,buf canpointtoanylocationwithintheactualmemoryblock. Anexportercancheckthevalidity\nofabufferwiththisfunction:\ndef verify_structure(memlen, itemsize, ndim, shape, strides, offset):\n\"\"\"Verify that the parameters represent a valid array within\nthe bounds of the allocated memory:\nchar *mem: start of the physical memory block\nmemlen: length of the physical memory block\noffset: (char *)buf - mem\n\"\"\"\n(continuesonnextpage)\n114 Chapter7. AbstractObjectsLayer\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nif offset % itemsize:\nreturn False\nif offset < 0 or offset+itemsize > memlen:\nreturn False\nif any(v % itemsize for v in strides):\nreturn False\nif ndim <= 0:\nreturn ndim == 0 and not shape and not strides\nif 0 in shape:\nreturn True\nimin = sum(strides[j]*(shape[j]-1) for j in range(ndim)\nif strides[j] <= 0)\nimax = sum(strides[j]*(shape[j]-1) for j in range(ndim)\nif strides[j] > 0)\nreturn 0 <= offset+imin and offset+imax+itemsize <= memlen\nPIL-style: shape,stridesandsuboffsets\nIn addition to the regular items, PIL-style arrays can contain pointers that must be followed in order to get to the\nnextelementinadimension. Forexample,theregularthree-dimensionalC-arraychar v[2][2][3]canalsobe\nviewedasanarrayof2pointersto2two-dimensionalarrays: char (*v[2])[2][3]. Insuboffsetsrepresentation,\nthosetwopointerscanbeembeddedatthestartofbuf,pointingtotwochar x[2][3]arraysthatcanbelocated\nanywhereinmemory.\nHereisafunctionthatreturnsapointertotheelementinanN-DarraypointedtobyanN-dimensionalindexwhen\ntherearebothnon-NULLstridesandsuboffsets:\nvoid *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,\nPy_ssize_t *suboffsets, Py_ssize_t *indices) {\nchar *pointer = (char*)buf;\nint i;\nfor (i = 0; i < ndim; i++) {\npointer += strides[i] * indices[i];\nif (suboffsets[i] >=0 ) {\npointer = *((char**)pointer) + suboffsets[i];\n}\n}\nreturn (void*)pointer;\n}\n7.7.4 Buffer-related functions\nintPyObject_CheckBuffer(PyObject*obj)\nPartoftheStableABIsinceversion3.11. Return1ifobjsupportsthebufferinterfaceotherwise0. When1is\nreturned,itdoesn\u2019tguaranteethatPyObject_GetBuffer()willsucceed. Thisfunctionalwayssucceeds.\nintPyObject_GetBuffer(PyObject*exporter,Py_buffer*view,intflags)\nPartoftheStableABIsinceversion3.11. Sendarequesttoexportertofillinviewasspecifiedbyflags. Ifthe\nexporter cannot provide a buffer of the exact type, it MUST raise BufferError, set view->obj to NULL\nandreturn-1.\nOnsuccess, fillinview, setview->objtoanewreferencetoexporter andreturn0. Inthecaseofchained\nbuffer providers that redirect requests to a single object, view->obj MAY refer to this object instead of\nexporter(SeeBufferObjectStructures).\n7.7. BufferProtocol 115\nThePython/CAPI,Release3.13.3\nSuccessfulcallstoPyObject_GetBuffer()mustbepairedwithcallstoPyBuffer_Release(),similar\ntomalloc()andfree(). Thus,aftertheconsumerisdonewiththebuffer,PyBuffer_Release()must\nbecalledexactlyonce.\nvoidPyBuffer_Release(Py_buffer*view)\nPartoftheStableABIsinceversion3.11. Releasethebufferviewandreleasethestrongreference(i.e. decrement\nthe reference count) to the view\u2019s supporting object, view->obj. This function MUST be called when the\nbufferisnolongerbeingused,otherwisereferenceleaksmayoccur.\nItisanerrortocallthisfunctiononabufferthatwasnotobtainedviaPyObject_GetBuffer().\nPy_ssize_tPyBuffer_SizeFromFormat(constchar*format)\nPart of the Stable ABI since version 3.11. Return the implied itemsize from format. On error, raise an\nexceptionandreturn-1.\nAddedinversion3.9.\nintPyBuffer_IsContiguous(constPy_buffer*view,charorder)\nPart of the Stable ABI since version 3.11. Return 1 if the memory defined by the view is C-style (order is\n'C')orFortran-style(orderis'F')contiguousoreitherone(orderis'A').Return0otherwise. Thisfunction\nalwayssucceeds.\nvoid*PyBuffer_GetPointer(constPy_buffer*view,constPy_ssize_t*indices)\nPartoftheStableABIsinceversion3.11. Getthememoryareapointedtobytheindicesinsidethegivenview.\nindicesmustpointtoanarrayofview->ndimindices.\nintPyBuffer_FromContiguous(constPy_buffer*view,constvoid*buf,Py_ssize_tlen,charfort)\nPartoftheStableABIsinceversion3.11. Copycontiguouslenbytesfrombuftoview. fortcanbe'C'or'F'\n(forC-styleorFortran-styleordering). 0isreturnedonsuccess,-1onerror.\nintPyBuffer_ToContiguous(void*buf,constPy_buffer*src,Py_ssize_tlen,charorder)\nPartoftheStableABIsinceversion3.11. Copylenbytesfromsrctoitscontiguousrepresentationinbuf. order\ncanbe'C'or'F'or'A'(forC-styleorFortran-styleorderingoreitherone). 0isreturnedonsuccess,-1\nonerror.\nThisfunctionfailsiflen!=src->len.\nintPyObject_CopyData(PyObject*dest,PyObject*src)\nPartoftheStableABIsinceversion3.11. Copydatafromsrctodestbuffer. CanconvertbetweenC-styleand\norFortran-stylebuffers.\n0isreturnedonsuccess,-1onerror.\nvoidPyBuffer_FillContiguousStrides(intndims,Py_ssize_t*shape,Py_ssize_t*strides,intitemsize,char\norder)\nPartoftheStableABIsinceversion3.11. Fillthestridesarraywithbyte-stridesofacontiguous(C-styleiforder\nis'C'orFortran-styleiforderis'F')arrayofthegivenshapewiththegivennumberofbytesperelement.\nintPyBuffer_FillInfo(Py_buffer*view,PyObject*exporter,void*buf,Py_ssize_tlen,intreadonly,intflags)\nPartoftheStableABIsinceversion3.11. Handlebufferrequestsforanexporterthatwantstoexposebuf of\nsizelenwithwritabilitysetaccordingtoreadonly. buf isinterpretedasasequenceofunsignedbytes.\nTheflagsargumentindicatestherequesttype. Thisfunctionalwaysfillsinviewasspecifiedbyflags, unless\nbuf hasbeendesignatedasread-onlyandPyBUF_WRITABLEissetinflags.\nOnsuccess,setview->objtoanewreferencetoexporterandreturn0. Otherwise,raiseBufferError,set\nview->objtoNULLandreturn-1;\nIfthisfunctionisusedaspartofagetbufferproc,exporterMUSTbesettotheexportingobjectandflagsmust\nbepassedunmodified. Otherwise,exporterMUSTbeNULL.\n116 Chapter7. AbstractObjectsLayer\nCHAPTER\nEIGHT\nCONCRETE OBJECTS LAYER\nThefunctionsinthischapterarespecifictocertainPythonobjecttypes. Passingthemanobjectofthewrongtypeis\nnotagoodidea;ifyoureceiveanobjectfromaPythonprogramandyouarenotsurethatithastherighttype,you\nmustperformatypecheckfirst; forexample, tocheckthatanobjectisadictionary, usePyDict_Check(). The\nchapterisstructuredlikethe\u201cfamilytree\u201dofPythonobjecttypes.\n(cid:193) Warning\nWhilethefunctionsdescribedinthischaptercarefullycheckthetypeoftheobjectswhicharepassedin,many\nofthemdonotcheckforNULLbeingpassedinsteadofavalidobject. AllowingNULLtobepassedincancause\nmemoryaccessviolationsandimmediateterminationoftheinterpreter.\n8.1 Fundamental Objects\nThissectiondescribesPythontypeobjectsandthesingletonobjectNone.\n8.1.1 Type Objects\ntypePyTypeObject\nPartoftheLimitedAPI(asanopaquestruct). TheCstructureoftheobjectsusedtodescribebuilt-intypes.\nPyTypeObjectPyType_Type\nPart of the Stable ABI. This is the type object for type objects; it is the same object as type in the Python\nlayer.\nintPyType_Check(PyObject*o)\nReturnnon-zeroiftheobjectoisatypeobject, includinginstancesoftypesderivedfromthestandardtype\nobject. Return0inallothercases. Thisfunctionalwayssucceeds.\nintPyType_CheckExact(PyObject*o)\nReturnnon-zeroiftheobjectoisatypeobject,butnotasubtypeofthestandardtypeobject. Return0inall\nothercases. Thisfunctionalwayssucceeds.\nunsignedintPyType_ClearCache()\nPartoftheStableABI.Cleartheinternallookupcache. Returnthecurrentversiontag.\nunsignedlongPyType_GetFlags(PyTypeObject*type)\nPartoftheStableABI.Returnthetp_flagsmemberoftype. Thisfunctionisprimarilymeantforusewith\nPy_LIMITED_API;theindividualflagbitsareguaranteedtobestableacrossPythonreleases, butaccessto\ntp_flagsitselfisnotpartofthelimitedAPI.\nAddedinversion3.2.\nChangedinversion3.4: Thereturntypeisnowunsigned longratherthanlong.\n117\nThePython/CAPI,Release3.13.3\nPyObject*PyType_GetDict(PyTypeObject*type)\nReturn the type object\u2019s internal namespace, which is otherwise only exposed via a read-only proxy (cls.\n__dict__). Thisisareplacementforaccessingtp_dictdirectly. Thereturneddictionarymustbetreated\nasread-only.\nThisfunctionismeantforspecificembeddingandlanguage-bindingcases,wheredirectaccesstothedictis\nnecessaryandindirectaccess(e.g. viatheproxyorPyObject_GetAttr())isn\u2019tadequate.\nExtensionmodulesshouldcontinuetousetp_dict,directlyorindirectly,whensettinguptheirowntypes.\nAddedinversion3.12.\nvoidPyType_Modified(PyTypeObject*type)\nPartoftheStableABI.Invalidatetheinternallookupcacheforthetypeandallofitssubtypes. Thisfunction\nmustbecalledafteranymanualmodificationoftheattributesorbaseclassesofthetype.\nintPyType_AddWatcher(PyType_WatchCallbackcallback)\nRegistercallbackasatypewatcher. Returnanon-negativeintegerIDwhichmustbepassedtofuturecallsto\nPyType_Watch(). Incaseoferror(e.g. nomorewatcherIDsavailable),return-1andsetanexception.\nIn free-threaded builds, PyType_AddWatcher() is not thread-safe, so it must be called at start up (before\nspawningthefirstthread).\nAddedinversion3.12.\nintPyType_ClearWatcher(intwatcher_id)\nClear watcher identified by watcher_id (previously returned from PyType_AddWatcher()). Return 0 on\nsuccess,-1onerror(e.g. ifwatcher_idwasneverregistered.)\nAnextensionshouldnevercallPyType_ClearWatcherwithawatcher_id thatwasnotreturnedtoitbya\npreviouscalltoPyType_AddWatcher().\nAddedinversion3.12.\nintPyType_Watch(intwatcher_id,PyObject*type)\nMarktypeaswatched. Thecallbackgrantedwatcher_idbyPyType_AddWatcher()willbecalledwhenever\nPyType_Modified()reportsachangetotype. (Thecallbackmaybecalledonlyonceforaseriesofcon-\nsecutivemodificationstotype,if_PyType_Lookup()isnotcalledontypebetweenthemodifications;thisis\nanimplementationdetailandsubjecttochange.)\nAnextensionshouldnevercallPyType_Watchwithawatcher_idthatwasnotreturnedtoitbyapreviouscall\ntoPyType_AddWatcher().\nAddedinversion3.12.\ntypedefint(*PyType_WatchCallback)(PyObject*type)\nTypeofatype-watchercallbackfunction.\nThecallbackmustnotmodifytypeorcausePyType_Modified()tobecalledontypeoranytypeinitsMRO;\nviolatingthisrulecouldcauseinfiniterecursion.\nAddedinversion3.12.\nintPyType_HasFeature(PyTypeObject*o,intfeature)\nReturnnon-zeroifthetypeobjectosetsthefeaturefeature. Typefeaturesaredenotedbysinglebitflags.\nintPyType_IS_GC(PyTypeObject*o)\nReturn true if the type object includes support for the cycle detector; this tests the type flag\nPy_TPFLAGS_HAVE_GC.\nintPyType_IsSubtype(PyTypeObject*a,PyTypeObject*b)\nPartoftheStableABI.Returntrueifaisasubtypeofb.\nThisfunctiononlychecksforactualsubtypes,whichmeansthat__subclasscheck__()isnotcalledonb.\nCallPyObject_IsSubclass()todothesamecheckthatissubclass()woulddo.\n118 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyType_GenericAlloc(PyTypeObject*type,Py_ssize_tnitems)\nReturnvalue: Newreference. PartoftheStableABI.Generichandlerforthetp_allocslotofatypeobject.\nUsePython\u2019sdefaultmemoryallocationmechanismtoallocateanewinstanceandinitializeallitscontentsto\nNULL.\nPyObject*PyType_GenericNew(PyTypeObject*type,PyObject*args,PyObject*kwds)\nReturnvalue: Newreference. Partofthe StableABI. Generichandlerforthetp_new slotofa typeobject.\nCreateanewinstanceusingthetype\u2019stp_allocslot.\nintPyType_Ready(PyTypeObject*type)\nPartoftheStableABI.Finalizeatypeobject. Thisshouldbecalledonalltypeobjectstofinishtheirinitial-\nization. Thisfunctionisresponsibleforaddinginheritedslotsfromatype\u2019sbaseclass. Return0onsuccess,\norreturn-1andsetsanexceptiononerror.\n(cid:174) Note\nIf some of the base classes implements the GC protocol and the provided type does not include the\nPy_TPFLAGS_HAVE_GC in its flags, then the GC protocol will be automatically implemented from its\nparents. Onthecontrary,ifthetypebeingcreateddoesincludePy_TPFLAGS_HAVE_GC initsflagsthen\nitmustimplementtheGCprotocolitselfbyatleastimplementingthetp_traversehandle.\nPyObject*PyType_GetName(PyTypeObject*type)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.11. Returnthetype\u2019sname. Equivalentto\ngettingthetype\u2019s__name__attribute.\nAddedinversion3.11.\nPyObject*PyType_GetQualName(PyTypeObject*type)\nReturn value: New reference. Part of the Stable ABI since version 3.11. Return the type\u2019s qualified name.\nEquivalenttogettingthetype\u2019s__qualname__attribute.\nAddedinversion3.11.\nPyObject*PyType_GetFullyQualifiedName(PyTypeObject*type)\nPart of the Stable ABI since version 3.13. Return the type\u2019s fully qualified name. Equivalent to f\"{type.\n__module__}.{type.__qualname__}\",ortype.__qualname__iftype.__module__isnotastring\norisequalto\"builtins\".\nAddedinversion3.13.\nPyObject*PyType_GetModuleName(PyTypeObject*type)\nPartoftheStableABIsinceversion3.13. Returnthetype\u2019smodulename. Equivalenttogettingthetype.\n__module__attribute.\nAddedinversion3.13.\nvoid*PyType_GetSlot(PyTypeObject*type,intslot)\nPartoftheStableABIsinceversion3.4. Returnthefunctionpointerstoredinthegivenslot. Iftheresultis\nNULL,thisindicatesthateithertheslotisNULL,orthatthefunctionwascalledwithinvalidparameters. Callers\nwilltypicallycasttheresultpointerintotheappropriatefunctiontype.\nSeePyType_Slot.slotforpossiblevaluesoftheslotargument.\nAddedinversion3.4.\nChangedinversion3.10: PyType_GetSlot()cannowacceptalltypes. Previously,itwaslimitedtoheap\ntypes.\nPyObject*PyType_GetModule(PyTypeObject*type)\nPartoftheStableABIsinceversion3.10. Returnthemoduleobjectassociatedwiththegiventypewhenthe\ntypewascreatedusingPyType_FromModuleAndSpec().\nIfnomoduleisassociatedwiththegiventype,setsTypeErrorandreturnsNULL.\n8.1. FundamentalObjects 119\nThePython/CAPI,Release3.13.3\nThis function is usually used to get the module in which a method is defined. Note that in such a method,\nPyType_GetModule(Py_TYPE(self)) may not return the intended result. Py_TYPE(self) may be a\nsubclassoftheintendedclass,andsubclassesarenotnecessarilydefinedinthesamemoduleastheirsuperclass.\nSeePyCMethodtogettheclassthatdefinesthemethod. SeePyType_GetModuleByDef()forcaseswhen\nPyCMethodcannotbeused.\nAddedinversion3.9.\nvoid*PyType_GetModuleState(PyTypeObject*type)\nPartoftheStableABIsinceversion3.10. Returnthestateofthemoduleobjectassociatedwiththegiventype.\nThisisashortcutforcallingPyModule_GetState()ontheresultofPyType_GetModule().\nIfnomoduleisassociatedwiththegiventype,setsTypeErrorandreturnsNULL.\nIfthetypehasanassociatedmodulebutitsstateisNULL,returnsNULLwithoutsettinganexception.\nAddedinversion3.9.\nPyObject*PyType_GetModuleByDef(PyTypeObject*type,structPyModuleDef *def)\nPartoftheStableABIsinceversion3.13. Findthefirstsuperclasswhosemodulewascreatedfromthegiven\nPyModuleDef def,andreturnthatmodule.\nIfnomoduleisfound,raisesaTypeErrorandreturnsNULL.\nThis function is intended to be used together with PyModule_GetState() to get module state from slot\nmethods (such as tp_init or nb_add) and other places where a method\u2019s defining class cannot be passed\nusingthePyCMethodcallingconvention.\nAddedinversion3.11.\nintPyUnstable_Type_AssignVersionTag(PyTypeObject*type)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nAttempttoassignaversiontagtothegiventype.\nReturns1ifthetypealreadyhadavalidversiontagoranewonewasassigned,or0ifanewtagcouldnotbe\nassigned.\nAddedinversion3.12.\nCreatingHeap-AllocatedTypes\nThefollowingfunctionsandstructsareusedtocreateheaptypes.\nPyObject*PyType_FromMetaclass(PyTypeObject*metaclass,PyObject*module,PyType_Spec*spec,PyObject\n*bases)\nPart of the Stable ABI since version 3.12. Create and return a heap type from the spec (see\nPy_TPFLAGS_HEAPTYPE).\nThemetaclassmetaclassisusedtoconstructtheresultingtypeobject. WhenmetaclassisNULL,themetaclass\nisderivedfrombases(orPy_tp_base[s]slotsifbasesisNULL,seebelow).\nMetaclassesthatoverridetp_newarenotsupported,exceptiftp_newisNULL.(Forbackwardscompatibility,\notherPyType_From*functionsallowsuchmetaclasses. Theyignoretp_new,whichmayresultinincomplete\ninitialization. ThisisdeprecatedandinPython3.14+suchmetaclasseswillnotbesupported.)\nThebasesargumentcanbeusedtospecifybaseclasses;itcaneitherbeonlyoneclassoratupleofclasses. If\nbasesisNULL,thePy_tp_basesslotisusedinstead. IfthatalsoisNULL,thePy_tp_baseslotisusedinstead. If\nthatalsoisNULL,thenewtypederivesfromobject.\nThe module argument can be used to record the module in which the new class is defined. It must be a\nmodule object or NULL. If not NULL, the module is associated with the new type and can later be retrieved\n120 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nwithPyType_GetModule(). Theassociatedmoduleisnotinheritedbysubclasses;itmustbespecifiedfor\neachclassindividually.\nThisfunctioncallsPyType_Ready()onthenewtype.\nNote that this function does not fully match the behavior of calling type() or using the class statement.\nWith user-provided base types or metaclasses, prefer calling type (or the metaclass) over PyType_From*\nfunctions. Specifically:\n\u2022 __new__()isnotcalledonthenewclass(anditmustbesettotype.__new__).\n\u2022 __init__()isnotcalledonthenewclass.\n\u2022 __init_subclass__()isnotcalledonanybases.\n\u2022 __set_name__()isnotcalledonnewdescriptors.\nAddedinversion3.12.\nPyObject*PyType_FromModuleAndSpec(PyObject*module,PyType_Spec*spec,PyObject*bases)\nReturn value: New reference. Part of the Stable ABI since version 3.10. Equivalent to\nPyType_FromMetaclass(NULL, module, spec, bases).\nAddedinversion3.9.\nChanged in version 3.10: The function now accepts a single class as the bases argument and NULL as the\ntp_docslot.\nChanged in version 3.12: The function now finds and uses a metaclass corresponding to the provided base\nclasses. Previously,onlytypeinstanceswerereturned.\nThetp_newofthemetaclassisignored. whichmayresultinincompleteinitialization. Creatingclasseswhose\nmetaclassoverridestp_newisdeprecatedandinPython3.14+itwillbenolongerallowed.\nPyObject*PyType_FromSpecWithBases(PyType_Spec*spec,PyObject*bases)\nReturn value: New reference. Part of the Stable ABI since version 3.3. Equivalent to\nPyType_FromMetaclass(NULL, NULL, spec, bases).\nAddedinversion3.3.\nChanged in version 3.12: The function now finds and uses a metaclass corresponding to the provided base\nclasses. Previously,onlytypeinstanceswerereturned.\nThetp_newofthemetaclassisignored. whichmayresultinincompleteinitialization. Creatingclasseswhose\nmetaclassoverridestp_newisdeprecatedandinPython3.14+itwillbenolongerallowed.\nPyObject*PyType_FromSpec(PyType_Spec*spec)\nReturnvalue:Newreference. PartoftheStableABI.EquivalenttoPyType_FromMetaclass(NULL, NULL,\nspec, NULL).\nChanged in version 3.12: The function now finds and uses a metaclass corresponding to the base classes\nprovidedinPy_tp_base[s]slots. Previously,onlytypeinstanceswerereturned.\nThetp_newofthemetaclassisignored. whichmayresultinincompleteinitialization. Creatingclasseswhose\nmetaclassoverridestp_newisdeprecatedandinPython3.14+itwillbenolongerallowed.\ntypePyType_Spec\nPartoftheStableABI(includingallmembers). Structuredefiningatype\u2019sbehavior.\nconstchar*name\nNameofthetype,usedtosetPyTypeObject.tp_name.\nintbasicsize\nIfpositive,specifiesthesizeoftheinstanceinbytes. ItisusedtosetPyTypeObject.tp_basicsize.\nIfzero,specifiesthattp_basicsizeshouldbeinherited.\nIf negative, the absolute value specifies how much space instances of the class need in addition to the\nsuperclass. Use PyObject_GetTypeData() to get a pointer to subclass-specific memory reserved\n8.1. FundamentalObjects 121\nThePython/CAPI,Release3.13.3\nthisway. Fornegativebasicsize,Pythonwillinsertpaddingwhenneededtomeettp_basicsize\u2019s\nalignmentrequirements.\nChangedinversion3.12: Previously,thisfieldcouldnotbenegative.\nintitemsize\nSizeofoneelementofavariable-sizetype,inbytes. UsedtosetPyTypeObject.tp_itemsize. See\ntp_itemsizedocumentationforcaveats.\nIfzero,tp_itemsizeisinherited. Extendingarbitraryvariable-sizedclassesisdangerous,sincesome\ntypesuseafixedoffsetforvariable-sizedmemory,whichcanthenoverlapfixed-sizedmemoryusedbya\nsubclass. Tohelppreventmistakes,inheritingitemsizeisonlypossibleinthefollowingsituations:\n\u2022 Thebaseisnotvariable-sized(itstp_itemsize).\n\u2022 The requested PyType_Spec.basicsize is positive, suggesting that the memory layout of the\nbaseclassisknown.\n\u2022 TherequestedPyType_Spec.basicsizeiszero,suggestingthatthesubclassdoesnotaccessthe\ninstance\u2019smemorydirectly.\n\u2022 WiththePy_TPFLAGS_ITEMS_AT_ENDflag.\nunsignedintflags\nTypeflags,usedtosetPyTypeObject.tp_flags.\nIfthePy_TPFLAGS_HEAPTYPEflagisnotset,PyType_FromSpecWithBases()setsitautomatically.\nPyType_Slot*slots\nArrayofPyType_Slotstructures. Terminatedbythespecialslotvalue{0, NULL}.\nEachslotIDshouldbespecifiedatmostonce.\ntypePyType_Slot\nPartoftheStableABI(includingallmembers). Structuredefiningoptionalfunctionalityofatype,containing\naslotIDandavaluepointer.\nintslot\nAslotID.\nSlot IDs are named like the field names of the structures PyTypeObject, PyNumberMethods,\nPySequenceMethods, PyMappingMethods and PyAsyncMethods with an added Py_ prefix. For\nexample,use:\n\u2022 Py_tp_dealloctosetPyTypeObject.tp_dealloc\n\u2022 Py_nb_addtosetPyNumberMethods.nb_add\n\u2022 Py_sq_lengthtosetPySequenceMethods.sq_length\nThefollowing\u201coffset\u201dfieldscannotbesetusingPyType_Slot:\n\u2022 tp_weaklistoffset(usePy_TPFLAGS_MANAGED_WEAKREFinsteadifpossible)\n\u2022 tp_dictoffset(usePy_TPFLAGS_MANAGED_DICTinsteadifpossible)\n\u2022 tp_vectorcall_offset(use\"__vectorcalloffset__\"inPyMemberDef)\nIfitisnotpossibletoswitchtoaMANAGEDflag(forexample,forvectorcallortosupportPythonolder\nthan3.12),specifytheoffsetinPy_tp_members. SeePyMemberDefdocumentationfordetails.\nThefollowingfieldscannotbesetatallwhencreatingaheaptype:\n\u2022 tp_vectorcall(usetp_newand/ortp_init)\n\u2022 Internalfields: tp_dict,tp_mro,tp_cache,tp_subclasses,andtp_weaklist.\nSettingPy_tp_basesorPy_tp_basemaybeproblematiconsomeplatforms. Toavoidissues,usethe\nbasesargumentofPyType_FromSpecWithBases()instead.\n122 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nChangedinversion3.9: SlotsinPyBufferProcsmaybesetintheunlimitedAPI.\nChangedinversion3.11: bf_getbufferandbf_releasebufferarenowavailableunderthelimited\nAPI.\nvoid*pfunc\nThedesiredvalueoftheslot. Inmostcases,thisisapointertoafunction.\nSlotsotherthanPy_tp_docmaynotbeNULL.\n8.1.2 The None Object\nNote that the PyTypeObject for None is not directly exposed in the Python/C API. Since None is a singleton,\ntestingforobjectidentity(using==inC)issufficient. ThereisnoPyNone_Check()functionforthesamereason.\nPyObject*Py_None\nThePythonNoneobject,denotinglackofvalue. Thisobjecthasnomethodsandisimmortal.\nChangedinversion3.12: Py_Noneisimmortal.\nPy_RETURN_NONE\nReturnPy_Nonefromafunction.\n8.2 Numeric Objects\n8.2.1 Integer Objects\nAllintegersareimplementedas\u201clong\u201dintegerobjectsofarbitrarysize.\nOnerror,mostPyLong_As*APIsreturn(return type)-1whichcannotbedistinguishedfromanumber. Use\nPyErr_Occurred()todisambiguate.\ntypePyLongObject\nPartoftheLimitedAPI(asanopaquestruct). ThissubtypeofPyObjectrepresentsaPythonintegerobject.\nPyTypeObjectPyLong_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythonintegertype. Thisisthesame\nobjectasintinthePythonlayer.\nintPyLong_Check(PyObject*p)\nReturntrueifitsargumentisaPyLongObjectorasubtypeofPyLongObject. Thisfunctionalwayssuc-\nceeds.\nintPyLong_CheckExact(PyObject*p)\nReturntrueifitsargumentisaPyLongObject,butnotasubtypeofPyLongObject. Thisfunctionalways\nsucceeds.\nPyObject*PyLong_FromLong(longv)\nReturnvalue: Newreference. PartoftheStableABI.ReturnanewPyLongObjectobjectfromv,orNULLon\nfailure.\nThecurrentimplementationkeepsanarrayofintegerobjectsforallintegersbetween-5and256. Whenyou\ncreateanintinthatrangeyouactuallyjustgetbackareferencetotheexistingobject.\nPyObject*PyLong_FromUnsignedLong(unsignedlongv)\nReturnvalue: Newreference. PartoftheStableABI.ReturnanewPyLongObjectobjectfromaCunsigned\nlong,orNULLonfailure.\nPyObject*PyLong_FromSsize_t(Py_ssize_tv)\nReturn value: New reference. Part of the Stable ABI. Return a new PyLongObject object from a C\nPy_ssize_t,orNULLonfailure.\n8.2. NumericObjects 123\nThePython/CAPI,Release3.13.3\nPyObject*PyLong_FromSize_t(size_tv)\nReturnvalue: Newreference. PartoftheStableABI.ReturnanewPyLongObjectobjectfromaCsize_t,\norNULLonfailure.\nPyObject*PyLong_FromLongLong(longlongv)\nReturn value: New reference. Part of the Stable ABI. Return a new PyLongObject object from a C long\nlong,orNULLonfailure.\nPyObject*PyLong_FromUnsignedLongLong(unsignedlonglongv)\nReturnvalue: Newreference. PartoftheStableABI.ReturnanewPyLongObjectobjectfromaCunsigned\nlong long,orNULLonfailure.\nPyObject*PyLong_FromDouble(doublev)\nReturnvalue: Newreference. PartoftheStableABI.ReturnanewPyLongObjectobjectfromtheinteger\npartofv,orNULLonfailure.\nPyObject*PyLong_FromString(constchar*str,char**pend,intbase)\nReturnvalue: Newreference. PartoftheStableABI.ReturnanewPyLongObjectbasedonthestringvalue\ninstr,whichisinterpretedaccordingtotheradixinbase,orNULLonfailure. Ifpendisnon-NULL,*pendwill\npointtotheendofstr onsuccessortothefirstcharacterthatcouldnotbeprocessedonerror. Ifbaseis0,\nstrisinterpretedusingtheintegersdefinition;inthiscase,leadingzerosinanon-zerodecimalnumberraises\na ValueError. If base is not 0, it must be between 2 and 36, inclusive. Leading and trailing whitespace\nandsingleunderscoresafterabasespecifierandbetweendigitsareignored. Iftherearenodigitsorstrisnot\nNULL-terminatedfollowingthedigitsandtrailingwhitespace,ValueErrorwillberaised.\n(cid:181) Seealso\nPython methods int.to_bytes() and int.from_bytes() to convert a PyLongObject to/from an\narrayofbytesinbase256. YoucancallthosefromCusingPyObject_CallMethod().\nPyObject*PyLong_FromUnicodeObject(PyObject*u,intbase)\nReturnvalue: Newreference. ConvertasequenceofUnicodedigitsinthestringutoaPythonintegervalue.\nAddedinversion3.3.\nPyObject*PyLong_FromVoidPtr(void*p)\nReturnvalue: Newreference. PartoftheStableABI.CreateaPythonintegerfromthepointerp. Thepointer\nvaluecanberetrievedfromtheresultingvalueusingPyLong_AsVoidPtr().\nPyObject*PyLong_FromNativeBytes(constvoid*buffer,size_tn_bytes,intflags)\nCreate a Python integer from the value contained in the first n_bytes of buffer, interpreted as a two\u2019s-\ncomplementsignednumber.\nflags are as for PyLong_AsNativeBytes(). Passing -1 will select the native endian\nthat CPython was compiled with and assume that the most-significant bit is a sign bit.\nPassing Py_ASNATIVEBYTES_UNSIGNED_BUFFER will produce the same result as calling\nPyLong_FromUnsignedNativeBytes(). Otherflagsareignored.\nAddedinversion3.13.\nPyObject*PyLong_FromUnsignedNativeBytes(constvoid*buffer,size_tn_bytes,intflags)\nCreate a Python integer from the value contained in the first n_bytes of buffer, interpreted as an unsigned\nnumber.\nflags are as for PyLong_AsNativeBytes(). Passing -1 will select the native endian that CPython was\ncompiledwithandassumethatthemost-significantbitisnotasignbit. Flagsotherthanendianareignored.\nAddedinversion3.13.\n124 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nlongPyLong_AsLong(PyObject*obj)\nPartoftheStableABI.ReturnaClongrepresentationofobj. Ifobj isnotaninstanceofPyLongObject,\nfirstcallits__index__()method(ifpresent)toconvertittoaPyLongObject.\nRaiseOverflowErrorifthevalueofobjisoutofrangeforalong.\nReturns-1onerror. UsePyErr_Occurred()todisambiguate.\nChangedinversion3.8: Use__index__()ifavailable.\nChangedinversion3.10: Thisfunctionwillnolongeruse__int__().\nlongPyLong_AS_LONG(PyObject*obj)\nAsoftdeprecated alias. ExactlyequivalenttothepreferredPyLong_AsLong. Inparticular, itcanfail\nwithOverflowErrororanotherexception.\nDeprecatedsinceversion3.14: Thefunctionissoftdeprecated.\nintPyLong_AsInt(PyObject*obj)\nPart of the Stable ABI since version 3.13. Similar to PyLong_AsLong(), but store the result in a C int\ninsteadofaClong.\nAddedinversion3.13.\nlongPyLong_AsLongAndOverflow(PyObject*obj,int*overflow)\nPartoftheStableABI.ReturnaClongrepresentationofobj. Ifobj isnotaninstanceofPyLongObject,\nfirstcallits__index__()method(ifpresent)toconvertittoaPyLongObject.\nIfthevalueofobj isgreaterthanLONG_MAXorlessthanLONG_MIN,set*overflowto1or-1, respectively,\nandreturn-1;otherwise,set*overflowto0. Ifanyotherexceptionoccursset*overflowto0andreturn-1as\nusual.\nReturns-1onerror. UsePyErr_Occurred()todisambiguate.\nChangedinversion3.8: Use__index__()ifavailable.\nChangedinversion3.10: Thisfunctionwillnolongeruse__int__().\nlonglongPyLong_AsLongLong(PyObject*obj)\nPart of the Stable ABI. Return a C long long representation of obj. If obj is not an instance of\nPyLongObject,firstcallits__index__()method(ifpresent)toconvertittoaPyLongObject.\nRaiseOverflowErrorifthevalueofobjisoutofrangeforalong long.\nReturns-1onerror. UsePyErr_Occurred()todisambiguate.\nChangedinversion3.8: Use__index__()ifavailable.\nChangedinversion3.10: Thisfunctionwillnolongeruse__int__().\nlonglongPyLong_AsLongLongAndOverflow(PyObject*obj,int*overflow)\nPart of the Stable ABI. Return a C long long representation of obj. If obj is not an instance of\nPyLongObject,firstcallits__index__()method(ifpresent)toconvertittoaPyLongObject.\nIfthevalueofobjisgreaterthanLLONG_MAXorlessthanLLONG_MIN,set*overflowto1or-1,respectively,\nandreturn-1;otherwise,set*overflowto0. Ifanyotherexceptionoccursset*overflowto0andreturn-1as\nusual.\nReturns-1onerror. UsePyErr_Occurred()todisambiguate.\nAddedinversion3.2.\nChangedinversion3.8: Use__index__()ifavailable.\nChangedinversion3.10: Thisfunctionwillnolongeruse__int__().\n8.2. NumericObjects 125\nThePython/CAPI,Release3.13.3\nPy_ssize_tPyLong_AsSsize_t(PyObject*pylong)\nPart of the Stable ABI. Return a C Py_ssize_t representation of pylong. pylong must be an instance of\nPyLongObject.\nRaiseOverflowErrorifthevalueofpylongisoutofrangeforaPy_ssize_t.\nReturns-1onerror. UsePyErr_Occurred()todisambiguate.\nunsignedlongPyLong_AsUnsignedLong(PyObject*pylong)\nPartoftheStableABI.ReturnaCunsigned longrepresentationofpylong. pylongmustbeaninstanceof\nPyLongObject.\nRaiseOverflowErrorifthevalueofpylongisoutofrangeforaunsigned long.\nReturns(unsigned long)-1onerror. UsePyErr_Occurred()todisambiguate.\nsize_tPyLong_AsSize_t(PyObject*pylong)\nPart of the Stable ABI. Return a C size_t representation of pylong. pylong must be an instance of\nPyLongObject.\nRaiseOverflowErrorifthevalueofpylongisoutofrangeforasize_t.\nReturns(size_t)-1onerror. UsePyErr_Occurred()todisambiguate.\nunsignedlonglongPyLong_AsUnsignedLongLong(PyObject*pylong)\nPart of the Stable ABI. Return a C unsigned long long representation of pylong. pylong must be an\ninstanceofPyLongObject.\nRaiseOverflowErrorifthevalueofpylongisoutofrangeforanunsigned long long.\nReturns(unsigned long long)-1onerror. UsePyErr_Occurred()todisambiguate.\nChangedinversion3.1: AnegativepylongnowraisesOverflowError,notTypeError.\nunsignedlongPyLong_AsUnsignedLongMask(PyObject*obj)\nPart of the Stable ABI. Return a C unsigned long representation of obj. If obj is not an instance of\nPyLongObject,firstcallits__index__()method(ifpresent)toconvertittoaPyLongObject.\nIf the value of obj is out of range for an unsigned long, return the reduction of that value modulo\nULONG_MAX + 1.\nReturns(unsigned long)-1onerror. UsePyErr_Occurred()todisambiguate.\nChangedinversion3.8: Use__index__()ifavailable.\nChangedinversion3.10: Thisfunctionwillnolongeruse__int__().\nunsignedlonglongPyLong_AsUnsignedLongLongMask(PyObject*obj)\nPartoftheStableABI.ReturnaCunsigned long longrepresentationofobj. Ifobjisnotaninstanceof\nPyLongObject,firstcallits__index__()method(ifpresent)toconvertittoaPyLongObject.\nIfthevalueofobj isoutofrangeforanunsigned long long,returnthereductionofthatvaluemodulo\nULLONG_MAX + 1.\nReturns(unsigned long long)-1onerror. UsePyErr_Occurred()todisambiguate.\nChangedinversion3.8: Use__index__()ifavailable.\nChangedinversion3.10: Thisfunctionwillnolongeruse__int__().\ndoublePyLong_AsDouble(PyObject*pylong)\nPart of the Stable ABI. Return a C double representation of pylong. pylong must be an instance of\nPyLongObject.\nRaiseOverflowErrorifthevalueofpylongisoutofrangeforadouble.\nReturns-1.0onerror. UsePyErr_Occurred()todisambiguate.\n126 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nvoid*PyLong_AsVoidPtr(PyObject*pylong)\nPartoftheStableABI.ConvertaPythonintegerpylongtoaCvoidpointer. Ifpylongcannotbeconverted,\nanOverflowErrorwillberaised. Thisisonlyassuredtoproduceausablevoidpointerforvaluescreated\nwithPyLong_FromVoidPtr().\nReturnsNULLonerror. UsePyErr_Occurred()todisambiguate.\nPy_ssize_tPyLong_AsNativeBytes(PyObject*pylong,void*buffer,Py_ssize_tn_bytes,intflags)\nCopythePythonintegervaluepylongtoanativebufferofsizen_bytes. Theflagscanbesetto-1tobehave\nsimilarlytoaCcast,ortovaluesdocumentedbelowtocontrolthebehavior.\nReturns-1withanexceptionraisedonerror. Thismayhappenifpylongcannotbeinterpretedasaninteger,\norifpylongwasnegativeandthePy_ASNATIVEBYTES_REJECT_NEGATIVEflagwasset.\nOtherwise,returnsthenumberofbytesrequiredtostorethevalue. Ifthisisequaltoorlessthann_bytes,the\nentirevaluewascopied. Alln_bytesofthebufferarewritten: largebuffersarepaddedwithzeroes.\nIfthereturnedvalueisgreaterthanthann_bytes,thevaluewastruncated: asmanyofthelowestbitsofthe\nvalueascouldfitarewritten,andthehigherbitsareignored. ThismatchesthetypicalbehaviorofaC-style\ndowncast.\n(cid:174) Note\nOverflowisnotconsideredanerror. Ifthereturnedvalueislargerthann_bytes,mostsignificantbitswere\ndiscarded.\n0willneverbereturned.\nValuesarealwayscopiedastwo\u2019s-complement.\nUsageexample:\nint32_t value;\nPy_ssize_t bytes = PyLong_AsNativeBytes(pylong, &value, sizeof(value), -1);\nif (bytes < 0) {\n// Failed. A Python exception was set with the reason.\nreturn NULL;\n}\nelse if (bytes <= (Py_ssize_t)sizeof(value)) {\n// Success!\n}\nelse {\n// Overflow occurred, but 'value' contains the truncated\n// lowest bits of pylong.\n}\nPassingzeroton_byteswillreturnthesizeofabufferthatwouldbelargeenoughtoholdthevalue. Thismay\nbelargerthantechnicallynecessary,butnotunreasonablyso. Ifn_bytes=0,buffermaybeNULL.\n(cid:174) Note\nPassingn_bytes=0tothisfunctionisnotanaccuratewaytodeterminethebitlengthofthevalue.\nTogetattheentirePythonvalueofanunknownsize,thefunctioncanbecalledtwice: firsttodeterminethe\nbuffersize,thentofillit:\n// Ask how much space we need.\nPy_ssize_t expected = PyLong_AsNativeBytes(pylong, NULL, 0, -1);\nif (expected < 0) {\n(continuesonnextpage)\n8.2. NumericObjects 127\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\n// Failed. A Python exception was set with the reason.\nreturn NULL;\n}\nassert(expected != 0); // Impossible per the API definition.\nuint8_t *bignum = malloc(expected);\nif (!bignum) {\nPyErr_SetString(PyExc_MemoryError, \"bignum malloc failed.\");\nreturn NULL;\n}\n// Safely get the entire value.\nPy_ssize_t bytes = PyLong_AsNativeBytes(pylong, bignum, expected, -1);\nif (bytes < 0) { // Exception has been set.\nfree(bignum);\nreturn NULL;\n}\nelse if (bytes > expected) { // This should not be possible.\nPyErr_SetString(PyExc_RuntimeError,\n\"Unexpected bignum truncation after a size check.\");\nfree(bignum);\nreturn NULL;\n}\n// The expected success given the above pre-check.\n// ... use bignum ...\nfree(bignum);\nflags is either -1 (Py_ASNATIVEBYTES_DEFAULTS) to select defaults that behave most like a C cast, or a\ncombinationoftheotherflagsinthetablebelow. Notethat-1cannotbecombinedwithotherflags.\nCurrently, -1 corresponds to Py_ASNATIVEBYTES_NATIVE_ENDIAN |\nPy_ASNATIVEBYTES_UNSIGNED_BUFFER.\nFlag Value\n-1\nPy_ASNATIVEBYTES_DEFAULTS\n0\nPy_ASNATIVEBYTES_BIG_ENDIAN\n1\nPy_ASNATIVEBYTES_LITTLE_ENDIAN\n3\nPy_ASNATIVEBYTES_NATIVE_ENDIAN\n4\nPy_ASNATIVEBYTES_UNSIGNED_BUFFER\n8\nPy_ASNATIVEBYTES_REJECT_NEGATIVE\n16\nPy_ASNATIVEBYTES_ALLOW_INDEX\nSpecifyingPy_ASNATIVEBYTES_NATIVE_ENDIANwilloverrideanyotherendianflags. Passing2isreserved.\nBy default, sufficient buffer will be requested to include a sign bit. For example, when converting 128 with\n128 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nn_bytes=1,thefunctionwillreturn2(ormore)inordertostoreazerosignbit.\nIfPy_ASNATIVEBYTES_UNSIGNED_BUFFERisspecified, azerosignbitwillbeomittedfromsizecalcula-\ntions. Thisallows, forexample, 128tofitinasingle-bytebuffer. Ifthedestinationbufferislatertreatedas\nsigned, a positive input value may become negative. Note that the flag does not affect handling of negative\nvalues: forthose,spaceforasignbitisalwaysrequested.\nSpecifying Py_ASNATIVEBYTES_REJECT_NEGATIVE causes an exception to be set if pylong is negative.\nWithoutthisflag, negativevalueswillbecopiedprovidedthereisenoughspaceforatleastonesignbit, re-\ngardlessofwhetherPy_ASNATIVEBYTES_UNSIGNED_BUFFERwasspecified.\nIf Py_ASNATIVEBYTES_ALLOW_INDEX is specified and a non-integer value is passed, its __index__()\nmethodwillbecalledfirst. ThismayresultinPythoncodeexecutingandotherthreadsbeingallowedtorun,\nwhich could cause changes to other objects or values in use. When flags is -1, this option is not set, and\nnon-integervalueswillraiseTypeError.\n(cid:174) Note\nWiththedefaultflags(-1,orUNSIGNED_BUFFERwithoutREJECT_NEGATIVE),multiplePythoninte-\ngerscanmaptoasinglevaluewithoutoverflow. Forexample,both255and-1fitasingle-bytebufferand\nsetallitsbits. ThismatchestypicalCcastbehavior.\nAddedinversion3.13.\nPyObject*PyLong_GetInfo(void)\nPart of the Stable ABI. On success, return a read only named tuple, that holds information about Python\u2019s\ninternalrepresentationofintegers. Seesys.int_infofordescriptionofindividualfields.\nOnfailure,returnNULLwithanexceptionset.\nAddedinversion3.1.\nintPyUnstable_Long_IsCompact(constPyLongObject*op)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nReturn1ifopiscompact,0otherwise.\nThisfunctionmakesitpossibleforperformance-criticalcodetoimplementa\u201cfastpath\u201dforsmallintegers. For\ncompactvaluesusePyUnstable_Long_CompactValue();forothersfallbacktoaPyLong_As*function\norPyLong_AsNativeBytes().\nThespeedupisexpectedtobenegligibleformostusers.\nExactlywhatvaluesareconsideredcompactisanimplementationdetailandissubjecttochange.\nAddedinversion3.12.\nPy_ssize_tPyUnstable_Long_CompactValue(constPyLongObject*op)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nIfopiscompact,asdeterminedbyPyUnstable_Long_IsCompact(),returnitsvalue.\nOtherwise,thereturnvalueisundefined.\nAddedinversion3.12.\n8.2. NumericObjects 129\nThePython/CAPI,Release3.13.3\n8.2.2 Boolean Objects\nBooleansinPythonareimplementedasasubclassofintegers. Thereareonlytwobooleans,Py_FalseandPy_True.\nAs such, the normal creation and deletion functions don\u2019t apply to booleans. The following macros are available,\nhowever.\nPyTypeObjectPyBool_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythonbooleantype; itisthesame\nobjectasboolinthePythonlayer.\nintPyBool_Check(PyObject*o)\nReturntrueifoisoftypePyBool_Type. Thisfunctionalwayssucceeds.\nPyObject*Py_False\nThePythonFalseobject. Thisobjecthasnomethodsandisimmortal.\nChangedinversion3.12: Py_Falseisimmortal.\nPyObject*Py_True\nThePythonTrueobject. Thisobjecthasnomethodsandisimmortal.\nChangedinversion3.12: Py_Trueisimmortal.\nPy_RETURN_FALSE\nReturnPy_Falsefromafunction.\nPy_RETURN_TRUE\nReturnPy_Truefromafunction.\nPyObject*PyBool_FromLong(longv)\nReturnvalue: Newreference. PartoftheStableABI.ReturnPy_TrueorPy_False,dependingonthetruth\nvalueofv.\n8.2.3 Floating-Point Objects\ntypePyFloatObject\nThissubtypeofPyObjectrepresentsaPythonfloating-pointobject.\nPyTypeObjectPyFloat_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythonfloating-pointtype. Thisisthe\nsameobjectasfloatinthePythonlayer.\nintPyFloat_Check(PyObject*p)\nReturn true if its argument is a PyFloatObject or a subtype of PyFloatObject. This function always\nsucceeds.\nintPyFloat_CheckExact(PyObject*p)\nReturntrueifitsargumentisaPyFloatObject,butnotasubtypeofPyFloatObject. Thisfunctionalways\nsucceeds.\nPyObject*PyFloat_FromString(PyObject*str)\nReturn value: New reference. Part of the Stable ABI. Create a PyFloatObject object based on the string\nvalueinstr,orNULLonfailure.\nPyObject*PyFloat_FromDouble(doublev)\nReturnvalue: Newreference. PartoftheStableABI.CreateaPyFloatObjectobjectfromv, orNULLon\nfailure.\ndoublePyFloat_AsDouble(PyObject*pyfloat)\nPartoftheStableABI.ReturnaCdoublerepresentationofthecontentsofpyfloat. IfpyfloatisnotaPython\nfloating-pointobjectbuthasa__float__()method,thismethodwillfirstbecalledtoconvertpyfloat into\nafloat. If__float__()isnotdefinedthenitfallsbackto__index__(). Thismethodreturns-1.0upon\nfailure,sooneshouldcallPyErr_Occurred()tocheckforerrors.\n130 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nChangedinversion3.8: Use__index__()ifavailable.\ndoublePyFloat_AS_DOUBLE(PyObject*pyfloat)\nReturnaCdoublerepresentationofthecontentsofpyfloat,butwithouterrorchecking.\nPyObject*PyFloat_GetInfo(void)\nReturnvalue: Newreference. PartoftheStableABI.Returnastructseqinstancewhichcontainsinformation\nabout the precision, minimum and maximum values of a float. It\u2019s a thin wrapper around the header file\nfloat.h.\ndoublePyFloat_GetMax()\nPartoftheStableABI.ReturnthemaximumrepresentablefinitefloatDBL_MAXasCdouble.\ndoublePyFloat_GetMin()\nPartoftheStableABI.ReturntheminimumnormalizedpositivefloatDBL_MIN asCdouble.\nPackandUnpackfunctions\nThepackandunpackfunctionsprovideanefficientplatform-independentwaytostorefloating-pointvaluesasbyte\nstrings. ThePackroutinesproduceabytesstringfromaCdouble,andtheUnpackroutinesproduceaCdouble\nfromsuchabytesstring. Thesuffix(2,4or8)specifiesthenumberofbytesinthebytesstring.\nOn platforms that appear to use IEEE 754 formats these functions work by copying bits. On other platforms, the\n2-byteformatisidenticaltotheIEEE754binary16half-precisionformat,the4-byteformat(32-bit)isidenticalto\ntheIEEE754binary32singleprecisionformat, andthe8-byteformattotheIEEE754binary64doubleprecision\nformat, although the packing of INFs and NaNs (if such things exist on the platform) isn\u2019t handled correctly, and\nattemptingtounpackabytesstringcontaininganIEEEINForNaNwillraiseanexception.\nOnnon-IEEEplatformswithmoreprecision,orlargerdynamicrange,thanIEEE754supports,notallvaluescanbe\npacked;onnon-IEEEplatformswithlessprecision,orsmallerdynamicrange,notallvaluescanbeunpacked. What\nhappensinsuchcasesispartlyaccidental(alas).\nAddedinversion3.11.\nPackfunctions\nThepackroutineswrite2,4or8bytes,startingatp. leisanintargument,non-zeroifyouwantthebytesstringin\nlittle-endianformat(exponentlast,atp+1,p+3,orp+6p+7),zeroifyouwantbig-endianformat(exponentfirst,at\np). ThePY_BIG_ENDIANconstantcanbeusedtousethenativeendian: itisequalto1onbigendianprocessor,or\n0onlittleendianprocessor.\nReturnvalue: 0ifallisOK,-1iferror(andanexceptionisset,mostlikelyOverflowError).\nTherearetwoproblemsonnon-IEEEplatforms:\n\u2022 WhatthisdoesisundefinedifxisaNaNorinfinity.\n\u2022 -0.0and+0.0producethesamebytesstring.\nintPyFloat_Pack2(doublex,unsignedchar*p,intle)\nPackaCdoubleastheIEEE754binary16half-precisionformat.\nintPyFloat_Pack4(doublex,unsignedchar*p,intle)\nPackaCdoubleastheIEEE754binary32singleprecisionformat.\nintPyFloat_Pack8(doublex,unsignedchar*p,intle)\nPackaCdoubleastheIEEE754binary64doubleprecisionformat.\nUnpackfunctions\nThe unpack routines read 2, 4 or 8 bytes, starting at p. le is an int argument, non-zero if the bytes string is in\nlittle-endian format (exponent last, at p+1, p+3 or p+6 and p+7), zero if big-endian (exponent first, at p). The\nPY_BIG_ENDIANconstantcanbeusedtousethenativeendian: itisequalto1onbigendianprocessor,or0onlittle\nendianprocessor.\n8.2. NumericObjects 131\nThePython/CAPI,Release3.13.3\nReturnvalue: Theunpackeddouble. Onerror,thisis-1.0andPyErr_Occurred()istrue(andanexceptionis\nset,mostlikelyOverflowError).\nNotethatonanon-IEEEplatformthiswillrefusetounpackabytesstringthatrepresentsaNaNorinfinity.\ndoublePyFloat_Unpack2(constunsignedchar*p,intle)\nUnpacktheIEEE754binary16half-precisionformatasaCdouble.\ndoublePyFloat_Unpack4(constunsignedchar*p,intle)\nUnpacktheIEEE754binary32singleprecisionformatasaCdouble.\ndoublePyFloat_Unpack8(constunsignedchar*p,intle)\nUnpacktheIEEE754binary64doubleprecisionformatasaCdouble.\n8.2.4 Complex Number Objects\nPython\u2019s complex number objects are implemented as two distinct types when viewed from the C API: one is the\nPythonobjectexposedtoPythonprograms,andtheotherisaCstructurewhichrepresentstheactualcomplexnumber\nvalue. TheAPIprovidesfunctionsforworkingwithboth.\nComplexNumbersasCStructures\nNotethatthefunctionswhichacceptthesestructuresasparametersandreturnthemasresultsdosobyvaluerather\nthandereferencingthemthroughpointers. ThisisconsistentthroughouttheAPI.\ntypePy_complex\nThe C structure which corresponds to the value portion of a Python complex number object. Most of the\nfunctions for dealing with complex number objects use structures of this type as input or output values, as\nappropriate.\ndoublereal\ndoubleimag\nThestructureisdefinedas:\ntypedef struct {\ndouble real;\ndouble imag;\n} Py_complex;\nPy_complex_Py_c_sum(Py_complexleft,Py_complexright)\nReturnthesumoftwocomplexnumbers,usingtheCPy_complexrepresentation.\nPy_complex_Py_c_diff(Py_complexleft,Py_complexright)\nReturnthedifferencebetweentwocomplexnumbers,usingtheCPy_complexrepresentation.\nPy_complex_Py_c_neg(Py_complexnum)\nReturnthenegationofthecomplexnumbernum,usingtheCPy_complexrepresentation.\nPy_complex_Py_c_prod(Py_complexleft,Py_complexright)\nReturntheproductoftwocomplexnumbers,usingtheCPy_complexrepresentation.\nPy_complex_Py_c_quot(Py_complexdividend,Py_complexdivisor)\nReturnthequotientoftwocomplexnumbers,usingtheCPy_complexrepresentation.\nIfdivisorisnull,thismethodreturnszeroandsetserrnotoEDOM.\nPy_complex_Py_c_pow(Py_complexnum,Py_complexexp)\nReturntheexponentiationofnumbyexp,usingtheCPy_complexrepresentation.\nIfnumisnullandexpisnotapositiverealnumber,thismethodreturnszeroandsetserrnotoEDOM.\n132 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nComplexNumbersasPythonObjects\ntypePyComplexObject\nThissubtypeofPyObjectrepresentsaPythoncomplexnumberobject.\nPyTypeObjectPyComplex_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythoncomplexnumbertype. Itisthe\nsameobjectascomplexinthePythonlayer.\nintPyComplex_Check(PyObject*p)\nReturntrueifitsargumentisaPyComplexObjectorasubtypeofPyComplexObject. Thisfunctionalways\nsucceeds.\nintPyComplex_CheckExact(PyObject*p)\nReturntrueifitsargumentisaPyComplexObject,butnotasubtypeofPyComplexObject. Thisfunction\nalwayssucceeds.\nPyObject*PyComplex_FromCComplex(Py_complexv)\nReturn value: New reference. Create a new Python complex number object from a C Py_complex value.\nReturnNULLwithanexceptionsetonerror.\nPyObject*PyComplex_FromDoubles(doublereal,doubleimag)\nReturnvalue: Newreference. PartoftheStableABI.ReturnanewPyComplexObjectobjectfromrealand\nimag. ReturnNULLwithanexceptionsetonerror.\ndoublePyComplex_RealAsDouble(PyObject*op)\nPartoftheStableABI.ReturntherealpartofopasaCdouble.\nIf op is not a Python complex number object but has a __complex__() method, this method will first be\ncalledtoconvertoptoaPythoncomplexnumberobject. If__complex__()isnotdefinedthenitfallsback\ntocallPyFloat_AsDouble()andreturnsitsresult.\nUpon failure, this method returns -1.0 with an exception set, so one should call PyErr_Occurred() to\ncheckforerrors.\nChangedinversion3.13: Use__complex__()ifavailable.\ndoublePyComplex_ImagAsDouble(PyObject*op)\nPartoftheStableABI.ReturntheimaginarypartofopasaCdouble.\nIf op is not a Python complex number object but has a __complex__() method, this method will first be\ncalledtoconvertoptoaPythoncomplexnumberobject. If__complex__()isnotdefinedthenitfallsback\ntocallPyFloat_AsDouble()andreturns0.0onsuccess.\nUpon failure, this method returns -1.0 with an exception set, so one should call PyErr_Occurred() to\ncheckforerrors.\nChangedinversion3.13: Use__complex__()ifavailable.\nPy_complexPyComplex_AsCComplex(PyObject*op)\nReturnthePy_complexvalueofthecomplexnumberop.\nIf op is not a Python complex number object but has a __complex__() method, this method will first be\ncalledtoconvertoptoaPythoncomplexnumberobject. If__complex__()isnotdefinedthenitfallsback\nto__float__(). If__float__()isnotdefinedthenitfallsbackto__index__().\nUponfailure,thismethodreturnsPy_complexwithrealsetto-1.0andwithanexceptionset,sooneshould\ncallPyErr_Occurred()tocheckforerrors.\nChangedinversion3.8: Use__index__()ifavailable.\n8.2. NumericObjects 133\nThePython/CAPI,Release3.13.3\n8.3 Sequence Objects\nGenericoperationsonsequenceobjectswerediscussedinthepreviouschapter; thissectiondealswiththespecific\nkindsofsequenceobjectsthatareintrinsictothePythonlanguage.\n8.3.1 Bytes Objects\nThesefunctionsraiseTypeErrorwhenexpectingabytesparameterandcalledwithanon-bytesparameter.\ntypePyBytesObject\nThissubtypeofPyObjectrepresentsaPythonbytesobject.\nPyTypeObjectPyBytes_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythonbytestype;itisthesameobject\nasbytesinthePythonlayer.\nintPyBytes_Check(PyObject*o)\nReturntrueiftheobjectoisabytesobjectoraninstanceofasubtypeofthebytestype. Thisfunctionalways\nsucceeds.\nintPyBytes_CheckExact(PyObject*o)\nReturntrueiftheobjectoisabytesobject,butnotaninstanceofasubtypeofthebytestype. Thisfunction\nalwayssucceeds.\nPyObject*PyBytes_FromString(constchar*v)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewbytesobjectwithacopyofthestringvas\nvalueonsuccess,andNULLonfailure. TheparametervmustnotbeNULL;itwillnotbechecked.\nPyObject*PyBytes_FromStringAndSize(constchar*v,Py_ssize_tlen)\nReturn value: New reference. Part of the Stable ABI. Return a new bytes object with a copy of the string v\nas value and length len on success, and NULL on failure. If v is NULL, the contents of the bytes object are\nuninitialized.\nPyObject*PyBytes_FromFormat(constchar*format,...)\nReturnvalue: Newreference. PartoftheStableABI.TakeaCprintf()-styleformat stringandavariable\nnumberofarguments,calculatethesizeoftheresultingPythonbytesobjectandreturnabytesobjectwiththe\nvaluesformattedintoit. ThevariableargumentsmustbeCtypesandmustcorrespondexactlytotheformat\ncharactersintheformatstring. Thefollowingformatcharactersareallowed:\nFormatCharacters Type Comment\n%% n/a Theliteral%character.\n%c int Asinglebyte,representedasaCint.\n%d int Equivalenttoprintf(\"%d\").1\n%u unsignedint Equivalenttoprintf(\"%u\").1\n%ld long Equivalenttoprintf(\"%ld\").1\n%lu unsignedlong Equivalenttoprintf(\"%lu\").1\n%zd Py_ssize_t Equivalenttoprintf(\"%zd\").1\n%zu size_t Equivalenttoprintf(\"%zu\").1\n%i int Equivalenttoprintf(\"%i\").1\n%x int Equivalenttoprintf(\"%x\").1\n%s constchar* Anull-terminatedCcharacterarray.\n%p constvoid* ThehexrepresentationofaCpointer. Mostlyequivalentto\nprintf(\"%p\")exceptthatitisguaranteedtostartwiththe\nliteral0xregardlessofwhattheplatform\u2019sprintfyields.\nAnunrecognizedformatcharactercausesalltherestoftheformatstringtobecopiedas-istotheresultobject,\nandanyextraargumentsdiscarded.\n1Forintegerspecifiers(d,u,ld,lu,zd,zu,i,x):the0-conversionflaghaseffectevenwhenaprecisionisgiven.\n134 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyBytes_FromFormatV(constchar*format,va_listvargs)\nReturn value: New reference. Part of the Stable ABI. Identical to PyBytes_FromFormat() except that it\ntakesexactlytwoarguments.\nPyObject*PyBytes_FromObject(PyObject*o)\nReturnvalue:Newreference. PartoftheStableABI.Returnthebytesrepresentationofobjectothatimplements\nthebufferprotocol.\nPy_ssize_tPyBytes_Size(PyObject*o)\nPartoftheStableABI.Returnthelengthofthebytesinbytesobjecto.\nPy_ssize_tPyBytes_GET_SIZE(PyObject*o)\nSimilartoPyBytes_Size(),butwithouterrorchecking.\nchar*PyBytes_AsString(PyObject*o)\nPart of the Stable ABI. Return a pointer to the contents of o. The pointer refers to the internal buffer of o,\nwhichconsistsoflen(o) + 1bytes. Thelastbyteinthebufferisalwaysnull, regardlessofwhetherthere\nareanyothernullbytes. Thedatamustnotbemodifiedinanyway,unlesstheobjectwasjustcreatedusing\nPyBytes_FromStringAndSize(NULL, size). Itmustnotbedeallocated. Ifoisnotabytesobjectatall,\nPyBytes_AsString()returnsNULLandraisesTypeError.\nchar*PyBytes_AS_STRING(PyObject*string)\nSimilartoPyBytes_AsString(),butwithouterrorchecking.\nintPyBytes_AsStringAndSize(PyObject*obj,char**buffer,Py_ssize_t*length)\nPartoftheStableABI.Returnthenull-terminatedcontentsoftheobjectobjthroughtheoutputvariablesbuffer\nandlength. Returns0onsuccess.\nIflengthisNULL,thebytesobjectmaynotcontainembeddednullbytes;ifitdoes,thefunctionreturns-1and\naValueErrorisraised.\nThe buffer refers to an internal buffer of obj, which includes an additional null byte at the end (not\ncounted in length). The data must not be modified in any way, unless the object was just created using\nPyBytes_FromStringAndSize(NULL, size). It must not be deallocated. If obj is not a bytes object\natall,PyBytes_AsStringAndSize()returns-1andraisesTypeError.\nChangedinversion3.5: Previously,TypeErrorwasraisedwhenembeddednullbyteswereencounteredin\nthebytesobject.\nvoidPyBytes_Concat(PyObject**bytes,PyObject*newpart)\nPartofthe StableABI.Createanewbytesobjectin*bytes containingthecontentsofnewpart appendedto\nbytes;thecallerwillownthenewreference. Thereferencetotheoldvalueofbyteswillbestolen. Ifthenew\nobjectcannotbecreated,theoldreferencetobyteswillstillbediscardedandthevalueof*byteswillbesetto\nNULL;theappropriateexceptionwillbeset.\nvoidPyBytes_ConcatAndDel(PyObject**bytes,PyObject*newpart)\nPartofthe StableABI.Createanewbytesobjectin*bytes containingthecontentsofnewpart appendedto\nbytes. Thisversionreleasesthestrongreferencetonewpart(i.e. decrementsitsreferencecount).\nint_PyBytes_Resize(PyObject**bytes,Py_ssize_tnewsize)\nResizeabytesobject. newsizewillbethenewlengthofthebytesobject. Youcanthinkofitascreatinganew\nbytesobjectanddestroyingtheoldone,onlymoreefficiently. Passtheaddressofanexistingbytesobjectas\nanlvalue(itmaybewritteninto),andthenewsizedesired. Onsuccess,*bytesholdstheresizedbytesobject\nand0isreturned; theaddressin*bytesmaydifferfromitsinputvalue. Ifthereallocationfails, theoriginal\nbytesobjectat*bytesisdeallocated,*bytesissettoNULL,MemoryErrorisset,and-1isreturned.\n8.3.2 Byte Array Objects\ntypePyByteArrayObject\nThissubtypeofPyObjectrepresentsaPythonbytearrayobject.\n8.3. SequenceObjects 135\nThePython/CAPI,Release3.13.3\nPyTypeObjectPyByteArray_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythonbytearraytype;itisthesame\nobjectasbytearrayinthePythonlayer.\nTypecheckmacros\nintPyByteArray_Check(PyObject*o)\nReturntrueiftheobjectoisabytearrayobjectoraninstanceofasubtypeofthebytearraytype. Thisfunction\nalwayssucceeds.\nintPyByteArray_CheckExact(PyObject*o)\nReturntrueiftheobjectoisabytearrayobject,butnotaninstanceofasubtypeofthebytearraytype. This\nfunctionalwayssucceeds.\nDirectAPIfunctions\nPyObject*PyByteArray_FromObject(PyObject*o)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewbytearrayobjectfromanyobject,o,that\nimplementsthebufferprotocol.\nOnfailure,returnNULLwithanexceptionset.\nPyObject*PyByteArray_FromStringAndSize(constchar*string,Py_ssize_tlen)\nReturnvalue: Newreference. PartoftheStableABI.Createanewbytearrayobjectfromstringanditslength,\nlen.\nOnfailure,returnNULLwithanexceptionset.\nPyObject*PyByteArray_Concat(PyObject*a,PyObject*b)\nReturnvalue: Newreference. Partofthe StableABI. Concatbytearrays a and b andreturnanewbytearray\nwiththeresult.\nOnfailure,returnNULLwithanexceptionset.\nPy_ssize_tPyByteArray_Size(PyObject*bytearray)\nPartoftheStableABI.ReturnthesizeofbytearrayaftercheckingforaNULLpointer.\nchar*PyByteArray_AsString(PyObject*bytearray)\nPartoftheStableABI.ReturnthecontentsofbytearrayasachararrayaftercheckingforaNULLpointer. The\nreturnedarrayalwayshasanextranullbyteappended.\nintPyByteArray_Resize(PyObject*bytearray,Py_ssize_tlen)\nPartoftheStableABI.Resizetheinternalbufferofbytearraytolen.\nMacros\nThesemacrostradesafetyforspeedandtheydon\u2019tcheckpointers.\nchar*PyByteArray_AS_STRING(PyObject*bytearray)\nSimilartoPyByteArray_AsString(),butwithouterrorchecking.\nPy_ssize_tPyByteArray_GET_SIZE(PyObject*bytearray)\nSimilartoPyByteArray_Size(),butwithouterrorchecking.\n8.3.3 Unicode Objects and Codecs\nUnicodeObjects\nSincetheimplementationofPEP393inPython3.3,Unicodeobjectsinternallyuseavarietyofrepresentations,in\nordertoallowhandlingthecompleterangeofUnicodecharacterswhilestayingmemoryefficient. Therearespecial\ncasesforstringswhereallcodepointsarebelow128,256,or65536;otherwise,codepointsmustbebelow1114112\n(whichisthefullUnicoderange).\n136 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nUTF-8representationiscreatedondemandandcachedintheUnicodeobject.\n(cid:174) Note\nThePy_UNICODErepresentationhasbeenremovedsincePython3.12withdeprecatedAPIs. SeePEP623for\nmoreinformation.\nUnicodeType\nThesearethebasicUnicodeobjecttypesusedfortheUnicodeimplementationinPython:\ntypePy_UCS4\ntypePy_UCS2\ntypePy_UCS1\nPartoftheStableABI.Thesetypesaretypedefsforunsignedintegertypeswideenoughtocontaincharacters\nof32bits,16bitsand8bits,respectively. WhendealingwithsingleUnicodecharacters,usePy_UCS4.\nAddedinversion3.3.\ntypePy_UNICODE\nThisisatypedefofwchar_t,whichisa16-bittypeor32-bittypedependingontheplatform.\nChangedinversion3.3: Inpreviousversions,thiswasa16-bittypeora32-bittypedependingonwhetheryou\nselecteda\u201cnarrow\u201dor\u201cwide\u201dUnicodeversionofPythonatbuildtime.\nDeprecatedsinceversion3.13,willberemovedinversion3.15.\ntypePyASCIIObject\ntypePyCompactUnicodeObject\ntypePyUnicodeObject\nThesesubtypesofPyObjectrepresentaPythonUnicodeobject. Inalmostallcases,theyshouldn\u2019tbeused\ndirectly,sinceallAPIfunctionsthatdealwithUnicodeobjectstakeandreturnPyObjectpointers.\nAddedinversion3.3.\nPyTypeObjectPyUnicode_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythonUnicodetype. Itisexposedto\nPythoncodeasstr.\nThefollowingAPIsareCmacrosandstaticinlinedfunctionsforfastchecksandaccesstointernalread-onlydataof\nUnicodeobjects:\nintPyUnicode_Check(PyObject*obj)\nReturntrue iftheobject obj isa UnicodeobjectoraninstanceofaUnicodesubtype. Thisfunctionalways\nsucceeds.\nintPyUnicode_CheckExact(PyObject*obj)\nReturn true if the object obj is a Unicode object, but not an instance of a subtype. This function always\nsucceeds.\nintPyUnicode_READY(PyObject*unicode)\nReturns0. ThisAPIiskeptonlyforbackwardcompatibility.\nAddedinversion3.3.\nDeprecatedsinceversion3.10: ThisAPIdoesnothingsincePython3.12.\nPy_ssize_tPyUnicode_GET_LENGTH(PyObject*unicode)\nReturnthelengthoftheUnicodestring,incodepoints. unicodehastobeaUnicodeobjectinthe\u201ccanonical\u201d\nrepresentation(notchecked).\nAddedinversion3.3.\n8.3. SequenceObjects 137\nThePython/CAPI,Release3.13.3\nPy_UCS1*PyUnicode_1BYTE_DATA(PyObject*unicode)\nPy_UCS2*PyUnicode_2BYTE_DATA(PyObject*unicode)\nPy_UCS4*PyUnicode_4BYTE_DATA(PyObject*unicode)\nReturnapointertothecanonicalrepresentationcasttoUCS1,UCS2orUCS4integertypesfordirectchar-\nacter access. No checks are performed if the canonical representation has the correct character size; use\nPyUnicode_KIND()toselecttherightfunction.\nAddedinversion3.3.\nPyUnicode_1BYTE_KIND\nPyUnicode_2BYTE_KIND\nPyUnicode_4BYTE_KIND\nReturnvaluesofthePyUnicode_KIND()macro.\nAddedinversion3.3.\nChangedinversion3.12: PyUnicode_WCHAR_KINDhasbeenremoved.\nintPyUnicode_KIND(PyObject*unicode)\nReturn one of the PyUnicode kind constants (see above) that indicate how many bytes per character this\nUnicodeobjectusestostoreitsdata. unicodehastobeaUnicodeobjectinthe\u201ccanonical\u201drepresentation(not\nchecked).\nAddedinversion3.3.\nvoid*PyUnicode_DATA(PyObject*unicode)\nReturnavoidpointertotherawUnicodebuffer. unicodehastobeaUnicodeobjectinthe\u201ccanonical\u201drepre-\nsentation(notchecked).\nAddedinversion3.3.\nvoidPyUnicode_WRITE(intkind,void*data,Py_ssize_tindex,Py_UCS4value)\nWriteintoacanonicalrepresentationdata(asobtainedwithPyUnicode_DATA()). Thisfunctionperforms\nnosanitychecks,andisintendedforusageinloops. Thecallershouldcachethekind valueanddatapointer\nasobtainedfromothercalls. indexistheindexinthestring(startsat0)andvalueisthenewcodepointvalue\nwhichshouldbewrittentothatlocation.\nAddedinversion3.3.\nPy_UCS4PyUnicode_READ(intkind,void*data,Py_ssize_tindex)\nReadacodepointfromacanonicalrepresentationdata(asobtainedwithPyUnicode_DATA()). Nochecks\norreadycallsareperformed.\nAddedinversion3.3.\nPy_UCS4PyUnicode_READ_CHAR(PyObject*unicode,Py_ssize_tindex)\nReadacharacterfromaUnicodeobjectunicode,whichmustbeinthe\u201ccanonical\u201drepresentation. Thisisless\nefficientthanPyUnicode_READ()ifyoudomultipleconsecutivereads.\nAddedinversion3.3.\nPy_UCS4PyUnicode_MAX_CHAR_VALUE(PyObject*unicode)\nReturnthemaximumcodepointthatissuitableforcreatinganotherstringbasedonunicode,whichmustbe\ninthe\u201ccanonical\u201drepresentation. Thisisalwaysanapproximationbutmoreefficientthaniteratingoverthe\nstring.\nAddedinversion3.3.\nintPyUnicode_IsIdentifier(PyObject*unicode)\nPartoftheStableABI.Return1ifthestringisavalididentifieraccordingtothelanguagedefinition,section\nidentifiers. Return0otherwise.\nChangedinversion3.9: ThefunctiondoesnotcallPy_FatalError()anymoreifthestringisnotready.\n138 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nUnicodeCharacterProperties\nUnicodeprovidesmanydifferentcharacterproperties. Themostoftenneededonesareavailablethroughthesemacros\nwhicharemappedtoCfunctionsdependingonthePythonconfiguration.\nintPy_UNICODE_ISSPACE(Py_UCS4ch)\nReturn1or0dependingonwhetherchisawhitespacecharacter.\nintPy_UNICODE_ISLOWER(Py_UCS4ch)\nReturn1or0dependingonwhetherchisalowercasecharacter.\nintPy_UNICODE_ISUPPER(Py_UCS4ch)\nReturn1or0dependingonwhetherchisanuppercasecharacter.\nintPy_UNICODE_ISTITLE(Py_UCS4ch)\nReturn1or0dependingonwhetherchisatitlecasecharacter.\nintPy_UNICODE_ISLINEBREAK(Py_UCS4ch)\nReturn1or0dependingonwhetherchisalinebreakcharacter.\nintPy_UNICODE_ISDECIMAL(Py_UCS4ch)\nReturn1or0dependingonwhetherchisadecimalcharacter.\nintPy_UNICODE_ISDIGIT(Py_UCS4ch)\nReturn1or0dependingonwhetherchisadigitcharacter.\nintPy_UNICODE_ISNUMERIC(Py_UCS4ch)\nReturn1or0dependingonwhetherchisanumericcharacter.\nintPy_UNICODE_ISALPHA(Py_UCS4ch)\nReturn1or0dependingonwhetherchisanalphabeticcharacter.\nintPy_UNICODE_ISALNUM(Py_UCS4ch)\nReturn1or0dependingonwhetherchisanalphanumericcharacter.\nintPy_UNICODE_ISPRINTABLE(Py_UCS4ch)\nReturn1or0dependingonwhetherchisaprintablecharacter,inthesenseofstr.isprintable().\nTheseAPIscanbeusedforfastdirectcharacterconversions:\nPy_UCS4Py_UNICODE_TOLOWER(Py_UCS4ch)\nReturnthecharacterchconvertedtolowercase.\nPy_UCS4Py_UNICODE_TOUPPER(Py_UCS4ch)\nReturnthecharacterchconvertedtouppercase.\nPy_UCS4Py_UNICODE_TOTITLE(Py_UCS4ch)\nReturnthecharacterchconvertedtotitlecase.\nintPy_UNICODE_TODECIMAL(Py_UCS4ch)\nReturnthecharacterchconvertedtoadecimalpositiveinteger. Return-1ifthisisnotpossible. Thisfunction\ndoesnotraiseexceptions.\nintPy_UNICODE_TODIGIT(Py_UCS4ch)\nReturnthecharacterchconvertedtoasingledigitinteger. Return-1ifthisisnotpossible. Thisfunctiondoes\nnotraiseexceptions.\ndoublePy_UNICODE_TONUMERIC(Py_UCS4ch)\nReturnthecharacterchconvertedtoadouble. Return-1.0ifthisisnotpossible. Thisfunctiondoesnotraise\nexceptions.\nTheseAPIscanbeusedtoworkwithsurrogates:\n8.3. SequenceObjects 139\nThePython/CAPI,Release3.13.3\nintPy_UNICODE_IS_SURROGATE(Py_UCS4ch)\nCheckifchisasurrogate(0xD800 <= ch <= 0xDFFF).\nintPy_UNICODE_IS_HIGH_SURROGATE(Py_UCS4ch)\nCheckifchisahighsurrogate(0xD800 <= ch <= 0xDBFF).\nintPy_UNICODE_IS_LOW_SURROGATE(Py_UCS4ch)\nCheckifchisalowsurrogate(0xDC00 <= ch <= 0xDFFF).\nPy_UCS4Py_UNICODE_JOIN_SURROGATES(Py_UCS4high,Py_UCS4low)\nJointwosurrogatecodepointsandreturnasinglePy_UCS4value. highandlowarerespectivelytheleading\nandtrailingsurrogatesinasurrogatepair. highmustbeintherange[0xD800;0xDBFF]andlowmustbein\ntherange[0xDC00;0xDFFF].\nCreatingandaccessingUnicodestrings\nTocreateUnicodeobjectsandaccesstheirbasicsequenceproperties,usetheseAPIs:\nPyObject*PyUnicode_New(Py_ssize_tsize,Py_UCS4maxchar)\nReturnvalue: Newreference. CreateanewUnicodeobject. maxcharshouldbethetruemaximumcodepoint\ntobeplacedinthestring. Asanapproximation,itcanberoundeduptothenearestvalueinthesequence127,\n255,65535,1114111.\nThisistherecommendedwaytoallocateanewUnicodeobject. Objectscreatedusingthisfunctionarenot\nresizable.\nOnerror,setanexceptionandreturnNULL.\nAddedinversion3.3.\nPyObject*PyUnicode_FromKindAndData(intkind,constvoid*buffer,Py_ssize_tsize)\nReturn value: New reference. Create a new Unicode object with the given kind (possible values are\nPyUnicode_1BYTE_KIND etc., as returned by PyUnicode_KIND()). The buffer must point to an array\nofsizeunitsof1,2or4bytespercharacter,asgivenbythekind.\nIfnecessary,theinputbufferiscopiedandtransformedintothecanonicalrepresentation. Forexample,ifthe\nbufferisaUCS4string(PyUnicode_4BYTE_KIND)anditconsistsonlyofcodepointsintheUCS1range,it\nwillbetransformedintoUCS1(PyUnicode_1BYTE_KIND).\nAddedinversion3.3.\nPyObject*PyUnicode_FromStringAndSize(constchar*str,Py_ssize_tsize)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectfromthecharbufferstr. The\nbyteswillbeinterpretedasbeingUTF-8encoded. Thebufferiscopiedintothenewobject. Thereturnvalue\nmightbeasharedobject,i.e. modificationofthedataisnotallowed.\nThisfunctionraisesSystemErrorwhen:\n\u2022 size<0,\n\u2022 strisNULLandsize>0\nChangedinversion3.12: str==NULLwithsize>0isnotallowedanymore.\nPyObject*PyUnicode_FromString(constchar*str)\nReturn value: New reference. Part of the Stable ABI. Create a Unicode object from a UTF-8 encoded null-\nterminatedcharbufferstr.\nPyObject*PyUnicode_FromFormat(constchar*format,...)\nReturnvalue: Newreference. PartoftheStableABI.TakeaCprintf()-styleformat stringandavariable\nnumber of arguments, calculate the size of the resulting Python Unicode string and return a string with the\nvaluesformattedintoit. ThevariableargumentsmustbeCtypesandmustcorrespondexactlytotheformat\ncharactersintheformatASCII-encodedstring.\n140 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nAconversionspecifiercontainstwoormorecharactersandhasthefollowingcomponents,whichmustoccur\ninthisorder:\n1. The'%'character,whichmarksthestartofthespecifier.\n2. Conversionflags(optional),whichaffecttheresultofsomeconversiontypes.\n3. Minimumfieldwidth(optional). Ifspecifiedasan'*'(asterisk),theactualwidthisgiveninthenext\nargument, whichmustbeoftypeint, andtheobjecttoconvertcomesaftertheminimumfieldwidth\nandoptionalprecision.\n4. Precision (optional), given as a '.' (dot) followed by the precision. If specified as '*' (an asterisk),\ntheactualprecisionisgiveninthenextargument,whichmustbeoftypeint,andthevaluetoconvert\ncomesaftertheprecision.\n5. Lengthmodifier(optional).\n6. Conversiontype.\nTheconversionflagcharactersare:\nFlag Meaning\n0 Theconversionwillbezeropaddedfornumericvalues.\n- Theconvertedvalueisleftadjusted(overridesthe0flagifbotharegiven).\nThelengthmodifiersforfollowingintegerconversions(d, i, o, u, x, orX)specifythetypeoftheargument\n(intbydefault):\nModifier Types\nl longorunsigned long\nll long longorunsigned long long\nj intmax_toruintmax_t\nz size_torssize_t\nt ptrdiff_t\nThe length modifier l for following conversions s or V specify that the type of the argument is const\nwchar_t*.\nTheconversionspecifiersare:\n8.3. SequenceObjects 141\nThePython/CAPI,Release3.13.3\nCon- Type Comment\nversion\nSpeci-\nfier\n% n/a Theliteral%character.\nd,i Specified by the ThedecimalrepresentationofasignedCinteger.\nlengthmodifier\nu Specified by the ThedecimalrepresentationofanunsignedCinteger.\nlengthmodifier\no Specified by the TheoctalrepresentationofanunsignedCinteger.\nlengthmodifier\nx Specified by the ThehexadecimalrepresentationofanunsignedCinteger(lowercase).\nlengthmodifier\nX Specified by the ThehexadecimalrepresentationofanunsignedCinteger(uppercase).\nlengthmodifier\nc int Asinglecharacter.\ns const char* or Anull-terminatedCcharacterarray.\nconst wchar_t*\np const void* The hex representation of a C pointer. Mostly equivalent to\nprintf(\"%p\")exceptthatitisguaranteedtostartwiththeliteral0x\nregardlessofwhattheplatform\u2019sprintfyields.\nA PyObject* Theresultofcallingascii().\nU PyObject* AUnicodeobject.\nV PyObject*, AUnicodeobject(whichmaybeNULL)andanull-terminatedCchar-\nconst char* or acter array as a second parameter (which will be used, if the first pa-\nconst wchar_t* rameterisNULL).\nS PyObject* TheresultofcallingPyObject_Str().\nR PyObject* TheresultofcallingPyObject_Repr().\nT PyObject* Get the fully qualified name of an object type; call\nPyType_GetFullyQualifiedName().\n#T PyObject* SimilartoTformat,butuseacolon(:)asseparatorbetweenthemodule\nnameandthequalifiedname.\nN PyTypeObject* Get the fully qualified name of a type; call\nPyType_GetFullyQualifiedName().\n#N PyTypeObject* SimilartoNformat,butuseacolon(:)asseparatorbetweenthemodule\nnameandthequalifiedname.\n(cid:174) Note\nThewidthformatterunitisnumberofcharactersratherthanbytes. Theprecisionformatterunitisnumber\nof bytes or wchar_t items (if the length modifier l is used) for \"%s\" and \"%V\" (if the PyObject*\nargumentisNULL),andanumberofcharactersfor\"%A\",\"%U\",\"%S\",\"%R\"and\"%V\"(ifthePyObject*\nargumentisnotNULL).\n(cid:174) Note\nUnliketoCprintf()the0flaghaseffectevenwhenaprecisionisgivenforintegerconversions(d,i,u,\no,x,orX).\nChangedinversion3.2: Supportfor\"%lld\"and\"%llu\"added.\nChangedinversion3.3: Supportfor\"%li\",\"%lli\"and\"%zi\"added.\nChanged in version 3.4: Support width and precision formatter for \"%s\", \"%A\", \"%U\", \"%V\", \"%S\", \"%R\"\n142 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nadded.\nChanged in version 3.12: Support for conversion specifiers o and X. Support for length modifiers j and t.\nLengthmodifiersarenowappliedtoallintegerconversions. Lengthmodifierlisnowappliedtoconversion\nspecifierssandV.Supportforvariablewidthandprecision*. Supportforflag-.\nAnunrecognizedformatcharacternowsetsaSystemError. Inpreviousversionsitcausedalltherestofthe\nformatstringtobecopiedas-istotheresultstring,andanyextraargumentsdiscarded.\nChangedinversion3.13: Supportfor%T,%#T,%Nand%#Nformatsadded.\nPyObject*PyUnicode_FromFormatV(constchar*format,va_listvargs)\nReturnvalue: Newreference. PartoftheStableABI.IdenticaltoPyUnicode_FromFormat()exceptthatit\ntakesexactlytwoarguments.\nPyObject*PyUnicode_FromObject(PyObject*obj)\nReturn value: New reference. Part of the Stable ABI. Copy an instance of a Unicode subtype to a new true\nUnicodeobjectifnecessary. IfobjisalreadyatrueUnicodeobject(notasubtype),returnanewstrongreference\ntotheobject.\nObjectsotherthanUnicodeoritssubtypeswillcauseaTypeError.\nPyObject*PyUnicode_FromOrdinal(intordinal)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeObjectfromthegivenUnicodecode\npointordinal.\nTheordinalmustbeinrange(0x110000). AValueErrorisraisedinthecaseitisnot.\nPyObject*PyUnicode_FromEncodedObject(PyObject*obj,constchar*encoding,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.DecodeanencodedobjectobjtoaUnicodeobject.\nbytes, bytearray and other bytes-like objects are decoded according to the given encoding and using the\nerrorhandlingdefinedbyerrors. BothcanbeNULLtohavetheinterfaceusethedefaultvalues(seeBuilt-in\nCodecsfordetails).\nAllotherobjects,includingUnicodeobjects,causeaTypeErrortobeset.\nTheAPIreturnsNULLiftherewasanerror. Thecallerisresponsiblefordecref\u2019ingthereturnedobjects.\nconstchar*PyUnicode_GetDefaultEncoding(void)\nPart of the Stable ABI. Return the name of the default string encoding, \"utf-8\". See sys.\ngetdefaultencoding().\nThereturnedstringdoesnotneedtobefreed,andisvaliduntilinterpretershutdown.\nPy_ssize_tPyUnicode_GetLength(PyObject*unicode)\nPartoftheStableABIsinceversion3.7. ReturnthelengthoftheUnicodeobject,incodepoints.\nOnerror,setanexceptionandreturn-1.\nAddedinversion3.3.\nPy_ssize_tPyUnicode_CopyCharacters(PyObject*to,Py_ssize_tto_start,PyObject*from,Py_ssize_t\nfrom_start,Py_ssize_thow_many)\nCopy characters from one Unicode object into another. This function performs character conversion when\nnecessaryandfallsbacktomemcpy()ifpossible. Returns-1andsetsanexceptiononerror,otherwisereturns\nthenumberofcopiedcharacters.\nAddedinversion3.3.\nPy_ssize_tPyUnicode_Fill(PyObject*unicode,Py_ssize_tstart,Py_ssize_tlength,Py_UCS4fill_char)\nFillastringwithacharacter: writefill_charintounicode[start:start+length].\nFailiffill_charisbiggerthanthestringmaximumcharacter,orifthestringhasmorethan1reference.\nReturnthenumberofwrittencharacter,orreturn-1andraiseanexceptiononerror.\nAddedinversion3.3.\n8.3. SequenceObjects 143\nThePython/CAPI,Release3.13.3\nintPyUnicode_WriteChar(PyObject*unicode,Py_ssize_tindex,Py_UCS4character)\nPart of the Stable ABI since version 3.7. Write a character to a string. The string must have been created\nthrough PyUnicode_New(). Since Unicode strings are supposed to be immutable, the string must not be\nshared,orhavebeenhashedyet.\nThisfunctionchecksthatunicodeisaUnicodeobject,thattheindexisnotoutofbounds,andthattheobject\ncanbemodifiedsafely(i.e. thatititsreferencecountisone).\nReturn0onsuccess,-1onerrorwithanexceptionset.\nAddedinversion3.3.\nPy_UCS4PyUnicode_ReadChar(PyObject*unicode,Py_ssize_tindex)\nPartoftheStableABIsinceversion3.7. Readacharacterfromastring. Thisfunctionchecksthatunicodeisa\nUnicodeobjectandtheindexisnotoutofbounds,incontrasttoPyUnicode_READ_CHAR(),whichperforms\nnoerrorchecking.\nReturncharacteronsuccess,-1onerrorwithanexceptionset.\nAddedinversion3.3.\nPyObject*PyUnicode_Substring(PyObject*unicode,Py_ssize_tstart,Py_ssize_tend)\nReturn value: New reference. Part of the Stable ABI since version 3.7. Return a substring of unicode, from\ncharacter index start (included) to character index end (excluded). Negative indices are not supported. On\nerror,setanexceptionandreturnNULL.\nAddedinversion3.3.\nPy_UCS4*PyUnicode_AsUCS4(PyObject*unicode,Py_UCS4*buffer,Py_ssize_tbuflen,intcopy_null)\nPartoftheStableABIsinceversion3.7. CopythestringunicodeintoaUCS4buffer,includinganullcharacter,\nif copy_null isset. Returns NULL andsetsan exceptiononerror(inparticular, a SystemError ifbuflen is\nsmallerthanthelengthofunicode). bufferisreturnedonsuccess.\nAddedinversion3.3.\nPy_UCS4*PyUnicode_AsUCS4Copy(PyObject*unicode)\nPartoftheStableABIsinceversion3.7. CopythestringunicodeintoanewUCS4bufferthatisallocatedusing\nPyMem_Malloc(). Ifthisfails,NULLisreturnedwithaMemoryErrorset. Thereturnedbufferalwayshas\nanextranullcodepointappended.\nAddedinversion3.3.\nLocaleEncoding\nThecurrentlocaleencodingcanbeusedtodecodetextfromtheoperatingsystem.\nPyObject*PyUnicode_DecodeLocaleAndSize(constchar*str,Py_ssize_tlength,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.7. DecodeastringfromUTF-8onAndroid\nand VxWorks, or from the current locale encoding on other platforms. The supported error handlers are\n\"strict\" and \"surrogateescape\" (PEP 383). The decoder uses \"strict\" error handler if errors is\nNULL.strmustendwithanullcharacterbutcannotcontainembeddednullcharacters.\nUsePyUnicode_DecodeFSDefaultAndSize()todecodeastringfromthefilesystemencodinganderror\nhandler.\nThisfunctionignoresthePythonUTF-8Mode.\n(cid:181) Seealso\nThePy_DecodeLocale()function.\nAddedinversion3.3.\n144 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nChangedinversion3.7: Thefunctionnowalsousesthecurrentlocaleencodingforthesurrogateescape\nerrorhandler,exceptonAndroid. Previously,Py_DecodeLocale()wasusedforthesurrogateescape,\nandthecurrentlocaleencodingwasusedforstrict.\nPyObject*PyUnicode_DecodeLocale(constchar*str,constchar*errors)\nReturn value: New reference. Part of the Stable ABI since version 3.7. Similar to\nPyUnicode_DecodeLocaleAndSize(),butcomputethestringlengthusingstrlen().\nAddedinversion3.3.\nPyObject*PyUnicode_EncodeLocale(PyObject*unicode,constchar*errors)\nReturn value: New reference. Part of the Stable ABI since version 3.7. Encode a Unicode object to UTF-8\nonAndroidandVxWorks,ortothecurrentlocaleencodingonotherplatforms. Thesupportederrorhandlers\nare\"strict\"and\"surrogateescape\"(PEP383). Theencoderuses\"strict\"errorhandleriferrors\nisNULL.Returnabytesobject. unicodecannotcontainembeddednullcharacters.\nUsePyUnicode_EncodeFSDefault()toencodeastringtothefilesystemencodinganderrorhandler.\nThisfunctionignoresthePythonUTF-8Mode.\n(cid:181) Seealso\nThePy_EncodeLocale()function.\nAddedinversion3.3.\nChangedinversion3.7: Thefunctionnowalsousesthecurrentlocaleencodingforthesurrogateescape\nerrorhandler,exceptonAndroid. Previously,Py_EncodeLocale()wasusedforthesurrogateescape,\nandthecurrentlocaleencodingwasusedforstrict.\nFileSystemEncoding\nFunctionsencodingtoanddecodingfromthefilesystemencodinganderrorhandler(PEP383andPEP529).\nTo encode file names to bytes during argument parsing, the \"O&\" converter should be used, passing\nPyUnicode_FSConverter()astheconversionfunction:\nintPyUnicode_FSConverter(PyObject*obj,void*result)\nPartoftheStableABI.PyArg_Parse*converter: encodestrobjects\u2013obtaineddirectlyorthroughtheos.\nPathLikeinterface\u2013tobytesusingPyUnicode_EncodeFSDefault();bytesobjectsareoutputas-is.\nresult must be an address of a C variable of type PyObject* (or PyBytesObject*). On success, set the\nvariabletoanewstrongreferencetoabytesobjectwhichmustbereleasedwhenitisnolongerusedandreturn\nanon-zerovalue(Py_CLEANUP_SUPPORTED).Embeddednullbytesarenotallowedintheresult. Onfailure,\nreturn0withanexceptionset.\nIfobjisNULL,thefunctionreleasesastrongreferencestoredinthevariablereferredbyresultandreturns1.\nAddedinversion3.1.\nChangedinversion3.6: Acceptsapath-likeobject.\nTo decode file names to str during argument parsing, the \"O&\" converter should be used, passing\nPyUnicode_FSDecoder()astheconversionfunction:\nintPyUnicode_FSDecoder(PyObject*obj,void*result)\nPartoftheStableABI.PyArg_Parse*converter: decodebytesobjects\u2013obtainedeitherdirectlyorindirectly\nthroughtheos.PathLikeinterface\u2013tostrusingPyUnicode_DecodeFSDefaultAndSize();strob-\njectsareoutputas-is. resultmustbeanaddressofaCvariableoftypePyObject*(orPyUnicodeObject*).\nOn success, set the variable to a new strong reference to a Unicode object whichmust be released when it is\nnolongerusedandreturnanon-zerovalue(Py_CLEANUP_SUPPORTED).Embeddednullcharactersarenot\nallowedintheresult. Onfailure,return0withanexceptionset.\nIfobjisNULL,releasethestrongreferencetotheobjectreferredtobyresultandreturn1.\n8.3. SequenceObjects 145\nThePython/CAPI,Release3.13.3\nAddedinversion3.2.\nChangedinversion3.6: Acceptsapath-likeobject.\nPyObject*PyUnicode_DecodeFSDefaultAndSize(constchar*str,Py_ssize_tsize)\nReturnvalue: Newreference. PartoftheStableABI.Decodeastringfromthefilesystemencodinganderror\nhandler.\nIfyouneedtodecodeastringfromthecurrentlocaleencoding,usePyUnicode_DecodeLocaleAndSize().\n(cid:181) Seealso\nThePy_DecodeLocale()function.\nChangedinversion3.6: Thefilesystemerrorhandlerisnowused.\nPyObject*PyUnicode_DecodeFSDefault(constchar*str)\nReturn value: New reference. Part of the Stable ABI. Decode a null-terminated string from the filesystem\nencodinganderrorhandler.\nIfthestringlengthisknown,usePyUnicode_DecodeFSDefaultAndSize().\nChangedinversion3.6: Thefilesystemerrorhandlerisnowused.\nPyObject*PyUnicode_EncodeFSDefault(PyObject*unicode)\nReturnvalue: Newreference. PartoftheStableABI.EncodeaUnicodeobjecttothefilesystemencodingand\nerrorhandler,andreturnbytes. Notethattheresultingbytesobjectcancontainnullbytes.\nIfyouneedtoencodeastringtothecurrentlocaleencoding,usePyUnicode_EncodeLocale().\n(cid:181) Seealso\nThePy_EncodeLocale()function.\nAddedinversion3.2.\nChangedinversion3.6: Thefilesystemerrorhandlerisnowused.\nwchar_tSupport\nwchar_tsupportforplatformswhichsupportit:\nPyObject*PyUnicode_FromWideChar(constwchar_t*wstr,Py_ssize_tsize)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectfromthewchar_tbufferwstrof\nthegivensize. Passing-1asthesizeindicatesthatthefunctionmustitselfcomputethelength,usingwcslen().\nReturnNULLonfailure.\nPy_ssize_tPyUnicode_AsWideChar(PyObject*unicode,wchar_t*wstr,Py_ssize_tsize)\nPartoftheStableABI.CopytheUnicodeobjectcontentsintothewchar_tbufferwstr. Atmostsizewchar_t\ncharactersarecopied(excludingapossiblytrailingnullterminationcharacter). Returnthenumberofwchar_t\ncharacterscopiedor-1incaseofanerror.\nWhenwstrisNULL,insteadreturnthesizethatwouldberequiredtostoreallofunicodeincludingaterminating\nnull.\nNotethattheresultingwchar_t*stringmayormaynotbenull-terminated. Itistheresponsibilityofthecaller\ntomakesurethatthewchar_t*stringisnull-terminatedincasethisisrequiredbytheapplication. Also,note\nthat the wchar_t* string might contain null characters, which would cause the string to be truncated when\nusedwithmostCfunctions.\n146 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nwchar_t*PyUnicode_AsWideCharString(PyObject*unicode,Py_ssize_t*size)\nPartoftheStableABIsinceversion3.7. ConverttheUnicodeobjecttoawidecharacterstring. Theoutput\nstringalwaysendswithanullcharacter. IfsizeisnotNULL,writethenumberofwidecharacters(excluding\nthetrailingnullterminationcharacter)into*size. Notethattheresultingwchar_tstringmightcontainnull\ncharacters,whichwouldcausethestringtobetruncatedwhenusedwithmostCfunctions. IfsizeisNULLand\nthewchar_t*stringcontainsnullcharactersaValueErrorisraised.\nReturnsabufferallocatedbyPyMem_New(usePyMem_Free()tofreeit)onsuccess. Onerror,returnsNULL\nand*sizeisundefined. RaisesaMemoryErrorifmemoryallocationisfailed.\nAddedinversion3.2.\nChangedinversion3.7:RaisesaValueErrorifsizeisNULLandthewchar_t*stringcontainsnullcharacters.\nBuilt-inCodecs\nPythonprovidesasetofbuilt-incodecswhicharewritteninCforspeed. Allofthesecodecsaredirectlyusablevia\nthefollowingfunctions.\nManyofthefollowingAPIstaketwoargumentsencodinganderrors,andtheyhavethesamesemanticsastheones\nofthebuilt-instr()stringobjectconstructor.\nSetting encoding to NULL causes the default encoding to be used which is UTF-8. The file system calls should\nuse PyUnicode_FSConverter() for encoding file names. This uses the filesystem encoding and error handler\ninternally.\nErrorhandling is set by errors whichmay also be set to NULL meaningto use the default handling defined forthe\ncodec. Defaulterrorhandlingforallbuilt-incodecsis\u201cstrict\u201d(ValueErrorisraised).\nThecodecsalluseasimilarinterface. Onlydeviationsfromthefollowinggenericonesaredocumentedforsimplicity.\nGenericCodecs\nThesearethegenericcodecAPIs:\nPyObject*PyUnicode_Decode(constchar*str,Py_ssize_tsize,constchar*encoding,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectbydecodingsizebytesofthe\nencoded string str. encoding and errors have the same meaning as the parameters of the same name in the\nstr()built-infunction. ThecodectobeusedislookedupusingthePythoncodecregistry. ReturnNULLif\nanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_AsEncodedString(PyObject*unicode,constchar*encoding,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.EncodeaUnicodeobjectandreturntheresultasPython\nbytesobject. encodinganderrorshavethesamemeaningastheparametersofthesamenameintheUnicode\nencode()method. ThecodectobeusedislookedupusingthePythoncodecregistry. ReturnNULLifan\nexceptionwasraisedbythecodec.\nUTF-8Codecs\nThesearetheUTF-8codecAPIs:\nPyObject*PyUnicode_DecodeUTF8(constchar*str,Py_ssize_tsize,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectbydecodingsizebytesofthe\nUTF-8encodedstringstr. ReturnNULLifanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_DecodeUTF8Stateful(constchar*str,Py_ssize_tsize,constchar*errors,Py_ssize_t\n*consumed)\nReturn value: New reference. Part of the Stable ABI. If consumed is NULL, behave like\nPyUnicode_DecodeUTF8(). Ifconsumed isnotNULL,trailingincompleteUTF-8bytesequenceswillnot\nbetreatedasanerror. Thosebyteswillnotbedecodedandthenumberofbytesthathavebeendecodedwill\nbestoredinconsumed.\n8.3. SequenceObjects 147\nThePython/CAPI,Release3.13.3\nPyObject*PyUnicode_AsUTF8String(PyObject*unicode)\nReturn value: New reference. Part of the Stable ABI. Encode a Unicode object using UTF-8 and return the\nresultasPythonbytesobject. Errorhandlingis\u201cstrict\u201d. ReturnNULLifanexceptionwasraisedbythecodec.\nThefunctionfailsifthestringcontainssurrogatecodepoints(U+D800-U+DFFF).\nconstchar*PyUnicode_AsUTF8AndSize(PyObject*unicode,Py_ssize_t*size)\nPartoftheStableABIsinceversion3.10. ReturnapointertotheUTF-8encodingoftheUnicodeobject,and\nstorethesizeoftheencodedrepresentation(inbytes)insize. ThesizeargumentcanbeNULL;inthiscaseno\nsizewillbestored. Thereturnedbufferalwayshasanextranullbyteappended(notincludedinsize),regardless\nofwhetherthereareanyothernullcodepoints.\nOnerror,setanexception,setsizeto-1(ifit\u2019snotNULL)andreturnNULL.\nThefunctionfailsifthestringcontainssurrogatecodepoints(U+D800-U+DFFF).\nThiscachestheUTF-8representationofthestringintheUnicodeobject, andsubsequentcallswillreturna\npointertothesamebuffer. Thecallerisnotresponsiblefordeallocatingthebuffer. Thebufferisdeallocated\nandpointerstoitbecomeinvalidwhentheUnicodeobjectisgarbagecollected.\nAddedinversion3.3.\nChangedinversion3.7: Thereturntypeisnowconst char *ratherofchar *.\nChangedinversion3.10: ThisfunctionisapartofthelimitedAPI.\nconstchar*PyUnicode_AsUTF8(PyObject*unicode)\nAsPyUnicode_AsUTF8AndSize(),butdoesnotstorethesize.\n(cid:193) Warning\nThisfunctiondoesnothaveanyspecialbehaviorfornullcharactersembeddedwithinunicode. Asare-\nsult, strings containing null characters will remain in the returned string, which some C functions might\ninterpretastheendofthestring,leadingtotruncation. Iftruncationisanissue,itisrecommendedtouse\nPyUnicode_AsUTF8AndSize()instead.\nAddedinversion3.3.\nChangedinversion3.7: Thereturntypeisnowconst char *ratherofchar *.\nUTF-32Codecs\nThesearetheUTF-32codecAPIs:\nPyObject*PyUnicode_DecodeUTF32(constchar*str,Py_ssize_tsize,constchar*errors,int*byteorder)\nReturnvalue: Newreference. PartoftheStableABI.DecodesizebytesfromaUTF-32encodedbufferstring\nandreturnthecorrespondingUnicodeobject. errors(ifnon-NULL)definestheerrorhandling. Itdefaultsto\n\u201cstrict\u201d.\nIfbyteorderisnon-NULL,thedecoderstartsdecodingusingthegivenbyteorder:\n*byteorder == -1: little endian\n*byteorder == 0: native order\n*byteorder == 1: big endian\nIf*byteorderiszero,andthefirstfourbytesoftheinputdataareabyteordermark(BOM),thedecoder\nswitchestothisbyteorderandtheBOMisnotcopiedintotheresultingUnicodestring. If*byteorderis-1\nor1,anybyteordermarkiscopiedtotheoutput.\nAftercompletion,*byteorderissettothecurrentbyteorderattheendofinputdata.\nIfbyteorderisNULL,thecodecstartsinnativeordermode.\nReturnNULLifanexceptionwasraisedbythecodec.\n148 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyUnicode_DecodeUTF32Stateful(constchar*str,Py_ssize_tsize,constchar*errors,int\n*byteorder,Py_ssize_t*consumed)\nReturn value: New reference. Part of the Stable ABI. If consumed is NULL, behave like\nPyUnicode_DecodeUTF32(). IfconsumedisnotNULL,PyUnicode_DecodeUTF32Stateful()willnot\ntreattrailingincompleteUTF-32bytesequences(suchasanumberofbytesnotdivisiblebyfour)asanerror.\nThosebyteswillnotbedecodedandthenumberofbytesthathavebeendecodedwillbestoredinconsumed.\nPyObject*PyUnicode_AsUTF32String(PyObject*unicode)\nReturnvalue: Newreference. PartoftheStableABI.ReturnaPythonbytestringusingtheUTF-32encoding\ninnativebyteorder. ThestringalwaysstartswithaBOMmark. Errorhandlingis\u201cstrict\u201d. ReturnNULLifan\nexceptionwasraisedbythecodec.\nUTF-16Codecs\nThesearetheUTF-16codecAPIs:\nPyObject*PyUnicode_DecodeUTF16(constchar*str,Py_ssize_tsize,constchar*errors,int*byteorder)\nReturnvalue: Newreference. PartoftheStableABI.DecodesizebytesfromaUTF-16encodedbufferstring\nandreturnthecorrespondingUnicodeobject. errors(ifnon-NULL)definestheerrorhandling. Itdefaultsto\n\u201cstrict\u201d.\nIfbyteorderisnon-NULL,thedecoderstartsdecodingusingthegivenbyteorder:\n*byteorder == -1: little endian\n*byteorder == 0: native order\n*byteorder == 1: big endian\nIf*byteorderiszero,andthefirsttwobytesoftheinputdataareabyteordermark(BOM),thedecoder\nswitchestothisbyteorderandtheBOMisnotcopiedintotheresultingUnicodestring. If*byteorderis\n-1 or 1, any byte order mark is copied to the output (where it will result in either a \\ufeff or a \\ufffe\ncharacter).\nAftercompletion,*byteorderissettothecurrentbyteorderattheendofinputdata.\nIfbyteorderisNULL,thecodecstartsinnativeordermode.\nReturnNULLifanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_DecodeUTF16Stateful(constchar*str,Py_ssize_tsize,constchar*errors,int\n*byteorder,Py_ssize_t*consumed)\nReturn value: New reference. Part of the Stable ABI. If consumed is NULL, behave like\nPyUnicode_DecodeUTF16(). IfconsumedisnotNULL,PyUnicode_DecodeUTF16Stateful()willnot\ntreattrailingincompleteUTF-16bytesequences(suchasanoddnumberofbytesorasplitsurrogatepair)as\nanerror. Thosebyteswillnotbedecodedandthenumberofbytesthathavebeendecodedwillbestoredin\nconsumed.\nPyObject*PyUnicode_AsUTF16String(PyObject*unicode)\nReturnvalue: Newreference. PartoftheStableABI.ReturnaPythonbytestringusingtheUTF-16encoding\ninnativebyteorder. ThestringalwaysstartswithaBOMmark. Errorhandlingis\u201cstrict\u201d. ReturnNULLifan\nexceptionwasraisedbythecodec.\nUTF-7Codecs\nThesearetheUTF-7codecAPIs:\nPyObject*PyUnicode_DecodeUTF7(constchar*str,Py_ssize_tsize,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectbydecodingsizebytesofthe\nUTF-7encodedstringstr. ReturnNULLifanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_DecodeUTF7Stateful(constchar*str,Py_ssize_tsize,constchar*errors,Py_ssize_t\n*consumed)\n8.3. SequenceObjects 149\nThePython/CAPI,Release3.13.3\nReturn value: New reference. Part of the Stable ABI. If consumed is NULL, behave like\nPyUnicode_DecodeUTF7(). If consumed is not NULL, trailing incomplete UTF-7 base-64 sections will\nnotbetreatedasanerror. Thosebyteswillnotbedecodedandthenumberofbytesthathavebeendecoded\nwillbestoredinconsumed.\nUnicode-EscapeCodecs\nThesearethe\u201cUnicodeEscape\u201dcodecAPIs:\nPyObject*PyUnicode_DecodeUnicodeEscape(constchar*str,Py_ssize_tsize,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectbydecodingsizebytesofthe\nUnicode-Escapeencodedstringstr. ReturnNULLifanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_AsUnicodeEscapeString(PyObject*unicode)\nReturn value: New reference. Part of the Stable ABI. Encode a Unicode object using Unicode-Escape and\nreturntheresultasabytesobject. Errorhandlingis\u201cstrict\u201d. ReturnNULLifanexceptionwasraisedbythe\ncodec.\nRaw-Unicode-EscapeCodecs\nThesearethe\u201cRawUnicodeEscape\u201dcodecAPIs:\nPyObject*PyUnicode_DecodeRawUnicodeEscape(constchar*str,Py_ssize_tsize,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectbydecodingsizebytesofthe\nRaw-Unicode-Escapeencodedstringstr. ReturnNULLifanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_AsRawUnicodeEscapeString(PyObject*unicode)\nReturn value: New reference. Part of the Stable ABI. Encode a Unicode object using Raw-Unicode-Escape\nandreturntheresultasabytesobject. Errorhandlingis\u201cstrict\u201d. ReturnNULLifanexceptionwasraisedby\nthecodec.\nLatin-1Codecs\nThesearetheLatin-1codecAPIs: Latin-1correspondstothefirst256Unicodeordinalsandonlytheseareaccepted\nbythecodecsduringencoding.\nPyObject*PyUnicode_DecodeLatin1(constchar*str,Py_ssize_tsize,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectbydecodingsizebytesofthe\nLatin-1encodedstringstr. ReturnNULLifanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_AsLatin1String(PyObject*unicode)\nReturnvalue: Newreference. PartoftheStableABI.EncodeaUnicodeobjectusingLatin-1andreturnthe\nresultasPythonbytesobject. Errorhandlingis\u201cstrict\u201d. ReturnNULLifanexceptionwasraisedbythecodec.\nASCIICodecs\nThesearetheASCIIcodecAPIs. Only7-bitASCIIdataisaccepted. Allothercodesgenerateerrors.\nPyObject*PyUnicode_DecodeASCII(constchar*str,Py_ssize_tsize,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectbydecodingsizebytesofthe\nASCIIencodedstringstr. ReturnNULLifanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_AsASCIIString(PyObject*unicode)\nReturn value: New reference. Part of the Stable ABI. Encode a Unicode object using ASCII and return the\nresultasPythonbytesobject. Errorhandlingis\u201cstrict\u201d. ReturnNULLifanexceptionwasraisedbythecodec.\n150 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nCharacterMapCodecs\nThiscodecisspecialinthatitcanbeusedtoimplementmanydifferentcodecs(andthisisinfactwhatwasdoneto\nobtainmostofthestandardcodecsincludedintheencodingspackage). Thecodecusesmappingstoencodeand\ndecodecharacters. Themappingobjectsprovidedmustsupportthe__getitem__()mappinginterface;dictionaries\nandsequencesworkwell.\nThesearethemappingcodecAPIs:\nPyObject*PyUnicode_DecodeCharmap(constchar*str,Py_ssize_tlength,PyObject*mapping,constchar\n*errors)\nReturnvalue: Newreference. PartoftheStableABI.CreateaUnicodeobjectbydecodingsizebytesofthe\nencodedstringstrusingthegivenmappingobject. ReturnNULLifanexceptionwasraisedbythecodec.\nIfmappingisNULL,Latin-1decodingwillbeapplied. Elsemappingmustmapbytesordinals(integersinthe\nrangefrom0to255)toUnicodestrings,integers(whicharetheninterpretedasUnicodeordinals)orNone.\nUnmappeddatabytes\u2013oneswhichcauseaLookupError,aswellasoneswhichgetmappedtoNone,0xFFFE\nor'\\ufffe',aretreatedasundefinedmappingsandcauseanerror.\nPyObject*PyUnicode_AsCharmapString(PyObject*unicode,PyObject*mapping)\nReturnvalue: Newreference. PartoftheStableABI.EncodeaUnicodeobjectusingthegivenmappingobject\nandreturntheresultasabytesobject. Errorhandlingis\u201cstrict\u201d. ReturnNULLifanexceptionwasraisedby\nthecodec.\nThemappingobjectmustmapUnicodeordinalintegerstobytesobjects,integersintherangefrom0to255\norNone. Unmappedcharacterordinals(oneswhichcauseaLookupError)aswellasmappedtoNoneare\ntreatedas\u201cundefinedmapping\u201dandcauseanerror.\nThefollowingcodecAPIisspecialinthatmapsUnicodetoUnicode.\nPyObject*PyUnicode_Translate(PyObject*unicode,PyObject*table,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABI.Translateastringbyapplyingacharactermappingtable\ntoitandreturntheresultingUnicodeobject. ReturnNULLifanexceptionwasraisedbythecodec.\nThemappingtablemustmapUnicodeordinalintegerstoUnicodeordinalintegersorNone(causingdeletion\nofthecharacter).\nMappingtablesneedonlyprovidethe__getitem__()interface;dictionariesandsequencesworkwell. Un-\nmappedcharacterordinals(oneswhichcauseaLookupError)areleftuntouchedandarecopiedas-is.\nerrorshastheusualmeaningforcodecs. ItmaybeNULLwhichindicatestousethedefaulterrorhandling.\nMBCScodecsforWindows\nThesearetheMBCScodecAPIs. TheyarecurrentlyonlyavailableonWindowsandusetheWin32MBCSconverters\ntoimplementtheconversions. NotethatMBCS(orDBCS)isaclassofencodings,notjustone. Thetargetencoding\nisdefinedbytheusersettingsonthemachinerunningthecodec.\nPyObject*PyUnicode_DecodeMBCS(constchar*str,Py_ssize_tsize,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABIonWindowssinceversion3.7. CreateaUnicodeobject\nbydecodingsizebytesoftheMBCSencodedstringstr. ReturnNULLifanexceptionwasraisedbythecodec.\nPyObject*PyUnicode_DecodeMBCSStateful(constchar*str,Py_ssize_tsize,constchar*errors,Py_ssize_t\n*consumed)\nReturnvalue:Newreference. PartoftheStableABIonWindowssinceversion3.7. IfconsumedisNULL,behave\nlike PyUnicode_DecodeMBCS(). If consumed is not NULL, PyUnicode_DecodeMBCSStateful() will\nnotdecodetrailingleadbyteandthenumberofbytesthathavebeendecodedwillbestoredinconsumed.\nPyObject*PyUnicode_DecodeCodePageStateful(intcode_page,constchar*str,Py_ssize_tsize,constchar\n*errors,Py_ssize_t*consumed)\nReturn value: New reference. Part of the Stable ABI on Windows since version 3.7. Similar to\nPyUnicode_DecodeMBCSStateful(),exceptusesthecodepagespecifiedbycode_page.\n8.3. SequenceObjects 151\nThePython/CAPI,Release3.13.3\nPyObject*PyUnicode_AsMBCSString(PyObject*unicode)\nReturnvalue: Newreference. PartoftheStableABIonWindowssinceversion3.7. EncodeaUnicodeobject\nusing MBCS and return the result as Python bytes object. Error handling is \u201cstrict\u201d. Return NULL if an\nexceptionwasraisedbythecodec.\nPyObject*PyUnicode_EncodeCodePage(intcode_page,PyObject*unicode,constchar*errors)\nReturnvalue: Newreference. PartoftheStableABIonWindowssinceversion3.7. EncodetheUnicodeobject\nusingthespecifiedcodepageandreturnaPythonbytesobject. ReturnNULLifanexceptionwasraisedbythe\ncodec. UseCP_ACPcodepagetogettheMBCSencoder.\nAddedinversion3.3.\nMethods&Slots\nMethodsandSlotFunctions\nThefollowingAPIsarecapableofhandlingUnicodeobjectsandstringsoninput(werefertothemasstringsinthe\ndescriptions)andreturnUnicodeobjectsorintegersasappropriate.\nTheyallreturnNULLor-1ifanexceptionoccurs.\nPyObject*PyUnicode_Concat(PyObject*left,PyObject*right)\nReturnvalue: Newreference. PartoftheStableABI.ConcattwostringsgivinganewUnicodestring.\nPyObject*PyUnicode_Split(PyObject*unicode,PyObject*sep,Py_ssize_tmaxsplit)\nReturnvalue: Newreference. PartoftheStableABI.SplitastringgivingalistofUnicodestrings. Ifsepis\nNULL, splitting will be done at all whitespace substrings. Otherwise, splits occur at the given separator. At\nmostmaxsplitsplitswillbedone. Ifnegative,nolimitisset. Separatorsarenotincludedintheresultinglist.\nOnerror,returnNULLwithanexceptionset.\nEquivalenttostr.split().\nPyObject*PyUnicode_RSplit(PyObject*unicode,PyObject*sep,Py_ssize_tmaxsplit)\nReturnvalue: Newreference. PartoftheStableABI.SimilartoPyUnicode_Split(),butsplittingwillbe\ndonebeginningattheendofthestring.\nOnerror,returnNULLwithanexceptionset.\nEquivalenttostr.rsplit().\nPyObject*PyUnicode_Splitlines(PyObject*unicode,intkeepends)\nReturnvalue: Newreference. PartoftheStableABI.SplitaUnicodestringatlinebreaks,returningalistof\nUnicodestrings. CRLFisconsideredtobeonelinebreak. Ifkeependsis0,theLinebreakcharactersarenot\nincludedintheresultingstrings.\nPyObject*PyUnicode_Partition(PyObject*unicode,PyObject*sep)\nReturnvalue: Newreference. PartoftheStableABI.SplitaUnicodestringatthefirstoccurrenceofsep,and\nreturna3-tuplecontainingthepartbeforetheseparator,theseparatoritself,andthepartaftertheseparator.\nIftheseparatorisnotfound,returna3-tuplecontainingthestringitself,followedbytwoemptystrings.\nsepmustnotbeempty.\nOnerror,returnNULLwithanexceptionset.\nEquivalenttostr.partition().\nPyObject*PyUnicode_RPartition(PyObject*unicode,PyObject*sep)\nReturnvalue: Newreference. PartoftheStableABI.SimilartoPyUnicode_Partition(),butsplitaUni-\ncodestringatthelastoccurrenceofsep. Iftheseparatorisnotfound,returna3-tuplecontainingtwoempty\nstrings,followedbythestringitself.\nsepmustnotbeempty.\nOnerror,returnNULLwithanexceptionset.\nEquivalenttostr.rpartition().\n152 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyUnicode_Join(PyObject*separator,PyObject*seq)\nReturnvalue: Newreference. PartoftheStableABI.Joinasequenceofstringsusingthegivenseparatorand\nreturntheresultingUnicodestring.\nPy_ssize_tPyUnicode_Tailmatch(PyObject*unicode,PyObject*substr,Py_ssize_tstart,Py_ssize_tend,int\ndirection)\nPartoftheStableABI.Return1ifsubstrmatchesunicode[start:end]atthegiventailend(direction==\n-1meanstodoaprefixmatch,direction==1asuffixmatch),0otherwise. Return-1ifanerroroccurred.\nPy_ssize_tPyUnicode_Find(PyObject*unicode,PyObject*substr,Py_ssize_tstart,Py_ssize_tend,intdirection)\nPartoftheStableABI.Returnthefirstpositionofsubstrinunicode[start:end]usingthegivendirection\n(direction==1meanstodoaforwardsearch,direction==-1abackwardsearch). Thereturnvalueistheindex\nofthefirstmatch;avalueof-1indicatesthatnomatchwasfound,and-2indicatesthatanerroroccurredand\nanexceptionhasbeenset.\nPy_ssize_tPyUnicode_FindChar(PyObject*unicode,Py_UCS4ch,Py_ssize_tstart,Py_ssize_tend,int\ndirection)\nPartoftheStableABIsinceversion3.7. Returnthefirstpositionofthecharacterchinunicode[start:end]\nusingthegivendirection(direction==1meanstodoaforwardsearch,direction==-1abackwardsearch). The\nreturnvalueistheindexofthefirstmatch;avalueof-1indicatesthatnomatchwasfound,and-2indicates\nthatanerroroccurredandanexceptionhasbeenset.\nAddedinversion3.3.\nChangedinversion3.7: startandendarenowadjustedtobehavelikeunicode[start:end].\nPy_ssize_tPyUnicode_Count(PyObject*unicode,PyObject*substr,Py_ssize_tstart,Py_ssize_tend)\nPart of the Stable ABI. Return the number of non-overlapping occurrences of substr in\nunicode[start:end]. Return-1ifanerroroccurred.\nPyObject*PyUnicode_Replace(PyObject*unicode,PyObject*substr,PyObject*replstr,Py_ssize_tmaxcount)\nReturnvalue:Newreference. PartoftheStableABI.Replaceatmostmaxcountoccurrencesofsubstrinunicode\nwithreplstrandreturntheresultingUnicodeobject. maxcount==-1meansreplacealloccurrences.\nintPyUnicode_Compare(PyObject*left,PyObject*right)\nPartoftheStableABI.Comparetwostringsandreturn-1,0,1forlessthan,equal,andgreaterthan,respec-\ntively.\nThisfunctionreturns-1uponfailure,sooneshouldcallPyErr_Occurred()tocheckforerrors.\nintPyUnicode_EqualToUTF8AndSize(PyObject*unicode,constchar*string,Py_ssize_tsize)\nPartoftheStableABIsinceversion3.13. CompareaUnicodeobjectwithacharbufferwhichisinterpreted\nasbeingUTF-8orASCIIencodedandreturntrue(1)iftheyareequal,orfalse(0)otherwise. IftheUnicode\nobject contains surrogate code points (U+D800 - U+DFFF) or the C string is not valid UTF-8, false (0) is\nreturned.\nThisfunctiondoesnotraiseexceptions.\nAddedinversion3.13.\nintPyUnicode_EqualToUTF8(PyObject*unicode,constchar*string)\nPartoftheStableABIsinceversion3.13. SimilartoPyUnicode_EqualToUTF8AndSize(),butcompute\nstringlengthusingstrlen(). IftheUnicodeobjectcontainsnullcharacters,false(0)isreturned.\nAddedinversion3.13.\nintPyUnicode_CompareWithASCIIString(PyObject*unicode,constchar*string)\nPartoftheStableABI.CompareaUnicodeobject,unicode,withstringandreturn-1,0,1forlessthan,equal,\nand greater than, respectively. It is best to pass only ASCII-encoded strings, but the function interprets the\ninputstringasISO-8859-1ifitcontainsnon-ASCIIcharacters.\nThisfunctiondoesnotraiseexceptions.\n8.3. SequenceObjects 153\nThePython/CAPI,Release3.13.3\nPyObject*PyUnicode_RichCompare(PyObject*left,PyObject*right,intop)\nReturnvalue: Newreference. PartoftheStableABI.RichcomparetwoUnicodestringsandreturnoneofthe\nfollowing:\n\u2022 NULLincaseanexceptionwasraised\n\u2022 Py_TrueorPy_Falseforsuccessfulcomparisons\n\u2022 Py_NotImplementedincasethetypecombinationisunknown\nPossiblevaluesforoparePy_GT,Py_GE,Py_EQ,Py_NE,Py_LT,andPy_LE.\nPyObject*PyUnicode_Format(PyObject*format,PyObject*args)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewstringobjectfromformatandargs;thisis\nanalogoustoformat % args.\nintPyUnicode_Contains(PyObject*unicode,PyObject*substr)\nPartoftheStableABI.Checkwhethersubstriscontainedinunicodeandreturntrueorfalseaccordingly.\nsubstrhastocoercetoaoneelementUnicodestring. -1isreturnediftherewasanerror.\nvoidPyUnicode_InternInPlace(PyObject**p_unicode)\nPartoftheStableABI.Interntheargument*p_unicodeinplace. Theargumentmustbetheaddressofa\npointervariablepointingtoaPythonUnicodestringobject. Ifthereisanexistinginternedstringthatisthe\nsameas*p_unicode,itsets*p_unicodetoit(releasingthereferencetotheoldstringobjectandcreating\nanewstrongreferencetotheinternedstringobject),otherwiseitleaves*p_unicodealoneandinternsit.\n(Clarification: eventhoughthereisalotoftalkaboutreferences,thinkofthisfunctionasreference-neutral.\nYoumustowntheobjectyoupassin;afterthecallyounolongerownthepassed-inreference,butyounewly\nowntheresult.)\nThisfunctionneverraisesanexception. Onerror,itleavesitsargumentunchangedwithoutinterningit.\nInstancesofsubclassesofstrmaynotbeinterned,thatis,PyUnicode_CheckExact(*p_unicode)must\nbetrue. Ifitisnot,then\u2013aswithanyothererror\u2013theargumentisleftunchanged.\nNotethatinternedstringsarenot\u201cimmortal\u201d. Youmustkeepareferencetotheresulttobenefitfrominterning.\nPyObject*PyUnicode_InternFromString(constchar*str)\nReturn value: New reference. Part of the Stable ABI. A combination of PyUnicode_FromString() and\nPyUnicode_InternInPlace(),meantforstaticallyallocatedstrings.\nReturnanew(\u201cowned\u201d)referencetoeitheranewUnicodestringobjectthathasbeeninterned,oranearlier\ninternedstringobjectwiththesamevalue.\nPython may keep a reference to the result, or make it immortal, preventing it from being garbage-collected\npromptly. For interning an unbounded number of different strings, such as ones coming from user input,\nprefercallingPyUnicode_FromString()andPyUnicode_InternInPlace()directly.\nCPythonimplementationdetail: Stringsinternedthiswayaremadeimmortal.\n8.3.4 Tuple Objects\ntypePyTupleObject\nThissubtypeofPyObjectrepresentsaPythontupleobject.\nPyTypeObjectPyTuple_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythontupletype;itisthesameobject\nastupleinthePythonlayer.\nintPyTuple_Check(PyObject*p)\nReturntrueifpisatupleobjectoraninstanceofasubtypeofthetupletype. Thisfunctionalwayssucceeds.\n154 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyTuple_CheckExact(PyObject*p)\nReturn true if p is a tuple object, but not an instance of a subtype of the tuple type. This function always\nsucceeds.\nPyObject*PyTuple_New(Py_ssize_tlen)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewtupleobjectofsizelen,orNULLwithan\nexceptionsetonfailure.\nPyObject*PyTuple_Pack(Py_ssize_tn,...)\nReturn value: New reference. Part of the Stable ABI. Return a new tuple object of size n, or NULL with an\nexceptionsetonfailure. ThetuplevaluesareinitializedtothesubsequentnCargumentspointingtoPython\nobjects. PyTuple_Pack(2, a, b)isequivalenttoPy_BuildValue(\"(OO)\", a, b).\nPy_ssize_tPyTuple_Size(PyObject*p)\nPartoftheStableABI.Takeapointertoatupleobject,andreturnthesizeofthattuple. Onerror,return-1\nandwithanexceptionset.\nPy_ssize_tPyTuple_GET_SIZE(PyObject*p)\nLikePyTuple_Size(),butwithouterrorchecking.\nPyObject*PyTuple_GetItem(PyObject*p,Py_ssize_tpos)\nReturnvalue: Borrowedreference. PartoftheStableABI.Returntheobjectatpositionposinthetuplepointed\ntobyp. Ifposisnegativeoroutofbounds,returnNULLandsetanIndexErrorexception.\nThereturnedreferenceisborrowedfromthetuplep(thatis: itisonlyvalidaslongasyouholdareferenceto\np). Togetastrongreference,usePy_NewRef(PyTuple_GetItem(...))orPySequence_GetItem().\nPyObject*PyTuple_GET_ITEM(PyObject*p,Py_ssize_tpos)\nReturnvalue: Borrowedreference. LikePyTuple_GetItem(),butdoesnocheckingofitsarguments.\nPyObject*PyTuple_GetSlice(PyObject*p,Py_ssize_tlow,Py_ssize_thigh)\nReturnvalue: Newreference. PartoftheStableABI.Returnthesliceofthetuplepointedtobypbetweenlow\nandhigh,orNULLwithanexceptionsetonfailure.\nThis is the equivalent of the Python expression p[low:high]. Indexing from the end of the tuple is not\nsupported.\nintPyTuple_SetItem(PyObject*p,Py_ssize_tpos,PyObject*o)\nPartoftheStableABI.Insertareferencetoobjectoatpositionposofthetuplepointedtobyp. Return0on\nsuccess. Ifposisoutofbounds,return-1andsetanIndexErrorexception.\n(cid:174) Note\nThisfunction\u201csteals\u201dareferencetooanddiscardsareferencetoanitemalreadyinthetupleattheaffected\nposition.\nvoidPyTuple_SET_ITEM(PyObject*p,Py_ssize_tpos,PyObject*o)\nLikePyTuple_SetItem(),butdoesnoerrorchecking,andshouldonlybeusedtofillinbrandnewtuples.\nBoundscheckingisperformedasanassertionifPythonisbuiltindebugmodeorwith assertions.\n(cid:174) Note\nThisfunction\u201csteals\u201dareferencetoo,and,unlikePyTuple_SetItem(),doesnotdiscardareferenceto\nanyitemthatisbeingreplaced;anyreferenceinthetupleatpositionposwillbeleaked.\nint_PyTuple_Resize(PyObject**p,Py_ssize_tnewsize)\nCanbeusedtoresizeatuple. newsizewillbethenewlengthofthetuple. Becausetuplesaresupposed tobe\nimmutable, thisshouldonlybeusedifthereisonlyonereferencetotheobject. Donot usethisifthetuple\n8.3. SequenceObjects 155\nThePython/CAPI,Release3.13.3\nmayalreadybeknowntosomeotherpartofthecode. Thetuplewillalwaysgroworshrinkattheend. Think\nofthisasdestroyingtheoldtupleandcreatinganewone,onlymoreefficiently. Returns0onsuccess. Client\ncodeshouldneverassumethattheresultingvalueof*pwillbethesameasbeforecallingthisfunction. Ifthe\nobjectreferencedby*pisreplaced,theoriginal*pisdestroyed. Onfailure,returns-1andsets*ptoNULL,\nandraisesMemoryErrororSystemError.\n8.3.5 Struct Sequence Objects\nStruct sequence objects are the C equivalent of namedtuple() objects, i.e. a sequence whose items can also be\naccessedthroughattributes. Tocreateastructsequence,youfirsthavetocreateaspecificstructsequencetype.\nPyTypeObject*PyStructSequence_NewType(PyStructSequence_Desc*desc)\nReturnvalue: Newreference. PartoftheStableABI.Createanewstructsequencetypefromthedataindesc,\ndescribedbelow. InstancesoftheresultingtypecanbecreatedwithPyStructSequence_New().\nReturnNULLwithanexceptionsetonfailure.\nvoidPyStructSequence_InitType(PyTypeObject*type,PyStructSequence_Desc*desc)\nInitializesastructsequencetypetypefromdescinplace.\nintPyStructSequence_InitType2(PyTypeObject*type,PyStructSequence_Desc*desc)\nLikePyStructSequence_InitType(),butreturns0onsuccessand-1withanexceptionsetonfailure.\nAddedinversion3.4.\ntypePyStructSequence_Desc\nPart of the Stable ABI (including all members). Contains the meta information of a struct sequence type to\ncreate.\nconstchar*name\nFullyqualifiednameofthetype;null-terminatedUTF-8encoded. Thenamemustcontainthemodule\nname.\nconstchar*doc\nPointertodocstringforthetypeorNULLtoomit.\nPyStructSequence_Field*fields\nPointertoNULL-terminatedarraywithfieldnamesofthenewtype.\nintn_in_sequence\nNumberoffieldsvisibletothePythonside(ifusedastuple).\ntypePyStructSequence_Field\nPart of the Stable ABI (including all members). Describes a field of a struct sequence. As a struct se-\nquence is modeled as a tuple, all fields are typed as PyObject*. The index in the fields array of the\nPyStructSequence_Descdetermineswhichfieldofthestructsequenceisdescribed.\nconstchar*name\nNameforthefieldorNULLtoendthelistofnamedfields,settoPyStructSequence_UnnamedField\ntoleaveunnamed.\nconstchar*doc\nFielddocstringorNULLtoomit.\nconstchar*constPyStructSequence_UnnamedField\nPartoftheStableABIsinceversion3.11. Specialvalueforafieldnametoleaveitunnamed.\nChangedinversion3.9: Thetypewaschangedfromchar *.\nPyObject*PyStructSequence_New(PyTypeObject*type)\nReturnvalue: Newreference. PartoftheStableABI.Createsaninstanceoftype,whichmusthavebeencreated\nwithPyStructSequence_NewType().\nReturnNULLwithanexceptionsetonfailure.\n156 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyStructSequence_GetItem(PyObject*p,Py_ssize_tpos)\nReturn value: Borrowed reference. Part of the Stable ABI. Return the object at position pos in the struct\nsequencepointedtobyp.\nBoundscheckingisperformedasanassertionifPythonisbuiltindebugmodeorwith assertions.\nPyObject*PyStructSequence_GET_ITEM(PyObject*p,Py_ssize_tpos)\nReturnvalue: Borrowedreference. AliastoPyStructSequence_GetItem().\nChangedinversion3.13: NowimplementedasanaliastoPyStructSequence_GetItem().\nvoidPyStructSequence_SetItem(PyObject*p,Py_ssize_tpos,PyObject*o)\nPart of the Stable ABI. Sets the field at index pos of the struct sequence p to value o. Like\nPyTuple_SET_ITEM(),thisshouldonlybeusedtofillinbrandnewinstances.\nBoundscheckingisperformedasanassertionifPythonisbuiltindebugmodeorwith assertions.\n(cid:174) Note\nThisfunction\u201csteals\u201dareferencetoo.\nvoidPyStructSequence_SET_ITEM(PyObject*p,Py_ssize_t*pos,PyObject*o)\nAliastoPyStructSequence_SetItem().\nChangedinversion3.13: NowimplementedasanaliastoPyStructSequence_SetItem().\n8.3.6 List Objects\ntypePyListObject\nThissubtypeofPyObjectrepresentsaPythonlistobject.\nPyTypeObjectPyList_Type\nPart of the Stable ABI. This instance of PyTypeObject represents the Python list type. This is the same\nobjectaslistinthePythonlayer.\nintPyList_Check(PyObject*p)\nReturntrueifpisalistobjectoraninstanceofasubtypeofthelisttype. Thisfunctionalwayssucceeds.\nintPyList_CheckExact(PyObject*p)\nReturntrueifpisalistobject,butnotaninstanceofasubtypeofthelisttype. Thisfunctionalwayssucceeds.\nPyObject*PyList_New(Py_ssize_tlen)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewlistoflengthlenonsuccess,orNULLon\nfailure.\n(cid:174) Note\nIflenisgreaterthanzero,thereturnedlistobject\u2019sitemsaresettoNULL.ThusyoucannotuseabstractAPI\nfunctionssuchasPySequence_SetItem()orexposetheobjecttoPythoncodebeforesettingallitems\ntoarealobjectwithPyList_SetItem()orPyList_SET_ITEM(). ThefollowingAPIsaresafeAPIs\nbeforethelistisfullyinitialized: PyList_SetItem()andPyList_SET_ITEM().\nPy_ssize_tPyList_Size(PyObject*list)\nPart of the Stable ABI. Return the length of the list object in list; this is equivalent to len(list) on a list\nobject.\nPy_ssize_tPyList_GET_SIZE(PyObject*list)\nSimilartoPyList_Size(),butwithouterrorchecking.\n8.3. SequenceObjects 157\nThePython/CAPI,Release3.13.3\nPyObject*PyList_GetItemRef(PyObject*list,Py_ssize_tindex)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.13. Returntheobjectatpositionindexin\nthelistpointedtobylist. Thepositionmustbenon-negative;indexingfromtheendofthelistisnotsupported.\nIfindexisoutofbounds(<0 or >=len(list)),returnNULLandsetanIndexErrorexception.\nAddedinversion3.13.\nPyObject*PyList_GetItem(PyObject*list,Py_ssize_tindex)\nReturnvalue: Borrowedreference. PartoftheStableABI.LikePyList_GetItemRef(),butreturnsabor-\nrowedreferenceinsteadofastrongreference.\nPyObject*PyList_GET_ITEM(PyObject*list,Py_ssize_ti)\nReturnvalue: Borrowedreference. SimilartoPyList_GetItem(),butwithouterrorchecking.\nintPyList_SetItem(PyObject*list,Py_ssize_tindex,PyObject*item)\nPartoftheStableABI.Settheitematindexindexinlisttoitem. Return0onsuccess. Ifindexisoutofbounds,\nreturn-1andsetanIndexErrorexception.\n(cid:174) Note\nThisfunction\u201csteals\u201dareferencetoitemanddiscardsareferencetoanitemalreadyinthelistattheaffected\nposition.\nvoidPyList_SET_ITEM(PyObject*list,Py_ssize_ti,PyObject*o)\nMacro form of PyList_SetItem() without error checking. This is normally only used to fill in new lists\nwherethereisnopreviouscontent.\nBoundscheckingisperformedasanassertionifPythonisbuiltindebugmodeorwith assertions.\n(cid:174) Note\nThismacro\u201csteals\u201dareferencetoitem,and,unlikePyList_SetItem(),doesnotdiscardareferenceto\nanyitemthatisbeingreplaced;anyreferenceinlistatpositioniwillbeleaked.\nintPyList_Insert(PyObject*list,Py_ssize_tindex,PyObject*item)\nPartoftheStableABI.Inserttheitemitemintolistlist infrontofindexindex. Return0ifsuccessful;return\n-1andsetanexceptionifunsuccessful. Analogoustolist.insert(index, item).\nintPyList_Append(PyObject*list,PyObject*item)\nPartoftheStableABI.Appendtheobjectitemattheendoflistlist. Return0ifsuccessful;return-1andset\nanexceptionifunsuccessful. Analogoustolist.append(item).\nPyObject*PyList_GetSlice(PyObject*list,Py_ssize_tlow,Py_ssize_thigh)\nReturnvalue: Newreference. PartoftheStableABI.Returnalistoftheobjectsinlist containingtheobjects\nbetweenlowandhigh. ReturnNULLandsetanexceptionifunsuccessful. Analogoustolist[low:high].\nIndexingfromtheendofthelistisnotsupported.\nintPyList_SetSlice(PyObject*list,Py_ssize_tlow,Py_ssize_thigh,PyObject*itemlist)\nPart of the Stable ABI. Set the slice of list between low and high to the contents of itemlist. Analogous to\nlist[low:high] = itemlist. TheitemlistmaybeNULL,indicatingtheassignmentofanemptylist(slice\ndeletion). Return0onsuccess,-1onfailure. Indexingfromtheendofthelistisnotsupported.\nintPyList_Extend(PyObject*list,PyObject*iterable)\nExtendlistwiththecontentsofiterable. ThisisthesameasPyList_SetSlice(list, PY_SSIZE_T_MAX,\nPY_SSIZE_T_MAX, iterable)andanalogoustolist.extend(iterable)orlist += iterable.\nRaiseanexceptionandreturn-1iflistisnotalistobject. Return0onsuccess.\nAddedinversion3.13.\n158 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyList_Clear(PyObject*list)\nRemoveallitemsfromlist. ThisisthesameasPyList_SetSlice(list, 0, PY_SSIZE_T_MAX, NULL)\nandanalogoustolist.clear()ordel list[:].\nRaiseanexceptionandreturn-1iflistisnotalistobject. Return0onsuccess.\nAddedinversion3.13.\nintPyList_Sort(PyObject*list)\nPartoftheStableABI.Sorttheitemsoflistinplace. Return0onsuccess,-1onfailure. Thisisequivalentto\nlist.sort().\nintPyList_Reverse(PyObject*list)\nPart of the Stable ABI. Reverse the items of list in place. Return 0 on success, -1 on failure. This is the\nequivalentoflist.reverse().\nPyObject*PyList_AsTuple(PyObject*list)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewtupleobjectcontainingthecontentsoflist;\nequivalenttotuple(list).\n8.4 Container Objects\n8.4.1 Dictionary Objects\ntypePyDictObject\nThissubtypeofPyObjectrepresentsaPythondictionaryobject.\nPyTypeObjectPyDict_Type\nPart of the Stable ABI. This instance of PyTypeObject represents the Python dictionary type. This is the\nsameobjectasdictinthePythonlayer.\nintPyDict_Check(PyObject*p)\nReturntrueifpisadictobjectoraninstanceofasubtypeofthedicttype. Thisfunctionalwayssucceeds.\nintPyDict_CheckExact(PyObject*p)\nReturntrueifpisadictobject,butnotaninstanceofasubtypeofthedicttype. Thisfunctionalwayssucceeds.\nPyObject*PyDict_New()\nReturnvalue: Newreference. PartoftheStableABI.Returnanewemptydictionary,orNULLonfailure.\nPyObject*PyDictProxy_New(PyObject*mapping)\nReturn value: New reference. Part of the Stable ABI. Return a types.MappingProxyType object for a\nmappingwhichenforcesread-onlybehavior. Thisisnormallyusedtocreateaviewtopreventmodificationof\nthedictionaryfornon-dynamicclasstypes.\nvoidPyDict_Clear(PyObject*p)\nPartoftheStableABI.Emptyanexistingdictionaryofallkey-valuepairs.\nintPyDict_Contains(PyObject*p,PyObject*key)\nPart of the Stable ABI. Determine if dictionary p contains key. If an item in p is matches key, return 1,\notherwisereturn0. Onerror,return-1. ThisisequivalenttothePythonexpressionkey in p.\nintPyDict_ContainsString(PyObject*p,constchar*key)\nThis is the same as PyDict_Contains(), but key is specified as a const char* UTF-8 encoded bytes\nstring,ratherthanaPyObject*.\nAddedinversion3.13.\nPyObject*PyDict_Copy(PyObject*p)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewdictionarythatcontainsthesamekey-value\npairsasp.\n8.4. ContainerObjects 159\nThePython/CAPI,Release3.13.3\nintPyDict_SetItem(PyObject*p,PyObject*key,PyObject*val)\nPart of the Stable ABI. Insert val into the dictionary p with a key of key. key must be hashable; if it isn\u2019t,\nTypeErrorwillberaised. Return0onsuccessor-1onfailure. Thisfunctiondoesnot stealareferenceto\nval.\nintPyDict_SetItemString(PyObject*p,constchar*key,PyObject*val)\nPart of the Stable ABI. This is the same as PyDict_SetItem(), but key is specified as a const char*\nUTF-8encodedbytesstring,ratherthanaPyObject*.\nintPyDict_DelItem(PyObject*p,PyObject*key)\nPart of the Stable ABI. Remove the entry in dictionary p with key key. key must be hashable; if it isn\u2019t,\nTypeError is raised. If key is not in the dictionary, KeyError is raised. Return 0 on success or -1 on\nfailure.\nintPyDict_DelItemString(PyObject*p,constchar*key)\nPart of the Stable ABI. This is the same as PyDict_DelItem(), but key is specified as a const char*\nUTF-8encodedbytesstring,ratherthanaPyObject*.\nintPyDict_GetItemRef(PyObject*p,PyObject*key,PyObject**result)\nPartoftheStableABIsinceversion3.13. Returnanewstrongreferencetotheobjectfromdictionarypwhich\nhasakeykey:\n\u2022 Ifthekeyispresent,set*resulttoanewstrongreferencetothevalueandreturn1.\n\u2022 Ifthekeyismissing,set*resulttoNULLandreturn0.\n\u2022 Onerror,raiseanexceptionandreturn-1.\nAddedinversion3.13.\nSeealsothePyObject_GetItem()function.\nPyObject*PyDict_GetItem(PyObject*p,PyObject*key)\nReturn value: Borrowed reference. Part of the Stable ABI. Return a borrowed reference to the object from\ndictionarypwhichhasakeykey. ReturnNULLifthekeykeyismissingwithoutsettinganexception.\n(cid:174) Note\nExceptionsthatoccurwhilethiscalls__hash__()and__eq__()methodsaresilentlyignored. Prefer\nthePyDict_GetItemWithError()functioninstead.\nChangedinversion3.10: CallingthisAPIwithoutGILheldhadbeenallowedforhistoricalreason. Itisno\nlongerallowed.\nPyObject*PyDict_GetItemWithError(PyObject*p,PyObject*key)\nReturn value: Borrowed reference. Part of the Stable ABI. Variant of PyDict_GetItem() that does not\nsuppressexceptions. ReturnNULLwithanexceptionsetifanexceptionoccurred. ReturnNULLwithoutan\nexceptionsetifthekeywasn\u2019tpresent.\nPyObject*PyDict_GetItemString(PyObject*p,constchar*key)\nReturnvalue: Borrowedreference. PartoftheStableABI.ThisisthesameasPyDict_GetItem(),butkey\nisspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*.\n(cid:174) Note\nExceptions that occur while this calls __hash__() and __eq__() methods or while creating the tem-\nporarystrobjectaresilentlyignored. PreferusingthePyDict_GetItemWithError()functionwith\nyourownPyUnicode_FromString()keyinstead.\n160 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyDict_GetItemStringRef(PyObject*p,constchar*key,PyObject**result)\nPartoftheStableABIsinceversion3.13. SimilartoPyDict_GetItemRef(),butkeyisspecifiedasaconst\nchar*UTF-8encodedbytesstring,ratherthanaPyObject*.\nAddedinversion3.13.\nPyObject*PyDict_SetDefault(PyObject*p,PyObject*key,PyObject*defaultobj)\nReturnvalue: Borrowedreference. ThisisthesameasthePython-leveldict.setdefault(). Ifpresent,it\nreturnsthevaluecorrespondingtokeyfromthedictionaryp. Ifthekeyisnotinthedict, itisinsertedwith\nvaluedefaultobjanddefaultobjisreturned. Thisfunctionevaluatesthehashfunctionofkeyonlyonce,instead\nofevaluatingitindependentlyforthelookupandtheinsertion.\nAddedinversion3.4.\nintPyDict_SetDefaultRef(PyObject*p,PyObject*key,PyObject*default_value,PyObject**result)\nInsertsdefault_valueintothedictionarypwithakeyofkeyifthekeyisnotalreadypresentinthedictionary. If\nresultisnotNULL,then*resultissettoastrongreferencetoeitherdefault_value,ifthekeywasnotpresent,orthe\nexistingvalue,ifkeywasalreadypresentinthedictionary. Returns1ifthekeywaspresentanddefault_value\nwasnotinserted,or0ifthekeywasnotpresentanddefault_valuewasinserted. Onfailure,returns-1,sets\nanexception,andsets*resulttoNULL.\nForclarity: ifyouhaveastrongreferencetodefault_valuebeforecallingthisfunction, thenafteritreturns,\nyouholdastrongreferencetobothdefault_valueand*result (ifit\u2019snotNULL).Thesemayrefertothesame\nobject: inthatcaseyouholdtwoseparatereferencestoit.\nAddedinversion3.13.\nintPyDict_Pop(PyObject*p,PyObject*key,PyObject**result)\nRemove key from dictionary p and optionally return the removed value. Do not raise KeyError if the key\nmissing.\n\u2022 Ifthekeyispresent,set*resulttoanewreferencetotheremovedvalueifresultisnotNULL,andreturn\n1.\n\u2022 Ifthekeyismissing,set*resulttoNULLifresultisnotNULL,andreturn0.\n\u2022 Onerror,raiseanexceptionandreturn-1.\nSimilartodict.pop(),butwithoutthedefaultvalueandnotraisingKeyErrorifthekeymissing.\nAddedinversion3.13.\nintPyDict_PopString(PyObject*p,constchar*key,PyObject**result)\nSimilartoPyDict_Pop(),butkeyisspecifiedasaconst char*UTF-8encodedbytesstring,ratherthan\naPyObject*.\nAddedinversion3.13.\nPyObject*PyDict_Items(PyObject*p)\nReturnvalue: Newreference. PartoftheStableABI.ReturnaPyListObjectcontainingalltheitemsfrom\nthedictionary.\nPyObject*PyDict_Keys(PyObject*p)\nReturnvalue: Newreference. PartoftheStableABI.ReturnaPyListObjectcontainingallthekeysfrom\nthedictionary.\nPyObject*PyDict_Values(PyObject*p)\nReturnvalue: Newreference. PartoftheStableABI.ReturnaPyListObjectcontainingallthevaluesfrom\nthedictionaryp.\nPy_ssize_tPyDict_Size(PyObject*p)\nPart of the Stable ABI. Return the number of items in the dictionary. This is equivalent to len(p) on a\ndictionary.\n8.4. ContainerObjects 161\nThePython/CAPI,Release3.13.3\nintPyDict_Next(PyObject*p,Py_ssize_t*ppos,PyObject**pkey,PyObject**pvalue)\nPartoftheStableABI.Iterateoverallkey-valuepairsinthedictionaryp. ThePy_ssize_treferredtoby\npposmustbeinitializedto0priortothefirstcalltothisfunctiontostarttheiteration;thefunctionreturnstrue\nforeachpairinthedictionary,andfalseonceallpairshavebeenreported. Theparameterspkeyandpvalue\nshouldeitherpointtoPyObject*variablesthatwillbefilledinwitheachkeyandvalue,respectively,ormay\nbeNULL.Anyreferencesreturnedthroughthemareborrowed. pposshouldnotbealteredduringiteration. Its\nvaluerepresentsoffsetswithintheinternaldictionarystructure,andsincethestructureissparse,theoffsetsare\nnotconsecutive.\nForexample:\nPyObject *key, *value;\nPy_ssize_t pos = 0;\nwhile (PyDict_Next(self->dict, &pos, &key, &value)) {\n/* do something interesting with the values... */\n...\n}\nThe dictionary p should not be mutated during iteration. It is safe to modify the values of the keys as you\niterateoverthedictionary,butonlysolongasthesetofkeysdoesnotchange. Forexample:\nPyObject *key, *value;\nPy_ssize_t pos = 0;\nwhile (PyDict_Next(self->dict, &pos, &key, &value)) {\nlong i = PyLong_AsLong(value);\nif (i == -1 && PyErr_Occurred()) {\nreturn -1;\n}\nPyObject *o = PyLong_FromLong(i + 1);\nif (o == NULL)\nreturn -1;\nif (PyDict_SetItem(self->dict, key, o) < 0) {\nPy_DECREF(o);\nreturn -1;\n}\nPy_DECREF(o);\n}\nThe function is not thread-safe in the free-threaded build without external synchronization. You can use\nPy_BEGIN_CRITICAL_SECTION tolockthedictionarywhileiteratingoverit:\nPy_BEGIN_CRITICAL_SECTION(self->dict);\nwhile (PyDict_Next(self->dict, &pos, &key, &value)) {\n...\n}\nPy_END_CRITICAL_SECTION();\nintPyDict_Merge(PyObject*a,PyObject*b,intoverride)\nPart of the Stable ABI. Iterate over mapping object b adding key-value pairs to dictionary a. b may be a\ndictionary, oranyobjectsupporting PyMapping_Keys() and PyObject_GetItem(). If override istrue,\nexistingpairsinawillbereplacedifamatchingkeyisfoundinb,otherwisepairswillonlybeaddedifthere\nisnotamatchingkeyina. Return0onsuccessor-1ifanexceptionwasraised.\nintPyDict_Update(PyObject*a,PyObject*b)\nPartoftheStableABI.ThisisthesameasPyDict_Merge(a, b, 1)inC,andissimilartoa.update(b)\ninPythonexceptthatPyDict_Update()doesn\u2019tfallbacktotheiteratingoverasequenceofkeyvaluepairs\nifthesecondargumenthasno\u201ckeys\u201dattribute. Return0onsuccessor-1ifanexceptionwasraised.\n162 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyDict_MergeFromSeq2(PyObject*a,PyObject*seq2,intoverride)\nPartoftheStableABI.Updateormergeintodictionarya,fromthekey-valuepairsinseq2. seq2mustbean\niterableobjectproducingiterableobjectsoflength2,viewedaskey-valuepairs. Incaseofduplicatekeys,the\nlastwinsifoverrideistrue,elsethefirstwins. Return0onsuccessor-1ifanexceptionwasraised. Equivalent\nPython(exceptforthereturnvalue):\ndef PyDict_MergeFromSeq2(a, seq2, override):\nfor key, value in seq2:\nif override or key not in a:\na[key] = value\nintPyDict_AddWatcher(PyDict_WatchCallbackcallback)\nRegistercallbackasadictionarywatcher. Returnanon-negativeintegeridwhichmustbepassedtofuturecalls\ntoPyDict_Watch(). Incaseoferror(e.g. nomorewatcherIDsavailable),return-1andsetanexception.\nAddedinversion3.12.\nintPyDict_ClearWatcher(intwatcher_id)\nClearwatcheridentifiedbywatcher_idpreviouslyreturnedfromPyDict_AddWatcher(). Return0onsuc-\ncess,-1onerror(e.g. ifthegivenwatcher_idwasneverregistered.)\nAddedinversion3.12.\nintPyDict_Watch(intwatcher_id,PyObject*dict)\nMarkdictionarydictaswatched. Thecallbackgrantedwatcher_idbyPyDict_AddWatcher()willbecalled\nwhendictismodifiedordeallocated. Return0onsuccessor-1onerror.\nAddedinversion3.12.\nintPyDict_Unwatch(intwatcher_id,PyObject*dict)\nMarkdictionarydictasnolongerwatched. Thecallbackgrantedwatcher_idbyPyDict_AddWatcher()will\nnolongerbecalledwhendictismodifiedordeallocated. Thedictmustpreviouslyhavebeenwatchedbythis\nwatcher. Return0onsuccessor-1onerror.\nAddedinversion3.12.\ntypePyDict_WatchEvent\nEnumeration of possible dictionary watcher events: PyDict_EVENT_ADDED, PyDict_EVENT_MODIFIED,\nPyDict_EVENT_DELETED, PyDict_EVENT_CLONED, PyDict_EVENT_CLEARED, or\nPyDict_EVENT_DEALLOCATED.\nAddedinversion3.12.\ntypedefint(*PyDict_WatchCallback)(PyDict_WatchEventevent,PyObject*dict,PyObject*key,PyObject\n*new_value)\nTypeofadictwatchercallbackfunction.\nIf event is PyDict_EVENT_CLEARED or PyDict_EVENT_DEALLOCATED, both key and new_value will be\nNULL.Ifevent isPyDict_EVENT_ADDEDorPyDict_EVENT_MODIFIED,new_valuewillbethenewvalue\nforkey. IfeventisPyDict_EVENT_DELETED,keyisbeingdeletedfromthedictionaryandnew_valuewillbe\nNULL.\nPyDict_EVENT_CLONEDoccurswhendictwaspreviouslyemptyandanotherdictismergedintoit. Tomain-\ntainefficiencyofthisoperation,per-keyPyDict_EVENT_ADDEDeventsarenotissuedinthiscase;insteada\nsinglePyDict_EVENT_CLONEDisissued,andkeywillbethesourcedictionary.\nThecallbackmayinspectbutmustnotmodifydict;doingsocouldhaveunpredictableeffects,includinginfinite\nrecursion. DonottriggerPythoncodeexecutioninthecallback,asitcouldmodifythedictasasideeffect.\nIfeventisPyDict_EVENT_DEALLOCATED,takinganewreferenceinthecallbacktotheabout-to-be-destroyed\ndictionarywillresurrectitandpreventitfrombeingfreedatthistime. Whentheresurrectedobjectisdestroyed\nlater,anywatchercallbacksactiveatthattimewillbecalledagain.\nCallbacksoccurbeforethenotifiedmodificationtodicttakesplace,sothepriorstateofdictcanbeinspected.\n8.4. ContainerObjects 163\nThePython/CAPI,Release3.13.3\nIfthecallbacksetsanexception,itmustreturn-1;thisexceptionwillbeprintedasanunraisableexception\nusingPyErr_WriteUnraisable(). Otherwiseitshouldreturn0.\nTheremayalreadybeapendingexceptionsetonentrytothecallback. Inthiscase,thecallbackshouldreturn0\nwiththesameexceptionstillset. ThismeansthecallbackmaynotcallanyotherAPIthatcansetanexception\nunlessitsavesandclearstheexceptionstatefirst,andrestoresitbeforereturning.\nAddedinversion3.12.\n8.4.2 Set Objects\nThis section details the public API for set and frozenset objects. Any functionality not listed be-\nlow is best accessed using either the abstract object protocol (including PyObject_CallMethod(),\nPyObject_RichCompareBool(), PyObject_Hash(), PyObject_Repr(), PyObject_IsTrue(),\nPyObject_Print(),andPyObject_GetIter())ortheabstractnumberprotocol(includingPyNumber_And(),\nPyNumber_Subtract(), PyNumber_Or(), PyNumber_Xor(), PyNumber_InPlaceAnd(),\nPyNumber_InPlaceSubtract(),PyNumber_InPlaceOr(),andPyNumber_InPlaceXor()).\ntypePySetObject\nThissubtypeofPyObjectisusedtoholdtheinternaldataforbothsetandfrozensetobjects. Itislike\naPyDictObjectinthatitisafixedsizeforsmallsets(muchliketuplestorage)andwillpointtoaseparate,\nvariablesizedblockofmemoryformediumandlargesizedsets(muchlikeliststorage). Noneofthefieldsof\nthisstructureshouldbeconsideredpublicandallaresubjecttochange. Allaccessshouldbedonethroughthe\ndocumentedAPIratherthanbymanipulatingthevaluesinthestructure.\nPyTypeObjectPySet_Type\nPartoftheStableABI.ThisisaninstanceofPyTypeObjectrepresentingthePythonsettype.\nPyTypeObjectPyFrozenSet_Type\nPartoftheStableABI.ThisisaninstanceofPyTypeObjectrepresentingthePythonfrozensettype.\nThefollowingtypecheckmacrosworkonpointerstoanyPythonobject. Likewise,theconstructorfunctionswork\nwithanyiterablePythonobject.\nintPySet_Check(PyObject*p)\nReturntrueifpisasetobjectoraninstanceofasubtype. Thisfunctionalwayssucceeds.\nintPyFrozenSet_Check(PyObject*p)\nReturntrueifpisafrozensetobjectoraninstanceofasubtype. Thisfunctionalwayssucceeds.\nintPyAnySet_Check(PyObject*p)\nReturn true if p is a set object, a frozenset object, or an instance of a subtype. This function always\nsucceeds.\nintPySet_CheckExact(PyObject*p)\nReturntrueifpisasetobjectbutnotaninstanceofasubtype. Thisfunctionalwayssucceeds.\nAddedinversion3.10.\nintPyAnySet_CheckExact(PyObject*p)\nReturntrueifpisasetobjectorafrozensetobjectbutnotaninstanceofasubtype. Thisfunctionalways\nsucceeds.\nintPyFrozenSet_CheckExact(PyObject*p)\nReturntrueifpisafrozensetobjectbutnotaninstanceofasubtype. Thisfunctionalwayssucceeds.\nPyObject*PySet_New(PyObject*iterable)\nReturn value: New reference. Part of the Stable ABI. Return a new set containing objects returned by the\niterable. The iterable may be NULL to create a new empty set. Return the new set on success or NULL on\nfailure. RaiseTypeErrorifiterableisnotactuallyiterable. Theconstructorisalsousefulforcopyingaset\n(c=set(s)).\n164 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyFrozenSet_New(PyObject*iterable)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewfrozensetcontainingobjectsreturned\nbytheiterable. TheiterablemaybeNULLtocreateanewemptyfrozenset. Returnthenewsetonsuccessor\nNULLonfailure. RaiseTypeErrorifiterableisnotactuallyiterable.\nThefollowingfunctionsandmacrosareavailableforinstancesofsetorfrozensetorinstancesoftheirsubtypes.\nPy_ssize_tPySet_Size(PyObject*anyset)\nPartoftheStableABI.Returnthelengthofasetorfrozensetobject. Equivalenttolen(anyset). Raises\naSystemErrorifanysetisnotaset,frozenset,oraninstanceofasubtype.\nPy_ssize_tPySet_GET_SIZE(PyObject*anyset)\nMacroformofPySet_Size()withouterrorchecking.\nintPySet_Contains(PyObject*anyset,PyObject*key)\nPart of the Stable ABI. Return 1 if found, 0 if not found, and -1 if an error is encountered. Unlike the\nPython__contains__()method,thisfunctiondoesnotautomaticallyconvertunhashablesetsintotempo-\nrary frozensets. Raise a TypeError if the key is unhashable. Raise SystemError if anyset is not a set,\nfrozenset,oraninstanceofasubtype.\nintPySet_Add(PyObject*set,PyObject*key)\nPart of the Stable ABI. Add key to a set instance. Also works with frozenset instances (like\nPyTuple_SetItem() it can be used to fill in the values of brand new frozensets before they are exposed\nto other code). Return 0 on success or -1 on failure. Raise a TypeError if the key is unhashable. Raise\na MemoryError if there is no room to grow. Raise a SystemError if set is not an instance of set or its\nsubtype.\nThefollowingfunctionsareavailableforinstancesofsetoritssubtypesbutnotforinstancesoffrozensetorits\nsubtypes.\nintPySet_Discard(PyObject*set,PyObject*key)\nPartoftheStableABI.Return1iffoundandremoved,0ifnotfound(noactiontaken),and-1ifanerroris\nencountered. DoesnotraiseKeyErrorformissingkeys. RaiseaTypeErrorifthekeyisunhashable. Unlike\nthePythondiscard()method,thisfunctiondoesnotautomaticallyconvertunhashablesetsintotemporary\nfrozensets. RaiseSystemErrorifsetisnotaninstanceofsetoritssubtype.\nPyObject*PySet_Pop(PyObject*set)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewreferencetoanarbitraryobjectintheset,\nandremovestheobjectfromtheset. ReturnNULLonfailure. RaiseKeyErrorifthesetisempty. Raisea\nSystemErrorifsetisnotaninstanceofsetoritssubtype.\nintPySet_Clear(PyObject*set)\nPart of the Stable ABI. Empty an existing set of all elements. Return 0 on success. Return -1 and raise\nSystemErrorifsetisnotaninstanceofsetoritssubtype.\n8.5 Function Objects\n8.5.1 Function Objects\nThereareafewfunctionsspecifictoPythonfunctions.\ntypePyFunctionObject\nTheCstructureusedforfunctions.\nPyTypeObjectPyFunction_Type\nThisisaninstanceofPyTypeObjectandrepresentsthePythonfunctiontype. ItisexposedtoPythonpro-\ngrammersastypes.FunctionType.\nintPyFunction_Check(PyObject*o)\nReturntrueifoisafunctionobject(hastypePyFunction_Type). TheparametermustnotbeNULL.This\nfunctionalwayssucceeds.\n8.5. FunctionObjects 165\nThePython/CAPI,Release3.13.3\nPyObject*PyFunction_New(PyObject*code,PyObject*globals)\nReturnvalue: Newreference. Returnanewfunctionobjectassociatedwiththecodeobjectcode. globalsmust\nbeadictionarywiththeglobalvariablesaccessibletothefunction.\nThefunction\u2019sdocstringandnameareretrievedfromthecodeobject. __module__isretrievedfromglobals.\nTheargumentdefaults, annotationsandclosurearesettoNULL.__qualname__issettothesamevalueas\nthecodeobject\u2019sco_qualnamefield.\nPyObject*PyFunction_NewWithQualName(PyObject*code,PyObject*globals,PyObject*qualname)\nReturn value: New reference. As PyFunction_New(), but also allows setting the function object\u2019s\n__qualname__ attribute. qualname should be a unicode object or NULL; if NULL, the __qualname__ at-\ntributeissettothesamevalueasthecodeobject\u2019sco_qualnamefield.\nAddedinversion3.3.\nPyObject*PyFunction_GetCode(PyObject*op)\nReturnvalue: Borrowedreference. Returnthecodeobjectassociatedwiththefunctionobjectop.\nPyObject*PyFunction_GetGlobals(PyObject*op)\nReturnvalue: Borrowedreference. Returntheglobalsdictionaryassociatedwiththefunctionobjectop.\nPyObject*PyFunction_GetModule(PyObject*op)\nReturnvalue: Borrowedreference. Returnaborrowedreferencetothe__module__attributeofthefunction\nobjectop. ItcanbeNULL.\nThisisnormallyastringcontainingthemodulename,butcanbesettoanyotherobjectbyPythoncode.\nPyObject*PyFunction_GetDefaults(PyObject*op)\nReturnvalue: Borrowedreference. Returntheargumentdefaultvaluesofthefunctionobjectop. Thiscanbe\natupleofargumentsorNULL.\nintPyFunction_SetDefaults(PyObject*op,PyObject*defaults)\nSettheargumentdefaultvaluesforthefunctionobjectop. defaultsmustbePy_Noneoratuple.\nRaisesSystemErrorandreturns-1onfailure.\nvoidPyFunction_SetVectorcall(PyFunctionObject*func,vectorcallfuncvectorcall)\nSetthevectorcallfieldofagivenfunctionobjectfunc.\nWarning: extensionsusingthisAPImustpreservethebehavioroftheunaltered(default)vectorcallfunction!\nAddedinversion3.12.\nPyObject*PyFunction_GetClosure(PyObject*op)\nReturnvalue: Borrowedreference. Returntheclosureassociatedwiththefunctionobjectop. ThiscanbeNULL\noratupleofcellobjects.\nintPyFunction_SetClosure(PyObject*op,PyObject*closure)\nSettheclosureassociatedwiththefunctionobjectop. closuremustbePy_Noneoratupleofcellobjects.\nRaisesSystemErrorandreturns-1onfailure.\nPyObject*PyFunction_GetAnnotations(PyObject*op)\nReturn value: Borrowed reference. Return the annotations of the function object op. This can be a mutable\ndictionaryorNULL.\nintPyFunction_SetAnnotations(PyObject*op,PyObject*annotations)\nSettheannotationsforthefunctionobjectop. annotationsmustbeadictionaryorPy_None.\nRaisesSystemErrorandreturns-1onfailure.\nintPyFunction_AddWatcher(PyFunction_WatchCallbackcallback)\nRegister callback as a function watcher for the current interpreter. Return an ID which may be passed to\nPyFunction_ClearWatcher(). Incaseoferror(e.g. nomorewatcherIDsavailable),return-1andsetan\nexception.\n166 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nAddedinversion3.12.\nintPyFunction_ClearWatcher(intwatcher_id)\nClearwatcheridentifiedbywatcher_idpreviouslyreturnedfromPyFunction_AddWatcher()forthecur-\nrentinterpreter. Return0onsuccess, or-1andsetanexceptiononerror(e.g. ifthegivenwatcher_id was\nneverregistered.)\nAddedinversion3.12.\ntypePyFunction_WatchEvent\nEnumerationofpossiblefunctionwatcherevents:\n\u2022 PyFunction_EVENT_CREATE\n\u2022 PyFunction_EVENT_DESTROY\n\u2022 PyFunction_EVENT_MODIFY_CODE\n\u2022 PyFunction_EVENT_MODIFY_DEFAULTS\n\u2022 PyFunction_EVENT_MODIFY_KWDEFAULTS\nAddedinversion3.12.\ntypedefint(*PyFunction_WatchCallback)(PyFunction_WatchEventevent,PyFunctionObject*func,PyObject\n*new_value)\nTypeofafunctionwatchercallbackfunction.\nIfeventisPyFunction_EVENT_CREATEorPyFunction_EVENT_DESTROYthennew_valuewillbeNULL.\nOtherwise,new_valuewillholdaborrowedreferencetothenewvaluethatisabouttobestoredinfuncforthe\nattributethatisbeingmodified.\nThecallbackmayinspectbutmustnotmodifyfunc;doingsocouldhaveunpredictableeffects,includinginfinite\nrecursion.\nIfevent isPyFunction_EVENT_CREATE,thenthecallbackisinvokedafterfunc hasbeenfullyinitialized.\nOtherwise,thecallbackisinvokedbeforethemodificationtofunctakesplace,sothepriorstateoffunccanbe\ninspected. Theruntimeispermittedtooptimizeawaythecreationoffunctionobjectswhenpossible. Insuch\ncases no event will be emitted. Although this creates the possibility of an observable difference of runtime\nbehavior depending on optimization decisions, it does not change the semantics of the Python code being\nexecuted.\nIfevent isPyFunction_EVENT_DESTROY,Takingareferenceinthecallbacktotheabout-to-be-destroyed\nfunctionwillresurrectit,preventingitfrombeingfreedatthistime. Whentheresurrectedobjectisdestroyed\nlater,anywatchercallbacksactiveatthattimewillbecalledagain.\nIfthecallbacksetsanexception,itmustreturn-1;thisexceptionwillbeprintedasanunraisableexception\nusingPyErr_WriteUnraisable(). Otherwiseitshouldreturn0.\nTheremayalreadybeapendingexceptionsetonentrytothecallback. Inthiscase,thecallbackshouldreturn0\nwiththesameexceptionstillset. ThismeansthecallbackmaynotcallanyotherAPIthatcansetanexception\nunlessitsavesandclearstheexceptionstatefirst,andrestoresitbeforereturning.\nAddedinversion3.12.\n8.5.2 Instance Method Objects\nAninstancemethodisawrapperforaPyCFunctionandthenewwaytobindaPyCFunctiontoaclassobject. It\nreplacestheformercallPyMethod_New(func, NULL, class).\nPyTypeObjectPyInstanceMethod_Type\nThis instance of PyTypeObject represents the Python instance method type. It is not exposed to Python\nprograms.\n8.5. FunctionObjects 167\nThePython/CAPI,Release3.13.3\nintPyInstanceMethod_Check(PyObject*o)\nReturntrueifoisaninstancemethodobject(hastypePyInstanceMethod_Type). Theparametermustnot\nbeNULL.Thisfunctionalwayssucceeds.\nPyObject*PyInstanceMethod_New(PyObject*func)\nReturnvalue: Newreference. Returnanewinstancemethodobject,withfuncbeinganycallableobject. func\nisthefunctionthatwillbecalledwhentheinstancemethodiscalled.\nPyObject*PyInstanceMethod_Function(PyObject*im)\nReturnvalue: Borrowedreference. Returnthefunctionobjectassociatedwiththeinstancemethodim.\nPyObject*PyInstanceMethod_GET_FUNCTION(PyObject*im)\nReturnvalue: Borrowedreference. MacroversionofPyInstanceMethod_Function()whichavoidserror\nchecking.\n8.5.3 Method Objects\nMethods are bound function objects. Methods are always bound to an instance of a user-defined class. Unbound\nmethods(methodsboundtoaclassobject)arenolongeravailable.\nPyTypeObjectPyMethod_Type\nThisinstanceofPyTypeObjectrepresentsthePythonmethodtype. ThisisexposedtoPythonprogramsas\ntypes.MethodType.\nintPyMethod_Check(PyObject*o)\nReturn true if o is a method object (has type PyMethod_Type). The parameter must not be NULL. This\nfunctionalwayssucceeds.\nPyObject*PyMethod_New(PyObject*func,PyObject*self)\nReturn value: New reference. Return a new method object, with func being any callable object and self the\ninstancethemethodshouldbebound. funcisthefunctionthatwillbecalledwhenthemethodiscalled. self\nmustnotbeNULL.\nPyObject*PyMethod_Function(PyObject*meth)\nReturnvalue: Borrowedreference. Returnthefunctionobjectassociatedwiththemethodmeth.\nPyObject*PyMethod_GET_FUNCTION(PyObject*meth)\nReturnvalue: Borrowedreference. MacroversionofPyMethod_Function()whichavoidserrorchecking.\nPyObject*PyMethod_Self(PyObject*meth)\nReturnvalue: Borrowedreference. Returntheinstanceassociatedwiththemethodmeth.\nPyObject*PyMethod_GET_SELF(PyObject*meth)\nReturnvalue: Borrowedreference. MacroversionofPyMethod_Self()whichavoidserrorchecking.\n8.5.4 Cell Objects\n\u201cCell\u201dobjectsareusedtoimplementvariablesreferencedbymultiplescopes. Foreachsuchvariable,acellobjectis\ncreatedtostorethevalue;thelocalvariablesofeachstackframethatreferencesthevaluecontainsareferencetothe\ncellsfromouterscopeswhichalsousethatvariable. Whenthevalueisaccessed,thevaluecontainedinthecellisused\ninsteadofthecellobjectitself. Thisde-referencingofthecellobjectrequiressupportfromthegeneratedbyte-code;\nthesearenotautomaticallyde-referencedwhenaccessed. Cellobjectsarenotlikelytobeusefulelsewhere.\ntypePyCellObject\nTheCstructureusedforcellobjects.\nPyTypeObjectPyCell_Type\nThetypeobjectcorrespondingtocellobjects.\nintPyCell_Check(PyObject*ob)\nReturntrueifobisacellobject;obmustnotbeNULL.Thisfunctionalwayssucceeds.\n168 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyCell_New(PyObject*ob)\nReturnvalue: Newreference. Createandreturnanewcellobjectcontainingthevalueob. Theparametermay\nbeNULL.\nPyObject*PyCell_Get(PyObject*cell)\nReturnvalue: Newreference. Returnthecontentsofthecellcell,whichcanbeNULL.Ifcellisnotacellobject,\nreturnsNULLwithanexceptionset.\nPyObject*PyCell_GET(PyObject*cell)\nReturnvalue: Borrowedreference. Returnthecontentsofthecellcell,butwithoutcheckingthatcell isnon-\nNULLandacellobject.\nintPyCell_Set(PyObject*cell,PyObject*value)\nSetthecontentsofthecellobjectcelltovalue. Thisreleasesthereferencetoanycurrentcontentofthecell.\nvaluemaybeNULL.cellmustbenon-NULL.\nOnsuccess,return0. Ifcellisnotacellobject,setanexceptionandreturn-1.\nvoidPyCell_SET(PyObject*cell,PyObject*value)\nSetsthevalueofthecellobjectcell tovalue. Noreferencecountsareadjusted,andnochecksaremadefor\nsafety;cellmustbenon-NULLandmustbeacellobject.\n8.5.5 Code Objects\nCodeobjectsarealow-leveldetailoftheCPythonimplementation. Eachonerepresentsachunkofexecutablecode\nthathasn\u2019tyetbeenboundintoafunction.\ntypePyCodeObject\nTheCstructureoftheobjectsusedtodescribecodeobjects. Thefieldsofthistypearesubjecttochangeat\nanytime.\nPyTypeObjectPyCode_Type\nThisisaninstanceofPyTypeObjectrepresentingthePythoncodeobject.\nintPyCode_Check(PyObject*co)\nReturntrueifcoisacodeobject. Thisfunctionalwayssucceeds.\nPy_ssize_tPyCode_GetNumFree(PyCodeObject*co)\nReturnthenumberoffree(closure)variablesinacodeobject.\nintPyUnstable_Code_GetFirstFree(PyCodeObject*co)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nReturnthepositionofthefirstfree(closure)variableinacodeobject.\nChangedinversion3.13: RenamedfromPyCode_GetFirstFreeaspartofUnstableCAPI.Theoldname\nisdeprecated,butwillremainavailableuntilthesignaturechangesagain.\nPyCodeObject*PyUnstable_Code_New(intargcount,intkwonlyargcount,intnlocals,intstacksize,intflags,\nPyObject*code,PyObject*consts,PyObject*names,PyObject\n*varnames,PyObject*freevars,PyObject*cellvars,PyObject*filename,\nPyObject*name,PyObject*qualname,intfirstlineno,PyObject\n*linetable,PyObject*exceptiontable)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\n8.5. FunctionObjects 169\nThePython/CAPI,Release3.13.3\nReturnanewcodeobject. Ifyouneedadummycodeobjecttocreateaframe, usePyCode_NewEmpty()\ninstead.\nSincethedefinitionofthebytecodechangesoften,callingPyUnstable_Code_New()directlycanbindyou\ntoaprecisePythonversion.\nThe many arguments of this function are inter-dependent in complex ways, meaning that subtle changes to\nvaluesarelikelytoresultinincorrectexecutionorVMcrashes. Usethisfunctiononlywithextremecare.\nChangedinversion3.11: Addedqualnameandexceptiontableparameters.\nChangedinversion3.12: RenamedfromPyCode_NewaspartofUnstableCAPI.Theoldnameisdeprecated,\nbutwillremainavailableuntilthesignaturechangesagain.\nPyCodeObject*PyUnstable_Code_NewWithPosOnlyArgs(intargcount,intposonlyargcount,int\nkwonlyargcount,intnlocals,intstacksize,intflags,\nPyObject*code,PyObject*consts,PyObject\n*names,PyObject*varnames,PyObject*freevars,\nPyObject*cellvars,PyObject*filename,PyObject\n*name,PyObject*qualname,intfirstlineno,\nPyObject*linetable,PyObject*exceptiontable)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nSimilar to PyUnstable_Code_New(), but with an extra \u201cposonlyargcount\u201d for positional-only arguments.\nThesamecaveatsthatapplytoPyUnstable_Code_Newalsoapplytothisfunction.\nAddedinversion3.8: asPyCode_NewWithPosOnlyArgs\nChangedinversion3.11: Addedqualnameandexceptiontableparameters.\nChangedinversion3.12: RenamedtoPyUnstable_Code_NewWithPosOnlyArgs. Theoldnameisdep-\nrecated,butwillremainavailableuntilthesignaturechangesagain.\nPyCodeObject*PyCode_NewEmpty(constchar*filename,constchar*funcname,intfirstlineno)\nReturnvalue: Newreference. Returnanewemptycodeobjectwiththespecifiedfilename,functionname,and\nfirstlinenumber. TheresultingcodeobjectwillraiseanExceptionifexecuted.\nintPyCode_Addr2Line(PyCodeObject*co,intbyte_offset)\nReturnthelinenumberoftheinstructionthatoccursonorbeforebyte_offsetandendsafterit. Ifyoujust\nneedthelinenumberofaframe,usePyFrame_GetLineNumber()instead.\nForefficientlyiteratingoverthelinenumbersinacodeobject,usetheAPIdescribedinPEP626.\nintPyCode_Addr2Location(PyObject*co,intbyte_offset,int*start_line,int*start_column,int*end_line,int\n*end_column)\nSetsthepassedintpointerstothesourcecodelineandcolumnnumbersfortheinstructionatbyte_offset.\nSetsthevalueto0wheninformationisnotavailableforanyparticularelement.\nReturns1ifthefunctionsucceedsand0otherwise.\nAddedinversion3.11.\nPyObject*PyCode_GetCode(PyCodeObject*co)\nEquivalent to the Python code getattr(co, 'co_code'). Returns a strong reference to a\nPyBytesObjectrepresentingthebytecodeinacodeobject. Onerror,NULLisreturnedandanexceptionis\nraised.\nThis PyBytesObject may be created on-demand by the interpreter and does not necessarily represent the\nbytecodeactuallyexecutedbyCPython. Theprimaryusecaseforthisfunctionisdebuggersandprofilers.\nAddedinversion3.11.\n170 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyCode_GetVarnames(PyCodeObject*co)\nEquivalent to the Python code getattr(co, 'co_varnames'). Returns a new reference to a\nPyTupleObjectcontainingthenamesofthelocalvariables. Onerror,NULLisreturnedandanexceptionis\nraised.\nAddedinversion3.11.\nPyObject*PyCode_GetCellvars(PyCodeObject*co)\nEquivalent to the Python code getattr(co, 'co_cellvars'). Returns a new reference to a\nPyTupleObject containing the names of the local variables that are referenced by nested functions. On\nerror,NULLisreturnedandanexceptionisraised.\nAddedinversion3.11.\nPyObject*PyCode_GetFreevars(PyCodeObject*co)\nEquivalent to the Python code getattr(co, 'co_freevars'). Returns a new reference to a\nPyTupleObject containing the names of the free (closure) variables. On error, NULL is returned and an\nexceptionisraised.\nAddedinversion3.11.\nintPyCode_AddWatcher(PyCode_WatchCallbackcallback)\nRegister callback as a code object watcher for the current interpreter. Return an ID which may be passed\ntoPyCode_ClearWatcher(). Incaseoferror(e.g. nomorewatcherIDsavailable),return-1andsetan\nexception.\nAddedinversion3.12.\nintPyCode_ClearWatcher(intwatcher_id)\nClear watcher identified by watcher_id previously returned from PyCode_AddWatcher() for the current\ninterpreter. Return0onsuccess,or-1andsetanexceptiononerror(e.g. ifthegivenwatcher_id wasnever\nregistered.)\nAddedinversion3.12.\ntypePyCodeEvent\nEnumeration of possible code object watcher events: - PY_CODE_EVENT_CREATE -\nPY_CODE_EVENT_DESTROY\nAddedinversion3.12.\ntypedefint(*PyCode_WatchCallback)(PyCodeEventevent,PyCodeObject*co)\nTypeofacodeobjectwatchercallbackfunction.\nIfevent isPY_CODE_EVENT_CREATE,thenthecallbackisinvokedaftercohasbeenfullyinitialized. Other-\nwise,thecallbackisinvokedbeforethedestructionofcotakesplace,sothepriorstateofcocanbeinspected.\nIfevent isPY_CODE_EVENT_DESTROY,takingareferenceinthecallbacktotheabout-to-be-destroyedcode\nobjectwillresurrectitandpreventitfrombeingfreedatthistime. Whentheresurrectedobjectisdestroyed\nlater,anywatchercallbacksactiveatthattimewillbecalledagain.\nUsersofthisAPIshouldnotrelyoninternalruntimeimplementationdetails. Suchdetailsmayinclude, but\narenotlimitedto, theexactorderandtimingofcreationanddestructionofcodeobjects. Whilechangesin\nthesedetailsmayresultindifferencesobservablebywatchers(includingwhetheracallbackisinvokedornot),\nitdoesnotchangethesemanticsofthePythoncodebeingexecuted.\nIfthecallbacksetsanexception,itmustreturn-1;thisexceptionwillbeprintedasanunraisableexception\nusingPyErr_WriteUnraisable(). Otherwiseitshouldreturn0.\nTheremayalreadybeapendingexceptionsetonentrytothecallback. Inthiscase,thecallbackshouldreturn0\nwiththesameexceptionstillset. ThismeansthecallbackmaynotcallanyotherAPIthatcansetanexception\nunlessitsavesandclearstheexceptionstatefirst,andrestoresitbeforereturning.\nAddedinversion3.12.\n8.5. FunctionObjects 171\nThePython/CAPI,Release3.13.3\n8.5.6 Extra information\nTosupportlow-levelextensionstoframeevaluation,suchasexternaljust-in-timecompilers,itispossibletoattach\narbitraryextradatatocodeobjects.\nThesefunctionsarepartoftheunstableCAPItier: thisfunctionalityisaCPythonimplementationdetail,andthe\nAPImaychangewithoutdeprecationwarnings.\nPy_ssize_tPyUnstable_Eval_RequestCodeExtraIndex(freefuncfree)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nReturnanewanopaqueindexvalueusedtoaddingdatatocodeobjects.\nYou generally call this function once (per interpreter) and use the result with PyCode_GetExtra and\nPyCode_SetExtratomanipulatedataonindividualcodeobjects.\nIffreeisnotNULL:whenacodeobjectisdeallocated,freewillbecalledonnon-NULLdatastoredunderthe\nnewindex. UsePy_DecRef()whenstoringPyObject.\nAddedinversion3.6: as_PyEval_RequestCodeExtraIndex\nChanged in version 3.12: Renamed to PyUnstable_Eval_RequestCodeExtraIndex. The old private\nnameisdeprecated,butwillbeavailableuntiltheAPIchanges.\nintPyUnstable_Code_GetExtra(PyObject*code,Py_ssize_tindex,void**extra)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nSetextratotheextradatastoredunderthegivenindex. Return0onsuccess. Setanexceptionandreturn-1\nonfailure.\nIfnodatawassetundertheindex,setextratoNULLandreturn0withoutsettinganexception.\nAddedinversion3.6: as_PyCode_GetExtra\nChangedinversion3.12: RenamedtoPyUnstable_Code_GetExtra. Theoldprivatenameisdeprecated,\nbutwillbeavailableuntiltheAPIchanges.\nintPyUnstable_Code_SetExtra(PyObject*code,Py_ssize_tindex,void*extra)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nSettheextradatastoredunderthegivenindextoextra. Return0onsuccess. Setanexceptionandreturn-1\nonfailure.\nAddedinversion3.6: as_PyCode_SetExtra\nChangedinversion3.12: RenamedtoPyUnstable_Code_SetExtra. Theoldprivatenameisdeprecated,\nbutwillbeavailableuntiltheAPIchanges.\n172 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\n8.6 Other Objects\n8.6.1 File Objects\nThese APIs are a minimal emulation of the Python 2 C API for built-in file objects, which used to rely on the\nbufferedI/O(FILE*)supportfromtheCstandardlibrary. InPython3, filesandstreamsusethenewiomodule,\nwhichdefinesseverallayersoverthelow-levelunbufferedI/Ooftheoperatingsystem. Thefunctionsdescribedbelow\nareconvenienceCwrappersoverthesenewAPIs, andmeantmostlyforinternalerrorreportingintheinterpreter;\nthird-partycodeisadvisedtoaccesstheioAPIsinstead.\nPyObject*PyFile_FromFd(intfd,constchar*name,constchar*mode,intbuffering,constchar*encoding,const\nchar*errors,constchar*newline,intclosefd)\nReturnvalue: Newreference. PartoftheStableABI.CreateaPythonfileobjectfromthefiledescriptorofan\nalready opened file fd. The arguments name, encoding, errors and newline can be NULL to use the defaults;\nbuffering can be -1 to use the default. name is ignored and kept for backward compatibility. Return NULL\nonfailure. Foramorecomprehensivedescriptionofthearguments,pleaserefertotheio.open()function\ndocumentation.\n(cid:193) Warning\nSincePythonstreamshavetheirownbufferinglayer,mixingthemwithOS-levelfiledescriptorscanpro-\nducevariousissues(suchasunexpectedorderingofdata).\nChangedinversion3.2: Ignorenameattribute.\nintPyObject_AsFileDescriptor(PyObject*p)\nPartoftheStableABI.Returnthefiledescriptorassociatedwithpasanint. Iftheobjectisaninteger,its\nvalueisreturned. Ifnot,theobject\u2019sfileno()methodiscalledifitexists;themethodmustreturnaninteger,\nwhichisreturnedasthefiledescriptorvalue. Setsanexceptionandreturns-1onfailure.\nPyObject*PyFile_GetLine(PyObject*p,intn)\nReturnvalue: Newreference. PartoftheStableABI.Equivalenttop.readline([n]), thisfunctionreads\nonelinefromtheobjectp. pmaybeafileobjectoranyobjectwithareadline()method. Ifnis0,exactly\nonelineisread,regardlessofthelengthoftheline. Ifnisgreaterthan0,nomorethannbyteswillberead\nfromthefile;apartiallinecanbereturned. Inbothcases,anemptystringisreturnediftheendofthefileis\nreachedimmediately. Ifnislessthan0,however,onelineisreadregardlessoflength,butEOFErrorisraised\niftheendofthefileisreachedimmediately.\nintPyFile_SetOpenCodeHook(Py_OpenCodeHookFunctionhandler)\nOverridesthenormalbehaviorofio.open_code()topassitsparameterthroughtheprovidedhandler.\nThehandlerisafunctionoftype:\ntypedefPyObject*(*Py_OpenCodeHookFunction)(PyObject*,void*)\nEquivalent of PyObject *(*)(PyObject *path, void *userData), where path is guaranteed\ntobePyUnicodeObject.\nThe userData pointer is passed into the hook function. Since hook functions may be called from different\nruntimes,thispointershouldnotreferdirectlytoPythonstate.\nAsthishookisintentionallyusedduringimport,avoidimportingnewmodulesduringitsexecutionunlessthey\nareknowntobefrozenoravailableinsys.modules.\nOnceahookhasbeenset,itcannotberemovedorreplaced,andlatercallstoPyFile_SetOpenCodeHook()\nwillfail. Onfailure,thefunctionreturns-1andsetsanexceptioniftheinterpreterhasbeeninitialized.\nThisfunctionissafetocallbeforePy_Initialize().\nRaisesanauditingeventsetopencodehookwithnoarguments.\nAddedinversion3.8.\n8.6. OtherObjects 173\nThePython/CAPI,Release3.13.3\nintPyFile_WriteObject(PyObject*obj,PyObject*p,intflags)\nPartoftheStableABI.Writeobjectobjtofileobjectp. TheonlysupportedflagforflagsisPy_PRINT_RAW;\nifgiven,thestr()oftheobjectiswritteninsteadoftherepr(). Return0onsuccessor-1onfailure;the\nappropriateexceptionwillbeset.\nintPyFile_WriteString(constchar*s,PyObject*p)\nPartoftheStableABI.Writestrings tofileobjectp. Return0onsuccessor-1onfailure; theappropriate\nexceptionwillbeset.\n8.6.2 Module Objects\nPyTypeObjectPyModule_Type\nPartoftheStableABI.ThisinstanceofPyTypeObjectrepresentsthePythonmoduletype. Thisisexposed\ntoPythonprogramsastypes.ModuleType.\nintPyModule_Check(PyObject*p)\nReturntrueifpisamoduleobject,orasubtypeofamoduleobject. Thisfunctionalwayssucceeds.\nintPyModule_CheckExact(PyObject*p)\nReturntrueifpisamoduleobject,butnotasubtypeofPyModule_Type. Thisfunctionalwayssucceeds.\nPyObject*PyModule_NewObject(PyObject*name)\nReturn value: New reference. Part of the Stable ABI since version 3.7. Return a new module object with\nmodule.__name__ set to name. The module\u2019s __name__, __doc__, __package__ and __loader__\nattributesarefilledin(allbut__name__aresettoNone). Thecallerisresponsibleforsettinga__file__\nattribute.\nReturnNULLwithanexceptionsetonerror.\nAddedinversion3.3.\nChangedinversion3.4: __package__and__loader__arenowsettoNone.\nPyObject*PyModule_New(constchar*name)\nReturnvalue: Newreference. PartoftheStableABI.SimilartoPyModule_NewObject(),butthenameisa\nUTF-8encodedstringinsteadofaUnicodeobject.\nPyObject*PyModule_GetDict(PyObject*module)\nReturnvalue: Borrowedreference. PartoftheStableABI.Returnthedictionaryobjectthatimplementsmod-\nule\u2019snamespace; thisobjectisthesameasthe__dict__attributeofthemoduleobject. Ifmoduleisnota\nmoduleobject(orasubtypeofamoduleobject),SystemErrorisraisedandNULLisreturned.\nItisrecommendedextensionsuseotherPyModule_*andPyObject_*functionsratherthandirectlymanip-\nulateamodule\u2019s__dict__.\nPyObject*PyModule_GetNameObject(PyObject*module)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.7. Returnmodule\u2019s__name__value. If\nthemoduledoesnotprovideone,orifitisnotastring,SystemErrorisraisedandNULLisreturned.\nAddedinversion3.3.\nconstchar*PyModule_GetName(PyObject*module)\nPartoftheStableABI.SimilartoPyModule_GetNameObject()butreturnthenameencodedto'utf-8'.\nvoid*PyModule_GetState(PyObject*module)\nPartoftheStableABI.Returnthe\u201cstate\u201dofthemodule,thatis,apointertotheblockofmemoryallocatedat\nmodulecreationtime,orNULL.SeePyModuleDef.m_size.\nPyModuleDef *PyModule_GetDef(PyObject*module)\nPartoftheStableABI.ReturnapointertothePyModuleDef structfromwhichthemodulewascreated,or\nNULLifthemodulewasn\u2019tcreatedfromadefinition.\n174 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyModule_GetFilenameObject(PyObject*module)\nReturn value: New reference. Part of the Stable ABI. Return the name of the file from which module was\nloadedusingmodule\u2019s__file__attribute. Ifthisisnotdefined,orifitisnotastring,raiseSystemError\nandreturnNULL;otherwisereturnareferencetoaUnicodeobject.\nAddedinversion3.2.\nconstchar*PyModule_GetFilename(PyObject*module)\nPartoftheStableABI.SimilartoPyModule_GetFilenameObject()butreturnthefilenameencodedto\n\u2018utf-8\u2019.\nDeprecatedsinceversion3.2: PyModule_GetFilename()raisesUnicodeEncodeErroronunencodable\nfilenames,usePyModule_GetFilenameObject()instead.\nInitializingCmodules\nModulesobjectsareusuallycreatedfromextensionmodules(sharedlibrarieswhichexportaninitializationfunction),\nor compiled-in modules (where the initialization function is added using PyImport_AppendInittab()). See\nbuildingorextending-with-embeddingfordetails.\nThe initialization function can either pass a module definition instance to PyModule_Create(), and return the\nresultingmoduleobject,orrequest\u201cmulti-phaseinitialization\u201dbyreturningthedefinitionstructitself.\ntypePyModuleDef\nPart of the Stable ABI (including all members). The module definition struct, which holds all information\nneededtocreateamoduleobject. Thereisusuallyonlyonestaticallyinitializedvariableofthistypeforeach\nmodule.\nPyModuleDef_Basem_base\nAlwaysinitializethismembertoPyModuleDef_HEAD_INIT.\nconstchar*m_name\nNameforthenewmodule.\nconstchar*m_doc\nDocstringforthemodule;usuallyadocstringvariablecreatedwithPyDoc_STRVARisused.\nPy_ssize_tm_size\nModule state may be kept in a per-module memory area that can be retrieved with\nPyModule_GetState(), rather than in static globals. This makes modules safe for use in mul-\ntiplesub-interpreters.\nThismemoryareaisallocatedbasedonm_sizeonmodulecreation,andfreedwhenthemoduleobjectis\ndeallocated,afterthem_freefunctionhasbeencalled,ifpresent.\nSetting m_size to -1 means that the module does not support sub-interpreters, because it has global\nstate.\nSettingittoanon-negativevaluemeansthatthemodulecanbere-initializedandspecifiestheadditional\namountofmemoryitrequiresforitsstate. Non-negativem_sizeisrequiredformulti-phaseinitializa-\ntion.\nSeePEP3121formoredetails.\nPyMethodDef *m_methods\nApointertoatableofmodule-levelfunctions,describedbyPyMethodDef values. CanbeNULLifno\nfunctionsarepresent.\nPyModuleDef_Slot*m_slots\nAnarrayofslotdefinitionsformulti-phaseinitialization,terminatedbya{0, NULL}entry. Whenusing\nsingle-phaseinitialization,m_slotsmustbeNULL.\nChangedinversion3.5: Priortoversion3.5,thismemberwasalwayssettoNULL,andwasdefinedas:\n8.6. OtherObjects 175\nThePython/CAPI,Release3.13.3\ninquirym_reload\ntraverseprocm_traverse\nAtraversalfunctiontocallduringGCtraversalofthemoduleobject,orNULLifnotneeded.\nThis function is not called if the module state was requested but is not allocated yet. This is the case\nimmediately after the module is created and before the module is executed (Py_mod_exec function).\nMoreprecisely,thisfunctionisnotcalledifm_sizeisgreaterthan0andthemodulestate(asreturned\nbyPyModule_GetState())isNULL.\nChangedinversion3.9: Nolongercalledbeforethemodulestateisallocated.\ninquirym_clear\nAclearfunctiontocallduringGCclearingofthemoduleobject,orNULLifnotneeded.\nThis function is not called if the module state was requested but is not allocated yet. This is the case\nimmediately after the module is created and before the module is executed (Py_mod_exec function).\nMoreprecisely,thisfunctionisnotcalledifm_sizeisgreaterthan0andthemodulestate(asreturned\nbyPyModule_GetState())isNULL.\nLikePyTypeObject.tp_clear,thisfunctionisnotalwayscalledbeforeamoduleisdeallocated. For\nexample, when reference counting is enough to determine that an object is no longer used, the cyclic\ngarbagecollectorisnotinvolvedandm_freeiscalleddirectly.\nChangedinversion3.9: Nolongercalledbeforethemodulestateisallocated.\nfreefuncm_free\nAfunctiontocallduringdeallocationofthemoduleobject,orNULLifnotneeded.\nThis function is not called if the module state was requested but is not allocated yet. This is the case\nimmediately after the module is created and before the module is executed (Py_mod_exec function).\nMoreprecisely,thisfunctionisnotcalledifm_sizeisgreaterthan0andthemodulestate(asreturned\nbyPyModule_GetState())isNULL.\nChangedinversion3.9: Nolongercalledbeforethemodulestateisallocated.\nSingle-phaseinitialization\nThemoduleinitializationfunctionmaycreateandreturnthemoduleobjectdirectly. Thisisreferredtoas\u201csingle-\nphaseinitialization\u201d,andusesoneofthefollowingtwomodulecreationfunctions:\nPyObject*PyModule_Create(PyModuleDef *def)\nReturn value: New reference. Create a new module object, given the definition in def. This behaves like\nPyModule_Create2()withmodule_api_versionsettoPYTHON_API_VERSION.\nPyObject*PyModule_Create2(PyModuleDef *def,intmodule_api_version)\nReturn value: New reference. Part of the Stable ABI. Create a new module object, given the definition in\ndef,assumingtheAPIversionmodule_api_version. Ifthatversiondoesnotmatchtheversionoftherunning\ninterpreter,aRuntimeWarningisemitted.\nReturnNULLwithanexceptionsetonerror.\n(cid:174) Note\nMostusesofthisfunctionshouldbeusingPyModule_Create()instead;onlyusethisifyouaresureyou\nneedit.\nBefore it is returned from in the initialization function, the resulting module object is typically populated using\nfunctionslikePyModule_AddObjectRef().\n176 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nMulti-phaseinitialization\nAnalternatewaytospecifyextensionsistorequest\u201cmulti-phaseinitialization\u201d. Extensionmodulescreatedthisway\nbehavemorelikePythonmodules: theinitializationissplitbetweenthecreationphase,whenthemoduleobjectis\ncreated,andtheexecutionphase,whenitispopulated. Thedistinctionissimilartothe__new__()and__init__()\nmethodsofclasses.\nUnlikemodulescreatedusingsingle-phaseinitialization,thesemodulesarenotsingletons: ifthesys.modulesentry\nisremovedandthemoduleisre-imported,anewmoduleobjectiscreated,andtheoldmoduleissubjecttonormal\ngarbagecollection\u2013aswithPythonmodules. Bydefault,multiplemodulescreatedfromthesamedefinitionshould\nbeindependent: changestooneshouldnotaffecttheothers. Thismeansthatallstateshouldbespecifictothemodule\nobject (using e.g. using PyModule_GetState()), or its contents (such as the module\u2019s __dict__ or individual\nclassescreatedwithPyType_FromSpec()).\nAllmodulescreatedusingmulti-phaseinitializationareexpectedtosupportsub-interpreters. Makingsuremultiple\nmodulesareindependentistypicallyenoughtoachievethis.\nTo request multi-phase initialization, the initialization function (PyInit_modulename) returns a PyModuleDef in-\nstance with non-empty m_slots. Before it is returned, the PyModuleDef instance must be initialized with the\nfollowingfunction:\nPyObject*PyModuleDef_Init(PyModuleDef *def)\nReturnvalue: Borrowedreference. PartoftheStableABIsinceversion3.5. Ensuresamoduledefinitionisa\nproperlyinitializedPythonobjectthatcorrectlyreportsitstypeandreferencecount.\nReturnsdef casttoPyObject*,orNULLifanerroroccurred.\nAddedinversion3.5.\nThem_slotsmemberofthemoduledefinitionmustpointtoanarrayofPyModuleDef_Slotstructures:\ntypePyModuleDef_Slot\nintslot\nAslotID,chosenfromtheavailablevaluesexplainedbelow.\nvoid*value\nValueoftheslot,whosemeaningdependsontheslotID.\nAddedinversion3.5.\nThem_slotsarraymustbeterminatedbyaslotwithid0.\nTheavailableslottypesare:\nPy_mod_create\nSpecifiesafunctionthatiscalledtocreatethemoduleobjectitself. Thevaluepointerofthisslotmustpoint\ntoafunctionofthesignature:\nPyObject*create_module(PyObject*spec,PyModuleDef *def)\nThefunctionreceivesaModuleSpecinstance,asdefinedinPEP451,andthemoduledefinition. Itshould\nreturnanewmoduleobject,orsetanerrorandreturnNULL.\nThisfunctionshouldbekeptminimal. Inparticular,itshouldnotcallarbitraryPythoncode,astryingtoimport\nthesamemoduleagainmayresultinaninfiniteloop.\nMultiplePy_mod_createslotsmaynotbespecifiedinonemoduledefinition.\nIf Py_mod_create is not specified, the import machinery will create a normal module object using\nPyModule_New(). Thenameistakenfromspec,notthedefinition,toallowextensionmodulestodynami-\ncallyadjusttotheirplaceinthemodulehierarchyandbeimportedunderdifferentnamesthroughsymlinks,\nallwhilesharingasinglemoduledefinition.\nThereisnorequirementforthereturnedobjecttobeaninstanceofPyModule_Type. Anytypecanbeused,\naslongasitsupportssettingandgettingimport-relatedattributes. However,onlyPyModule_Typeinstances\n8.6. OtherObjects 177\nThePython/CAPI,Release3.13.3\nmaybereturnedifthePyModuleDefhasnon-NULLm_traverse,m_clear,m_free;non-zerom_size;or\nslotsotherthanPy_mod_create.\nPy_mod_exec\nSpecifiesafunctionthatiscalledtoexecutethemodule. ThisisequivalenttoexecutingthecodeofaPython\nmodule: typically,thisfunctionaddsclassesandconstantstothemodule. Thesignatureofthefunctionis:\nintexec_module(PyObject*module)\nIfmultiplePy_mod_execslotsarespecified,theyareprocessedintheordertheyappearinthem_slotsarray.\nPy_mod_multiple_interpreters\nSpecifiesoneofthefollowingvalues:\nPy_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED\nThemoduledoesnotsupportbeingimportedinsubinterpreters.\nPy_MOD_MULTIPLE_INTERPRETERS_SUPPORTED\nThemodulesupportsbeingimportedinsubinterpreters,butonlywhentheysharethemaininterpreter\u2019s\nGIL.(Seeisolating-extensions-howto.)\nPy_MOD_PER_INTERPRETER_GIL_SUPPORTED\nThe module supports being imported in subinterpreters, even when they have their own GIL. (See\nisolating-extensions-howto.)\nThisslotdetermineswhetherornotimportingthismoduleinasubinterpreterwillfail.\nMultiplePy_mod_multiple_interpretersslotsmaynotbespecifiedinonemoduledefinition.\nIf Py_mod_multiple_interpreters is not specified, the import machinery defaults to\nPy_MOD_MULTIPLE_INTERPRETERS_SUPPORTED.\nAddedinversion3.12.\nPy_mod_gil\nSpecifiesoneofthefollowingvalues:\nPy_MOD_GIL_USED\nThemoduledependsonthepresenceoftheglobalinterpreterlock(GIL),andmayaccessglobalstate\nwithoutsynchronization.\nPy_MOD_GIL_NOT_USED\nThemoduleissafetorunwithoutanactiveGIL.\nThisslotisignoredbyPythonbuildsnotconfiguredwith--disable-gil. Otherwise,itdetermineswhether\nornotimportingthismodulewillcausetheGILtobeautomaticallyenabled. Seewhatsnew313-free-threaded-\ncpythonformoredetail.\nMultiplePy_mod_gilslotsmaynotbespecifiedinonemoduledefinition.\nIfPy_mod_gilisnotspecified,theimportmachinerydefaultstoPy_MOD_GIL_USED.\nAddedinversion3.13.\nSeePEP489formoredetailsonmulti-phaseinitialization.\nLow-levelmodulecreationfunctions\nThe following functions are called under the hood when using multi-phase initialization. They can be used di-\nrectly,forexamplewhencreatingmoduleobjectsdynamically. NotethatbothPyModule_FromDefAndSpecand\nPyModule_ExecDefmustbecalledtofullyinitializeamodule.\n178 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyModule_FromDefAndSpec(PyModuleDef *def,PyObject*spec)\nReturn value: New reference. Create a new module object, given the definition in def and the\nModuleSpec spec. This behaves like PyModule_FromDefAndSpec2() with module_api_version set to\nPYTHON_API_VERSION.\nAddedinversion3.5.\nPyObject*PyModule_FromDefAndSpec2(PyModuleDef *def,PyObject*spec,intmodule_api_version)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.7. Createanewmoduleobject,giventhe\ndefinitionindefandtheModuleSpecspec,assumingtheAPIversionmodule_api_version. Ifthatversiondoes\nnotmatchtheversionoftherunninginterpreter,aRuntimeWarningisemitted.\nReturnNULLwithanexceptionsetonerror.\n(cid:174) Note\nMostusesofthisfunctionshouldbeusingPyModule_FromDefAndSpec()instead;onlyusethisifyou\naresureyouneedit.\nAddedinversion3.5.\nintPyModule_ExecDef(PyObject*module,PyModuleDef *def)\nPartoftheStableABIsinceversion3.7. Processanyexecutionslots(Py_mod_exec)givenindef.\nAddedinversion3.5.\nintPyModule_SetDocString(PyObject*module,constchar*docstring)\nPart of the Stable ABI since version 3.7. Set the docstring for module to docstring. This function is\ncalled automatically when creating a module from PyModuleDef, using either PyModule_Create or\nPyModule_FromDefAndSpec.\nAddedinversion3.5.\nintPyModule_AddFunctions(PyObject*module,PyMethodDef *functions)\nPartoftheStableABIsinceversion3.7. AddthefunctionsfromtheNULLterminatedfunctionsarraytomodule.\nRefertothePyMethodDefdocumentationfordetailsonindividualentries(duetothelackofasharedmodule\nnamespace,modulelevel\u201cfunctions\u201dimplementedinCtypicallyreceivethemoduleastheirfirstparameter,\nmaking them similar to instance methods on Python classes). This function is called automatically when\ncreatingamodulefromPyModuleDef,usingeitherPyModule_CreateorPyModule_FromDefAndSpec.\nAddedinversion3.5.\nSupportfunctions\nThemoduleinitializationfunction(ifusingsinglephaseinitialization)orafunctioncalledfromamoduleexecution\nslot(ifusingmulti-phaseinitialization),canusethefollowingfunctionstohelpinitializethemodulestate:\nintPyModule_AddObjectRef(PyObject*module,constchar*name,PyObject*value)\nPartoftheStableABIsinceversion3.10. Addanobjecttomoduleasname. Thisisaconveniencefunction\nwhichcanbeusedfromthemodule\u2019sinitializationfunction.\nOnsuccess,return0. Onerror,raiseanexceptionandreturn-1.\nExampleusage:\nstatic int\nadd_spam(PyObject *module, int value)\n{\nPyObject *obj = PyLong_FromLong(value);\nif (obj == NULL) {\nreturn -1;\n(continuesonnextpage)\n8.6. OtherObjects 179\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\n}\nint res = PyModule_AddObjectRef(module, \"spam\", obj);\nPy_DECREF(obj);\nreturn res;\n}\nTobeconvenient,thefunctionacceptsNULLvaluewithanexceptionset. Inthiscase,return-1andjustleave\ntheraisedexceptionunchanged.\nTheexamplecanalsobewrittenwithoutcheckingexplicitlyifobjisNULL:\nstatic int\nadd_spam(PyObject *module, int value)\n{\nPyObject *obj = PyLong_FromLong(value);\nint res = PyModule_AddObjectRef(module, \"spam\", obj);\nPy_XDECREF(obj);\nreturn res;\n}\nNotethatPy_XDECREF()shouldbeusedinsteadofPy_DECREF()inthiscase,sinceobjcanbeNULL.\nThe number of different name strings passed to this function should be kept small, usually by\nonly using statically allocated strings as name. For names that aren\u2019t known at compile time, pre-\nfer calling PyUnicode_FromString() and PyObject_SetAttr() directly. For more details, see\nPyUnicode_InternFromString(),whichmaybeusedinternallytocreateakeyobject.\nAddedinversion3.10.\nintPyModule_Add(PyObject*module,constchar*name,PyObject*value)\nPartoftheStableABIsinceversion3.13. SimilartoPyModule_AddObjectRef(),but\u201csteals\u201dareference\ntovalue. Itcanbecalledwitharesultoffunctionthatreturnsanewreferencewithoutbotheringtocheckits\nresultorevensavingittoavariable.\nExampleusage:\nif (PyModule_Add(module, \"spam\", PyBytes_FromString(value)) < 0) {\ngoto error;\n}\nAddedinversion3.13.\nintPyModule_AddObject(PyObject*module,constchar*name,PyObject*value)\nPartoftheStableABI.SimilartoPyModule_AddObjectRef(),butstealsareferencetovalueonsuccess\n(ifitreturns0).\nThenewPyModule_Add() orPyModule_AddObjectRef() functionsarerecommended, sinceitiseasy\ntointroducereferenceleaksbymisusingthePyModule_AddObject()function.\n(cid:174) Note\nUnlikeotherfunctionsthatstealreferences,PyModule_AddObject()onlyreleasesthereferencetovalue\nonsuccess.\nThismeansthatitsreturnvaluemustbechecked,andcallingcodemustPy_XDECREF()valuemanually\nonerror.\nExampleusage:\n180 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject *obj = PyBytes_FromString(value);\nif (PyModule_AddObject(module, \"spam\", obj) < 0) {\n// If 'obj' is not NULL and PyModule_AddObject() failed,\n// 'obj' strong reference must be deleted with Py_XDECREF().\n// If 'obj' is NULL, Py_XDECREF() does nothing.\nPy_XDECREF(obj);\ngoto error;\n}\n// PyModule_AddObject() stole a reference to obj:\n// Py_XDECREF(obj) is not needed here.\nDeprecatedsinceversion3.13: PyModule_AddObject()issoftdeprecated.\nintPyModule_AddIntConstant(PyObject*module,constchar*name,longvalue)\nPartoftheStableABI.Addanintegerconstanttomoduleasname. Thisconveniencefunctioncanbeused\nfromthemodule\u2019sinitializationfunction. Return-1withanexceptionsetonerror,0onsuccess.\nThisisaconveniencefunctionthatcallsPyLong_FromLong()andPyModule_AddObjectRef();seetheir\ndocumentationfordetails.\nintPyModule_AddStringConstant(PyObject*module,constchar*name,constchar*value)\nPartoftheStableABI.Addastringconstanttomoduleasname. Thisconveniencefunctioncanbeusedfrom\nthemodule\u2019sinitializationfunction. ThestringvaluemustbeNULL-terminated. Return-1withanexception\nsetonerror,0onsuccess.\nThis is a convenience function that calls PyUnicode_InternFromString() and\nPyModule_AddObjectRef();seetheirdocumentationfordetails.\nPyModule_AddIntMacro(module,macro)\nAdd an int constant to module. The name and the value are taken from macro. For example\nPyModule_AddIntMacro(module, AF_INET)addstheintconstantAF_INETwiththevalueofAF_INET\ntomodule. Return-1withanexceptionsetonerror,0onsuccess.\nPyModule_AddStringMacro(module,macro)\nAddastringconstanttomodule.\nintPyModule_AddType(PyObject*module,PyTypeObject*type)\nPartoftheStableABIsinceversion3.10. Addatypeobjecttomodule. Thetypeobjectisfinalizedbycalling\ninternallyPyType_Ready(). Thenameofthetypeobjectistakenfromthelastcomponentoftp_nameafter\ndot. Return-1withanexceptionsetonerror,0onsuccess.\nAddedinversion3.9.\nintPyUnstable_Module_SetGIL(PyObject*module,void*gil)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nIndicate that module does or does not support running without the global interpreter lock (GIL), using one\nofthevaluesfromPy_mod_gil. Itmustbecalledduringmodule\u2019sinitializationfunction. Ifthisfunctionis\nnotcalledduringmoduleinitialization, theimportmachineryassumesthemoduledoesnotsupportrunning\nwithouttheGIL.ThisfunctionisonlyavailableinPythonbuildsconfiguredwith--disable-gil. Return\n-1withanexceptionsetonerror,0onsuccess.\nAddedinversion3.13.\n8.6. OtherObjects 181\nThePython/CAPI,Release3.13.3\nModulelookup\nSingle-phaseinitializationcreatessingletonmodulesthatcanbelookedupinthecontextofthecurrentinterpreter.\nThisallowsthemoduleobjecttoberetrievedlaterwithonlyareferencetothemoduledefinition.\nThesefunctionswillnotworkonmodulescreatedusingmulti-phaseinitialization,sincemultiplesuchmodulescan\nbecreatedfromasingledefinition.\nPyObject*PyState_FindModule(PyModuleDef *def)\nReturnvalue: Borrowedreference. PartoftheStableABI.Returnsthemoduleobjectthatwascreatedfromdef\nforthecurrentinterpreter. Thismethodrequiresthatthemoduleobjecthasbeenattachedtotheinterpreter\nstatewithPyState_AddModule()beforehand. Incasethecorrespondingmoduleobjectisnotfoundorhas\nnotbeenattachedtotheinterpreterstateyet,itreturnsNULL.\nintPyState_AddModule(PyObject*module,PyModuleDef *def)\nPartoftheStableABIsinceversion3.3. Attachesthemoduleobjectpassedtothefunctiontotheinterpreter\nstate. ThisallowsthemoduleobjecttobeaccessibleviaPyState_FindModule().\nOnlyeffectiveonmodulescreatedusingsingle-phaseinitialization.\nPythoncallsPyState_AddModuleautomaticallyafterimportingamodule,soitisunnecessary(butharm-\nless)tocallitfrommoduleinitializationcode. Anexplicitcallisneededonlyifthemodule\u2019sowninitcode\nsubsequentlycallsPyState_FindModule. Thefunctionismainlyintendedforimplementingalternativeim-\nportmechanisms(eitherbycallingitdirectly,orbyreferringtoitsimplementationfordetailsoftherequired\nstateupdates).\nThecallermustholdtheGIL.\nReturn-1withanexceptionsetonerror,0onsuccess.\nAddedinversion3.3.\nintPyState_RemoveModule(PyModuleDef *def)\nPart of the Stable ABI since version 3.3. Removes the module object created from def from the interpreter\nstate. Return-1withanexceptionsetonerror,0onsuccess.\nThecallermustholdtheGIL.\nAddedinversion3.3.\n8.6.3 Iterator Objects\nPythonprovidestwogeneral-purposeiteratorobjects. Thefirst,asequenceiterator,workswithanarbitrarysequence\nsupportingthe__getitem__()method. Thesecondworkswithacallableobjectandasentinelvalue,callingthe\ncallableforeachiteminthesequence,andendingtheiterationwhenthesentinelvalueisreturned.\nPyTypeObjectPySeqIter_Type\nPartoftheStableABI.TypeobjectforiteratorobjectsreturnedbyPySeqIter_New()andtheone-argument\nformoftheiter()built-infunctionforbuilt-insequencetypes.\nintPySeqIter_Check(PyObject*op)\nReturntrueifthetypeofopisPySeqIter_Type. Thisfunctionalwayssucceeds.\nPyObject*PySeqIter_New(PyObject*seq)\nReturn value: New reference. Part of the Stable ABI. Return an iterator that works with a general sequence\nobject,seq. TheiterationendswhenthesequenceraisesIndexErrorforthesubscriptingoperation.\nPyTypeObjectPyCallIter_Type\nPartoftheStableABI.TypeobjectforiteratorobjectsreturnedbyPyCallIter_New()andthetwo-argument\nformoftheiter()built-infunction.\nintPyCallIter_Check(PyObject*op)\nReturntrueifthetypeofopisPyCallIter_Type. Thisfunctionalwayssucceeds.\n182 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyCallIter_New(PyObject*callable,PyObject*sentinel)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewiterator. Thefirstparameter,callable,can\nbeanyPythoncallableobjectthatcanbecalledwithnoparameters;eachcalltoitshouldreturnthenextitem\nintheiteration. Whencallablereturnsavalueequaltosentinel,theiterationwillbeterminated.\n8.6.4 Descriptor Objects\n\u201cDescriptors\u201dareobjectsthatdescribesomeattributeofanobject. Theyarefoundinthedictionaryoftypeobjects.\nPyTypeObjectPyProperty_Type\nPartoftheStableABI.Thetypeobjectforthebuilt-indescriptortypes.\nPyObject*PyDescr_NewGetSet(PyTypeObject*type,structPyGetSetDef *getset)\nReturnvalue: Newreference. PartoftheStableABI.\nPyObject*PyDescr_NewMember(PyTypeObject*type,structPyMemberDef *meth)\nReturnvalue: Newreference. PartoftheStableABI.\nPyObject*PyDescr_NewMethod(PyTypeObject*type,structPyMethodDef *meth)\nReturnvalue: Newreference. PartoftheStableABI.\nPyObject*PyDescr_NewWrapper(PyTypeObject*type,structwrapperbase*wrapper,void*wrapped)\nReturnvalue: Newreference.\nPyObject*PyDescr_NewClassMethod(PyTypeObject*type,PyMethodDef *method)\nReturnvalue: Newreference. PartoftheStableABI.\nintPyDescr_IsData(PyObject*descr)\nReturnnon-zeroifthedescriptorobjectsdescrdescribesadataattribute,or0ifitdescribesamethod. descr\nmustbeadescriptorobject;thereisnoerrorchecking.\nPyObject*PyWrapper_New(PyObject*,PyObject*)\nReturnvalue: Newreference. PartoftheStableABI.\n8.6.5 Slice Objects\nPyTypeObjectPySlice_Type\nPartoftheStableABI.Thetypeobjectforsliceobjects. ThisisthesameassliceinthePythonlayer.\nintPySlice_Check(PyObject*ob)\nReturntrueifobisasliceobject;obmustnotbeNULL.Thisfunctionalwayssucceeds.\nPyObject*PySlice_New(PyObject*start,PyObject*stop,PyObject*step)\nReturnvalue: Newreference. PartoftheStableABI.Returnanewsliceobjectwiththegivenvalues. Thestart,\nstop,andstepparametersareusedasthevaluesofthesliceobjectattributesofthesamenames. Anyofthe\nvaluesmaybeNULL,inwhichcasetheNonewillbeusedforthecorrespondingattribute.\nReturnNULLwithanexceptionsetifthenewobjectcouldnotbeallocated.\nintPySlice_GetIndices(PyObject*slice,Py_ssize_tlength,Py_ssize_t*start,Py_ssize_t*stop,Py_ssize_t\n*step)\nPartoftheStableABI.Retrievethestart,stopandstepindicesfromthesliceobjectslice,assumingasequence\noflengthlength. Treatsindicesgreaterthanlengthaserrors.\nReturns0onsuccessand-1onerrorwithnoexceptionset(unlessoneoftheindiceswasnotNoneandfailed\ntobeconvertedtoaninteger,inwhichcase-1isreturnedwithanexceptionset).\nYouprobablydonotwanttousethisfunction.\nChangedinversion3.2: TheparametertypeforthesliceparameterwasPySliceObject*before.\n8.6. OtherObjects 183\nThePython/CAPI,Release3.13.3\nintPySlice_GetIndicesEx(PyObject*slice,Py_ssize_tlength,Py_ssize_t*start,Py_ssize_t*stop,Py_ssize_t\n*step,Py_ssize_t*slicelength)\nPartoftheStableABI.UsablereplacementforPySlice_GetIndices(). Retrievethestart,stop,andstep\nindices from the slice object slice assuming a sequence of length length, and store the length of the slice in\nslicelength. Outofboundsindicesareclippedinamannerconsistentwiththehandlingofnormalslices.\nReturn0onsuccessand-1onerrorwithanexceptionset.\n(cid:174) Note\nThisfunctionisconsiderednotsafeforresizablesequences. Itsinvocationshouldbereplacedbyacombi-\nnationofPySlice_Unpack()andPySlice_AdjustIndices()where\nif (PySlice_GetIndicesEx(slice, length, &start, &stop, &step, &slicelength)\n,\u2192< 0) {\n// return error\n}\nisreplacedby\nif (PySlice_Unpack(slice, &start, &stop, &step) < 0) {\n// return error\n}\nslicelength = PySlice_AdjustIndices(length, &start, &stop, step);\nChangedinversion3.2: TheparametertypeforthesliceparameterwasPySliceObject*before.\nChanged in version 3.6.1: If Py_LIMITED_API is not set or set to the value between 0x03050400 and\n0x03060000 (not including) or 0x03060100 or higher PySlice_GetIndicesEx() is implemented as a\nmacro using PySlice_Unpack() and PySlice_AdjustIndices(). Arguments start, stop and step are\nevaluatedmorethanonce.\nDeprecatedsinceversion3.6.1: IfPy_LIMITED_APIissettothevaluelessthan0x03050400orbetween\n0x03060000and0x03060100(notincluding)PySlice_GetIndicesEx()isadeprecatedfunction.\nintPySlice_Unpack(PyObject*slice,Py_ssize_t*start,Py_ssize_t*stop,Py_ssize_t*step)\nPartoftheStableABIsinceversion3.7. Extractthestart,stopandstepdatamembersfromasliceobjectasC\nintegers. SilentlyreducevalueslargerthanPY_SSIZE_T_MAXtoPY_SSIZE_T_MAX,silentlyboostthestart\nandstopvalueslessthanPY_SSIZE_T_MINtoPY_SSIZE_T_MIN,andsilentlyboostthestepvalueslessthan\n-PY_SSIZE_T_MAXto-PY_SSIZE_T_MAX.\nReturn-1withanexceptionsetonerror,0onsuccess.\nAddedinversion3.6.1.\nPy_ssize_tPySlice_AdjustIndices(Py_ssize_tlength,Py_ssize_t*start,Py_ssize_t*stop,Py_ssize_tstep)\nPartoftheStableABIsinceversion3.7. Adjuststart/endsliceindicesassumingasequenceofthespecified\nlength. Outofboundsindicesareclippedinamannerconsistentwiththehandlingofnormalslices.\nReturnthelengthoftheslice. Alwayssuccessful. Doesn\u2019tcallPythoncode.\nAddedinversion3.6.1.\nEllipsisObject\nPyTypeObjectPyEllipsis_Type\nPartoftheStableABI.ThetypeofPythonEllipsisobject. Sameastypes.EllipsisTypeinthePython\nlayer.\nPyObject*Py_Ellipsis\nThePythonEllipsisobject. Thisobjecthasnomethods. LikePy_None,itisanimmortalsingletonobject.\nChangedinversion3.12: Py_Ellipsisisimmortal.\n184 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\n8.6.6 MemoryView objects\nAmemoryviewobjectexposestheClevelbufferinterfaceasaPythonobjectwhichcanthenbepassedaroundlike\nanyotherobject.\nPyObject*PyMemoryView_FromObject(PyObject*obj)\nReturn value: New reference. Part of the Stable ABI. Create a memoryview object from an object that pro-\nvidesthebufferinterface. Ifobj supportswritablebufferexports,thememoryviewobjectwillberead/write,\notherwiseitmaybeeitherread-onlyorread/writeatthediscretionoftheexporter.\nPyBUF_READ\nFlagtorequestareadonlybuffer.\nPyBUF_WRITE\nFlagtorequestawritablebuffer.\nPyObject*PyMemoryView_FromMemory(char*mem,Py_ssize_tsize,intflags)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.7. Createamemoryviewobjectusingmem\nastheunderlyingbuffer. flagscanbeoneofPyBUF_READorPyBUF_WRITE.\nAddedinversion3.3.\nPyObject*PyMemoryView_FromBuffer(constPy_buffer*view)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.11. Createamemoryviewobjectwrapping\nthe given buffer structure view. For simple byte buffers, PyMemoryView_FromMemory() is the preferred\nfunction.\nPyObject*PyMemoryView_GetContiguous(PyObject*obj,intbuffertype,charorder)\nReturnvalue: Newreference. PartoftheStableABI.Createamemoryviewobjecttoacontiguouschunkof\nmemory(ineither\u2018C\u2019or\u2018F\u2019ortranorder)fromanobjectthatdefinesthebufferinterface. Ifmemoryiscontigu-\nous,thememoryviewobjectpointstotheoriginalmemory. Otherwise,acopyismadeandthememoryview\npointstoanewbytesobject.\nbuffertypecanbeoneofPyBUF_READorPyBUF_WRITE.\nintPyMemoryView_Check(PyObject*obj)\nReturn true if the object obj is a memoryview object. It is not currently allowed to create subclasses of\nmemoryview. Thisfunctionalwayssucceeds.\nPy_buffer*PyMemoryView_GET_BUFFER(PyObject*mview)\nReturn a pointer to the memoryview\u2019s private copy of the exporter\u2019s buffer. mview must be a memoryview\ninstance;thismacrodoesn\u2019tcheckitstype,youmustdoityourselforyouwillriskcrashes.\nPyObject*PyMemoryView_GET_BASE(PyObject*mview)\nReturneitherapointertotheexportingobjectthatthememoryviewisbasedonorNULLifthememoryviewhas\nbeencreatedbyoneofthefunctionsPyMemoryView_FromMemory()orPyMemoryView_FromBuffer().\nmviewmustbeamemoryviewinstance.\n8.6.7 Weak Reference Objects\nPythonsupportsweakreferencesasfirst-classobjects. Therearetwospecificobjecttypeswhichdirectlyimplement\nweakreferences. Thefirstisasimplereferenceobject,andthesecondactsasaproxyfortheoriginalobjectasmuch\nasitcan.\nintPyWeakref_Check(PyObject*ob)\nReturnnon-zeroifobiseitherareferenceorproxyobject. Thisfunctionalwayssucceeds.\nintPyWeakref_CheckRef(PyObject*ob)\nReturnnon-zeroifobisareferenceobject. Thisfunctionalwayssucceeds.\nintPyWeakref_CheckProxy(PyObject*ob)\nReturnnon-zeroifobisaproxyobject. Thisfunctionalwayssucceeds.\n8.6. OtherObjects 185\nThePython/CAPI,Release3.13.3\nPyObject*PyWeakref_NewRef(PyObject*ob,PyObject*callback)\nReturnvalue: Newreference. PartoftheStableABI.Returnaweakreferenceobjectfortheobjectob. This\nwillalwaysreturnanewreference,butisnotguaranteedtocreateanewobject; anexistingreferenceobject\nmaybereturned. Thesecondparameter,callback,canbeacallableobjectthatreceivesnotificationwhenobis\ngarbagecollected;itshouldacceptasingleparameter,whichwillbetheweakreferenceobjectitself. callback\nmayalsobeNoneorNULL.Ifobisnotaweaklyreferenceableobject,orifcallbackisnotcallable,None,or\nNULL,thiswillreturnNULLandraiseTypeError.\nPyObject*PyWeakref_NewProxy(PyObject*ob,PyObject*callback)\nReturnvalue: Newreference. PartoftheStableABI.Returnaweakreferenceproxyobjectfortheobjectob.\nThiswillalwaysreturnanewreference,butisnotguaranteedtocreateanewobject;anexistingproxyobject\nmaybereturned. Thesecondparameter,callback,canbeacallableobjectthatreceivesnotificationwhenobis\ngarbagecollected;itshouldacceptasingleparameter,whichwillbetheweakreferenceobjectitself. callback\nmayalsobeNoneorNULL.Ifobisnotaweaklyreferenceableobject,orifcallbackisnotcallable,None,or\nNULL,thiswillreturnNULLandraiseTypeError.\nintPyWeakref_GetRef(PyObject*ref,PyObject**pobj)\nPartoftheStableABIsinceversion3.13. Getastrongreferencetothereferencedobjectfromaweakreference,\nref,into*pobj.\n\u2022 Onsuccess,set*pobjtoanewstrongreferencetothereferencedobjectandreturn1.\n\u2022 Ifthereferenceisdead,set*pobjtoNULLandreturn0.\n\u2022 Onerror,raiseanexceptionandreturn-1.\nAddedinversion3.13.\nPyObject*PyWeakref_GetObject(PyObject*ref)\nReturnvalue: Borrowedreference. PartoftheStableABI.Returnaborrowedreferencetothereferencedobject\nfromaweakreference,ref. Ifthereferentisnolongerlive,returnsPy_None.\n(cid:174) Note\nThis function returns a borrowed reference to the referenced object. This means that you should always\ncallPy_INCREF()ontheobjectexceptwhenitcannotbedestroyedbeforethelastusageoftheborrowed\nreference.\nDeprecatedsinceversion3.13,willberemovedinversion3.15: UsePyWeakref_GetRef()instead.\nPyObject*PyWeakref_GET_OBJECT(PyObject*ref)\nReturnvalue: Borrowedreference. SimilartoPyWeakref_GetObject(),butdoesnoerrorchecking.\nDeprecatedsinceversion3.13,willberemovedinversion3.15: UsePyWeakref_GetRef()instead.\nvoidPyObject_ClearWeakRefs(PyObject*object)\nPartoftheStableABI.Thisfunctioniscalledbythetp_deallochandlertoclearweakreferences.\nThisiteratesthroughtheweakreferencesforobjectandcallscallbacksforthosereferenceswhichhaveone. It\nreturnswhenallcallbackshavebeenattempted.\nvoidPyUnstable_Object_ClearWeakRefsNoCallbacks(PyObject*object)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nClearstheweakrefsforobjectwithoutcallingthecallbacks.\n186 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nThisfunctioniscalledbythetp_deallochandlerfortypeswithfinalizers(i.e.,__del__()). Thehandler\nforthoseobjectsfirstcallsPyObject_ClearWeakRefs()toclearweakrefsandcalltheircallbacks,thenthe\nfinalizer,andfinallythisfunctiontoclearanyweakrefsthatmayhavebeencreatedbythefinalizer.\nInmostcircumstances,it\u2019smoreappropriatetousePyObject_ClearWeakRefs()toclearweakrefsinstead\nofthisfunction.\nAddedinversion3.13.\n8.6.8 Capsules\nRefertousing-capsulesformoreinformationonusingtheseobjects.\nAddedinversion3.1.\ntypePyCapsule\nThissubtypeofPyObjectrepresentsanopaquevalue,usefulforCextensionmoduleswhoneedtopassan\nopaquevalue(asavoid*pointer)throughPythoncodetootherCcode. ItisoftenusedtomakeaCfunction\npointer defined in one module available to other modules, so the regular import mechanism can be used to\naccessCAPIsdefinedindynamicallyloadedmodules.\ntypePyCapsule_Destructor\nPartoftheStableABI.Thetypeofadestructorcallbackforacapsule. Definedas:\ntypedef void (*PyCapsule_Destructor)(PyObject *);\nSeePyCapsule_New()forthesemanticsofPyCapsule_Destructorcallbacks.\nintPyCapsule_CheckExact(PyObject*p)\nReturntrueifitsargumentisaPyCapsule. Thisfunctionalwayssucceeds.\nPyObject*PyCapsule_New(void*pointer,constchar*name,PyCapsule_Destructordestructor)\nReturn value: New reference. Part of the Stable ABI. Create a PyCapsule encapsulating the pointer. The\npointerargumentmaynotbeNULL.\nOnfailure,setanexceptionandreturnNULL.\nThenamestringmayeitherbeNULLorapointertoavalidCstring. Ifnon-NULL,thisstringmustoutlivethe\ncapsule. (Thoughitispermittedtofreeitinsidethedestructor.)\nIfthedestructorargumentisnotNULL,itwillbecalledwiththecapsuleasitsargumentwhenitisdestroyed.\nIf this capsule will be stored as an attribute of a module, the name should be specified as modulename.\nattributename. ThiswillenableothermodulestoimportthecapsuleusingPyCapsule_Import().\nvoid*PyCapsule_GetPointer(PyObject*capsule,constchar*name)\nPartoftheStableABI.Retrievethepointerstoredinthecapsule. Onfailure,setanexceptionandreturnNULL.\nThenameparametermustcompareexactlytothenamestoredinthecapsule. Ifthenamestoredinthecapsule\nisNULL,thenamepassedinmustalsobeNULL.PythonusestheCfunctionstrcmp()tocomparecapsule\nnames.\nPyCapsule_DestructorPyCapsule_GetDestructor(PyObject*capsule)\nPartoftheStableABI.Returnthecurrentdestructorstoredinthecapsule. Onfailure, setanexceptionand\nreturnNULL.\nItislegalforacapsuletohaveaNULLdestructor. ThismakesaNULLreturncodesomewhatambiguous;use\nPyCapsule_IsValid()orPyErr_Occurred()todisambiguate.\nvoid*PyCapsule_GetContext(PyObject*capsule)\nPartoftheStableABI.Returnthecurrentcontextstoredinthecapsule. Onfailure,setanexceptionandreturn\nNULL.\nIt is legal for a capsule to have a NULL context. This makes a NULL return code somewhat ambiguous; use\nPyCapsule_IsValid()orPyErr_Occurred()todisambiguate.\n8.6. OtherObjects 187\nThePython/CAPI,Release3.13.3\nconstchar*PyCapsule_GetName(PyObject*capsule)\nPartoftheStableABI.Returnthecurrentnamestoredinthecapsule. Onfailure,setanexceptionandreturn\nNULL.\nIt is legal for a capsule to have a NULL name. This makes a NULL return code somewhat ambiguous; use\nPyCapsule_IsValid()orPyErr_Occurred()todisambiguate.\nvoid*PyCapsule_Import(constchar*name,intno_block)\nPartoftheStableABI.ImportapointertoaCobjectfromacapsuleattributeinamodule. Thenameparameter\nshouldspecifythefullnametotheattribute,asinmodule.attribute. Thenamestoredinthecapsulemust\nmatchthisstringexactly.\nReturnthecapsule\u2019sinternalpointeronsuccess. Onfailure,setanexceptionandreturnNULL.\nChangedinversion3.3: no_blockhasnoeffectanymore.\nintPyCapsule_IsValid(PyObject*capsule,constchar*name)\nPart of the Stable ABI. Determines whether or not capsule is a valid capsule. A valid capsule is non-NULL,\npassesPyCapsule_CheckExact(),hasanon-NULLpointerstoredinit,anditsinternalnamematchesthe\nnameparameter. (SeePyCapsule_GetPointer()forinformationonhowcapsulenamesarecompared.)\nInotherwords, ifPyCapsule_IsValid() returnsatruevalue, callstoanyoftheaccessors(anyfunction\nstartingwithPyCapsule_Get)areguaranteedtosucceed.\nReturnanonzerovalueiftheobjectisvalidandmatchesthenamepassedin. Return0otherwise. Thisfunction\nwillnotfail.\nintPyCapsule_SetContext(PyObject*capsule,void*context)\nPartoftheStableABI.Setthecontextpointerinsidecapsuletocontext.\nReturn0onsuccess. Returnnonzeroandsetanexceptiononfailure.\nintPyCapsule_SetDestructor(PyObject*capsule,PyCapsule_Destructordestructor)\nPartoftheStableABI.Setthedestructorinsidecapsuletodestructor.\nReturn0onsuccess. Returnnonzeroandsetanexceptiononfailure.\nintPyCapsule_SetName(PyObject*capsule,constchar*name)\nPartoftheStableABI.Setthenameinsidecapsuletoname. Ifnon-NULL,thenamemustoutlivethecapsule.\nIfthepreviousnamestoredinthecapsulewasnotNULL,noattemptismadetofreeit.\nReturn0onsuccess. Returnnonzeroandsetanexceptiononfailure.\nintPyCapsule_SetPointer(PyObject*capsule,void*pointer)\nPartoftheStableABI.Setthevoidpointerinsidecapsuletopointer. ThepointermaynotbeNULL.\nReturn0onsuccess. Returnnonzeroandsetanexceptiononfailure.\n8.6.9 Frame Objects\ntypePyFrameObject\nPartoftheLimitedAPI(asanopaquestruct). TheCstructureoftheobjectsusedtodescribeframeobjects.\nTherearenopublicmembersinthisstructure.\nChangedinversion3.11: ThemembersofthisstructurewereremovedfromthepublicCAPI.Refertothe\nWhat\u2019sNewentryfordetails.\nThePyEval_GetFrame()andPyThreadState_GetFrame()functionscanbeusedtogetaframeobject.\nSeealsoReflection.\nPyTypeObjectPyFrame_Type\nThetypeofframeobjects. Itisthesameobjectastypes.FrameTypeinthePythonlayer.\nChangedinversion3.11: Previously,thistypewasonlyavailableafterincluding<frameobject.h>.\n188 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyFrame_Check(PyObject*obj)\nReturnnon-zeroifobjisaframeobject.\nChangedinversion3.11: Previously,thisfunctionwasonlyavailableafterincluding<frameobject.h>.\nPyFrameObject*PyFrame_GetBack(PyFrameObject*frame)\nReturnvalue: Newreference. Gettheframenextouterframe.\nReturnastrongreference,orNULLifframehasnoouterframe.\nAddedinversion3.9.\nPyObject*PyFrame_GetBuiltins(PyFrameObject*frame)\nReturnvalue: Newreference. Gettheframe\u2019sf_builtinsattribute.\nReturnastrongreference. TheresultcannotbeNULL.\nAddedinversion3.11.\nPyCodeObject*PyFrame_GetCode(PyFrameObject*frame)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.10. Gettheframecode.\nReturnastrongreference.\nTheresult(framecode)cannotbeNULL.\nAddedinversion3.9.\nPyObject*PyFrame_GetGenerator(PyFrameObject*frame)\nReturnvalue: Newreference. Getthegenerator,coroutine,orasyncgeneratorthatownsthisframe,orNULLif\nthisframeisnotownedbyagenerator. Doesnotraiseanexception,evenifthereturnvalueisNULL.\nReturnastrongreference,orNULL.\nAddedinversion3.11.\nPyObject*PyFrame_GetGlobals(PyFrameObject*frame)\nReturnvalue: Newreference. Gettheframe\u2019sf_globalsattribute.\nReturnastrongreference. TheresultcannotbeNULL.\nAddedinversion3.11.\nintPyFrame_GetLasti(PyFrameObject*frame)\nGettheframe\u2019sf_lastiattribute.\nReturns-1ifframe.f_lastiisNone.\nAddedinversion3.11.\nPyObject*PyFrame_GetVar(PyFrameObject*frame,PyObject*name)\nReturnvalue: Newreference. Getthevariablenameofframe.\n\u2022 Returnastrongreferencetothevariablevalueonsuccess.\n\u2022 RaiseNameErrorandreturnNULLifthevariabledoesnotexist.\n\u2022 RaiseanexceptionandreturnNULLonerror.\nnametypemustbeastr.\nAddedinversion3.12.\nPyObject*PyFrame_GetVarString(PyFrameObject*frame,constchar*name)\nReturnvalue: Newreference. SimilartoPyFrame_GetVar(),butthevariablenameisaCstringencodedin\nUTF-8.\nAddedinversion3.12.\n8.6. OtherObjects 189\nThePython/CAPI,Release3.13.3\nPyObject*PyFrame_GetLocals(PyFrameObject*frame)\nReturnvalue: Newreference. Gettheframe\u2019sf_localsattribute. Iftheframereferstoanoptimizedscope,\nthisreturnsawrite-throughproxyobjectthatallowsmodifyingthelocals. Inallothercases(classes,modules,\nexec(),eval())itreturnsthemappingrepresentingtheframelocalsdirectly(asdescribedforlocals()).\nReturnastrongreference.\nAddedinversion3.11.\nChangedinversion3.13: AspartofPEP667,returnaninstanceofPyFrameLocalsProxy_Type.\nintPyFrame_GetLineNumber(PyFrameObject*frame)\nPartoftheStableABIsinceversion3.10. Returnthelinenumberthatframeiscurrentlyexecuting.\nFrameLocalsProxies\nAddedinversion3.13.\nThe f_locals attribute on a frame object is an instance of a \u201cframe-locals proxy\u201d. The proxy object exposes a\nwrite-through view of the underlying locals dictionary for the frame. This ensures that the variables exposed by\nf_localsarealwaysuptodatewiththelivelocalvariablesintheframeitself.\nSeePEP667formoreinformation.\nPyTypeObjectPyFrameLocalsProxy_Type\nThetypeofframelocals()proxyobjects.\nintPyFrameLocalsProxy_Check(PyObject*obj)\nReturnnon-zeroifobjisaframelocals()proxy.\nInternalFrames\nUnlessusingPEP523,youwillnotneedthis.\nstruct_PyInterpreterFrame\nTheinterpreter\u2019sinternalframerepresentation.\nAddedinversion3.11.\nPyObject*PyUnstable_InterpreterFrame_GetCode(struct_PyInterpreterFrame*frame);\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nReturnastrongreferencetothecodeobjectfortheframe.\nAddedinversion3.12.\nintPyUnstable_InterpreterFrame_GetLasti(struct_PyInterpreterFrame*frame);\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nReturnthebyteoffsetintothelastexecutedinstruction.\nAddedinversion3.12.\n190 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyUnstable_InterpreterFrame_GetLine(struct_PyInterpreterFrame*frame);\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nReturnthecurrentlyexecutinglinenumber,or-1ifthereisnolinenumber.\nAddedinversion3.12.\n8.6.10 Generator Objects\nGeneratorobjectsarewhatPythonusestoimplementgeneratoriterators. Theyarenormallycreatedbyiteratingover\nafunctionthatyieldsvalues,ratherthanexplicitlycallingPyGen_New()orPyGen_NewWithQualName().\ntypePyGenObject\nTheCstructureusedforgeneratorobjects.\nPyTypeObjectPyGen_Type\nThetypeobjectcorrespondingtogeneratorobjects.\nintPyGen_Check(PyObject*ob)\nReturntrueifobisageneratorobject;obmustnotbeNULL.Thisfunctionalwayssucceeds.\nintPyGen_CheckExact(PyObject*ob)\nReturntrueifob\u2019stypeisPyGen_Type;obmustnotbeNULL.Thisfunctionalwayssucceeds.\nPyObject*PyGen_New(PyFrameObject*frame)\nReturnvalue: Newreference. Createandreturnanewgeneratorobjectbasedontheframeobject. Areference\ntoframeisstolenbythisfunction. TheargumentmustnotbeNULL.\nPyObject*PyGen_NewWithQualName(PyFrameObject*frame,PyObject*name,PyObject*qualname)\nReturn value: New reference. Create and return a new generator object based on the frame object, with\n__name__and__qualname__settonameandqualname. Areferencetoframeisstolenbythisfunction.\nTheframeargumentmustnotbeNULL.\n8.6.11 Coroutine Objects\nAddedinversion3.5.\nCoroutineobjectsarewhatfunctionsdeclaredwithanasynckeywordreturn.\ntypePyCoroObject\nTheCstructureusedforcoroutineobjects.\nPyTypeObjectPyCoro_Type\nThetypeobjectcorrespondingtocoroutineobjects.\nintPyCoro_CheckExact(PyObject*ob)\nReturntrueifob\u2019stypeisPyCoro_Type;obmustnotbeNULL.Thisfunctionalwayssucceeds.\nPyObject*PyCoro_New(PyFrameObject*frame,PyObject*name,PyObject*qualname)\nReturn value: New reference. Create and return a new coroutine object based on the frame object, with\n__name__and__qualname__settonameandqualname. Areferencetoframeisstolenbythisfunction.\nTheframeargumentmustnotbeNULL.\n8.6. OtherObjects 191\nThePython/CAPI,Release3.13.3\n8.6.12 Context Variables Objects\nAddedinversion3.7.\nChangedinversion3.7.1:\n(cid:174) Note\nInPython3.7.1thesignaturesofallcontextvariablesCAPIswerechangedtousePyObjectpointersinstead\nofPyContext,PyContextVar,andPyContextToken,e.g.:\n// in 3.7.0:\nPyContext *PyContext_New(void);\n// in 3.7.1+:\nPyObject *PyContext_New(void);\nSeebpo-34762formoredetails.\nThissectiondetailsthepublicCAPIforthecontextvarsmodule.\ntypePyContext\nTheCstructureusedtorepresentacontextvars.Contextobject.\ntypePyContextVar\nTheCstructureusedtorepresentacontextvars.ContextVarobject.\ntypePyContextToken\nTheCstructureusedtorepresentacontextvars.Tokenobject.\nPyTypeObjectPyContext_Type\nThetypeobjectrepresentingthecontexttype.\nPyTypeObjectPyContextVar_Type\nThetypeobjectrepresentingthecontextvariabletype.\nPyTypeObjectPyContextToken_Type\nThetypeobjectrepresentingthecontextvariabletokentype.\nType-checkmacros:\nintPyContext_CheckExact(PyObject*o)\nReturntrueifoisoftypePyContext_Type. omustnotbeNULL.Thisfunctionalwayssucceeds.\nintPyContextVar_CheckExact(PyObject*o)\nReturntrueifoisoftypePyContextVar_Type. omustnotbeNULL.Thisfunctionalwayssucceeds.\nintPyContextToken_CheckExact(PyObject*o)\nReturntrueifoisoftypePyContextToken_Type. omustnotbeNULL.Thisfunctionalwayssucceeds.\nContextobjectmanagementfunctions:\nPyObject*PyContext_New(void)\nReturnvalue: Newreference. Createanewemptycontextobject. ReturnsNULLifanerrorhasoccurred.\nPyObject*PyContext_Copy(PyObject*ctx)\nReturnvalue: Newreference. Createashallowcopyofthepassedctxcontextobject. ReturnsNULLifanerror\nhasoccurred.\nPyObject*PyContext_CopyCurrent(void)\nReturnvalue: Newreference. Createashallowcopyofthecurrentthreadcontext. ReturnsNULLifanerror\nhasoccurred.\n192 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nintPyContext_Enter(PyObject*ctx)\nSetctxasthecurrentcontextforthecurrentthread. Returns0onsuccess,and-1onerror.\nintPyContext_Exit(PyObject*ctx)\nDeactivatethectxcontextandrestorethepreviouscontextasthecurrentcontextforthecurrentthread. Returns\n0onsuccess,and-1onerror.\nContextvariablefunctions:\nPyObject*PyContextVar_New(constchar*name,PyObject*def)\nReturnvalue: Newreference. CreateanewContextVarobject. Thenameparameterisusedforintrospection\nanddebugpurposes. Thedefparameterspecifiesadefaultvalueforthecontextvariable,orNULLfornodefault.\nIfanerrorhasoccurred,thisfunctionreturnsNULL.\nintPyContextVar_Get(PyObject*var,PyObject*default_value,PyObject**value)\nGet the value of a context variable. Returns -1 if an error has occurred during lookup, and 0 if no error\noccurred,whetherornotavaluewasfound.\nIfthecontextvariablewasfound,valuewillbeapointertoit. Ifthecontextvariablewasnotfound,valuewill\npointto:\n\u2022 default_value,ifnotNULL;\n\u2022 thedefaultvalueofvar,ifnotNULL;\n\u2022 NULL\nExceptforNULL,thefunctionreturnsanewreference.\nPyObject*PyContextVar_Set(PyObject*var,PyObject*value)\nReturnvalue: Newreference. Setthevalueofvartovalueinthecurrentcontext. Returnsanewtokenobject\nforthischange,orNULLifanerrorhasoccurred.\nintPyContextVar_Reset(PyObject*var,PyObject*token)\nResetthestateofthevar contextvariabletothatitwasinbeforePyContextVar_Set()thatreturnedthe\ntokenwascalled. Thisfunctionreturns0onsuccessand-1onerror.\n8.6.13 DateTime Objects\nVariousdateandtimeobjectsaresuppliedbythedatetimemodule. Beforeusinganyofthesefunctions,theheader\nfile datetime.h must be included in your source (note that this is not included by Python.h), and the macro\nPyDateTime_IMPORT must be invoked, usually as part of the module initialisation function. The macro puts a\npointertoaCstructureintoastaticvariable,PyDateTimeAPI,thatisusedbythefollowingmacros.\ntypePyDateTime_Date\nThissubtypeofPyObjectrepresentsaPythondateobject.\ntypePyDateTime_DateTime\nThissubtypeofPyObjectrepresentsaPythondatetimeobject.\ntypePyDateTime_Time\nThissubtypeofPyObjectrepresentsaPythontimeobject.\ntypePyDateTime_Delta\nThissubtypeofPyObjectrepresentsthedifferencebetweentwodatetimevalues.\nPyTypeObjectPyDateTime_DateType\nThisinstanceofPyTypeObjectrepresentsthePythondatetype; itisthesameobjectasdatetime.date\ninthePythonlayer.\nPyTypeObjectPyDateTime_DateTimeType\nThis instance of PyTypeObject represents the Python datetime type; it is the same object as datetime.\ndatetimeinthePythonlayer.\n8.6. OtherObjects 193\nThePython/CAPI,Release3.13.3\nPyTypeObjectPyDateTime_TimeType\nThisinstanceofPyTypeObjectrepresentsthePythontimetype;itisthesameobjectasdatetime.time\ninthePythonlayer.\nPyTypeObjectPyDateTime_DeltaType\nThisinstanceofPyTypeObjectrepresentsPythontypeforthedifferencebetweentwodatetimevalues;itis\nthesameobjectasdatetime.timedeltainthePythonlayer.\nPyTypeObjectPyDateTime_TZInfoType\nThisinstanceofPyTypeObjectrepresentsthePythontimezoneinfotype;itisthesameobjectasdatetime.\ntzinfointhePythonlayer.\nMacroforaccesstotheUTCsingleton:\nPyObject*PyDateTime_TimeZone_UTC\nReturnsthetimezonesingletonrepresentingUTC,thesameobjectasdatetime.timezone.utc.\nAddedinversion3.7.\nType-checkmacros:\nintPyDate_Check(PyObject*ob)\nReturntrueifobisoftypePyDateTime_DateTypeorasubtypeofPyDateTime_DateType. obmustnot\nbeNULL.Thisfunctionalwayssucceeds.\nintPyDate_CheckExact(PyObject*ob)\nReturntrueifobisoftypePyDateTime_DateType. obmustnotbeNULL.Thisfunctionalwayssucceeds.\nintPyDateTime_Check(PyObject*ob)\nReturntrueifobisoftypePyDateTime_DateTimeTypeorasubtypeofPyDateTime_DateTimeType.\nobmustnotbeNULL.Thisfunctionalwayssucceeds.\nintPyDateTime_CheckExact(PyObject*ob)\nReturntrueifobisoftypePyDateTime_DateTimeType. obmustnotbeNULL.Thisfunctionalwayssuc-\nceeds.\nintPyTime_Check(PyObject*ob)\nReturntrueifobisoftypePyDateTime_TimeTypeorasubtypeofPyDateTime_TimeType. obmustnot\nbeNULL.Thisfunctionalwayssucceeds.\nintPyTime_CheckExact(PyObject*ob)\nReturntrueifobisoftypePyDateTime_TimeType. obmustnotbeNULL.Thisfunctionalwayssucceeds.\nintPyDelta_Check(PyObject*ob)\nReturntrueifobisoftypePyDateTime_DeltaTypeorasubtypeofPyDateTime_DeltaType. obmust\nnotbeNULL.Thisfunctionalwayssucceeds.\nintPyDelta_CheckExact(PyObject*ob)\nReturntrueifobisoftypePyDateTime_DeltaType. obmustnotbeNULL.Thisfunctionalwayssucceeds.\nintPyTZInfo_Check(PyObject*ob)\nReturntrueifobisoftypePyDateTime_TZInfoTypeorasubtypeofPyDateTime_TZInfoType. obmust\nnotbeNULL.Thisfunctionalwayssucceeds.\nintPyTZInfo_CheckExact(PyObject*ob)\nReturntrueifobisoftypePyDateTime_TZInfoType. obmustnotbeNULL.Thisfunctionalwayssucceeds.\nMacrostocreateobjects:\nPyObject*PyDate_FromDate(intyear,intmonth,intday)\nReturnvalue: Newreference. Returnadatetime.dateobjectwiththespecifiedyear,monthandday.\n194 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\nPyObject*PyDateTime_FromDateAndTime(intyear,intmonth,intday,inthour,intminute,intsecond,int\nusecond)\nReturnvalue: Newreference. Returnadatetime.datetimeobjectwiththespecifiedyear,month,day,hour,\nminute,secondandmicrosecond.\nPyObject*PyDateTime_FromDateAndTimeAndFold(intyear,intmonth,intday,inthour,intminute,int\nsecond,intusecond,intfold)\nReturnvalue: Newreference. Returnadatetime.datetimeobjectwiththespecifiedyear,month,day,hour,\nminute,second,microsecondandfold.\nAddedinversion3.6.\nPyObject*PyTime_FromTime(inthour,intminute,intsecond,intusecond)\nReturnvalue: Newreference. Returnadatetime.timeobjectwiththespecifiedhour,minute,secondand\nmicrosecond.\nPyObject*PyTime_FromTimeAndFold(inthour,intminute,intsecond,intusecond,intfold)\nReturn value: New reference. Return a datetime.time object with the specified hour, minute, second,\nmicrosecondandfold.\nAddedinversion3.6.\nPyObject*PyDelta_FromDSU(intdays,intseconds,intuseconds)\nReturnvalue: Newreference. Returnadatetime.timedeltaobjectrepresentingthegivennumberofdays,\nseconds and microseconds. Normalization is performed so that the resulting number of microseconds and\nsecondslieintherangesdocumentedfordatetime.timedeltaobjects.\nPyObject*PyTimeZone_FromOffset(PyObject*offset)\nReturnvalue: Newreference. Returnadatetime.timezoneobjectwithanunnamedfixedoffsetrepresented\nbytheoffsetargument.\nAddedinversion3.7.\nPyObject*PyTimeZone_FromOffsetAndName(PyObject*offset,PyObject*name)\nReturn value: New reference. Return a datetime.timezone object with a fixed offset represented by the\noffsetargumentandwithtznamename.\nAddedinversion3.7.\nMacros to extract fields from date objects. The argument must be an instance of PyDateTime_Date, including\nsubclasses(suchasPyDateTime_DateTime). TheargumentmustnotbeNULL,andthetypeisnotchecked:\nintPyDateTime_GET_YEAR(PyDateTime_Date*o)\nReturntheyear,asapositiveint.\nintPyDateTime_GET_MONTH(PyDateTime_Date*o)\nReturnthemonth,asanintfrom1through12.\nintPyDateTime_GET_DAY(PyDateTime_Date*o)\nReturntheday,asanintfrom1through31.\nMacros to extract fields from datetime objects. The argument must be an instance of PyDateTime_DateTime,\nincludingsubclasses. TheargumentmustnotbeNULL,andthetypeisnotchecked:\nintPyDateTime_DATE_GET_HOUR(PyDateTime_DateTime*o)\nReturnthehour,asanintfrom0through23.\nintPyDateTime_DATE_GET_MINUTE(PyDateTime_DateTime*o)\nReturntheminute,asanintfrom0through59.\nintPyDateTime_DATE_GET_SECOND(PyDateTime_DateTime*o)\nReturnthesecond,asanintfrom0through59.\n8.6. OtherObjects 195\nThePython/CAPI,Release3.13.3\nintPyDateTime_DATE_GET_MICROSECOND(PyDateTime_DateTime*o)\nReturnthemicrosecond,asanintfrom0through999999.\nintPyDateTime_DATE_GET_FOLD(PyDateTime_DateTime*o)\nReturnthefold,asanintfrom0through1.\nAddedinversion3.6.\nPyObject*PyDateTime_DATE_GET_TZINFO(PyDateTime_DateTime*o)\nReturnthetzinfo(whichmaybeNone).\nAddedinversion3.10.\nMacros to extract fields from time objects. The argument must be an instance of PyDateTime_Time, including\nsubclasses. TheargumentmustnotbeNULL,andthetypeisnotchecked:\nintPyDateTime_TIME_GET_HOUR(PyDateTime_Time*o)\nReturnthehour,asanintfrom0through23.\nintPyDateTime_TIME_GET_MINUTE(PyDateTime_Time*o)\nReturntheminute,asanintfrom0through59.\nintPyDateTime_TIME_GET_SECOND(PyDateTime_Time*o)\nReturnthesecond,asanintfrom0through59.\nintPyDateTime_TIME_GET_MICROSECOND(PyDateTime_Time*o)\nReturnthemicrosecond,asanintfrom0through999999.\nintPyDateTime_TIME_GET_FOLD(PyDateTime_Time*o)\nReturnthefold,asanintfrom0through1.\nAddedinversion3.6.\nPyObject*PyDateTime_TIME_GET_TZINFO(PyDateTime_Time*o)\nReturnthetzinfo(whichmaybeNone).\nAddedinversion3.10.\nMacros to extract fields from time delta objects. The argument must be an instance of PyDateTime_Delta, in-\ncludingsubclasses. TheargumentmustnotbeNULL,andthetypeisnotchecked:\nintPyDateTime_DELTA_GET_DAYS(PyDateTime_Delta*o)\nReturnthenumberofdays,asanintfrom-999999999to999999999.\nAddedinversion3.3.\nintPyDateTime_DELTA_GET_SECONDS(PyDateTime_Delta*o)\nReturnthenumberofseconds,asanintfrom0through86399.\nAddedinversion3.3.\nintPyDateTime_DELTA_GET_MICROSECONDS(PyDateTime_Delta*o)\nReturnthenumberofmicroseconds,asanintfrom0through999999.\nAddedinversion3.3.\nMacrosfortheconvenienceofmodulesimplementingtheDBAPI:\nPyObject*PyDateTime_FromTimestamp(PyObject*args)\nReturnvalue: Newreference. Createandreturnanewdatetime.datetimeobjectgivenanargumenttuple\nsuitableforpassingtodatetime.datetime.fromtimestamp().\nPyObject*PyDate_FromTimestamp(PyObject*args)\nReturnvalue:Newreference. Createandreturnanewdatetime.dateobjectgivenanargumenttuplesuitable\nforpassingtodatetime.date.fromtimestamp().\n196 Chapter8. ConcreteObjectsLayer\nThePython/CAPI,Release3.13.3\n8.6.14 Objects for Type Hinting\nVarious built-in types for type hinting are provided. Currently, two types exist \u2013 GenericAlias and Union. Only\nGenericAliasisexposedtoC.\nPyObject*Py_GenericAlias(PyObject*origin,PyObject*args)\nPart of the Stable ABI since version 3.9. Create a GenericAlias object. Equivalent to calling the Python\nclass types.GenericAlias. The origin and args arguments set the GenericAlias\u2018s __origin__ and\n__args__attributesrespectively. originshouldbeaPyTypeObject*,andargscanbeaPyTupleObject*\noranyPyObject*. Ifargspassedisnotatuple,a1-tupleisautomaticallyconstructedand__args__isset\nto(args,). Minimalcheckingisdoneforthearguments, sothefunctionwillsucceedeveniforiginisnot\natype. TheGenericAlias\u2018s__parameters__attributeisconstructedlazilyfrom__args__. Onfailure,\nanexceptionisraisedandNULLisreturned.\nHere\u2019sanexampleofhowtomakeanextensiontypegeneric:\n...\nstatic PyMethodDef my_obj_methods[] = {\n// Other methods.\n...\n{\"__class_getitem__\", Py_GenericAlias, METH_O|METH_CLASS, \"See PEP 585\"}\n...\n}\n(cid:181) Seealso\nThedatamodelmethod__class_getitem__().\nAddedinversion3.9.\nPyTypeObjectPy_GenericAliasType\nPartoftheStableABIsinceversion3.9. TheCtypeoftheobjectreturnedbyPy_GenericAlias(). Equiv-\nalenttotypes.GenericAliasinPython.\nAddedinversion3.9.\n8.6. OtherObjects 197\nThePython/CAPI,Release3.13.3\n198 Chapter8. ConcreteObjectsLayer\nCHAPTER\nNINE\nINITIALIZATION, FINALIZATION, AND THREADS\nSeePythonInitializationConfigurationfordetailsonhowtoconfiguretheinterpreterpriortoinitialization.\n9.1 Before Python Initialization\nIn an application embedding Python, the Py_Initialize() function must be called before using any other\nPython/CAPIfunctions;withtheexceptionofafewfunctionsandtheglobalconfigurationvariables.\nThefollowingfunctionscanbesafelycalledbeforePythonisinitialized:\n\u2022 Functionsthatinitializetheinterpreter:\n\u2013 Py_Initialize()\n\u2013 Py_InitializeEx()\n\u2013 Py_InitializeFromConfig()\n\u2013 Py_BytesMain()\n\u2013 Py_Main()\n\u2013 theruntimepre-initializationfunctionscoveredinPythonInitializationConfiguration\n\u2022 Configurationfunctions:\n\u2013 PyImport_AppendInittab()\n\u2013 PyImport_ExtendInittab()\n\u2013 PyInitFrozenExtensions()\n\u2013 PyMem_SetAllocator()\n\u2013 PyMem_SetupDebugHooks()\n\u2013 PyObject_SetArenaAllocator()\n\u2013 Py_SetProgramName()\n\u2013 Py_SetPythonHome()\n\u2013 PySys_ResetWarnOptions()\n\u2013 theconfigurationfunctionscoveredinPythonInitializationConfiguration\n\u2022 Informativefunctions:\n\u2013 Py_IsInitialized()\n\u2013 PyMem_GetAllocator()\n\u2013 PyObject_GetArenaAllocator()\n\u2013 Py_GetBuildInfo()\n\u2013 Py_GetCompiler()\n199\nThePython/CAPI,Release3.13.3\n\u2013 Py_GetCopyright()\n\u2013 Py_GetPlatform()\n\u2013 Py_GetVersion()\n\u2013 Py_IsInitialized()\n\u2022 Utilities:\n\u2013 Py_DecodeLocale()\n\u2013 thestatusreportingandutilityfunctionscoveredinPythonInitializationConfiguration\n\u2022 Memoryallocators:\n\u2013 PyMem_RawMalloc()\n\u2013 PyMem_RawRealloc()\n\u2013 PyMem_RawCalloc()\n\u2013 PyMem_RawFree()\n\u2022 Synchronization:\n\u2013 PyMutex_Lock()\n\u2013 PyMutex_Unlock()\n(cid:174) Note\nDespite their apparent similarity to some of the functions listed above, the following functions should not be\ncalledbeforetheinterpreterhasbeeninitialized: Py_EncodeLocale(),Py_GetPath(),Py_GetPrefix(),\nPy_GetExecPrefix(),Py_GetProgramFullPath(),Py_GetPythonHome(),Py_GetProgramName(),\nPyEval_InitThreads(),andPy_RunMain().\n9.2 Global configuration variables\nPythonhasvariablesfortheglobalconfigurationtocontroldifferentfeaturesandoptions. Bydefault,theseflagsare\ncontrolledbycommandlineoptions.\nWhenaflagissetbyanoption,thevalueoftheflagisthenumberoftimesthattheoptionwasset. Forexample,-b\nsetsPy_BytesWarningFlagto1and-bbsetsPy_BytesWarningFlagto2.\nintPy_BytesWarningFlag\nThis API is kept for backward compatibility: setting PyConfig.bytes_warning should be used instead,\nseePythonInitializationConfiguration.\nIssueawarningwhencomparingbytesorbytearraywithstrorbyteswithint. Issueanerrorifgreater\norequalto2.\nSetbythe-boption.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_DebugFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.parser_debugshouldbeusedinstead,see\nPythonInitializationConfiguration.\nTurnonparserdebuggingoutput(forexpertonly,dependingoncompilationoptions).\nSetbythe-doptionandthePYTHONDEBUGenvironmentvariable.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\n200 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nintPy_DontWriteBytecodeFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.write_bytecodeshouldbeusedinstead,\nseePythonInitializationConfiguration.\nIfsettonon-zero,Pythonwon\u2019ttrytowrite.pycfilesontheimportofsourcemodules.\nSetbythe-BoptionandthePYTHONDONTWRITEBYTECODEenvironmentvariable.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_FrozenFlag\nThis API is kept for backward compatibility: setting PyConfig.pathconfig_warnings should be used\ninstead,seePythonInitializationConfiguration.\nSuppresserrormessageswhencalculatingthemodulesearchpathinPy_GetPath().\nPrivateflagusedby_freeze_moduleandfrozenmainprograms.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_HashRandomizationFlag\nThis API is kept for backward compatibility: setting PyConfig.hash_seed and PyConfig.\nuse_hash_seedshouldbeusedinstead,seePythonInitializationConfiguration.\nSetto1ifthePYTHONHASHSEEDenvironmentvariableissettoanon-emptystring.\nIftheflagisnon-zero,readthePYTHONHASHSEEDenvironmentvariabletoinitializethesecrethashseed.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_IgnoreEnvironmentFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.use_environmentshouldbeusedinstead,\nseePythonInitializationConfiguration.\nIgnoreallPYTHON*environmentvariables,e.g. PYTHONPATHandPYTHONHOME,thatmightbeset.\nSetbythe-Eand-Ioptions.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_InspectFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.inspectshouldbeusedinstead,seePython\nInitializationConfiguration.\nWhenascriptispassedasfirstargumentorthe-coptionisused,enterinteractivemodeafterexecutingthe\nscriptorthecommand,evenwhensys.stdindoesnotappeartobeaterminal.\nSetbythe-ioptionandthePYTHONINSPECTenvironmentvariable.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_InteractiveFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.interactiveshouldbeusedinstead,see\nPythonInitializationConfiguration.\nSetbythe-ioption.\nDeprecatedsinceversion3.12.\nintPy_IsolatedFlag\nThisAPIiskeptforbackwardcompatibility:settingPyConfig.isolatedshouldbeusedinstead,seePython\nInitializationConfiguration.\nRunPythoninisolatedmode. Inisolatedmodesys.pathcontainsneitherthescript\u2019sdirectorynortheuser\u2019s\nsite-packagesdirectory.\nSetbythe-Ioption.\nAddedinversion3.4.\n9.2. Globalconfigurationvariables 201\nThePython/CAPI,Release3.13.3\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_LegacyWindowsFSEncodingFlag\nThis API is kept for backward compatibility: setting PyPreConfig.legacy_windows_fs_encoding\nshouldbeusedinstead,seePythonInitializationConfiguration.\nIftheflagisnon-zero, usethembcsencodingwithreplaceerrorhandler, insteadoftheUTF-8encoding\nwithsurrogatepasserrorhandler,forthefilesystemencodinganderrorhandler.\nSetto1ifthePYTHONLEGACYWINDOWSFSENCODINGenvironmentvariableissettoanon-emptystring.\nSeePEP529formoredetails.\nAvailability: Windows.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_LegacyWindowsStdioFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.legacy_windows_stdioshouldbeused\ninstead,seePythonInitializationConfiguration.\nIftheflagisnon-zero,useio.FileIOinsteadofio._WindowsConsoleIOforsysstandardstreams.\nSetto1ifthePYTHONLEGACYWINDOWSSTDIOenvironmentvariableissettoanon-emptystring.\nSeePEP528formoredetails.\nAvailability: Windows.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_NoSiteFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.site_importshouldbeusedinstead,see\nPythonInitializationConfiguration.\nDisable the import of the module site and the site-dependent manipulations of sys.path that it entails.\nAlsodisablethesemanipulationsifsiteisexplicitlyimportedlater(callsite.main()ifyouwantthemto\nbetriggered).\nSetbythe-Soption.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_NoUserSiteDirectory\nThis API is kept for backward compatibility: setting PyConfig.user_site_directory should be used\ninstead,seePythonInitializationConfiguration.\nDon\u2019taddtheuser site-packages directorytosys.path.\nSetbythe-sand-Ioptions,andthePYTHONNOUSERSITEenvironmentvariable.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_OptimizeFlag\nThis API is kept for backward compatibility: setting PyConfig.optimization_level should be used\ninstead,seePythonInitializationConfiguration.\nSetbythe-OoptionandthePYTHONOPTIMIZEenvironmentvariable.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_QuietFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.quietshouldbeusedinstead, seePython\nInitializationConfiguration.\nDon\u2019tdisplaythecopyrightandversionmessagesevenininteractivemode.\nSetbythe-qoption.\nAddedinversion3.2.\n202 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_UnbufferedStdioFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.buffered_stdioshouldbeusedinstead,\nseePythonInitializationConfiguration.\nForcethestdoutandstderrstreamstobeunbuffered.\nSetbythe-uoptionandthePYTHONUNBUFFEREDenvironmentvariable.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\nintPy_VerboseFlag\nThisAPIiskeptforbackwardcompatibility: settingPyConfig.verboseshouldbeusedinstead,seePython\nInitializationConfiguration.\nPrintamessageeachtimeamoduleisinitialized,showingtheplace(filenameorbuilt-inmodule)fromwhich\nit is loaded. If greater or equal to 2, print a message for each file that is checked for when searching for a\nmodule. Alsoprovidesinformationonmodulecleanupatexit.\nSetbythe-voptionandthePYTHONVERBOSEenvironmentvariable.\nDeprecatedsinceversion3.12,willberemovedinversion3.14.\n9.3 Initializing and finalizing the interpreter\nvoidPy_Initialize()\nPartoftheStableABI.InitializethePythoninterpreter. InanapplicationembeddingPython,thisshouldbe\ncalledbeforeusinganyotherPython/CAPIfunctions;seeBeforePythonInitializationforthefewexceptions.\nThisinitializesthetableofloadedmodules(sys.modules),andcreatesthefundamentalmodulesbuiltins,\n__main__andsys. Italsoinitializesthemodulesearchpath(sys.path). Itdoesnotsetsys.argv;usethe\nPythonInitializationConfigurationAPIforthat. Thisisano-opwhencalledforasecondtime(withoutcalling\nPy_FinalizeEx()first). Thereisnoreturnvalue;itisafatalerroriftheinitializationfails.\nUsePy_InitializeFromConfig()tocustomizethePythonInitializationConfiguration.\n(cid:174) Note\nOnWindows,changestheconsolemodefromO_TEXTtoO_BINARY,whichwillalsoaffectnon-Python\nusesoftheconsoleusingtheCRuntime.\nvoidPy_InitializeEx(intinitsigs)\nPart ofthe StableABI. This functionworks like Py_Initialize() if initsigs is 1. If initsigs is 0, it skips\ninitializationregistrationofsignalhandlers,whichmaybeusefulwhenCPythonisembeddedaspartofalarger\napplication.\nUsePy_InitializeFromConfig()tocustomizethePythonInitializationConfiguration.\nPyStatusPy_InitializeFromConfig(constPyConfig*config)\nInitializePythonfromconfigconfiguration,asdescribedinInitializationwithPyConfig.\nSeethePythonInitializationConfigurationsectionfordetailsonpre-initializingtheinterpreter,populatingthe\nruntimeconfigurationstructure,andqueryingthereturnedstatusstructure.\nintPy_IsInitialized()\nPartoftheStableABI.Returntrue(nonzero)whenthePythoninterpreterhasbeeninitialized,false(zero)if\nnot. AfterPy_FinalizeEx()iscalled,thisreturnsfalseuntilPy_Initialize()iscalledagain.\n9.3. Initializingandfinalizingtheinterpreter 203\nThePython/CAPI,Release3.13.3\nintPy_IsFinalizing()\nPart of the Stable ABI since version 3.13. Return true (non-zero) if the main Python interpreter is shutting\ndown. Returnfalse(zero)otherwise.\nAddedinversion3.13.\nintPy_FinalizeEx()\nPart of the Stable ABI since version 3.6. Undo all initializations made by Py_Initialize() and subse-\nquent use of Python/C API functions, and destroy all sub-interpreters (see Py_NewInterpreter() be-\nlow) that were created and not yet destroyed since the last call to Py_Initialize(). Ideally, this frees\nallmemoryallocatedbythePythoninterpreter. Thisisano-opwhencalledforasecondtime(withoutcalling\nPy_Initialize()againfirst).\nSincethisisthereverseofPy_Initialize(),itshouldbecalledinthesamethreadwiththesameinterpreter\nactive. Thatmeansthemainthreadandthemaininterpreter. ThisshouldneverbecalledwhilePy_RunMain()\nisrunning.\nNormallythereturnvalueis0. Iftherewereerrorsduringfinalization(flushingbuffereddata),-1isreturned.\nThis function is provided for a number of reasons. An embedding application might want to restart Python\nwithouthavingtorestarttheapplicationitself. AnapplicationthathasloadedthePythoninterpreterfroma\ndynamicallyloadablelibrary(orDLL)mightwanttofreeallmemoryallocatedbyPythonbeforeunloadingthe\nDLL.Duringahuntformemoryleaksinanapplicationadevelopermightwanttofreeallmemoryallocated\nbyPythonbeforeexitingfromtheapplication.\nBugs and caveats: The destruction of modules and objects in modules is done in random order; this may\ncausedestructors(__del__()methods)tofailwhentheydependonotherobjects(evenfunctions)ormod-\nules. DynamicallyloadedextensionmodulesloadedbyPythonarenotunloaded. Smallamountsofmemory\nallocatedbythePythoninterpretermaynotbefreed(ifyoufindaleak,pleasereportit). Memorytiedupin\ncircular references between objects is not freed. Some memory allocated by extension modules may not be\nfreed. Someextensionsmaynotworkproperlyiftheirinitializationroutineiscalledmorethanonce;thiscan\nhappenifanapplicationcallsPy_Initialize()andPy_FinalizeEx()morethanonce.\nRaisesanauditingeventcpython._PySys_ClearAuditHookswithnoarguments.\nAddedinversion3.6.\nvoidPy_Finalize()\nPart of the Stable ABI. This is a backwards-compatible version of Py_FinalizeEx() that disregards the\nreturnvalue.\nintPy_BytesMain(intargc,char**argv)\nPartoftheStableABIsinceversion3.8. SimilartoPy_Main()butargvisanarrayofbytesstrings,allowing\nthecallingapplicationtodelegatethetextdecodingsteptotheCPythonruntime.\nAddedinversion3.8.\nintPy_Main(intargc,wchar_t**argv)\nPart of the Stable ABI. The main program for the standard interpreter, encapsulating a full initializa-\ntion/finalizationcycle, as wellas additionalbehaviourto implementreadingconfigurationssettingsfromthe\nenvironmentandcommandline,andthenexecuting__main__inaccordancewithusing-on-cmdline.\nThisismadeavailableforprogramswhichwishtosupportthefullCPythoncommandlineinterface, rather\nthanjustembeddingaPythonruntimeinalargerapplication.\nTheargcandargvparametersaresimilartothosewhicharepassedtoaCprogram\u2019smain()function,except\nthattheargventriesarefirstconvertedtowchar_tusingPy_DecodeLocale(). Itisalsoimportanttonote\nthat the argument list entries may be modified to point to strings other than those passed in (however, the\ncontentsofthestringspointedtobytheargumentlistarenotmodified).\nThereturnvaluewillbe0iftheinterpreterexitsnormally(i.e.,withoutanexception),1iftheinterpreterexits\nduetoanexception,or2iftheargumentlistdoesnotrepresentavalidPythoncommandline.\nNotethatifanotherwiseunhandledSystemExitisraised,thisfunctionwillnotreturn1,butexittheprocess,\naslongasPy_InspectFlagisnotset. IfPy_InspectFlagisset,executionwilldropintotheinteractive\n204 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nPythonprompt, atwhichpointasecondotherwiseunhandledSystemExitwillstillexittheprocess, while\nanyothermeansofexitingwillsetthereturnvalueasdescribedabove.\nIn terms of the CPython runtime configuration APIs documented in the runtime configuration section (and\nwithoutaccountingforerrorhandling),Py_Mainisapproximatelyequivalentto:\nPyConfig config;\nPyConfig_InitPythonConfig(&config);\nPyConfig_SetArgv(&config, argc, argv);\nPy_InitializeFromConfig(&config);\nPyConfig_Clear(&config);\nPy_RunMain();\nIn normal usage, an embedding application will call this function instead of calling Py_Initialize(),\nPy_InitializeEx() or Py_InitializeFromConfig() directly, and all settings will be applied as de-\nscribed elsewhere in this documentation. If this function is instead called after a preceding runtime initial-\nizationAPIcall,thenexactlywhichenvironmentalandcommandlineconfigurationsettingswillbeupdated\nisversiondependent(asitdependsonwhichsettingscorrectlysupportbeingmodifiedaftertheyhavealready\nbeensetoncewhentheruntimewasfirstinitialized).\nintPy_RunMain(void)\nExecutesthemainmoduleinafullyconfiguredCPythonruntime.\nExecutesthecommand(PyConfig.run_command),thescript(PyConfig.run_filename)orthemodule\n(PyConfig.run_module)specifiedonthecommandlineorintheconfiguration. Ifnoneofthesevaluesare\nset,runstheinteractivePythonprompt(REPL)usingthe__main__module\u2019sglobalnamespace.\nIfPyConfig.inspectisnotset(thedefault),thereturnvaluewillbe0iftheinterpreterexitsnormally(that\nis,withoutraisinganexception),or1iftheinterpreterexitsduetoanexception. Ifanotherwiseunhandled\nSystemExitisraised,thefunctionwillimmediatelyexittheprocessinsteadofreturning1.\nIfPyConfig.inspectisset(suchaswhenthe-ioptionisused),ratherthanreturningwhentheinterpreter\nexits, execution will instead resume in an interactive Python prompt (REPL) using the __main__ module\u2019s\nglobalnamespace. Iftheinterpreterexitedwithanexception, itisimmediatelyraisedintheREPLsession.\nThefunctionreturnvalueisthendeterminedbythewaytheREPLsessionterminates: returning0ifthesession\nterminateswithoutraisinganunhandledexception,exitingimmediatelyforanunhandledSystemExit,and\nreturning1foranyotherunhandledexception.\nThisfunctionalwaysfinalizesthePythoninterpreterregardlessofwhetheritreturnsavalueorimmediately\nexitstheprocessduetoanunhandledSystemExitexception.\nSee Python Configuration for an example of a customized Python that always runs in isolated mode using\nPy_RunMain().\nintPyUnstable_AtExit(PyInterpreterState*interp,void(*func)(void*),void*data)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nRegisteranatexitcallbackforthetargetinterpreterinterp. ThisissimilartoPy_AtExit(),buttakesan\nexplicitinterpreteranddatapointerforthecallback.\nTheGILmustbeheldforinterp.\nAddedinversion3.13.\n9.3. Initializingandfinalizingtheinterpreter 205\nThePython/CAPI,Release3.13.3\n9.4 Process-wide parameters\nvoidPy_SetProgramName(constwchar_t*name)\nPart of the Stable ABI. This API is kept for backward compatibility: setting PyConfig.program_name\nshouldbeusedinstead,seePythonInitializationConfiguration.\nThis function should be called before Py_Initialize() is called for the first time, if it is called at all. It\ntellstheinterpreterthevalueoftheargv[0]argumenttothemain()functionoftheprogram(convertedto\nwidecharacters). ThisisusedbyPy_GetPath()andsomeotherfunctionsbelowtofindthePythonrun-time\nlibrariesrelativetotheinterpreterexecutable. Thedefaultvalueis'python'. Theargumentshouldpointto\nazero-terminatedwidecharacterstringinstaticstoragewhosecontentswillnotchangeforthedurationofthe\nprogram\u2019sexecution. NocodeinthePythoninterpreterwillchangethecontentsofthisstorage.\nUsePy_DecodeLocale()todecodeabytesstringtogetawchar_t*string.\nDeprecatedsinceversion3.11.\nwchar_t*Py_GetProgramName()\nPartoftheStableABI.ReturntheprogramnamesetwithPyConfig.program_name,orthedefault. The\nreturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue.\nThisfunctionshouldnotbecalledbeforePy_Initialize(),otherwiseitreturnsNULL.\nChangedinversion3.10: ItnowreturnsNULLifcalledbeforePy_Initialize().\nDeprecatedsinceversion3.13,willberemovedinversion3.15: Getsys.executableinstead.\nwchar_t*Py_GetPrefix()\nPartoftheStableABI.Returntheprefixforinstalledplatform-independentfiles. Thisisderivedthroughanum-\nberofcomplicatedrulesfromtheprogramnamesetwithPyConfig.program_nameandsomeenvironment\nvariables;forexample,iftheprogramnameis'/usr/local/bin/python',theprefixis'/usr/local'.\nThereturnedstringpointsintostaticstorage; thecallershouldnotmodifyitsvalue. Thiscorrespondstothe\nprefixvariableinthetop-levelMakefileandthe--prefixargumenttotheconfigurescriptatbuild\ntime. ThevalueisavailabletoPythoncodeassys.base_prefix. ItisonlyusefulonUnix. Seealsothe\nnextfunction.\nThisfunctionshouldnotbecalledbeforePy_Initialize(),otherwiseitreturnsNULL.\nChangedinversion3.10: ItnowreturnsNULLifcalledbeforePy_Initialize().\nDeprecated since version 3.13, will be removed in version 3.15: Get sys.base_prefix instead, or sys.\nprefixifvirtualenvironmentsneedtobehandled.\nwchar_t*Py_GetExecPrefix()\nPartoftheStableABI.Returntheexec-prefix forinstalledplatform-dependent files. Thisisderivedthrough\na number of complicated rules from the program name set with PyConfig.program_name and some en-\nvironmentvariables; forexample, iftheprogramnameis'/usr/local/bin/python', theexec-prefixis\n'/usr/local'. The returned string points into static storage; the caller should not modify its value. This\ncorrespondstotheexec_prefixvariableinthetop-levelMakefileandthe--exec-prefixargumentto\ntheconfigurescriptatbuildtime. ThevalueisavailabletoPythoncodeassys.base_exec_prefix. It\nisonlyusefulonUnix.\nBackground: Theexec-prefixdiffersfromtheprefixwhenplatformdependentfiles(suchasexecutablesand\nsharedlibraries)areinstalledinadifferentdirectorytree. Inatypicalinstallation,platformdependentfilesmay\nbeinstalledinthe/usr/local/platsubtreewhileplatformindependentmaybeinstalledin/usr/local.\nGenerallyspeaking,aplatformisacombinationofhardwareandsoftwarefamilies,e.g. Sparcmachinesrun-\nningtheSolaris2.xoperatingsystemareconsideredthesameplatform,butIntelmachinesrunningSolaris2.x\nareanotherplatform,andIntelmachinesrunningLinuxareyetanotherplatform. Differentmajorrevisionsof\nthesameoperatingsystemgenerallyalsoformdifferentplatforms. Non-Unixoperatingsystemsareadifferent\nstory;theinstallationstrategiesonthosesystemsaresodifferentthattheprefixandexec-prefixaremeaning-\nless,andsettotheemptystring. NotethatcompiledPythonbytecodefilesareplatformindependent(butnot\nindependentfromthePythonversionbywhichtheywerecompiled!).\n206 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nSystemadministratorswillknowhowtoconfigurethemountorautomountprogramstoshare/usr/local\nbetweenplatformswhilehaving/usr/local/platbeadifferentfilesystemforeachplatform.\nThisfunctionshouldnotbecalledbeforePy_Initialize(),otherwiseitreturnsNULL.\nChangedinversion3.10: ItnowreturnsNULLifcalledbeforePy_Initialize().\nDeprecatedsinceversion3.13, willberemovedinversion3.15: Getsys.base_exec_prefixinstead, or\nsys.exec_prefixifvirtualenvironmentsneedtobehandled.\nwchar_t*Py_GetProgramFullPath()\nPartoftheStableABI.ReturnthefullprogramnameofthePythonexecutable;thisiscomputedasaside-effect\nofderivingthedefaultmodulesearchpathfromtheprogramname(setbyPyConfig.program_name). The\nreturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue. ThevalueisavailabletoPython\ncodeassys.executable.\nThisfunctionshouldnotbecalledbeforePy_Initialize(),otherwiseitreturnsNULL.\nChangedinversion3.10: ItnowreturnsNULLifcalledbeforePy_Initialize().\nDeprecatedsinceversion3.13,willberemovedinversion3.15: Getsys.executableinstead.\nwchar_t*Py_GetPath()\nPartoftheStableABI.Returnthedefaultmodulesearchpath;thisiscomputedfromtheprogramname(set\nbyPyConfig.program_name)andsomeenvironmentvariables. Thereturnedstringconsistsofaseriesof\ndirectory names separated by a platform dependent delimiter character. The delimiter character is ':' on\nUnixandmacOS,';'onWindows. Thereturnedstringpointsintostaticstorage;thecallershouldnotmodify\nits value. The list sys.path is initialized with this value on interpreter startup; it can be (and usually is)\nmodifiedlatertochangethesearchpathforloadingmodules.\nThisfunctionshouldnotbecalledbeforePy_Initialize(),otherwiseitreturnsNULL.\nChangedinversion3.10: ItnowreturnsNULLifcalledbeforePy_Initialize().\nDeprecatedsinceversion3.13,willberemovedinversion3.15: Getsys.pathinstead.\nconstchar*Py_GetVersion()\nPartoftheStableABI.ReturntheversionofthisPythoninterpreter. Thisisastringthatlookssomethinglike\n\"3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \\n[GCC 4.2.3]\"\nThefirstword(uptothefirstspacecharacter)isthecurrentPythonversion;thefirstcharactersarethemajor\nandminorversionseparatedbyaperiod. Thereturnedstringpointsintostaticstorage; thecallershouldnot\nmodifyitsvalue. ThevalueisavailabletoPythoncodeassys.version.\nSeealsothePy_Versionconstant.\nconstchar*Py_GetPlatform()\nPartoftheStableABI.Returntheplatformidentifierforthecurrentplatform. OnUnix,thisisformedfrom\nthe\u201cofficial\u201dnameoftheoperatingsystem,convertedtolowercase,followedbythemajorrevisionnumber;\ne.g.,forSolaris2.x,whichisalsoknownasSunOS5.x,thevalueis'sunos5'. OnmacOS,itis'darwin'.\nOnWindows,itis'win'. Thereturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue.\nThevalueisavailabletoPythoncodeassys.platform.\nconstchar*Py_GetCopyright()\nPartoftheStableABI.ReturntheofficialcopyrightstringforthecurrentPythonversion,forexample\n'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'\nThereturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue. Thevalueisavailableto\nPythoncodeassys.copyright.\nconstchar*Py_GetCompiler()\nPartoftheStableABI.ReturnanindicationofthecompilerusedtobuildthecurrentPythonversion,insquare\nbrackets,forexample:\n9.4. Process-wideparameters 207\nThePython/CAPI,Release3.13.3\n\"[GCC 2.7.2.2]\"\nThereturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue. Thevalueisavailableto\nPythoncodeaspartofthevariablesys.version.\nconstchar*Py_GetBuildInfo()\nPartoftheStableABI.Returninformationaboutthesequencenumberandbuilddateandtimeofthecurrent\nPythoninterpreterinstance,forexample\n\"#67, Aug 1 1997, 22:34:28\"\nThereturnedstringpointsintostaticstorage;thecallershouldnotmodifyitsvalue. Thevalueisavailableto\nPythoncodeaspartofthevariablesys.version.\nvoidPySys_SetArgvEx(intargc,wchar_t**argv,intupdatepath)\nPartoftheStableABI.ThisAPIiskeptforbackwardcompatibility: settingPyConfig.argv,PyConfig.\nparse_argvandPyConfig.safe_pathshouldbeusedinstead,seePythonInitializationConfiguration.\nSet sys.argv based on argc and argv. These parameters are similar to those passed to the program\u2019s\nmain() function with the difference that the first entry should refer to the script file to be executed rather\nthan the executable hosting the Python interpreter. If there isn\u2019t a script that will be run, the first entry in\nargvcanbeanemptystring. Ifthisfunctionfailstoinitializesys.argv,afatalconditionissignalledusing\nPy_FatalError().\nIfupdatepathiszero,thisisallthefunctiondoes. Ifupdatepathisnon-zero,thefunctionalsomodifiessys.\npathaccordingtothefollowingalgorithm:\n\u2022 Ifthenameofanexistingscriptispassedinargv[0],theabsolutepathofthedirectorywherethescript\nislocatedisprependedtosys.path.\n\u2022 Otherwise (that is, if argc is 0 or argv[0] doesn\u2019t point to an existing file name), an empty string is\nprependedtosys.path,whichisthesameasprependingthecurrentworkingdirectory(\".\").\nUsePy_DecodeLocale()todecodeabytesstringtogetawchar_t*string.\nSeealsoPyConfig.orig_argvandPyConfig.argvmembersofthePythonInitializationConfiguration.\n(cid:174) Note\nItisrecommendedthatapplicationsembeddingthePythoninterpreterforpurposesotherthanexecutinga\nsinglescriptpass0asupdatepath,andupdatesys.paththemselvesifdesired. SeeCVE2008-5983.\nOnversionsbefore3.1.3,youcanachievethesameeffectbymanuallypoppingthefirstsys.pathelement\nafterhavingcalledPySys_SetArgv(),forexampleusing:\nPyRun_SimpleString(\"import sys; sys.path.pop(0)\\n\");\nAddedinversion3.1.3.\nDeprecatedsinceversion3.11.\nvoidPySys_SetArgv(intargc,wchar_t**argv)\nPartoftheStableABI.ThisAPIiskeptforbackwardcompatibility:settingPyConfig.argvandPyConfig.\nparse_argvshouldbeusedinstead,seePythonInitializationConfiguration.\nThisfunctionworkslikePySys_SetArgvEx()withupdatepathsetto1unlessthepythoninterpreterwas\nstartedwiththe-I.\nUsePy_DecodeLocale()todecodeabytesstringtogetawchar_t*string.\nSeealsoPyConfig.orig_argvandPyConfig.argvmembersofthePythonInitializationConfiguration.\nChangedinversion3.4: Theupdatepathvaluedependson-I.\n208 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nDeprecatedsinceversion3.11.\nvoidPy_SetPythonHome(constwchar_t*home)\nPartoftheStableABI.ThisAPIiskeptforbackwardcompatibility: settingPyConfig.homeshouldbeused\ninstead,seePythonInitializationConfiguration.\nSetthedefault\u201chome\u201ddirectory,thatis,thelocationofthestandardPythonlibraries. SeePYTHONHOMEfor\nthemeaningoftheargumentstring.\nTheargumentshouldpointtoazero-terminatedcharacterstringinstaticstoragewhosecontentswillnotchange\nforthedurationoftheprogram\u2019sexecution. NocodeinthePythoninterpreterwillchangethecontentsofthis\nstorage.\nUsePy_DecodeLocale()todecodeabytesstringtogetawchar_t*string.\nDeprecatedsinceversion3.11.\nwchar_t*Py_GetPythonHome()\nPartoftheStableABI.Returnthedefault\u201chome\u201d,thatis,thevaluesetbyPyConfig.home,orthevalueof\nthePYTHONHOMEenvironmentvariableifitisset.\nThisfunctionshouldnotbecalledbeforePy_Initialize(),otherwiseitreturnsNULL.\nChangedinversion3.10: ItnowreturnsNULLifcalledbeforePy_Initialize().\nDeprecatedsinceversion3.13,willberemovedinversion3.15: GetPyConfig.homeorPYTHONHOMEenvi-\nronmentvariableinstead.\n9.5 Thread State and the Global Interpreter Lock\nThePythoninterpreterisnotfullythread-safe. Inordertosupportmulti-threadedPythonprograms,there\u2019saglobal\nlock, called the global interpreter lock or GIL, that must be held by the current thread before it can safely access\nPythonobjects. Withoutthelock,eventhesimplestoperationscouldcauseproblemsinamulti-threadedprogram:\nforexample,whentwothreadssimultaneouslyincrementthereferencecountofthesameobject,thereferencecount\ncouldendupbeingincrementedonlyonceinsteadoftwice.\nTherefore,theruleexiststhatonlythethreadthathasacquiredtheGILmayoperateonPythonobjectsorcallPython/C\nAPI functions. In order to emulate concurrency of execution, the interpreter regularly tries to switch threads (see\nsys.setswitchinterval()). ThelockisalsoreleasedaroundpotentiallyblockingI/Ooperationslikereading\norwritingafile,sothatotherPythonthreadscanruninthemeantime.\nThe Python interpreter keeps some thread-specific bookkeeping information inside a data structure called\nPyThreadState. There\u2019s also one global variable pointing to the current PyThreadState: it can be retrieved\nusingPyThreadState_Get().\n9.5.1 Releasing the GIL from extension code\nMostextensioncodemanipulatingtheGILhasthefollowingsimplestructure:\nSave the thread state in a local variable.\nRelease the global interpreter lock.\n... Do some blocking I/O operation ...\nReacquire the global interpreter lock.\nRestore the thread state from the local variable.\nThisissocommonthatapairofmacrosexiststosimplifyit:\nPy_BEGIN_ALLOW_THREADS\n... Do some blocking I/O operation ...\nPy_END_ALLOW_THREADS\nThe Py_BEGIN_ALLOW_THREADS macro opens a new block and declares a hidden local variable; the\nPy_END_ALLOW_THREADSmacroclosestheblock.\n9.5. ThreadStateandtheGlobalInterpreterLock 209\nThePython/CAPI,Release3.13.3\nTheblockaboveexpandstothefollowingcode:\nPyThreadState *_save;\n_save = PyEval_SaveThread();\n... Do some blocking I/O operation ...\nPyEval_RestoreThread(_save);\nHere is how these functions work: the global interpreter lock is used to protect the pointer to the current thread\nstate. Whenreleasingthelockandsavingthethreadstate,thecurrentthreadstatepointermustberetrievedbefore\nthe lock is released (since another thread could immediately acquire the lock and store its own thread state in the\nglobalvariable). Conversely,whenacquiringthelockandrestoringthethreadstate,thelockmustbeacquiredbefore\nstoringthethreadstatepointer.\n(cid:174) Note\nCallingsystemI/OfunctionsisthemostcommonusecaseforreleasingtheGIL,butitcanalsobeusefulbefore\ncalling long-running computations which don\u2019t need access to Python objects, such as compression or crypto-\ngraphicfunctionsoperatingovermemorybuffers. Forexample,thestandardzlibandhashlibmodulesrelease\ntheGILwhencompressingorhashingdata.\n9.5.2 Non-Python created threads\nWhen threads are created using the dedicated Python APIs (such as the threading module), a thread state is\nautomaticallyassociatedtothemandthecodeshowedaboveisthereforecorrect. However,whenthreadsarecreated\nfromC(forexamplebyathird-partylibrarywithitsownthreadmanagement),theydon\u2019tholdtheGIL,noristhere\nathreadstatestructureforthem.\nIfyouneedtocallPythoncodefromthesethreads(oftenthiswillbepartofacallbackAPIprovidedbytheafore-\nmentioned third-party library), you must first register these threads with the interpreter by creating a thread state\ndata structure, then acquiring the GIL, and finally storing their thread state pointer, before you can start using the\nPython/CAPI. Whenyouaredone, youshouldresetthethreadstatepointer, releasetheGIL,andfinallyfreethe\nthreadstatedatastructure.\nThe PyGILState_Ensure() and PyGILState_Release() functions do all of the above automatically. The\ntypicalidiomforcallingintoPythonfromaCthreadis:\nPyGILState_STATE gstate;\ngstate = PyGILState_Ensure();\n/* Perform Python actions here. */\nresult = CallSomeFunction();\n/* evaluate result or handle exception */\n/* Release the thread. No Python API allowed beyond this point. */\nPyGILState_Release(gstate);\nNote that the PyGILState_* functions assume there is only one global interpreter (created automatically by\nPy_Initialize()). Python supports the creation of additional interpreters (using Py_NewInterpreter()),\nbutmixingmultipleinterpretersandthePyGILState_*APIisunsupported.\n9.5.3 Cautions about fork()\nAnotherimportantthingtonoteaboutthreadsistheirbehaviourinthefaceoftheCfork()call. Onmostsystems\nwithfork(),afteraprocessforksonlythethreadthatissuedtheforkwillexist. Thishasaconcreteimpactbothon\nhowlocksmustbehandledandonallstoredstateinCPython\u2019sruntime.\nThefactthatonlythe\u201ccurrent\u201dthreadremainsmeansanylocksheldbyotherthreadswillneverbereleased. Python\nsolvesthisforos.fork()byacquiringthelocksitusesinternallybeforethefork,andreleasingthemafterwards.\n210 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nInaddition,itresetsanylock-objectsinthechild. WhenextendingorembeddingPython,thereisnowaytoinform\nPython of additional (non-Python) locks that need to be acquired before or reset after a fork. OS facilities such\nas pthread_atfork() would need to be used to accomplish the same thing. Additionally, when extending or\nembeddingPython,callingfork()directlyratherthanthroughos.fork()(andreturningtoorcallingintoPython)\nmay result in a deadlock by one of Python\u2019s internal locks being held by a thread that is defunct after the fork.\nPyOS_AfterFork_Child()triestoresetthenecessarylocks,butisnotalwaysableto.\nThefactthatallotherthreadsgoawayalsomeansthatCPython\u2019sruntimestatetheremustbecleanedupproperly,\nwhichos.fork()does. ThismeansfinalizingallotherPyThreadStateobjectsbelongingtothecurrentinterpreter\nandallotherPyInterpreterStateobjects. Duetothisandthespecialnatureofthe\u201cmain\u201dinterpreter,fork()\nshouldonlybecalledinthatinterpreter\u2019s\u201cmain\u201dthread,wheretheCPythonglobalruntimewasoriginallyinitialized.\nTheonlyexceptionisifexec()willbecalledimmediatelyafter.\n9.5.4 High-level API\nThese are the most commonly used types and functions when writing C extension code, or when embedding the\nPythoninterpreter:\ntypePyInterpreterState\nPartoftheLimitedAPI(asanopaquestruct). Thisdatastructurerepresentsthestatesharedbyanumberof\ncooperatingthreads. Threadsbelongingtothesameinterpretersharetheirmoduleadministrationandafew\notherinternalitems. Therearenopublicmembersinthisstructure.\nThreadsbelongingtodifferentinterpretersinitiallysharenothing,exceptprocessstatelikeavailablememory,\nopenfiledescriptorsandsuch. Theglobalinterpreterlockisalsosharedbyallthreads,regardlessoftowhich\ninterpretertheybelong.\ntypePyThreadState\nPartoftheLimitedAPI(asanopaquestruct). Thisdatastructurerepresentsthestateofasinglethread. The\nonlypublicdatamemberis:\nPyInterpreterState*interp\nThisthread\u2019sinterpreterstate.\nvoidPyEval_InitThreads()\nPartoftheStableABI.Deprecatedfunctionwhichdoesnothing.\nInPython3.6andolder,thisfunctioncreatedtheGILifitdidn\u2019texist.\nChangedinversion3.9: Thefunctionnowdoesnothing.\nChangedinversion3.7:ThisfunctionisnowcalledbyPy_Initialize(),soyoudon\u2019thavetocallityourself\nanymore.\nChangedinversion3.2: ThisfunctioncannotbecalledbeforePy_Initialize()anymore.\nDeprecatedsinceversion3.9.\nPyThreadState*PyEval_SaveThread()\nPartoftheStableABI.Releasetheglobalinterpreterlock(ifithasbeencreated)andresetthethreadstateto\nNULL,returningthepreviousthreadstate(whichisnotNULL).Ifthelockhasbeencreated,thecurrentthread\nmusthaveacquiredit.\nvoidPyEval_RestoreThread(PyThreadState*tstate)\nPartoftheStableABI.Acquiretheglobalinterpreterlock(ifithasbeencreated)andsetthethreadstateto\ntstate, which must not be NULL. If the lock has been created, the current thread must not have acquired it,\notherwisedeadlockensues.\n(cid:174) Note\nCalling this function from a thread when the runtime is finalizing will terminate the thread, even if the\nthread was not created by Python. You can use Py_IsFinalizing() or sys.is_finalizing() to\n9.5. ThreadStateandtheGlobalInterpreterLock 211\nThePython/CAPI,Release3.13.3\ncheck if the interpreter is in process of being finalized before calling this function to avoid unwanted\ntermination.\nPyThreadState*PyThreadState_Get()\nPartoftheStableABI.Returnthecurrentthreadstate. Theglobalinterpreterlockmustbeheld. Whenthe\ncurrentthreadstateisNULL,thisissuesafatalerror(sothatthecallerneedn\u2019tcheckforNULL).\nSeealsoPyThreadState_GetUnchecked().\nPyThreadState*PyThreadState_GetUnchecked()\nSimilartoPyThreadState_Get(),butdon\u2019tkilltheprocesswithafatalerrorifitisNULL.Thecalleris\nresponsibletocheckiftheresultisNULL.\nAdded in version 3.13: In Python 3.5 to 3.12, the function was private and known as\n_PyThreadState_UncheckedGet().\nPyThreadState*PyThreadState_Swap(PyThreadState*tstate)\nPartoftheStableABI.Swapthecurrentthreadstatewiththethreadstategivenbytheargumenttstate,which\nmaybeNULL.Theglobalinterpreterlockmustbeheldandisnotreleased.\nThefollowingfunctionsusethread-localstorage,andarenotcompatiblewithsub-interpreters:\nPyGILState_STATEPyGILState_Ensure()\nPart of the Stable ABI. Ensure that the current thread is ready to call the Python C API regardless of the\ncurrent state of Python, or of the global interpreter lock. This may be called as many times as desired by\nathreadaslongaseachcallismatchedwithacalltoPyGILState_Release(). Ingeneral, otherthread-\nrelated APIs may be used between PyGILState_Ensure() and PyGILState_Release() calls as long\nas the thread state is restored to its previous state before the Release(). For example, normal usage of the\nPy_BEGIN_ALLOW_THREADSandPy_END_ALLOW_THREADSmacrosisacceptable.\nThe return value is an opaque \u201chandle\u201d to the thread state when PyGILState_Ensure() was called, and\nmustbepassedtoPyGILState_Release()toensurePythonisleftinthesamestate. Eventhoughrecursive\ncallsareallowed,thesehandlescannotbeshared-eachuniquecalltoPyGILState_Ensure()mustsavethe\nhandleforitscalltoPyGILState_Release().\nWhen the function returns, the current thread will hold the GIL and be able to call arbitrary Python code.\nFailureisafatalerror.\n(cid:174) Note\nCalling this function from a thread when the runtime is finalizing will terminate the thread, even if the\nthread was not created by Python. You can use Py_IsFinalizing() or sys.is_finalizing() to\ncheck if the interpreter is in process of being finalized before calling this function to avoid unwanted\ntermination.\nvoidPyGILState_Release(PyGILState_STATE)\nPartoftheStableABI.Releaseanyresourcespreviouslyacquired. Afterthiscall,Python\u2019sstatewillbethesame\nasitwaspriortothecorrespondingPyGILState_Ensure()call(butgenerallythisstatewillbeunknownto\nthecaller,hencetheuseoftheGILStateAPI).\nEverycalltoPyGILState_Ensure()mustbematchedbyacalltoPyGILState_Release()onthesame\nthread.\nPyThreadState*PyGILState_GetThisThreadState()\nPart of the Stable ABI. Get the current thread state for this thread. May return NULL if no GILState API\nhas been used on the current thread. Note that the main thread always has such a thread-state, even if no\nauto-thread-statecallhasbeenmadeonthemainthread. Thisismainlyahelper/diagnosticfunction.\n212 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nintPyGILState_Check()\nReturn1ifthecurrentthreadisholdingtheGILand0otherwise. Thisfunctioncanbecalledfromanythread\natanytime. OnlyifithashaditsPythonthreadstateinitializedandcurrentlyisholdingtheGILwillitreturn\n1. Thisismainlyahelper/diagnosticfunction. Itcanbeusefulforexampleincallbackcontextsormemory\nallocationfunctionswhenknowingthattheGILislockedcanallowthecallertoperformsensitiveactionsor\notherwisebehavedifferently.\nAddedinversion3.4.\nThefollowingmacrosarenormallyusedwithoutatrailingsemicolon;lookforexampleusageinthePythonsource\ndistribution.\nPy_BEGIN_ALLOW_THREADS\nPart of the Stable ABI. This macro expands to { PyThreadState *_save; _save =\nPyEval_SaveThread();. Note that it contains an opening brace; it must be matched with a follow-\ningPy_END_ALLOW_THREADSmacro. Seeaboveforfurtherdiscussionofthismacro.\nPy_END_ALLOW_THREADS\nPartoftheStableABI.ThismacroexpandstoPyEval_RestoreThread(_save); }. Notethatitcontains\naclosingbrace;itmustbematchedwithanearlierPy_BEGIN_ALLOW_THREADSmacro. Seeaboveforfurther\ndiscussionofthismacro.\nPy_BLOCK_THREADS\nPart of the Stable ABI. This macro expands to PyEval_RestoreThread(_save);: it is equivalent to\nPy_END_ALLOW_THREADSwithouttheclosingbrace.\nPy_UNBLOCK_THREADS\nPart of the Stable ABI. This macro expands to _save = PyEval_SaveThread();: it is equivalent to\nPy_BEGIN_ALLOW_THREADSwithouttheopeningbraceandvariabledeclaration.\n9.5.5 Low-level API\nAllofthefollowingfunctionsmustbecalledafterPy_Initialize().\nChangedinversion3.7: Py_Initialize()nowinitializestheGIL.\nPyInterpreterState*PyInterpreterState_New()\nPartoftheStableABI.Createanewinterpreterstateobject. Theglobalinterpreterlockneednotbeheld,but\nmaybeheldifitisnecessarytoserializecallstothisfunction.\nRaisesanauditingeventcpython.PyInterpreterState_Newwithnoarguments.\nvoidPyInterpreterState_Clear(PyInterpreterState*interp)\nPartoftheStableABI.Resetallinformationinaninterpreterstateobject. Theglobalinterpreterlockmustbe\nheld.\nRaisesanauditingeventcpython.PyInterpreterState_Clearwithnoarguments.\nvoidPyInterpreterState_Delete(PyInterpreterState*interp)\nPartoftheStableABI.Destroyaninterpreterstateobject. Theglobalinterpreterlockneednotbeheld. The\ninterpreterstatemusthavebeenresetwithapreviouscalltoPyInterpreterState_Clear().\nPyThreadState*PyThreadState_New(PyInterpreterState*interp)\nPartoftheStableABI.Createanewthreadstateobjectbelongingtothegiveninterpreterobject. Theglobal\ninterpreterlockneednotbeheld,butmaybeheldifitisnecessarytoserializecallstothisfunction.\nvoidPyThreadState_Clear(PyThreadState*tstate)\nPartoftheStableABI.Resetallinformationinathreadstateobject. Theglobalinterpreterlockmustbeheld.\nChangedinversion3.9: ThisfunctionnowcallsthePyThreadState.on_deletecallback. Previously,that\nhappenedinPyThreadState_Delete().\nChangedinversion3.13: ThePyThreadState.on_deletecallbackwasremoved.\n9.5. ThreadStateandtheGlobalInterpreterLock 213\nThePython/CAPI,Release3.13.3\nvoidPyThreadState_Delete(PyThreadState*tstate)\nPartoftheStableABI.Destroyathreadstateobject. Theglobalinterpreterlockneednotbeheld. Thethread\nstatemusthavebeenresetwithapreviouscalltoPyThreadState_Clear().\nvoidPyThreadState_DeleteCurrent(void)\nDestroythecurrentthreadstateandreleasetheglobalinterpreterlock. LikePyThreadState_Delete(),\nthe global interpreter lock must be held. The thread state must have been reset with a previous call to\nPyThreadState_Clear().\nPyFrameObject*PyThreadState_GetFrame(PyThreadState*tstate)\nPartoftheStableABIsinceversion3.10. GetthecurrentframeofthePythonthreadstatetstate.\nReturnastrongreference. ReturnNULLifnoframeiscurrentlyexecuting.\nSeealsoPyEval_GetFrame().\ntstatemustnotbeNULL.\nAddedinversion3.9.\nuint64_tPyThreadState_GetID(PyThreadState*tstate)\nPartoftheStableABIsinceversion3.10. GettheuniquethreadstateidentifierofthePythonthreadstatetstate.\ntstatemustnotbeNULL.\nAddedinversion3.9.\nPyInterpreterState*PyThreadState_GetInterpreter(PyThreadState*tstate)\nPartoftheStableABIsinceversion3.10. GettheinterpreterofthePythonthreadstatetstate.\ntstatemustnotbeNULL.\nAddedinversion3.9.\nvoidPyThreadState_EnterTracing(PyThreadState*tstate)\nSuspendtracingandprofilinginthePythonthreadstatetstate.\nResumethemusingthePyThreadState_LeaveTracing()function.\nAddedinversion3.11.\nvoidPyThreadState_LeaveTracing(PyThreadState*tstate)\nResume tracing and profiling in the Python thread state tstate suspended by the\nPyThreadState_EnterTracing()function.\nSeealsoPyEval_SetTrace()andPyEval_SetProfile()functions.\nAddedinversion3.11.\nPyInterpreterState*PyInterpreterState_Get(void)\nPartoftheStableABIsinceversion3.9. Getthecurrentinterpreter.\nIssueafatalerroriftherenocurrentPythonthreadstateornocurrentinterpreter. ItcannotreturnNULL.\nThecallermustholdtheGIL.\nAddedinversion3.9.\nint64_tPyInterpreterState_GetID(PyInterpreterState*interp)\nPartoftheStableABIsinceversion3.7. Returntheinterpreter\u2019suniqueID.Iftherewasanyerrorindoingso\nthen-1isreturnedandanerrorisset.\nThecallermustholdtheGIL.\nAddedinversion3.7.\n214 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nPyObject*PyInterpreterState_GetDict(PyInterpreterState*interp)\nPartoftheStableABIsinceversion3.8. Returnadictionaryinwhichinterpreter-specificdatamaybestored.\nIfthisfunctionreturnsNULLthennoexceptionhasbeenraisedandthecallershouldassumenointerpreter-\nspecificdictisavailable.\nThis is not a replacement for PyModule_GetState(), which extensions should use to store interpreter-\nspecificstateinformation.\nAddedinversion3.8.\nPyObject*PyUnstable_InterpreterState_GetMainModule(PyInterpreterState*interp)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nReturnastrongreferencetothe__main__moduleobjectforthegiveninterpreter.\nThecallermustholdtheGIL.\nAddedinversion3.13.\ntypedefPyObject*(*_PyFrameEvalFunction)(PyThreadState*tstate,_PyInterpreterFrame*frame,int\nthrowflag)\nTypeofaframeevaluationfunction.\nThethrowflagparameterisusedbythethrow()methodofgenerators: ifnon-zero, handlethecurrentex-\nception.\nChangedinversion3.9: Thefunctionnowtakesatstateparameter.\nChanged in version 3.11: The frame parameter changed from PyFrameObject* to\n_PyInterpreterFrame*.\n_PyFrameEvalFunction_PyInterpreterState_GetEvalFrameFunc(PyInterpreterState*interp)\nGettheframeevaluationfunction.\nSeethePEP523\u201cAddingaframeevaluationAPItoCPython\u201d.\nAddedinversion3.9.\nvoid_PyInterpreterState_SetEvalFrameFunc(PyInterpreterState*interp,_PyFrameEvalFunction\neval_frame)\nSettheframeevaluationfunction.\nSeethePEP523\u201cAddingaframeevaluationAPItoCPython\u201d.\nAddedinversion3.9.\nPyObject*PyThreadState_GetDict()\nReturnvalue: Borrowedreference. PartoftheStableABI.Returnadictionaryinwhichextensionscanstore\nthread-specificstateinformation. Eachextensionshoulduseauniquekeytousetostorestateinthedictionary.\nIt is okay to call this function when no current thread state is available. If this function returns NULL, no\nexceptionhasbeenraisedandthecallershouldassumenocurrentthreadstateisavailable.\nintPyThreadState_SetAsyncExc(unsignedlongid,PyObject*exc)\nPart of the Stable ABI. Asynchronously raise an exception in a thread. The id argument is the thread id of\nthetargetthread; exc istheexceptionobjecttoberaised. Thisfunctiondoesnotstealanyreferencestoexc.\nTopreventnaivemisuse,youmustwriteyourownCextensiontocallthis. MustbecalledwiththeGILheld.\nReturnsthenumberofthreadstatesmodified;thisisnormallyone,butwillbezeroifthethreadidisn\u2019tfound.\nIfexcisNULL,thependingexception(ifany)forthethreadiscleared. Thisraisesnoexceptions.\nChangedinversion3.7: Thetypeoftheidparameterchangedfromlongtounsigned long.\n9.5. ThreadStateandtheGlobalInterpreterLock 215\nThePython/CAPI,Release3.13.3\nvoidPyEval_AcquireThread(PyThreadState*tstate)\nPartoftheStableABI.Acquiretheglobalinterpreterlockandsetthecurrentthreadstatetotstate,whichmust\nnotbeNULL.Thelockmusthavebeencreatedearlier. Ifthisthreadalreadyhasthelock,deadlockensues.\n(cid:174) Note\nCalling this function from a thread when the runtime is finalizing will terminate the thread, even if the\nthread was not created by Python. You can use Py_IsFinalizing() or sys.is_finalizing() to\ncheck if the interpreter is in process of being finalized before calling this function to avoid unwanted\ntermination.\nChanged in version 3.8: Updated to be consistent with PyEval_RestoreThread(),\nPy_END_ALLOW_THREADS(), and PyGILState_Ensure(), and terminate the current thread if called\nwhiletheinterpreterisfinalizing.\nPyEval_RestoreThread()isahigher-levelfunctionwhichisalwaysavailable(evenwhenthreadshavenot\nbeeninitialized).\nvoidPyEval_ReleaseThread(PyThreadState*tstate)\nPartoftheStableABI.ResetthecurrentthreadstatetoNULLandreleasetheglobalinterpreterlock. Thelock\nmusthavebeencreatedearlierandmustbeheldbythecurrentthread. Thetstateargument,whichmustnot\nbeNULL,isonlyusedtocheckthatitrepresentsthecurrentthreadstate\u2014ifitisn\u2019t,afatalerrorisreported.\nPyEval_SaveThread() is a higher-level function which is always available (even when threads have not\nbeeninitialized).\n9.6 Sub-interpreter support\nWhileinmostuses,youwillonlyembedasinglePythoninterpreter,therearecaseswhereyouneedtocreateseveral\nindependentinterpretersinthesameprocessandperhapseveninthesamethread. Sub-interpretersallowyoutodo\nthat.\nThe\u201cmain\u201dinterpreteristhefirstonecreatedwhentheruntimeinitializes. ItisusuallytheonlyPythoninterpreterina\nprocess. Unlikesub-interpreters,themaininterpreterhasuniqueprocess-globalresponsibilitieslikesignalhandling.\nItisalsoresponsibleforexecutionduringruntimeinitializationandisusuallytheactiveinterpreterduringruntime\nfinalization. ThePyInterpreterState_Main()functionreturnsapointertoitsstate.\nYoucanswitchbetweensub-interpretersusingthePyThreadState_Swap()function. Youcancreateanddestroy\nthemusingthefollowingfunctions:\ntypePyInterpreterConfig\nStructure containing most parameters to configure a sub-interpreter. Its values are used only in\nPy_NewInterpreterFromConfig()andnevermodifiedbytheruntime.\nAddedinversion3.12.\nStructurefields:\nintuse_main_obmalloc\nIfthisis0thenthesub-interpreterwilluseitsown\u201cobject\u201dallocatorstate. Otherwiseitwilluse(share)\nthemaininterpreter\u2019s.\nIfthisis0thencheck_multi_interp_extensionsmustbe1(non-zero). Ifthisis1thengilmust\nnotbePyInterpreterConfig_OWN_GIL.\nintallow_fork\nIfthisis0thentheruntimewillnotsupportforkingtheprocessinanythreadwherethesub-interpreter\niscurrentlyactive. Otherwiseforkisunrestricted.\nNotethatthesubprocessmodulestillworkswhenforkisdisallowed.\n216 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nintallow_exec\nIfthisis0thentheruntimewillnotsupportreplacingthecurrentprocessviaexec(e.g. os.execv())\ninanythreadwherethesub-interpreteriscurrentlyactive. Otherwiseexecisunrestricted.\nNotethatthesubprocessmodulestillworkswhenexecisdisallowed.\nintallow_threads\nIf this is 0 then the sub-interpreter\u2019s threading module won\u2019t create threads. Otherwise threads are\nallowed.\nintallow_daemon_threads\nIfthisis0thenthesub-interpreter\u2019sthreadingmodulewon\u2019tcreatedaemonthreads. Otherwisedaemon\nthreadsareallowed(aslongasallow_threadsisnon-zero).\nintcheck_multi_interp_extensions\nIf this is 0 then all extension modules may be imported, including legacy (single-phase init) modules,\nin any thread where the sub-interpreter is currently active. Otherwise only multi-phase init extension\nmodules(seePEP489)maybeimported. (AlsoseePy_mod_multiple_interpreters.)\nThismustbe1(non-zero)ifuse_main_obmallocis0.\nintgil\nThisdeterminestheoperationoftheGILforthesub-interpreter. Itmaybeoneofthefollowing:\nPyInterpreterConfig_DEFAULT_GIL\nUsethedefaultselection(PyInterpreterConfig_SHARED_GIL).\nPyInterpreterConfig_SHARED_GIL\nUse(share)themaininterpreter\u2019sGIL.\nPyInterpreterConfig_OWN_GIL\nUsethesub-interpreter\u2019sownGIL.\nIf this is PyInterpreterConfig_OWN_GIL then PyInterpreterConfig.use_main_obmalloc\nmustbe0.\nPyStatusPy_NewInterpreterFromConfig(PyThreadState**tstate_p,constPyInterpreterConfig*config)\nCreate a new sub-interpreter. This is an (almost) totally separate environment for the execution of Python\ncode. Inparticular,thenewinterpreterhasseparate,independentversionsofallimportedmodules,including\nthefundamentalmodulesbuiltins,__main__andsys. Thetableofloadedmodules(sys.modules)and\nthemodulesearchpath(sys.path)arealsoseparate. Thenewenvironmenthasnosys.argvvariable. It\nhasnewstandardI/Ostreamfileobjectssys.stdin, sys.stdoutandsys.stderr(howevertheserefer\ntothesameunderlyingfiledescriptors).\nThegivenconfigcontrolstheoptionswithwhichtheinterpreterisinitialized.\nUponsuccess,tstate_pwillbesettothefirstthreadstatecreatedinthenewsub-interpreter. Thisthreadstate\nismadeinthecurrentthreadstate. Notethatnoactualthreadiscreated; seethediscussionofthreadstates\nbelow. Ifcreationofthenewinterpreterisunsuccessful,tstate_pissettoNULL;noexceptionissetsincethe\nexceptionstateisstoredinthecurrentthreadstateandtheremaynotbeacurrentthreadstate.\nLike all other Python/C API functions, the global interpreter lock must be held before calling this function\nandisstillheldwhenitreturns. Likewiseacurrentthreadstatemustbesetonentry. Onsuccess,thereturned\nthreadstatewillbesetascurrent. Ifthesub-interpreteriscreatedwithitsownGILthentheGILofthecalling\ninterpreterwillbereleased. Whenthefunctionreturns,thenewinterpreter\u2019sGILwillbeheldbythecurrent\nthreadandthepreviouslyinterpreter\u2019sGILwillremainreleasedhere.\nAddedinversion3.12.\nSub-interpretersaremosteffectivewhenisolatedfromeachother,withcertainfunctionalityrestricted:\nPyInterpreterConfig config = {\n.use_main_obmalloc = 0,\n(continuesonnextpage)\n9.6. Sub-interpretersupport 217\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\n.allow_fork = 0,\n.allow_exec = 0,\n.allow_threads = 1,\n.allow_daemon_threads = 0,\n.check_multi_interp_extensions = 1,\n.gil = PyInterpreterConfig_OWN_GIL,\n};\nPyThreadState *tstate = NULL;\nPyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\nif (PyStatus_Exception(status)) {\nPy_ExitStatusException(status);\n}\nNotethattheconfigisusedonlybrieflyanddoesnotgetmodified. Duringinitializationtheconfig\u2019svaluesare\nconvertedintovariousPyInterpreterStatevalues. Aread-onlycopyoftheconfigmaybestoredinternally\nonthePyInterpreterState.\nExtensionmodulesaresharedbetween(sub-)interpretersasfollows:\n\u2022 Formodulesusingmulti-phaseinitialization,e.g. PyModule_FromDefAndSpec(),aseparatemodule\nobjectiscreatedandinitializedforeachinterpreter. OnlyC-levelstaticandglobalvariablesareshared\nbetweenthesemoduleobjects.\n\u2022 Formodulesusingsingle-phaseinitialization,e.g. PyModule_Create(),thefirsttimeaparticularex-\ntensionisimported,itisinitializednormally,anda(shallow)copyofitsmodule\u2019sdictionaryissquirreled\naway. Whenthesameextensionisimportedbyanother(sub-)interpreter,anewmoduleisinitializedand\nfilledwiththecontentsofthiscopy;theextension\u2019sinitfunctionisnotcalled. Objectsinthemodule\u2019s\ndictionarythusendupsharedacross(sub-)interpreters,whichmightcauseunwantedbehavior(seeBugs\nandcaveatsbelow).\nNote that this is different from what happens when an extension is imported after the interpreter has\nbeencompletelyre-initializedbycallingPy_FinalizeEx()andPy_Initialize();inthatcase,the\nextension\u2019sinitmodulefunctioniscalledagain. Aswithmulti-phaseinitialization,thismeansthatonly\nC-levelstaticandglobalvariablesaresharedbetweenthesemodules.\nPyThreadState*Py_NewInterpreter(void)\nPart of the Stable ABI. Create a new sub-interpreter. This is essentially just a wrapper around\nPy_NewInterpreterFromConfig() with a config that preserves the existing behavior. The result is an\nunisolatedsub-interpreterthatsharesthemaininterpreter\u2019sGIL,allowsfork/exec,allowsdaemonthreads,and\nallowssingle-phaseinitmodules.\nvoidPy_EndInterpreter(PyThreadState*tstate)\nPartoftheStableABI.Destroythe(sub-)interpreterrepresentedbythegiventhreadstate. Thegiventhread\nstate must be the current thread state. See the discussion of thread states below. When the call returns,\nthe current thread state is NULL. All thread states associated with this interpreter are destroyed. The global\ninterpreterlockusedbythetargetinterpretermustbeheldbeforecallingthisfunction. NoGILisheldwhen\nitreturns.\nPy_FinalizeEx()willdestroyallsub-interpretersthathaven\u2019tbeenexplicitlydestroyedatthatpoint.\n9.6.1 A Per-Interpreter GIL\nUsingPy_NewInterpreterFromConfig()youcancreateasub-interpreterthatiscompletelyisolatedfromother\ninterpreters, including having its own GIL. The most important benefit of this isolation is that such an interpreter\ncanexecutePythoncodewithoutbeingblockedbyotherinterpretersorblockinganyothers. ThusasinglePython\nprocesscantrulytakeadvantageofmultipleCPUcoreswhenrunningPythoncode. Theisolationalsoencouragesa\ndifferentapproachtoconcurrencythanthatofjustusingthreads. (SeePEP554.)\nUsinganisolatedinterpreterrequiresvigilanceinpreservingthatisolation. Thatespeciallymeansnotsharingany\nobjects or mutable state without guarantees about thread-safety. Even objects that are otherwise immutable (e.g.\n218 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nNone, (1, 5)) can\u2019t normally be shared because of the refcount. One simple but less-efficient approach around\nthisistouseagloballockaroundalluseofsomestate(orobject). Alternately,effectivelyimmutableobjects(like\nintegersorstrings)canbemadesafeinspiteoftheirrefcountsbymakingthemimmortal. Infact,thishasbeendone\nforthebuiltinsingletons,smallintegers,andanumberofotherbuiltinobjects.\nIf you preserve isolation then you will have access to proper multi-core computing without the complications that\ncomewithfree-threading. Failuretopreserveisolationwillexposeyoutothefullconsequencesoffree-threading,\nincludingracesandhard-to-debugcrashes.\nAsidefromthat,oneofthemainchallengesofusingmultipleisolatedinterpretersishowtocommunicatebetween\nthem safely (not break isolation) and efficiently. The runtime and stdlib do not provide any standard approach to\nthisyet. Afuturestdlibmodulewouldhelpmitigatetheeffortofpreservingisolationandexposeeffectivetoolsfor\ncommunicating(andsharing)databetweeninterpreters.\nAddedinversion3.12.\n9.6.2 Bugs and caveats\nBecausesub-interpreters(andthemaininterpreter)arepartofthesameprocess,theinsulationbetweenthemisn\u2019t\nperfect\u2014forexample,usinglow-levelfileoperationslikeos.close()theycan(accidentallyormaliciously)affect\neachother\u2019sopenfiles. Becauseofthewayextensionsaresharedbetween(sub-)interpreters,someextensionsmaynot\nworkproperly;thisisespeciallylikelywhenusingsingle-phaseinitializationor(static)globalvariables. Itispossible\ntoinsertobjectscreatedinonesub-interpreterintoanamespaceofanother(sub-)interpreter;thisshouldbeavoided\nifpossible.\nSpecial care should be taken to avoid sharing user-defined functions, methods, instances or classes between sub-\ninterpreters,sinceimportoperationsexecutedbysuchobjectsmayaffectthewrong(sub-)interpreter\u2019sdictionaryof\nloadedmodules. Itisequallyimportanttoavoidsharingobjectsfromwhichtheabovearereachable.\nAlsonotethatcombiningthisfunctionalitywithPyGILState_*APIsisdelicate,becausetheseAPIsassumeabijec-\ntionbetweenPythonthreadstatesandOS-levelthreads,anassumptionbrokenbythepresenceofsub-interpreters. It\nishighlyrecommendedthatyoudon\u2019tswitchsub-interpretersbetweenapairofmatchingPyGILState_Ensure()\nandPyGILState_Release()calls. Furthermore,extensions(suchasctypes)usingtheseAPIstoallowcalling\nofPythoncodefromnon-Pythoncreatedthreadswillprobablybebrokenwhenusingsub-interpreters.\n9.7 Asynchronous Notifications\nAmechanismisprovidedtomakeasynchronousnotificationstothemaininterpreterthread. Thesenotificationstake\ntheformofafunctionpointerandavoidpointerargument.\nintPy_AddPendingCall(int(*func)(void*),void*arg)\nPart of the Stable ABI. Schedule a function to be called from the main interpreter thread. On success, 0 is\nreturnedandfuncisqueuedforbeingcalledinthemainthread. Onfailure,-1isreturnedwithoutsettingany\nexception.\nWhensuccessfullyqueued,funcwillbeeventuallycalledfromthemaininterpreterthreadwiththeargument\narg. ItwillbecalledasynchronouslywithrespecttonormallyrunningPythoncode,butwithboththesecon-\nditionsmet:\n\u2022 onabytecodeboundary;\n\u2022 withthemainthreadholdingtheglobalinterpreterlock(funccanthereforeusethefullCAPI).\nfunc mustreturn0onsuccess, or-1onfailurewithanexceptionset. func won\u2019tbeinterruptedtoperform\nanother asynchronous notification recursively, but it can still be interrupted to switch threads if the global\ninterpreterlockisreleased.\nThisfunctiondoesn\u2019tneedacurrentthreadstatetorun,anditdoesn\u2019tneedtheglobalinterpreterlock.\nTo call this function in a subinterpreter, the caller must hold the GIL. Otherwise, the function func can be\nscheduledtobecalledfromthewronginterpreter.\n9.7. AsynchronousNotifications 219\nThePython/CAPI,Release3.13.3\n(cid:193) Warning\nThis is a low-level function, only useful for very special cases. There is no guarantee that func will be\ncalledasquickaspossible. Ifthemainthreadisbusyexecutingasystemcall,funcwon\u2019tbecalledbefore\nthe system call returns. This function is generally not suitable for calling Python code from arbitrary C\nthreads. Instead,usethePyGILStateAPI.\nAddedinversion3.1.\nChangedinversion3.9: Ifthisfunctioniscalledinasubinterpreter,thefunctionfuncisnowscheduledtobe\ncalledfromthesubinterpreter,ratherthanbeingcalledfromthemaininterpreter. Eachsubinterpreternowhas\nitsownlistofscheduledcalls.\n9.8 Profiling and Tracing\nThePythoninterpreterprovidessomelow-levelsupportforattachingprofilingandexecutiontracingfacilities. These\nareusedforprofiling,debugging,andcoverageanalysistools.\nThisCinterfaceallowstheprofilingortracingcodetoavoidtheoverheadofcallingthroughPython-levelcallable\nobjects,makingadirectCfunctioncallinstead. Theessentialattributesofthefacilityhavenotchanged;theinterface\nallowstracefunctionstobeinstalledper-thread,andthebasiceventsreportedtothetracefunctionarethesameas\nhadbeenreportedtothePython-leveltracefunctionsinpreviousversions.\ntypedefint(*Py_tracefunc)(PyObject*obj,PyFrameObject*frame,intwhat,PyObject*arg)\nThe type of the trace function registered using PyEval_SetProfile() and PyEval_SetTrace().\nThe first parameter is the object passed to the registration function as obj, frame is the frame ob-\nject to which the event pertains, what is one of the constants PyTrace_CALL, PyTrace_EXCEPTION,\nPyTrace_LINE,PyTrace_RETURN,PyTrace_C_CALL,PyTrace_C_EXCEPTION,PyTrace_C_RETURN,\norPyTrace_OPCODE,andargdependsonthevalueofwhat:\nValueofwhat Meaningofarg\nPyTrace_CALL AlwaysPy_None.\nPyTrace_EXCEPTION Exceptioninformationasreturnedbysys.exc_info().\nPyTrace_LINE AlwaysPy_None.\nPyTrace_RETURN Valuebeingreturnedtothecaller,orNULLifcausedbyanexception.\nPyTrace_C_CALL Functionobjectbeingcalled.\nPyTrace_C_EXCEPTION Functionobjectbeingcalled.\nPyTrace_C_RETURN Functionobjectbeingcalled.\nPyTrace_OPCODE AlwaysPy_None.\nintPyTrace_CALL\nThe value of the what parameter to a Py_tracefunc function when a new call to a function or method is\nbeingreported,oranewentryintoagenerator. Notethatthecreationoftheiteratorforageneratorfunction\nisnotreportedasthereisnocontroltransfertothePythonbytecodeinthecorrespondingframe.\nintPyTrace_EXCEPTION\nThe value of the what parameter to a Py_tracefunc function when an exception has been raised. The\ncallback function is called with this value for what when after any bytecode is processed after which the\nexception becomes set within the frame being executed. The effect of this is that as exception propagation\ncausesthePythonstacktounwind,thecallbackiscalleduponreturntoeachframeastheexceptionpropagates.\nOnlytracefunctionsreceivestheseevents;theyarenotneededbytheprofiler.\nintPyTrace_LINE\nThevaluepassedasthewhat parametertoaPy_tracefuncfunction(butnotaprofilingfunction)whena\nline-numbereventisbeingreported. Itmaybedisabledforaframebysettingf_trace_linesto0onthat\nframe.\n220 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nintPyTrace_RETURN\nThevalueforthewhatparametertoPy_tracefuncfunctionswhenacallisabouttoreturn.\nintPyTrace_C_CALL\nThevalueforthewhatparametertoPy_tracefuncfunctionswhenaCfunctionisabouttobecalled.\nintPyTrace_C_EXCEPTION\nThevalueforthewhatparametertoPy_tracefuncfunctionswhenaCfunctionhasraisedanexception.\nintPyTrace_C_RETURN\nThevalueforthewhatparametertoPy_tracefuncfunctionswhenaCfunctionhasreturned.\nintPyTrace_OPCODE\nThevalueforthewhat parametertoPy_tracefuncfunctions(butnotprofilingfunctions)whenanewop-\ncodeisabouttobeexecuted. Thiseventisnotemittedbydefault: itmustbeexplicitlyrequestedbysetting\nf_trace_opcodesto1ontheframe.\nvoidPyEval_SetProfile(Py_tracefuncfunc,PyObject*obj)\nSettheprofilerfunctiontofunc. Theobj parameterispassedtothefunctionasitsfirstparameter,andmay\nbeanyPythonobject,orNULL.Iftheprofilefunctionneedstomaintainstate,usingadifferentvalueforobj\nfor each thread provides a convenient and thread-safe place to store it. The profile function is called for all\nmonitoredeventsexceptPyTrace_LINEPyTrace_OPCODEandPyTrace_EXCEPTION.\nSeealsothesys.setprofile()function.\nThecallermustholdtheGIL.\nvoidPyEval_SetProfileAllThreads(Py_tracefuncfunc,PyObject*obj)\nLike PyEval_SetProfile() but sets the profile function in all running threads belonging to the current\ninterpreterinsteadofthesettingitonlyonthecurrentthread.\nThecallermustholdtheGIL.\nAsPyEval_SetProfile(),thisfunctionignoresanyexceptionsraisedwhilesettingtheprofilefunctionsin\nallthreads.\nAddedinversion3.12.\nvoidPyEval_SetTrace(Py_tracefuncfunc,PyObject*obj)\nSetthetracingfunctiontofunc. ThisissimilartoPyEval_SetProfile(),exceptthetracingfunctiondoes\nreceiveline-numbereventsandper-opcodeevents,butdoesnotreceiveanyeventrelatedtoCfunctionobjects\nbeingcalled. AnytracefunctionregisteredusingPyEval_SetTrace()willnotreceivePyTrace_C_CALL,\nPyTrace_C_EXCEPTION orPyTrace_C_RETURN asavalueforthewhatparameter.\nSeealsothesys.settrace()function.\nThecallermustholdtheGIL.\nvoidPyEval_SetTraceAllThreads(Py_tracefuncfunc,PyObject*obj)\nLikePyEval_SetTrace()butsetsthetracingfunctioninallrunningthreadsbelongingtothecurrentinter-\npreterinsteadofthesettingitonlyonthecurrentthread.\nThecallermustholdtheGIL.\nAsPyEval_SetTrace(),thisfunctionignoresanyexceptionsraisedwhilesettingthetracefunctionsinall\nthreads.\nAddedinversion3.12.\n9.9 Reference tracing\nAddedinversion3.13.\n9.9. Referencetracing 221\nThePython/CAPI,Release3.13.3\ntypedefint(*PyRefTracer)(PyObject*,intevent,void*data)\nThetypeofthetracefunctionregisteredusingPyRefTracer_SetTracer(). ThefirstparameterisaPython\nobjectthathasbeenjustcreated(wheneventissettoPyRefTracer_CREATE)orabouttobedestroyed(when\neventissettoPyRefTracer_DESTROY).Thedataargumentistheopaquepointerthatwasprovidedwhen\nPyRefTracer_SetTracer()wascalled.\nAddedinversion3.13.\nintPyRefTracer_CREATE\nThevaluefortheeventparametertoPyRefTracerfunctionswhenaPythonobjecthasbeencreated.\nintPyRefTracer_DESTROY\nThevaluefortheeventparametertoPyRefTracerfunctionswhenaPythonobjecthasbeendestroyed.\nintPyRefTracer_SetTracer(PyRefTracertracer,void*data)\nRegisterareferencetracerfunction. ThefunctionwillbecalledwhenanewPythonhasbeencreatedorwhen\nanobjectisgoingtobedestroyed. Ifdataisprovideditmustbeanopaquepointerthatwillbeprovidedwhen\nthetracerfunctioniscalled. Return0onsuccess. Setanexceptionandreturn-1onerror.\nNotthattracerfunctionsmustnotcreatePythonobjectsinsideorotherwisethecallwillbere-entrant. The\ntracer also must not clear any existing exception or set an exception. The GIL will be held every time the\ntracerfunctioniscalled.\nTheGILmustbeheldwhencallingthisfunction.\nAddedinversion3.13.\nPyRefTracerPyRefTracer_GetTracer(void**data)\nGettheregisteredreferencetracerfunctionandthevalueoftheopaquedatapointerthatwasregisteredwhen\nPyRefTracer_SetTracer()wascalled. IfnotracerwasregisteredthisfunctionwillreturnNULLandwill\nsetthedatapointertoNULL.\nTheGILmustbeheldwhencallingthisfunction.\nAddedinversion3.13.\n9.10 Advanced Debugger Support\nThesefunctionsareonlyintendedtobeusedbyadvanceddebuggingtools.\nPyInterpreterState*PyInterpreterState_Head()\nReturntheinterpreterstateobjectattheheadofthelistofallsuchobjects.\nPyInterpreterState*PyInterpreterState_Main()\nReturnthemaininterpreterstateobject.\nPyInterpreterState*PyInterpreterState_Next(PyInterpreterState*interp)\nReturnthenextinterpreterstateobjectafterinterpfromthelistofallsuchobjects.\nPyThreadState*PyInterpreterState_ThreadHead(PyInterpreterState*interp)\nReturn the pointer to the first PyThreadState object in the list of threads associated with the interpreter\ninterp.\nPyThreadState*PyThreadState_Next(PyThreadState*tstate)\nReturn the next thread state object after tstate from the list of all such objects belonging to the same\nPyInterpreterStateobject.\n9.11 Thread Local Storage Support\nThePythoninterpreterprovideslow-levelsupportforthread-localstorage(TLS)whichwrapstheunderlyingnative\nTLSimplementationtosupportthePython-levelthreadlocalstorageAPI(threading.local). TheCPythonC\n222 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\nlevelAPIsaresimilartothoseofferedbypthreadsandWindows: useathreadkeyandfunctionstoassociateavoid*\nvalueperthread.\nTheGILdoesnotneedtobeheldwhencallingthesefunctions;theysupplytheirownlocking.\nNote that Python.h does not include the declaration of the TLS APIs, you need to include pythread.h to use\nthread-localstorage.\n(cid:174) Note\nNoneoftheseAPIfunctionshandlememorymanagementonbehalfofthevoid*values. Youneedtoallocate\nanddeallocatethemyourself. Ifthevoid*valueshappentobePyObject*,thesefunctionsdon\u2019tdorefcount\noperationsonthemeither.\n9.11.1 Thread Specific Storage (TSS) API\nTSSAPIisintroducedtosupersedetheuseoftheexistingTLSAPIwithintheCPythoninterpreter. ThisAPIuses\nanewtypePy_tss_tinsteadofinttorepresentthreadkeys.\nAddedinversion3.7.\n(cid:181) Seealso\n\u201cANewC-APIforThread-LocalStorageinCPython\u201d(PEP539)\ntypePy_tss_t\nThisdatastructurerepresentsthestateofathreadkey,thedefinitionofwhichmaydependontheunderlying\nTLSimplementation,andithasaninternalfieldrepresentingthekey\u2019sinitializationstate. Therearenopublic\nmembersinthisstructure.\nWhenPy_LIMITED_API isnotdefined,staticallocationofthistypebyPy_tss_NEEDS_INITisallowed.\nPy_tss_NEEDS_INIT\nThis macro expands to the initializer for Py_tss_t variables. Note that this macro won\u2019t be defined with\nPy_LIMITED_API.\nDynamicAllocation\nDynamic allocation of the Py_tss_t, required in extension modules built with Py_LIMITED_API, where static\nallocationofthistypeisnotpossibleduetoitsimplementationbeingopaqueatbuildtime.\nPy_tss_t*PyThread_tss_alloc()\nPart of the Stable ABI since version 3.7. Return a value which is the same state as a value initialized with\nPy_tss_NEEDS_INIT,orNULLinthecaseofdynamicallocationfailure.\nvoidPyThread_tss_free(Py_tss_t*key)\nPartoftheStableABIsinceversion3.7. FreethegivenkeyallocatedbyPyThread_tss_alloc(),afterfirst\ncalling PyThread_tss_delete() to ensure any associated thread locals have been unassigned. This is a\nno-opifthekeyargumentisNULL.\n(cid:174) Note\nAfreedkeybecomesadanglingpointer. YoushouldresetthekeytoNULL.\n9.11. ThreadLocalStorageSupport 223\nThePython/CAPI,Release3.13.3\nMethods\nThe parameter key of these functions must not be NULL. Moreover, the behaviors of PyThread_tss_set()\nand PyThread_tss_get() are undefined if the given Py_tss_t has not been initialized by\nPyThread_tss_create().\nintPyThread_tss_is_created(Py_tss_t*key)\nPartoftheStableABIsinceversion3.7. Returnanon-zerovalueifthegivenPy_tss_thasbeeninitialized\nbyPyThread_tss_create().\nintPyThread_tss_create(Py_tss_t*key)\nPart of the Stable ABI since version 3.7. Return a zero value on successful initialization of a TSS key. The\nbehaviorisundefinedifthevaluepointedtobythekeyargumentisnotinitializedbyPy_tss_NEEDS_INIT.\nThisfunctioncanbecalledrepeatedlyonthesamekey\u2013callingitonanalreadyinitializedkeyisano-opand\nimmediatelyreturnssuccess.\nvoidPyThread_tss_delete(Py_tss_t*key)\nPartoftheStableABIsinceversion3.7. DestroyaTSSkeytoforgetthevaluesassociatedwiththekeyacross\nallthreads, andchangethekey\u2019sinitializationstatetouninitialized. Adestroyedkeyisabletobeinitialized\nagainbyPyThread_tss_create(). Thisfunctioncanbecalledrepeatedlyonthesamekey\u2013callingiton\nanalreadydestroyedkeyisano-op.\nintPyThread_tss_set(Py_tss_t*key,void*value)\nPartoftheStableABIsinceversion3.7. Returnazerovaluetoindicatesuccessfullyassociatingavoid*value\nwithaTSSkeyinthecurrentthread. Eachthreadhasadistinctmappingofthekeytoavoid*value.\nvoid*PyThread_tss_get(Py_tss_t*key)\nPart of the Stable ABI since version 3.7. Return the void* value associated with a TSS key in the current\nthread. ThisreturnsNULLifnovalueisassociatedwiththekeyinthecurrentthread.\n9.11.2 Thread Local Storage (TLS) API\nDeprecatedsinceversion3.7: ThisAPIissupersededbyThreadSpecificStorage(TSS)API.\n(cid:174) Note\nThisversionoftheAPIdoesnotsupportplatformswherethenativeTLSkeyisdefinedinawaythatcannotbe\nsafelycasttoint. Onsuchplatforms,PyThread_create_key()willreturnimmediatelywithafailurestatus,\nandtheotherTLSfunctionswillallbeno-opsonsuchplatforms.\nDuetothecompatibilityproblemnotedabove,thisversionoftheAPIshouldnotbeusedinnewcode.\nintPyThread_create_key()\nPartoftheStableABI.\nvoidPyThread_delete_key(intkey)\nPartoftheStableABI.\nintPyThread_set_key_value(intkey,void*value)\nPartoftheStableABI.\nvoid*PyThread_get_key_value(intkey)\nPartoftheStableABI.\nvoidPyThread_delete_key_value(intkey)\nPartoftheStableABI.\nvoidPyThread_ReInitTLS()\nPartoftheStableABI.\n224 Chapter9. Initialization,Finalization,andThreads\nThePython/CAPI,Release3.13.3\n9.12 Synchronization Primitives\nTheC-APIprovidesabasicmutualexclusionlock.\ntypePyMutex\nA mutual exclusion lock. The PyMutex should be initialized to zero to represent the unlocked state. For\nexample:\nPyMutex mutex = {0};\nInstances of PyMutex should not be copied or moved. Both the contents and address of a PyMutex are\nmeaningful,anditmustremainatafixed,writablelocationinmemory.\n(cid:174) Note\nAPyMutexcurrentlyoccupiesonebyte,butthesizeshouldbeconsideredunstable. Thesizemaychange\ninfuturePythonreleaseswithoutadeprecationperiod.\nAddedinversion3.13.\nvoidPyMutex_Lock(PyMutex*m)\nLockmutexm. Ifanotherthreadhasalreadylockedit,thecallingthreadwillblockuntilthemutexisunlocked.\nWhileblocked,thethreadwilltemporarilyreleasetheGILifitisheld.\nAddedinversion3.13.\nvoidPyMutex_Unlock(PyMutex*m)\nUnlockmutexm. Themutexmustbelocked\u2014otherwise,thefunctionwillissueafatalerror.\nAddedinversion3.13.\n9.12.1 Python Critical Section API\nThecriticalsectionAPIprovidesadeadlockavoidancelayerontopofper-objectlocksforfree-threadedCPython.\nThey are intended to replace reliance on the global interpreter lock, and are no-ops in versions of Python with the\nglobalinterpreterlock.\nCriticalsectionsavoiddeadlocksbyimplicitlysuspendingactivecriticalsectionsandreleasingthelocksduringcallsto\nPyEval_SaveThread(). WhenPyEval_RestoreThread()iscalled,themostrecentcriticalsectionisresumed,\nanditslocksreacquired. ThismeansthecriticalsectionAPIprovidesweakerguaranteesthantraditionallocks\u2013they\nareusefulbecausetheirbehaviorissimilartotheGIL.\nThefunctionsandstructsusedbythemacrosareexposedforcaseswhereCmacrosarenotavailable. Theyshould\nonlybeusedasinthegivenmacroexpansions. Notethatthesizesandcontentsofthestructuresmaychangeinfuture\nPythonversions.\n(cid:174) Note\nOperationsthatneedtolocktwoobjectsatoncemustusePy_BEGIN_CRITICAL_SECTION2. Youcannot use\nnestedcriticalsectionstolockmorethanoneobjectatonce,becausetheinnercriticalsectionmaysuspendthe\noutercriticalsections. ThisAPIdoesnotprovideawaytolockmorethantwoobjectsatonce.\nExampleusage:\nstatic PyObject *\nset_field(MyObject *self, PyObject *value)\n{\nPy_BEGIN_CRITICAL_SECTION(self);\n(continuesonnextpage)\n9.12. SynchronizationPrimitives 225\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nPy_SETREF(self->field, Py_XNewRef(value));\nPy_END_CRITICAL_SECTION();\nPy_RETURN_NONE;\n}\nIn the above example, Py_SETREF calls Py_DECREF, which can call arbitrary code through an object\u2019s dealloca-\ntion function. The critical section API avoids potential deadlocks due to reentrancy and lock ordering by allow-\ning the runtime to temporarily suspend the critical section if the code triggered by the finalizer blocks and calls\nPyEval_SaveThread().\nPy_BEGIN_CRITICAL_SECTION(op)\nAcquirestheper-objectlockfortheobjectopandbeginsacriticalsection.\nInthefree-threadedbuild,thismacroexpandsto:\n{\nPyCriticalSection _py_cs;\nPyCriticalSection_Begin(&_py_cs, (PyObject*)(op))\nInthedefaultbuild,thismacroexpandsto{.\nAddedinversion3.13.\nPy_END_CRITICAL_SECTION()\nEndsthecriticalsectionandreleasestheper-objectlock.\nInthefree-threadedbuild,thismacroexpandsto:\nPyCriticalSection_End(&_py_cs);\n}\nInthedefaultbuild,thismacroexpandsto}.\nAddedinversion3.13.\nPy_BEGIN_CRITICAL_SECTION2(a,b)\nAcquirestheper-objectslocksfortheobjectsaandbandbeginsacriticalsection. Thelocksareacquiredin\naconsistentorder(lowestaddressfirst)toavoidlockorderingdeadlocks.\nInthefree-threadedbuild,thismacroexpandsto:\n{\nPyCriticalSection2 _py_cs2;\nPyCriticalSection2_Begin(&_py_cs2, (PyObject*)(a), (PyObject*)(b))\nInthedefaultbuild,thismacroexpandsto{.\nAddedinversion3.13.\nPy_END_CRITICAL_SECTION2()\nEndsthecriticalsectionandreleasestheper-objectlocks.\nInthefree-threadedbuild,thismacroexpandsto:\nPyCriticalSection2_End(&_py_cs2);\n}\nInthedefaultbuild,thismacroexpandsto}.\nAddedinversion3.13.\n226 Chapter9. Initialization,Finalization,andThreads\nCHAPTER\nTEN\nPYTHON INITIALIZATION CONFIGURATION\nAddedinversion3.8.\nPythoncanbeinitializedwithPy_InitializeFromConfig()andthePyConfigstructure. Itcanbepreinitialized\nwithPy_PreInitialize()andthePyPreConfigstructure.\nTherearetwokindsofconfiguration:\n\u2022 ThePythonConfigurationcanbeusedtobuildacustomizedPythonwhichbehavesastheregularPython. For\nexample,environmentvariablesandcommandlineargumentsareusedtoconfigurePython.\n\u2022 TheIsolatedConfigurationcanbeusedtoembedPythonintoanapplication. ItisolatesPythonfromthesystem.\nForexample,environmentvariablesareignored,theLC_CTYPElocaleisleftunchangedandnosignalhandler\nisregistered.\nThePy_RunMain()functioncanbeusedtowriteacustomizedPythonprogram.\nSeealsoInitialization,Finalization,andThreads.\n(cid:181) Seealso\nPEP587\u201cPythonInitializationConfiguration\u201d.\n10.1 Example\nExampleofcustomizedPythonalwaysrunninginisolatedmode:\nint main(int argc, char **argv)\n{\nPyStatus status;\nPyConfig config;\nPyConfig_InitPythonConfig(&config);\nconfig.isolated = 1;\n/* Decode command line arguments.\nImplicitly preinitialize Python (in isolated mode). */\nstatus = PyConfig_SetBytesArgv(&config, argc, argv);\nif (PyStatus_Exception(status)) {\ngoto exception;\n}\nstatus = Py_InitializeFromConfig(&config);\nif (PyStatus_Exception(status)) {\ngoto exception;\n}\nPyConfig_Clear(&config);\n(continuesonnextpage)\n227\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nreturn Py_RunMain();\nexception:\nPyConfig_Clear(&config);\nif (PyStatus_IsExit(status)) {\nreturn status.exitcode;\n}\n/* Display the error message and exit the process with\nnon-zero exit code */\nPy_ExitStatusException(status);\n}\n10.2 PyWideStringList\ntypePyWideStringList\nListofwchar_t*strings.\nIflengthisnon-zero,itemsmustbenon-NULLandallstringsmustbenon-NULL.\nMethods:\nPyStatusPyWideStringList_Append(PyWideStringList*list,constwchar_t*item)\nAppenditemtolist.\nPythonmustbepreinitializedtocallthisfunction.\nPyStatusPyWideStringList_Insert(PyWideStringList*list,Py_ssize_tindex,constwchar_t*item)\nInsertitemintolistatindex.\nIfindexisgreaterthanorequaltolistlength,appenditemtolist.\nindexmustbegreaterthanorequalto0.\nPythonmustbepreinitializedtocallthisfunction.\nStructurefields:\nPy_ssize_tlength\nListlength.\nwchar_t**items\nListitems.\n10.3 PyStatus\ntypePyStatus\nStructuretostoreaninitializationfunctionstatus: success,errororexit.\nForanerror,itcanstoretheCfunctionnamewhichcreatedtheerror.\nStructurefields:\nintexitcode\nExitcode. Argumentpassedtoexit().\nconstchar*err_msg\nErrormessage.\n228 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\nconstchar*func\nNameofthefunctionwhichcreatedanerror,canbeNULL.\nFunctionstocreateastatus:\nPyStatusPyStatus_Ok(void)\nSuccess.\nPyStatusPyStatus_Error(constchar*err_msg)\nInitializationerrorwithamessage.\nerr_msgmustnotbeNULL.\nPyStatusPyStatus_NoMemory(void)\nMemoryallocationfailure(outofmemory).\nPyStatusPyStatus_Exit(intexitcode)\nExitPythonwiththespecifiedexitcode.\nFunctionstohandleastatus:\nintPyStatus_Exception(PyStatusstatus)\nIs the status an error or an exit? If true, the exception must be handled; by calling\nPy_ExitStatusException()forexample.\nintPyStatus_IsError(PyStatusstatus)\nIstheresultanerror?\nintPyStatus_IsExit(PyStatusstatus)\nIstheresultanexit?\nvoidPy_ExitStatusException(PyStatusstatus)\nCallexit(exitcode)ifstatusisanexit. Printtheerrormessageandexitwithanon-zeroexitcodeif\nstatusisanerror. MustonlybecalledifPyStatus_Exception(status)isnon-zero.\n(cid:174) Note\nInternally, Python uses macros which set PyStatus.func, whereas functions to create a status set func to\nNULL.\nExample:\nPyStatus alloc(void **ptr, size_t size)\n{\n*ptr = PyMem_RawMalloc(size);\nif (*ptr == NULL) {\nreturn PyStatus_NoMemory();\n}\nreturn PyStatus_Ok();\n}\nint main(int argc, char **argv)\n{\nvoid *ptr;\nPyStatus status = alloc(&ptr, 16);\nif (PyStatus_Exception(status)) {\nPy_ExitStatusException(status);\n}\nPyMem_Free(ptr);\nreturn 0;\n}\n10.3. PyStatus 229\nThePython/CAPI,Release3.13.3\n10.4 PyPreConfig\ntypePyPreConfig\nStructureusedtopreinitializePython.\nFunctiontoinitializeapreconfiguration:\nvoidPyPreConfig_InitPythonConfig(PyPreConfig*preconfig)\nInitializethepreconfigurationwithPythonConfiguration.\nvoidPyPreConfig_InitIsolatedConfig(PyPreConfig*preconfig)\nInitializethepreconfigurationwithIsolatedConfiguration.\nStructurefields:\nintallocator\nNameofthePythonmemoryallocators:\n\u2022 PYMEM_ALLOCATOR_NOT_SET(0): don\u2019tchangememoryallocators(usedefaults).\n\u2022 PYMEM_ALLOCATOR_DEFAULT(1): defaultmemoryallocators.\n\u2022 PYMEM_ALLOCATOR_DEBUG(2): defaultmemoryallocatorswithdebughooks.\n\u2022 PYMEM_ALLOCATOR_MALLOC(3): usemalloc()oftheClibrary.\n\u2022 PYMEM_ALLOCATOR_MALLOC_DEBUG(4): forceusageofmalloc()withdebughooks.\n\u2022 PYMEM_ALLOCATOR_PYMALLOC(5): Pythonpymallocmemoryallocator.\n\u2022 PYMEM_ALLOCATOR_PYMALLOC_DEBUG(6): Pythonpymallocmemoryallocatorwithdebughooks.\n\u2022 PYMEM_ALLOCATOR_MIMALLOC(6): usemimalloc,afastmallocreplacement.\n\u2022 PYMEM_ALLOCATOR_MIMALLOC_DEBUG(7): usemimalloc,afastmallocreplacementwithdebug\nhooks.\nPYMEM_ALLOCATOR_PYMALLOC and PYMEM_ALLOCATOR_PYMALLOC_DEBUG are not supported if\nPythonisconfigured using --without-pymalloc.\nPYMEM_ALLOCATOR_MIMALLOC and PYMEM_ALLOCATOR_MIMALLOC_DEBUG are not supported if\nPythonisconfigured using --without-mimallocoriftheunderlyingatomicsupportisn\u2019tavail-\nable.\nSeeMemoryManagement.\nDefault: PYMEM_ALLOCATOR_NOT_SET.\nintconfigure_locale\nSettheLC_CTYPElocaletotheuserpreferredlocale.\nIfequalsto0,setcoerce_c_localeandcoerce_c_locale_warnmembersto0.\nSeethelocaleencoding.\nDefault: 1inPythonconfig,0inisolatedconfig.\nintcoerce_c_locale\nIfequalsto2,coercetheClocale.\nIfequalsto1,readtheLC_CTYPElocaletodecideifitshouldbecoerced.\nSeethelocaleencoding.\nDefault: -1inPythonconfig,0inisolatedconfig.\nintcoerce_c_locale_warn\nIfnon-zero,emitawarningiftheClocaleiscoerced.\nDefault: -1inPythonconfig,0inisolatedconfig.\n230 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\nintdev_mode\nPythonDevelopmentMode: seePyConfig.dev_mode.\nDefault: -1inPythonmode,0inisolatedmode.\nintisolated\nIsolatedmode: seePyConfig.isolated.\nDefault: 0inPythonmode,1inisolatedmode.\nintlegacy_windows_fs_encoding\nIfnon-zero:\n\u2022 SetPyPreConfig.utf8_modeto0,\n\u2022 SetPyConfig.filesystem_encodingto\"mbcs\",\n\u2022 SetPyConfig.filesystem_errorsto\"replace\".\nInitializedfromthePYTHONLEGACYWINDOWSFSENCODINGenvironmentvariablevalue.\nOnlyavailableonWindows. #ifdef MS_WINDOWSmacrocanbeusedforWindowsspecificcode.\nDefault: 0.\nintparse_argv\nIf non-zero, Py_PreInitializeFromArgs() and Py_PreInitializeFromBytesArgs() parse\ntheirargvargumentthesamewaytheregularPythonparsescommandlinearguments: seeCommand\nLineArguments.\nDefault: 1inPythonconfig,0inisolatedconfig.\nintuse_environment\nUseenvironmentvariables? SeePyConfig.use_environment.\nDefault: 1inPythonconfigand0inisolatedconfig.\nintutf8_mode\nIfnon-zero,enablethePythonUTF-8Mode.\nSetto0or1bythe-X utf8commandlineoptionandthePYTHONUTF8environmentvariable.\nAlsosetto1iftheLC_CTYPElocaleisCorPOSIX.\nDefault: -1inPythonconfigand0inisolatedconfig.\n10.5 Preinitialize Python with PyPreConfig\nThepreinitializationofPython:\n\u2022 SetthePythonmemoryallocators(PyPreConfig.allocator)\n\u2022 ConfiguretheLC_CTYPElocale(localeencoding)\n\u2022 SetthePythonUTF-8Mode(PyPreConfig.utf8_mode)\nThecurrentpreconfiguration(PyPreConfigtype)isstoredin_PyRuntime.preconfig.\nFunctionstopreinitializePython:\nPyStatusPy_PreInitialize(constPyPreConfig*preconfig)\nPreinitializePythonfrompreconfigpreconfiguration.\npreconfigmustnotbeNULL.\n10.5. PreinitializePythonwithPyPreConfig 231\nThePython/CAPI,Release3.13.3\nPyStatusPy_PreInitializeFromBytesArgs(constPyPreConfig*preconfig,intargc,char*const*argv)\nPreinitializePythonfrompreconfigpreconfiguration.\nParseargvcommandlinearguments(bytesstrings)ifparse_argvofpreconfigisnon-zero.\npreconfigmustnotbeNULL.\nPyStatusPy_PreInitializeFromArgs(constPyPreConfig*preconfig,intargc,wchar_t*const*argv)\nPreinitializePythonfrompreconfigpreconfiguration.\nParseargvcommandlinearguments(widestrings)ifparse_argvofpreconfigisnon-zero.\npreconfigmustnotbeNULL.\nThe caller is responsible to handle exceptions (error or exit) using PyStatus_Exception() and\nPy_ExitStatusException().\nFor Python Configuration (PyPreConfig_InitPythonConfig()), if Python is initialized with command line\narguments,thecommandlineargumentsmustalsobepassedtopreinitializePython,sincetheyhaveaneffectonthe\npre-configurationlikeencodings. Forexample,the-X utf8commandlineoptionenablesthePythonUTF-8Mode.\nPyMem_SetAllocator() can be called after Py_PreInitialize() and before\nPy_InitializeFromConfig() to install a custom memory allocator. It can be called before\nPy_PreInitialize()ifPyPreConfig.allocatorissettoPYMEM_ALLOCATOR_NOT_SET.\nPythonmemoryallocationfunctionslikePyMem_RawMalloc()mustnotbeusedbeforethePythonpreinitialization,\nwhereas calling directly malloc() and free() is always safe. Py_DecodeLocale() must not be called before\nthePythonpreinitialization.\nExampleusingthepreinitializationtoenablethePythonUTF-8Mode:\nPyStatus status;\nPyPreConfig preconfig;\nPyPreConfig_InitPythonConfig(&preconfig);\npreconfig.utf8_mode = 1;\nstatus = Py_PreInitialize(&preconfig);\nif (PyStatus_Exception(status)) {\nPy_ExitStatusException(status);\n}\n/* at this point, Python speaks UTF-8 */\nPy_Initialize();\n/* ... use Python API here ... */\nPy_Finalize();\n10.6 PyConfig\ntypePyConfig\nStructurecontainingmostparameterstoconfigurePython.\nWhendone,thePyConfig_Clear()functionmustbeusedtoreleasetheconfigurationmemory.\nStructuremethods:\nvoidPyConfig_InitPythonConfig(PyConfig*config)\nInitializeconfigurationwiththePythonConfiguration.\nvoidPyConfig_InitIsolatedConfig(PyConfig*config)\nInitializeconfigurationwiththeIsolatedConfiguration.\n232 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\nPyStatusPyConfig_SetString(PyConfig*config,wchar_t*const*config_str,constwchar_t*str)\nCopythewidecharacterstringstrinto*config_str.\nPreinitializePythonifneeded.\nPyStatusPyConfig_SetBytesString(PyConfig*config,wchar_t*const*config_str,constchar*str)\nDecodestrusingPy_DecodeLocale()andsettheresultinto*config_str.\nPreinitializePythonifneeded.\nPyStatusPyConfig_SetArgv(PyConfig*config,intargc,wchar_t*const*argv)\nSetcommandlinearguments(argvmemberofconfig)fromtheargvlistofwidecharacterstrings.\nPreinitializePythonifneeded.\nPyStatusPyConfig_SetBytesArgv(PyConfig*config,intargc,char*const*argv)\nSetcommandlinearguments(argvmemberofconfig)fromtheargvlistofbytesstrings. Decodebytes\nusingPy_DecodeLocale().\nPreinitializePythonifneeded.\nPyStatusPyConfig_SetWideStringList(PyConfig*config,PyWideStringList*list,Py_ssize_tlength,\nwchar_t**items)\nSetthelistofwidestringslisttolengthanditems.\nPreinitializePythonifneeded.\nPyStatusPyConfig_Read(PyConfig*config)\nReadallPythonconfiguration.\nFieldswhicharealreadyinitializedareleftunchanged.\nFieldsforpathconfigurationarenolongercalculatedormodifiedwhencallingthisfunction,asofPython\n3.11.\nThe PyConfig_Read() function only parses PyConfig.argv arguments once: PyConfig.\nparse_argv is set to 2 after arguments are parsed. Since Python arguments are stripped from\nPyConfig.argv,parsingargumentstwicewouldparsetheapplicationoptionsasPythonoptions.\nPreinitializePythonifneeded.\nChanged in version 3.10: The PyConfig.argv arguments are now only parsed once, PyConfig.\nparse_argv is set to 2 after arguments are parsed, and arguments are only parsed if PyConfig.\nparse_argvequals1.\nChangedinversion3.11: PyConfig_Read()nolongercalculatesallpaths, andsofieldslistedunder\nPythonPathConfigurationmaynolongerbeupdateduntilPy_InitializeFromConfig()iscalled.\nvoidPyConfig_Clear(PyConfig*config)\nReleaseconfigurationmemory.\nMostPyConfigmethodspreinitializePythonifneeded. Inthatcase,thePythonpreinitializationconfiguration\n(PyPreConfig)inbasedonthePyConfig. IfconfigurationfieldswhichareincommonwithPyPreConfig\naretuned,theymustbesetbeforecallingaPyConfigmethod:\n\u2022 PyConfig.dev_mode\n\u2022 PyConfig.isolated\n\u2022 PyConfig.parse_argv\n\u2022 PyConfig.use_environment\nMoreover,ifPyConfig_SetArgv()orPyConfig_SetBytesArgv()isused,thismethodmustbecalled\nbefore other methods, since the preinitialization configuration depends on command line arguments (if\nparse_argvisnon-zero).\nThecallerofthesemethodsisresponsibletohandleexceptions(errororexit)usingPyStatus_Exception()\nandPy_ExitStatusException().\n10.6. PyConfig 233\nThePython/CAPI,Release3.13.3\nStructurefields:\nPyWideStringListargv\nSetsys.argvcommandlineargumentsbasedonargv. Theseparametersaresimilartothosepassed\ntotheprogram\u2019smain()functionwiththedifferencethatthefirstentryshouldrefertothescriptfileto\nbeexecutedratherthantheexecutablehostingthePythoninterpreter. Ifthereisn\u2019tascriptthatwillbe\nrun,thefirstentryinargvcanbeanemptystring.\nSet parse_argv to 1 to parse argv the same way the regular Python parses Python command line\nargumentsandthentostripPythonargumentsfromargv.\nIfargvisempty,anemptystringisaddedtoensurethatsys.argvalwaysexistsandisneverempty.\nDefault: NULL.\nSeealsotheorig_argvmember.\nintsafe_path\nIfequalstozero,Py_RunMain()prependsapotentiallyunsafepathtosys.pathatstartup:\n\u2022 Ifargv[0]isequaltoL\"-m\"(python -m module),prependthecurrentworkingdirectory.\n\u2022 If running a script (python script.py), prepend the script\u2019s directory. If it\u2019s a symbolic link,\nresolvesymboliclinks.\n\u2022 Otherwise (python -c code and python), prepend an empty string, which means the current\nworkingdirectory.\nSetto1bythe-PcommandlineoptionandthePYTHONSAFEPATHenvironmentvariable.\nDefault: 0inPythonconfig,1inisolatedconfig.\nAddedinversion3.11.\nwchar_t*base_exec_prefix\nsys.base_exec_prefix.\nDefault: NULL.\nPartofthePythonPathConfigurationoutput.\nSeealsoPyConfig.exec_prefix.\nwchar_t*base_executable\nPythonbaseexecutable: sys._base_executable.\nSetbythe__PYVENV_LAUNCHER__environmentvariable.\nSetfromPyConfig.executableifNULL.\nDefault: NULL.\nPartofthePythonPathConfigurationoutput.\nSeealsoPyConfig.executable.\nwchar_t*base_prefix\nsys.base_prefix.\nDefault: NULL.\nPartofthePythonPathConfigurationoutput.\nSeealsoPyConfig.prefix.\nintbuffered_stdio\nIf equals to 0 and configure_c_stdio is non-zero, disable buffering on the C streams stdout and\nstderr.\nSetto0bythe-ucommandlineoptionandthePYTHONUNBUFFEREDenvironmentvariable.\n234 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\nstdinisalwaysopenedinbufferedmode.\nDefault: 1.\nintbytes_warning\nIfequalsto1,issueawarningwhencomparingbytesorbytearraywithstr,orcomparingbytes\nwithint.\nIfequalorgreaterto2,raiseaBytesWarningexceptioninthesecases.\nIncrementedbythe-bcommandlineoption.\nDefault: 0.\nintwarn_default_encoding\nIfnon-zero,emitaEncodingWarningwarningwhenio.TextIOWrapperusesitsdefaultencoding.\nSeeio-encoding-warningfordetails.\nDefault: 0.\nAddedinversion3.10.\nintcode_debug_ranges\nIfequalsto0,disablestheinclusionoftheendlineandcolumnmappingsincodeobjects. Alsodisables\ntracebackprintingcaretstospecificerrorlocations.\nSetto0bythePYTHONNODEBUGRANGESenvironmentvariableandbythe-X no_debug_rangescom-\nmandlineoption.\nDefault: 1.\nAddedinversion3.11.\nwchar_t*check_hash_pycs_mode\nControlthevalidationbehaviorofhash-based.pycfiles: valueofthe--check-hash-based-pycs\ncommandlineoption.\nValidvalues:\n\u2022 L\"always\": Hashthesourcefileforinvalidationregardlessofvalueofthe\u2018check_source\u2019flag.\n\u2022 L\"never\": Assumethathash-basedpycsalwaysarevalid.\n\u2022 L\"default\": The\u2018check_source\u2019flaginhash-basedpycsdeterminesinvalidation.\nDefault: L\"default\".\nSeealsoPEP552\u201cDeterministicpycs\u201d.\nintconfigure_c_stdio\nIfnon-zero,configureCstandardstreams:\n\u2022 OnWindows,setthebinarymode(O_BINARY)onstdin,stdoutandstderr.\n\u2022 Ifbuffered_stdioequalszero,disablebufferingofstdin,stdoutandstderrstreams.\n\u2022 Ifinteractiveisnon-zero,enablestreambufferingonstdinandstdout(onlystdoutonWindows).\nDefault: 1inPythonconfig,0inisolatedconfig.\nintdev_mode\nIfnon-zero,enablethePythonDevelopmentMode.\nSetto1bythe-X devoptionandthePYTHONDEVMODEenvironmentvariable.\nDefault: -1inPythonmode,0inisolatedmode.\n10.6. PyConfig 235\nThePython/CAPI,Release3.13.3\nintdump_refs\nDumpPythonreferences?\nIfnon-zero,dumpallobjectswhicharestillaliveatexit.\nSetto1bythePYTHONDUMPREFSenvironmentvariable.\nNeeds a special build of Python with the Py_TRACE_REFS macro defined: see the configure\n--with-trace-refs option.\nDefault: 0.\nwchar_t*exec_prefix\nThe site-specific directory prefix where the platform-dependent Python files are installed: sys.\nexec_prefix.\nDefault: NULL.\nPartofthePythonPathConfigurationoutput.\nSeealsoPyConfig.base_exec_prefix.\nwchar_t*executable\nTheabsolutepathoftheexecutablebinaryforthePythoninterpreter: sys.executable.\nDefault: NULL.\nPartofthePythonPathConfigurationoutput.\nSeealsoPyConfig.base_executable.\nintfaulthandler\nEnablefaulthandler?\nIfnon-zero,callfaulthandler.enable()atstartup.\nSetto1by-X faulthandlerandthePYTHONFAULTHANDLERenvironmentvariable.\nDefault: -1inPythonmode,0inisolatedmode.\nwchar_t*filesystem_encoding\nFilesystemencoding: sys.getfilesystemencoding().\nOnmacOS,AndroidandVxWorks: use\"utf-8\"bydefault.\nOn Windows: use \"utf-8\" by default, or \"mbcs\" if legacy_windows_fs_encoding of\nPyPreConfigisnon-zero.\nDefaultencodingonotherplatforms:\n\u2022 \"utf-8\"ifPyPreConfig.utf8_modeisnon-zero.\n\u2022 \"ascii\" if Python detects that nl_langinfo(CODESET) announces the ASCII encoding,\nwhereasthembstowcs()functiondecodesfromadifferentencoding(usuallyLatin1).\n\u2022 \"utf-8\"ifnl_langinfo(CODESET)returnsanemptystring.\n\u2022 Otherwise,usethelocaleencoding: nl_langinfo(CODESET)result.\nAtPythonstartup,theencodingnameisnormalizedtothePythoncodecname. Forexample,\"ANSI_X3.\n4-1968\"isreplacedwith\"ascii\".\nSeealsothefilesystem_errorsmember.\nwchar_t*filesystem_errors\nFilesystemerrorhandler: sys.getfilesystemencodeerrors().\nOnWindows:use\"surrogatepass\"bydefault,or\"replace\"iflegacy_windows_fs_encoding\nofPyPreConfigisnon-zero.\nOnotherplatforms: use\"surrogateescape\"bydefault.\n236 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\nSupportederrorhandlers:\n\u2022 \"strict\"\n\u2022 \"surrogateescape\"\n\u2022 \"surrogatepass\"(onlysupportedwiththeUTF-8encoding)\nSeealsothefilesystem_encodingmember.\nunsignedlonghash_seed\nintuse_hash_seed\nRandomizedhashfunctionseed.\nIfuse_hash_seediszero,aseedischosenrandomlyatPythonstartup,andhash_seedisignored.\nSetbythePYTHONHASHSEEDenvironmentvariable.\nDefaultuse_hash_seedvalue: -1inPythonmode,0inisolatedmode.\nwchar_t*home\nSet the default Python \u201chome\u201d directory, that is, the location of the standard Python libraries (see\nPYTHONHOME).\nSetbythePYTHONHOMEenvironmentvariable.\nDefault: NULL.\nPartofthePythonPathConfigurationinput.\nintimport_time\nIfnon-zero,profileimporttime.\nSetthe1bythe-X importtimeoptionandthePYTHONPROFILEIMPORTTIMEenvironmentvariable.\nDefault: 0.\nintinspect\nEnterinteractivemodeafterexecutingascriptoracommand.\nIfgreaterthan0,enableinspect: whenascriptispassedasfirstargumentorthe-coptionisused,enter\ninteractivemodeafterexecutingthescriptorthecommand,evenwhensys.stdindoesnotappearto\nbeaterminal.\nIncrementedbythe-icommandlineoption. Setto1ifthePYTHONINSPECTenvironmentvariableis\nnon-empty.\nDefault: 0.\nintinstall_signal_handlers\nInstallPythonsignalhandlers?\nDefault: 1inPythonmode,0inisolatedmode.\nintinteractive\nIfgreaterthan0,enabletheinteractivemode(REPL).\nIncrementedbythe-icommandlineoption.\nDefault: 0.\nintint_max_str_digits\nConfigures the integer string conversion length limitation. An initial value of -1 means the value\nwill be taken from the command line or environment or otherwise default to 4300 (sys.int_info.\ndefault_max_str_digits). Avalueof0disablesthelimitation. Valuesgreaterthanzerobutless\nthan 640 (sys.int_info.str_digits_check_threshold) are unsupported and will produce an\nerror.\n10.6. PyConfig 237\nThePython/CAPI,Release3.13.3\nConfiguredbythe-X int_max_str_digitscommandlineflagorthePYTHONINTMAXSTRDIGITS\nenvironmentvariable.\nDefault: -1inPythonmode. 4300(sys.int_info.default_max_str_digits)inisolatedmode.\nAddedinversion3.12.\nintcpu_count\nIfthevalueofcpu_countisnot-1thenitwilloverridethereturnvaluesofos.cpu_count(),os.\nprocess_cpu_count(),andmultiprocessing.cpu_count().\nConfiguredbythe-X cpu_count=n|defaultcommandlineflagorthePYTHON_CPU_COUNTenvi-\nronmentvariable.\nDefault: -1.\nAddedinversion3.13.\nintisolated\nIfgreaterthan0,enableisolatedmode:\n\u2022 Setsafe_pathto1: don\u2019tprependapotentiallyunsafepathtosys.pathatPythonstartup,such\nasthecurrentdirectory,thescript\u2019sdirectoryoranemptystring.\n\u2022 Setuse_environmentto0: ignorePYTHONenvironmentvariables.\n\u2022 Setuser_site_directoryto0: don\u2019taddtheusersitedirectorytosys.path.\n\u2022 Python REPL doesn\u2019t import readline nor enable default readline configuration on interactive\nprompts.\nSetto1bythe-Icommandlineoption.\nDefault: 0inPythonmode,1inisolatedmode.\nSeealsotheIsolatedConfigurationandPyPreConfig.isolated.\nintlegacy_windows_stdio\nIfnon-zero,useio.FileIOinsteadofio._WindowsConsoleIOforsys.stdin,sys.stdoutand\nsys.stderr.\nSetto1ifthePYTHONLEGACYWINDOWSSTDIOenvironmentvariableissettoanon-emptystring.\nOnlyavailableonWindows. #ifdef MS_WINDOWSmacrocanbeusedforWindowsspecificcode.\nDefault: 0.\nSeealsothePEP528(ChangeWindowsconsoleencodingtoUTF-8).\nintmalloc_stats\nIfnon-zero,dumpstatisticsonPythonpymallocmemoryallocatoratexit.\nSetto1bythePYTHONMALLOCSTATSenvironmentvariable.\nTheoptionisignoredifPythonisconfigured using the --without-pymalloc option.\nDefault: 0.\nwchar_t*platlibdir\nPlatformlibrarydirectoryname: sys.platlibdir.\nSetbythePYTHONPLATLIBDIRenvironmentvariable.\nDefault: value of the PLATLIBDIR macro which is set by the configure --with-platlibdir\noption(default: \"lib\",or\"DLLs\"onWindows).\nPartofthePythonPathConfigurationinput.\nAddedinversion3.9.\n238 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\nChangedinversion3.11: ThismacroisnowusedonWindowstolocatethestandardlibraryextension\nmodules,typicallyunderDLLs. However,forcompatibility,notethatthisvalueisignoredforanynon-\nstandardlayouts,includingin-treebuildsandvirtualenvironments.\nwchar_t*pythonpath_env\nModulesearchpaths(sys.path)asastringseparatedbyDELIM(os.pathsep).\nSetbythePYTHONPATHenvironmentvariable.\nDefault: NULL.\nPartofthePythonPathConfigurationinput.\nPyWideStringListmodule_search_paths\nintmodule_search_paths_set\nModulesearchpaths: sys.path.\nIf module_search_paths_set is equal to 0, Py_InitializeFromConfig() will replace\nmodule_search_pathsandsetsmodule_search_paths_setto1.\nDefault: emptylist(module_search_paths)and0(module_search_paths_set).\nPartofthePythonPathConfigurationoutput.\nintoptimization_level\nCompilationoptimizationlevel:\n\u2022 0: Peepholeoptimizer,set__debug__toTrue.\n\u2022 1: Level0,removeassertions,set__debug__toFalse.\n\u2022 2: Level1,stripdocstrings.\nIncrementedbythe-Ocommandlineoption. SettothePYTHONOPTIMIZEenvironmentvariablevalue.\nDefault: 0.\nPyWideStringListorig_argv\nThelistoftheoriginalcommandlineargumentspassedtothePythonexecutable: sys.orig_argv.\nIforig_argvlistisemptyandargvisnotalistonlycontaininganemptystring,PyConfig_Read()\ncopiesargvintoorig_argvbeforemodifyingargv(ifparse_argvisnon-zero).\nSeealsotheargvmemberandthePy_GetArgcArgv()function.\nDefault: emptylist.\nAddedinversion3.10.\nintparse_argv\nParsecommandlinearguments?\nIfequalsto1,parseargv thesamewaytheregularPythonparsescommandlinearguments,andstrip\nPythonargumentsfromargv.\nThe PyConfig_Read() function only parses PyConfig.argv arguments once: PyConfig.\nparse_argv is set to 2 after arguments are parsed. Since Python arguments are stripped from\nPyConfig.argv,parsingargumentstwicewouldparsetheapplicationoptionsasPythonoptions.\nDefault: 1inPythonmode,0inisolatedmode.\nChanged in version 3.10: The PyConfig.argv arguments are now only parsed if PyConfig.\nparse_argvequalsto1.\nintparser_debug\nParserdebugmode. Ifgreaterthan0, turnonparserdebuggingoutput(forexpertonly, dependingon\ncompilationoptions).\nIncrementedbythe-dcommandlineoption. SettothePYTHONDEBUGenvironmentvariablevalue.\n10.6. PyConfig 239\nThePython/CAPI,Release3.13.3\nNeedsadebugbuildofPython(thePy_DEBUGmacromustbedefined).\nDefault: 0.\nintpathconfig_warnings\nIf non-zero, calculation of path configuration is allowed to log warnings into stderr. If equals to 0,\nsuppressthesewarnings.\nDefault: 1inPythonmode,0inisolatedmode.\nPartofthePythonPathConfigurationinput.\nChangedinversion3.11: NowalsoappliesonWindows.\nwchar_t*prefix\nThe site-specific directory prefix where the platform independent Python files are installed: sys.\nprefix.\nDefault: NULL.\nPartofthePythonPathConfigurationoutput.\nSeealsoPyConfig.base_prefix.\nwchar_t*program_name\nProgramnameusedtoinitializeexecutableandinearlyerrormessagesduringPythoninitialization.\n\u2022 OnmacOS,usePYTHONEXECUTABLEenvironmentvariableifset.\n\u2022 IftheWITH_NEXT_FRAMEWORKmacroisdefined,use__PYVENV_LAUNCHER__environmentvari-\nableifset.\n\u2022 Useargv[0]ofargvifavailableandnon-empty.\n\u2022 Otherwise,useL\"python\"onWindows,orL\"python3\"onotherplatforms.\nDefault: NULL.\nPartofthePythonPathConfigurationinput.\nwchar_t*pycache_prefix\nDirectorywherecached.pycfilesarewritten: sys.pycache_prefix.\nSetbythe-X pycache_prefix=PATHcommandlineoptionandthePYTHONPYCACHEPREFIXenvi-\nronmentvariable. Thecommand-lineoptiontakesprecedence.\nIfNULL,sys.pycache_prefixissettoNone.\nDefault: NULL.\nintquiet\nQuiet mode. If greater than 0, don\u2019t display the copyright and version at Python startup in interactive\nmode.\nIncrementedbythe-qcommandlineoption.\nDefault: 0.\nwchar_t*run_command\nValueofthe-ccommandlineoption.\nUsedbyPy_RunMain().\nDefault: NULL.\nwchar_t*run_filename\nFilenamepassedonthecommandline: trailingcommandlineargumentwithout-cor-m. Itisusedby\nthePy_RunMain()function.\nForexample,itissettoscript.pybythepython3 script.py argcommandline.\n240 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\nSeealsothePyConfig.skip_source_first_lineoption.\nDefault: NULL.\nwchar_t*run_module\nValueofthe-mcommandlineoption.\nUsedbyPy_RunMain().\nDefault: NULL.\nwchar_t*run_presite\npackage.modulepathtomodulethatshouldbeimportedbeforesite.pyisrun.\nSetbythe-X presite=package.modulecommand-lineoptionandthePYTHON_PRESITEenviron-\nmentvariable. Thecommand-lineoptiontakesprecedence.\nNeedsadebugbuildofPython(thePy_DEBUGmacromustbedefined).\nDefault: NULL.\nintshow_ref_count\nShowtotalreferencecountatexit(excludingimmortalobjects)?\nSetto1by-X showrefcountcommandlineoption.\nNeedsadebugbuildofPython(thePy_REF_DEBUGmacromustbedefined).\nDefault: 0.\nintsite_import\nImportthesitemoduleatstartup?\nIfequaltozero,disabletheimportofthemodulesiteandthesite-dependentmanipulationsofsys.path\nthatitentails.\nAlsodisablethesemanipulationsifthesitemoduleisexplicitlyimportedlater(callsite.main()if\nyouwantthemtobetriggered).\nSetto0bythe-Scommandlineoption.\nsys.flags.no_siteissettotheinvertedvalueofsite_import.\nDefault: 1.\nintskip_source_first_line\nIfnon-zero,skipthefirstlineofthePyConfig.run_filenamesource.\nItallowstheusageofnon-Unixformsof#!cmd. ThisisintendedforaDOSspecifichackonly.\nSetto1bythe-xcommandlineoption.\nDefault: 0.\nwchar_t*stdio_encoding\nwchar_t*stdio_errors\nEncoding and encoding errors of sys.stdin, sys.stdout and sys.stderr (but sys.stderr al-\nwaysuses\"backslashreplace\"errorhandler).\nUsethePYTHONIOENCODINGenvironmentvariableifitisnon-empty.\nDefaultencoding:\n\u2022 \"UTF-8\"ifPyPreConfig.utf8_modeisnon-zero.\n\u2022 Otherwise,usethelocaleencoding.\nDefaulterrorhandler:\n\u2022 OnWindows: use\"surrogateescape\".\n10.6. PyConfig 241\nThePython/CAPI,Release3.13.3\n\u2022 \"surrogateescape\"ifPyPreConfig.utf8_modeisnon-zero,oriftheLC_CTYPElocaleis\n\u201cC\u201dor\u201cPOSIX\u201d.\n\u2022 \"strict\"otherwise.\nSeealsoPyConfig.legacy_windows_stdio.\ninttracemalloc\nEnabletracemalloc?\nIfnon-zero,calltracemalloc.start()atstartup.\nSetby-X tracemalloc=NcommandlineoptionandbythePYTHONTRACEMALLOCenvironmentvari-\nable.\nDefault: -1inPythonmode,0inisolatedmode.\nintperf_profiling\nEnablecompatibilitymodewiththeperfprofiler?\nIfnon-zero,initializetheperftrampoline. Seeperf_profilingformoreinformation.\nSet by -X perf command-line option and by the PYTHON_PERF_JIT_SUPPORT environment vari-\nable for perf support with stack pointers and -X perf_jit command-line option and by the\nPYTHON_PERF_JIT_SUPPORTenvironmentvariableforperfsupportwithDWARFJITinformation.\nDefault: -1.\nAddedinversion3.12.\nintuse_environment\nUseenvironmentvariables?\nIfequalstozero,ignoretheenvironmentvariables.\nSetto0bythe-Eenvironmentvariable.\nDefault: 1inPythonconfigand0inisolatedconfig.\nintuser_site_directory\nIfnon-zero,addtheusersitedirectorytosys.path.\nSetto0bythe-sand-Icommandlineoptions.\nSetto0bythePYTHONNOUSERSITEenvironmentvariable.\nDefault: 1inPythonmode,0inisolatedmode.\nintverbose\nVerbose mode. If greater than 0, print a message each time a module is imported, showing the place\n(filenameorbuilt-inmodule)fromwhichitisloaded.\nIfgreaterthanorequalto2,printamessageforeachfilethatischeckedforwhensearchingforamodule.\nAlsoprovidesinformationonmodulecleanupatexit.\nIncrementedbythe-vcommandlineoption.\nSetbythePYTHONVERBOSEenvironmentvariablevalue.\nDefault: 0.\nPyWideStringListwarnoptions\nOptions of the warnings module to build warnings filters, lowest to highest priority: sys.\nwarnoptions.\nThe warnings module adds sys.warnoptions in the reverse order: the last PyConfig.\nwarnoptionsitembecomesthefirstitemofwarnings.filterswhichischeckedfirst(highestpri-\nority).\nThe-Wcommandlineoptionsaddsitsvaluetowarnoptions,itcanbeusedmultipletimes.\n242 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\nThePYTHONWARNINGSenvironmentvariablecanalsobeusedtoaddwarningoptions. Multipleoptions\ncanbespecified,separatedbycommas(,).\nDefault: emptylist.\nintwrite_bytecode\nIfequalto0,Pythonwon\u2019ttrytowrite.pycfilesontheimportofsourcemodules.\nSetto0bythe-BcommandlineoptionandthePYTHONDONTWRITEBYTECODEenvironmentvariable.\nsys.dont_write_bytecodeisinitializedtotheinvertedvalueofwrite_bytecode.\nDefault: 1.\nPyWideStringListxoptions\nValuesofthe-Xcommandlineoptions: sys._xoptions.\nDefault: emptylist.\nIf parse_argv is non-zero, argv arguments are parsed the same way the regular Python parses command line\narguments,andPythonargumentsarestrippedfromargv.\nThexoptionsoptionsareparsedtosetotheroptions: seethe-Xcommandlineoption.\nChangedinversion3.9: Theshow_alloc_countfieldhasbeenremoved.\n10.7 Initialization with PyConfig\nInitializing the interpreter from a populated configuration struct is handled by calling\nPy_InitializeFromConfig().\nThe caller is responsible to handle exceptions (error or exit) using PyStatus_Exception() and\nPy_ExitStatusException().\nIfPyImport_FrozenModules(),PyImport_AppendInittab()orPyImport_ExtendInittab()areused,\nthey must be set or called after Python preinitialization and before the Python initialization. If Python is initial-\nizedmultipletimes,PyImport_AppendInittab()orPyImport_ExtendInittab()mustbecalledbeforeeach\nPythoninitialization.\nThecurrentconfiguration(PyConfigtype)isstoredinPyInterpreterState.config.\nExamplesettingtheprogramname:\nvoid init_python(void)\n{\nPyStatus status;\nPyConfig config;\nPyConfig_InitPythonConfig(&config);\n/* Set the program name. Implicitly preinitialize Python. */\nstatus = PyConfig_SetString(&config, &config.program_name,\nL\"/path/to/my_program\");\nif (PyStatus_Exception(status)) {\ngoto exception;\n}\nstatus = Py_InitializeFromConfig(&config);\nif (PyStatus_Exception(status)) {\ngoto exception;\n}\nPyConfig_Clear(&config);\nreturn;\n(continuesonnextpage)\n10.7. InitializationwithPyConfig 243\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nexception:\nPyConfig_Clear(&config);\nPy_ExitStatusException(status);\n}\nMorecompleteexamplemodifyingthedefaultconfiguration,readtheconfiguration,andthenoverridesomeparam-\neters. Notethatsince3.11,manyparametersarenotcalculateduntilinitialization,andsovaluescannotbereadfrom\ntheconfigurationstructure. Anyvaluessetbeforeinitializeiscalledwillbeleftunchangedbyinitialization:\nPyStatus init_python(const char *program_name)\n{\nPyStatus status;\nPyConfig config;\nPyConfig_InitPythonConfig(&config);\n/* Set the program name before reading the configuration\n(decode byte string from the locale encoding).\nImplicitly preinitialize Python. */\nstatus = PyConfig_SetBytesString(&config, &config.program_name,\nprogram_name);\nif (PyStatus_Exception(status)) {\ngoto done;\n}\n/* Read all configuration at once */\nstatus = PyConfig_Read(&config);\nif (PyStatus_Exception(status)) {\ngoto done;\n}\n/* Specify sys.path explicitly */\n/* If you want to modify the default set of paths, finish\ninitialization first and then use PySys_GetObject(\"path\") */\nconfig.module_search_paths_set = 1;\nstatus = PyWideStringList_Append(&config.module_search_paths,\nL\"/path/to/stdlib\");\nif (PyStatus_Exception(status)) {\ngoto done;\n}\nstatus = PyWideStringList_Append(&config.module_search_paths,\nL\"/path/to/more/modules\");\nif (PyStatus_Exception(status)) {\ngoto done;\n}\n/* Override executable computed by PyConfig_Read() */\nstatus = PyConfig_SetString(&config, &config.executable,\nL\"/path/to/my_executable\");\nif (PyStatus_Exception(status)) {\ngoto done;\n}\nstatus = Py_InitializeFromConfig(&config);\n(continuesonnextpage)\n244 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\ndone:\nPyConfig_Clear(&config);\nreturn status;\n}\n10.8 Isolated Configuration\nPyPreConfig_InitIsolatedConfig()andPyConfig_InitIsolatedConfig()functionscreateaconfigu-\nrationtoisolatePythonfromthesystem. Forexample,toembedPythonintoanapplication.\nThis configuration ignores global configuration variables, environment variables, command line arguments\n(PyConfig.argvisnotparsed)andusersitedirectory. TheCstandardstreams(ex: stdout)andtheLC_CTYPE\nlocaleareleftunchanged. Signalhandlersarenotinstalled.\nConfigurationfilesarestillusedwiththisconfigurationtodeterminepathsthatareunspecified. EnsurePyConfig.\nhomeisspecifiedtoavoidcomputingthedefaultpathconfiguration.\n10.9 Python Configuration\nPyPreConfig_InitPythonConfig()andPyConfig_InitPythonConfig()functionscreateaconfiguration\ntobuildacustomizedPythonwhichbehavesastheregularPython.\nEnvironments variables and command line arguments are used to configure Python, whereas global configuration\nvariablesareignored.\nThis function enables C locale coercion (PEP 538) and Python UTF-8 Mode (PEP 540) depending on the\nLC_CTYPElocale,PYTHONUTF8andPYTHONCOERCECLOCALEenvironmentvariables.\n10.10 Python Path Configuration\nPyConfigcontainsmultiplefieldsforthepathconfiguration:\n\u2022 Pathconfigurationinputs:\n\u2013 PyConfig.home\n\u2013 PyConfig.platlibdir\n\u2013 PyConfig.pathconfig_warnings\n\u2013 PyConfig.program_name\n\u2013 PyConfig.pythonpath_env\n\u2013 currentworkingdirectory: togetabsolutepaths\n\u2013 PATHenvironmentvariabletogettheprogramfullpath(fromPyConfig.program_name)\n\u2013 __PYVENV_LAUNCHER__environmentvariable\n\u2013 (Windowsonly)Applicationpathsintheregistryunder\u201cSoftwarePythonPythonCoreX.YPythonPath\u201dof\nHKEY_CURRENT_USERandHKEY_LOCAL_MACHINE(whereX.YisthePythonversion).\n\u2022 Pathconfigurationoutputfields:\n\u2013 PyConfig.base_exec_prefix\n\u2013 PyConfig.base_executable\n\u2013 PyConfig.base_prefix\n\u2013 PyConfig.exec_prefix\n10.8. IsolatedConfiguration 245\nThePython/CAPI,Release3.13.3\n\u2013 PyConfig.executable\n\u2013 PyConfig.module_search_paths_set,PyConfig.module_search_paths\n\u2013 PyConfig.prefix\nIf at least one \u201coutput field\u201d is not set, Python calculates the path configuration to fill unset\nfields. If module_search_paths_set is equal to 0, module_search_paths is overridden and\nmodule_search_paths_setissetto1.\nIt is possible to completely ignore the function calculating the default path configuration by setting explic-\nitly all path configuration output fields listed above. A string is considered as set even if it is non-empty.\nmodule_search_paths is considered as set if module_search_paths_set is set to 1. In this case,\nmodule_search_pathswillbeusedwithoutmodification.\nSetpathconfig_warningsto0tosuppresswarningswhencalculatingthepathconfiguration(Unixonly,Windows\ndoesnotloganywarning).\nIfbase_prefixorbase_exec_prefixfieldsarenotset,theyinherittheirvaluefromprefixandexec_prefix\nrespectively.\nPy_RunMain()andPy_Main()modifysys.path:\n\u2022 Ifrun_filenameissetandisadirectorywhichcontainsa__main__.pyscript,prependrun_filename\ntosys.path.\n\u2022 Ifisolatediszero:\n\u2013 Ifrun_moduleisset,prependthecurrentdirectorytosys.path. Donothingifthecurrentdirectory\ncannotberead.\n\u2013 Ifrun_filenameisset,prependthedirectoryofthefilenametosys.path.\n\u2013 Otherwise,prependanemptystringtosys.path.\nIf site_import is non-zero, sys.path can be modified by the site module. If user_site_directory is\nnon-zeroandtheuser\u2019ssite-packagedirectoryexists,thesitemoduleappendstheuser\u2019ssite-packagedirectoryto\nsys.path.\nThefollowingconfigurationfilesareusedbythepathconfiguration:\n\u2022 pyvenv.cfg\n\u2022 ._pthfile(ex: python._pth)\n\u2022 pybuilddir.txt(Unixonly)\nIfa._pthfileispresent:\n\u2022 Setisolatedto1.\n\u2022 Setuse_environmentto0.\n\u2022 Setsite_importto0.\n\u2022 Setsafe_pathto1.\nThe__PYVENV_LAUNCHER__environmentvariableisusedtosetPyConfig.base_executable.\n10.11 Py_GetArgcArgv()\nvoidPy_GetArgcArgv(int*argc,wchar_t***argv)\nGettheoriginalcommandlinearguments,beforePythonmodifiedthem.\nSeealsoPyConfig.orig_argvmember.\n246 Chapter10. PythonInitializationConfiguration\nThePython/CAPI,Release3.13.3\n10.12 Multi-Phase Initialization Private Provisional API\nThissectionisaprivateprovisionalAPIintroducingmulti-phaseinitialization,thecorefeatureofPEP432:\n\u2022 \u201cCore\u201dinitializationphase,\u201cbareminimumPython\u201d:\n\u2013 Builtintypes;\n\u2013 Builtinexceptions;\n\u2013 Builtinandfrozenmodules;\n\u2013 Thesysmoduleisonlypartiallyinitialized(ex: sys.pathdoesn\u2019texistyet).\n\u2022 \u201cMain\u201dinitializationphase,Pythonisfullyinitialized:\n\u2013 Installandconfigureimportlib;\n\u2013 ApplythePathConfiguration;\n\u2013 Installsignalhandlers;\n\u2013 Finishsysmoduleinitialization(ex: createsys.stdoutandsys.path);\n\u2013 Enableoptionalfeatureslikefaulthandlerandtracemalloc;\n\u2013 Importthesitemodule;\n\u2013 etc.\nPrivateprovisionalAPI:\n\u2022 PyConfig._init_main: if set to 0, Py_InitializeFromConfig() stops at the \u201cCore\u201d initialization\nphase.\nPyStatus_Py_InitializeMain(void)\nMovetothe\u201cMain\u201dinitializationphase,finishthePythoninitialization.\nNomoduleisimportedduringthe\u201cCore\u201dphaseandtheimportlibmoduleisnotconfigured:thePathConfiguration\nisonlyappliedduringthe\u201cMain\u201dphase. ItmayallowtocustomizePythoninPythontooverrideortunethePath\nConfiguration,maybeinstallacustomsys.meta_pathimporteroranimporthook,etc.\nItmaybecomepossibletocalculatethePathConfigurationinPython,aftertheCorephaseandbeforetheMainphase,\nwhichisoneofthePEP432motivation.\nThe \u201cCore\u201d phase is not properly defined: what should be and what should not be available at this phase is not\nspecifiedyet. TheAPIismarkedasprivateandprovisional: theAPIcanbemodifiedorevenberemovedanytime\nuntilaproperpublicAPIisdesigned.\nExamplerunningPythoncodebetween\u201cCore\u201dand\u201cMain\u201dinitializationphases:\nvoid init_python(void)\n{\nPyStatus status;\nPyConfig config;\nPyConfig_InitPythonConfig(&config);\nconfig._init_main = 0;\n/* ... customize 'config' configuration ... */\nstatus = Py_InitializeFromConfig(&config);\nPyConfig_Clear(&config);\nif (PyStatus_Exception(status)) {\nPy_ExitStatusException(status);\n}\n(continuesonnextpage)\n10.12. Multi-PhaseInitializationPrivateProvisionalAPI 247\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\n/* Use sys.stderr because sys.stdout is only created\nby _Py_InitializeMain() */\nint res = PyRun_SimpleString(\n\"import sys; \"\n\"print('Run Python code before _Py_InitializeMain', \"\n\"file=sys.stderr)\");\nif (res < 0) {\nexit(1);\n}\n/* ... put more configuration code here ... */\nstatus = _Py_InitializeMain();\nif (PyStatus_Exception(status)) {\nPy_ExitStatusException(status);\n}\n}\n248 Chapter10. PythonInitializationConfiguration\nCHAPTER\nELEVEN\nMEMORY MANAGEMENT\n11.1 Overview\nMemory management in Python involves a private heap containing all Python objects and data structures. The\nmanagementofthisprivateheapisensuredinternallybythePythonmemorymanager. ThePythonmemorymanager\nhasdifferentcomponentswhichdealwithvariousdynamicstoragemanagementaspects,likesharing,segmentation,\npreallocationorcaching.\nAt the lowest level, a raw memory allocator ensures that there is enough room in the private heap for storing all\nPython-relateddatabyinteractingwiththememorymanageroftheoperatingsystem. Ontopoftherawmemory\nallocator,severalobject-specificallocatorsoperateonthesameheapandimplementdistinctmemorymanagement\npoliciesadaptedtothepeculiaritiesofeveryobjecttype. Forexample,integerobjectsaremanageddifferentlywithin\nthe heap than strings, tuples or dictionaries because integers imply different storage requirements and speed/space\ntradeoffs. ThePythonmemorymanagerthusdelegatessomeoftheworktotheobject-specificallocators,butensures\nthatthelatteroperatewithintheboundsoftheprivateheap.\nItisimportanttounderstandthatthemanagementofthePythonheapisperformedbytheinterpreteritselfandthat\ntheuserhasnocontroloverit,eveniftheyregularlymanipulateobjectpointerstomemoryblocksinsidethatheap.\nTheallocation ofheap space forPython objects andother internal buffersis performed ondemand by thePython\nmemorymanagerthroughthePython/CAPIfunctionslistedinthisdocument.\nTo avoid memory corruption, extension writers should never try to operate on Python objects with the functions\nexported by the C library: malloc(), calloc(), realloc() and free(). This will result in mixed calls be-\ntweentheCallocatorandthePythonmemorymanagerwithfatalconsequences,becausetheyimplementdifferent\nalgorithmsandoperateondifferentheaps. However,onemaysafelyallocateandreleasememoryblockswiththeC\nlibraryallocatorforindividualpurposes,asshowninthefollowingexample:\nPyObject *res;\nchar *buf = (char *) malloc(BUFSIZ); /* for I/O */\nif (buf == NULL)\nreturn PyErr_NoMemory();\n...Do some I/O operation involving buf...\nres = PyBytes_FromString(buf);\nfree(buf); /* malloc'ed */\nreturn res;\nInthisexample, thememoryrequestfortheI/ObufferishandledbytheClibraryallocator. ThePythonmemory\nmanagerisinvolvedonlyintheallocationofthebytesobjectreturnedasaresult.\nInmostsituations, however, itisrecommendedtoallocatememoryfromthePythonheapspecificallybecausethe\nlatterisundercontrolofthePythonmemorymanager. Forexample,thisisrequiredwhentheinterpreterisextended\nwith new object types written in C. Another reason for using the Python heap is the desire to inform the Python\nmemory manager about the memory needs of the extension module. Even when the requested memory is used\nexclusively for internal, highly specific purposes, delegating all memory requests to the Python memory manager\ncausestheinterpretertohaveamoreaccurateimageofitsmemoryfootprintasawhole. Consequently,undercertain\ncircumstances, the Python memory manager may or may not trigger appropriate actions, like garbage collection,\n249\nThePython/CAPI,Release3.13.3\nmemory compaction or other preventive procedures. Note that by using the C library allocator as shown in the\npreviousexample,theallocatedmemoryfortheI/ObufferescapescompletelythePythonmemorymanager.\n(cid:181) Seealso\nThePYTHONMALLOCenvironmentvariablecanbeusedtoconfigurethememoryallocatorsusedbyPython.\nThePYTHONMALLOCSTATSenvironmentvariablecanbeusedtoprintstatisticsofthepymallocmemoryallocator\neverytimeanewpymallocobjectarenaiscreated,andonshutdown.\n11.2 Allocator Domains\nAll allocating functions belong to one of three different \u201cdomains\u201d (see also PyMemAllocatorDomain). These\ndomainsrepresentdifferentallocationstrategiesandareoptimizedfordifferentpurposes. Thespecificdetailsonhow\neverydomainallocatesmemoryorwhatinternalfunctionseachdomaincallsisconsideredanimplementationdetail,\nbutfordebuggingpurposesasimplifiedtablecanbefoundathere. TheAPIsusedtoallocateandfreeablockof\nmemorymustbefromthesamedomain. Forexample,PyMem_Free()mustbeusedtofreememoryallocatedusing\nPyMem_Malloc().\nThethreeallocationdomainsare:\n\u2022 Rawdomain: intendedforallocatingmemoryforgeneral-purposememorybufferswheretheallocationmust\ngotothesystemallocatororwheretheallocatorcanoperatewithouttheGIL.Thememoryisrequesteddirectly\nfromthesystem. SeeRawMemoryInterface.\n\u2022 \u201cMem\u201ddomain:intendedforallocatingmemoryforPythonbuffersandgeneral-purposememorybufferswhere\ntheallocationmustbeperformedwiththeGILheld. ThememoryistakenfromthePythonprivateheap. See\nMemoryInterface.\n\u2022 Object domain: intended for allocating memory for Python objects. The memory is taken from the Python\nprivateheap. SeeObjectallocators.\n(cid:174) Note\nThe free-threaded build requires that only Python objects are allocated using the \u201cobject\u201d domain and that all\nPythonobjectsareallocatedusingthatdomain. ThisdiffersfromthepriorPythonversions,wherethiswasonly\nabestpracticeandnotahardrequirement.\nForexample,buffers(non-Pythonobjects)shouldbeallocatedusingPyMem_Malloc(),PyMem_RawMalloc(),\normalloc(),butnotPyObject_Malloc().\nSeeMemoryAllocationAPIs.\n11.3 Raw Memory Interface\nThefollowingfunctionsetsarewrapperstothesystemallocator. Thesefunctionsarethread-safe,theGILdoesnot\nneedtobeheld.\nThedefaultrawmemoryallocatorusesthefollowingfunctions: malloc(),calloc(),realloc()andfree();\ncallmalloc(1)(orcalloc(1, 1))whenrequestingzerobytes.\nAddedinversion3.4.\nvoid*PyMem_RawMalloc(size_tn)\nPartoftheStableABIsinceversion3.13. Allocatesnbytesandreturnsapointeroftypevoid*totheallocated\nmemory,orNULLiftherequestfails.\nRequestingzerobytesreturnsadistinctnon-NULLpointerifpossible,asifPyMem_RawMalloc(1)hadbeen\ncalledinstead. Thememorywillnothavebeeninitializedinanyway.\n250 Chapter11. MemoryManagement\nThePython/CAPI,Release3.13.3\nvoid*PyMem_RawCalloc(size_tnelem,size_telsize)\nPartoftheStableABIsinceversion3.13. Allocatesnelemelementseachwhosesizeinbytesiselsizeandreturns\napointeroftypevoid*totheallocatedmemory,orNULLiftherequestfails. Thememoryisinitializedto\nzeros.\nRequestingzeroelementsorelementsofsizezerobytesreturnsadistinctnon-NULLpointerifpossible,asif\nPyMem_RawCalloc(1, 1)hadbeencalledinstead.\nAddedinversion3.5.\nvoid*PyMem_RawRealloc(void*p,size_tn)\nPartoftheStableABIsinceversion3.13. Resizesthememoryblockpointedtobyptonbytes. Thecontents\nwillbeunchangedtotheminimumoftheoldandthenewsizes.\nIfpisNULL,thecallisequivalenttoPyMem_RawMalloc(n);elseifnisequaltozero,thememoryblockis\nresizedbutisnotfreed,andthereturnedpointerisnon-NULL.\nUnless p is NULL, it must have been returned by a previous call to PyMem_RawMalloc(),\nPyMem_RawRealloc()orPyMem_RawCalloc().\nIftherequestfails,PyMem_RawRealloc()returnsNULLandpremainsavalidpointertothepreviousmemory\narea.\nvoidPyMem_RawFree(void*p)\nPart of the Stable ABI since version 3.13. Frees the memory block pointed to by p, which must have been\nreturned by a previous call to PyMem_RawMalloc(), PyMem_RawRealloc() or PyMem_RawCalloc().\nOtherwise,orifPyMem_RawFree(p)hasbeencalledbefore,undefinedbehavioroccurs.\nIfpisNULL,nooperationisperformed.\n11.4 Memory Interface\nThefollowingfunctionsets,modeledaftertheANSICstandard,butspecifyingbehaviorwhenrequestingzerobytes,\nareavailableforallocatingandreleasingmemoryfromthePythonheap.\nThedefaultmemoryallocatorusesthepymallocmemoryallocator.\n(cid:193) Warning\nTheGILmustbeheldwhenusingthesefunctions.\nChangedinversion3.6: Thedefaultallocatorisnowpymallocinsteadofsystemmalloc().\nvoid*PyMem_Malloc(size_tn)\nPart of the Stable ABI. Allocates n bytes and returns a pointer of type void* to the allocated memory, or\nNULLiftherequestfails.\nRequestingzerobytesreturnsadistinctnon-NULLpointerifpossible,asifPyMem_Malloc(1)hadbeencalled\ninstead. Thememorywillnothavebeeninitializedinanyway.\nvoid*PyMem_Calloc(size_tnelem,size_telsize)\nPartoftheStableABIsinceversion3.7. Allocatesnelemelementseachwhosesizeinbytesiselsizeandreturns\napointeroftypevoid*totheallocatedmemory,orNULLiftherequestfails. Thememoryisinitializedto\nzeros.\nRequestingzeroelementsorelementsofsizezerobytesreturnsadistinctnon-NULLpointerifpossible,asif\nPyMem_Calloc(1, 1)hadbeencalledinstead.\nAddedinversion3.5.\n11.4. MemoryInterface 251\nThePython/CAPI,Release3.13.3\nvoid*PyMem_Realloc(void*p,size_tn)\nPartoftheStableABI.Resizesthememoryblockpointedtobyptonbytes. Thecontentswillbeunchanged\ntotheminimumoftheoldandthenewsizes.\nIfpisNULL,thecallisequivalenttoPyMem_Malloc(n);elseifnisequaltozero,thememoryblockisresized\nbutisnotfreed,andthereturnedpointerisnon-NULL.\nUnlesspisNULL,itmusthavebeenreturnedbyapreviouscalltoPyMem_Malloc(),PyMem_Realloc()or\nPyMem_Calloc().\nIftherequestfails,PyMem_Realloc()returnsNULLandpremainsavalidpointertothepreviousmemory\narea.\nvoidPyMem_Free(void*p)\nPartoftheStableABI.Freesthememoryblockpointedtobyp,whichmusthavebeenreturnedbyaprevious\ncall to PyMem_Malloc(), PyMem_Realloc() or PyMem_Calloc(). Otherwise, or if PyMem_Free(p)\nhasbeencalledbefore,undefinedbehavioroccurs.\nIfpisNULL,nooperationisperformed.\nThefollowingtype-orientedmacrosareprovidedforconvenience. NotethatTYPE referstoanyCtype.\nPyMem_New(TYPE,n)\nSameasPyMem_Malloc(),butallocates(n * sizeof(TYPE))bytesofmemory. Returnsapointercast\ntoTYPE*. Thememorywillnothavebeeninitializedinanyway.\nPyMem_Resize(p,TYPE,n)\nSameasPyMem_Realloc(),butthememoryblockisresizedto(n * sizeof(TYPE))bytes. Returnsa\npointercasttoTYPE*. Onreturn,pwillbeapointertothenewmemoryarea,orNULLintheeventoffailure.\nThisisaCpreprocessormacro; pisalwaysreassigned. Savetheoriginalvalueofptoavoidlosingmemory\nwhenhandlingerrors.\nvoidPyMem_Del(void*p)\nSameasPyMem_Free().\nInaddition,thefollowingmacrosetsareprovidedforcallingthePythonmemoryallocatordirectly,withoutinvolving\ntheCAPIfunctionslistedabove. However,notethattheirusedoesnotpreservebinarycompatibilityacrossPython\nversionsandisthereforedeprecatedinextensionmodules.\n\u2022 PyMem_MALLOC(size)\n\u2022 PyMem_NEW(type, size)\n\u2022 PyMem_REALLOC(ptr, size)\n\u2022 PyMem_RESIZE(ptr, type, size)\n\u2022 PyMem_FREE(ptr)\n\u2022 PyMem_DEL(ptr)\n11.5 Object allocators\nThefollowingfunctionsets,modeledaftertheANSICstandard,butspecifyingbehaviorwhenrequestingzerobytes,\nareavailableforallocatingandreleasingmemoryfromthePythonheap.\n(cid:174) Note\nThereisnoguaranteethatthememoryreturnedbytheseallocatorscanbesuccessfullycasttoaPythonobject\nwhen intercepting the allocating functions in this domain by the methods described in the Customize Memory\nAllocatorssection.\n252 Chapter11. MemoryManagement\nThePython/CAPI,Release3.13.3\nThedefaultobjectallocatorusesthepymallocmemoryallocator.\n(cid:193) Warning\nTheGILmustbeheldwhenusingthesefunctions.\nvoid*PyObject_Malloc(size_tn)\nPart of the Stable ABI. Allocates n bytes and returns a pointer of type void* to the allocated memory, or\nNULLiftherequestfails.\nRequestingzerobytesreturnsadistinctnon-NULLpointerifpossible,asifPyObject_Malloc(1)hadbeen\ncalledinstead. Thememorywillnothavebeeninitializedinanyway.\nvoid*PyObject_Calloc(size_tnelem,size_telsize)\nPartoftheStableABIsinceversion3.7. Allocatesnelemelementseachwhosesizeinbytesiselsizeandreturns\napointeroftypevoid*totheallocatedmemory,orNULLiftherequestfails. Thememoryisinitializedto\nzeros.\nRequestingzeroelementsorelementsofsizezerobytesreturnsadistinctnon-NULLpointerifpossible,asif\nPyObject_Calloc(1, 1)hadbeencalledinstead.\nAddedinversion3.5.\nvoid*PyObject_Realloc(void*p,size_tn)\nPartoftheStableABI.Resizesthememoryblockpointedtobyptonbytes. Thecontentswillbeunchanged\ntotheminimumoftheoldandthenewsizes.\nIfpisNULL,thecallisequivalenttoPyObject_Malloc(n);elseifnisequaltozero,thememoryblockis\nresizedbutisnotfreed,andthereturnedpointerisnon-NULL.\nUnless p is NULL, it must have been returned by a previous call to PyObject_Malloc(),\nPyObject_Realloc()orPyObject_Calloc().\nIftherequestfails,PyObject_Realloc()returnsNULLandpremainsavalidpointertothepreviousmemory\narea.\nvoidPyObject_Free(void*p)\nPart of the Stable ABI. Frees the memory block pointed to by p, which must have been returned by a pre-\nvious call to PyObject_Malloc(), PyObject_Realloc() or PyObject_Calloc(). Otherwise, or if\nPyObject_Free(p)hasbeencalledbefore,undefinedbehavioroccurs.\nIfpisNULL,nooperationisperformed.\n11.6 Default Memory Allocators\nDefaultmemoryallocators:\nConfiguration Name PyMem_RawMallocPyMem_Malloc PyOb-\nject_Malloc\nReleasebuild \"pymalloc\" malloc pymalloc pymalloc\nDebugbuild \"pymalloc_debug\"malloc+debug pymalloc+de- pymalloc+de-\nbug bug\nRelease build, without py- \"malloc\" malloc malloc malloc\nmalloc\nDebug build, without py- \"malloc_debug\" malloc+debug malloc+debug malloc+debug\nmalloc\nLegend:\n11.6. DefaultMemoryAllocators 253\nThePython/CAPI,Release3.13.3\n\u2022 Name: valueforPYTHONMALLOCenvironmentvariable.\n\u2022 malloc: systemallocatorsfromthestandardClibrary,Cfunctions: malloc(),calloc(),realloc()and\nfree().\n\u2022 pymalloc: pymallocmemoryallocator.\n\u2022 mimalloc: mimallocmemoryallocator. Thepymallocallocatorwillbeusedifmimallocsupportisn\u2019tavail-\nable.\n\u2022 \u201c+debug\u201d: withdebughooksonthePythonmemoryallocators.\n\u2022 \u201cDebugbuild\u201d: Pythonbuildindebugmode.\n11.7 Customize Memory Allocators\nAddedinversion3.4.\ntypePyMemAllocatorEx\nStructureusedtodescribeamemoryblockallocator. Thestructurehasthefollowingfields:\nField Meaning\nvoid *ctx usercontextpassedasfirstargument\nvoid* malloc(void *ctx, size_t size) allocateamemoryblock\nvoid* calloc(void *ctx, size_t nelem, size_t allocateamemoryblockinitializedwith\nelsize) zeros\nvoid* realloc(void *ctx, void *ptr, size_t allocateorresizeamemoryblock\nnew_size)\nvoid free(void *ctx, void *ptr) freeamemoryblock\nChangedinversion3.5: ThePyMemAllocatorstructurewasrenamedtoPyMemAllocatorEx andanew\ncallocfieldwasadded.\ntypePyMemAllocatorDomain\nEnumusedtoidentifyanallocatordomain. Domains:\nPYMEM_DOMAIN_RAW\nFunctions:\n\u2022 PyMem_RawMalloc()\n\u2022 PyMem_RawRealloc()\n\u2022 PyMem_RawCalloc()\n\u2022 PyMem_RawFree()\nPYMEM_DOMAIN_MEM\nFunctions:\n\u2022 PyMem_Malloc(),\n\u2022 PyMem_Realloc()\n\u2022 PyMem_Calloc()\n\u2022 PyMem_Free()\nPYMEM_DOMAIN_OBJ\nFunctions:\n\u2022 PyObject_Malloc()\n\u2022 PyObject_Realloc()\n254 Chapter11. MemoryManagement\nThePython/CAPI,Release3.13.3\n\u2022 PyObject_Calloc()\n\u2022 PyObject_Free()\nvoidPyMem_GetAllocator(PyMemAllocatorDomaindomain,PyMemAllocatorEx*allocator)\nGetthememoryblockallocatorofthespecifieddomain.\nvoidPyMem_SetAllocator(PyMemAllocatorDomaindomain,PyMemAllocatorEx*allocator)\nSetthememoryblockallocatorofthespecifieddomain.\nThenewallocatormustreturnadistinctnon-NULLpointerwhenrequestingzerobytes.\nForthePYMEM_DOMAIN_RAWdomain,theallocatormustbethread-safe: theGILisnotheldwhentheallocator\niscalled.\nFor the remaining domains, the allocator must also be thread-safe: the allocator may be called in different\ninterpretersthatdonotshareaGIL.\nIf the new allocator is not a hook (does not call the previous allocator), the PyMem_SetupDebugHooks()\nfunctionmustbecalledtoreinstallthedebughooksontoponthenewallocator.\nSeealsoPyPreConfig.allocatorandPreinitializePythonwithPyPreConfig.\n(cid:193) Warning\nPyMem_SetAllocator()doeshavethefollowingcontract:\n\u2022 ItcanbecalledafterPy_PreInitialize()andbeforePy_InitializeFromConfig()toin-\nstallacustommemoryallocator. Therearenorestrictionsovertheinstalledallocatorotherthanthe\nonesimposedbythedomain(forinstance,theRawDomainallowstheallocatortobecalledwithout\ntheGILheld). Seethesectiononallocatordomainsformoreinformation.\n\u2022 IfcalledafterPythonhasfinishinitializing(afterPy_InitializeFromConfig()hasbeencalled)\nthe allocator must wrap the existing allocator. Substituting the current allocator for some other\narbitraryoneisnotsupported.\nChangedinversion3.12: Allallocatorsmustbethread-safe.\nvoidPyMem_SetupDebugHooks(void)\nSetupdebughooksinthePythonmemoryallocatorstodetectmemoryerrors.\n11.8 Debug hooks on the Python memory allocators\nWhenPythonisbuiltindebugmode,thePyMem_SetupDebugHooks()functioniscalledatthePythonpreinitial-\nizationtosetupdebughooksonPythonmemoryallocatorstodetectmemoryerrors.\nThePYTHONMALLOCenvironmentvariablecanbeusedtoinstalldebughooksonaPythoncompiledinreleasemode\n(ex: PYTHONMALLOC=debug).\nThe PyMem_SetupDebugHooks() function can be used to set debug hooks after calling\nPyMem_SetAllocator().\nThese debug hooks fill dynamically allocated memory blocks with special, recognizable bit patterns. Newly\nallocated memory is filled with the byte 0xCD (PYMEM_CLEANBYTE), freed memory is filled with the byte\n0xDD (PYMEM_DEADBYTE). Memory blocks are surrounded by \u201cforbidden bytes\u201d filled with the byte 0xFD\n(PYMEM_FORBIDDENBYTE).Stringsofthesebytesareunlikelytobevalidaddresses,floats,orASCIIstrings.\nRuntimechecks:\n\u2022 DetectAPIviolations. Forexample,detectifPyObject_Free()iscalledonamemoryblockallocatedby\nPyMem_Malloc().\n\u2022 Detectwritebeforethestartofthebuffer(bufferunderflow).\n\u2022 Detectwriteaftertheendofthebuffer(bufferoverflow).\n11.8. DebughooksonthePythonmemoryallocators 255\nThePython/CAPI,Release3.13.3\n\u2022 CheckthattheGILisheldwhenallocatorfunctionsofPYMEM_DOMAIN_OBJ(ex: PyObject_Malloc())and\nPYMEM_DOMAIN_MEM (ex: PyMem_Malloc())domainsarecalled.\nOnerror,thedebughooksusethetracemallocmoduletogetthetracebackwhereamemoryblockwasallocated.\nThetracebackisonlydisplayediftracemallocistracingPythonmemoryallocationsandthememoryblockwas\ntraced.\nLetS=sizeof(size_t). 2*SbytesareaddedateachendofeachblockofNbytesrequested. Thememorylayout\nislikeso,whereprepresentstheaddressreturnedbyamalloc-likeorrealloc-likefunction(p[i:j]meanstheslice\nofbytesfrom*(p+i)inclusiveupto*(p+j)exclusive; notethatthetreatmentofnegativeindicesdiffersfroma\nPythonslice):\np[-2*S:-S]\nNumberofbytesoriginallyaskedfor. Thisisasize_t,big-endian(easiertoreadinamemorydump).\np[-S]\nAPIidentifier(ASCIIcharacter):\n\u2022 'r'forPYMEM_DOMAIN_RAW.\n\u2022 'm'forPYMEM_DOMAIN_MEM.\n\u2022 'o'forPYMEM_DOMAIN_OBJ.\np[-S+1:0]\nCopiesofPYMEM_FORBIDDENBYTE.Usedtocatchunder-writesandreads.\np[0:N]\nThe requested memory, filled with copies of PYMEM_CLEANBYTE, used to catch reference to uninitial-\nizedmemory. Whenarealloc-likefunctioniscalledrequestingalargermemoryblock,thenewexcessbytes\narealsofilledwithPYMEM_CLEANBYTE.Whenafree-likefunctioniscalled,theseareoverwrittenwith\nPYMEM_DEADBYTE,tocatchreferencetofreedmemory. Whenarealloc-likefunctioniscalledrequesting\nasmallermemoryblock,theexcessoldbytesarealsofilledwithPYMEM_DEADBYTE.\np[N:N+S]\nCopiesofPYMEM_FORBIDDENBYTE.Usedtocatchover-writesandreads.\np[N+S:N+2*S]\nOnlyusedifthePYMEM_DEBUG_SERIALNOmacroisdefined(notdefinedbydefault).\nAserialnumber,incrementedby1oneachcalltoamalloc-likeorrealloc-likefunction. Big-endiansize_t.\nIf\u201cbadmemory\u201disdetectedlater,theserialnumbergivesanexcellentwaytosetabreakpointonthenextrun,\ntocapturetheinstantatwhichthisblockwaspassedout. Thestaticfunctionbumpserialno()inobmalloc.cis\ntheonlyplacetheserialnumberisincremented,andexistssoyoucansetsuchabreakpointeasily.\nArealloc-likeorfree-likefunctionfirstchecksthatthePYMEM_FORBIDDENBYTEbytesateachendareintact.\nIfthey\u2019vebeenaltered,diagnosticoutputiswrittentostderr,andtheprogramisabortedviaPy_FatalError(). The\nothermainfailuremodeisprovokingamemoryerrorwhenaprogramreadsuponeofthespecialbitpatternsand\ntriestouseitasanaddress. Ifyougetinadebuggerthenandlookattheobject,you\u2019relikelytoseethatit\u2019sentirely\nfilledwithPYMEM_DEADBYTE(meaningfreedmemoryisgettingused)orPYMEM_CLEANBYTE(meaning\nuninitializedmemoryisgettingused).\nChanged in version 3.6: The PyMem_SetupDebugHooks() function now also works on Python compiled in re-\nlease mode. On error, the debug hooks now use tracemalloc to get the traceback where a memory block\nwas allocated. The debug hooks now also check if the GIL is held when functions of PYMEM_DOMAIN_OBJ and\nPYMEM_DOMAIN_MEM domainsarecalled.\nChanged in version 3.8: Byte patterns 0xCB (PYMEM_CLEANBYTE), 0xDB (PYMEM_DEADBYTE) and 0xFB\n(PYMEM_FORBIDDENBYTE)havebeenreplacedwith0xCD,0xDDand0xFDtousethesamevaluesthanWindows\nCRTdebugmalloc()andfree().\n256 Chapter11. MemoryManagement\nThePython/CAPI,Release3.13.3\n11.9 The pymalloc allocator\nPythonhasapymallocallocatoroptimizedforsmallobjects(smallerorequalto512bytes)withashortlifetime. It\nusesmemorymappingscalled\u201carenas\u201dwithafixedsizeofeither256KiBon32-bitplatformsor1MiBon64-bit\nplatforms. ItfallsbacktoPyMem_RawMalloc()andPyMem_RawRealloc()forallocationslargerthan512bytes.\npymalloc is the default allocator of the PYMEM_DOMAIN_MEM (ex: PyMem_Malloc()) and PYMEM_DOMAIN_OBJ\n(ex: PyObject_Malloc())domains.\nThearenaallocatorusesthefollowingfunctions:\n\u2022 VirtualAlloc()andVirtualFree()onWindows,\n\u2022 mmap()andmunmap()ifavailable,\n\u2022 malloc()andfree()otherwise.\nThisallocatorisdisabledifPythonisconfiguredwiththe--without-pymallocoption. Itcanalsobedisabledat\nruntimeusingthePYTHONMALLOCenvironmentvariable(ex: PYTHONMALLOC=malloc).\n11.9.1 Customize pymalloc Arena Allocator\nAddedinversion3.4.\ntypePyObjectArenaAllocator\nStructureusedtodescribeanarenaallocator. Thestructurehasthreefields:\nField Meaning\nvoid *ctx usercontextpassedasfirstargument\nvoid* alloc(void *ctx, size_t size) allocateanarenaofsizebytes\nvoid free(void *ctx, void *ptr, size_t size) freeanarena\nvoidPyObject_GetArenaAllocator(PyObjectArenaAllocator*allocator)\nGetthearenaallocator.\nvoidPyObject_SetArenaAllocator(PyObjectArenaAllocator*allocator)\nSetthearenaallocator.\n11.10 The mimalloc allocator\nAddedinversion3.13.\nPython supports the mimalloc allocator when the underlying platform support is available. mimalloc \u201cis a general\npurpose allocator with excellent performance characteristics. Initially developed by Daan Leijen for the runtime\nsystemsoftheKokaandLeanlanguages.\u201d\n11.11 tracemalloc C API\nAddedinversion3.7.\nintPyTraceMalloc_Track(unsignedintdomain,uintptr_tptr,size_tsize)\nTrackanallocatedmemoryblockinthetracemallocmodule.\nReturn0onsuccess,return-1onerror(failedtoallocatememorytostorethetrace). Return-2iftracemalloc\nisdisabled.\nIfmemoryblockisalreadytracked,updatetheexistingtrace.\n11.9. Thepymallocallocator 257\nThePython/CAPI,Release3.13.3\nintPyTraceMalloc_Untrack(unsignedintdomain,uintptr_tptr)\nUntrackanallocatedmemoryblockinthetracemallocmodule. Donothingiftheblockwasnottracked.\nReturn-2iftracemallocisdisabled,otherwisereturn0.\n11.12 Examples\nHere is the example from section Overview, rewritten so that the I/O buffer is allocated from the Python heap by\nusingthefirstfunctionset:\nPyObject *res;\nchar *buf = (char *) PyMem_Malloc(BUFSIZ); /* for I/O */\nif (buf == NULL)\nreturn PyErr_NoMemory();\n/* ...Do some I/O operation involving buf... */\nres = PyBytes_FromString(buf);\nPyMem_Free(buf); /* allocated with PyMem_Malloc */\nreturn res;\nThesamecodeusingthetype-orientedfunctionset:\nPyObject *res;\nchar *buf = PyMem_New(char, BUFSIZ); /* for I/O */\nif (buf == NULL)\nreturn PyErr_NoMemory();\n/* ...Do some I/O operation involving buf... */\nres = PyBytes_FromString(buf);\nPyMem_Del(buf); /* allocated with PyMem_New */\nreturn res;\nNotethatinthetwoexamplesabove,thebufferisalwaysmanipulatedviafunctionsbelongingtothesameset. Indeed,\nit is required to use the same memory API family for a given memory block, so that the risk of mixing different\nallocators is reduced to a minimum. The following code sequence contains two errors, one of which is labeled as\nfatalbecauseitmixestwodifferentallocatorsoperatingondifferentheaps.\nchar *buf1 = PyMem_New(char, BUFSIZ);\nchar *buf2 = (char *) malloc(BUFSIZ);\nchar *buf3 = (char *) PyMem_Malloc(BUFSIZ);\n...\nPyMem_Del(buf3); /* Wrong -- should be PyMem_Free() */\nfree(buf2); /* Right -- allocated via malloc() */\nfree(buf1); /* Fatal -- should be PyMem_Del() */\nIn addition to the functions aimed at handling raw memory blocks from the Python heap, objects in Python are\nallocatedandreleasedwithPyObject_New,PyObject_NewVarandPyObject_Del().\nThesewillbeexplainedinthenextchapterondefiningandimplementingnewobjecttypesinC.\n258 Chapter11. MemoryManagement\nCHAPTER\nTWELVE\nOBJECT IMPLEMENTATION SUPPORT\nThischapterdescribesthefunctions,types,andmacrosusedwhendefiningnewobjecttypes.\n12.1 Allocating Objects on the Heap\nPyObject*_PyObject_New(PyTypeObject*type)\nReturnvalue: Newreference.\nPyVarObject*_PyObject_NewVar(PyTypeObject*type,Py_ssize_tsize)\nReturnvalue: Newreference.\nPyObject*PyObject_Init(PyObject*op,PyTypeObject*type)\nReturnvalue: Borrowedreference. PartoftheStableABI.Initializeanewlyallocatedobjectopwithitstype\nandinitialreference. Returnstheinitializedobject. Otherfieldsoftheobjectarenotaffected.\nPyVarObject*PyObject_InitVar(PyVarObject*op,PyTypeObject*type,Py_ssize_tsize)\nReturnvalue: Borrowedreference. PartoftheStableABI.ThisdoeseverythingPyObject_Init()does,and\nalsoinitializesthelengthinformationforavariable-sizeobject.\nPyObject_New(TYPE,typeobj)\nAllocate a new Python object using the C structure type TYPE and the Python type object typeobj\n(PyTypeObject*). Fields not defined by the Python object header are not initialized. The caller will own\nthe only reference to the object (i.e. its reference count will be one). The size of the memory allocation is\ndeterminedfromthetp_basicsizefieldofthetypeobject.\nNote that this function is unsuitable if typeobj has Py_TPFLAGS_HAVE_GC set. For such objects, use\nPyObject_GC_New()instead.\nPyObject_NewVar(TYPE,typeobj,size)\nAllocate a new Python object using the C structure type TYPE and the Python type object typeobj\n(PyTypeObject*). FieldsnotdefinedbythePythonobjectheaderarenotinitialized. Theallocatedmemory\nallowsfortheTYPE structureplussize(Py_ssize_t)fieldsofthesizegivenbythetp_itemsizefieldof\ntypeobj. This is useful for implementing objects like tuples, which are able to determine their size at con-\nstruction time. Embedding the array of fields into the same allocation decreases the number of allocations,\nimprovingthememorymanagementefficiency.\nNote that this function is unsuitable if typeobj has Py_TPFLAGS_HAVE_GC set. For such objects, use\nPyObject_GC_NewVar()instead.\nvoidPyObject_Del(void*op)\nReleasesmemoryallocatedtoanobjectusingPyObject_NeworPyObject_NewVar. Thisisnormallycalled\nfromthetp_deallochandlerspecifiedintheobject\u2019stype. Thefieldsoftheobjectshouldnotbeaccessed\nafterthiscallasthememoryisnolongeravalidPythonobject.\nPyObject_Py_NoneStruct\nObject which is visible in Python as None. This should only be accessed using the Py_None macro, which\nevaluatestoapointertothisobject.\n259\nThePython/CAPI,Release3.13.3\n(cid:181) Seealso\nPyModule_Create()\nToallocateandcreateextensionmodules.\n12.2 Common Object Structures\nThere are a large number of structures which are used in the definition of object types for Python. This section\ndescribesthesestructuresandhowtheyareused.\n12.2.1 Base object types and macros\nAllPythonobjectsultimatelyshareasmallnumberoffieldsatthebeginningoftheobject\u2019srepresentationinmemory.\nThesearerepresentedbythePyObjectandPyVarObjecttypes,whicharedefined,inturn,bytheexpansionsof\nsomemacrosalsoused,whetherdirectlyorindirectly,inthedefinitionofallotherPythonobjects. Additionalmacros\ncanbefoundunderreferencecounting.\ntypePyObject\nPartoftheLimitedAPI.(OnlysomemembersarepartofthestableABI.)Allobjecttypesareextensionsofthis\ntype. ThisisatypewhichcontainstheinformationPythonneedstotreatapointertoanobjectasanobject. In\nanormal\u201crelease\u201dbuild,itcontainsonlytheobject\u2019sreferencecountandapointertothecorrespondingtype\nobject. NothingisactuallydeclaredtobeaPyObject,buteverypointertoaPythonobjectcanbecasttoa\nPyObject*. AccesstothemembersmustbedonebyusingthemacrosPy_REFCNTandPy_TYPE.\ntypePyVarObject\nPartoftheLimitedAPI.(OnlysomemembersarepartofthestableABI.)ThisisanextensionofPyObject\nthataddstheob_sizefield. Thisisonlyusedforobjectsthathavesomenotionoflength. Thistypedoesnot\noften appear in the Python/C API. Access to the members must be done by using the macros Py_REFCNT,\nPy_TYPE,andPy_SIZE.\nPyObject_HEAD\nThisisamacrousedwhendeclaringnewtypeswhichrepresentobjectswithoutavaryinglength. ThePyOb-\nject_HEADmacroexpandsto:\nPyObject ob_base;\nSeedocumentationofPyObjectabove.\nPyObject_VAR_HEAD\nThisisamacrousedwhendeclaringnewtypeswhichrepresentobjectswithalengththatvariesfrominstance\ntoinstance. ThePyObject_VAR_HEADmacroexpandsto:\nPyVarObject ob_base;\nSeedocumentationofPyVarObjectabove.\nPyTypeObjectPyBaseObject_Type\nPartoftheStableABI.Thebaseclassofallotherobjects,thesameasobjectinPython.\nintPy_Is(PyObject*x,PyObject*y)\nPartoftheStableABIsinceversion3.10. Testifthexobjectistheyobject,thesameasx is yinPython.\nAddedinversion3.10.\nintPy_IsNone(PyObject*x)\nPartoftheStableABIsinceversion3.10. TestifanobjectistheNonesingleton,thesameasx is Nonein\nPython.\nAddedinversion3.10.\n260 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nintPy_IsTrue(PyObject*x)\nPartoftheStableABIsinceversion3.10. TestifanobjectistheTruesingleton,thesameasx is Truein\nPython.\nAddedinversion3.10.\nintPy_IsFalse(PyObject*x)\nPartoftheStableABIsinceversion3.10. TestifanobjectistheFalsesingleton,thesameasx is False\ninPython.\nAddedinversion3.10.\nPyTypeObject*Py_TYPE(PyObject*o)\nReturnvalue: Borrowedreference. GetthetypeofthePythonobjecto.\nReturnaborrowedreference.\nUsethePy_SET_TYPE()functiontosetanobjecttype.\nChangedinversion3.11: Py_TYPE()ischangedtoaninlinestaticfunction. Theparametertypeisnolonger\nconst PyObject*.\nintPy_IS_TYPE(PyObject*o,PyTypeObject*type)\nReturnnon-zeroiftheobjectotypeistype. Returnzerootherwise. Equivalentto: Py_TYPE(o) == type.\nAddedinversion3.9.\nvoidPy_SET_TYPE(PyObject*o,PyTypeObject*type)\nSettheobjectotypetotype.\nAddedinversion3.9.\nPy_ssize_tPy_SIZE(PyVarObject*o)\nGetthesizeofthePythonobjecto.\nUsethePy_SET_SIZE()functiontosetanobjectsize.\nChangedinversion3.11: Py_SIZE()ischangedtoaninlinestaticfunction. Theparametertypeisnolonger\nconst PyVarObject*.\nvoidPy_SET_SIZE(PyVarObject*o,Py_ssize_tsize)\nSettheobjectosizetosize.\nAddedinversion3.9.\nPyObject_HEAD_INIT(type)\nThisisamacrowhichexpandstoinitializationvaluesforanewPyObjecttype. Thismacroexpandsto:\n_PyObject_EXTRA_INIT\n1, type,\nPyVarObject_HEAD_INIT(type,size)\nThisisamacrowhichexpandstoinitializationvaluesforanewPyVarObjecttype,includingtheob_size\nfield. Thismacroexpandsto:\n_PyObject_EXTRA_INIT\n1, type, size,\n12.2.2 Implementing functions and methods\n12.2. CommonObjectStructures 261\nThePython/CAPI,Release3.13.3\ntypePyCFunction\nPartoftheStableABI.TypeofthefunctionsusedtoimplementmostPythoncallablesinC.Functionsofthis\ntype take two PyObject* parameters and return one such value. If the return value is NULL, an exception\nshallhavebeenset. IfnotNULL,thereturnvalueisinterpretedasthereturnvalueofthefunctionasexposed\ninPython. Thefunctionmustreturnanewreference.\nThefunctionsignatureis:\nPyObject *PyCFunction(PyObject *self,\nPyObject *args);\ntypePyCFunctionWithKeywords\nPart of the Stable ABI. Type of the functions used to implement Python callables in C with signature\nMETH_VARARGS|METH_KEYWORDS.Thefunctionsignatureis:\nPyObject *PyCFunctionWithKeywords(PyObject *self,\nPyObject *args,\nPyObject *kwargs);\ntypePyCFunctionFast\nPartoftheStableABIsinceversion3.13. TypeofthefunctionsusedtoimplementPythoncallablesinCwith\nsignatureMETH_FASTCALL.Thefunctionsignatureis:\nPyObject *PyCFunctionFast(PyObject *self,\nPyObject *const *args,\nPy_ssize_t nargs);\ntypePyCFunctionFastWithKeywords\nPartoftheStableABIsinceversion3.13. TypeofthefunctionsusedtoimplementPythoncallablesinCwith\nsignatureMETH_FASTCALL|METH_KEYWORDS.Thefunctionsignatureis:\nPyObject *PyCFunctionFastWithKeywords(PyObject *self,\nPyObject *const *args,\nPy_ssize_t nargs,\nPyObject *kwnames);\ntypePyCMethod\nType of the functions used to implement Python callables in C with signature METH_METHOD |\nMETH_FASTCALL|METH_KEYWORDS.Thefunctionsignatureis:\nPyObject *PyCMethod(PyObject *self,\nPyTypeObject *defining_class,\nPyObject *const *args,\nPy_ssize_t nargs,\nPyObject *kwnames)\nAddedinversion3.9.\ntypePyMethodDef\nPartoftheStableABI(includingallmembers). Structureusedtodescribeamethodofanextensiontype. This\nstructurehasfourfields:\nconstchar*ml_name\nNameofthemethod.\nPyCFunctionml_meth\nPointertotheCimplementation.\n262 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nintml_flags\nFlagsbitsindicatinghowthecallshouldbeconstructed.\nconstchar*ml_doc\nPointstothecontentsofthedocstring.\nTheml_methisaCfunctionpointer. Thefunctionsmaybeofdifferenttypes,buttheyalwaysreturnPyObject*.\nIf the function is not of the PyCFunction, the compiler will require a cast in the method table. Even though\nPyCFunction defines the first parameter as PyObject*, it is common that the method implementation uses the\nspecificCtypeoftheself object.\nTheml_flagsfieldisabitfieldwhichcanincludethefollowingflags. Theindividualflagsindicateeitheracalling\nconventionorabindingconvention.\nTherearethesecallingconventions:\nMETH_VARARGS\nThisisthetypicalcallingconvention,wherethemethodshavethetypePyCFunction. Thefunctionexpects\ntwo PyObject* values. The first one is the self object for methods; for module functions, it is the module\nobject. Thesecondparameter(oftencalledargs)isatupleobjectrepresentingallarguments. Thisparameter\nistypicallyprocessedusingPyArg_ParseTuple()orPyArg_UnpackTuple().\nMETH_KEYWORDS\nCan only be used in certain combinations with other flags: METH_VARARGS | METH_KEYWORDS,\nMETH_FASTCALL|METH_KEYWORDSandMETH_METHOD|METH_FASTCALL|METH_KEYWORDS.\nMETH_VARARGS | METH_KEYWORDS\nMethodswiththeseflagsmustbeoftypePyCFunctionWithKeywords. Thefunctionexpectsthreeparame-\nters: self,args,kwargswherekwargsisadictionaryofallthekeywordargumentsorpossiblyNULLifthereare\nnokeywordarguments. TheparametersaretypicallyprocessedusingPyArg_ParseTupleAndKeywords().\nMETH_FASTCALL\nFastcallingconventionsupportingonlypositionalarguments. ThemethodshavethetypePyCFunctionFast.\nThefirstparameterisself,thesecondparameterisaCarrayofPyObject*valuesindicatingthearguments\nandthethirdparameteristhenumberofarguments(thelengthofthearray).\nAddedinversion3.7.\nChangedinversion3.10: METH_FASTCALLisnowpartofthestableABI.\nMETH_FASTCALL | METH_KEYWORDS\nExtension of METH_FASTCALL supporting also keyword arguments, with methods of type\nPyCFunctionFastWithKeywords. Keyword arguments are passed the same way as in the vectorcall\nprotocol: thereisanadditionalfourthPyObject*parameterwhichisatuplerepresentingthenamesofthe\nkeyword arguments (which are guaranteed to be strings) or possibly NULL if there are no keywords. The\nvaluesofthekeywordargumentsarestoredintheargsarray,afterthepositionalarguments.\nAddedinversion3.7.\nMETH_METHOD\nCan only be used in the combination with other flags: METH_METHOD | METH_FASTCALL |\nMETH_KEYWORDS.\nMETH_METHOD | METH_FASTCALL | METH_KEYWORDS\nExtension of METH_FASTCALL | METH_KEYWORDS supporting the defining class, that is, the class that\ncontainsthemethodinquestion. ThedefiningclassmightbeasuperclassofPy_TYPE(self).\nThe method needs to be of type PyCMethod, the same as for METH_FASTCALL | METH_KEYWORDS with\ndefining_classargumentaddedafterself.\nAddedinversion3.9.\nMETH_NOARGS\nMethods without parameters don\u2019t need to check whether arguments are given if they are listed with the\n12.2. CommonObjectStructures 263\nThePython/CAPI,Release3.13.3\nMETH_NOARGSflag. TheyneedtobeoftypePyCFunction. Thefirstparameteristypicallynamedself and\nwillholdareferencetothemoduleorobjectinstance. InallcasesthesecondparameterwillbeNULL.\nThe function must have 2 parameters. Since the second parameter is unused, Py_UNUSED can be used to\npreventacompilerwarning.\nMETH_O\nMethods with a single object argument can be listed with the METH_O flag, instead of invoking\nPyArg_ParseTuple()witha\"O\"argument. TheyhavethetypePyCFunction,withtheself parameter,\nandaPyObject*parameterrepresentingthesingleargument.\nThesetwoconstantsarenotusedtoindicatethecallingconventionbutthebindingwhenusewithmethodsofclasses.\nThesemaynotbeusedforfunctionsdefinedformodules. Atmostoneoftheseflagsmaybesetforanygivenmethod.\nMETH_CLASS\nThemethodwillbepassedthetypeobjectasthefirstparameterratherthananinstanceofthetype. Thisis\nusedtocreateclassmethods,similartowhatiscreatedwhenusingtheclassmethod()built-infunction.\nMETH_STATIC\nThe method will be passed NULL as the first parameter rather than an instance of the type. This is used to\ncreatestaticmethods,similartowhatiscreatedwhenusingthestaticmethod()built-infunction.\nOneotherconstantcontrolswhetheramethodisloadedinplaceofanotherdefinitionwiththesamemethodname.\nMETH_COEXIST\nThemethodwillbeloadedinplaceofexistingdefinitions. WithoutMETH_COEXIST,thedefaultistoskip\nrepeateddefinitions. Sinceslotwrappersareloadedbeforethemethodtable, theexistenceofa sq_contains\nslot,forexample,wouldgenerateawrappedmethodnamed__contains__()andprecludetheloadingof\nacorrespondingPyCFunctionwiththesamename. Withtheflagdefined,thePyCFunctionwillbeloadedin\nplaceofthewrapperobjectandwillco-existwiththeslot. ThisishelpfulbecausecallstoPyCFunctionsare\noptimizedmorethanwrapperobjectcalls.\nPyObject*PyCMethod_New(PyMethodDef *ml,PyObject*self,PyObject*module,PyTypeObject*cls)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.9. TurnmlintoaPythoncallableobject.\nThecallermustensurethatmloutlivesthecallable. Typically,mlisdefinedasastaticvariable.\nTheselfparameterwillbepassedastheselfargumenttotheCfunctioninml->ml_methwheninvoked. self\ncanbeNULL.\nThecallableobject\u2019s__module__attributecanbesetfromthegivenmoduleargument. moduleshouldbea\nPythonstring,whichwillbeusedasnameofthemodulethefunctionisdefinedin. Ifunavailable,itcanbe\nsettoNoneorNULL.\n(cid:181) Seealso\nfunction.__module__\nTheclsparameterwillbepassedasthedefining_classargumenttotheCfunction. MustbesetifMETH_METHOD\nissetonml->ml_flags.\nAddedinversion3.9.\nPyObject*PyCFunction_NewEx(PyMethodDef *ml,PyObject*self,PyObject*module)\nReturnvalue: Newreference. PartoftheStableABI.EquivalenttoPyCMethod_New(ml, self, module,\nNULL).\nPyObject*PyCFunction_New(PyMethodDef *ml,PyObject*self)\nReturnvalue: Newreference. PartoftheStableABIsinceversion3.4. EquivalenttoPyCMethod_New(ml,\nself, NULL, NULL).\n264 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\n12.2.3 Accessing attributes of extension types\ntypePyMemberDef\nPartoftheStableABI(includingallmembers). Structurewhichdescribesanattributeofatypewhichcorre-\nspondstoaCstructmember. Whendefiningaclass,putaNULL-terminatedarrayofthesestructuresinthe\ntp_membersslot.\nItsfieldsare,inorder:\nconstchar*name\nNameofthemember. ANULLvaluemarkstheendofaPyMemberDef[]array.\nThestringshouldbestatic,nocopyismadeofit.\ninttype\nThetypeofthememberintheCstruct. SeeMembertypesforthepossiblevalues.\nPy_ssize_toffset\nTheoffsetinbytesthatthememberislocatedonthetype\u2019sobjectstruct.\nintflags\nZeroormoreoftheMemberflags,combinedusingbitwiseOR.\nconstchar*doc\nThedocstring,orNULL.Thestringshouldbestatic,nocopyismadeofit. Typically,itisdefinedusing\nPyDoc_STR.\nBy default (when flags is 0), members allow both read and write access. Use the Py_READONLY flag for\nread-only access. Certain types, like Py_T_STRING, imply Py_READONLY. Only Py_T_OBJECT_EX (and\nlegacyT_OBJECT)memberscanbedeleted.\nForheap-allocatedtypes(createdusingPyType_FromSpec()orsimilar),PyMemberDefmaycontainadef-\ninitionforthespecialmember\"__vectorcalloffset__\",correspondingtotp_vectorcall_offsetin\ntypeobjects. ThesemustbedefinedwithPy_T_PYSSIZETandPy_READONLY,forexample:\nstatic PyMemberDef spam_type_members[] = {\n{\"__vectorcalloffset__\", Py_T_PYSSIZET,\noffsetof(Spam_object, vectorcall), Py_READONLY},\n{NULL} /* Sentinel */\n};\n(Youmayneedto#include <stddef.h>foroffsetof().)\nThe legacy offsets tp_dictoffset and tp_weaklistoffset can be defined similarly using\n\"__dictoffset__\" and \"__weaklistoffset__\" members, but extensions are strongly encouraged to\nusePy_TPFLAGS_MANAGED_DICTandPy_TPFLAGS_MANAGED_WEAKREFinstead.\nChanged in version 3.12: PyMemberDef is always available. Previously, it required including\n\"structmember.h\".\nPyObject*PyMember_GetOne(constchar*obj_addr,structPyMemberDef *m)\nPartoftheStableABI.Getanattributebelongingtotheobjectataddressobj_addr. Theattributeisdescribed\nbyPyMemberDefm. ReturnsNULLonerror.\nChanged in version 3.12: PyMember_GetOne is always available. Previously, it required including\n\"structmember.h\".\nintPyMember_SetOne(char*obj_addr,structPyMemberDef *m,PyObject*o)\nPartoftheStableABI.Setanattributebelongingtotheobjectataddressobj_addrtoobjecto. Theattribute\ntosetisdescribedbyPyMemberDefm. Returns0ifsuccessfulandanegativevalueonfailure.\nChanged in version 3.12: PyMember_SetOne is always available. Previously, it required including\n\"structmember.h\".\n12.2. CommonObjectStructures 265\nThePython/CAPI,Release3.13.3\nMemberflags\nThefollowingflagscanbeusedwithPyMemberDef.flags:\nPy_READONLY\nNotwritable.\nPy_AUDIT_READ\nEmitanobject.__getattr__auditeventbeforereading.\nPy_RELATIVE_OFFSET\nIndicatesthattheoffsetofthisPyMemberDefentryindicatesanoffsetfromthesubclass-specificdata,rather\nthanfromPyObject.\nCanonlybeusedaspartofPy_tp_membersslotwhencreatingaclassusingnegativebasicsize. Itis\nmandatoryinthatcase.\nThis flag is only used in PyType_Slot. When setting tp_members during class creation, Python clears it\nandsetsPyMemberDef.offsettotheoffsetfromthePyObjectstruct.\nChanged in version 3.10: The RESTRICTED, READ_RESTRICTED and WRITE_RESTRICTED macros available\nwith #include \"structmember.h\" are deprecated. READ_RESTRICTED and RESTRICTED are equivalent to\nPy_AUDIT_READ;WRITE_RESTRICTEDdoesnothing.\nChangedinversion3.12: TheREADONLYmacrowasrenamedtoPy_READONLY.ThePY_AUDIT_READmacrowas\nrenamed with the Py_ prefix. The new names are now always available. Previously, these required #include\n\"structmember.h\". Theheaderisstillavailableanditprovidestheoldnames.\nMembertypes\nPyMemberDef.typecanbeoneofthefollowingmacroscorrespondingtovariousCtypes. Whenthememberis\naccessedinPython,itwillbeconvertedtotheequivalentPythontype. WhenitissetfromPython,itwillbeconverted\nbacktotheCtype. Ifthatisnotpossible,anexceptionsuchasTypeErrororValueErrorisraised.\nUnlessmarked(D),attributesdefinedthiswaycannotbedeletedusinge.g. delordelattr().\n266 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nMacroname Ctype Pythontype\nchar int\nPy_T_BYTE\nshort int\nPy_T_SHORT\nint int\nPy_T_INT\nlong int\nPy_T_LONG\nlong long int\nPy_T_LONGLONG\nunsigned char int\nPy_T_UBYTE\nunsigned int int\nPy_T_UINT\nunsigned short int\nPy_T_USHORT\nunsigned long int\nPy_T_ULONG\nunsigned long long int\nPy_T_ULONGLONG\nPy_ssize_t int\nPy_T_PYSSIZET\nfloat float\nPy_T_FLOAT\ndouble float\nPy_T_DOUBLE\nchar(writtenas0or1) bool\nPy_T_BOOL\nconst char*(*) str(RO)\nPy_T_STRING\nconst char[](*) str(RO)\nPy_T_STRING_INPLACE\nchar(0-127) str(**)\nPy_T_CHAR\nPyObject* object(D)\nPy_T_OBJECT_EX\n(*): Zero-terminated,UTF8-encodedCstring. WithPy_T_STRINGtheCrepresentationisapointer;\nwithPy_T_STRING_INPLACEthestringisstoreddirectlyinthestructure.\n12.2. CommonObjectStructures 267\nThePython/CAPI,Release3.13.3\n(**): Stringoflength1. OnlyASCIIisaccepted.\n(RO):ImpliesPy_READONLY.\n(D): Can be deleted, in which case the pointer is set to NULL. Reading a NULL pointer raises\nAttributeError.\nAddedinversion3.12: Inpreviousversions,themacroswereonlyavailablewith#include \"structmember.h\"\nand were named without the Py_ prefix (e.g. as T_INT). The header is still available and contains the old names,\nalongwiththefollowingdeprecatedtypes:\nT_OBJECT\nLikePy_T_OBJECT_EX,butNULLisconvertedtoNone. ThisresultsinsurprisingbehaviorinPython:deleting\ntheattributeeffectivelysetsittoNone.\nT_NONE\nAlwaysNone. MustbeusedwithPy_READONLY.\nDefiningGettersandSetters\ntypePyGetSetDef\nPartoftheStableABI(includingallmembers). Structuretodefineproperty-likeaccessforatype. Seealso\ndescriptionofthePyTypeObject.tp_getsetslot.\nconstchar*name\nattributename\ngetterget\nCfunctiontogettheattribute.\nsetterset\nOptionalCfunctiontosetordeletetheattribute. IfNULL,theattributeisread-only.\nconstchar*doc\noptionaldocstring\nvoid*closure\nOptionaluserdatapointer,providingadditionaldataforgetterandsetter.\ntypedefPyObject*(*getter)(PyObject*,void*)\nPart of the Stable ABI. The get function takes one PyObject* parameter (the instance) and a user data\npointer(theassociatedclosure):\nItshouldreturnanewreferenceonsuccessorNULLwithasetexceptiononfailure.\ntypedefint(*setter)(PyObject*,PyObject*,void*)\nPartoftheStableABI.setfunctionstaketwoPyObject*parameters(theinstanceandthevaluetobeset)\nandauserdatapointer(theassociatedclosure):\nIncasetheattributeshouldbedeletedthesecondparameterisNULL.Shouldreturn0onsuccessor-1witha\nsetexceptiononfailure.\n12.3 Type Object Structures\nPerhapsoneofthemostimportantstructuresofthePythonobjectsystemisthestructurethatdefinesanewtype:\nthePyTypeObjectstructure. TypeobjectscanbehandledusinganyofthePyObject_*orPyType_*functions,\nbutdonotoffermuchthat\u2019sinterestingtomostPythonapplications. Theseobjectsarefundamentaltohowobjects\nbehave,sotheyareveryimportanttotheinterpreteritselfandtoanyextensionmodulethatimplementsnewtypes.\nTypeobjectsarefairlylargecomparedtomostofthestandardtypes. Thereasonforthesizeisthateachtypeobject\nstores a large number of values, mostly C function pointers, each of which implements a small part of the type\u2019s\nfunctionality. Thefieldsofthetypeobjectareexaminedindetailinthissection. Thefieldswillbedescribedinthe\norderinwhichtheyoccurinthestructure.\n268 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nInadditiontothefollowingquickreference,theExamplessectionprovidesat-a-glanceinsightintothemeaningand\nuseofPyTypeObject.\n12.3.1 Quick Reference\n\u201ctpslots\u201d\nPyTypeObjectSlotPage270,1 Type specialmethods/attrs InfoPage270,2\nO T D I\n<R>tp_name constchar* __name__ X X\ntp_basicsize Py_ssize_t X X X\ntp_itemsize Py_ssize_t X X\ntp_dealloc destructor X X X\ntp_vectorcall_offset Py_ssize_t X X\n(tp_getattr) getattrfunc __getattribute__,__getattr__ G\n(tp_setattr) setattrfunc __setattr__,__delattr__ G\ntp_as_async PyAsyncMethods* sub-slots %\ntp_repr reprfunc __repr__ X X X\ntp_as_number PyNumberMethods* sub-slots %\ntp_as_sequence PySequenceMethods* sub-slots %\ntp_as_mapping PyMappingMethods* sub-slots %\ntp_hash hashfunc __hash__ X G\ntp_call ternaryfunc __call__ X X\ntp_str reprfunc __str__ X X\ntp_getattro getattrofunc __getattribute__,__getattr__ X X G\ntp_setattro setattrofunc __setattr__,__delattr__ X X G\ntp_as_buffer PyBufferProcs* %\ntp_flags unsignedlong X X ?\ntp_doc constchar* __doc__ X X\ntp_traverse traverseproc X G\ntp_clear inquiry X G\ntp_richcompare richcmpfunc __lt__,__le__,__eq__,__ne__, X G\n__gt__,__ge__\n(tp_weaklistoffset) Py_ssize_t X ?\ntp_iter getiterfunc __iter__ X\ntp_iternext iternextfunc __next__ X\ntp_methods PyMethodDef [] X X\ntp_members PyMemberDef [] X\ntp_getset PyGetSetDef [] X X\ntp_base PyTypeObject* __base__ X\ntp_dict PyObject* __dict__ ?\ntp_descr_get descrgetfunc __get__ X\ntp_descr_set descrsetfunc __set__,__delete__ X\n(tp_dictoffset) Py_ssize_t X ?\ntp_init initproc __init__ X X X\ntp_alloc allocfunc X ? ?\ntp_new newfunc __new__ X X ? ?\ntp_free freefunc X X ? ?\ntp_is_gc inquiry X X\n<tp_bases> PyObject* __bases__ ~\n<tp_mro> PyObject* __mro__ ~\n[tp_cache] PyObject*\n[tp_subclasses] void* __subclasses__\n[tp_weaklist] PyObject*\n(tp_del) destructor\n[tp_version_tag] unsignedint\ncontinuesonnextpage\n12.3. TypeObjectStructures 269\nThePython/CAPI,Release3.13.3\nTable 1\u2013continuedfrompreviouspage\nPyTypeObjectSlot1 Type specialmethods/attrs Info2\nO T D I\ntp_finalize destructor __del__ X\ntp_vectorcall vectorcallfunc\n[tp_watched] unsignedchar\nsub-slots\nSlot Type specialmethods\nam_await unaryfunc __await__\nam_aiter unaryfunc __aiter__\nam_anext unaryfunc __anext__\nam_send sendfunc\nnb_add binaryfunc __add____radd__\nnb_inplace_add binaryfunc __iadd__\nnb_subtract binaryfunc __sub____rsub__\nnb_inplace_subtract binaryfunc __isub__\nnb_multiply binaryfunc __mul____rmul__\nnb_inplace_multiply binaryfunc __imul__\nnb_remainder binaryfunc __mod____rmod__\nnb_inplace_remainder binaryfunc __imod__\nnb_divmod binaryfunc __divmod__ __rdiv-\nmod__\nnb_power ternaryfunc __pow____rpow__\nnb_inplace_power ternaryfunc __ipow__\nnb_negative unaryfunc __neg__\nnb_positive unaryfunc __pos__\nnb_absolute unaryfunc __abs__\nnb_bool inquiry __bool__\nnb_invert unaryfunc __invert__\nnb_lshift binaryfunc __lshift____rlshift__\nnb_inplace_lshift binaryfunc __ilshift__\nnb_rshift binaryfunc __rshift__\n__rrshift__\nnb_inplace_rshift binaryfunc __irshift__\ncontinuesonnextpage\n1():Aslotnameinparenthesesindicatesitis(effectively)deprecated.\n<>:NamesinanglebracketsshouldbeinitiallysettoNULLandtreatedasread-only.\n[]:Namesinsquarebracketsareforinternaluseonly.\n<R>(asaprefix)meansthefieldisrequired(mustbenon-NULL).\n2Columns:\n\u201cO\u201d:setonPyBaseObject_Type\n\u201cT\u201d:setonPyType_Type\n\u201cD\u201d:default(ifslotissettoNULL)\nX - PyType_Ready sets this value if it is NULL\n~ - PyType_Ready always sets this value (it should be NULL)\n? - PyType_Ready may set this value depending on other slots\nAlso see the inheritance column (\"I\").\n\u201cI\u201d:inheritance\nX - type slot is inherited via *PyType_Ready* if defined with a *NULL* value\n% - the slots of the sub-struct are inherited individually\nG - inherited, but only in combination with other slots; see the slot's description\n? - it's complicated; see the slot's description\nNotethatsomeslotsareeffectivelyinheritedthroughthenormalattributelookupchain.\n270 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nTable 2\u2013continuedfrompreviouspage\nSlot Type specialmethods\nnb_and binaryfunc __and____rand__\nnb_inplace_and binaryfunc __iand__\nnb_xor binaryfunc __xor____rxor__\nnb_inplace_xor binaryfunc __ixor__\nnb_or binaryfunc __or____ror__\nnb_inplace_or binaryfunc __ior__\nnb_int unaryfunc __int__\nnb_reserved void*\nnb_float unaryfunc __float__\nnb_floor_divide binaryfunc __floordiv__\nnb_inplace_floor_divide binaryfunc __ifloordiv__\nnb_true_divide binaryfunc __truediv__\nnb_inplace_true_divide binaryfunc __itruediv__\nnb_index unaryfunc __index__\nnb_matrix_multiply binaryfunc __matmul__ __rmat-\nmul__\nnb_inplace_matrix_multiply binaryfunc __imatmul__\nmp_length lenfunc __len__\nmp_subscript binaryfunc __getitem__\nmp_ass_subscript objobjargproc __setitem__,\n__delitem__\nsq_length lenfunc __len__\nsq_concat binaryfunc __add__\nsq_repeat ssizeargfunc __mul__\nsq_item ssizeargfunc __getitem__\nsq_ass_item ssizeobjargproc __setitem__\n__delitem__\nsq_contains objobjproc __contains__\nsq_inplace_concat binaryfunc __iadd__\nsq_inplace_repeat ssizeargfunc __imul__\nbf_getbuffer getbufferproc()\nbf_releasebuffer releasebufferproc()\n12.3. TypeObjectStructures 271\nThePython/CAPI,Release3.13.3\nslottypedefs\ntypedef ParameterTypes ReturnType\nallocfunc PyObject*\nPyTypeObject*\nPy_ssize_t\ndestructor PyObject* void\nfreefunc void* void\ntraverseproc int\nPyObject*\nvisitproc\nvoid*\nnewfunc PyObject*\nPyTypeObject*\nPyObject*\nPyObject*\ninitproc int\nPyObject*\nPyObject*\nPyObject*\nreprfunc PyObject* PyObject*\ngetattrfunc PyObject*\nPyObject*\nconstchar*\nsetattrfunc int\nPyObject*\nconstchar*\nPyObject*\ngetattrofunc PyObject*\nPyObject*\nPyObject*\nsetattrofunc int\nPyObject*\nPyObject*\nPyObject*\ndescrgetfunc PyObject*\nPyObject*\nPyObject*\nPyObject*\ndescrsetfunc int\nPyObject*\nPyObject*\n272 PyObject* Chapter12. ObjectImplementationSupport\nhashfunc PyObject* Py_hash_t\nrichcmpfunc PyObject*\nPyObject*\nPyObject*\nint\ngetiterfunc PyObject* PyObject*\niternextfunc PyObject* PyObject*\nlenfunc PyObject* Py_ssize_t\ngetbufferproc int\nPyObject*\nPy_buffer*\nint\nreleasebufferproc void\nPyObject*\nPy_buffer*\ninquiry PyObject* int\nunaryfunc PyObject*\nPyObject*\nbinaryfunc PyObject*\nPyObject*\nPyObject*\nternaryfunc PyObject*\nPyObject*\nPyObject*\nPyObject*\nssizeargfunc PyObject*\nPyObject*\nPy_ssize_t\nssizeobjargproc int\nPyObject*\nPy_ssize_t\nPyObject*\nobjobjproc int\nPyObject*\nPyObject*\nobjobjargproc int\nPyObject*\nPyObject*\nPyObject*\nThePython/CAPI,Release3.13.3\nSeeSlotTypetypedefsbelowformoredetail.\n12.3.2 PyTypeObject Definition\nThestructuredefinitionforPyTypeObjectcanbefoundinInclude/cpython/object.h. Forconvenienceof\nreference,thisrepeatsthedefinitionfoundthere:\ntypedef struct _typeobject {\nPyObject_VAR_HEAD\nconst char *tp_name; /* For printing, in format \"<module>.<name>\" */\nPy_ssize_t tp_basicsize, tp_itemsize; /* For allocation */\n/* Methods to implement standard operations */\ndestructor tp_dealloc;\nPy_ssize_t tp_vectorcall_offset;\ngetattrfunc tp_getattr;\nsetattrfunc tp_setattr;\nPyAsyncMethods *tp_as_async; /* formerly known as tp_compare (Python 2)\nor tp_reserved (Python 3) */\nreprfunc tp_repr;\n/* Method suites for standard classes */\nPyNumberMethods *tp_as_number;\nPySequenceMethods *tp_as_sequence;\nPyMappingMethods *tp_as_mapping;\n/* More standard operations (here for binary compatibility) */\nhashfunc tp_hash;\nternaryfunc tp_call;\nreprfunc tp_str;\ngetattrofunc tp_getattro;\nsetattrofunc tp_setattro;\n/* Functions to access object as input/output buffer */\nPyBufferProcs *tp_as_buffer;\n/* Flags to define presence of optional/expanded features */\nunsigned long tp_flags;\nconst char *tp_doc; /* Documentation string */\n/* Assigned meaning in release 2.0 */\n/* call function for all accessible objects */\ntraverseproc tp_traverse;\n/* delete references to contained objects */\ninquiry tp_clear;\n/* Assigned meaning in release 2.1 */\n/* rich comparisons */\nrichcmpfunc tp_richcompare;\n/* weak reference enabler */\nPy_ssize_t tp_weaklistoffset;\n(continuesonnextpage)\n12.3. TypeObjectStructures 273\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\n/* Iterators */\ngetiterfunc tp_iter;\niternextfunc tp_iternext;\n/* Attribute descriptor and subclassing stuff */\nstruct PyMethodDef *tp_methods;\nstruct PyMemberDef *tp_members;\nstruct PyGetSetDef *tp_getset;\n// Strong reference on a heap type, borrowed reference on a static type\nstruct _typeobject *tp_base;\nPyObject *tp_dict;\ndescrgetfunc tp_descr_get;\ndescrsetfunc tp_descr_set;\nPy_ssize_t tp_dictoffset;\ninitproc tp_init;\nallocfunc tp_alloc;\nnewfunc tp_new;\nfreefunc tp_free; /* Low-level free-memory routine */\ninquiry tp_is_gc; /* For PyObject_IS_GC */\nPyObject *tp_bases;\nPyObject *tp_mro; /* method resolution order */\nPyObject *tp_cache;\nPyObject *tp_subclasses;\nPyObject *tp_weaklist;\ndestructor tp_del;\n/* Type attribute cache version tag. Added in version 2.6 */\nunsigned int tp_version_tag;\ndestructor tp_finalize;\nvectorcallfunc tp_vectorcall;\n/* bitset of which type-watchers care about this type */\nunsigned char tp_watched;\n} PyTypeObject;\n12.3.3 PyObject Slots\nThetypeobjectstructureextendsthePyVarObjectstructure. Theob_sizefieldisusedfordynamictypes(cre-\nated by type_new(), usually called from a class statement). Note that PyType_Type (the metatype) initializes\ntp_itemsize,whichmeansthatitsinstances(i.e. typeobjects)musthavetheob_sizefield.\nPy_ssize_tPyObject.ob_refcnt\nPartoftheStableABI.Thisisthetypeobject\u2019sreferencecount,initializedto1bythePyObject_HEAD_INIT\nmacro. Notethatforstaticallyallocatedtypeobjects,thetype\u2019sinstances(objectswhoseob_typepointsback\ntothetype)donot countasreferences. Butfordynamicallyallocatedtypeobjects, theinstancesdocountas\nreferences.\nInheritance:\nThisfieldisnotinheritedbysubtypes.\nPyTypeObject*PyObject.ob_type\nPartoftheStableABI.Thisisthetype\u2019stype,inotherwordsitsmetatype. Itisinitializedbytheargumenttothe\nPyObject_HEAD_INITmacro,anditsvalueshouldnormallybe&PyType_Type. However,fordynamically\nloadableextensionmodulesthatmustbeusableonWindows(atleast),thecompilercomplainsthatthisisnot\na valid initializer. Therefore, the convention is to pass NULL to the PyObject_HEAD_INIT macro and to\n274 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\ninitializethisfieldexplicitlyatthestartofthemodule\u2019sinitializationfunction,beforedoinganythingelse. This\nistypicallydonelikethis:\nFoo_Type.ob_type = &PyType_Type;\nThisshouldbedonebeforeanyinstancesofthetypearecreated. PyType_Ready()checksifob_typeis\nNULL,andifso,initializesittotheob_typefieldofthebaseclass. PyType_Ready()willnotchangethis\nfieldifitisnon-zero.\nInheritance:\nThisfieldisinheritedbysubtypes.\n12.3.4 PyVarObject Slots\nPy_ssize_tPyVarObject.ob_size\nPartoftheStableABI.Forstaticallyallocatedtypeobjects,thisshouldbeinitializedtozero. Fordynamically\nallocatedtypeobjects,thisfieldhasaspecialinternalmeaning.\nThisfieldshouldbeaccessedusingthePy_SIZE()andPy_SET_SIZE()macros.\nInheritance:\nThisfieldisnotinheritedbysubtypes.\n12.3.5 PyTypeObject Slots\nEachslothasasectiondescribinginheritance. IfPyType_Ready()maysetavaluewhenthefieldissettoNULL\nthentherewillalsobea\u201cDefault\u201dsection. (NotethatmanyfieldssetonPyBaseObject_TypeandPyType_Type\neffectivelyactasdefaults.)\nconstchar*PyTypeObject.tp_name\nPointertoaNUL-terminatedstringcontainingthenameofthetype. Fortypesthatareaccessibleasmodule\nglobals,thestringshouldbethefullmodulename,followedbyadot,followedbythetypename;forbuilt-in\ntypes, itshouldbejustthetypename. Ifthemoduleisasubmoduleofapackage, thefullpackagenameis\npartofthefullmodulename. Forexample,atypenamedTdefinedinmoduleMinsubpackageQinpackage\nPshouldhavethetp_nameinitializer\"P.Q.M.T\".\nFordynamicallyallocatedtypeobjects,thisshouldjustbethetypename,andthemodulenameexplicitlystored\ninthetypedictasthevalueforkey'__module__'.\nFor statically allocated type objects, the tp_name field should contain a dot. Everything before the last dot\nis made accessible as the __module__ attribute, and everything after the last dot is made accessible as the\n__name__attribute.\nIf no dot is present, the entire tp_name field is made accessible as the __name__ attribute, and the\n__module__attributeisundefined(unlessexplicitlysetinthedictionary, asexplainedabove). Thismeans\nyour type will be impossible to pickle. Additionally, it will not be listed in module documentations created\nwithpydoc.\nThis field must not be NULL. It is the only required field in PyTypeObject() (other than potentially\ntp_itemsize).\nInheritance:\nThisfieldisnotinheritedbysubtypes.\nPy_ssize_tPyTypeObject.tp_basicsize\nPy_ssize_tPyTypeObject.tp_itemsize\nThesefieldsallowcalculatingthesizeinbytesofinstancesofthetype.\nThere are two kinds of types: types with fixed-length instances have a zero tp_itemsize field, types\nwith variable-length instances have a non-zero tp_itemsize field. For a type with fixed-length instances,\n12.3. TypeObjectStructures 275\nThePython/CAPI,Release3.13.3\nall instances have the same size, given in tp_basicsize. (Exceptions to this rule can be made using\nPyUnstable_Object_GC_NewWithExtraData().)\nForatypewithvariable-lengthinstances,theinstancesmusthaveanob_sizefield,andtheinstancesizeis\ntp_basicsizeplusNtimestp_itemsize,whereNisthe\u201clength\u201doftheobject.\nFunctions like PyObject_NewVar() will take the value of N as an argument, and store in the instance\u2019s\nob_sizefield. Notethattheob_sizefieldmaylaterbeusedforotherpurposes. Forexample,intinstances\nuse the bits of ob_size in an implementation-defined way; the underlying storage and its size should be\naccessedusingPyLong_Export().\n(cid:174) Note\nTheob_sizefieldshouldbeaccessedusingthePy_SIZE()andPy_SET_SIZE()macros.\nAlso,thepresenceofanob_sizefieldintheinstancelayoutdoesn\u2019tmeanthattheinstancestructureisvariable-\nlength. Forexample,thelisttypehasfixed-lengthinstances,yetthoseinstanceshaveaob_sizefield. (As\nwithint,avoidreadinglists\u2019ob_sizedirectly. CallPyList_Size()instead.)\nThetp_basicsizeincludessizeneededfordataofthetype\u2019stp_base,plusanyextradataneededbyeach\ninstance.\nThecorrectwaytosettp_basicsizeistousethesizeofoperatoronthestructusedtodeclaretheinstance\nlayout. Thisstructmustincludethestructusedtodeclarethebasetype. Inotherwords,tp_basicsizemust\nbegreaterthanorequaltothebase\u2019stp_basicsize.\nSince every type is a subtype of object, this struct must include PyObject or PyVarObject (depend-\ningonwhetherob_sizeshouldbeincluded). TheseareusuallydefinedbythemacroPyObject_HEADor\nPyObject_VAR_HEAD,respectively.\nThebasicsizedoesnotincludetheGCheadersize,asthatheaderisnotpartofPyObject_HEAD.\nFor cases where struct used to declare the base type is unknown, see PyType_Spec.basicsize and\nPyType_FromMetaclass().\nNotesaboutalignment:\n\u2022 tp_basicsizemustbeamultipleof_Alignof(PyObject). Whenusingsizeofonastructthat\nincludesPyObject_HEAD,asrecommended,thecompilerensuresthis. WhennotusingaCstruct,\norwhenusingcompilerextensionslike__attribute__((packed)),itisuptoyou.\n\u2022 Ifthevariableitemsrequireaparticularalignment,tp_basicsizeandtp_itemsizemusteachbea\nmultipleofthatalignment. Forexample,ifatype\u2019svariablepartstoresadouble,itisyourresponsibility\nthatbothfieldsareamultipleof_Alignof(double).\nInheritance:\nThesefieldsareinheritedseparatelybysubtypes. (Thatis, ifthefieldissettozero, PyType_Ready()will\ncopythevaluefromthebasetype,indicatingthattheinstancesdonotneedadditionalstorage.)\nIf the base type has a non-zero tp_itemsize, it is generally not safe to set tp_itemsize to a different\nnon-zerovalueinasubtype(thoughthisdependsontheimplementationofthebasetype).\ndestructorPyTypeObject.tp_dealloc\nApointertotheinstancedestructorfunction. Thisfunctionmustbedefinedunlessthetypeguaranteesthat\nitsinstanceswillneverbedeallocated(asisthecaseforthesingletonsNoneandEllipsis). Thefunction\nsignatureis:\nvoid tp_dealloc(PyObject *self);\nThedestructorfunctioniscalledbythePy_DECREF()andPy_XDECREF()macroswhenthenewreference\ncountiszero. Atthispoint,theinstanceisstillinexistence,buttherearenoreferencestoit. Thedestructor\nfunction should free all references which the instance owns, free all memory buffers owned by the instance\n(usingthefreeingfunctioncorrespondingtotheallocationfunctionusedtoallocatethebuffer), andcallthe\n276 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\ntype\u2019stp_freefunction. Ifthetypeisnotsubtypable(doesn\u2019thavethePy_TPFLAGS_BASETYPEflagbitset),\nitispermissibletocalltheobjectdeallocatordirectlyinsteadofviatp_free. Theobjectdeallocatorshould\nbe the one used to allocate the instance; this is normally PyObject_Del() if the instance was allocated\nusingPyObject_New orPyObject_NewVar,orPyObject_GC_Del()iftheinstancewasallocatedusing\nPyObject_GC_NeworPyObject_GC_NewVar.\nIfthetypesupportsgarbagecollection(hasthePy_TPFLAGS_HAVE_GCflagbitset),thedestructorshouldcall\nPyObject_GC_UnTrack()beforeclearinganymemberfields.\nstatic void foo_dealloc(foo_object *self) {\nPyObject_GC_UnTrack(self);\nPy_CLEAR(self->ref);\nPy_TYPE(self)->tp_free((PyObject *)self);\n}\nFinally, if the type is heap allocated (Py_TPFLAGS_HEAPTYPE), the deallocator should release the owned\nreferencetoitstypeobject(viaPy_DECREF())aftercallingthetypedeallocator. Inordertoavoiddangling\npointers,therecommendedwaytoachievethisis:\nstatic void foo_dealloc(foo_object *self) {\nPyTypeObject *tp = Py_TYPE(self);\n// free references and buffers here\ntp->tp_free(self);\nPy_DECREF(tp);\n}\n(cid:193) Warning\nIna garbagecollectedPython, tp_dealloc maybe calledfromanyPythonthread, notjustthethread\nwhichcreatedtheobject(iftheobjectbecomespartofarefcountcycle,thatcyclemightbecollectedbya\ngarbagecollectiononanythread). ThisisnotaproblemforPythonAPIcalls,sincethethreadonwhich\ntp_deallociscalledwillowntheGlobalInterpreterLock(GIL).However,iftheobjectbeingdestroyed\ninturndestroysobjectsfromsomeotherCorC++library,careshouldbetakentoensurethatdestroying\nthoseobjectsonthethreadwhichcalledtp_deallocwillnotviolateanyassumptionsofthelibrary.\nInheritance:\nThisfieldisinheritedbysubtypes.\nPy_ssize_tPyTypeObject.tp_vectorcall_offset\nAnoptionaloffsettoaper-instancefunctionthatimplementscallingtheobjectusingthevectorcallprotocol,a\nmoreefficientalternativeofthesimplertp_call.\nThisfieldisonlyusediftheflagPy_TPFLAGS_HAVE_VECTORCALLisset. Ifso,thismustbeapositiveinteger\ncontainingtheoffsetintheinstanceofavectorcallfuncpointer.\nThe vectorcallfunc pointer may be NULL, in which case the instance behaves as if\nPy_TPFLAGS_HAVE_VECTORCALLwasnotset: callingtheinstancefallsbacktotp_call.\nAnyclassthatsetsPy_TPFLAGS_HAVE_VECTORCALLmustalsosettp_callandmakesureitsbehaviouris\nconsistentwiththevectorcallfuncfunction. Thiscanbedonebysettingtp_calltoPyVectorcall_Call().\nChanged inversion3.8: Beforeversion3.8, this slotwasnamed tp_print. In Python2.x, itwasused for\nprintingtoafile. InPython3.0to3.7,itwasunused.\nChangedinversion3.12: Beforeversion3.12,itwasnotrecommendedformutableheaptypestoimplement\nthevectorcallprotocol. Whenausersets__call__inPythoncode,onlytp_callisupdated,likelymakingit\ninconsistentwiththevectorcallfunction. Since3.12,setting__call__willdisablevectorcalloptimizationby\nclearingthePy_TPFLAGS_HAVE_VECTORCALLflag.\nInheritance:\n12.3. TypeObjectStructures 277\nThePython/CAPI,Release3.13.3\nThisfieldisalwaysinherited. However,thePy_TPFLAGS_HAVE_VECTORCALLflagisnotalwaysinherited. If\nit\u2019snotset,thenthesubclasswon\u2019tusevectorcall,exceptwhenPyVectorcall_Call()isexplicitlycalled.\ngetattrfuncPyTypeObject.tp_getattr\nAnoptionalpointertotheget-attribute-stringfunction.\nThisfieldisdeprecated. Whenitisdefined,itshouldpointtoafunctionthatactsthesameasthetp_getattro\nfunction,buttakingaCstringinsteadofaPythonstringobjecttogivetheattributename.\nInheritance:\nGroup: tp_getattr,tp_getattro\nThis field is inherited by subtypes together with tp_getattro: a subtype inherits both tp_getattr and\ntp_getattrofromitsbasetypewhenthesubtype\u2019stp_getattrandtp_getattroarebothNULL.\nsetattrfuncPyTypeObject.tp_setattr\nAnoptionalpointertothefunctionforsettinganddeletingattributes.\nThisfieldisdeprecated. Whenitisdefined,itshouldpointtoafunctionthatactsthesameasthetp_setattro\nfunction,buttakingaCstringinsteadofaPythonstringobjecttogivetheattributename.\nInheritance:\nGroup: tp_setattr,tp_setattro\nThis field is inherited by subtypes together with tp_setattro: a subtype inherits both tp_setattr and\ntp_setattrofromitsbasetypewhenthesubtype\u2019stp_setattrandtp_setattroarebothNULL.\nPyAsyncMethods*PyTypeObject.tp_as_async\nPointertoanadditionalstructurethatcontainsfieldsrelevantonlytoobjectswhichimplementawaitableand\nasynchronousiteratorprotocolsattheC-level. SeeAsyncObjectStructuresfordetails.\nAddedinversion3.5: Formerlyknownastp_compareandtp_reserved.\nInheritance:\nThetp_as_asyncfieldisnotinherited,butthecontainedfieldsareinheritedindividually.\nreprfuncPyTypeObject.tp_repr\nAnoptionalpointertoafunctionthatimplementsthebuilt-infunctionrepr().\nThesignatureisthesameasforPyObject_Repr():\nPyObject *tp_repr(PyObject *self);\nThefunctionmustreturnastringoraUnicodeobject. Ideally,thisfunctionshouldreturnastringthat,when\npassedtoeval(),givenasuitableenvironment,returnsanobjectwiththesamevalue. Ifthisisnotfeasible,\nitshouldreturnastringstartingwith'<'andendingwith'>'fromwhichboththetypeandthevalueofthe\nobjectcanbededuced.\nInheritance:\nThisfieldisinheritedbysubtypes.\nDefault:\nWhenthisfieldisnotset,astringoftheform<%s object at %p>isreturned,where%sisreplacedbythe\ntypename,and%pbytheobject\u2019smemoryaddress.\nPyNumberMethods*PyTypeObject.tp_as_number\nPointer to an additional structure that contains fields relevant only to objects which implement the number\nprotocol. ThesefieldsaredocumentedinNumberObjectStructures.\nInheritance:\nThetp_as_numberfieldisnotinherited,butthecontainedfieldsareinheritedindividually.\n278 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nPySequenceMethods*PyTypeObject.tp_as_sequence\nPointertoanadditionalstructurethatcontainsfieldsrelevantonlytoobjectswhichimplementthesequence\nprotocol. ThesefieldsaredocumentedinSequenceObjectStructures.\nInheritance:\nThetp_as_sequencefieldisnotinherited,butthecontainedfieldsareinheritedindividually.\nPyMappingMethods*PyTypeObject.tp_as_mapping\nPointer to an additional structure that contains fields relevant only to objects which implement the mapping\nprotocol. ThesefieldsaredocumentedinMappingObjectStructures.\nInheritance:\nThetp_as_mappingfieldisnotinherited,butthecontainedfieldsareinheritedindividually.\nhashfuncPyTypeObject.tp_hash\nAnoptionalpointertoafunctionthatimplementsthebuilt-infunctionhash().\nThesignatureisthesameasforPyObject_Hash():\nPy_hash_t tp_hash(PyObject *);\nThevalue-1shouldnotbereturnedasanormalreturnvalue;whenanerroroccursduringthecomputation\nofthehashvalue,thefunctionshouldsetanexceptionandreturn-1.\nWhenthisfieldisnotset(andtp_richcompareisnotset),anattempttotakethehashoftheobjectraises\nTypeError. ThisisthesameassettingittoPyObject_HashNotImplemented().\nThis field can be set explicitly to PyObject_HashNotImplemented() to block inheritance of the hash\nmethodfromaparenttype. Thisisinterpretedastheequivalentof__hash__ = NoneatthePythonlevel,\ncausingisinstance(o, collections.Hashable)tocorrectlyreturnFalse. Notethattheconverseis\nalsotrue-setting__hash__ = NoneonaclassatthePythonlevelwillresultinthetp_hashslotbeingset\ntoPyObject_HashNotImplemented().\nInheritance:\nGroup: tp_hash,tp_richcompare\nThis field is inherited by subtypes together with tp_richcompare: a subtype inherits both of\ntp_richcompareandtp_hash,whenthesubtype\u2019stp_richcompareandtp_hasharebothNULL.\nDefault:\nPyBaseObject_TypeusesPyObject_GenericHash().\nternaryfuncPyTypeObject.tp_call\nAnoptionalpointertoafunctionthatimplementscallingtheobject. ThisshouldbeNULLiftheobjectisnot\ncallable. ThesignatureisthesameasforPyObject_Call():\nPyObject *tp_call(PyObject *self, PyObject *args, PyObject *kwargs);\nInheritance:\nThisfieldisinheritedbysubtypes.\nreprfuncPyTypeObject.tp_str\nAnoptionalpointertoafunctionthatimplementsthebuilt-inoperationstr(). (Notethatstrisatypenow,\nandstr()callstheconstructorforthattype. ThisconstructorcallsPyObject_Str()todotheactualwork,\nandPyObject_Str()willcallthishandler.)\nThesignatureisthesameasforPyObject_Str():\nPyObject *tp_str(PyObject *self);\n12.3. TypeObjectStructures 279\nThePython/CAPI,Release3.13.3\nThe function must return a string or a Unicodeobject. It should be a \u201cfriendly\u201d string representation ofthe\nobject,asthisistherepresentationthatwillbeused,amongotherthings,bytheprint()function.\nInheritance:\nThisfieldisinheritedbysubtypes.\nDefault:\nWhenthisfieldisnotset,PyObject_Repr()iscalledtoreturnastringrepresentation.\ngetattrofuncPyTypeObject.tp_getattro\nAnoptionalpointertotheget-attributefunction.\nThesignatureisthesameasforPyObject_GetAttr():\nPyObject *tp_getattro(PyObject *self, PyObject *attr);\nIt is usually convenient to set this field to PyObject_GenericGetAttr(), which implements the normal\nwayoflookingforobjectattributes.\nInheritance:\nGroup: tp_getattr,tp_getattro\nThis field is inherited by subtypes together with tp_getattr: a subtype inherits both tp_getattr and\ntp_getattrofromitsbasetypewhenthesubtype\u2019stp_getattrandtp_getattroarebothNULL.\nDefault:\nPyBaseObject_TypeusesPyObject_GenericGetAttr().\nsetattrofuncPyTypeObject.tp_setattro\nAnoptionalpointertothefunctionforsettinganddeletingattributes.\nThesignatureisthesameasforPyObject_SetAttr():\nint tp_setattro(PyObject *self, PyObject *attr, PyObject *value);\nInaddition,settingvaluetoNULLtodeleteanattributemustbesupported. Itisusuallyconvenienttosetthis\nfieldtoPyObject_GenericSetAttr(),whichimplementsthenormalwayofsettingobjectattributes.\nInheritance:\nGroup: tp_setattr,tp_setattro\nThis field is inherited by subtypes together with tp_setattr: a subtype inherits both tp_setattr and\ntp_setattrofromitsbasetypewhenthesubtype\u2019stp_setattrandtp_setattroarebothNULL.\nDefault:\nPyBaseObject_TypeusesPyObject_GenericSetAttr().\nPyBufferProcs*PyTypeObject.tp_as_buffer\nPointertoanadditionalstructurethatcontainsfieldsrelevantonlytoobjectswhichimplementthebufferin-\nterface. ThesefieldsaredocumentedinBufferObjectStructures.\nInheritance:\nThetp_as_bufferfieldisnotinherited,butthecontainedfieldsareinheritedindividually.\nunsignedlongPyTypeObject.tp_flags\nThis field is a bit mask of various flags. Some flags indicate variant semantics for certain situations; oth-\ners are used to indicate that certain fields in the type object (or in the extension structures referenced via\ntp_as_number, tp_as_sequence, tp_as_mapping, andtp_as_buffer)thatwerehistoricallynotal-\nways present are valid; if such a flag bit is clear, the type fields it guards must not be accessed and must be\nconsideredtohaveazeroorNULLvalueinstead.\nInheritance:\n280 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nInheritanceofthisfieldiscomplicated. Mostflagbitsareinheritedindividually,i.e. ifthebasetypehasaflag\nbitset,thesubtypeinheritsthisflagbit. Theflagbitsthatpertaintoextensionstructuresarestrictlyinheritedif\ntheextensionstructureisinherited,i.e. thebasetype\u2019svalueoftheflagbitiscopiedintothesubtypetogether\nwithapointertotheextensionstructure. ThePy_TPFLAGS_HAVE_GC flagbitisinheritedtogetherwiththe\ntp_traverseandtp_clear fields, i.e. ifthePy_TPFLAGS_HAVE_GC flagbitisclearinthesubtypeand\nthetp_traverseandtp_clearfieldsinthesubtypeexistandhaveNULLvalues. .. XXXaremostflagbits\nreallyinheritedindividually?\nDefault:\nPyBaseObject_TypeusesPy_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE.\nBitMasks:\nThefollowingbitmasksarecurrentlydefined; thesecanbeORedtogetherusingthe|operatortoformthe\nvalueofthetp_flagsfield. ThemacroPyType_HasFeature()takesatypeandaflagsvalue, tpandf,\nandcheckswhethertp->tp_flags & fisnon-zero.\nPy_TPFLAGS_HEAPTYPE\nThisbitissetwhenthetypeobjectitselfisallocatedontheheap,forexample,typescreateddynamically\nusingPyType_FromSpec(). Inthiscase,theob_typefieldofitsinstancesisconsideredareference\nto the type, and the type object is INCREF\u2019ed when a new instance is created, and DECREF\u2019ed when\nan instance is destroyed (this does not apply to instances of subtypes; only the type referenced by the\ninstance\u2019sob_typegetsINCREF\u2019edorDECREF\u2019ed). Heaptypesshouldalsosupportgarbagecollection\nastheycanformareferencecyclewiththeirownmoduleobject.\nInheritance:\n???\nPy_TPFLAGS_BASETYPE\nThisbitissetwhenthetypecanbeusedasthebasetypeofanothertype. Ifthisbitisclear, thetype\ncannotbesubtyped(similartoa\u201cfinal\u201dclassinJava).\nInheritance:\n???\nPy_TPFLAGS_READY\nThisbitissetwhenthetypeobjecthasbeenfullyinitializedbyPyType_Ready().\nInheritance:\n???\nPy_TPFLAGS_READYING\nThisbitissetwhilePyType_Ready()isintheprocessofinitializingthetypeobject.\nInheritance:\n???\nPy_TPFLAGS_HAVE_GC\nThisbitissetwhentheobjectsupportsgarbagecollection. Ifthisbitisset, instancesmustbecreated\nusing PyObject_GC_New and destroyed using PyObject_GC_Del(). More information in section\nSupportingCyclicGarbageCollection. ThisbitalsoimpliesthattheGC-relatedfieldstp_traverseand\ntp_cleararepresentinthetypeobject.\nInheritance:\nGroup: Py_TPFLAGS_HAVE_GC,tp_traverse,tp_clear\nThePy_TPFLAGS_HAVE_GCflagbitisinheritedtogetherwiththetp_traverseandtp_clearfields,\ni.e. ifthePy_TPFLAGS_HAVE_GCflagbitisclearinthesubtypeandthetp_traverseandtp_clear\nfieldsinthesubtypeexistandhaveNULLvalues.\n12.3. TypeObjectStructures 281\nThePython/CAPI,Release3.13.3\nPy_TPFLAGS_DEFAULT\nThis is a bitmask of all the bits that pertain to the existence of certain fields in the\ntype object and its extension structures. Currently, it includes the following bits:\nPy_TPFLAGS_HAVE_STACKLESS_EXTENSION.\nInheritance:\n???\nPy_TPFLAGS_METHOD_DESCRIPTOR\nThisbitindicatesthatobjectsbehavelikeunboundmethods.\nIfthisflagissetfortype(meth),then:\n\u2022 meth.__get__(obj, cls)(*args, **kwds) (with obj not None) must be equivalent to\nmeth(obj, *args, **kwds).\n\u2022 meth.__get__(None, cls)(*args, **kwds) must be equivalent to meth(*args,\n**kwds).\nThisflagenablesanoptimizationfortypicalmethodcallslikeobj.meth(): itavoidscreatingatempo-\nrary\u201cboundmethod\u201dobjectforobj.meth.\nAddedinversion3.8.\nInheritance:\nThisflagisneverinheritedbytypeswithoutthePy_TPFLAGS_IMMUTABLETYPEflagset. Forextension\ntypes,itisinheritedwhenevertp_descr_getisinherited.\nPy_TPFLAGS_MANAGED_DICT\nThisbitindicatesthatinstancesoftheclasshavea~object.__dict__attribute,andthatthespaceforthe\ndictionaryismanagedbytheVM.\nIfthisflagisset,Py_TPFLAGS_HAVE_GCshouldalsobeset.\nThetypetraversefunctionmustcallPyObject_VisitManagedDict()anditsclearfunctionmustcall\nPyObject_ClearManagedDict().\nAddedinversion3.12.\nInheritance:\nThisflagisinheritedunlessthetp_dictoffsetfieldissetinasuperclass.\nPy_TPFLAGS_MANAGED_WEAKREF\nThisbitindicatesthatinstancesoftheclassshouldbeweaklyreferenceable.\nAddedinversion3.12.\nInheritance:\nThisflagisinheritedunlessthetp_weaklistoffsetfieldissetinasuperclass.\nPy_TPFLAGS_ITEMS_AT_END\nOnlyusablewithvariable-sizetypes,i.e. oneswithnon-zerotp_itemsize.\nIndicatesthatthevariable-sizedportionofaninstanceofthistypeisattheendoftheinstance\u2019smemory\narea,atanoffsetofPy_TYPE(obj)->tp_basicsize(whichmaybedifferentineachsubclass).\nWhen setting this flag, be sure that all superclasses either use this memory layout, or are not variable-\nsized. Pythondoesnotcheckthis.\nAddedinversion3.12.\nInheritance:\nThisflagisinherited.\n282 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nPy_TPFLAGS_LONG_SUBCLASS\nPy_TPFLAGS_LIST_SUBCLASS\nPy_TPFLAGS_TUPLE_SUBCLASS\nPy_TPFLAGS_BYTES_SUBCLASS\nPy_TPFLAGS_UNICODE_SUBCLASS\nPy_TPFLAGS_DICT_SUBCLASS\nPy_TPFLAGS_BASE_EXC_SUBCLASS\nPy_TPFLAGS_TYPE_SUBCLASS\nTheseflagsareusedbyfunctionssuchasPyLong_Check()toquicklydetermineifatypeisasubclass\nofabuilt-intype;suchspecificchecksarefasterthanagenericcheck,likePyObject_IsInstance().\nCustomtypesthatinheritfrombuilt-insshouldhavetheirtp_flagssetappropriately,orthecodethat\ninteractswithsuchtypeswillbehavedifferentlydependingonwhatkindofcheckisused.\nPy_TPFLAGS_HAVE_FINALIZE\nThisbitissetwhenthetp_finalizeslotispresentinthetypestructure.\nAddedinversion3.4.\nDeprecated since version 3.8: This flag isn\u2019t necessary anymore, as the interpreter assumes the\ntp_finalizeslotisalwayspresentinthetypestructure.\nPy_TPFLAGS_HAVE_VECTORCALL\nThis bit is set when the class implements the vectorcall protocol. See tp_vectorcall_offset for\ndetails.\nInheritance:\nThisbitisinheritediftp_callisalsoinherited.\nAddedinversion3.9.\nChangedinversion3.12: Thisflagisnowremovedfromaclasswhentheclass\u2019s__call__()method\nisreassigned.\nThisflagcannowbeinheritedbymutableclasses.\nPy_TPFLAGS_IMMUTABLETYPE\nThisbitissetfortypeobjectsthatareimmutable: typeattributescannotbesetnordeleted.\nPyType_Ready()automaticallyappliesthisflagtostatictypes.\nInheritance:\nThisflagisnotinherited.\nAddedinversion3.10.\nPy_TPFLAGS_DISALLOW_INSTANTIATION\nDisallowcreatinginstancesofthetype: settp_new toNULLanddon\u2019tcreatethe__new__keyinthe\ntypedictionary.\nThe flag must be set before creating the type, not after. For example, it must be set before\nPyType_Ready()iscalledonthetype.\nTheflagissetautomaticallyonstatictypesiftp_baseisNULLor&PyBaseObject_Typeandtp_new\nisNULL.\nInheritance:\nThisflagisnotinherited. However,subclasseswillnotbeinstantiableunlesstheyprovideanon-NULL\ntp_new(whichisonlypossibleviatheCAPI).\n12.3. TypeObjectStructures 283\nThePython/CAPI,Release3.13.3\n(cid:174) Note\nTodisallowinstantiatingaclassdirectlybutallowinstantiatingitssubclasses(e.g. foranabstractbase\nclass),donotusethisflag. Instead,maketp_newonlysucceedforsubclasses.\nAddedinversion3.10.\nPy_TPFLAGS_MAPPING\nThis bit indicates that instances of the class may match mapping patterns when used as the subject of\namatchblock. Itisautomaticallysetwhenregisteringorsubclassingcollections.abc.Mapping,\nandunsetwhenregisteringcollections.abc.Sequence.\n(cid:174) Note\nPy_TPFLAGS_MAPPING andPy_TPFLAGS_SEQUENCEaremutuallyexclusive;itisanerrortoen-\nablebothflagssimultaneously.\nInheritance:\nThisflagisinheritedbytypesthatdonotalreadysetPy_TPFLAGS_SEQUENCE.\n(cid:181) Seealso\nPEP634\u2013StructuralPatternMatching: Specification\nAddedinversion3.10.\nPy_TPFLAGS_SEQUENCE\nThisbitindicatesthatinstancesoftheclassmaymatchsequencepatternswhenusedasthesubjectof\namatchblock. Itisautomaticallysetwhenregisteringorsubclassingcollections.abc.Sequence,\nandunsetwhenregisteringcollections.abc.Mapping.\n(cid:174) Note\nPy_TPFLAGS_MAPPING andPy_TPFLAGS_SEQUENCEaremutuallyexclusive;itisanerrortoen-\nablebothflagssimultaneously.\nInheritance:\nThisflagisinheritedbytypesthatdonotalreadysetPy_TPFLAGS_MAPPING.\n(cid:181) Seealso\nPEP634\u2013StructuralPatternMatching: Specification\nAddedinversion3.10.\nPy_TPFLAGS_VALID_VERSION_TAG\nInternal. Donotsetorunsetthisflag. ToindicatethataclasshaschangedcallPyType_Modified()\n(cid:193) Warning\nThisflagispresentinheaderfiles,butisnotbeused. ItwillberemovedinafutureversionofCPython\n284 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nconstchar*PyTypeObject.tp_doc\nAnoptionalpointertoaNUL-terminatedCstringgivingthedocstringforthistypeobject. Thisisexposedas\nthe__doc__attributeonthetypeandinstancesofthetype.\nInheritance:\nThisfieldisnotinheritedbysubtypes.\ntraverseprocPyTypeObject.tp_traverse\nAn optional pointer to a traversal function for the garbage collector. This is only used if the\nPy_TPFLAGS_HAVE_GCflagbitisset. Thesignatureis:\nint tp_traverse(PyObject *self, visitproc visit, void *arg);\nMoreinformationaboutPython\u2019sgarbagecollectionschemecanbefoundinsectionSupportingCyclicGarbage\nCollection.\nThetp_traversepointerisusedbythegarbagecollectortodetectreferencecycles. Atypicalimplemen-\ntation of a tp_traverse function simply calls Py_VISIT() on each of the instance\u2019s members that are\nPythonobjectsthattheinstanceowns. Forexample,thisisfunctionlocal_traverse()fromthe_thread\nextensionmodule:\nstatic int\nlocal_traverse(localobject *self, visitproc visit, void *arg)\n{\nPy_VISIT(self->args);\nPy_VISIT(self->kw);\nPy_VISIT(self->dict);\nreturn 0;\n}\nNote that Py_VISIT() is called only on those members that can participate in reference cycles. Although\nthereisalsoaself->keymember,itcanonlybeNULLoraPythonstringandthereforecannotbepartofa\nreferencecycle.\nOntheotherhand,evenifyouknowamembercanneverbepartofacycle,asadebuggingaidyoumaywant\ntovisititanywayjustsothegcmodule\u2019sget_referents()functionwillincludeit.\nHeaptypes(Py_TPFLAGS_HEAPTYPE)mustvisittheirtypewith:\nPy_VISIT(Py_TYPE(self));\nItisonlyneededsincePython3.9. TosupportPython3.8andolder,thislinemustbeconditional:\n#if PY_VERSION_HEX >= 0x03090000\nPy_VISIT(Py_TYPE(self));\n#endif\nIf the Py_TPFLAGS_MANAGED_DICT bit is set in the tp_flags field, the traverse function must call\nPyObject_VisitManagedDict()likethis:\nPyObject_VisitManagedDict((PyObject*)self, visit, arg);\n(cid:193) Warning\nWhenimplementingtp_traverse,onlythemembersthattheinstanceowns(byhavingstrongreferences\ntothem)mustbevisited. Forinstance,ifanobjectsupportsweakreferencesviathetp_weaklistslot,\nthepointersupportingthelinkedlist(whattp_weaklistpointsto)mustnotbevisitedastheinstancedoes\nnotdirectlyowntheweakreferencestoitself(theweakreferencelististheretosupporttheweakreference\n12.3. TypeObjectStructures 285\nThePython/CAPI,Release3.13.3\nmachinery, but the instance has no strong reference to the elements inside it, as they are allowed to be\nremovedeveniftheinstanceisstillalive).\nNotethatPy_VISIT()requiresthevisit andargparameterstolocal_traverse()tohavethesespecific\nnames;don\u2019tnamethemjustanything.\nInstancesofheap-allocatedtypesholdareferencetotheirtype. Theirtraversalfunctionmustthereforeeither\nvisitPy_TYPE(self),ordelegatethisresponsibilitybycallingtp_traverseofanotherheap-allocatedtype\n(suchasaheap-allocatedsuperclass). Iftheydonot,thetypeobjectmaynotbegarbage-collected.\nChanged in version 3.9: Heap-allocated types are expected to visit Py_TYPE(self) in tp_traverse. In\nearlierversionsofPython,duetobug40217,doingthismayleadtocrashesinsubclasses.\nInheritance:\nGroup: Py_TPFLAGS_HAVE_GC,tp_traverse,tp_clear\nThisfieldisinheritedbysubtypestogetherwithtp_clearandthePy_TPFLAGS_HAVE_GCflagbit: theflag\nbit,tp_traverse,andtp_clearareallinheritedfromthebasetypeiftheyareallzerointhesubtype.\ninquiryPyTypeObject.tp_clear\nAn optional pointer to a clear function for the garbage collector. This is only used if the\nPy_TPFLAGS_HAVE_GCflagbitisset. Thesignatureis:\nint tp_clear(PyObject *);\nThetp_clearmemberfunctionisusedtobreakreferencecyclesincyclicgarbagedetectedbythegarbage\ncollector. Takentogether,alltp_clearfunctionsinthesystemmustcombinetobreakallreferencecycles.\nThisissubtle,andifinanydoubtsupplyatp_clearfunction. Forexample,thetupletypedoesnotimplement\natp_clearfunction,becauseit\u2019spossibletoprovethatnoreferencecyclecanbecomposedentirelyoftuples.\nThereforethetp_clearfunctionsofothertypesmustbesufficienttobreakanycyclecontainingatuple. This\nisn\u2019timmediatelyobvious,andthere\u2019srarelyagoodreasontoavoidimplementingtp_clear.\nImplementations of tp_clear should drop the instance\u2019s references to those of its members that may be\nPythonobjects,andsetitspointerstothosememberstoNULL,asinthefollowingexample:\nstatic int\nlocal_clear(localobject *self)\n{\nPy_CLEAR(self->key);\nPy_CLEAR(self->args);\nPy_CLEAR(self->kw);\nPy_CLEAR(self->dict);\nreturn 0;\n}\nThePy_CLEAR()macroshouldbeused,becauseclearingreferencesisdelicate: thereferencetothecontained\nobjectmustnotbereleased(viaPy_DECREF())untilafterthepointertothecontainedobjectissettoNULL.\nThisisbecausereleasingthereferencemaycausethecontainedobjecttobecometrash,triggeringachainof\nreclamationactivitythatmayincludeinvokingarbitraryPythoncode(duetofinalizers,orweakrefcallbacks,\nassociatedwiththecontainedobject). Ifit\u2019spossibleforsuchcodetoreferenceself again,it\u2019simportantthat\nthepointertothecontainedobjectbeNULLatthattime,sothatself knowsthecontainedobjectcannolonger\nbeused. ThePy_CLEAR()macroperformstheoperationsinasafeorder.\nIf the Py_TPFLAGS_MANAGED_DICT bit is set in the tp_flags field, the traverse function must call\nPyObject_ClearManagedDict()likethis:\nPyObject_ClearManagedDict((PyObject*)self);\nNote that tp_clear is not always called before an instance is deallocated. For example, when reference\ncountingisenoughtodeterminethatanobjectisnolongerused,thecyclicgarbagecollectorisnotinvolved\n286 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nandtp_deallociscalleddirectly.\nBecause the goal of tp_clear functions is to break reference cycles, it\u2019s not necessary to clear contained\nobjectslikePythonstringsorPythonintegers,whichcan\u2019tparticipateinreferencecycles. Ontheotherhand,it\nmaybeconvenienttoclearallcontainedPythonobjects,andwritethetype\u2019stp_deallocfunctiontoinvoke\ntp_clear.\nMoreinformationaboutPython\u2019sgarbagecollectionschemecanbefoundinsectionSupportingCyclicGarbage\nCollection.\nInheritance:\nGroup: Py_TPFLAGS_HAVE_GC,tp_traverse,tp_clear\nThisfieldisinheritedbysubtypestogetherwithtp_traverseandthePy_TPFLAGS_HAVE_GCflagbit: the\nflagbit,tp_traverse,andtp_clearareallinheritedfromthebasetypeiftheyareallzerointhesubtype.\nrichcmpfuncPyTypeObject.tp_richcompare\nAnoptionalpointertotherichcomparisonfunction,whosesignatureis:\nPyObject *tp_richcompare(PyObject *self, PyObject *other, int op);\nThefirstparameterisguaranteedtobeaninstanceofthetypethatisdefinedbyPyTypeObject.\nThefunctionshouldreturntheresultofthecomparison(usuallyPy_TrueorPy_False). Ifthecomparison\nisundefined,itmustreturnPy_NotImplemented,ifanothererroroccurreditmustreturnNULLandsetan\nexceptioncondition.\nThe following constants are defined to be used as the third argument for tp_richcompare and for\nPyObject_RichCompare():\nConstant Comparison\n<\nPy_LT\n<=\nPy_LE\n==\nPy_EQ\n!=\nPy_NE\n>\nPy_GT\n>=\nPy_GE\nThefollowingmacroisdefinedtoeasewritingrichcomparisonfunctions:\nPy_RETURN_RICHCOMPARE(VAL_A,VAL_B,op)\nReturn Py_True or Py_False from the function, depending on the result of a comparison. VAL_A\nandVAL_BmustbeorderablebyCcomparisonoperators(forexample,theymaybeCintsorfloats).\nThethirdargumentspecifiestherequestedoperation,asforPyObject_RichCompare().\nThereturnedvalueisanewstrongreference.\nOnerror,setsanexceptionandreturnsNULLfromthefunction.\nAddedinversion3.7.\n12.3. TypeObjectStructures 287\nThePython/CAPI,Release3.13.3\nInheritance:\nGroup: tp_hash,tp_richcompare\nThisfieldisinheritedbysubtypestogetherwithtp_hash:asubtypeinheritstp_richcompareandtp_hash\nwhenthesubtype\u2019stp_richcompareandtp_hasharebothNULL.\nDefault:\nPyBaseObject_Typeprovidesatp_richcompareimplementation,whichmaybeinherited. However,if\nonlytp_hashisdefined,noteventheinheritedfunctionisusedandinstancesofthetypewillnotbeableto\nparticipateinanycomparisons.\nPy_ssize_tPyTypeObject.tp_weaklistoffset\nWhilethisfieldisstillsupported,Py_TPFLAGS_MANAGED_WEAKREFshouldbeusedinstead,ifatallpossible.\nIftheinstancesofthistypeareweaklyreferenceable,thisfieldisgreaterthanzeroandcontainstheoffsetin\ntheinstancestructureoftheweakreferencelisthead(ignoringtheGCheader,ifpresent);thisoffsetisusedby\nPyObject_ClearWeakRefs()andthePyWeakref_*functions. Theinstancestructureneedstoincludea\nfieldoftypePyObject*whichisinitializedtoNULL.\nDonotconfusethisfieldwithtp_weaklist;thatisthelistheadforweakreferencestothetypeobjectitself.\nItisanerrortosetboththePy_TPFLAGS_MANAGED_WEAKREFbitandtp_weaklistoffset.\nInheritance:\nThisfieldisinheritedbysubtypes,butseetheruleslistedbelow. Asubtypemayoverridethisoffset;thismeans\nthatthesubtypeusesadifferentweakreferencelistheadthanthebasetype. Sincethelistheadisalwaysfound\nviatp_weaklistoffset,thisshouldnotbeaproblem.\nDefault:\nIfthePy_TPFLAGS_MANAGED_WEAKREF bitissetinthetp_flagsfield,thentp_weaklistoffsetwill\nbesettoanegativevalue,toindicatethatitisunsafetousethisfield.\ngetiterfuncPyTypeObject.tp_iter\nAnoptionalpointertoafunctionthatreturnsaniteratorfortheobject. Itspresencenormallysignalsthatthe\ninstancesofthistypeareiterable(althoughsequencesmaybeiterablewithoutthisfunction).\nThisfunctionhasthesamesignatureasPyObject_GetIter():\nPyObject *tp_iter(PyObject *self);\nInheritance:\nThisfieldisinheritedbysubtypes.\niternextfuncPyTypeObject.tp_iternext\nAnoptionalpointertoafunctionthatreturnsthenextiteminaniterator. Thesignatureis:\nPyObject *tp_iternext(PyObject *self);\nWhen the iterator is exhausted, it must return NULL; a StopIteration exception may or may not be set.\nWhen another error occurs, it must return NULL too. Its presence signals that the instances of this type are\niterators.\nIteratortypesshouldalsodefinethetp_iter function, andthatfunctionshouldreturntheiteratorinstance\nitself(notanewiteratorinstance).\nThisfunctionhasthesamesignatureasPyIter_Next().\nInheritance:\nThisfieldisinheritedbysubtypes.\n288 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nstructPyMethodDef *PyTypeObject.tp_methods\nAnoptionalpointertoastaticNULL-terminatedarrayofPyMethodDefstructures,declaringregularmethods\nofthistype.\nForeachentryinthearray,anentryisaddedtothetype\u2019sdictionary(seetp_dictbelow)containingamethod\ndescriptor.\nInheritance:\nThisfieldisnotinheritedbysubtypes(methodsareinheritedthroughadifferentmechanism).\nstructPyMemberDef *PyTypeObject.tp_members\nAn optional pointer to a static NULL-terminated array of PyMemberDef structures, declaring regular data\nmembers(fieldsorslots)ofinstancesofthistype.\nForeachentryinthearray,anentryisaddedtothetype\u2019sdictionary(seetp_dictbelow)containingamember\ndescriptor.\nInheritance:\nThisfieldisnotinheritedbysubtypes(membersareinheritedthroughadifferentmechanism).\nstructPyGetSetDef *PyTypeObject.tp_getset\nAn optional pointer to a static NULL-terminated array of PyGetSetDef structures, declaring computed at-\ntributesofinstancesofthistype.\nForeachentryinthearray,anentryisaddedtothetype\u2019sdictionary(seetp_dictbelow)containingagetset\ndescriptor.\nInheritance:\nThisfieldisnotinheritedbysubtypes(computedattributesareinheritedthroughadifferentmechanism).\nPyTypeObject*PyTypeObject.tp_base\nAnoptionalpointertoabasetypefromwhichtypepropertiesareinherited. Atthislevel,onlysingleinheritance\nissupported;multipleinheritancerequiredynamicallycreatingatypeobjectbycallingthemetatype.\n(cid:174) Note\nSlotinitializationissubjecttotherulesofinitializingglobals. C99requirestheinitializerstobe\u201caddress\nconstants\u201d. FunctiondesignatorslikePyType_GenericNew(),withimplicitconversiontoapointer,are\nvalidC99addressconstants.\nHowever,theunary\u2018&\u2019operatorappliedtoanon-staticvariablelikePyBaseObject_Typeisnotrequired\ntoproduceanaddressconstant. Compilersmaysupportthis(gccdoes),MSVCdoesnot. Bothcompilers\narestrictlystandardconforminginthisparticularbehavior.\nConsequently,tp_baseshouldbesetintheextensionmodule\u2019sinitfunction.\nInheritance:\nThisfieldisnotinheritedbysubtypes(obviously).\nDefault:\nThisfielddefaultsto&PyBaseObject_Type(whichtoPythonprogrammersisknownasthetypeobject).\nPyObject*PyTypeObject.tp_dict\nThetype\u2019sdictionaryisstoredherebyPyType_Ready().\nThisfieldshouldnormallybeinitializedtoNULLbeforePyType_Readyiscalled;itmayalsobeinitializedto\nadictionarycontaininginitialattributesforthetype. OncePyType_Ready()hasinitializedthetype,extra\nattributesforthetypemaybeaddedtothisdictionaryonlyiftheydon\u2019tcorrespondtooverloadedoperations\n(like__add__()). Onceinitializationforthetypehasfinished,thisfieldshouldbetreatedasread-only.\n12.3. TypeObjectStructures 289\nThePython/CAPI,Release3.13.3\nSometypesmaynotstoretheirdictionaryinthisslot. UsePyType_GetDict()toretrievethedictionaryfor\nanarbitrarytype.\nChangedinversion3.12: Internalsdetail: Forstaticbuiltintypes,thisisalwaysNULL.Instead,thedictforsuch\ntypesisstoredonPyInterpreterState. UsePyType_GetDict()togetthedictforanarbitrarytype.\nInheritance:\nThisfieldisnotinheritedbysubtypes(thoughtheattributesdefinedinhereareinheritedthroughadifferent\nmechanism).\nDefault:\nIfthisfieldisNULL,PyType_Ready()willassignanewdictionarytoit.\n(cid:193) Warning\nItisnotsafetousePyDict_SetItem()onorotherwisemodifytp_dictwiththedictionaryC-API.\ndescrgetfuncPyTypeObject.tp_descr_get\nAnoptionalpointertoa\u201cdescriptorget\u201dfunction.\nThefunctionsignatureis:\nPyObject * tp_descr_get(PyObject *self, PyObject *obj, PyObject *type);\nInheritance:\nThisfieldisinheritedbysubtypes.\ndescrsetfuncPyTypeObject.tp_descr_set\nAnoptionalpointertoafunctionforsettinganddeletingadescriptor\u2019svalue.\nThefunctionsignatureis:\nint tp_descr_set(PyObject *self, PyObject *obj, PyObject *value);\nThevalueargumentissettoNULLtodeletethevalue.\nInheritance:\nThisfieldisinheritedbysubtypes.\nPy_ssize_tPyTypeObject.tp_dictoffset\nWhilethisfieldisstillsupported,Py_TPFLAGS_MANAGED_DICTshouldbeusedinstead,ifatallpossible.\nIf the instances of this type have a dictionary containing instance variables, this field is non-zero and\ncontains the offset in the instances of the type of the instance variable dictionary; this offset is used by\nPyObject_GenericGetAttr().\nDonotconfusethisfieldwithtp_dict;thatisthedictionaryforattributesofthetypeobjectitself.\nThevaluespecifiestheoffsetofthedictionaryfromthestartoftheinstancestructure.\nThe tp_dictoffset should be regarded as write-only. To get the pointer to the dictionary call\nPyObject_GenericGetDict(). CallingPyObject_GenericGetDict()mayneedtoallocatememory\nforthedictionary,soitismaybemoreefficienttocallPyObject_GetAttr()whenaccessinganattribute\nontheobject.\nItisanerrortosetboththePy_TPFLAGS_MANAGED_DICTbitandtp_dictoffset.\nInheritance:\nThis field is inherited by subtypes. A subtype should not override this offset; doing so could be un-\nsafe, if C code tries to access the dictionary at the previous offset. To properly support inheritance, use\nPy_TPFLAGS_MANAGED_DICT.\n290 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nDefault:\nThisslothasnodefault. Forstatictypes,ifthefieldisNULLthenno__dict__getscreatedforinstances.\nIfthePy_TPFLAGS_MANAGED_DICT bitissetinthetp_flagsfield, thentp_dictoffsetwillbesetto\n-1,toindicatethatitisunsafetousethisfield.\ninitprocPyTypeObject.tp_init\nAnoptionalpointertoaninstanceinitializationfunction.\nThisfunctioncorrespondstothe__init__()methodofclasses. Like__init__(),itispossibletocreatean\ninstancewithoutcalling__init__(),anditispossibletoreinitializeaninstancebycallingits__init__()\nmethodagain.\nThefunctionsignatureis:\nint tp_init(PyObject *self, PyObject *args, PyObject *kwds);\nTheselfargumentistheinstancetobeinitialized;theargsandkwdsargumentsrepresentpositionalandkey-\nwordargumentsofthecallto__init__().\nThetp_initfunction, ifnotNULL,iscalledwhenaninstanceiscreatednormallybycallingitstype, after\nthetype\u2019stp_new functionhasreturnedaninstanceofthetype. Ifthetp_new functionreturnsaninstance\nofsomeothertypethatisnotasubtypeoftheoriginaltype,notp_initfunctioniscalled;iftp_newreturns\naninstanceofasubtypeoftheoriginaltype,thesubtype\u2019stp_initiscalled.\nReturns0onsuccess,-1andsetsanexceptiononerror.\nInheritance:\nThisfieldisinheritedbysubtypes.\nDefault:\nForstatictypesthisfielddoesnothaveadefault.\nallocfuncPyTypeObject.tp_alloc\nAnoptionalpointertoaninstanceallocationfunction.\nThefunctionsignatureis:\nPyObject *tp_alloc(PyTypeObject *self, Py_ssize_t nitems);\nInheritance:\nThisfieldisinheritedbystaticsubtypes,butnotbydynamicsubtypes(subtypescreatedbyaclassstatement).\nDefault:\nFordynamicsubtypes,thisfieldisalwayssettoPyType_GenericAlloc(),toforceastandardheapalloca-\ntionstrategy.\nForstaticsubtypes,PyBaseObject_TypeusesPyType_GenericAlloc(). Thatistherecommendedvalue\nforallstaticallydefinedtypes.\nnewfuncPyTypeObject.tp_new\nAnoptionalpointertoaninstancecreationfunction.\nThefunctionsignatureis:\nPyObject *tp_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds);\nThesubtypeargumentisthetypeoftheobjectbeingcreated;theargsandkwdsargumentsrepresentpositional\nandkeywordargumentsofthecalltothetype. Notethatsubtypedoesn\u2019thavetoequalthetypewhosetp_new\nfunctioniscalled;itmaybeasubtypeofthattype(butnotanunrelatedtype).\nThetp_new functionshouldcallsubtype->tp_alloc(subtype, nitems)toallocatespacefortheob-\nject,andthendoonlyasmuchfurtherinitializationasisabsolutelynecessary. Initializationthatcansafelybe\n12.3. TypeObjectStructures 291\nThePython/CAPI,Release3.13.3\nignored or repeated should be placed in the tp_init handler. A good rule of thumb is that for immutable\ntypes, all initialization should take place in tp_new, while for mutable types, most initialization should be\ndeferredtotp_init.\nSetthePy_TPFLAGS_DISALLOW_INSTANTIATION flagtodisallowcreatinginstancesofthetypeinPython.\nInheritance:\nThis field is inherited by subtypes, except it is not inherited by static types whose tp_base is NULL or\n&PyBaseObject_Type.\nDefault:\nForstatictypesthisfieldhasnodefault. ThismeansiftheslotisdefinedasNULL,thetypecannotbecalledto\ncreatenewinstances;presumablythereissomeotherwaytocreateinstances,likeafactoryfunction.\nfreefuncPyTypeObject.tp_free\nAnoptionalpointertoaninstancedeallocationfunction. Itssignatureis:\nvoid tp_free(void *self);\nAninitializerthatiscompatiblewiththissignatureisPyObject_Free().\nInheritance:\nThisfieldisinheritedbystaticsubtypes,butnotbydynamicsubtypes(subtypescreatedbyaclassstatement)\nDefault:\nIndynamicsubtypes, thisfieldissettoadeallocatorsuitabletomatchPyType_GenericAlloc()andthe\nvalueofthePy_TPFLAGS_HAVE_GCflagbit.\nForstaticsubtypes,PyBaseObject_TypeusesPyObject_Del().\ninquiryPyTypeObject.tp_is_gc\nAnoptionalpointertoafunctioncalledbythegarbagecollector.\nThegarbagecollectorneedstoknowwhetheraparticularobjectiscollectibleornot. Normally,itissufficient\ntolookattheobject\u2019stype\u2019stp_flagsfield,andcheckthePy_TPFLAGS_HAVE_GCflagbit. Butsometypes\nhaveamixtureofstaticallyanddynamicallyallocatedinstances,andthestaticallyallocatedinstancesarenot\ncollectible. Such types should define this function; it should return 1 for a collectible instance, and 0 for a\nnon-collectibleinstance. Thesignatureis:\nint tp_is_gc(PyObject *self);\n(Theonlyexampleofthisaretypesthemselves. Themetatype,PyType_Type,definesthisfunctiontodistin-\nguishbetweenstaticallyanddynamicallyallocatedtypes.)\nInheritance:\nThisfieldisinheritedbysubtypes.\nDefault:\nThisslothasnodefault. IfthisfieldisNULL,Py_TPFLAGS_HAVE_GCisusedasthefunctionalequivalent.\nPyObject*PyTypeObject.tp_bases\nTupleofbasetypes.\nThisfieldshouldbesettoNULLandtreatedasread-only. Pythonwillfillitinwhenthetypeisinitialized.\nFor dynamically created classes, the Py_tp_bases slot can be used instead of the bases argument of\nPyType_FromSpecWithBases(). Theargumentformispreferred.\n292 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\n(cid:193) Warning\nMultipleinheritancedoesnotworkwellforstaticallydefinedtypes. Ifyousettp_basestoatuple,Python\nwillnotraiseanerror,butsomeslotswillonlybeinheritedfromthefirstbase.\nInheritance:\nThisfieldisnotinherited.\nPyObject*PyTypeObject.tp_mro\nTuple containing the expanded set of base types, starting with the type itself and ending with object, in\nMethodResolutionOrder.\nThisfieldshouldbesettoNULLandtreatedasread-only. Pythonwillfillitinwhenthetypeisinitialized.\nInheritance:\nThisfieldisnotinherited;itiscalculatedfreshbyPyType_Ready().\nPyObject*PyTypeObject.tp_cache\nUnused. Internaluseonly.\nInheritance:\nThisfieldisnotinherited.\nvoid*PyTypeObject.tp_subclasses\nAcollectionofsubclasses. Internaluseonly. Maybeaninvalidpointer.\nTogetalistofsubclasses,callthePythonmethod__subclasses__().\nChangedinversion3.12: Forsometypes,thisfielddoesnotholdavalidPyObject*. Thetypewaschanged\ntovoid*toindicatethis.\nInheritance:\nThisfieldisnotinherited.\nPyObject*PyTypeObject.tp_weaklist\nWeakreferencelisthead,forweakreferencestothistypeobject. Notinherited. Internaluseonly.\nChangedinversion3.12: Internalsdetail: ForthestaticbuiltintypesthisisalwaysNULL,evenifweakrefsare\nadded. Instead, the weakrefs for each are stored on PyInterpreterState. Use the public C-API or the\ninternal_PyObject_GET_WEAKREFS_LISTPTR()macrotoavoidthedistinction.\nInheritance:\nThisfieldisnotinherited.\ndestructorPyTypeObject.tp_del\nThisfieldisdeprecated. Usetp_finalizeinstead.\nunsignedintPyTypeObject.tp_version_tag\nUsedtoindexintothemethodcache. Internaluseonly.\nInheritance:\nThisfieldisnotinherited.\ndestructorPyTypeObject.tp_finalize\nAnoptionalpointertoaninstancefinalizationfunction. Itssignatureis:\nvoid tp_finalize(PyObject *self);\n12.3. TypeObjectStructures 293\nThePython/CAPI,Release3.13.3\nIf tp_finalize is set, the interpreter calls it once when finalizing an instance. It is called either from the\ngarbagecollector(iftheinstanceispartofanisolatedreferencecycle)orjustbeforetheobjectisdeallocated.\nEitherway,itisguaranteedtobecalledbeforeattemptingtobreakreferencecycles,ensuringthatitfindsthe\nobjectinasanestate.\ntp_finalizeshouldnotmutatethecurrentexceptionstatus;therefore,arecommendedwaytowriteanon-\ntrivialfinalizeris:\nstatic void\nlocal_finalize(PyObject *self)\n{\n/* Save the current exception, if any. */\nPyObject *exc = PyErr_GetRaisedException();\n/* ... */\n/* Restore the saved exception. */\nPyErr_SetRaisedException(exc);\n}\nInheritance:\nThisfieldisinheritedbysubtypes.\nAddedinversion3.4.\nChangedinversion3.8: Beforeversion3.8itwasnecessarytosetthePy_TPFLAGS_HAVE_FINALIZEflags\nbitinorderforthisfieldtobeused. Thisisnolongerrequired.\n(cid:181) Seealso\n\u201cSafeobjectfinalization\u201d(PEP442)\nvectorcallfuncPyTypeObject.tp_vectorcall\nVectorcall function to use for calls of this type object. In other words, it is used to implement vectorcall\nfor type.__call__. If tp_vectorcall is NULL, the default call implementation using __new__() and\n__init__()isused.\nInheritance:\nThisfieldisneverinherited.\nAddedinversion3.9: (thefieldexistssince3.8butit\u2019sonlyusedsince3.9)\nunsignedcharPyTypeObject.tp_watched\nInternal. Donotuse.\nAddedinversion3.12.\n12.3.6 Static Types\nTraditionally,typesdefinedinCcodearestatic,thatis,astaticPyTypeObjectstructureisdefineddirectlyincode\nandinitializedusingPyType_Ready().\nThisresultsintypesthatarelimitedrelativetotypesdefinedinPython:\n\u2022 Statictypesarelimitedtoonebase,i.e. theycannotusemultipleinheritance.\n\u2022 Statictypeobjects(butnotnecessarilytheirinstances)areimmutable. Itisnotpossibletoaddormodifythe\ntypeobject\u2019sattributesfromPython.\n\u2022 Static type objects are shared across sub-interpreters, so they should not include any subinterpreter-specific\nstate.\n294 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nAlso,sincePyTypeObjectisonlypartoftheLimitedAPI asanopaquestruct,anyextensionmodulesusingstatic\ntypesmustbecompiledforaspecificPythonminorversion.\n12.3.7 Heap Types\nAn alternative to static types is heap-allocated types, or heap types for short, which correspond closely to classes\ncreatedbyPython\u2019sclassstatement. HeaptypeshavethePy_TPFLAGS_HEAPTYPEflagset.\nThis is done by filling a PyType_Spec structure and calling PyType_FromSpec(),\nPyType_FromSpecWithBases(),PyType_FromModuleAndSpec(),orPyType_FromMetaclass().\n12.3.8 Number Object Structures\ntypePyNumberMethods\nThisstructureholdspointerstothefunctionswhichanobjectusestoimplementthenumberprotocol. Each\nfunctionisusedbythefunctionofsimilarnamedocumentedintheNumberProtocolsection.\nHereisthestructuredefinition:\ntypedef struct {\nbinaryfunc nb_add;\nbinaryfunc nb_subtract;\nbinaryfunc nb_multiply;\nbinaryfunc nb_remainder;\nbinaryfunc nb_divmod;\nternaryfunc nb_power;\nunaryfunc nb_negative;\nunaryfunc nb_positive;\nunaryfunc nb_absolute;\ninquiry nb_bool;\nunaryfunc nb_invert;\nbinaryfunc nb_lshift;\nbinaryfunc nb_rshift;\nbinaryfunc nb_and;\nbinaryfunc nb_xor;\nbinaryfunc nb_or;\nunaryfunc nb_int;\nvoid *nb_reserved;\nunaryfunc nb_float;\nbinaryfunc nb_inplace_add;\nbinaryfunc nb_inplace_subtract;\nbinaryfunc nb_inplace_multiply;\nbinaryfunc nb_inplace_remainder;\nternaryfunc nb_inplace_power;\nbinaryfunc nb_inplace_lshift;\nbinaryfunc nb_inplace_rshift;\nbinaryfunc nb_inplace_and;\nbinaryfunc nb_inplace_xor;\nbinaryfunc nb_inplace_or;\nbinaryfunc nb_floor_divide;\nbinaryfunc nb_true_divide;\nbinaryfunc nb_inplace_floor_divide;\nbinaryfunc nb_inplace_true_divide;\nunaryfunc nb_index;\n(continuesonnextpage)\n12.3. TypeObjectStructures 295\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nbinaryfunc nb_matrix_multiply;\nbinaryfunc nb_inplace_matrix_multiply;\n} PyNumberMethods;\n(cid:174) Note\nBinaryandternaryfunctionsmustcheckthetypeofalltheiroperands,andimplementthenecessarycon-\nversions (at least one ofthe operands is an instanceof the defined type). If the operation isnot defined\nforthegivenoperands,binaryandternaryfunctionsmustreturnPy_NotImplemented,ifanothererror\noccurredtheymustreturnNULLandsetanexception.\n(cid:174) Note\nThenb_reserved fieldshouldalwaysbeNULL.Itwaspreviouslycallednb_long,andwasrenamedin\nPython3.0.1.\nbinaryfuncPyNumberMethods.nb_add\nbinaryfuncPyNumberMethods.nb_subtract\nbinaryfuncPyNumberMethods.nb_multiply\nbinaryfuncPyNumberMethods.nb_remainder\nbinaryfuncPyNumberMethods.nb_divmod\nternaryfuncPyNumberMethods.nb_power\nunaryfuncPyNumberMethods.nb_negative\nunaryfuncPyNumberMethods.nb_positive\nunaryfuncPyNumberMethods.nb_absolute\ninquiryPyNumberMethods.nb_bool\nunaryfuncPyNumberMethods.nb_invert\nbinaryfuncPyNumberMethods.nb_lshift\nbinaryfuncPyNumberMethods.nb_rshift\nbinaryfuncPyNumberMethods.nb_and\nbinaryfuncPyNumberMethods.nb_xor\nbinaryfuncPyNumberMethods.nb_or\nunaryfuncPyNumberMethods.nb_int\nvoid*PyNumberMethods.nb_reserved\nunaryfuncPyNumberMethods.nb_float\nbinaryfuncPyNumberMethods.nb_inplace_add\nbinaryfuncPyNumberMethods.nb_inplace_subtract\n296 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nbinaryfuncPyNumberMethods.nb_inplace_multiply\nbinaryfuncPyNumberMethods.nb_inplace_remainder\nternaryfuncPyNumberMethods.nb_inplace_power\nbinaryfuncPyNumberMethods.nb_inplace_lshift\nbinaryfuncPyNumberMethods.nb_inplace_rshift\nbinaryfuncPyNumberMethods.nb_inplace_and\nbinaryfuncPyNumberMethods.nb_inplace_xor\nbinaryfuncPyNumberMethods.nb_inplace_or\nbinaryfuncPyNumberMethods.nb_floor_divide\nbinaryfuncPyNumberMethods.nb_true_divide\nbinaryfuncPyNumberMethods.nb_inplace_floor_divide\nbinaryfuncPyNumberMethods.nb_inplace_true_divide\nunaryfuncPyNumberMethods.nb_index\nbinaryfuncPyNumberMethods.nb_matrix_multiply\nbinaryfuncPyNumberMethods.nb_inplace_matrix_multiply\n12.3.9 Mapping Object Structures\ntypePyMappingMethods\nThisstructureholdspointerstothefunctionswhichanobjectusestoimplementthemappingprotocol. Ithas\nthreemembers:\nlenfuncPyMappingMethods.mp_length\nThisfunctionisusedbyPyMapping_Size()andPyObject_Size(),andhasthesamesignature. Thisslot\nmaybesettoNULLiftheobjecthasnodefinedlength.\nbinaryfuncPyMappingMethods.mp_subscript\nThisfunctionisusedbyPyObject_GetItem()andPySequence_GetSlice(),andhasthesamesignature\nasPyObject_GetItem(). ThisslotmustbefilledforthePyMapping_Check()functiontoreturn1,itcan\nbeNULLotherwise.\nobjobjargprocPyMappingMethods.mp_ass_subscript\nThisfunctionisusedbyPyObject_SetItem(),PyObject_DelItem(),PySequence_SetSlice()and\nPySequence_DelSlice(). IthasthesamesignatureasPyObject_SetItem(), butvcanalsobesetto\nNULLtodeleteanitem. IfthisslotisNULL,theobjectdoesnotsupportitemassignmentanddeletion.\n12.3.10 Sequence Object Structures\ntypePySequenceMethods\nThisstructureholdspointerstothefunctionswhichanobjectusestoimplementthesequenceprotocol.\nlenfuncPySequenceMethods.sq_length\nThis function is used by PySequence_Size() and PyObject_Size(), and has the same signature. It is\nalsousedforhandlingnegativeindicesviathesq_itemandthesq_ass_itemslots.\nbinaryfuncPySequenceMethods.sq_concat\nThisfunctionisusedbyPySequence_Concat()andhasthesamesignature. Itisalsousedbythe+operator,\naftertryingthenumericadditionviathenb_addslot.\n12.3. TypeObjectStructures 297\nThePython/CAPI,Release3.13.3\nssizeargfuncPySequenceMethods.sq_repeat\nThisfunctionisusedbyPySequence_Repeat()andhasthesamesignature. Itisalsousedbythe*operator,\naftertryingnumericmultiplicationviathenb_multiplyslot.\nssizeargfuncPySequenceMethods.sq_item\nThis function is used by PySequence_GetItem() and has the same signature. It is also used by\nPyObject_GetItem(),aftertryingthesubscriptionviathemp_subscriptslot. Thisslotmustbefilledfor\nthePySequence_Check()functiontoreturn1,itcanbeNULLotherwise.\nNegativeindexesarehandledasfollows: ifthesq_lengthslotisfilled,itiscalledandthesequencelengthis\nusedtocomputeapositiveindexwhichispassedtosq_item. Ifsq_lengthisNULL,theindexispassedas\nistothefunction.\nssizeobjargprocPySequenceMethods.sq_ass_item\nThis function is used by PySequence_SetItem() and has the same signature. It is also used by\nPyObject_SetItem()andPyObject_DelItem(), aftertryingtheitemassignmentanddeletionviathe\nmp_ass_subscriptslot. ThisslotmaybelefttoNULLiftheobjectdoesnotsupportitemassignmentand\ndeletion.\nobjobjprocPySequenceMethods.sq_contains\nThisfunctionmaybeusedbyPySequence_Contains()andhasthesamesignature. Thisslotmaybeleft\ntoNULL,inthiscasePySequence_Contains()simplytraversesthesequenceuntilitfindsamatch.\nbinaryfuncPySequenceMethods.sq_inplace_concat\nThisfunctionisusedbyPySequence_InPlaceConcat()andhasthesamesignature. Itshouldmodifyits\nfirstoperand,andreturnit. ThisslotmaybelefttoNULL,inthiscasePySequence_InPlaceConcat()will\nfallbacktoPySequence_Concat(). Itisalsousedbytheaugmentedassignment+=,aftertryingnumeric\nin-placeadditionviathenb_inplace_addslot.\nssizeargfuncPySequenceMethods.sq_inplace_repeat\nThisfunctionisusedbyPySequence_InPlaceRepeat()andhasthesamesignature. Itshouldmodifyits\nfirstoperand,andreturnit. ThisslotmaybelefttoNULL,inthiscasePySequence_InPlaceRepeat()will\nfallbacktoPySequence_Repeat(). Itisalsousedbytheaugmentedassignment*=,aftertryingnumeric\nin-placemultiplicationviathenb_inplace_multiplyslot.\n12.3.11 Buffer Object Structures\ntypePyBufferProcs\nThis structure holds pointers to the functions required by the Buffer protocol. The protocol defines how an\nexporterobjectcanexposeitsinternaldatatoconsumerobjects.\ngetbufferprocPyBufferProcs.bf_getbuffer\nThesignatureofthisfunctionis:\nint (PyObject *exporter, Py_buffer *view, int flags);\nHandlearequesttoexportertofillinviewasspecifiedbyflags. Exceptforpoint(3),animplementationofthis\nfunctionMUSTtakethesesteps:\n(1) Checkiftherequestcanbemet. Ifnot,raiseBufferError,setview->objtoNULLandreturn-1.\n(2) Fillintherequestedfields.\n(3) Incrementaninternalcounterforthenumberofexports.\n(4) Setview->objtoexporterandincrementview->obj.\n(5) Return0.\nIfexporterispartofachainortreeofbufferproviders,twomainschemescanbeused:\n\u2022 Re-export: Eachmemberofthetreeactsastheexportingobjectandsetsview->objtoanewreference\ntoitself.\n298 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\n\u2022 Redirect: Thebufferrequestisredirectedtotherootobjectofthetree. Here,view->objwillbeanew\nreferencetotherootobject.\nTheindividualfieldsofviewaredescribedinsectionBufferstructure,theruleshowanexportermustreactto\nspecificrequestsareinsectionBufferrequesttypes.\nAllmemorypointedtointhePy_bufferstructurebelongstotheexporterandmustremainvaliduntilthereare\nnoconsumersleft. format,shape,strides,suboffsetsandinternalareread-onlyfortheconsumer.\nPyBuffer_FillInfo()providesaneasywayofexposingasimplebytesbufferwhiledealingcorrectlywith\nallrequesttypes.\nPyObject_GetBuffer()istheinterfacefortheconsumerthatwrapsthisfunction.\nreleasebufferprocPyBufferProcs.bf_releasebuffer\nThesignatureofthisfunctionis:\nvoid (PyObject *exporter, Py_buffer *view);\nHandlearequesttoreleasetheresourcesofthebuffer. Ifnoresourcesneedtobereleased,PyBufferProcs.\nbf_releasebuffer may be NULL. Otherwise, a standard implementation of this function will take these\noptionalsteps:\n(1) Decrementaninternalcounterforthenumberofexports.\n(2) Ifthecounteris0,freeallmemoryassociatedwithview.\nTheexporterMUSTusetheinternalfieldtokeeptrackofbuffer-specificresources. Thisfieldisguaranteed\ntoremainconstant,whileaconsumerMAYpassacopyoftheoriginalbufferastheviewargument.\nThisfunctionMUSTNOTdecrementview->obj,sincethatisdoneautomaticallyinPyBuffer_Release()\n(thisschemeisusefulforbreakingreferencecycles).\nPyBuffer_Release()istheinterfacefortheconsumerthatwrapsthisfunction.\n12.3.12 Async Object Structures\nAddedinversion3.5.\ntypePyAsyncMethods\nThisstructureholdspointerstothefunctionsrequiredtoimplementawaitableandasynchronousiteratorob-\njects.\nHereisthestructuredefinition:\ntypedef struct {\nunaryfunc am_await;\nunaryfunc am_aiter;\nunaryfunc am_anext;\nsendfunc am_send;\n} PyAsyncMethods;\nunaryfuncPyAsyncMethods.am_await\nThesignatureofthisfunctionis:\nPyObject *am_await(PyObject *self);\nThereturnedobjectmustbeaniterator,i.e. PyIter_Check()mustreturn1forit.\nThisslotmaybesettoNULLifanobjectisnotanawaitable.\nunaryfuncPyAsyncMethods.am_aiter\nThesignatureofthisfunctionis:\n12.3. TypeObjectStructures 299\nThePython/CAPI,Release3.13.3\nPyObject *am_aiter(PyObject *self);\nMustreturnanasynchronousiteratorobject. See__anext__()fordetails.\nThisslotmaybesettoNULLifanobjectdoesnotimplementasynchronousiterationprotocol.\nunaryfuncPyAsyncMethods.am_anext\nThesignatureofthisfunctionis:\nPyObject *am_anext(PyObject *self);\nMustreturnanawaitableobject. See__anext__()fordetails. ThisslotmaybesettoNULL.\nsendfuncPyAsyncMethods.am_send\nThesignatureofthisfunctionis:\nPySendResult am_send(PyObject *self, PyObject *arg, PyObject **result);\nSeePyIter_Send()fordetails. ThisslotmaybesettoNULL.\nAddedinversion3.10.\n12.3.13 Slot Type typedefs\ntypedefPyObject*(*allocfunc)(PyTypeObject*cls,Py_ssize_tnitems)\nPartoftheStableABI.Thepurposeofthisfunctionistoseparatememoryallocationfrommemoryinitial-\nization. Itshouldreturnapointertoablockofmemoryofadequatelengthfortheinstance,suitablyaligned,\nand initialized to zeros, but with ob_refcnt set to 1 and ob_type set to the type argument. If the type\u2019s\ntp_itemsize is non-zero, the object\u2019s ob_size field should be initialized to nitems and the length of the\nallocatedmemoryblockshouldbetp_basicsize + nitems*tp_itemsize,roundeduptoamultipleof\nsizeof(void*);otherwise,nitemsisnotusedandthelengthoftheblockshouldbetp_basicsize.\nThisfunctionshouldnotdoanyotherinstanceinitialization,noteventoallocateadditionalmemory;thatshould\nbedonebytp_new.\ntypedefvoid(*destructor)(PyObject*)\nPartoftheStableABI.\ntypedefvoid(*freefunc)(void*)\nSeetp_free.\ntypedefPyObject*(*newfunc)(PyTypeObject*,PyObject*,PyObject*)\nPartoftheStableABI.Seetp_new.\ntypedefint(*initproc)(PyObject*,PyObject*,PyObject*)\nPartoftheStableABI.Seetp_init.\ntypedefPyObject*(*reprfunc)(PyObject*)\nPartoftheStableABI.Seetp_repr.\ntypedefPyObject*(*getattrfunc)(PyObject*self,char*attr)\nPartoftheStableABI.Returnthevalueofthenamedattributefortheobject.\ntypedefint(*setattrfunc)(PyObject*self,char*attr,PyObject*value)\nPartoftheStableABI.Setthevalueofthenamedattributefortheobject. ThevalueargumentissettoNULL\ntodeletetheattribute.\ntypedefPyObject*(*getattrofunc)(PyObject*self,PyObject*attr)\nPartoftheStableABI.Returnthevalueofthenamedattributefortheobject.\nSeetp_getattro.\n300 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\ntypedefint(*setattrofunc)(PyObject*self,PyObject*attr,PyObject*value)\nPartoftheStableABI.Setthevalueofthenamedattributefortheobject. ThevalueargumentissettoNULL\ntodeletetheattribute.\nSeetp_setattro.\ntypedefPyObject*(*descrgetfunc)(PyObject*,PyObject*,PyObject*)\nPartoftheStableABI.Seetp_descr_get.\ntypedefint(*descrsetfunc)(PyObject*,PyObject*,PyObject*)\nPartoftheStableABI.Seetp_descr_set.\ntypedefPy_hash_t(*hashfunc)(PyObject*)\nPartoftheStableABI.Seetp_hash.\ntypedefPyObject*(*richcmpfunc)(PyObject*,PyObject*,int)\nPartoftheStableABI.Seetp_richcompare.\ntypedefPyObject*(*getiterfunc)(PyObject*)\nPartoftheStableABI.Seetp_iter.\ntypedefPyObject*(*iternextfunc)(PyObject*)\nPartoftheStableABI.Seetp_iternext.\ntypedefPy_ssize_t(*lenfunc)(PyObject*)\nPartoftheStableABI.\ntypedefint(*getbufferproc)(PyObject*,Py_buffer*,int)\nPartoftheStableABIsinceversion3.12.\ntypedefvoid(*releasebufferproc)(PyObject*,Py_buffer*)\nPartoftheStableABIsinceversion3.12.\ntypedefPyObject*(*unaryfunc)(PyObject*)\nPartoftheStableABI.\ntypedefPyObject*(*binaryfunc)(PyObject*,PyObject*)\nPartoftheStableABI.\ntypedefPySendResult(*sendfunc)(PyObject*,PyObject*,PyObject**)\nSeeam_send.\ntypedefPyObject*(*ternaryfunc)(PyObject*,PyObject*,PyObject*)\nPartoftheStableABI.\ntypedefPyObject*(*ssizeargfunc)(PyObject*,Py_ssize_t)\nPartoftheStableABI.\ntypedefint(*ssizeobjargproc)(PyObject*,Py_ssize_t,PyObject*)\nPartoftheStableABI.\ntypedefint(*objobjproc)(PyObject*,PyObject*)\nPartoftheStableABI.\ntypedefint(*objobjargproc)(PyObject*,PyObject*,PyObject*)\nPartoftheStableABI.\n12.3.14 Examples\nThe following are simple examples of Python type definitions. They include common usage you may encounter.\nSomedemonstratetrickycornercases. Formoreexamples,practicalinfo,andatutorial,seedefining-new-typesand\nnew-types-topics.\nAbasicstatictype:\n12.3. TypeObjectStructures 301\nThePython/CAPI,Release3.13.3\ntypedef struct {\nPyObject_HEAD\nconst char *data;\n} MyObject;\nstatic PyTypeObject MyObject_Type = {\nPyVarObject_HEAD_INIT(NULL, 0)\n.tp_name = \"mymod.MyObject\",\n.tp_basicsize = sizeof(MyObject),\n.tp_doc = PyDoc_STR(\"My objects\"),\n.tp_new = myobj_new,\n.tp_dealloc = (destructor)myobj_dealloc,\n.tp_repr = (reprfunc)myobj_repr,\n};\nYoumayalsofindoldercode(especiallyintheCPythoncodebase)withamoreverboseinitializer:\nstatic PyTypeObject MyObject_Type = {\nPyVarObject_HEAD_INIT(NULL, 0)\n\"mymod.MyObject\", /* tp_name */\nsizeof(MyObject), /* tp_basicsize */\n0, /* tp_itemsize */\n(destructor)myobj_dealloc, /* tp_dealloc */\n0, /* tp_vectorcall_offset */\n0, /* tp_getattr */\n0, /* tp_setattr */\n0, /* tp_as_async */\n(reprfunc)myobj_repr, /* tp_repr */\n0, /* tp_as_number */\n0, /* tp_as_sequence */\n0, /* tp_as_mapping */\n0, /* tp_hash */\n0, /* tp_call */\n0, /* tp_str */\n0, /* tp_getattro */\n0, /* tp_setattro */\n0, /* tp_as_buffer */\n0, /* tp_flags */\nPyDoc_STR(\"My objects\"), /* tp_doc */\n0, /* tp_traverse */\n0, /* tp_clear */\n0, /* tp_richcompare */\n0, /* tp_weaklistoffset */\n0, /* tp_iter */\n0, /* tp_iternext */\n0, /* tp_methods */\n0, /* tp_members */\n0, /* tp_getset */\n0, /* tp_base */\n0, /* tp_dict */\n0, /* tp_descr_get */\n0, /* tp_descr_set */\n0, /* tp_dictoffset */\n0, /* tp_init */\n0, /* tp_alloc */\nmyobj_new, /* tp_new */\n};\n302 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nAtypethatsupportsweakrefs,instancedicts,andhashing:\ntypedef struct {\nPyObject_HEAD\nconst char *data;\n} MyObject;\nstatic PyTypeObject MyObject_Type = {\nPyVarObject_HEAD_INIT(NULL, 0)\n.tp_name = \"mymod.MyObject\",\n.tp_basicsize = sizeof(MyObject),\n.tp_doc = PyDoc_STR(\"My objects\"),\n.tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE |\nPy_TPFLAGS_HAVE_GC | Py_TPFLAGS_MANAGED_DICT |\nPy_TPFLAGS_MANAGED_WEAKREF,\n.tp_new = myobj_new,\n.tp_traverse = (traverseproc)myobj_traverse,\n.tp_clear = (inquiry)myobj_clear,\n.tp_alloc = PyType_GenericNew,\n.tp_dealloc = (destructor)myobj_dealloc,\n.tp_repr = (reprfunc)myobj_repr,\n.tp_hash = (hashfunc)myobj_hash,\n.tp_richcompare = PyBaseObject_Type.tp_richcompare,\n};\nAstrsubclassthatcannotbesubclassedandcannotbecalledtocreateinstances(e.g. usesaseparatefactoryfunc)\nusingPy_TPFLAGS_DISALLOW_INSTANTIATION flag:\ntypedef struct {\nPyUnicodeObject raw;\nchar *extra;\n} MyStr;\nstatic PyTypeObject MyStr_Type = {\nPyVarObject_HEAD_INIT(NULL, 0)\n.tp_name = \"mymod.MyStr\",\n.tp_basicsize = sizeof(MyStr),\n.tp_base = NULL, // set to &PyUnicode_Type in module init\n.tp_doc = PyDoc_STR(\"my custom str\"),\n.tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_DISALLOW_INSTANTIATION,\n.tp_repr = (reprfunc)myobj_repr,\n};\nThesimpleststatictypewithfixed-lengthinstances:\ntypedef struct {\nPyObject_HEAD\n} MyObject;\nstatic PyTypeObject MyObject_Type = {\nPyVarObject_HEAD_INIT(NULL, 0)\n.tp_name = \"mymod.MyObject\",\n};\nThesimpleststatictypewithvariable-lengthinstances:\ntypedef struct {\nPyObject_VAR_HEAD\n(continuesonnextpage)\n12.3. TypeObjectStructures 303\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nconst char *data[1];\n} MyObject;\nstatic PyTypeObject MyObject_Type = {\nPyVarObject_HEAD_INIT(NULL, 0)\n.tp_name = \"mymod.MyObject\",\n.tp_basicsize = sizeof(MyObject) - sizeof(char *),\n.tp_itemsize = sizeof(char *),\n};\n12.4 Supporting Cyclic Garbage Collection\nPython\u2019ssupportfordetectingandcollectinggarbagewhichinvolvescircularreferencesrequiressupportfromobject\ntypeswhichare\u201ccontainers\u201dforotherobjectswhichmayalsobecontainers. Typeswhichdonotstorereferencesto\notherobjects,orwhichonlystorereferencestoatomictypes(suchasnumbersorstrings),donotneedtoprovideany\nexplicitsupportforgarbagecollection.\nTo create a container type, the tp_flags field of the type object must include the Py_TPFLAGS_HAVE_GC and\nprovideanimplementationofthetp_traversehandler. Ifinstancesofthetypearemutable,atp_clearimple-\nmentationmustalsobeprovided.\nPy_TPFLAGS_HAVE_GC\nObjectswithatypewiththisflagsetmustconformwiththerulesdocumentedhere. Forconveniencethese\nobjectswillbereferredtoascontainerobjects.\nConstructorsforcontainertypesmustconformtotworules:\n1. ThememoryfortheobjectmustbeallocatedusingPyObject_GC_NeworPyObject_GC_NewVar.\n2. Once all the fields which may contain references to other containers are initialized, it must call\nPyObject_GC_Track().\nSimilarly,thedeallocatorfortheobjectmustconformtoasimilarpairofrules:\n1. Beforefieldswhichrefertoothercontainersareinvalidated,PyObject_GC_UnTrack()mustbecalled.\n2. Theobject\u2019smemorymustbedeallocatedusingPyObject_GC_Del().\n(cid:193) Warning\nIfatypeaddsthePy_TPFLAGS_HAVE_GC,thenitmustimplementatleastatp_traversehandleror\nexplicitlyuseonefromitssubclassorsubclasses.\nWhen calling PyType_Ready() or some of the APIs that indirectly call it like\nPyType_FromSpecWithBases()orPyType_FromSpec()theinterpreterwillautomaticallypopulate\nthetp_flags,tp_traverseandtp_clearfieldsifthetypeinheritsfromaclassthatimplementsthe\ngarbagecollectorprotocolandthechildclassdoesnotincludethePy_TPFLAGS_HAVE_GCflag.\nPyObject_GC_New(TYPE,typeobj)\nAnalogoustoPyObject_NewbutforcontainerobjectswiththePy_TPFLAGS_HAVE_GCflagset.\nPyObject_GC_NewVar(TYPE,typeobj,size)\nAnalogoustoPyObject_NewVarbutforcontainerobjectswiththePy_TPFLAGS_HAVE_GCflagset.\nPyObject*PyUnstable_Object_GC_NewWithExtraData(PyTypeObject*type,size_textra_size)\n304 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nAnalogous to PyObject_GC_New but allocates extra_size bytes at the end of the object (at offset\ntp_basicsize). Theallocatedmemoryisinitializedtozeros,exceptforthePython object header.\nTheextradatawillbedeallocatedwiththeobject,butotherwiseitisnotmanagedbyPython.\n(cid:193) Warning\nThefunctionismarkedasunstablebecausethefinalmechanismforreservingextradataafteraninstanceis\nnotyetdecided. Forallocatingavariablenumberoffields,preferusingPyVarObjectandtp_itemsize\ninstead.\nAddedinversion3.12.\nPyObject_GC_Resize(TYPE,op,newsize)\nResizeanobjectallocatedbyPyObject_NewVar. ReturnstheresizedobjectoftypeTYPE*(referstoanyC\ntype)orNULLonfailure.\nop must be of type PyVarObject* and must not be tracked by the collector yet. newsize must be of type\nPy_ssize_t.\nvoidPyObject_GC_Track(PyObject*op)\nPartoftheStableABI.Addstheobjectoptothesetofcontainerobjectstrackedbythecollector. Thecollector\ncanrunatunexpectedtimessoobjectsmustbevalidwhilebeingtracked. Thisshouldbecalledonceallthe\nfieldsfollowedbythetp_traversehandlerbecomevalid,usuallyneartheendoftheconstructor.\nintPyObject_IS_GC(PyObject*obj)\nReturnsnon-zeroiftheobjectimplementsthegarbagecollectorprotocol,otherwisereturns0.\nTheobjectcannotbetrackedbythegarbagecollectorifthisfunctionreturns0.\nintPyObject_GC_IsTracked(PyObject*op)\nPartoftheStableABIsinceversion3.9. Returns1iftheobjecttypeofopimplementstheGCprotocoland\nopisbeingcurrentlytrackedbythegarbagecollectorand0otherwise.\nThisisanalogoustothePythonfunctiongc.is_tracked().\nAddedinversion3.9.\nintPyObject_GC_IsFinalized(PyObject*op)\nPartoftheStableABIsinceversion3.9. Returns1iftheobjecttypeofopimplementstheGCprotocoland\nophasbeenalreadyfinalizedbythegarbagecollectorand0otherwise.\nThisisanalogoustothePythonfunctiongc.is_finalized().\nAddedinversion3.9.\nvoidPyObject_GC_Del(void*op)\nPart of the Stable ABI. Releases memory allocated to an object using PyObject_GC_New or\nPyObject_GC_NewVar.\nvoidPyObject_GC_UnTrack(void*op)\nPartoftheStableABI.Removetheobjectopfromthesetofcontainerobjectstrackedbythecollector. Note\nthatPyObject_GC_Track()canbecalledagainonthisobjecttoadditbacktothesetoftrackedobjects.\nThe deallocator (tp_dealloc handler) should call this for the object before any of the fields used by the\ntp_traversehandlerbecomeinvalid.\n12.4. SupportingCyclicGarbageCollection 305\nThePython/CAPI,Release3.13.3\nChanged in version 3.8: The _PyObject_GC_TRACK() and _PyObject_GC_UNTRACK() macros have been re-\nmovedfromthepublicCAPI.\nThetp_traversehandleracceptsafunctionparameterofthistype:\ntypedefint(*visitproc)(PyObject*object,void*arg)\nPartoftheStableABI.Typeofthevisitorfunctionpassedtothetp_traversehandler. Thefunctionshould\nbecalledwithanobjecttotraverseasobjectandthethirdparametertothetp_traversehandlerasarg. The\nPythoncoreusesseveralvisitorfunctionstoimplementcyclicgarbagedetection; it\u2019snotexpectedthatusers\nwillneedtowritetheirownvisitorfunctions.\nThetp_traversehandlermusthavethefollowingtype:\ntypedefint(*traverseproc)(PyObject*self,visitprocvisit,void*arg)\nPartoftheStableABI.Traversalfunctionforacontainerobject. Implementationsmustcallthevisitfunction\nforeachobjectdirectlycontainedbyself,withtheparameterstovisit beingthecontainedobjectandthearg\nvaluepassedtothehandler. ThevisitfunctionmustnotbecalledwithaNULLobjectargument. Ifvisitreturns\nanon-zerovaluethatvalueshouldbereturnedimmediately.\nTo simplify writing tp_traverse handlers, a Py_VISIT() macro is provided. In order to use this macro, the\ntp_traverseimplementationmustnameitsargumentsexactlyvisitandarg:\nvoidPy_VISIT(PyObject*o)\nIfoisnotNULL,callthevisitcallback,withargumentsoandarg. Ifvisitreturnsanon-zerovalue,thenreturn\nit. Usingthismacro,tp_traversehandlerslooklike:\nstatic int\nmy_traverse(Noddy *self, visitproc visit, void *arg)\n{\nPy_VISIT(self->foo);\nPy_VISIT(self->bar);\nreturn 0;\n}\nThetp_clearhandlermustbeoftheinquirytype,orNULLiftheobjectisimmutable.\ntypedefint(*inquiry)(PyObject*self)\nPart of the Stable ABI. Drop references that may have created reference cycles. Immutable objects do not\nhavetodefinethismethodsincetheycanneverdirectlycreatereferencecycles. Notethattheobjectmuststill\nbevalidaftercallingthismethod(don\u2019tjustcallPy_DECREF()onareference). Thecollectorwillcallthis\nmethodifitdetectsthatthisobjectisinvolvedinareferencecycle.\n12.4.1 Controlling the Garbage Collector State\nTheC-APIprovidesthefollowingfunctionsforcontrollinggarbagecollectionruns.\nPy_ssize_tPyGC_Collect(void)\nPartoftheStableABI.Performafullgarbagecollection,ifthegarbagecollectorisenabled. (Notethatgc.\ncollect()runsitunconditionally.)\nReturns the number of collected + unreachable objects which cannot be collected. If the garbage collector\nisdisabledoralreadycollecting,returns0immediately. Errorsduringgarbagecollectionarepassedtosys.\nunraisablehook. Thisfunctiondoesnotraiseexceptions.\nintPyGC_Enable(void)\nPartoftheStableABIsinceversion3.10. Enablethegarbagecollector: similartogc.enable(). Returnsthe\npreviousstate,0fordisabledand1forenabled.\nAddedinversion3.10.\nintPyGC_Disable(void)\nPartoftheStableABIsinceversion3.10. Disablethegarbagecollector: similartogc.disable(). Returns\nthepreviousstate,0fordisabledand1forenabled.\n306 Chapter12. ObjectImplementationSupport\nThePython/CAPI,Release3.13.3\nAddedinversion3.10.\nintPyGC_IsEnabled(void)\nPart of the Stable ABI since version 3.10. Query the state of the garbage collector: similar to gc.\nisenabled(). Returnsthecurrentstate,0fordisabledand1forenabled.\nAddedinversion3.10.\n12.4.2 Querying Garbage Collector State\nTheC-APIprovidesthefollowinginterfaceforqueryinginformationaboutthegarbagecollector.\nvoidPyUnstable_GC_VisitObjects(gcvisitobjects_tcallback,void*arg)\n(cid:174)\nThisisUnstableAPI.Itmaychangewithoutwarninginminorreleases.\nRunsuppliedcallbackonallliveGC-capableobjects. argispassedthroughtoallinvocationsofcallback.\n(cid:193) Warning\nIfnewobjectsare(de)allocatedbythecallbackitisundefinediftheywillbevisited.\nGarbagecollectionisdisabledduringoperation. Explicitlyrunningacollectioninthecallbackmaylead\ntoundefinedbehavioure.g. visitingthesameobjectsmultipletimesornotatall.\nAddedinversion3.12.\ntypedefint(*gcvisitobjects_t)(PyObject*object,void*arg)\nTypeofthevisitorfunctiontobepassedtoPyUnstable_GC_VisitObjects(). argisthesameasthearg\npassedtoPyUnstable_GC_VisitObjects. Return1tocontinueiteration,return0tostopiteration. Other\nreturnvaluesarereservedfornowsobehavioronreturninganythingelseisundefined.\nAddedinversion3.12.\n12.4. SupportingCyclicGarbageCollection 307\nThePython/CAPI,Release3.13.3\n308 Chapter12. ObjectImplementationSupport\nCHAPTER\nTHIRTEEN\nAPI AND ABI VERSIONING\nCPythonexposesitsversionnumberinthefollowingmacros. Notethatthesecorrespondtotheversioncodeisbuilt\nwith,notnecessarilytheversionusedatruntime.\nSeeCAPIStabilityforadiscussionofAPIandABIstabilityacrossversions.\nPY_MAJOR_VERSION\nThe3in3.4.1a2.\nPY_MINOR_VERSION\nThe4in3.4.1a2.\nPY_MICRO_VERSION\nThe1in3.4.1a2.\nPY_RELEASE_LEVEL\nTheain3.4.1a2. Thiscanbe0xAforalpha,0xBforbeta,0xCforreleasecandidateor0xFforfinal.\nPY_RELEASE_SERIAL\nThe2in3.4.1a2. Zeroforfinalreleases.\nPY_VERSION_HEX\nThePythonversionnumberencodedinasingleinteger.\nTheunderlyingversioninformationcanbefoundbytreatingitasa32bitnumberinthefollowingmanner:\nBytes Bits(bigendianorder) Meaning Valuefor3.4.1a2\n1 1-8 PY_MAJOR_VERSION 0x03\n2 9-16 PY_MINOR_VERSION 0x04\n3 17-24 PY_MICRO_VERSION 0x01\n4 25-28 PY_RELEASE_LEVEL 0xA\n29-32 PY_RELEASE_SERIAL 0x2\nThus3.4.1a2ishexversion0x030401a2and3.10.0ishexversion0x030a00f0.\nUsethisfornumericcomparisons,e.g. #if PY_VERSION_HEX >= ....\nThisversionisalsoavailableviathesymbolPy_Version.\nconstunsignedlongPy_Version\nPartoftheStableABIsinceversion3.11. ThePythonruntimeversionnumberencodedinasingleconstant\ninteger,withthesameformatasthePY_VERSION_HEX macro. ThiscontainsthePythonversionusedatrun\ntime.\nAddedinversion3.11.\nAllthegivenmacrosaredefinedinInclude/patchlevel.h.\n309\nThePython/CAPI,Release3.13.3\n310 Chapter13. APIandABIVersioning\nCHAPTER\nFOURTEEN\nMONITORING C API\nAddedinversion3.13.\nAnextensionmayneedtointeractwiththeeventmonitoringsystem. Subscribingtoeventsandregisteringcallbacks\ncanbedoneviathePythonAPIexposedinsys.monitoring.\n311\nThePython/CAPI,Release3.13.3\n312 Chapter14. MonitoringCAPI\nCHAPTER\nFIFTEEN\nGENERATING EXECUTION EVENTS\nThefunctionsbelowmakeitpossibleforanextensiontofiremonitoringeventsasitemulatestheexecutionofPython\ncode. EachofthesefunctionsacceptsaPyMonitoringStatestructwhichcontainsconciseinformationaboutthe\nactivationstateofevents,aswellastheeventarguments,whichincludeaPyObject*representingthecodeobject,\ntheinstructionoffsetandsometimesadditional, event-specificarguments(seesys.monitoringfordetailsabout\nthesignaturesofthedifferenteventcallbacks). Thecodelikeargumentshouldbeaninstanceoftypes.CodeType\norofatypethatemulatesit.\nTheVMdisablestracingwhenfiringanevent,sothereisnoneedforusercodetodothat.\nMonitoringfunctionsshouldnotbecalledwithanexceptionset,exceptthoselistedbelowasworkingwiththecurrent\nexception.\ntypePyMonitoringState\nRepresentationofthestateofaneventtype. Itisallocatedbytheuserwhileitscontentsaremaintainedbythe\nmonitoringAPIfunctionsdescribedbelow.\nAllofthefunctionsbelowreturn0onsuccessand-1(withanexceptionset)onerror.\nSeesys.monitoringfordescriptionsoftheevents.\nintPyMonitoring_FirePyStartEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset)\nFireaPY_STARTevent.\nintPyMonitoring_FirePyResumeEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset)\nFireaPY_RESUMEevent.\nintPyMonitoring_FirePyReturnEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset,\nPyObject*retval)\nFireaPY_RETURNevent.\nintPyMonitoring_FirePyYieldEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset,PyObject\n*retval)\nFireaPY_YIELDevent.\nintPyMonitoring_FireCallEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset,PyObject\n*callable,PyObject*arg0)\nFireaCALLevent.\nintPyMonitoring_FireLineEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset,intlineno)\nFireaLINEevent.\nintPyMonitoring_FireJumpEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset,PyObject\n*target_offset)\nFireaJUMPevent.\nintPyMonitoring_FireBranchEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset,PyObject\n*target_offset)\nFireaBRANCHevent.\n313\nThePython/CAPI,Release3.13.3\nintPyMonitoring_FireCReturnEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset,PyObject\n*retval)\nFireaC_RETURNevent.\nintPyMonitoring_FirePyThrowEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset)\nFireaPY_THROWeventwiththecurrentexception(asreturnedbyPyErr_GetRaisedException()).\nintPyMonitoring_FireRaiseEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset)\nFireaRAISEeventwiththecurrentexception(asreturnedbyPyErr_GetRaisedException()).\nintPyMonitoring_FireCRaiseEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset)\nFireaC_RAISEeventwiththecurrentexception(asreturnedbyPyErr_GetRaisedException()).\nintPyMonitoring_FireReraiseEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset)\nFireaRERAISEeventwiththecurrentexception(asreturnedbyPyErr_GetRaisedException()).\nintPyMonitoring_FireExceptionHandledEvent(PyMonitoringState*state,PyObject*codelike,int32_t\noffset)\nFire an EXCEPTION_HANDLED event with the current exception (as returned by\nPyErr_GetRaisedException()).\nintPyMonitoring_FirePyUnwindEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset)\nFireaPY_UNWINDeventwiththecurrentexception(asreturnedbyPyErr_GetRaisedException()).\nintPyMonitoring_FireStopIterationEvent(PyMonitoringState*state,PyObject*codelike,int32_toffset,\nPyObject*value)\nFireaSTOP_ITERATIONevent. IfvalueisaninstanceofStopIteration, itisused. Otherwise, anew\nStopIterationinstanceiscreatedwithvalueasitsargument.\n15.1 Managing the Monitoring State\nMonitoring states can be managed with the help of monitoring scopes. A scope would typically correspond to a\npythonfunction.\nintPyMonitoring_EnterScope(PyMonitoringState*state_array,uint64_t*version,constuint8_t*event_types,\nPy_ssize_tlength)\nEnter a monitored scope. event_types is an array of the event IDs for events that may be fired from the\nscope. Forexample,theIDofaPY_STARTeventisthevaluePY_MONITORING_EVENT_PY_START,whichis\nnumericallyequaltothebase-2logarithmofsys.monitoring.events.PY_START.state_arrayisan\narraywithamonitoringstateentryforeacheventinevent_types,itisallocatedbytheuserbutpopulated\nby PyMonitoring_EnterScope() with information about the activation state of the event. The size of\nevent_types(andhencealsoofstate_array)isgiveninlength.\nThe version argument is a pointer to a value which should be allocated by the user together with\nstate_array and initialized to 0, and then set only by PyMonitoring_EnterScope() itself. It allows\nthisfunctiontodeterminewhethereventstateshavechangedsincethepreviouscall,andtoreturnquicklyif\ntheyhavenot.\nThescopesreferredtoherearelexicalscopes: afunction,classormethod. PyMonitoring_EnterScope()\nshouldbecalledwheneverthelexicalscopeisentered. Scopescanbereentered,reusingthesamestate_array\nand version, in situations like when emulating a recursive Python function. When a code-like\u2019s execution is\npaused,suchaswhenemulatingagenerator,thescopeneedstobeexitedandre-entered.\nThemacrosforevent_typesare:\n314 Chapter15. GeneratingExecutionEvents\nThePython/CAPI,Release3.13.3\nMacro Event\nBRANCH\nPY_MONITORING_EVENT_BRANCH\nCALL\nPY_MONITORING_EVENT_CALL\nC_RAISE\nPY_MONITORING_EVENT_C_RAISE\nC_RETURN\nPY_MONITORING_EVENT_C_RETURN\nEXCEPTION_HANDLED\nPY_MONITORING_EVENT_EXCEPTION_HANDLED\nINSTRUCTION\nPY_MONITORING_EVENT_INSTRUCTION\nJUMP\nPY_MONITORING_EVENT_JUMP\nLINE\nPY_MONITORING_EVENT_LINE\nPY_RESUME\nPY_MONITORING_EVENT_PY_RESUME\nPY_RETURN\nPY_MONITORING_EVENT_PY_RETURN\nPY_START\nPY_MONITORING_EVENT_PY_START\nPY_THROW\nPY_MONITORING_EVENT_PY_THROW\nPY_UNWIND\nPY_MONITORING_EVENT_PY_UNWIND\nPY_YIELD\nPY_MONITORING_EVENT_PY_YIELD\nRAISE\nPY_MONITORING_EVENT_RAISE\nRERAISE\nPY_MONITORING_EVENT_RERAISE\nSTOP_ITERATION\nPY_MONITORING_EVENT_STOP_ITERATION\nintPyMonitoring_ExitScope(void)\nExitthelastscopethatwasenteredwithPyMonitoring_EnterScope().\nintPY_MONITORING_IS_INSTRUMENTED_EVENT(uint8_tev)\n15.1. ManagingtheMonitoringState 315\nThePython/CAPI,Release3.13.3\nReturntrueiftheeventcorrespondingtotheeventIDevisalocalevent.\nAddedinversion3.13.\nDeprecatedsinceversion3.13.3: Thisfunctionissoftdeprecated.\n316 Chapter15. GeneratingExecutionEvents\nAPPENDIX\nA\nGLOSSARY\n>>>\nThe default Python prompt of the interactive shell. Often seen for code examples which can be executed\ninteractivelyintheinterpreter.\n...\nCanreferto:\n\u2022 ThedefaultPythonpromptoftheinteractiveshellwhenenteringthecodeforanindentedcodeblock,\nwhen within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or\ntriplequotes),orafterspecifyingadecorator.\n\u2022 TheEllipsisbuilt-inconstant.\nabstractbaseclass\nAbstractbaseclassescomplementduck-typingbyprovidingawaytodefineinterfaceswhenothertechniques\nlikehasattr()wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual\nsubclasses, which are classes that don\u2019t inherit from a class but are still recognized by isinstance() and\nissubclass();seetheabcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-\ntures(inthecollections.abcmodule),numbers(inthenumbersmodule),streams(intheiomodule),\nimportfindersandloaders(intheimportlib.abcmodule). YoucancreateyourownABCswiththeabc\nmodule.\nannotation\nAlabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention\nasatypehint.\nAnnotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-\ntributes, andfunctionsarestoredinthe__annotations__specialattributeofmodules, classes, andfunc-\ntions,respectively.\nSeevariableannotation,functionannotation,PEP484andPEP526,whichdescribethisfunctionality. Also\nseeannotations-howtoforbestpracticesonworkingwithannotations.\nargument\nAvaluepassedtoafunction(ormethod)whencallingthefunction. Therearetwokindsofargument:\n\u2022 keywordargument: anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa\nvalueinadictionaryprecededby**. Forexample,3and5arebothkeywordargumentsinthefollowing\ncallstocomplex():\ncomplex(real=3, imag=5)\ncomplex(**{'real': 3, 'imag': 5})\n\u2022 positionalargument: anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe\nbeginningofanargumentlistand/orbepassedaselementsofaniterableprecededby*. Forexample,3\nand5arebothpositionalargumentsinthefollowingcalls:\ncomplex(3, 5)\ncomplex(*(3, 5))\n317\nThePython/CAPI,Release3.13.3\nArguments are assigned to the named local variables in a function body. See the calls section for the rules\ngoverningthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument;theevaluated\nvalueisassignedtothelocalvariable.\nSeealsotheparameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\nandPEP362.\nasynchronouscontextmanager\nAnobjectwhichcontrolstheenvironmentseeninanasync withstatementbydefining__aenter__()and\n__aexit__()methods. IntroducedbyPEP492.\nasynchronousgenerator\nAfunctionwhichreturnsanasynchronousgeneratoriterator. Itlookslikeacoroutinefunctiondefinedwith\nasync def except that it contains yield expressions for producing a series of values usable in an async\nforloop.\nUsuallyreferstoanasynchronousgeneratorfunction, butmayrefertoanasynchronousgeneratoriterator in\nsomecontexts. Incaseswheretheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\nAnasynchronousgeneratorfunctionmaycontainawaitexpressionsaswellasasync for,andasync with\nstatements.\nasynchronousgeneratoriterator\nAnobjectcreatedbyaasynchronousgeneratorfunction.\nThisisanasynchronousiteratorwhichwhencalledusingthe__anext__()methodreturnsanawaitableobject\nwhichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenextyieldexpression.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npendingtry-statements). Whentheasynchronousgeneratoriteratoreffectivelyresumeswithanotherawaitable\nreturnedby__anext__(),itpicksupwhereitleftoff. SeePEP492andPEP525.\nasynchronousiterable\nAn object, that can be used in an async for statement. Must return an asynchronous iterator from its\n__aiter__()method. IntroducedbyPEP492.\nasynchronousiterator\nAn object that implements the __aiter__() and __anext__() methods. __anext__() must return an\nawaitableobject. async forresolvestheawaitablesreturnedbyanasynchronousiterator\u2019s__anext__()\nmethoduntilitraisesaStopAsyncIterationexception. IntroducedbyPEP492.\nattribute\nAvalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,\nifanobjectohasanattributeaitwouldbereferencedaso.a.\nItispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample\nusingsetattr(),iftheobjectallowsit. Suchanattributewillnotbeaccessibleusingadottedexpression,\nandwouldinsteadneedtoberetrievedwithgetattr().\nawaitable\nAnobjectthatcanbeusedinanawaitexpression. Canbeacoroutineoranobjectwithan__await__()\nmethod. SeealsoPEP492.\nBDFL\nBenevolentDictatorForLife,a.k.a. GuidovanRossum,Python\u2019screator.\nbinaryfile\nAfileobjectabletoreadandwritebytes-likeobjects. Examplesofbinaryfilesarefilesopenedinbinarymode\n('rb','wb'or'rb+'),sys.stdin.buffer,sys.stdout.buffer,andinstancesofio.BytesIOand\ngzip.GzipFile.\nSeealsotextfileforafileobjectabletoreadandwritestrobjects.\nborrowedreference\nInPython\u2019sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot\nownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection\ncanremovethelaststrongreferencetotheobjectandsodestroyit.\n318 AppendixA. Glossary\nThePython/CAPI,Release3.13.3\nCallingPy_INCREF()ontheborrowedreferenceisrecommendedtoconvertittoastrongreferencein-place,\nexceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. ThePy_NewRef()\nfunctioncanbeusedtocreateanewstrongreference.\nbytes-likeobject\nAn object that supports the Buffer Protocol and can export a C-contiguous buffer. This includes all bytes,\nbytearray,andarray.arrayobjects,aswellasmanycommonmemoryviewobjects. Bytes-likeobjects\ncanbeusedforvariousoperationsthatworkwithbinarydata;theseincludecompression,savingtoabinary\nfile,andsendingoverasocket.\nSomeoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas\u201cread-write\nbytes-likeobjects\u201d. Examplemutablebufferobjectsincludebytearrayandamemoryviewofabytearray.\nOther operations require the binary data to be stored in immutable objects (\u201cread-only bytes-like objects\u201d);\nexamplesoftheseincludebytesandamemoryviewofabytesobject.\nbytecode\nPythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython\ninterpreter. Thebytecodeisalsocachedin.pycfilessothatexecutingthesamefileisfasterthesecondtime\n(recompilation from source to bytecode can be avoided). This \u201cintermediate language\u201d is said to run on a\nvirtualmachinethatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare\nnotexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.\nAlistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.\ncallable\nAcallableisanobjectthatcanbecalled,possiblywithasetofarguments(seeargument),withthefollowing\nsyntax:\ncallable(argument1, argument2, argumentN)\nAfunction,andbyextensionamethod,isacallable. Aninstanceofaclassthatimplementsthe__call__()\nmethodisalsoacallable.\ncallback\nAsubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.\nclass\nA template for creating user-defined objects. Class definitions normally contain method definitions which\noperateoninstancesoftheclass.\nclassvariable\nAvariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).\nclosurevariable\nAfreevariablereferencedfromanestedscopethatisdefinedinanouterscoperatherthanbeingresolvedat\nruntime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to\nallowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.\nForexample,intheinnerfunctioninthefollowingcode,bothxandprintarefreevariables,butonlyxis\naclosurevariable:\ndef outer():\nx = 0\ndef inner():\nnonlocal x\nx += 1\nprint(x)\nreturn inner\nDuetothecodeobject.co_freevarsattribute(which,despiteitsname,onlyincludesthenamesofclosure\nvariablesratherthanlistingallreferencedfreevariables),themoregeneralfreevariabletermissometimesused\nevenwhentheintendedmeaningistoreferspecificallytoclosurevariables.\n319\nThePython/CAPI,Release3.13.3\ncomplexnumber\nAnextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand\nanimaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof-1),often\nwritten i in mathematics or j in engineering. Python has built-in support for complex numbers, which are\nwrittenwiththislatternotation;theimaginarypartiswrittenwithajsuffix,e.g.,3+1j. Togetaccesstocom-\nplexequivalentsofthemathmodule,usecmath. Useofcomplexnumbersisafairlyadvancedmathematical\nfeature. Ifyou\u2019renotawareofaneedforthem,it\u2019salmostcertainyoucansafelyignorethem.\ncontext\nThistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:\n\u2022 Thetemporarystateorenvironmentestablishedbyacontextmanagerviaawithstatement.\n\u2022 The collection of keyvalue bindings associated with a particular contextvars.Context object and\naccessedviaContextVarobjects. Alsoseecontextvariable.\n\u2022 Acontextvars.Contextobject. Alsoseecurrentcontext.\ncontextmanagementprotocol\nThe__enter__()and__exit__()methodscalledbythewithstatement. SeePEP343.\ncontextmanager\nAnobjectwhichimplementsthecontextmanagementprotocol andcontrolstheenvironmentseenina with\nstatement. SeePEP343.\ncontextvariable\nA variable whose value depends on which context is the current context. Values are accessed via\ncontextvars.ContextVarobjects. Contextvariablesareprimarilyusedtoisolatestatebetweenconcur-\nrentasynchronoustasks.\ncontiguous\nAbufferisconsideredcontiguousexactlyifitiseitherC-contiguousorFortrancontiguous. Zero-dimensional\nbuffersareCandFortrancontiguous. Inone-dimensionalarrays,theitemsmustbelaidoutinmemorynext\ntoeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the\nlastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous\narrays,thefirstindexvariesthefastest.\ncoroutine\nCoroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at\nanotherpoint. Coroutinescanbeentered,exited,andresumedatmanydifferentpoints. Theycanbeimple-\nmentedwiththeasync defstatement. SeealsoPEP492.\ncoroutinefunction\nAfunctionwhichreturnsacoroutineobject. Acoroutinefunctionmaybedefinedwiththeasync defstate-\nment, and may contain await, async for, and async with keywords. These were introduced by PEP\n492.\nCPython\nThecanonicalimplementationofthePythonprogramminglanguage,asdistributedonpython.org. Theterm\n\u201cCPython\u201disusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.\ncurrentcontext\nThecontext (contextvars.Contextobject)thatiscurrentlyusedbyContextVarobjectstoaccess(get\nor set) the values of context variables. Each thread has its own current context. Frameworks for executing\nasynchronous tasks (see asyncio) associate each task with a context which becomes the current context\nwheneverthetaskstartsorresumesexecution.\ndecorator\nAfunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe@wrappersyntax.\nCommonexamplesfordecoratorsareclassmethod()andstaticmethod().\nThedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-\nalent:\n320 AppendixA. Glossary\nThePython/CAPI,Release3.13.3\ndef f(arg):\n...\nf = staticmethod(f)\n@staticmethod\ndef f(arg):\n...\nThe same concept exists for classes, but is less commonly used there. See the documentation for function\ndefinitionsandclassdefinitionsformoreaboutdecorators.\ndescriptor\nAnyobjectwhichdefinesthemethods__get__(),__set__(),or__delete__(). Whenaclassattribute\nis a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.b to get,\nset or delete an attribute looks up the object named b in the class dictionary for a, but if b is a descriptor,\ntherespectivedescriptormethodgetscalled. Understandingdescriptorsisakeytoadeepunderstandingof\nPythonbecausetheyarethebasisformanyfeaturesincludingfunctions,methods,properties,classmethods,\nstaticmethods,andreferencetosuperclasses.\nFormoreinformationaboutdescriptors\u2019methods,seedescriptorsortheDescriptorHowToGuide.\ndictionary\nAnassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith__hash__()\nand__eq__()methods. CalledahashinPerl.\ndictionarycomprehension\nA compact way to process all or part of the elements in an iterable and return a dictionary with the re-\nsults. results = {n: n ** 2 for n in range(10)}generatesadictionarycontainingkeynmapped\ntovaluen ** 2. Seecomprehensions.\ndictionaryview\nTheobjectsreturnedfromdict.keys(),dict.values(),anddict.items()arecalleddictionaryviews.\nTheyprovideadynamicviewonthedictionary\u2019sentries,whichmeansthatwhenthedictionarychanges,the\nview reflects these changes. To force the dictionary view to become a full list use list(dictview). See\ndict-views.\ndocstring\nAstringliteralwhichappearsasthefirstexpressioninaclass,functionormodule. Whileignoredwhenthe\nsuiteisexecuted,itisrecognizedbythecompilerandputintothe__doc__attributeoftheenclosingclass,\nfunctionormodule. Sinceitisavailableviaintrospection,itisthecanonicalplacefordocumentationofthe\nobject.\nduck-typing\nAprogrammingstylewhichdoesnotlookatanobject\u2019stypetodetermineifithastherightinterface;instead,\nthe method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be\na duck.\u201d) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility\nby allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). (Note,\nhowever, that duck-typing can be complemented with abstract base classes.) Instead, it typically employs\nhasattr()testsorEAFPprogramming.\nEAFP\nEasier to ask for forgiveness than permission. This common Python coding style assumes the existence of\nvalid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is\ncharacterizedbythepresenceofmanytryandexceptstatements. ThetechniquecontrastswiththeLBYL\nstylecommontomanyotherlanguagessuchasC.\nexpression\nApieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof\nexpressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In\ncontrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealsostatementswhich\ncannotbeusedasexpressions,suchaswhile. Assignmentsarealsostatements,notexpressions.\n321\nThePython/CAPI,Release3.13.3\nextensionmodule\nAmodulewritteninCorC++,usingPython\u2019sCAPItointeractwiththecoreandwithusercode.\nf-string\nString literals prefixed with 'f' or 'F' are commonly called \u201cf-strings\u201d which is short for formatted string\nliterals. SeealsoPEP498.\nfileobject\nAnobjectexposingafile-orientedAPI(withmethodssuchasread()orwrite())toanunderlyingresource.\nDependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof\nstorageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).\nFileobjectsarealsocalledfile-likeobjectsorstreams.\nThereareactuallythreecategoriesoffileobjects: rawbinaryfiles, bufferedbinaryfilesandtextfiles. Their\ninterfaces are defined in the io module. The canonical way to create a file object is by using the open()\nfunction.\nfile-likeobject\nAsynonymforfileobject.\nfilesystemencodinganderrorhandler\nEncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto\ntheoperatingsystem.\nThefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding\nfailstoprovidethisguarantee,APIfunctionscanraiseUnicodeError.\nThe sys.getfilesystemencoding() and sys.getfilesystemencodeerrors() functions can be\nusedtogetthefilesystemencodinganderrorhandler.\nThefilesystemencodinganderrorhandlerareconfiguredatPythonstartupbythePyConfig_Read()func-\ntion: seefilesystem_encodingandfilesystem_errorsmembersofPyConfig.\nSeealsothelocaleencoding.\nfinder\nAnobjectthattriestofindtheloaderforamodulethatisbeingimported.\nTherearetwotypesoffinder: metapathfindersforusewithsys.meta_path,andpathentryfindersforuse\nwithsys.path_hooks.\nSeefinders-and-loadersandimportlibformuchmoredetail.\nfloordivision\nMathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris//. Forexample,the\nexpression11 // 4evaluatesto2incontrasttothe2.75returnedbyfloattruedivision. Notethat(-11)\n// 4is-3becausethatis-2.75roundeddownward. SeePEP238.\nfreethreading\nAthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.\nThisisincontrasttotheglobalinterpreterlockwhichallowsonlyonethreadtoexecutePythonbytecodeata\ntime. SeePEP703.\nfreevariable\nFormally, as defined in the language execution model, a free variable is any variable used in a namespace\nwhichisnotalocalvariableinthatnamespace. Seeclosurevariableforanexample. Pragmatically,duetothe\nnameofthecodeobject.co_freevarsattribute,thetermisalsosometimesusedasasynonymforclosure\nvariable.\nfunction\nAseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormoreargumentswhich\nmaybeusedintheexecutionofthebody. Seealsoparameter,method,andthefunctionsection.\nfunctionannotation\nAnannotationofafunctionparameterorreturnvalue.\n322 AppendixA. Glossary\nThePython/CAPI,Release3.13.3\nFunction annotations are usually used for type hints: for example, this function is expected to take two int\nargumentsandisalsoexpectedtohaveanintreturnvalue:\ndef sum_two_numbers(a: int, b: int) -> int:\nreturn a + b\nFunctionannotationsyntaxisexplainedinsectionfunction.\nSeevariableannotationandPEP484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest\npracticesonworkingwithannotations.\n__future__\nAfuturestatement,from __future__ import <feature>,directsthecompilertocompilethecurrent\nmoduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The__future__\nmoduledocumentsthepossiblevaluesoffeature. Byimportingthismoduleandevaluatingitsvariables,you\ncanseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:\n>>> import __future__\n>>> __future__.division\n_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)\ngarbagecollection\nTheprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference\ncountingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector\ncanbecontrolledusingthegcmodule.\ngenerator\nA function which returns a generator iterator. It looks like a normal function except that it contains yield\nexpressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe\nnext()function.\nUsuallyreferstoageneratorfunction,butmayrefertoageneratoriterator insomecontexts. Incaseswhere\ntheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\ngeneratoriterator\nAnobjectcreatedbyageneratorfunction.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npending try-statements). When the generator iterator resumes, it picks up where it left off (in contrast to\nfunctionswhichstartfreshoneveryinvocation).\ngeneratorexpression\nAnexpressionthatreturnsaniterator. Itlookslikeanormalexpressionfollowedbyaforclausedefininga\nloop variable, range, andan optional if clause. The combinedexpressiongeneratesvaluesfor an enclosing\nfunction:\n>>> sum(i*i for i in range(10)) # sum of squares 0, 1, 4, ... 81\n285\ngenericfunction\nAfunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-\nplementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.\nSeealsothesingledispatchglossaryentry,thefunctools.singledispatch()decorator,andPEP443.\ngenerictype\nAtypethatcanbeparameterized; typicallyacontainerclasssuchaslistordict. Usedfortypehintsand\nannotations.\nFormoredetails,seegenericaliastypes,PEP483,PEP484,PEP585,andthetypingmodule.\nGIL\nSeeglobalinterpreterlock.\n323\nThePython/CAPI,Release3.13.3\nglobalinterpreterlock\nThe mechanism used by the CPython interpreter to assure that only one thread executes Python bytecode at\na time. This simplifies the CPython implementation by making the object model (including critical built-in\ntypessuchasdict)implicitlysafeagainstconcurrentaccess. Lockingtheentireinterpretermakesiteasier\nfortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor\nmachines.\nHowever,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen\ndoingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen\ndoingI/O.\nAsofPython3.13, theGILcanbedisabledusingthe--disable-gilbuildconfiguration. Afterbuilding\nPythonwiththisoption,codemustberunwith-X gil=0oraftersettingthePYTHON_GIL=0environment\nvariable. This feature enables improved performance for multi-threaded applications and makes it easier to\nusemulti-coreCPUsefficiently. Formoredetails,seePEP703.\nhash-basedpyc\nAbytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto\ndetermineitsvalidity. Seepyc-invalidation.\nhashable\nAnobjectishashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa__hash__()\nmethod), and can be compared to other objects (it needs an __eq__() method). Hashable objects which\ncompareequalmusthavethesamehashvalue.\nHashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe\nhashvalueinternally.\nMost of Python\u2019s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)\narenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.\nObjectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except\nwiththemselves),andtheirhashvalueisderivedfromtheirid().\nIDLE\nAnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-\nronmentwhichshipswiththestandarddistributionofPython.\nimmortal\nImmortalobjectsareaCPythonimplementationdetailintroducedinPEP683.\nIfanobjectisimmortal,itsreferencecount isnevermodified,andthereforeitisneverdeallocatedwhilethe\ninterpreterisrunning. Forexample,TrueandNoneareimmortalinCPython.\nimmutable\nAnobjectwithafixedvalue. Immutableobjectsincludenumbers,stringsandtuples. Suchanobjectcannot\nbealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein\nplaceswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.\nimportpath\nAlistoflocations(orpathentries)thataresearchedbythepathbasedfinderformodulestoimport. During\nimport,thislistoflocationsusuallycomesfromsys.path,butforsubpackagesitmayalsocomefromthe\nparentpackage\u2019s__path__attribute.\nimporting\nTheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.\nimporter\nAnobjectthatbothfindsandloadsamodule;bothafinderandloaderobject.\ninteractive\nPythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter\nprompt, immediately execute them and see their results. Just launch python with no arguments (possibly\nby selecting it fromyour computer\u2019s mainmenu). It isa very powerfulway to testout new ideas orinspect\nmodulesandpackages(rememberhelp(x)). Formoreoninteractivemode,seetut-interac.\n324 AppendixA. Glossary\nThePython/CAPI,Release3.13.3\ninterpreted\nPythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause\nofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly\ncreating an executable which is then run. Interpreted languages typically have a shorter development/debug\ncyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealsointeractive.\ninterpretershutdown\nWhenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated\nresources, suchasmodulesandvariouscriticalinternalstructures. Italsomakesseveralcallstothegarbage\ncollector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-\ncutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction\nanymore(commonexamplesarelibrarymodulesorthewarningsmachinery).\nThemainreasonforinterpretershutdownisthatthe__main__moduleorthescriptbeingrunhasfinished\nexecuting.\niterable\nAnobjectcapableofreturningitsmembersoneatatime. Examplesofiterablesincludeallsequencetypes\n(such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any\nclassesyoudefinewithan__iter__()methodorwitha__getitem__()methodthatimplementssequence\nsemantics.\nIterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(),\n\u2026). Whenaniterableobjectispassedasanargumenttothebuilt-infunctioniter(),itreturnsaniterator\nfortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot\nnecessarytocalliter()ordealwithiteratorobjectsyourself. Theforstatementdoesthatautomaticallyfor\nyou,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealsoiterator,\nsequence,andgenerator.\niterator\nAn object representing a stream of data. Repeated calls to the iterator\u2019s __next__() method (or passing\nittothebuilt-infunctionnext())returnsuccessiveitemsinthestream. Whennomoredataareavailablea\nStopIterationexceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls\ntoits__next__()methodjustraiseStopIterationagain. Iteratorsarerequiredtohavean__iter__()\nmethodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces\nwhereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A\ncontainerobject(suchasalist)producesafreshnewiteratoreachtimeyoupassittotheiter()function\noruseitinaforloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused\ninthepreviousiterationpass,makingitappearlikeanemptycontainer.\nMoreinformationcanbefoundintypeiter.\nCPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine\n__iter__(). Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof\niteratoroperations.\nkeyfunction\nAkeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,\nlocale.strxfrm()isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.\nA number of tools in Python accept key functions to control how elements are ordered or grouped. They\ninclude min(), max(), sorted(), list.sort(), heapq.merge(), heapq.nsmallest(), heapq.\nnlargest(),anditertools.groupby().\nThere are several ways to create a key function. For example. the str.lower() method can serve as a\nkey function for case insensitive sorts. Alternatively, a key function can be built from a lambda expression\nsuchaslambda r: (r[0], r[2]). Also,operator.attrgetter(),operator.itemgetter(),and\noperator.methodcaller()arethreekeyfunctionconstructors. SeetheSortingHOWTOforexamples\nofhowtocreateandusekeyfunctions.\nkeywordargument\nSeeargument.\n325\nThePython/CAPI,Release3.13.3\nlambda\nAnanonymousinlinefunctionconsistingofasingleexpressionwhichisevaluatedwhenthefunctioniscalled.\nThesyntaxtocreatealambdafunctionislambda [parameters]: expression\nLBYL\nLookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This\nstylecontrastswiththeEAFPapproachandischaracterizedbythepresenceofmanyifstatements.\nIn a multi-threaded environment, the LBYL approach can risk introducing a race condition between \u201cthe\nlooking\u201dand\u201ctheleaping\u201d. Forexample, thecode, if key in mapping: return mapping[key] can\nfailifanotherthreadremoveskeyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved\nwithlocksorbyusingtheEAFPapproach.\nlexicalanalyzer\nFormalnameforthetokenizer;seetoken.\nlist\nAbuilt-inPythonsequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist\nsinceaccesstoelementsisO(1).\nlistcomprehension\nAcompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result\n= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0]generatesalistofstringscon-\ntainingevenhexnumbers(0x..) intherangefrom0to255. Theifclauseisoptional. Ifomitted,allelements\ninrange(256)areprocessed.\nloader\nAn object that loads a module. It must define the exec_module() and create_module() methods to\nimplementtheLoaderinterface. Aloaderistypicallyreturnedbyafinder. Seealso:\n\u2022 finders-and-loaders\n\u2022 importlib.abc.Loader\n\u2022 PEP302\nlocaleencoding\nOn Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.\nLC_CTYPE, new_locale).\nOnWindows,itistheANSIcodepage(ex: \"cp1252\").\nOnAndroidandVxWorks,Pythonuses\"utf-8\"asthelocaleencoding.\nlocale.getencoding()canbeusedtogetthelocaleencoding.\nSeealsothefilesystemencodinganderrorhandler.\nmagicmethod\nAninformalsynonymforspecialmethod.\nmapping\nA container object that supports arbitrary key lookups and implements the methods specified in the\ncollections.abc.Mapping or collections.abc.MutableMapping abstract base classes. Exam-\nples include dict, collections.defaultdict, collections.OrderedDict and collections.\nCounter.\nmetapathfinder\nAfinderreturnedbyasearchofsys.meta_path. Metapathfindersarerelatedto,butdifferentfrompath\nentryfinders.\nSeeimportlib.abc.MetaPathFinderforthemethodsthatmetapathfindersimplement.\nmetaclass\nTheclassofaclass. Classdefinitionscreateaclassname, aclassdictionary, andalistofbaseclasses. The\nmetaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-\ngramming languages provide a default implementation. What makes Python special is that it is possible to\ncreatecustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide\n326 AppendixA. Glossary\nThePython/CAPI,Release3.13.3\npowerful,elegantsolutions. Theyhavebeenusedforloggingattributeaccess,addingthread-safety,tracking\nobjectcreation,implementingsingletons,andmanyothertasks.\nMoreinformationcanbefoundinmetaclasses.\nmethod\nAfunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod\nwillgettheinstanceobjectasitsfirstargument(whichisusuallycalledself). Seefunctionandnestedscope.\nmethodresolutionorder\nMethod Resolution Order is the order in which base classes are searched for a member during lookup. See\npython_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.\nmodule\nAnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary\nPythonobjects. ModulesareloadedintoPythonbytheprocessofimporting.\nSeealsopackage.\nmodulespec\nAnamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceofimportlib.\nmachinery.ModuleSpec.\nSeealsomodule-specs.\nMRO\nSeemethodresolutionorder.\nmutable\nMutableobjectscanchangetheirvaluebutkeeptheirid(). Seealsoimmutable.\nnamedtuple\nTheterm\u201cnamedtuple\u201dappliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare\nalsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.\nSeveral built-in types are named tuples, including the values returned by time.localtime() and os.\nstat(). Anotherexampleissys.float_info:\n>>> sys.float_info[1] # indexed access\n1024\n>>> sys.float_info.max_exp # named field access\n1024\n>>> isinstance(sys.float_info, tuple) # kind of tuple\nTrue\nSome named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be\ncreated from a regular class definition that inherits from tuple and that defines named fields. Such a class\ncanbewrittenbyhand,oritcanbecreatedbyinheritingtyping.NamedTuple,orwiththefactoryfunction\ncollections.namedtuple(). Thelattertechniquesalsoaddsomeextramethodsthatmaynotbefound\ninhand-writtenorbuilt-innamedtuples.\nnamespace\nThe place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,\nglobal and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support\nmodularitybypreventingnamingconflicts. Forinstance,thefunctionsbuiltins.openandos.open()are\ndistinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear\nwhich module implements a function. For instance, writing random.seed() or itertools.islice()\nmakesitclearthatthosefunctionsareimplementedbytherandomanditertoolsmodules,respectively.\nnamespacepackage\nA package which serves only as a container for subpackages. Namespace packages may have no physical\nrepresentation,andspecificallyarenotlikearegularpackagebecausetheyhaveno__init__.pyfile.\nNamespacepackagesallowseveralindividuallyinstallablepackagestohaveacommonparentpackage. Oth-\nerwise,itisrecommendedtousearegularpackage.\n327\nThePython/CAPI,Release3.13.3\nFormoreinformation,seePEP420andreference-namespace-package.\nSeealsomodule.\nnestedscope\nThe ability to refer to a variable in an enclosing definition. For instance, a function defined inside another\nfunctioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference\nandnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables\nreadandwritetotheglobalnamespace. Thenonlocalallowswritingtoouterscopes.\nnew-styleclass\nOld name for the flavor of classes now used for all class objects. In earlier Python versions, only\nnew-style classes could use Python\u2019s newer, versatile features like __slots__, descriptors, properties,\n__getattribute__(),classmethods,andstaticmethods.\nobject\nAnydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany\nnew-styleclass.\noptimizedscope\nA scope where target local variable names are reliably known to the compiler when the code is compiled,\nallowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,\ncoroutines,comprehensions,andgeneratorexpressionsareoptimizedinthisfashion. Note: mostinterpreter\noptimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames\narerestrictedtooptimizedscopes.\npackage\nA Python module which can contain submodules or recursively, subpackages. Technically, a package is a\nPythonmodulewitha__path__attribute.\nSeealsoregularpackageandnamespacepackage.\nparameter\nAnamedentityinafunction(ormethod)definitionthatspecifiesanargument (orinsomecases,arguments)\nthatthefunctioncanaccept. Therearefivekindsofparameter:\n\u2022 positional-or-keyword: specifiesanargumentthatcanbepassedeitherpositionallyorasakeywordargu-\nment. Thisisthedefaultkindofparameter,forexamplefooandbarinthefollowing:\ndef func(foo, bar=None): ...\n\u2022 positional-only: specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters\ncanbedefinedbyincludinga/characterintheparameterlistofthefunctiondefinitionafterthem,for\nexampleposonly1andposonly2inthefollowing:\ndef func(posonly1, posonly2, /, positional_or_keyword): ...\n\u2022 keyword-only: specifiesanargumentthatcanbesuppliedonlybykeyword. Keyword-onlyparameters\ncanbedefinedbyincludingasinglevar-positionalparameterorbare*intheparameterlistofthefunction\ndefinitionbeforethem,forexamplekw_only1andkw_only2inthefollowing:\ndef func(arg, *, kw_only1, kw_only2): ...\n\u2022 var-positional: specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition\ntoanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby\nprependingtheparameternamewith*,forexampleargsinthefollowing:\ndef func(*args, **kwargs): ...\n\u2022 var-keyword: specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-\nwordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending\ntheparameternamewith**,forexamplekwargsintheexampleabove.\n328 AppendixA. Glossary\nThePython/CAPI,Release3.13.3\nParameters can specify both optional and required arguments, as well as default values for some optional\narguments.\nSeealsotheargumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\ntheinspect.Parameterclass,thefunctionsection,andPEP362.\npathentry\nAsinglelocationontheimportpathwhichthepathbasedfinderconsultstofindmodulesforimporting.\npathentryfinder\nA finder returned by a callable on sys.path_hooks (i.e. a path entry hook) which knows how to locate\nmodulesgivenapathentry.\nSeeimportlib.abc.PathEntryFinderforthemethodsthatpathentryfindersimplement.\npathentryhook\nAcallableonthesys.path_hookslistwhichreturnsapathentryfinderifitknowshowtofindmoduleson\naspecificpathentry.\npathbasedfinder\nOneofthedefaultmetapathfinderswhichsearchesanimportpathformodules.\npath-likeobject\nAn object representing a file system path. A path-like object is either a str or bytes object representing\na path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike\nprotocol can be converted to a str or bytes file system path by calling the os.fspath() function; os.\nfsdecode() and os.fsencode() can be used to guarantee a str or bytes result instead, respectively.\nIntroducedbyPEP519.\nPEP\nPythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,\nordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical\nspecificationandarationaleforproposedfeatures.\nPEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity\ninputonanissue, andfordocumentingthedesigndecisionsthathavegoneintoPython. ThePEPauthoris\nresponsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.\nSeePEP1.\nportion\nA set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as\ndefinedinPEP420.\npositionalargument\nSeeargument.\nprovisionalAPI\nA provisional API is one which has been deliberately excluded from the standard library\u2019s backwards com-\npatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked\nprovisional, backwards incompatible changes (up to and including removal of the interface) may occur if\ndeemednecessarybycoredevelopers. Suchchangeswillnotbemadegratuitously\u2013theywilloccuronlyif\nseriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.\nEven for provisional APIs, backwards incompatible changes are seen as a \u201csolution of last resort\u201d - every\nattemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.\nThisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign\nerrorsforextendedperiodsoftime. SeePEP411formoredetails.\nprovisionalpackage\nSeeprovisionalAPI.\nPython3000\nNicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe\ndistantfuture.) Thisisalsoabbreviated\u201cPy3k\u201d.\n329\nThePython/CAPI,Release3.13.3\nPythonic\nAnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan\nimplementingcodeusingconceptscommontootherlanguages. Forexample,acommonidiominPythonis\ntoloopoverallelementsofaniterableusingaforstatement. Manyotherlanguagesdon\u2019thavethistypeof\nconstruct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:\nfor i in range(len(food)):\nprint(food[i])\nAsopposedtothecleaner,Pythonicmethod:\nfor piece in food:\nprint(piece)\nqualifiedname\nAdottednameshowingthe\u201cpath\u201dfromamodule\u2019sglobalscopetoaclass,functionormethoddefinedinthat\nmodule, as defined in PEP 3155. For top-level functions and classes, the qualified name is the same as the\nobject\u2019sname:\n>>> class C:\n... class D:\n... def meth(self):\n... pass\n...\n>>> C.__qualname__\n'C'\n>>> C.D.__qualname__\n'C.D'\n>>> C.D.meth.__qualname__\n'C.D.meth'\nWhenusedtorefertomodules,thefullyqualifiednamemeanstheentiredottedpathtothemodule,including\nanyparentpackages,e.g. email.mime.text:\n>>> import email.mime.text\n>>> email.mime.text.__name__\n'email.mime.text'\nreferencecount\nThenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.\nSome objects are immortal and have reference counts that are never modified, and therefore the objects are\nneverdeallocated. ReferencecountingisgenerallynotvisibletoPythoncode, butitisakeyelementofthe\nCPythonimplementation. Programmerscancallthesys.getrefcount()functiontoreturnthereference\ncountforaparticularobject.\nregularpackage\nAtraditionalpackage,suchasadirectorycontainingan__init__.pyfile.\nSeealsonamespacepackage.\nREPL\nAnacronymforthe\u201cread\u2013eval\u2013printloop\u201d,anothernamefortheinteractiveinterpretershell.\n__slots__\nAdeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating\ninstancedictionaries. Thoughpopular,thetechniqueissomewhattrickytogetrightandisbestreservedfor\nrarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.\nsequence\nAn iterable which supports efficient element access using integer indices via the __getitem__() special\nmethod and defines a __len__() method that returns the length of the sequence. Some built-in sequence\n330 AppendixA. Glossary\nThePython/CAPI,Release3.13.3\ntypesarelist,str,tuple,andbytes. Notethatdictalsosupports__getitem__()and__len__(),\nbut is considered a mapping rather than a sequence because the lookups use arbitrary hashable keys rather\nthanintegers.\nThecollections.abc.Sequenceabstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust\n__getitem__()and__len__(),addingcount(),index(),__contains__(),and__reversed__().\nTypes that implement this expanded interface can be registered explicitly using register(). For more\ndocumentationonsequencemethodsgenerally,seeCommonSequenceOperations.\nsetcomprehension\nAcompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results\n= {c for c in 'abracadabra' if c not in 'abc'}generatesthesetofstrings{'r', 'd'}. See\ncomprehensions.\nsingledispatch\nAformofgenericfunctiondispatchwheretheimplementationischosenbasedonthetypeofasingleargument.\nslice\nAnobjectusuallycontainingaportionofasequence. Asliceiscreatedusingthesubscriptnotation,[]with\ncolons between numbers when several are given, such as in variable_name[1:3:5]. The bracket (sub-\nscript)notationusessliceobjectsinternally.\nsoftdeprecated\nAsoftdeprecatedAPIshouldnotbeusedinnewcode,butitissafeforalreadyexistingcodetouseit. The\nAPIremainsdocumentedandtested,butwillnotbeenhancedfurther.\nSoftdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.\nSeePEP387: SoftDeprecation.\nspecialmethod\nAmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such\nmethodshavenamesstartingandendingwithdoubleunderscores. Specialmethodsaredocumentedinspe-\ncialnames.\nstatement\nAstatementispartofasuite(a\u201cblock\u201dofcode). Astatementiseitheranexpressionoroneofseveralconstructs\nwithakeyword,suchasif,whileorfor.\nstatictypechecker\nAnexternaltoolthatreadsPythoncodeandanalyzesit, lookingforissuessuchasincorrecttypes. Seealso\ntypehintsandthetypingmodule.\nstrongreference\nIn Python\u2019s C API, a strong reference is a reference to an object which is owned by the code holding the\nreference. ThestrongreferenceistakenbycallingPy_INCREF()whenthereferenceiscreatedandreleased\nwithPy_DECREF()whenthereferenceisdeleted.\nThePy_NewRef()functioncanbeusedtocreateastrongreferencetoanobject. Usually,thePy_DECREF()\nfunctionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking\nonereference.\nSeealsoborrowedreference.\ntextencoding\nAstringinPythonisasequenceofUnicodecodepoints(inrangeU+0000\u2013U+10FFFF).Tostoreortransfer\nastring,itneedstobeserializedasasequenceofbytes.\nSerializingastringintoasequenceofbytesisknownas\u201cencoding\u201d,andrecreatingthestringfromthesequence\nofbytesisknownas\u201cdecoding\u201d.\nThereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas\u201ctextencodings\u201d.\ntextfile\nAfileobjectabletoreadandwritestrobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream\nandhandlesthetextencodingautomatically. Examplesoftextfilesarefilesopenedintextmode('r'or'w'),\nsys.stdin,sys.stdout,andinstancesofio.StringIO.\n331\nThePython/CAPI,Release3.13.3\nSeealsobinaryfileforafileobjectabletoreadandwritebytes-likeobjects.\ntoken\nA small unit of source code, generated by the lexical analyzer (also called the tokenizer). Names, numbers,\nstrings,operators,newlinesandsimilararerepresentedbytokens.\nThe tokenize module exposes Python\u2019s lexical analyzer. The token module contains information on the\nvarioustypesoftokens.\ntriple-quotedstring\nAstringwhichisboundbythreeinstancesofeitheraquotationmark(\u201d)oranapostrophe(\u2018). Whiletheydon\u2019t\nprovide any functionality not available with single-quoted strings, they are useful for a number of reasons.\nTheyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines\nwithouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.\ntype\nThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject\u2019stypeis\naccessibleasits__class__attributeorcanberetrievedwithtype(obj).\ntypealias\nAsynonymforatype,createdbyassigningthetypetoanidentifier.\nTypealiasesareusefulforsimplifyingtypehints. Forexample:\ndef remove_gray_shades(\ncolors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\npass\ncouldbemademorereadablelikethis:\nColor = tuple[int, int, int]\ndef remove_gray_shades(colors: list[Color]) -> list[Color]:\npass\nSeetypingandPEP484,whichdescribethisfunctionality.\ntypehint\nAnannotationthatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn\nvalue.\nTypehintsareoptionalandarenotenforcedbyPythonbuttheyareusefultostatictypecheckers. Theycan\nalsoaidIDEswithcodecompletionandrefactoring.\nType hints of global variables, class attributes, and functions, but not local variables, can be accessed using\ntyping.get_type_hints().\nSeetypingandPEP484,whichdescribethisfunctionality.\nuniversalnewlines\nAmannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix\nend-of-lineconvention'\\n',theWindowsconvention'\\r\\n',andtheoldMacintoshconvention'\\r'. See\nPEP278andPEP3116,aswellasbytes.splitlines()foranadditionaluse.\nvariableannotation\nAnannotationofavariableoraclassattribute.\nWhenannotatingavariableoraclassattribute,assignmentisoptional:\nclass C:\nfield: 'annotation'\nVariableannotationsareusuallyusedfortypehints: forexamplethisvariableisexpectedtotakeintvalues:\n332 AppendixA. Glossary\nThePython/CAPI,Release3.13.3\ncount: int = 0\nVariableannotationsyntaxisexplainedinsectionannassign.\nSeefunctionannotation,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto\nforbestpracticesonworkingwithannotations.\nvirtualenvironment\nAcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade\nPythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon\nthesamesystem.\nSeealsovenv.\nvirtualmachine\nAcomputerdefinedentirelyinsoftware. Python\u2019svirtualmachineexecutesthebytecodeemittedbythebyte-\ncodecompiler.\nZenofPython\nListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.\nThelistingcanbefoundbytyping\u201cimport this\u201dattheinteractiveprompt.\n333\nThePython/CAPI,Release3.13.3\n334 AppendixA. Glossary\nAPPENDIX\nB\nABOUT THIS DOCUMENTATION\nPython\u2019sdocumentationisgeneratedfromreStructuredTextsourcesusingSphinx,adocumentationgeneratororigi-\nnallycreatedforPythonandnowmaintainedasanindependentproject.\nDevelopment of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you\nwanttocontribute,pleasetakealookatthereporting-bugspageforinformationonhowtodoso. Newvolunteers\narealwayswelcome!\nManythanksgoto:\n\u2022 FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandauthorofmuchofthecontent;\n\u2022 theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;\n\u2022 FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.\nB.1 Contributors to the Python documentation\nManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.\nSeeMisc/ACKSinthePythonsourcedistributionforapartiallistofcontributors.\nItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation\n\u2013ThankYou!\n335\nThePython/CAPI,Release3.13.3\n336 AppendixB. Aboutthisdocumentation\nAPPENDIX\nC\nHISTORY AND LICENSE\nC.1 History of the software\nPythonwascreatedintheearly1990sbyGuidovanRossumatStichtingMathematischCentrum(CWI,seehttps:\n//www.cwi.nl)intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython\u2019sprincipalauthor,\nalthoughitincludesmanycontributionsfromothers.\nIn1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,seehttps:\n//www.cnri.reston.va.us)inReston,Virginiawherehereleasedseveralversionsofthesoftware.\nInMay2000,GuidoandthePythoncoredevelopmentteammovedtoBeOpen.comtoformtheBeOpenPythonLabs\nteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations,whichbecameZopeCorpo-\nration. In2001,thePythonSoftwareFoundation(PSF,seehttps://www.python.org/psf/)wasformed,anon-profit\norganization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring\nmemberofthePSF.\nAllPythonreleasesareOpenSource(seehttps://opensource.orgfortheOpenSourceDefinition). Historically,most,\nbutnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.\nRelease Derivedfrom Year Owner GPL-compatible? (1)\n0.9.0thru1.2 n/a 1991-1995 CWI yes\n1.3thru1.5.2 1.2 1995-1999 CNRI yes\n1.6 1.5.2 2000 CNRI no\n2.0 1.6 2000 BeOpen.com no\n1.6.1 1.6 2001 CNRI yes(2)\n2.1 2.0+1.6.1 2001 PSF no\n2.0.1 2.0+1.6.1 2001 PSF yes\n2.1.1 2.1+2.0.1 2001 PSF yes\n2.1.2 2.1.1 2002 PSF yes\n2.1.3 2.1.2 2002 PSF yes\n2.2andabove 2.1.1 2001-now PSF yes\n(cid:174) Note\n(1) GPL-compatibledoesn\u2019tmeanthatwe\u2019redistributingPythonundertheGPL.AllPythonlicenses,unlike\nthe GPL, let you distribute a modified version without making your changes open source. The GPL-\ncompatible licenses make it possible to combine Python with other software that is released under the\nGPL;theothersdon\u2019t.\n(2) AccordingtoRichardStallman,1.6.1isnotGPL-compatible,becauseitslicensehasachoiceoflawclause.\nAccordingtoCNRI,however, Stallman\u2019slawyerhastoldCNRI\u2019slawyerthat1.6.1is\u201cnotincompatible\u201d\nwiththeGPL.\nThankstothemanyoutsidevolunteerswhohaveworkedunderGuido\u2019sdirectiontomakethesereleasespossible.\n337\nThePython/CAPI,Release3.13.3\nC.2 Terms and conditions for accessing or otherwise using Python\nPythonsoftwareanddocumentationarelicensedunderthePythonSoftwareFoundationLicenseVersion2.\nStartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF\nLicenseVersion2andtheZero-ClauseBSDlicense.\nSomesoftwareincorporatedintoPythonisunderdifferentlicenses. Thelicensesarelistedwithcodefallingunder\nthatlicense. SeeLicensesandAcknowledgementsforIncorporatedSoftwareforanincompletelistoftheselicenses.\nC.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\nthe Individual or Organization (\"Licensee\") accessing and otherwise using this\nsoftware (\"Python\") in source or binary form and its associated documentation.\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative\nversion, provided, however, that PSF's License Agreement and PSF's notice of\ncopyright, i.e., \"Copyright \u00a9 2001-2024 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python or any part thereof, and wants to make the\nderivative work available to others as provided herein, then Licensee hereby\nagrees to include in any such work a brief summary of the changes made to\u2423\n,\u2192Python.\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\nPSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. Nothing in this License Agreement shall be deemed to create any relationship\nof agency, partnership, or joint venture between PSF and Licensee. This License\nAgreement does not grant permission to use PSF trademarks or trade name in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.\n8. By copying, installing or otherwise using Python, Licensee agrees\nto be bound by the terms and conditions of this License Agreement.\n338 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\nC.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nBEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n(\"Licensee\") accessing and otherwise using this software in source or binary\nform and its associated documentation (\"the Software\").\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\nBeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\nto reproduce, analyze, test, perform and/or display publicly, prepare derivative\nworks, distribute, and otherwise use the Software alone or in any derivative\nversion, provided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\nBEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\nMODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\nADVISED OF THE POSSIBILITY THEREOF.\n5. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n6. This License Agreement shall be governed by and interpreted in all respects\nby the law of the State of California, excluding conflict of law provisions.\nNothing in this License Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between BeOpen and Licensee. This License\nAgreement does not grant permission to use BeOpen trademarks or trade names in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party. As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the permissions\ngranted on that web page.\n7. By copying, installing or otherwise using the software, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\nC.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n1. This LICENSE AGREEMENT is between the Corporation for National Research\nInitiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n(\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using Python 1.6.1 software in source or binary form and its\nassociated documentation.\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python 1.6.1 alone or in any derivative version,\nprovided, however, that CNRI's License Agreement and CNRI's notice of copyright,\ni.e., \"Copyright \u00a9 1995-2001 Corporation for National Research Initiatives; All\n(continuesonnextpage)\nC.2. TermsandconditionsforaccessingorotherwiseusingPython 339\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nRights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\nprepared by Licensee. Alternately, in lieu of CNRI's License Agreement,\nLicensee may substitute the following text (omitting the quotes): \"Python 1.6.1\nis made available subject to the terms and conditions in CNRI's License\nAgreement. This Agreement together with Python 1.6.1 may be located on the\ninternet using the following unique, persistent identifier (known as a handle):\n1895.22/1013. This Agreement may also be obtained from a proxy server on the\ninternet using the following URL: http://hdl.handle.net/1895.22/1013\".\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python 1.6.1 or any part thereof, and wants to make the derivative\nwork available to others as provided herein, then Licensee hereby agrees to\ninclude in any such work a brief summary of the changes made to Python 1.6.1.\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI\nMAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,\nBUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\nOF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\nPYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. This License Agreement shall be governed by the federal intellectual property\nlaw of the United States, including without limitation the federal copyright\nlaw, and, to the extent such U.S. federal law does not apply, by the law of the\nCommonwealth of Virginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based on Python\n1.6.1 that incorporate non-separable material that was previously distributed\nunder the GNU General Public License (GPL), the law of the Commonwealth of\nVirginia shall govern this License Agreement only as to issues arising under or\nwith respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in\nthis License Agreement shall be deemed to create any relationship of agency,\npartnership, or joint venture between CNRI and Licensee. This License Agreement\ndoes not grant permission to use CNRI trademarks or trade name in a trademark\nsense to endorse or promote products or services of Licensee, or any third\nparty.\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\nor otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\nconditions of this License Agreement.\nC.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nCopyright \u00a9 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands. All rights reserved.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\n(continuesonnextpage)\n340 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\nC.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTA-\nTION\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3 Licenses and Acknowledgements for Incorporated Software\nThissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated\ninthePythondistribution.\nC.3.1 Mersenne Twister\nThe_randomCextensionunderlyingtherandommoduleincludescodebasedonadownloadfromhttp://www.math.\nsci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. Thefollowingaretheverbatimcommentsfromthe\noriginalcode:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 341\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\nC.3.2 Sockets\nThesocketmoduleusesthefunctions,getaddrinfo(),andgetnameinfo(),whicharecodedinseparatesource\nfilesfromtheWIDEProject,https://www.wide.ad.jp/.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n342 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\nC.3.3 Asynchronous socket services\nThetest.support.asynchatandtest.support.asyncoremodulescontainthefollowingnotice:\nCopyright 1996 by Sam Rushing\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nC.3.4 Cookie management\nThehttp.cookiesmodulecontainsthefollowingnotice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3.5 Execution tracing\nThetracemodulecontainsthefollowingnotice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr... reserved and offered to the public under the terms of the\nPython 2.2 license.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 343\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\nC.3.6 UUencode and UUdecode functions\nTheuucodeccontainsthefollowingnotice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\nbetween ascii and binary. This results in a 1000-fold speedup. The C\nversion is still 5 times faster, though.\n- Arguments more compliant with Python standard\n344 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\nC.3.7 XML Remote Procedure Calls\nThexmlrpc.clientmodulecontainsthefollowingnotice:\nThe XML-RPC client interface is\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\nC.3.8 test_epoll\nThetest.test_epollmodulecontainsthefollowingnotice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 345\nThePython/CAPI,Release3.13.3\nC.3.9 Select kqueue\nTheselectmodulecontainsthefollowingnoticeforthekqueueinterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.10 SipHash24\nThefilePython/pyhash.ccontainsMarekMajkowski\u2019implementationofDanBernstein\u2019sSipHash24algorithm.\nItcontainsthefollowingnote:\n<MIT License>\nCopyright (c) 2013 Marek Majkowski <marek@popcount.org>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\nOriginal location:\nhttps://github.com/majek/csiphash/\nSolution inspired by code from:\nSamuel Neves (supercop/crypto_auth/siphash24/little)\ndjb (supercop/crypto_auth/siphash24/little2)\nJean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\n346 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\nC.3.11 strtod and dtoa\nThefilePython/dtoa.c,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,\nisderivedfromthefileofthesamenamebyDavidM.Gay, currentlyavailablefromhttps://web.archive.org/web/\n20220517033456/http://www.netlib.org/fp/dtoa.c. The original file, as retrieved on March 16, 2009, contains the\nfollowingcopyrightandlicensingnotice:\n/****************************************************************\n*\n* The author of this software is David M. Gay.\n*\n* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n*\n* Permission to use, copy, modify, and distribute this software for any\n* purpose without fee is hereby granted, provided that this entire notice\n* is included in all copies of any software which is or includes a copy\n* or modification of this software and in all copies of the supporting\n* documentation for such software.\n*\n* THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n*\n***************************************************************/\nC.3.12 OpenSSL\nThemoduleshashlib,posixandsslusetheOpenSSLlibraryforaddedperformanceifmadeavailablebythe\noperatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL\nlibraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived\nfromthat,theApacheLicensev2applies:\nApache License\nVersion 2.0, January 2004\nhttps://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 347\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\n(continuesonnextpage)\n348 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 349\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nC.3.13 expat\nThe pyexpat extension is built using an included copy of the expat sources unless the build is configured\n--with-system-expat:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\nand Clark Cooper\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n(continuesonnextpage)\n350 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.14 libffi\nThe_ctypesCextensionunderlyingthectypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless\nthebuildisconfigured--with-system-libffi:\nCopyright (c) 1996-2008 Red Hat, Inc and others.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nC.3.15 zlib\nThezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo\noldtobeusedforthebuild:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 351\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\nJean-loup Gailly Mark Adler\njloup@gzip.org madler@alumni.caltech.edu\nC.3.16 cfuhash\nTheimplementationofthehashtableusedbythetracemallocisbasedonthecfuhashproject:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\nThis code is released under the BSD license:\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n* Neither the name of the author nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\nC.3.17 libmpdec\nThe_decimalCextensionunderlyingthedecimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary\nunlessthebuildisconfigured--with-system-libmpdec:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\nRedistribution and use in source and binary forms, with or without\n(continuesonnextpage)\n352 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.18 W3C C14N test suite\nTheC14N2.0testsuiteinthetestpackage(Lib/test/xmltestdata/c14n-20/)wasretrievedfromtheW3C\nwebsiteathttps://www.w3.org/TR/xml-c14n2-testcases/andisdistributedunderthe3-clauseBSDlicense:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of works must retain the original copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\nused to endorse or promote products derived from this work without\nspecific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 353\nThePython/CAPI,Release3.13.3\nC.3.19 mimalloc\nMITLicense:\nCopyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nC.3.20 asyncio\nPartsoftheasynciomoduleareincorporatedfromuvloop0.16,whichisdistributedundertheMITlicense:\nCopyright (c) 2015-2021 MagicStack Inc. http://magic.io\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.21 Global Unbounded Sequences (GUS)\nThe file Python/qsbr.c is adapted from FreeBSD\u2019s \u201cGlobal Unbounded Sequences\u201d safe memory reclamation\nschemeinsubr_smr.c. Thefileisdistributedunderthe2-ClauseBSDLicense:\nCopyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\n(continuesonnextpage)\n354 AppendixC. HistoryandLicense\nThePython/CAPI,Release3.13.3\n(continuedfrompreviouspage)\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice unmodified, this list of conditions, and the following\ndisclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 355\nThePython/CAPI,Release3.13.3\n356 AppendixC. HistoryandLicense\nAPPENDIX\nD\nCOPYRIGHT\nPythonandthisdocumentationis:\nCopyright\u00a92001-2024PythonSoftwareFoundation. Allrightsreserved.\nCopyright\u00a92000BeOpen.com. Allrightsreserved.\nCopyright\u00a91995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.\nCopyright\u00a91991-1995StichtingMathematischCentrum. Allrightsreserved.\nSeeHistoryandLicenseforcompletelicenseandpermissionsinformation.\n357\nThePython/CAPI,Release3.13.3\n358 AppendixD. Copyright\nINDEX\nNon-alphabetical A\n...,317 abort(Cfunction),67\n>>>,317 abs\n__all__(packagevariable),68 built-in function,103\n__dict__(moduleattribute),174 abstract base class,317\n__doc__(moduleattribute),174 allocfunc(Ctype),300\n__file__(moduleattribute),174,175 annotation,317\n__future__,323 argument,317\n__import__ argv(inmodulesys),208,234\nbuilt-in function,68 ascii\n__loader__(moduleattribute),174 built-in function,95\n__main__ asynchronous context manager,318\nmodule,12,203,217,218 asynchronous generator,318\n__name__(moduleattribute),174 asynchronous generator iterator,318\n__package__(moduleattribute),174 asynchronous iterable,318\n__PYVENV_LAUNCHER__,234,240 asynchronous iterator,318\n__slots__,330 attribute,318\n_frozen(Cstruct),71 awaitable,318\n_inittab(Cstruct),71\nB\n_inittab.initfunc(Cmember),71\n_inittab.name(Cmember),71 BDFL,318\n_Py_c_diff(Cfunction),132 binary file,318\n_Py_c_neg(Cfunction),132 binaryfunc(Ctype),301\n_Py_c_pow(Cfunction),132 borrowed reference,318\n_Py_c_prod(Cfunction),132 buffer interface\n_Py_c_quot(Cfunction),132 (see buffer protocol),110\n_Py_c_sum(Cfunction),132 buffer object\n_Py_InitializeMain(Cfunction),247 (see buffer protocol),110\n_Py_NoneStruct(Cvar),259 buffer protocol,110\n_PyBytes_Resize(Cfunction),135 built-in function\n_PyCode_GetExtra(Cfunction),172 __import__,68\n_PyCode_SetExtra(Cfunction),172 abs,103\n_PyEval_RequestCodeExtraIndex (C function), ascii,95\n172 bytes,96\n_PyFrameEvalFunction(Ctype),215 classmethod,264\n_PyInterpreterFrame(Cstruct),190 compile,69\n_PyInterpreterState_GetEvalFrameFunc (C divmod,103\nfunction),215 float,105\n_PyInterpreterState_SetEvalFrameFunc (C hash,96,279\nfunction),215 int,105\n_PyObject_GetDictPtr(Cfunction),95 len,97,106,108,157,161,165\n_PyObject_New(Cfunction),259 pow,103,105\n_PyObject_NewVar(Cfunction),259 repr,95,278\n_PyTuple_Resize(Cfunction),155 staticmethod,264\n_thread tuple,107,159\nmodule,211 type,96\n359\nThePython/CAPI,Release3.13.3\nE\nbuiltins\nmodule,12,203,217,218\nEAFP,321\nbytearray\nenvironment variable\nobject,135\n__PYVENV_LAUNCHER__,234,240\nbytecode,319\nPATH,12\nbytes PYTHON_CPU_COUNT,238\nbuilt-in function,96 PYTHON_GIL,324\nobject,134\nPYTHON_PERF_JIT_SUPPORT,242\nbytes-like object,319 PYTHON_PRESITE,241\nPYTHONCOERCECLOCALE,245\nC\nPYTHONDEBUG,200,239\ncallable,319 PYTHONDEVMODE,235\ncallback,319 PYTHONDONTWRITEBYTECODE,201,243\ncalloc(Cfunction),249 PYTHONDUMPREFS,236\nCapsule PYTHONEXECUTABLE,240\nobject,187 PYTHONFAULTHANDLER,236\nC-contiguous,113,320 PYTHONHASHSEED,201,237\nclass,319 PYTHONHOME,12,201,209,237\nclass variable,319 PYTHONINSPECT,201,237\nclassmethod PYTHONINTMAXSTRDIGITS,238\nbuilt-in function,264 PYTHONIOENCODING,241\ncleanup functions,68 PYTHONLEGACYWINDOWSFSENCODING,202,231\nclose(inmoduleos),218 PYTHONLEGACYWINDOWSSTDIO,202,238\nclosure variable,319 PYTHONMALLOC,250,254,255,257\nCO_FUTURE_DIVISION(Cvar),44 PYTHONMALLOCSTATS,238,250\ncode object,169 PYTHONNODEBUGRANGES,235\nCommon Vulnerabilities and Exposures PYTHONNOUSERSITE,202,242\nCVE 2008-5983,208 PYTHONOPTIMIZE,202,239\ncompile PYTHONPATH,12,201,239\nbuilt-in function,69 PYTHONPLATLIBDIR,238\ncomplex number,320 PYTHONPROFILEIMPORTTIME,237\nobject,132 PYTHONPYCACHEPREFIX,240\ncontext,320 PYTHONSAFEPATH,234\ncontext management protocol,320 PYTHONTRACEMALLOC,242\ncontext manager,320 PYTHONUNBUFFERED,203,234\ncontext variable,320 PYTHONUTF8,231,245\ncontiguous,113,320 PYTHONVERBOSE,203,242\ncopyright(inmodulesys),207 PYTHONWARNINGS,243\ncoroutine,320 EOFError(built-inexception),173\ncoroutine function,320 exc_info(inmodulesys),10\nCPython,320 executable(inmodulesys),207\ncurrent context,320 exit(Cfunction),68\nexpression,321\nD\nextension module,322\ndecorator,320\nF\ndescrgetfunc(Ctype),301\ndescriptor,321 f-string,322\ndescrsetfunc(Ctype),301 file\ndestructor(Ctype),300 object,173\ndictionary,321 file object,322\nobject,159 file-like object,322\ndictionary comprehension,321 filesystem encoding and error handler,322\ndictionary view,321 finder,322\ndivmod float\nbuilt-in function,103 built-in function,105\ndocstring,321 floating-point\nduck-typing,321 object,130\nfloor division,322\n360 Index\nThePython/CAPI,Release3.13.3\nK\nFortran contiguous,113,320\nfree(Cfunction),249\nkey function,325\nfree threading,322 KeyboardInterrupt(built-inexception),56,57\nfree variable,322 keyword argument,325\nfreefunc(Ctype),300\nfreeze utility,71 L\nfrozenset\nlambda,326\nobject,164\nLBYL,326\nfunction,322\nlen\nobject,165\nbuilt-in function, 97, 106, 108, 157, 161,\nfunction annotation,322\n165\nG lenfunc(Ctype),301\nlexical analyzer,326\ngarbage collection,323 list,326\ngcvisitobjects_t(Ctype),307 object,157\ngenerator,323 list comprehension,326\ngenerator expression,323 loader,326\ngenerator iterator,323 locale encoding,326\ngeneric function,323 lock, interpreter,209\ngeneric type,323 long integer\ngetattrfunc(Ctype),300 object,123\ngetattrofunc(Ctype),300 LONG_MAX(Cmacro),125\ngetbufferproc(Ctype),301\ngetiterfunc(Ctype),301 M\ngetter(Ctype),268\nmagic\nGIL,323\nmethod,326\nglobal interpreter lock,209,324\nmagic method,326\nH\nmain(),206,208,234\nmalloc(Cfunction),249\nhash mapping,326\nbuilt-in function,96,279 object,159\nhash-based pyc,324 memoryview\nhashable,324 object,184\nhashfunc(Ctype),301 meta path finder,326\nmetaclass,326\nI\nMETH_CLASS(Cmacro),264\nIDLE,324 METH_COEXIST(Cmacro),264\nimmortal,324 METH_FASTCALL(Cmacro),263\nimmutable,324 METH_KEYWORDS(Cmacro),263\nimport path,324 METH_METHOD(Cmacro),263\nimporter,324 METH_NOARGS(Cmacro),263\nimporting,324 METH_O(Cmacro),264\nincr_item(),11 METH_STATIC(Cmacro),264\ninitproc(Ctype),300 METH_VARARGS(Cmacro),263\ninquiry(Ctype),306 method,327\ninstancemethod magic,326\nobject,167 object,168\nint special,331\nbuilt-in function,105 method resolution order,327\ninteger MethodType(inmoduletypes),165,168\nobject,123 module,327\ninteractive,324 __main__,12,203,217,218\ninterpreted,325 _thread,211\ninterpreter lock,209 builtins,12,203,217,218\ninterpreter shutdown,325 object,174\niterable,325 searchpath,12,203,207\niterator,325 signal,56,57\niternextfunc(Ctype),301 sys,12,203,217,218\nIndex 361\nThePython/CAPI,Release3.13.3\nmodule spec,327 path based finder,329\nmodules(inmodulesys),68,203 path entry,329\nModuleType(inmoduletypes),174 path entry finder,329\nMRO,327 path entry hook,329\nmutable,327 path-like object,329\nPEP,329\nN\nplatform(inmodulesys),207\nnamed tuple,327 portion,329\nnamespace,327 positional argument,329\nnamespace package,327 pow\nnested scope,328 built-in function,103,105\nnew-style class,328 provisional API,329\nnewfunc(Ctype),300 provisional package,329\nNone Py_ABS(Cmacro),4\nobject,123 Py_AddPendingCall(Cfunction),219\nnumeric Py_ALWAYS_INLINE(Cmacro),4\nobject,123 Py_ASNATIVEBYTES_ALLOW_INDEX(Cmacro),128\nPy_ASNATIVEBYTES_BIG_ENDIAN(Cmacro),128\nO\nPy_ASNATIVEBYTES_DEFAULTS(Cmacro),128\nobject,328 Py_ASNATIVEBYTES_LITTLE_ENDIAN (C macro),\n128\nbytearray,135\nbytes,134 Py_ASNATIVEBYTES_NATIVE_ENDIAN (C macro),\n128\nCapsule,187\ncode,169 Py_ASNATIVEBYTES_REJECT_NEGATIVE (C macro),\n128\ncomplex number,132\ndictionary,159 Py_ASNATIVEBYTES_UNSIGNED_BUFFER (C macro),\n128\nfile,173\nfloating-point,130\nPy_AtExit(Cfunction),68\nfrozenset,164\nPy_AUDIT_READ(Cmacro),266\nfunction,165\nPy_AuditHookFunction(Ctype),67\ninstancemethod,167\nPy_BEGIN_ALLOW_THREADS(Cmacro),209,213\ninteger,123\nPy_BEGIN_CRITICAL_SECTION(Cmacro),226\nlist,157\nPy_BEGIN_CRITICAL_SECTION2(Cmacro),226\nlong integer,123\nPy_BLOCK_THREADS(Cmacro),213\nmapping,159\nPy_buffer(Ctype),111\nmemoryview,184\nPy_buffer.buf(Cmember),111\nmethod,168\nPy_buffer.format(Cmember),111\nmodule,174\nPy_buffer.internal(Cmember),112\nNone,123\nPy_buffer.itemsize(Cmember),111\nnumeric,123\nPy_buffer.len(Cmember),111\nsequence,134\nPy_buffer.ndim(Cmember),111\nset,164\nPy_buffer.obj(Cmember),111\ntuple,154\nPy_buffer.readonly(Cmember),111\ntype,6,117\nPy_buffer.shape(Cmember),112\nobjobjargproc(Ctype),301\nPy_buffer.strides(Cmember),112\nobjobjproc(Ctype),301\nPy_buffer.suboffsets(Cmember),112\noptimized scope,328\nPy_BuildValue(Cfunction),79\nOverflowError(built-inexception),125,126\nPy_BytesMain(Cfunction),204\nPy_BytesWarningFlag(Cvar),200\nP Py_CHARMASK(Cmacro),5\nPy_CLEANUP_SUPPORTED(Cmacro),76\npackage,328\nPy_CLEAR(Cfunction),46\npackage variable\nPy_CompileString(Cfunction),43,44\n__all__,68\nPy_CompileStringExFlags(Cfunction),43\nparameter,328\nPy_CompileStringFlags(Cfunction),43\nPATH,12\nPy_CompileStringObject(Cfunction),43\npath\nPy_complex(Ctype),132\nmodulesearch,12,203,207\nPy_complex.imag(Cmember),132\npath(inmodulesys),12,203,207\n362 Index\nThePython/CAPI,Release3.13.3\nPy_complex.real(Cmember),132 Py_hash_t(Ctype),83\nPy_CONSTANT_ELLIPSIS(Cmacro),92 Py_HashPointer(Cfunction),84\nPy_CONSTANT_EMPTY_BYTES(Cmacro),92 Py_HashRandomizationFlag(Cvar),201\nPy_CONSTANT_EMPTY_STR(Cmacro),92 Py_IgnoreEnvironmentFlag(Cvar),201\nPy_CONSTANT_EMPTY_TUPLE(Cmacro),92 Py_INCREF(Cfunction),7,45\nPy_CONSTANT_FALSE(Cmacro),92 Py_IncRef(Cfunction),46\nPy_CONSTANT_NONE(Cmacro),92 Py_Initialize(Cfunction),12,203,218\nPy_CONSTANT_NOT_IMPLEMENTED(Cmacro),92 Py_Initialize(),206\nPy_CONSTANT_ONE(Cmacro),92 Py_InitializeEx(Cfunction),203\nPy_CONSTANT_TRUE(Cmacro),92 Py_InitializeFromConfig(Cfunction),203\nPy_CONSTANT_ZERO(Cmacro),92 Py_InspectFlag(Cvar),201\nPY_CXX_CONST(Cmacro),79 Py_InteractiveFlag(Cvar),201\nPy_DEBUG(Cmacro),12 Py_Is(Cfunction),260\nPy_DebugFlag(Cvar),200 Py_IS_TYPE(Cfunction),261\nPy_DecodeLocale(Cfunction),64 Py_IsFalse(Cfunction),261\nPy_DECREF(Cfunction),7,46 Py_IsFinalizing(Cfunction),203\nPy_DecRef(Cfunction),47 Py_IsInitialized(Cfunction),12,203\nPy_DEPRECATED(Cmacro),5 Py_IsNone(Cfunction),260\nPy_DontWriteBytecodeFlag(Cvar),200 Py_IsolatedFlag(Cvar),201\nPy_Ellipsis(Cvar),184 Py_IsTrue(Cfunction),260\nPy_EncodeLocale(Cfunction),65 Py_LE(Cmacro),287\nPy_END_ALLOW_THREADS(Cmacro),209,213 Py_LeaveRecursiveCall(Cfunction),60\nPy_END_CRITICAL_SECTION(Cmacro),226 Py_LegacyWindowsFSEncodingFlag(Cvar),202\nPy_END_CRITICAL_SECTION2(Cmacro),226 Py_LegacyWindowsStdioFlag(Cvar),202\nPy_EndInterpreter(Cfunction),218 Py_LIMITED_API(Cmacro),13\nPy_EnterRecursiveCall(Cfunction),60 Py_LT(Cmacro),287\nPy_EQ(Cmacro),287 Py_Main(Cfunction),204\nPy_eval_input(Cvar),44 PY_MAJOR_VERSION(Cmacro),309\nPy_Exit(Cfunction),67 Py_MAX(Cmacro),5\nPy_ExitStatusException(Cfunction),229 Py_MEMBER_SIZE(Cmacro),5\nPy_False(Cvar),130 PY_MICRO_VERSION(Cmacro),309\nPy_FatalError(Cfunction),67 Py_MIN(Cmacro),5\nPy_FatalError(),208 PY_MINOR_VERSION(Cmacro),309\nPy_FdIsInteractive(Cfunction),63 Py_mod_create(Cmacro),177\nPy_file_input(Cvar),44 Py_mod_exec(Cmacro),178\nPy_Finalize(Cfunction),204 Py_mod_gil(Cmacro),178\nPy_FinalizeEx(Cfunction),68,203,204,218 Py_MOD_GIL_NOT_USED(Cmacro),178\nPy_FrozenFlag(Cvar),201 Py_MOD_GIL_USED(Cmacro),178\nPy_GE(Cmacro),287 Py_mod_multiple_interpreters(Cmacro),178\nPy_GenericAlias(Cfunction),197 Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED\nPy_GenericAliasType(Cvar),197 (Cmacro),178\nPy_GetArgcArgv(Cfunction),246 Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED (C\nPy_GetBuildInfo(Cfunction),208 macro),178\nPy_GetCompiler(Cfunction),207 Py_MOD_PER_INTERPRETER_GIL_SUPPORTED (C\nPy_GetConstant(Cfunction),91 macro),178\nPy_GetConstantBorrowed(Cfunction),92 PY_MONITORING_EVENT_BRANCH(Cmacro),315\nPy_GetCopyright(Cfunction),207 PY_MONITORING_EVENT_C_RAISE(Cmacro),315\nPy_GETENV(Cmacro),5 PY_MONITORING_EVENT_C_RETURN(Cmacro),315\nPy_GetExecPrefix(Cfunction),12,206 PY_MONITORING_EVENT_CALL(Cmacro),315\nPy_GetPath(Cfunction),12,207 PY_MONITORING_EVENT_EXCEPTION_HANDLED (C\nPy_GetPath(),206 macro),315\nPy_GetPlatform(Cfunction),207 PY_MONITORING_EVENT_INSTRUCTION (C macro),\nPy_GetPrefix(Cfunction),12,206 315\nPy_GetProgramFullPath(Cfunction),12,207 PY_MONITORING_EVENT_JUMP(Cmacro),315\nPy_GetProgramName(Cfunction),206 PY_MONITORING_EVENT_LINE(Cmacro),315\nPy_GetPythonHome(Cfunction),209 PY_MONITORING_EVENT_PY_RESUME(Cmacro),315\nPy_GetVersion(Cfunction),207 PY_MONITORING_EVENT_PY_RETURN(Cmacro),315\nPy_GT(Cmacro),287 PY_MONITORING_EVENT_PY_START(Cmacro),315\nIndex 363\nThePython/CAPI,Release3.13.3\nPY_MONITORING_EVENT_PY_THROW(Cmacro),315 Py_T_OBJECT_EX(Cmacro),267\nPY_MONITORING_EVENT_PY_UNWIND(Cmacro),315 Py_T_PYSSIZET(Cmacro),267\nPY_MONITORING_EVENT_PY_YIELD(Cmacro),315 Py_T_SHORT(Cmacro),267\nPY_MONITORING_EVENT_RAISE(Cmacro),315 Py_T_STRING(Cmacro),267\nPY_MONITORING_EVENT_RERAISE(Cmacro),315 Py_T_STRING_INPLACE(Cmacro),267\nPY_MONITORING_EVENT_STOP_ITERATION (C Py_T_UBYTE(Cmacro),267\nmacro),315 Py_T_UINT(Cmacro),267\nPY_MONITORING_IS_INSTRUMENTED_EVENT (C Py_T_ULONG(Cmacro),267\nfunction),315 Py_T_ULONGLONG(Cmacro),267\nPy_NE(Cmacro),287 Py_T_USHORT(Cmacro),267\nPy_NewInterpreter(Cfunction),218 Py_TPFLAGS_BASE_EXC_SUBCLASS(Cmacro),283\nPy_NewInterpreterFromConfig(Cfunction),217 Py_TPFLAGS_BASETYPE(Cmacro),281\nPy_NewRef(Cfunction),45 Py_TPFLAGS_BYTES_SUBCLASS(Cmacro),283\nPy_NO_INLINE(Cmacro),5 Py_TPFLAGS_DEFAULT(Cmacro),281\nPy_None(Cvar),123 Py_TPFLAGS_DICT_SUBCLASS(Cmacro),283\nPy_NoSiteFlag(Cvar),202 Py_TPFLAGS_DISALLOW_INSTANTIATION(Cmacro),\nPy_NotImplemented(Cvar),92 283\nPy_NoUserSiteDirectory(Cvar),202 Py_TPFLAGS_HAVE_FINALIZE(Cmacro),283\nPy_OpenCodeHookFunction(Ctype),173 Py_TPFLAGS_HAVE_GC(Cmacro),281\nPy_OptimizeFlag(Cvar),202 Py_TPFLAGS_HAVE_VECTORCALL(Cmacro),283\nPy_PreInitialize(Cfunction),231 Py_TPFLAGS_HEAPTYPE(Cmacro),281\nPy_PreInitializeFromArgs(Cfunction),232 Py_TPFLAGS_IMMUTABLETYPE(Cmacro),283\nPy_PreInitializeFromBytesArgs (C function), Py_TPFLAGS_ITEMS_AT_END(Cmacro),282\n231 Py_TPFLAGS_LIST_SUBCLASS(Cmacro),283\nPy_PRINT_RAW(Cmacro),92,174 Py_TPFLAGS_LONG_SUBCLASS(Cmacro),282\nPy_QuietFlag(Cvar),202 Py_TPFLAGS_MANAGED_DICT(Cmacro),282\nPy_READONLY(Cmacro),266 Py_TPFLAGS_MANAGED_WEAKREF(Cmacro),282\nPy_REFCNT(Cfunction),45 Py_TPFLAGS_MAPPING(Cmacro),284\nPy_RELATIVE_OFFSET(Cmacro),266 Py_TPFLAGS_METHOD_DESCRIPTOR(Cmacro),282\nPY_RELEASE_LEVEL(Cmacro),309 Py_TPFLAGS_READY(Cmacro),281\nPY_RELEASE_SERIAL(Cmacro),309 Py_TPFLAGS_READYING(Cmacro),281\nPy_ReprEnter(Cfunction),60 Py_TPFLAGS_SEQUENCE(Cmacro),284\nPy_ReprLeave(Cfunction),60 Py_TPFLAGS_TUPLE_SUBCLASS(Cmacro),283\nPy_RETURN_FALSE(Cmacro),130 Py_TPFLAGS_TYPE_SUBCLASS(Cmacro),283\nPy_RETURN_NONE(Cmacro),123 Py_TPFLAGS_UNICODE_SUBCLASS(Cmacro),283\nPy_RETURN_NOTIMPLEMENTED(Cmacro),92 Py_TPFLAGS_VALID_VERSION_TAG(Cmacro),284\nPy_RETURN_RICHCOMPARE(Cmacro),287 Py_tracefunc(Ctype),220\nPy_RETURN_TRUE(Cmacro),130 Py_True(Cvar),130\nPy_RunMain(Cfunction),205 Py_tss_NEEDS_INIT(Cmacro),223\nPy_SET_REFCNT(Cfunction),45 Py_tss_t(Ctype),223\nPy_SET_SIZE(Cfunction),261 Py_TYPE(Cfunction),261\nPy_SET_TYPE(Cfunction),261 Py_UCS1(Ctype),137\nPy_SetProgramName(Cfunction),206 Py_UCS2(Ctype),137\nPy_SetPythonHome(Cfunction),209 Py_UCS4(Ctype),137\nPy_SETREF(Cmacro),47 Py_uhash_t(Ctype),83\nPy_single_input(Cvar),44 Py_UNBLOCK_THREADS(Cmacro),213\nPy_SIZE(Cfunction),261 Py_UnbufferedStdioFlag(Cvar),203\nPy_ssize_t(Ctype),10 Py_UNICODE(Ctype),137\nPY_SSIZE_T_MAX(Cmacro),126 Py_UNICODE_IS_HIGH_SURROGATE(Cfunction),140\nPy_STRINGIFY(Cmacro),5 Py_UNICODE_IS_LOW_SURROGATE(Cfunction),140\nPy_T_BOOL(Cmacro),267 Py_UNICODE_IS_SURROGATE(Cfunction),139\nPy_T_BYTE(Cmacro),267 Py_UNICODE_ISALNUM(Cfunction),139\nPy_T_CHAR(Cmacro),267 Py_UNICODE_ISALPHA(Cfunction),139\nPy_T_DOUBLE(Cmacro),267 Py_UNICODE_ISDECIMAL(Cfunction),139\nPy_T_FLOAT(Cmacro),267 Py_UNICODE_ISDIGIT(Cfunction),139\nPy_T_INT(Cmacro),267 Py_UNICODE_ISLINEBREAK(Cfunction),139\nPy_T_LONG(Cmacro),267 Py_UNICODE_ISLOWER(Cfunction),139\nPy_T_LONGLONG(Cmacro),267 Py_UNICODE_ISNUMERIC(Cfunction),139\n364 Index\nThePython/CAPI,Release3.13.3\nPy_UNICODE_ISPRINTABLE(Cfunction),139 PyBUF_SIMPLE(Cmacro),113\nPy_UNICODE_ISSPACE(Cfunction),139 PyBUF_STRIDED(Cmacro),114\nPy_UNICODE_ISTITLE(Cfunction),139 PyBUF_STRIDED_RO(Cmacro),114\nPy_UNICODE_ISUPPER(Cfunction),139 PyBUF_STRIDES(Cmacro),113\nPy_UNICODE_JOIN_SURROGATES(Cfunction),140 PyBUF_WRITABLE(Cmacro),113\nPy_UNICODE_TODECIMAL(Cfunction),139 PyBUF_WRITE(Cmacro),185\nPy_UNICODE_TODIGIT(Cfunction),139 PyBuffer_FillContiguousStrides (C function),\nPy_UNICODE_TOLOWER(Cfunction),139 116\nPy_UNICODE_TONUMERIC(Cfunction),139 PyBuffer_FillInfo(Cfunction),116\nPy_UNICODE_TOTITLE(Cfunction),139 PyBuffer_FromContiguous(Cfunction),116\nPy_UNICODE_TOUPPER(Cfunction),139 PyBuffer_GetPointer(Cfunction),116\nPy_UNREACHABLE(Cmacro),5 PyBuffer_IsContiguous(Cfunction),116\nPy_UNUSED(Cmacro),6 PyBuffer_Release(Cfunction),116\nPy_VaBuildValue(Cfunction),81 PyBuffer_SizeFromFormat(Cfunction),116\nPY_VECTORCALL_ARGUMENTS_OFFSET(Cmacro),99 PyBuffer_ToContiguous(Cfunction),116\nPy_VerboseFlag(Cvar),203 PyBufferProcs(Ctype),110,298\nPy_Version(Cvar),309 PyBufferProcs.bf_getbuffer(Cmember),298\nPY_VERSION_HEX(Cmacro),309 PyBufferProcs.bf_releasebuffer (C member),\nPy_VISIT(Cfunction),306 299\nPy_XDECREF(Cfunction),11,46 PyByteArray_AS_STRING(Cfunction),136\nPy_XINCREF(Cfunction),45 PyByteArray_AsString(Cfunction),136\nPy_XNewRef(Cfunction),46 PyByteArray_Check(Cfunction),136\nPy_XSETREF(Cmacro),47 PyByteArray_CheckExact(Cfunction),136\nPyAIter_Check(Cfunction),109 PyByteArray_Concat(Cfunction),136\nPyAnySet_Check(Cfunction),164 PyByteArray_FromObject(Cfunction),136\nPyAnySet_CheckExact(Cfunction),164 PyByteArray_FromStringAndSize (C function),\nPyArg_Parse(Cfunction),78 136\nPyArg_ParseTuple(Cfunction),77 PyByteArray_GET_SIZE(Cfunction),136\nPyArg_ParseTupleAndKeywords(Cfunction),77 PyByteArray_Resize(Cfunction),136\nPyArg_UnpackTuple(Cfunction),78 PyByteArray_Size(Cfunction),136\nPyArg_ValidateKeywordArguments (C function), PyByteArray_Type(Cvar),135\n78 PyByteArrayObject(Ctype),135\nPyArg_VaParse(Cfunction),77 PyBytes_AS_STRING(Cfunction),135\nPyArg_VaParseTupleAndKeywords(Cfunction),78 PyBytes_AsString(Cfunction),135\nPyASCIIObject(Ctype),137 PyBytes_AsStringAndSize(Cfunction),135\nPyAsyncMethods(Ctype),299 PyBytes_Check(Cfunction),134\nPyAsyncMethods.am_aiter(Cmember),299 PyBytes_CheckExact(Cfunction),134\nPyAsyncMethods.am_anext(Cmember),300 PyBytes_Concat(Cfunction),135\nPyAsyncMethods.am_await(Cmember),299 PyBytes_ConcatAndDel(Cfunction),135\nPyAsyncMethods.am_send(Cmember),300 PyBytes_FromFormat(Cfunction),134\nPyBaseObject_Type(Cvar),260 PyBytes_FromFormatV(Cfunction),134\nPyBool_Check(Cfunction),130 PyBytes_FromObject(Cfunction),135\nPyBool_FromLong(Cfunction),130 PyBytes_FromString(Cfunction),134\nPyBool_Type(Cvar),130 PyBytes_FromStringAndSize(Cfunction),134\nPyBUF_ANY_CONTIGUOUS(Cmacro),113 PyBytes_GET_SIZE(Cfunction),135\nPyBUF_C_CONTIGUOUS(Cmacro),113 PyBytes_Size(Cfunction),135\nPyBUF_CONTIG(Cmacro),114 PyBytes_Type(Cvar),134\nPyBUF_CONTIG_RO(Cmacro),114 PyBytesObject(Ctype),134\nPyBUF_F_CONTIGUOUS(Cmacro),113 PyCallable_Check(Cfunction),102\nPyBUF_FORMAT(Cmacro),113 PyCallIter_Check(Cfunction),182\nPyBUF_FULL(Cmacro),114 PyCallIter_New(Cfunction),182\nPyBUF_FULL_RO(Cmacro),114 PyCallIter_Type(Cvar),182\nPyBUF_INDIRECT(Cmacro),113 PyCapsule(Ctype),187\nPyBUF_MAX_NDIM(Cmacro),112 PyCapsule_CheckExact(Cfunction),187\nPyBUF_ND(Cmacro),113 PyCapsule_Destructor(Ctype),187\nPyBUF_READ(Cmacro),185 PyCapsule_GetContext(Cfunction),187\nPyBUF_RECORDS(Cmacro),114 PyCapsule_GetDestructor(Cfunction),187\nPyBUF_RECORDS_RO(Cmacro),114 PyCapsule_GetName(Cfunction),187\nIndex 365\nThePython/CAPI,Release3.13.3\nPyCapsule_GetPointer(Cfunction),187 PyCodec_StreamReader(Cfunction),86\nPyCapsule_Import(Cfunction),188 PyCodec_StreamWriter(Cfunction),86\nPyCapsule_IsValid(Cfunction),188 PyCodec_StrictErrors(Cfunction),86\nPyCapsule_New(Cfunction),187 PyCodec_Unregister(Cfunction),85\nPyCapsule_SetContext(Cfunction),188 PyCodec_XMLCharRefReplaceErrors (C function),\nPyCapsule_SetDestructor(Cfunction),188 87\nPyCapsule_SetName(Cfunction),188 PyCodeEvent(Ctype),171\nPyCapsule_SetPointer(Cfunction),188 PyCodeObject(Ctype),169\nPyCell_Check(Cfunction),168 PyCompactUnicodeObject(Ctype),137\nPyCell_GET(Cfunction),169 PyCompilerFlags(Cstruct),44\nPyCell_Get(Cfunction),169 PyCompilerFlags.cf_feature_version (C mem-\nPyCell_New(Cfunction),168 ber),44\nPyCell_SET(Cfunction),169 PyCompilerFlags.cf_flags(Cmember),44\nPyCell_Set(Cfunction),169 PyComplex_AsCComplex(Cfunction),133\nPyCell_Type(Cvar),168 PyComplex_Check(Cfunction),133\nPyCellObject(Ctype),168 PyComplex_CheckExact(Cfunction),133\nPyCF_ALLOW_TOP_LEVEL_AWAIT(Cmacro),44 PyComplex_FromCComplex(Cfunction),133\nPyCF_ONLY_AST(Cmacro),44 PyComplex_FromDoubles(Cfunction),133\nPyCF_OPTIMIZED_AST(Cmacro),44 PyComplex_ImagAsDouble(Cfunction),133\nPyCF_TYPE_COMMENTS(Cmacro),44 PyComplex_RealAsDouble(Cfunction),133\nPyCFunction(Ctype),261 PyComplex_Type(Cvar),133\nPyCFunction_New(Cfunction),264 PyComplexObject(Ctype),133\nPyCFunction_NewEx(Cfunction),264 PyConfig(Ctype),232\nPyCFunctionFast(Ctype),262 PyConfig_Clear(Cfunction),233\nPyCFunctionFastWithKeywords(Ctype),262 PyConfig_InitIsolatedConfig(Cfunction),232\nPyCFunctionWithKeywords(Ctype),262 PyConfig_InitPythonConfig(Cfunction),232\nPyCMethod(Ctype),262 PyConfig_Read(Cfunction),233\nPyCMethod_New(Cfunction),264 PyConfig_SetArgv(Cfunction),233\nPyCode_Addr2Line(Cfunction),170 PyConfig_SetBytesArgv(Cfunction),233\nPyCode_Addr2Location(Cfunction),170 PyConfig_SetBytesString(Cfunction),233\nPyCode_AddWatcher(Cfunction),171 PyConfig_SetString(Cfunction),232\nPyCode_Check(Cfunction),169 PyConfig_SetWideStringList(Cfunction),233\nPyCode_ClearWatcher(Cfunction),171 PyConfig.argv(Cmember),234\nPyCode_GetCellvars(Cfunction),171 PyConfig.base_exec_prefix(Cmember),234\nPyCode_GetCode(Cfunction),170 PyConfig.base_executable(Cmember),234\nPyCode_GetFreevars(Cfunction),171 PyConfig.base_prefix(Cmember),234\nPyCode_GetNumFree(Cfunction),169 PyConfig.buffered_stdio(Cmember),234\nPyCode_GetVarnames(Cfunction),170 PyConfig.bytes_warning(Cmember),235\nPyCode_New(Cfunction),170 PyConfig.check_hash_pycs_mode (C member),\nPyCode_NewEmpty(Cfunction),170 235\nPyCode_NewWithPosOnlyArgs(Cfunction),170 PyConfig.code_debug_ranges(Cmember),235\nPyCode_Type(Cvar),169 PyConfig.configure_c_stdio(Cmember),235\nPyCode_WatchCallback(Ctype),171 PyConfig.cpu_count(Cmember),238\nPyCodec_BackslashReplaceErrors (C function), PyConfig.dev_mode(Cmember),235\n87 PyConfig.dump_refs(Cmember),235\nPyCodec_Decode(Cfunction),85 PyConfig.exec_prefix(Cmember),236\nPyCodec_Decoder(Cfunction),86 PyConfig.executable(Cmember),236\nPyCodec_Encode(Cfunction),85 PyConfig.faulthandler(Cmember),236\nPyCodec_Encoder(Cfunction),86 PyConfig.filesystem_encoding(Cmember),236\nPyCodec_IgnoreErrors(Cfunction),86 PyConfig.filesystem_errors(Cmember),236\nPyCodec_IncrementalDecoder(Cfunction),86 PyConfig.hash_seed(Cmember),237\nPyCodec_IncrementalEncoder(Cfunction),86 PyConfig.home(Cmember),237\nPyCodec_KnownEncoding(Cfunction),85 PyConfig.import_time(Cmember),237\nPyCodec_LookupError(Cfunction),86 PyConfig.inspect(Cmember),237\nPyCodec_NameReplaceErrors(Cfunction),87 PyConfig.install_signal_handlers (C mem-\nPyCodec_Register(Cfunction),85 ber),237\nPyCodec_RegisterError(Cfunction),86 PyConfig.int_max_str_digits(Cmember),237\nPyCodec_ReplaceErrors(Cfunction),86 PyConfig.interactive(Cmember),237\n366 Index\nThePython/CAPI,Release3.13.3\nPyConfig.isolated(Cmember),238 PyCoro_CheckExact(Cfunction),191\nPyConfig.legacy_windows_stdio (C member), PyCoro_New(Cfunction),191\n238 PyCoro_Type(Cvar),191\nPyConfig.malloc_stats(Cmember),238 PyCoroObject(Ctype),191\nPyConfig.module_search_paths(Cmember),239 PyDate_Check(Cfunction),194\nPyConfig.module_search_paths_set (C mem- PyDate_CheckExact(Cfunction),194\nber),239 PyDate_FromDate(Cfunction),194\nPyConfig.optimization_level(Cmember),239 PyDate_FromTimestamp(Cfunction),196\nPyConfig.orig_argv(Cmember),239 PyDateTime_Check(Cfunction),194\nPyConfig.parse_argv(Cmember),239 PyDateTime_CheckExact(Cfunction),194\nPyConfig.parser_debug(Cmember),239 PyDateTime_Date(Ctype),193\nPyConfig.pathconfig_warnings(Cmember),240 PyDateTime_DATE_GET_FOLD(Cfunction),196\nPyConfig.perf_profiling(Cmember),242 PyDateTime_DATE_GET_HOUR(Cfunction),195\nPyConfig.platlibdir(Cmember),238 PyDateTime_DATE_GET_MICROSECOND (C function),\nPyConfig.prefix(Cmember),240 195\nPyConfig.program_name(Cmember),240 PyDateTime_DATE_GET_MINUTE(Cfunction),195\nPyConfig.pycache_prefix(Cmember),240 PyDateTime_DATE_GET_SECOND(Cfunction),195\nPyConfig.pythonpath_env(Cmember),239 PyDateTime_DATE_GET_TZINFO(Cfunction),196\nPyConfig.quiet(Cmember),240 PyDateTime_DateTime(Ctype),193\nPyConfig.run_command(Cmember),240 PyDateTime_DateTimeType(Cvar),193\nPyConfig.run_filename(Cmember),240 PyDateTime_DateType(Cvar),193\nPyConfig.run_module(Cmember),241 PyDateTime_Delta(Ctype),193\nPyConfig.run_presite(Cmember),241 PyDateTime_DELTA_GET_DAYS(Cfunction),196\nPyConfig.safe_path(Cmember),234 PyDateTime_DELTA_GET_MICROSECONDS (C func-\nPyConfig.show_ref_count(Cmember),241 tion),196\nPyConfig.site_import(Cmember),241 PyDateTime_DELTA_GET_SECONDS(Cfunction),196\nPyConfig.skip_source_first_line (C member), PyDateTime_DeltaType(Cvar),194\n241 PyDateTime_FromDateAndTime(Cfunction),194\nPyConfig.stdio_encoding(Cmember),241 PyDateTime_FromDateAndTimeAndFold (C func-\nPyConfig.stdio_errors(Cmember),241 tion),195\nPyConfig.tracemalloc(Cmember),242 PyDateTime_FromTimestamp(Cfunction),196\nPyConfig.use_environment(Cmember),242 PyDateTime_GET_DAY(Cfunction),195\nPyConfig.use_hash_seed(Cmember),237 PyDateTime_GET_MONTH(Cfunction),195\nPyConfig.user_site_directory(Cmember),242 PyDateTime_GET_YEAR(Cfunction),195\nPyConfig.verbose(Cmember),242 PyDateTime_Time(Ctype),193\nPyConfig.warn_default_encoding (C member), PyDateTime_TIME_GET_FOLD(Cfunction),196\n235 PyDateTime_TIME_GET_HOUR(Cfunction),196\nPyConfig.warnoptions(Cmember),242 PyDateTime_TIME_GET_MICROSECOND (C function),\nPyConfig.write_bytecode(Cmember),243 196\nPyConfig.xoptions(Cmember),243 PyDateTime_TIME_GET_MINUTE(Cfunction),196\nPyContext(Ctype),192 PyDateTime_TIME_GET_SECOND(Cfunction),196\nPyContext_CheckExact(Cfunction),192 PyDateTime_TIME_GET_TZINFO(Cfunction),196\nPyContext_Copy(Cfunction),192 PyDateTime_TimeType(Cvar),193\nPyContext_CopyCurrent(Cfunction),192 PyDateTime_TimeZone_UTC(Cvar),194\nPyContext_Enter(Cfunction),192 PyDateTime_TZInfoType(Cvar),194\nPyContext_Exit(Cfunction),193 PyDelta_Check(Cfunction),194\nPyContext_New(Cfunction),192 PyDelta_CheckExact(Cfunction),194\nPyContext_Type(Cvar),192 PyDelta_FromDSU(Cfunction),195\nPyContextToken(Ctype),192 PyDescr_IsData(Cfunction),183\nPyContextToken_CheckExact(Cfunction),192 PyDescr_NewClassMethod(Cfunction),183\nPyContextToken_Type(Cvar),192 PyDescr_NewGetSet(Cfunction),183\nPyContextVar(Ctype),192 PyDescr_NewMember(Cfunction),183\nPyContextVar_CheckExact(Cfunction),192 PyDescr_NewMethod(Cfunction),183\nPyContextVar_Get(Cfunction),193 PyDescr_NewWrapper(Cfunction),183\nPyContextVar_New(Cfunction),193 PyDict_AddWatcher(Cfunction),163\nPyContextVar_Reset(Cfunction),193 PyDict_Check(Cfunction),159\nPyContextVar_Set(Cfunction),193 PyDict_CheckExact(Cfunction),159\nPyContextVar_Type(Cvar),192 PyDict_Clear(Cfunction),159\nIndex 367\nThePython/CAPI,Release3.13.3\nPyDict_ClearWatcher(Cfunction),163 PyErr_Restore(Cfunction),55\nPyDict_Contains(Cfunction),159 PyErr_SetExcFromWindowsErr(Cfunction),51\nPyDict_ContainsString(Cfunction),159 PyErr_SetExcFromWindowsErrWithFilename (C\nPyDict_Copy(Cfunction),159 function),52\nPyDict_DelItem(Cfunction),160 PyErr_SetExcFromWindowsErrWithFilenameObject\nPyDict_DelItemString(Cfunction),160 (Cfunction),51\nPyDict_GetItem(Cfunction),160 PyErr_SetExcFromWindowsErrWithFilenameObjects\nPyDict_GetItemRef(Cfunction),160 (Cfunction),52\nPyDict_GetItemString(Cfunction),160 PyErr_SetExcInfo(Cfunction),56\nPyDict_GetItemStringRef(Cfunction),160 PyErr_SetFromErrno(Cfunction),51\nPyDict_GetItemWithError(Cfunction),160 PyErr_SetFromErrnoWithFilename (C function),\nPyDict_Items(Cfunction),161 51\nPyDict_Keys(Cfunction),161 PyErr_SetFromErrnoWithFilenameObject (C\nPyDict_Merge(Cfunction),162 function),51\nPyDict_MergeFromSeq2(Cfunction),162 PyErr_SetFromErrnoWithFilenameObjects (C\nPyDict_New(Cfunction),159 function),51\nPyDict_Next(Cfunction),161 PyErr_SetFromWindowsErr(Cfunction),51\nPyDict_Pop(Cfunction),161 PyErr_SetFromWindowsErrWithFilename (C\nPyDict_PopString(Cfunction),161 function),51\nPyDict_SetDefault(Cfunction),161 PyErr_SetHandledException(Cfunction),55\nPyDict_SetDefaultRef(Cfunction),161 PyErr_SetImportError(Cfunction),52\nPyDict_SetItem(Cfunction),159 PyErr_SetImportErrorSubclass(Cfunction),52\nPyDict_SetItemString(Cfunction),160 PyErr_SetInterrupt(Cfunction),57\nPyDict_Size(Cfunction),161 PyErr_SetInterruptEx(Cfunction),57\nPyDict_Type(Cvar),159 PyErr_SetNone(Cfunction),50\nPyDict_Unwatch(Cfunction),163 PyErr_SetObject(Cfunction),50\nPyDict_Update(Cfunction),162 PyErr_SetRaisedException(Cfunction),54\nPyDict_Values(Cfunction),161 PyErr_SetString(Cfunction),10,50\nPyDict_Watch(Cfunction),163 PyErr_SyntaxLocation(Cfunction),52\nPyDict_WatchCallback(Ctype),163 PyErr_SyntaxLocationEx(Cfunction),52\nPyDict_WatchEvent(Ctype),163 PyErr_SyntaxLocationObject(Cfunction),52\nPyDictObject(Ctype),159 PyErr_WarnEx(Cfunction),53\nPyDictProxy_New(Cfunction),159 PyErr_WarnExplicit(Cfunction),53\nPyDoc_STR(Cmacro),6 PyErr_WarnExplicitObject(Cfunction),53\nPyDoc_STRVAR(Cmacro),6 PyErr_WarnFormat(Cfunction),53\nPyEllipsis_Type(Cvar),184 PyErr_WriteUnraisable(Cfunction),49\nPyErr_BadArgument(Cfunction),50 PyEval_AcquireThread(Cfunction),215\nPyErr_BadInternalCall(Cfunction),52 PyEval_AcquireThread(),211\nPyErr_CheckSignals(Cfunction),56 PyEval_EvalCode(Cfunction),43\nPyErr_Clear(Cfunction),10,11,49 PyEval_EvalCodeEx(Cfunction),43\nPyErr_DisplayException(Cfunction),50 PyEval_EvalFrame(Cfunction),44\nPyErr_ExceptionMatches(Cfunction),11,53 PyEval_EvalFrameEx(Cfunction),44\nPyErr_Fetch(Cfunction),54 PyEval_GetBuiltins(Cfunction),84\nPyErr_Format(Cfunction),50 PyEval_GetFrame(Cfunction),84\nPyErr_FormatUnraisable(Cfunction),50 PyEval_GetFrameBuiltins(Cfunction),85\nPyErr_FormatV(Cfunction),50 PyEval_GetFrameGlobals(Cfunction),85\nPyErr_GetExcInfo(Cfunction),56 PyEval_GetFrameLocals(Cfunction),85\nPyErr_GetHandledException(Cfunction),55 PyEval_GetFuncDesc(Cfunction),85\nPyErr_GetRaisedException(Cfunction),54 PyEval_GetFuncName(Cfunction),85\nPyErr_GivenExceptionMatches(Cfunction),54 PyEval_GetGlobals(Cfunction),84\nPyErr_NewException(Cfunction),57 PyEval_GetLocals(Cfunction),84\nPyErr_NewExceptionWithDoc(Cfunction),58 PyEval_InitThreads(Cfunction),211\nPyErr_NoMemory(Cfunction),51 PyEval_InitThreads(),203\nPyErr_NormalizeException(Cfunction),55 PyEval_MergeCompilerFlags(Cfunction),44\nPyErr_Occurred(Cfunction),10,53 PyEval_ReleaseThread(Cfunction),216\nPyErr_Print(Cfunction),49 PyEval_ReleaseThread(),211\nPyErr_PrintEx(Cfunction),49 PyEval_RestoreThread(Cfunction),210,211\nPyErr_ResourceWarning(Cfunction),53 PyEval_RestoreThread(),211\n368 Index\nThePython/CAPI,Release3.13.3\nPyEval_SaveThread(Cfunction),210,211 PyExc_SystemError(Cvar),60\nPyEval_SaveThread(),211 PyExc_SystemExit(Cvar),60\nPyEval_SetProfile(Cfunction),221 PyExc_TabError(Cvar),60\nPyEval_SetProfileAllThreads(Cfunction),221 PyExc_TimeoutError(Cvar),60\nPyEval_SetTrace(Cfunction),221 PyExc_TypeError(Cvar),60\nPyEval_SetTraceAllThreads(Cfunction),221 PyExc_UnboundLocalError(Cvar),60\nPyExc_ArithmeticError(Cvar),60 PyExc_UnicodeDecodeError(Cvar),60\nPyExc_AssertionError(Cvar),60 PyExc_UnicodeEncodeError(Cvar),60\nPyExc_AttributeError(Cvar),60 PyExc_UnicodeError(Cvar),60\nPyExc_BaseException(Cvar),60 PyExc_UnicodeTranslateError(Cvar),60\nPyExc_BlockingIOError(Cvar),60 PyExc_UnicodeWarning(Cvar),62\nPyExc_BrokenPipeError(Cvar),60 PyExc_UserWarning(Cvar),62\nPyExc_BufferError(Cvar),60 PyExc_ValueError(Cvar),60\nPyExc_BytesWarning(Cvar),62 PyExc_Warning(Cvar),62\nPyExc_ChildProcessError(Cvar),60 PyExc_WindowsError(Cvar),62\nPyExc_ConnectionAbortedError(Cvar),60 PyExc_ZeroDivisionError(Cvar),60\nPyExc_ConnectionError(Cvar),60 PyException_GetArgs(Cfunction),58\nPyExc_ConnectionRefusedError(Cvar),60 PyException_GetCause(Cfunction),58\nPyExc_ConnectionResetError(Cvar),60 PyException_GetContext(Cfunction),58\nPyExc_DeprecationWarning(Cvar),62 PyException_GetTraceback(Cfunction),58\nPyExc_EnvironmentError(Cvar),62 PyException_SetArgs(Cfunction),58\nPyExc_EOFError(Cvar),60 PyException_SetCause(Cfunction),58\nPyExc_Exception(Cvar),60 PyException_SetContext(Cfunction),58\nPyExc_FileExistsError(Cvar),60 PyException_SetTraceback(Cfunction),58\nPyExc_FileNotFoundError(Cvar),60 PyFile_FromFd(Cfunction),173\nPyExc_FloatingPointError(Cvar),60 PyFile_GetLine(Cfunction),173\nPyExc_FutureWarning(Cvar),62 PyFile_SetOpenCodeHook(Cfunction),173\nPyExc_GeneratorExit(Cvar),60 PyFile_WriteObject(Cfunction),173\nPyExc_ImportError(Cvar),60 PyFile_WriteString(Cfunction),174\nPyExc_ImportWarning(Cvar),62 PyFloat_AS_DOUBLE(Cfunction),131\nPyExc_IndentationError(Cvar),60 PyFloat_AsDouble(Cfunction),130\nPyExc_IndexError(Cvar),60 PyFloat_Check(Cfunction),130\nPyExc_InterruptedError(Cvar),60 PyFloat_CheckExact(Cfunction),130\nPyExc_IOError(Cvar),62 PyFloat_FromDouble(Cfunction),130\nPyExc_IsADirectoryError(Cvar),60 PyFloat_FromString(Cfunction),130\nPyExc_KeyboardInterrupt(Cvar),60 PyFloat_GetInfo(Cfunction),131\nPyExc_KeyError(Cvar),60 PyFloat_GetMax(Cfunction),131\nPyExc_LookupError(Cvar),60 PyFloat_GetMin(Cfunction),131\nPyExc_MemoryError(Cvar),60 PyFloat_Pack2(Cfunction),131\nPyExc_ModuleNotFoundError(Cvar),60 PyFloat_Pack4(Cfunction),131\nPyExc_NameError(Cvar),60 PyFloat_Pack8(Cfunction),131\nPyExc_NotADirectoryError(Cvar),60 PyFloat_Type(Cvar),130\nPyExc_NotImplementedError(Cvar),60 PyFloat_Unpack2(Cfunction),132\nPyExc_OSError(Cvar),60 PyFloat_Unpack4(Cfunction),132\nPyExc_OverflowError(Cvar),60 PyFloat_Unpack8(Cfunction),132\nPyExc_PendingDeprecationWarning(Cvar),62 PyFloatObject(Ctype),130\nPyExc_PermissionError(Cvar),60 PyFrame_Check(Cfunction),188\nPyExc_ProcessLookupError(Cvar),60 PyFrame_GetBack(Cfunction),189\nPyExc_PythonFinalizationError(Cvar),60 PyFrame_GetBuiltins(Cfunction),189\nPyExc_RecursionError(Cvar),60 PyFrame_GetCode(Cfunction),189\nPyExc_ReferenceError(Cvar),60 PyFrame_GetGenerator(Cfunction),189\nPyExc_ResourceWarning(Cvar),62 PyFrame_GetGlobals(Cfunction),189\nPyExc_RuntimeError(Cvar),60 PyFrame_GetLasti(Cfunction),189\nPyExc_RuntimeWarning(Cvar),62 PyFrame_GetLineNumber(Cfunction),190\nPyExc_StopAsyncIteration(Cvar),60 PyFrame_GetLocals(Cfunction),189\nPyExc_StopIteration(Cvar),60 PyFrame_GetVar(Cfunction),189\nPyExc_SyntaxError(Cvar),60 PyFrame_GetVarString(Cfunction),189\nPyExc_SyntaxWarning(Cvar),62 PyFrame_Type(Cvar),188\nIndex 369\nThePython/CAPI,Release3.13.3\nPyFrameLocalsProxy_Check(Cfunction),190 PyImport_AddModuleObject(Cfunction),69\nPyFrameLocalsProxy_Type(Cvar),190 PyImport_AddModuleRef(Cfunction),69\nPyFrameObject(Ctype),188 PyImport_AppendInittab(Cfunction),71\nPyFrozenSet_Check(Cfunction),164 PyImport_ExecCodeModule(Cfunction),69\nPyFrozenSet_CheckExact(Cfunction),164 PyImport_ExecCodeModuleEx(Cfunction),70\nPyFrozenSet_New(Cfunction),164 PyImport_ExecCodeModuleObject(Cfunction),70\nPyFrozenSet_Type(Cvar),164 PyImport_ExecCodeModuleWithPathnames (C\nPyFunction_AddWatcher(Cfunction),166 function),70\nPyFunction_Check(Cfunction),165 PyImport_ExtendInittab(Cfunction),71\nPyFunction_ClearWatcher(Cfunction),167 PyImport_FrozenModules(Cvar),71\nPyFunction_GetAnnotations(Cfunction),166 PyImport_GetImporter(Cfunction),70\nPyFunction_GetClosure(Cfunction),166 PyImport_GetMagicNumber(Cfunction),70\nPyFunction_GetCode(Cfunction),166 PyImport_GetMagicTag(Cfunction),70\nPyFunction_GetDefaults(Cfunction),166 PyImport_GetModule(Cfunction),70\nPyFunction_GetGlobals(Cfunction),166 PyImport_GetModuleDict(Cfunction),70\nPyFunction_GetModule(Cfunction),166 PyImport_Import(Cfunction),69\nPyFunction_New(Cfunction),165 PyImport_ImportFrozenModule(Cfunction),71\nPyFunction_NewWithQualName(Cfunction),166 PyImport_ImportFrozenModuleObject (C func-\nPyFunction_SetAnnotations(Cfunction),166 tion),70\nPyFunction_SetClosure(Cfunction),166 PyImport_ImportModule(Cfunction),68\nPyFunction_SetDefaults(Cfunction),166 PyImport_ImportModuleEx(Cfunction),68\nPyFunction_SetVectorcall(Cfunction),166 PyImport_ImportModuleLevel(Cfunction),68\nPyFunction_Type(Cvar),165 PyImport_ImportModuleLevelObject (C func-\nPyFunction_WatchCallback(Ctype),167 tion),68\nPyFunction_WatchEvent(Ctype),167 PyImport_ImportModuleNoBlock(Cfunction),68\nPyFunctionObject(Ctype),165 PyImport_ReloadModule(Cfunction),69\nPyGC_Collect(Cfunction),306 PyIndex_Check(Cfunction),105\nPyGC_Disable(Cfunction),306 PyInstanceMethod_Check(Cfunction),167\nPyGC_Enable(Cfunction),306 PyInstanceMethod_Function(Cfunction),168\nPyGC_IsEnabled(Cfunction),307 PyInstanceMethod_GET_FUNCTION (C function),\nPyGen_Check(Cfunction),191 168\nPyGen_CheckExact(Cfunction),191 PyInstanceMethod_New(Cfunction),168\nPyGen_New(Cfunction),191 PyInstanceMethod_Type(Cvar),167\nPyGen_NewWithQualName(Cfunction),191 PyInterpreterConfig(Ctype),216\nPyGen_Type(Cvar),191 PyInterpreterConfig_DEFAULT_GIL (C macro),\nPyGenObject(Ctype),191 217\nPyGetSetDef(Ctype),268 PyInterpreterConfig_OWN_GIL(Cmacro),217\nPyGetSetDef.closure(Cmember),268 PyInterpreterConfig_SHARED_GIL (C macro),\nPyGetSetDef.doc(Cmember),268 217\nPyGetSetDef.get(Cmember),268 PyInterpreterConfig.allow_daemon_threads\nPyGetSetDef.name(Cmember),268 (Cmember),217\nPyGetSetDef.set(Cmember),268 PyInterpreterConfig.allow_exec (C member),\nPyGILState_Check(Cfunction),212 216\nPyGILState_Ensure(Cfunction),212 PyInterpreterConfig.allow_fork (C member),\nPyGILState_GetThisThreadState (C function), 216\n212 PyInterpreterConfig.allow_threads (C mem-\nPyGILState_Release(Cfunction),212 ber),217\nPyHASH_BITS(Cmacro),83 PyInterpreterConfig.check_multi_interp_extensions\nPyHash_FuncDef(Ctype),83 (Cmember),217\nPyHash_FuncDef.hash_bits(Cmember),83 PyInterpreterConfig.gil(Cmember),217\nPyHash_FuncDef.name(Cmember),83 PyInterpreterConfig.use_main_obmalloc (C\nPyHash_FuncDef.seed_bits(Cmember),83 member),216\nPyHash_GetFuncDef(Cfunction),83 PyInterpreterState(Ctype),211\nPyHASH_IMAG(Cmacro),83 PyInterpreterState_Clear(Cfunction),213\nPyHASH_INF(Cmacro),83 PyInterpreterState_Delete(Cfunction),213\nPyHASH_MODULUS(Cmacro),83 PyInterpreterState_Get(Cfunction),214\nPyHASH_MULTIPLIER(Cmacro),83 PyInterpreterState_GetDict(Cfunction),214\nPyImport_AddModule(Cfunction),69 PyInterpreterState_GetID(Cfunction),214\n370 Index\nThePython/CAPI,Release3.13.3\nPyInterpreterState_Head(Cfunction),222 PyLong_FromUnsignedNativeBytes (C function),\nPyInterpreterState_Main(Cfunction),222 124\nPyInterpreterState_New(Cfunction),213 PyLong_FromVoidPtr(Cfunction),124\nPyInterpreterState_Next(Cfunction),222 PyLong_GetInfo(Cfunction),129\nPyInterpreterState_ThreadHead (C function), PyLong_Type(Cvar),123\n222 PyLongObject(Ctype),123\nPyIter_Check(Cfunction),109 PyMapping_Check(Cfunction),107\nPyIter_Next(Cfunction),109 PyMapping_DelItem(Cfunction),108\nPyIter_Send(Cfunction),110 PyMapping_DelItemString(Cfunction),108\nPyList_Append(Cfunction),158 PyMapping_GetItemString(Cfunction),108\nPyList_AsTuple(Cfunction),159 PyMapping_GetOptionalItem(Cfunction),108\nPyList_Check(Cfunction),157 PyMapping_GetOptionalItemString (C function),\nPyList_CheckExact(Cfunction),157 108\nPyList_Clear(Cfunction),158 PyMapping_HasKey(Cfunction),108\nPyList_Extend(Cfunction),158 PyMapping_HasKeyString(Cfunction),108\nPyList_GET_ITEM(Cfunction),158 PyMapping_HasKeyStringWithError (C function),\nPyList_GET_SIZE(Cfunction),157 108\nPyList_GetItem(Cfunction),9,158 PyMapping_HasKeyWithError(Cfunction),108\nPyList_GetItemRef(Cfunction),157 PyMapping_Items(Cfunction),109\nPyList_GetSlice(Cfunction),158 PyMapping_Keys(Cfunction),109\nPyList_Insert(Cfunction),158 PyMapping_Length(Cfunction),108\nPyList_New(Cfunction),157 PyMapping_SetItemString(Cfunction),108\nPyList_Reverse(Cfunction),159 PyMapping_Size(Cfunction),108\nPyList_SET_ITEM(Cfunction),158 PyMapping_Values(Cfunction),109\nPyList_SetItem(Cfunction),7,158 PyMappingMethods(Ctype),297\nPyList_SetSlice(Cfunction),158 PyMappingMethods.mp_ass_subscript (C mem-\nPyList_Size(Cfunction),157 ber),297\nPyList_Sort(Cfunction),159 PyMappingMethods.mp_length(Cmember),297\nPyList_Type(Cvar),157 PyMappingMethods.mp_subscript (C member),\nPyListObject(Ctype),157 297\nPyLong_AS_LONG(Cfunction),125 PyMarshal_ReadLastObjectFromFile (C func-\nPyLong_AsDouble(Cfunction),126 tion),72\nPyLong_AsInt(Cfunction),125 PyMarshal_ReadLongFromFile(Cfunction),72\nPyLong_AsLong(Cfunction),124 PyMarshal_ReadObjectFromFile(Cfunction),72\nPyLong_AsLongAndOverflow(Cfunction),125 PyMarshal_ReadObjectFromString (C function),\nPyLong_AsLongLong(Cfunction),125 72\nPyLong_AsLongLongAndOverflow(Cfunction),125 PyMarshal_ReadShortFromFile(Cfunction),72\nPyLong_AsNativeBytes(Cfunction),127 PyMarshal_WriteLongToFile(Cfunction),72\nPyLong_AsSize_t(Cfunction),126 PyMarshal_WriteObjectToFile(Cfunction),72\nPyLong_AsSsize_t(Cfunction),125 PyMarshal_WriteObjectToString(Cfunction),72\nPyLong_AsUnsignedLong(Cfunction),126 PyMem_Calloc(Cfunction),251\nPyLong_AsUnsignedLongLong(Cfunction),126 PyMem_Del(Cfunction),252\nPyLong_AsUnsignedLongLongMask (C function), PYMEM_DOMAIN_MEM(Cmacro),254\n126 PYMEM_DOMAIN_OBJ(Cmacro),254\nPyLong_AsUnsignedLongMask(Cfunction),126 PYMEM_DOMAIN_RAW(Cmacro),254\nPyLong_AsVoidPtr(Cfunction),126 PyMem_Free(Cfunction),252\nPyLong_Check(Cfunction),123 PyMem_GetAllocator(Cfunction),255\nPyLong_CheckExact(Cfunction),123 PyMem_Malloc(Cfunction),251\nPyLong_FromDouble(Cfunction),124 PyMem_New(Cmacro),252\nPyLong_FromLong(Cfunction),123 PyMem_RawCalloc(Cfunction),250\nPyLong_FromLongLong(Cfunction),124 PyMem_RawFree(Cfunction),251\nPyLong_FromNativeBytes(Cfunction),124 PyMem_RawMalloc(Cfunction),250\nPyLong_FromSize_t(Cfunction),123 PyMem_RawRealloc(Cfunction),251\nPyLong_FromSsize_t(Cfunction),123 PyMem_Realloc(Cfunction),251\nPyLong_FromString(Cfunction),124 PyMem_Resize(Cmacro),252\nPyLong_FromUnicodeObject(Cfunction),124 PyMem_SetAllocator(Cfunction),255\nPyLong_FromUnsignedLong(Cfunction),123 PyMem_SetupDebugHooks(Cfunction),255\nPyLong_FromUnsignedLongLong(Cfunction),124 PyMemAllocatorDomain(Ctype),254\nIndex 371\nThePython/CAPI,Release3.13.3\nPyMemAllocatorEx(Ctype),254 PyModuleDef_Slot(Ctype),177\nPyMember_GetOne(Cfunction),265 PyModuleDef_Slot.slot(Cmember),177\nPyMember_SetOne(Cfunction),265 PyModuleDef_Slot.value(Cmember),177\nPyMemberDef(Ctype),265 PyModuleDef.m_base(Cmember),175\nPyMemberDef.doc(Cmember),265 PyModuleDef.m_clear(Cmember),176\nPyMemberDef.flags(Cmember),265 PyModuleDef.m_doc(Cmember),175\nPyMemberDef.name(Cmember),265 PyModuleDef.m_free(Cmember),176\nPyMemberDef.offset(Cmember),265 PyModuleDef.m_methods(Cmember),175\nPyMemberDef.type(Cmember),265 PyModuleDef.m_name(Cmember),175\nPyMemoryView_Check(Cfunction),185 PyModuleDef.m_size(Cmember),175\nPyMemoryView_FromBuffer(Cfunction),185 PyModuleDef.m_slots(Cmember),175\nPyMemoryView_FromMemory(Cfunction),185 PyModuleDef.m_slots.m_reload(Cmember),175\nPyMemoryView_FromObject(Cfunction),185 PyModuleDef.m_traverse(Cmember),176\nPyMemoryView_GET_BASE(Cfunction),185 PyMonitoring_EnterScope(Cfunction),314\nPyMemoryView_GET_BUFFER(Cfunction),185 PyMonitoring_ExitScope(Cfunction),315\nPyMemoryView_GetContiguous(Cfunction),185 PyMonitoring_FireBranchEvent(Cfunction),313\nPyMethod_Check(Cfunction),168 PyMonitoring_FireCallEvent(Cfunction),313\nPyMethod_Function(Cfunction),168 PyMonitoring_FireCRaiseEvent(Cfunction),314\nPyMethod_GET_FUNCTION(Cfunction),168 PyMonitoring_FireCReturnEvent (C function),\nPyMethod_GET_SELF(Cfunction),168 313\nPyMethod_New(Cfunction),168 PyMonitoring_FireExceptionHandledEvent (C\nPyMethod_Self(Cfunction),168 function),314\nPyMethod_Type(Cvar),168 PyMonitoring_FireJumpEvent(Cfunction),313\nPyMethodDef(Ctype),262 PyMonitoring_FireLineEvent(Cfunction),313\nPyMethodDef.ml_doc(Cmember),263 PyMonitoring_FirePyResumeEvent (C function),\nPyMethodDef.ml_flags(Cmember),262 313\nPyMethodDef.ml_meth(Cmember),262 PyMonitoring_FirePyReturnEvent (C function),\nPyMethodDef.ml_name(Cmember),262 313\nPyMODINIT_FUNC(Cmacro),4 PyMonitoring_FirePyStartEvent (C function),\nPyModule_Add(Cfunction),180 313\nPyModule_AddFunctions(Cfunction),179 PyMonitoring_FirePyThrowEvent (C function),\nPyModule_AddIntConstant(Cfunction),181 314\nPyModule_AddIntMacro(Cmacro),181 PyMonitoring_FirePyUnwindEvent (C function),\nPyModule_AddObject(Cfunction),180 314\nPyModule_AddObjectRef(Cfunction),179 PyMonitoring_FirePyYieldEvent (C function),\nPyModule_AddStringConstant(Cfunction),181 313\nPyModule_AddStringMacro(Cmacro),181 PyMonitoring_FireRaiseEvent(Cfunction),314\nPyModule_AddType(Cfunction),181 PyMonitoring_FireReraiseEvent (C function),\nPyModule_Check(Cfunction),174 314\nPyModule_CheckExact(Cfunction),174 PyMonitoring_FireStopIterationEvent (C\nPyModule_Create(Cfunction),176 function),314\nPyModule_Create2(Cfunction),176 PyMonitoringState(Ctype),313\nPyModule_ExecDef(Cfunction),179 PyMutex(Ctype),225\nPyModule_FromDefAndSpec(Cfunction),178 PyMutex_Lock(Cfunction),225\nPyModule_FromDefAndSpec2(Cfunction),179 PyMutex_Unlock(Cfunction),225\nPyModule_GetDef(Cfunction),174 PyNumber_Absolute(Cfunction),103\nPyModule_GetDict(Cfunction),174 PyNumber_Add(Cfunction),103\nPyModule_GetFilename(Cfunction),175 PyNumber_And(Cfunction),104\nPyModule_GetFilenameObject(Cfunction),174 PyNumber_AsSsize_t(Cfunction),105\nPyModule_GetName(Cfunction),174 PyNumber_Check(Cfunction),103\nPyModule_GetNameObject(Cfunction),174 PyNumber_Divmod(Cfunction),103\nPyModule_GetState(Cfunction),174 PyNumber_Float(Cfunction),105\nPyModule_New(Cfunction),174 PyNumber_FloorDivide(Cfunction),103\nPyModule_NewObject(Cfunction),174 PyNumber_Index(Cfunction),105\nPyModule_SetDocString(Cfunction),179 PyNumber_InPlaceAdd(Cfunction),104\nPyModule_Type(Cvar),174 PyNumber_InPlaceAnd(Cfunction),105\nPyModuleDef(Ctype),175 PyNumber_InPlaceFloorDivide(Cfunction),104\nPyModuleDef_Init(Cfunction),177 PyNumber_InPlaceLshift(Cfunction),105\n372 Index\nThePython/CAPI,Release3.13.3\nPyNumber_InPlaceMatrixMultiply (C function), PyNumberMethods.nb_inplace_true_divide (C\n104 member),297\nPyNumber_InPlaceMultiply(Cfunction),104 PyNumberMethods.nb_inplace_xor (C member),\nPyNumber_InPlaceOr(Cfunction),105 297\nPyNumber_InPlacePower(Cfunction),104 PyNumberMethods.nb_int(Cmember),296\nPyNumber_InPlaceRemainder(Cfunction),104 PyNumberMethods.nb_invert(Cmember),296\nPyNumber_InPlaceRshift(Cfunction),105 PyNumberMethods.nb_lshift(Cmember),296\nPyNumber_InPlaceSubtract(Cfunction),104 PyNumberMethods.nb_matrix_multiply (C mem-\nPyNumber_InPlaceTrueDivide(Cfunction),104 ber),297\nPyNumber_InPlaceXor(Cfunction),105 PyNumberMethods.nb_multiply(Cmember),296\nPyNumber_Invert(Cfunction),103 PyNumberMethods.nb_negative(Cmember),296\nPyNumber_Long(Cfunction),105 PyNumberMethods.nb_or(Cmember),296\nPyNumber_Lshift(Cfunction),104 PyNumberMethods.nb_positive(Cmember),296\nPyNumber_MatrixMultiply(Cfunction),103 PyNumberMethods.nb_power(Cmember),296\nPyNumber_Multiply(Cfunction),103 PyNumberMethods.nb_remainder(Cmember),296\nPyNumber_Negative(Cfunction),103 PyNumberMethods.nb_reserved(Cmember),296\nPyNumber_Or(Cfunction),104 PyNumberMethods.nb_rshift(Cmember),296\nPyNumber_Positive(Cfunction),103 PyNumberMethods.nb_subtract(Cmember),296\nPyNumber_Power(Cfunction),103 PyNumberMethods.nb_true_divide (C member),\nPyNumber_Remainder(Cfunction),103 297\nPyNumber_Rshift(Cfunction),104 PyNumberMethods.nb_xor(Cmember),296\nPyNumber_Subtract(Cfunction),103 PyObject(Ctype),260\nPyNumber_ToBase(Cfunction),105 PyObject_ASCII(Cfunction),95\nPyNumber_TrueDivide(Cfunction),103 PyObject_AsFileDescriptor(Cfunction),173\nPyNumber_Xor(Cfunction),104 PyObject_Bytes(Cfunction),96\nPyNumberMethods(Ctype),295 PyObject_Call(Cfunction),100\nPyNumberMethods.nb_absolute(Cmember),296 PyObject_CallFunction(Cfunction),101\nPyNumberMethods.nb_add(Cmember),296 PyObject_CallFunctionObjArgs(Cfunction),101\nPyNumberMethods.nb_and(Cmember),296 PyObject_CallMethod(Cfunction),101\nPyNumberMethods.nb_bool(Cmember),296 PyObject_CallMethodNoArgs(Cfunction),101\nPyNumberMethods.nb_divmod(Cmember),296 PyObject_CallMethodObjArgs(Cfunction),101\nPyNumberMethods.nb_float(Cmember),296 PyObject_CallMethodOneArg(Cfunction),102\nPyNumberMethods.nb_floor_divide (C member), PyObject_CallNoArgs(Cfunction),101\n297 PyObject_CallObject(Cfunction),101\nPyNumberMethods.nb_index(Cmember),297 PyObject_Calloc(Cfunction),253\nPyNumberMethods.nb_inplace_add (C member), PyObject_CallOneArg(Cfunction),101\n296 PyObject_CheckBuffer(Cfunction),115\nPyNumberMethods.nb_inplace_and (C member), PyObject_ClearManagedDict(Cfunction),98\n297 PyObject_ClearWeakRefs(Cfunction),186\nPyNumberMethods.nb_inplace_floor_divide PyObject_CopyData(Cfunction),116\n(Cmember),297 PyObject_Del(Cfunction),259\nPyNumberMethods.nb_inplace_lshift (C mem- PyObject_DelAttr(Cfunction),94\nber),297 PyObject_DelAttrString(Cfunction),94\nPyNumberMethods.nb_inplace_matrix_multiply PyObject_DelItem(Cfunction),97\n(Cmember),297 PyObject_DelItemString(Cfunction),97\nPyNumberMethods.nb_inplace_multiply (C PyObject_Dir(Cfunction),97\nmember),296 PyObject_Format(Cfunction),95\nPyNumberMethods.nb_inplace_or (C member), PyObject_Free(Cfunction),253\n297 PyObject_GC_Del(Cfunction),305\nPyNumberMethods.nb_inplace_power (C mem- PyObject_GC_IsFinalized(Cfunction),305\nber),297 PyObject_GC_IsTracked(Cfunction),305\nPyNumberMethods.nb_inplace_remainder (C PyObject_GC_New(Cmacro),304\nmember),297 PyObject_GC_NewVar(Cmacro),304\nPyNumberMethods.nb_inplace_rshift (C mem- PyObject_GC_Resize(Cmacro),305\nber),297 PyObject_GC_Track(Cfunction),305\nPyNumberMethods.nb_inplace_subtract (C PyObject_GC_UnTrack(Cfunction),305\nmember),296 PyObject_GenericGetAttr(Cfunction),94\nPyObject_GenericGetDict(Cfunction),94\nIndex 373\nThePython/CAPI,Release3.13.3\nPyObject_GenericHash(Cfunction),84 PyOS_AfterFork(Cfunction),64\nPyObject_GenericSetAttr(Cfunction),94 PyOS_AfterFork_Child(Cfunction),64\nPyObject_GenericSetDict(Cfunction),95 PyOS_AfterFork_Parent(Cfunction),63\nPyObject_GetAIter(Cfunction),97 PyOS_BeforeFork(Cfunction),63\nPyObject_GetArenaAllocator(Cfunction),257 PyOS_CheckStack(Cfunction),64\nPyObject_GetAttr(Cfunction),93 PyOS_double_to_string(Cfunction),82\nPyObject_GetAttrString(Cfunction),93 PyOS_FSPath(Cfunction),63\nPyObject_GetBuffer(Cfunction),115 PyOS_getsig(Cfunction),64\nPyObject_GetItem(Cfunction),97 PyOS_InputHook(Cvar),42\nPyObject_GetItemData(Cfunction),98 PyOS_ReadlineFunctionPointer(Cvar),42\nPyObject_GetIter(Cfunction),97 PyOS_setsig(Cfunction),64\nPyObject_GetOptionalAttr(Cfunction),93 PyOS_sighandler_t(Ctype),64\nPyObject_GetOptionalAttrString (C function), PyOS_snprintf(Cfunction),81\n94 PyOS_stricmp(Cfunction),83\nPyObject_GetTypeData(Cfunction),97 PyOS_string_to_double(Cfunction),82\nPyObject_HasAttr(Cfunction),93 PyOS_strnicmp(Cfunction),83\nPyObject_HasAttrString(Cfunction),93 PyOS_strtol(Cfunction),82\nPyObject_HasAttrStringWithError (C function), PyOS_strtoul(Cfunction),81\n93 PyOS_vsnprintf(Cfunction),81\nPyObject_HasAttrWithError(Cfunction),93 PyPreConfig(Ctype),230\nPyObject_Hash(Cfunction),96 PyPreConfig_InitIsolatedConfig (C function),\nPyObject_HashNotImplemented(Cfunction),96 230\nPyObject_HEAD(Cmacro),260 PyPreConfig_InitPythonConfig(Cfunction),230\nPyObject_HEAD_INIT(Cmacro),261 PyPreConfig.allocator(Cmember),230\nPyObject_Init(Cfunction),259 PyPreConfig.coerce_c_locale(Cmember),230\nPyObject_InitVar(Cfunction),259 PyPreConfig.coerce_c_locale_warn (C mem-\nPyObject_IS_GC(Cfunction),305 ber),230\nPyObject_IsInstance(Cfunction),96 PyPreConfig.configure_locale(Cmember),230\nPyObject_IsSubclass(Cfunction),96 PyPreConfig.dev_mode(Cmember),230\nPyObject_IsTrue(Cfunction),96 PyPreConfig.isolated(Cmember),231\nPyObject_Length(Cfunction),97 PyPreConfig.legacy_windows_fs_encoding (C\nPyObject_LengthHint(Cfunction),97 member),231\nPyObject_Malloc(Cfunction),253 PyPreConfig.parse_argv(Cmember),231\nPyObject_New(Cmacro),259 PyPreConfig.use_environment(Cmember),231\nPyObject_NewVar(Cmacro),259 PyPreConfig.utf8_mode(Cmember),231\nPyObject_Not(Cfunction),96 PyProperty_Type(Cvar),183\nPyObject_Print(Cfunction),92 PyRefTracer(Ctype),221\nPyObject_Realloc(Cfunction),253 PyRefTracer_CREATE(Cvar),222\nPyObject_Repr(Cfunction),95 PyRefTracer_DESTROY(Cvar),222\nPyObject_RichCompare(Cfunction),95 PyRefTracer_GetTracer(Cfunction),222\nPyObject_RichCompareBool(Cfunction),95 PyRefTracer_SetTracer(Cfunction),222\nPyObject_SelfIter(Cfunction),97 PyRun_AnyFile(Cfunction),41\nPyObject_SetArenaAllocator(Cfunction),257 PyRun_AnyFileEx(Cfunction),41\nPyObject_SetAttr(Cfunction),94 PyRun_AnyFileExFlags(Cfunction),41\nPyObject_SetAttrString(Cfunction),94 PyRun_AnyFileFlags(Cfunction),41\nPyObject_SetItem(Cfunction),97 PyRun_File(Cfunction),43\nPyObject_Size(Cfunction),97 PyRun_FileEx(Cfunction),43\nPyObject_Str(Cfunction),95 PyRun_FileExFlags(Cfunction),43\nPyObject_Type(Cfunction),96 PyRun_FileFlags(Cfunction),43\nPyObject_TypeCheck(Cfunction),96 PyRun_InteractiveLoop(Cfunction),42\nPyObject_VAR_HEAD(Cmacro),260 PyRun_InteractiveLoopFlags(Cfunction),42\nPyObject_Vectorcall(Cfunction),102 PyRun_InteractiveOne(Cfunction),42\nPyObject_VectorcallDict(Cfunction),102 PyRun_InteractiveOneFlags(Cfunction),42\nPyObject_VectorcallMethod(Cfunction),102 PyRun_SimpleFile(Cfunction),41\nPyObject_VisitManagedDict(Cfunction),98 PyRun_SimpleFileEx(Cfunction),41\nPyObjectArenaAllocator(Ctype),257 PyRun_SimpleFileExFlags(Cfunction),41\nPyObject.ob_refcnt(Cmember),274 PyRun_SimpleString(Cfunction),41\nPyObject.ob_type(Cmember),274 PyRun_SimpleStringFlags(Cfunction),41\n374 Index\nThePython/CAPI,Release3.13.3\nPyRun_String(Cfunction),42 PySlice_GetIndicesEx(Cfunction),183\nPyRun_StringFlags(Cfunction),42 PySlice_New(Cfunction),183\nPySendResult(Ctype),110 PySlice_Type(Cvar),183\nPySeqIter_Check(Cfunction),182 PySlice_Unpack(Cfunction),184\nPySeqIter_New(Cfunction),182 PyState_AddModule(Cfunction),182\nPySeqIter_Type(Cvar),182 PyState_FindModule(Cfunction),182\nPySequence_Check(Cfunction),106 PyState_RemoveModule(Cfunction),182\nPySequence_Concat(Cfunction),106 PyStatus(Ctype),228\nPySequence_Contains(Cfunction),107 PyStatus_Error(Cfunction),229\nPySequence_Count(Cfunction),106 PyStatus_Exception(Cfunction),229\nPySequence_DelItem(Cfunction),106 PyStatus_Exit(Cfunction),229\nPySequence_DelSlice(Cfunction),106 PyStatus_IsError(Cfunction),229\nPySequence_Fast(Cfunction),107 PyStatus_IsExit(Cfunction),229\nPySequence_Fast_GET_ITEM(Cfunction),107 PyStatus_NoMemory(Cfunction),229\nPySequence_Fast_GET_SIZE(Cfunction),107 PyStatus_Ok(Cfunction),229\nPySequence_Fast_ITEMS(Cfunction),107 PyStatus.err_msg(Cmember),228\nPySequence_GetItem(Cfunction),9,106 PyStatus.exitcode(Cmember),228\nPySequence_GetSlice(Cfunction),106 PyStatus.func(Cmember),228\nPySequence_Index(Cfunction),107 PyStructSequence_Desc(Ctype),156\nPySequence_InPlaceConcat(Cfunction),106 PyStructSequence_Desc.doc(Cmember),156\nPySequence_InPlaceRepeat(Cfunction),106 PyStructSequence_Desc.fields(Cmember),156\nPySequence_ITEM(Cfunction),107 PyStructSequence_Desc.n_in_sequence (C\nPySequence_Length(Cfunction),106 member),156\nPySequence_List(Cfunction),107 PyStructSequence_Desc.name(Cmember),156\nPySequence_Repeat(Cfunction),106 PyStructSequence_Field(Ctype),156\nPySequence_SetItem(Cfunction),106 PyStructSequence_Field.doc(Cmember),156\nPySequence_SetSlice(Cfunction),106 PyStructSequence_Field.name(Cmember),156\nPySequence_Size(Cfunction),106 PyStructSequence_GET_ITEM(Cfunction),157\nPySequence_Tuple(Cfunction),107 PyStructSequence_GetItem(Cfunction),156\nPySequenceMethods(Ctype),297 PyStructSequence_InitType(Cfunction),156\nPySequenceMethods.sq_ass_item (C member), PyStructSequence_InitType2(Cfunction),156\n298 PyStructSequence_New(Cfunction),156\nPySequenceMethods.sq_concat(Cmember),297 PyStructSequence_NewType(Cfunction),156\nPySequenceMethods.sq_contains (C member), PyStructSequence_SET_ITEM(Cfunction),157\n298 PyStructSequence_SetItem(Cfunction),157\nPySequenceMethods.sq_inplace_concat (C PyStructSequence_UnnamedField(Cvar),156\nmember),298 PySys_AddAuditHook(Cfunction),67\nPySequenceMethods.sq_inplace_repeat (C PySys_Audit(Cfunction),66\nmember),298 PySys_AuditTuple(Cfunction),67\nPySequenceMethods.sq_item(Cmember),298 PySys_FormatStderr(Cfunction),66\nPySequenceMethods.sq_length(Cmember),297 PySys_FormatStdout(Cfunction),66\nPySequenceMethods.sq_repeat(Cmember),297 PySys_GetObject(Cfunction),66\nPySet_Add(Cfunction),165 PySys_GetXOptions(Cfunction),66\nPySet_Check(Cfunction),164 PySys_ResetWarnOptions(Cfunction),66\nPySet_CheckExact(Cfunction),164 PySys_SetArgv(Cfunction),208\nPySet_Clear(Cfunction),165 PySys_SetArgvEx(Cfunction),208\nPySet_Contains(Cfunction),165 PySys_SetObject(Cfunction),66\nPySet_Discard(Cfunction),165 PySys_WriteStderr(Cfunction),66\nPySet_GET_SIZE(Cfunction),165 PySys_WriteStdout(Cfunction),66\nPySet_New(Cfunction),164 Python 3000,329\nPySet_Pop(Cfunction),165 Python Enhancement Proposals\nPySet_Size(Cfunction),165 PEP 1,329\nPySet_Type(Cvar),164 PEP 7,3,6\nPySetObject(Ctype),164 PEP 238,44,322\nPySignal_SetWakeupFd(Cfunction),57 PEP 278,332\nPySlice_AdjustIndices(Cfunction),184 PEP 302,326\nPySlice_Check(Cfunction),183 PEP 343,320\nPySlice_GetIndices(Cfunction),183 PEP 353,10\nIndex 375\nThePython/CAPI,Release3.13.3\nPEP 362,318,329 PYTHONINSPECT,201,237\nPEP 383,144,145 PYTHONINTMAXSTRDIGITS,238\nPEP 387,13,14 PYTHONIOENCODING,241\nPEP 393,136 PYTHONLEGACYWINDOWSFSENCODING,202,231\nPEP 411,329 PYTHONLEGACYWINDOWSSTDIO,202,238\nPEP 420,328,329 PYTHONMALLOC,250,254,255,257\nPEP 432,247 PYTHONMALLOCSTATS,238,250\nPEP 442,294 PYTHONNODEBUGRANGES,235\nPEP 443,323 PYTHONNOUSERSITE,202,242\nPEP 451,177 PYTHONOPTIMIZE,202,239\nPEP 456,84 PYTHONPATH,12,201,239\nPEP 483,323 PYTHONPLATLIBDIR,238\nPEP 484,317,323,332,333 PYTHONPROFILEIMPORTTIME,237\nPEP 489,178,217 PYTHONPYCACHEPREFIX,240\nPEP 492,318,320 PYTHONSAFEPATH,234\nPEP 498,322 PYTHONTRACEMALLOC,242\nPEP 519,329 PYTHONUNBUFFERED,203,234\nPEP 523,190,215 PYTHONUTF8,231,245\nPEP 525,318 PYTHONVERBOSE,203,242\nPEP 526,317,333 PYTHONWARNINGS,243\nPEP 528,202,238 PyThread_create_key(Cfunction),224\nPEP 529,145,202 PyThread_delete_key(Cfunction),224\nPEP 538,245 PyThread_delete_key_value(Cfunction),224\nPEP 539,223 PyThread_get_key_value(Cfunction),224\nPEP 540,245 PyThread_ReInitTLS(Cfunction),224\nPEP 552,235 PyThread_set_key_value(Cfunction),224\nPEP 554,218 PyThread_tss_alloc(Cfunction),223\nPEP 578,67 PyThread_tss_create(Cfunction),224\nPEP 585,323 PyThread_tss_delete(Cfunction),224\nPEP 587,227 PyThread_tss_free(Cfunction),223\nPEP 590,98 PyThread_tss_get(Cfunction),224\nPEP 623,137 PyThread_tss_is_created(Cfunction),224\nPEP 0626#out-of-process-debuggers-and-prPoyfTihlreerasd,_tss_set(Cfunction),224\n170 PyThreadState(Ctype),209,211\nPEP 634,284 PyThreadState_Clear(Cfunction),213\nPEP 667,84,190 PyThreadState_Delete(Cfunction),213\nPEP 0683,45,46,324 PyThreadState_DeleteCurrent(Cfunction),214\nPEP 703,322,324 PyThreadState_EnterTracing(Cfunction),214\nPEP 3116,332 PyThreadState_Get(Cfunction),212\nPEP 3119,96 PyThreadState_GetDict(Cfunction),215\nPEP 3121,175 PyThreadState_GetFrame(Cfunction),214\nPEP 3147,70 PyThreadState_GetID(Cfunction),214\nPEP 3151,61 PyThreadState_GetInterpreter(Cfunction),214\nPEP 3155,330 PyThreadState_GetUnchecked(Cfunction),212\nPYTHON_CPU_COUNT,238 PyThreadState_LeaveTracing(Cfunction),214\nPYTHON_GIL,324 PyThreadState_New(Cfunction),213\nPYTHON_PERF_JIT_SUPPORT,242 PyThreadState_Next(Cfunction),222\nPYTHON_PRESITE,241 PyThreadState_SetAsyncExc(Cfunction),215\nPYTHONCOERCECLOCALE,245 PyThreadState_Swap(Cfunction),212\nPYTHONDEBUG,200,239 PyThreadState.interp(Cmember),211\nPYTHONDEVMODE,235 PyTime_AsSecondsDouble(Cfunction),88\nPYTHONDONTWRITEBYTECODE,201,243 PyTime_Check(Cfunction),194\nPYTHONDUMPREFS,236 PyTime_CheckExact(Cfunction),194\nPYTHONEXECUTABLE,240 PyTime_FromTime(Cfunction),195\nPYTHONFAULTHANDLER,236 PyTime_FromTimeAndFold(Cfunction),195\nPYTHONHASHSEED,201,237 PyTime_MAX(Cvar),87\nPYTHONHOME,12,201,209,237 PyTime_MIN(Cvar),87\nPythonic,330 PyTime_Monotonic(Cfunction),87\n376 Index\nThePython/CAPI,Release3.13.3\nPyTime_MonotonicRaw(Cfunction),88 PyType_Slot(Ctype),122\nPyTime_PerfCounter(Cfunction),87 PyType_Slot.pfunc(Cmember),123\nPyTime_PerfCounterRaw(Cfunction),88 PyType_Slot.slot(Cmember),122\nPyTime_t(Ctype),87 PyType_Spec(Ctype),121\nPyTime_Time(Cfunction),87 PyType_Spec.basicsize(Cmember),121\nPyTime_TimeRaw(Cfunction),88 PyType_Spec.flags(Cmember),122\nPyTimeZone_FromOffset(Cfunction),195 PyType_Spec.itemsize(Cmember),122\nPyTimeZone_FromOffsetAndName(Cfunction),195 PyType_Spec.name(Cmember),121\nPyTrace_C_CALL(Cvar),221 PyType_Spec.slots(Cmember),122\nPyTrace_C_EXCEPTION(Cvar),221 PyType_Type(Cvar),117\nPyTrace_C_RETURN(Cvar),221 PyType_Watch(Cfunction),118\nPyTrace_CALL(Cvar),220 PyType_WatchCallback(Ctype),118\nPyTrace_EXCEPTION(Cvar),220 PyTypeObject(Ctype),117\nPyTrace_LINE(Cvar),220 PyTypeObject.tp_alloc(Cmember),291\nPyTrace_OPCODE(Cvar),221 PyTypeObject.tp_as_async(Cmember),278\nPyTrace_RETURN(Cvar),220 PyTypeObject.tp_as_buffer(Cmember),280\nPyTraceMalloc_Track(Cfunction),257 PyTypeObject.tp_as_mapping(Cmember),279\nPyTraceMalloc_Untrack(Cfunction),257 PyTypeObject.tp_as_number(Cmember),278\nPyTuple_Check(Cfunction),154 PyTypeObject.tp_as_sequence(Cmember),278\nPyTuple_CheckExact(Cfunction),154 PyTypeObject.tp_base(Cmember),289\nPyTuple_GET_ITEM(Cfunction),155 PyTypeObject.tp_bases(Cmember),292\nPyTuple_GET_SIZE(Cfunction),155 PyTypeObject.tp_basicsize(Cmember),275\nPyTuple_GetItem(Cfunction),155 PyTypeObject.tp_cache(Cmember),293\nPyTuple_GetSlice(Cfunction),155 PyTypeObject.tp_call(Cmember),279\nPyTuple_New(Cfunction),155 PyTypeObject.tp_clear(Cmember),286\nPyTuple_Pack(Cfunction),155 PyTypeObject.tp_dealloc(Cmember),276\nPyTuple_SET_ITEM(Cfunction),155 PyTypeObject.tp_del(Cmember),293\nPyTuple_SetItem(Cfunction),7,155 PyTypeObject.tp_descr_get(Cmember),290\nPyTuple_Size(Cfunction),155 PyTypeObject.tp_descr_set(Cmember),290\nPyTuple_Type(Cvar),154 PyTypeObject.tp_dict(Cmember),289\nPyTupleObject(Ctype),154 PyTypeObject.tp_dictoffset(Cmember),290\nPyType_AddWatcher(Cfunction),118 PyTypeObject.tp_doc(Cmember),284\nPyType_Check(Cfunction),117 PyTypeObject.tp_finalize(Cmember),293\nPyType_CheckExact(Cfunction),117 PyTypeObject.tp_flags(Cmember),280\nPyType_ClearCache(Cfunction),117 PyTypeObject.tp_free(Cmember),292\nPyType_ClearWatcher(Cfunction),118 PyTypeObject.tp_getattr(Cmember),278\nPyType_FromMetaclass(Cfunction),120 PyTypeObject.tp_getattro(Cmember),280\nPyType_FromModuleAndSpec(Cfunction),121 PyTypeObject.tp_getset(Cmember),289\nPyType_FromSpec(Cfunction),121 PyTypeObject.tp_hash(Cmember),279\nPyType_FromSpecWithBases(Cfunction),121 PyTypeObject.tp_init(Cmember),291\nPyType_GenericAlloc(Cfunction),118 PyTypeObject.tp_is_gc(Cmember),292\nPyType_GenericNew(Cfunction),119 PyTypeObject.tp_itemsize(Cmember),275\nPyType_GetDict(Cfunction),117 PyTypeObject.tp_iter(Cmember),288\nPyType_GetFlags(Cfunction),117 PyTypeObject.tp_iternext(Cmember),288\nPyType_GetFullyQualifiedName(Cfunction),119 PyTypeObject.tp_members(Cmember),289\nPyType_GetModule(Cfunction),119 PyTypeObject.tp_methods(Cmember),288\nPyType_GetModuleByDef(Cfunction),120 PyTypeObject.tp_mro(Cmember),293\nPyType_GetModuleName(Cfunction),119 PyTypeObject.tp_name(Cmember),275\nPyType_GetModuleState(Cfunction),120 PyTypeObject.tp_new(Cmember),291\nPyType_GetName(Cfunction),119 PyTypeObject.tp_repr(Cmember),278\nPyType_GetQualName(Cfunction),119 PyTypeObject.tp_richcompare(Cmember),287\nPyType_GetSlot(Cfunction),119 PyTypeObject.tp_setattr(Cmember),278\nPyType_GetTypeDataSize(Cfunction),98 PyTypeObject.tp_setattro(Cmember),280\nPyType_HasFeature(Cfunction),118 PyTypeObject.tp_str(Cmember),279\nPyType_IS_GC(Cfunction),118 PyTypeObject.tp_subclasses(Cmember),293\nPyType_IsSubtype(Cfunction),118 PyTypeObject.tp_traverse(Cmember),285\nPyType_Modified(Cfunction),118 PyTypeObject.tp_vectorcall(Cmember),294\nPyType_Ready(Cfunction),119\nIndex 377\nThePython/CAPI,Release3.13.3\nPyTypeObject.tp_vectorcall_offset (C mem- PyUnicode_DecodeRawUnicodeEscape (C func-\nber),277 tion),150\nPyTypeObject.tp_version_tag(Cmember),293 PyUnicode_DecodeUnicodeEscape (C function),\nPyTypeObject.tp_watched(Cmember),294 150\nPyTypeObject.tp_weaklist(Cmember),293 PyUnicode_DecodeUTF7(Cfunction),149\nPyTypeObject.tp_weaklistoffset (C member), PyUnicode_DecodeUTF7Stateful(Cfunction),149\n288 PyUnicode_DecodeUTF8(Cfunction),147\nPyTZInfo_Check(Cfunction),194 PyUnicode_DecodeUTF8Stateful(Cfunction),147\nPyTZInfo_CheckExact(Cfunction),194 PyUnicode_DecodeUTF16(Cfunction),149\nPyUnicode_1BYTE_DATA(Cfunction),137 PyUnicode_DecodeUTF16Stateful (C function),\nPyUnicode_1BYTE_KIND(Cmacro),138 149\nPyUnicode_2BYTE_DATA(Cfunction),137 PyUnicode_DecodeUTF32(Cfunction),148\nPyUnicode_2BYTE_KIND(Cmacro),138 PyUnicode_DecodeUTF32Stateful (C function),\nPyUnicode_4BYTE_DATA(Cfunction),137 148\nPyUnicode_4BYTE_KIND(Cmacro),138 PyUnicode_EncodeCodePage(Cfunction),152\nPyUnicode_AsASCIIString(Cfunction),150 PyUnicode_EncodeFSDefault(Cfunction),146\nPyUnicode_AsCharmapString(Cfunction),151 PyUnicode_EncodeLocale(Cfunction),145\nPyUnicode_AsEncodedString(Cfunction),147 PyUnicode_EqualToUTF8(Cfunction),153\nPyUnicode_AsLatin1String(Cfunction),150 PyUnicode_EqualToUTF8AndSize(Cfunction),153\nPyUnicode_AsMBCSString(Cfunction),151 PyUnicode_Fill(Cfunction),143\nPyUnicode_AsRawUnicodeEscapeString (C func- PyUnicode_Find(Cfunction),153\ntion),150 PyUnicode_FindChar(Cfunction),153\nPyUnicode_AsUCS4(Cfunction),144 PyUnicode_Format(Cfunction),154\nPyUnicode_AsUCS4Copy(Cfunction),144 PyUnicode_FromEncodedObject(Cfunction),143\nPyUnicode_AsUnicodeEscapeString (C function), PyUnicode_FromFormat(Cfunction),140\n150 PyUnicode_FromFormatV(Cfunction),143\nPyUnicode_AsUTF8(Cfunction),148 PyUnicode_FromKindAndData(Cfunction),140\nPyUnicode_AsUTF8AndSize(Cfunction),148 PyUnicode_FromObject(Cfunction),143\nPyUnicode_AsUTF8String(Cfunction),147 PyUnicode_FromOrdinal(Cfunction),143\nPyUnicode_AsUTF16String(Cfunction),149 PyUnicode_FromString(Cfunction),140\nPyUnicode_AsUTF32String(Cfunction),149 PyUnicode_FromStringAndSize(Cfunction),140\nPyUnicode_AsWideChar(Cfunction),146 PyUnicode_FromWideChar(Cfunction),146\nPyUnicode_AsWideCharString(Cfunction),146 PyUnicode_FSConverter(Cfunction),145\nPyUnicode_Check(Cfunction),137 PyUnicode_FSDecoder(Cfunction),145\nPyUnicode_CheckExact(Cfunction),137 PyUnicode_GET_LENGTH(Cfunction),137\nPyUnicode_Compare(Cfunction),153 PyUnicode_GetDefaultEncoding(Cfunction),143\nPyUnicode_CompareWithASCIIString (C func- PyUnicode_GetLength(Cfunction),143\ntion),153 PyUnicode_InternFromString(Cfunction),154\nPyUnicode_Concat(Cfunction),152 PyUnicode_InternInPlace(Cfunction),154\nPyUnicode_Contains(Cfunction),154 PyUnicode_IsIdentifier(Cfunction),138\nPyUnicode_CopyCharacters(Cfunction),143 PyUnicode_Join(Cfunction),153\nPyUnicode_Count(Cfunction),153 PyUnicode_KIND(Cfunction),138\nPyUnicode_DATA(Cfunction),138 PyUnicode_MAX_CHAR_VALUE(Cfunction),138\nPyUnicode_Decode(Cfunction),147 PyUnicode_New(Cfunction),140\nPyUnicode_DecodeASCII(Cfunction),150 PyUnicode_Partition(Cfunction),152\nPyUnicode_DecodeCharmap(Cfunction),151 PyUnicode_READ(Cfunction),138\nPyUnicode_DecodeCodePageStateful (C func- PyUnicode_READ_CHAR(Cfunction),138\ntion),151 PyUnicode_ReadChar(Cfunction),144\nPyUnicode_DecodeFSDefault(Cfunction),146 PyUnicode_READY(Cfunction),137\nPyUnicode_DecodeFSDefaultAndSize (C func- PyUnicode_Replace(Cfunction),153\ntion),146 PyUnicode_RichCompare(Cfunction),153\nPyUnicode_DecodeLatin1(Cfunction),150 PyUnicode_RPartition(Cfunction),152\nPyUnicode_DecodeLocale(Cfunction),145 PyUnicode_RSplit(Cfunction),152\nPyUnicode_DecodeLocaleAndSize (C function), PyUnicode_Split(Cfunction),152\n144 PyUnicode_Splitlines(Cfunction),152\nPyUnicode_DecodeMBCS(Cfunction),151 PyUnicode_Substring(Cfunction),144\nPyUnicode_DecodeMBCSStateful(Cfunction),151 PyUnicode_Tailmatch(Cfunction),153\nPyUnicode_Translate(Cfunction),151\n378 Index\nThePython/CAPI,Release3.13.3\nPyUnicode_Type(Cvar),137 PyUnstable_InterpreterFrame_GetLasti (C\nPyUnicode_WRITE(Cfunction),138 function),190\nPyUnicode_WriteChar(Cfunction),143 PyUnstable_InterpreterFrame_GetLine (C\nPyUnicodeDecodeError_Create(Cfunction),59 function),190\nPyUnicodeDecodeError_GetEncoding (C func- PyUnstable_InterpreterState_GetMainModule\ntion),59 (Cfunction),215\nPyUnicodeDecodeError_GetEnd(Cfunction),59 PyUnstable_Long_CompactValue(Cfunction),129\nPyUnicodeDecodeError_GetObject (C function), PyUnstable_Long_IsCompact(Cfunction),129\n59 PyUnstable_Module_SetGIL(Cfunction),181\nPyUnicodeDecodeError_GetReason (C function), PyUnstable_Object_ClearWeakRefsNoCallbacks\n59 (Cfunction),186\nPyUnicodeDecodeError_GetStart(Cfunction),59 PyUnstable_Object_GC_NewWithExtraData (C\nPyUnicodeDecodeError_SetEnd(Cfunction),59 function),304\nPyUnicodeDecodeError_SetReason (C function), PyUnstable_PerfMapState_Fini(Cfunction),89\n59 PyUnstable_PerfMapState_Init(Cfunction),88\nPyUnicodeDecodeError_SetStart(Cfunction),59 PyUnstable_Type_AssignVersionTag (C func-\nPyUnicodeEncodeError_GetEncoding (C func- tion),120\ntion),59 PyUnstable_WritePerfMapEntry(Cfunction),88\nPyUnicodeEncodeError_GetEnd(Cfunction),59 PyVarObject(Ctype),260\nPyUnicodeEncodeError_GetObject (C function), PyVarObject_HEAD_INIT(Cmacro),261\n59 PyVarObject.ob_size(Cmember),275\nPyUnicodeEncodeError_GetReason (C function), PyVectorcall_Call(Cfunction),100\n59 PyVectorcall_Function(Cfunction),100\nPyUnicodeEncodeError_GetStart(Cfunction),59 PyVectorcall_NARGS(Cfunction),100\nPyUnicodeEncodeError_SetEnd(Cfunction),59 PyWeakref_Check(Cfunction),185\nPyUnicodeEncodeError_SetReason (C function), PyWeakref_CheckProxy(Cfunction),185\n59 PyWeakref_CheckRef(Cfunction),185\nPyUnicodeEncodeError_SetStart(Cfunction),59 PyWeakref_GET_OBJECT(Cfunction),186\nPyUnicodeObject(Ctype),137 PyWeakref_GetObject(Cfunction),186\nPyUnicodeTranslateError_GetEnd (C function), PyWeakref_GetRef(Cfunction),186\n59 PyWeakref_NewProxy(Cfunction),186\nPyUnicodeTranslateError_GetObject (C func- PyWeakref_NewRef(Cfunction),185\ntion),59 PyWideStringList(Ctype),228\nPyUnicodeTranslateError_GetReason (C func- PyWideStringList_Append(Cfunction),228\ntion),59 PyWideStringList_Insert(Cfunction),228\nPyUnicodeTranslateError_GetStart (C func- PyWideStringList.items(Cmember),228\ntion),59 PyWideStringList.length(Cmember),228\nPyUnicodeTranslateError_SetEnd (C function), PyWrapper_New(Cfunction),183\n59\nQ\nPyUnicodeTranslateError_SetReason (C func-\ntion),59 qualified name,330\nPyUnicodeTranslateError_SetStart (C func-\ntion),59 R\nPyUnstable,13\nREAD_RESTRICTED(Cmacro),266\nPyUnstable_AtExit(Cfunction),205\nREADONLY(Cmacro),266\nPyUnstable_Code_GetExtra(Cfunction),172\nrealloc(Cfunction),249\nPyUnstable_Code_GetFirstFree(Cfunction),169\nreference count,330\nPyUnstable_Code_New(Cfunction),169\nregular package,330\nPyUnstable_Code_NewWithPosOnlyArgs (C func-\nreleasebufferproc(Ctype),301\ntion),170\nREPL,330\nPyUnstable_Code_SetExtra(Cfunction),172\nrepr\nPyUnstable_Eval_RequestCodeExtraIndex (C\nbuilt-in function,95,278\nfunction),172\nreprfunc(Ctype),300\nPyUnstable_Exc_PrepReraiseStar (C function),\nRESTRICTED(Cmacro),266\n58\nrichcmpfunc(Ctype),301\nPyUnstable_GC_VisitObjects(Cfunction),307\nPyUnstable_InterpreterFrame_GetCode (C S\nfunction),190\nsearch\nIndex 379\nThePython/CAPI,Release3.13.3\npath,module,12,203,207 T_UBYTE(Cmacro),268\nsendfunc(Ctype),301 T_UINT(Cmacro),268\nsequence,330 T_ULONG(Cmacro),268\nobject,134 T_ULONGULONG(Cmacro),268\nset T_USHORT(Cmacro),268\nobject,164 ternaryfunc(Ctype),301\nset comprehension,331 text encoding,331\nset_all(),8 text file,331\nsetattrfunc(Ctype),300 token,332\nsetattrofunc(Ctype),300 traverseproc(Ctype),306\nsetswitchinterval(inmodulesys),209 triple-quoted string,332\nsetter(Ctype),268 tuple\nSIGINT(Cmacro),56,57 built-in function,107,159\nsignal object,154\nmodule,56,57 type,332\nsingle dispatch,331 built-in function,96\nSIZE_MAX(Cmacro),126 object,6,117\nslice,331 type alias,332\nsoft deprecated,331 type hint,332\nspecial\nU\nmethod,331\nspecial method,331 ULONG_MAX(Cmacro),126\nssizeargfunc(Ctype),301 unaryfunc(Ctype),301\nssizeobjargproc(Ctype),301 universal newlines,332\nstatement,331 USE_STACKCHECK(Cmacro),64\nstatic type checker,331\nV\nstaticmethod\nbuilt-in function,264\nvariable annotation,332\nstderr(inmodulesys),217,218\nvectorcallfunc(Ctype),99\nstdin(inmodulesys),217,218\nversion(inmodulesys),207,208\nstdout(inmodulesys),217,218\nvirtual environment,333\nstrerror(Cfunction),51\nvirtual machine,333\nstring\nvisitproc(Ctype),306\nPyObject_Str(Cfunction),95\nstrong reference,331 W\nstructmember.h,268\nWRITE_RESTRICTED(Cmacro),266\nsum_list(),9\nsum_sequence(),9,10 Z\nsys\nmodule,12,203,217,218 Zen of Python,333\nSystemError(built-inexception),174,175\nT\nT_BOOL(Cmacro),268\nT_BYTE(Cmacro),268\nT_CHAR(Cmacro),268\nT_DOUBLE(Cmacro),268\nT_FLOAT(Cmacro),268\nT_INT(Cmacro),268\nT_LONG(Cmacro),268\nT_LONGLONG(Cmacro),268\nT_NONE(Cmacro),268\nT_OBJECT(Cmacro),268\nT_OBJECT_EX(Cmacro),268\nT_PYSSIZET(Cmacro),268\nT_SHORT(Cmacro),268\nT_STRING(Cmacro),268\nT_STRING_INPLACE(Cmacro),268\n380 Index\n",
  "context": "5.11 StandardWarningCategories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\n6 Utilities 63\n6.1 OperatingSystemUtilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63",
  "source_file": "resources\\Year 3\\Python\\c-api.pdf",
  "line_numbers": [
    44,
    16721
  ]
}