{
  "title": "whatsnew",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "2.2 Improvederrormessages .",
  "code": "2.5 Definedmutationsemanticsforlocals() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n2.6 Supportformobileplatforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n3 OtherLanguageChanges 8\n4 NewModules 10\n5 ImprovedModules 10\n5.1 argparse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n5.2 array . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n5.3 ast . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n5.4 asyncio. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n5.5 base64 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n5.6 compileall . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n5.7 concurrent.futures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n5.8 configparser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n5.9 copy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n5.10 ctypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n5.11 dbm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n5.12 dis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n5.13 doctest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n5.14 email. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n5.15 enum. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n5.16 fractions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n5.17 glob . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n5.18 importlib. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n5.19 io . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n5.20 ipaddress. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n5.21 itertools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n5.22 marshal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n5.23 math . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n1\n5.24 mimetypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n5.25 mmap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n5.26 multiprocessing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n5.27 os . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n5.28 os.path . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n5.29 pathlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n5.30 pdb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n5.31 queue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n5.32 random . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n5.33 re . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n5.34 shutil . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n5.35 site . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n5.36 sqlite3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n5.37 ssl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n5.38 statistics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n5.39 subprocess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n5.40 sys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n5.41 tempfile . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n5.42 time . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n5.43 tkinter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n5.44 traceback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n5.45 types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n5.46 typing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n5.47 unicodedata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n5.48 venv . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n5.49 warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n5.50 xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n5.51 zipimport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n6 Optimizations 19\n7 RemovedModulesAndAPIs 19\n7.1 PEP594: Remove\u201cdeadbatteries\u201dfromthestandardlibrary . . . . . . . . . . . . . . . . . . . . . 19\n7.2 2to3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.3 builtins. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.4 configparser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.5 importlib.metadata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.6 locale . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.7 opcode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.8 optparse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.9 pathlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.10 re . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n7.11 tkinter.tix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n7.12 turtle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n7.13 typing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n7.14 unittest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n7.15 urllib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n7.16 webbrowser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n8 NewDeprecations 22\n8.1 PendingRemovalinPython3.14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n8.2 PendingRemovalinPython3.15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n8.3 PendingremovalinPython3.16. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n8.4 PendingRemovalinFutureVersions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n9 CPythonBytecodeChanges 30\n10 CAPIChanges 30\n10.1 NewFeatures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n2\n10.2 ChangedCAPIs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n10.3 LimitedCAPIChanges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n10.4 RemovedCAPIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n10.5 DeprecatedCAPIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n11 BuildChanges 38\n12 PortingtoPython3.13 38\n12.1 ChangesinthePythonAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n12.2 ChangesintheCAPI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n13 RegressionTestChanges 41\n14 Notablechangesin3.13.1 41\n14.1 sys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\nIndex 42\nEditors\nAdamTurnerandThomasWouters\nThis article explains the new features in Python 3.13, compared to 3.12. Python 3.13 was released on October 7,\n2024. Forfulldetails,seethechangelog.\n(cid:181) Seealso\nPEP719\u2013Python3.13ReleaseSchedule\n1 Summary \u2013 Release Highlights\nPython3.13isthelateststablereleaseofthePythonprogramminglanguage,withamixofchangestothelanguage,\ntheimplementationandthestandardlibrary. Thebiggestchangesincludeanewinteractiveinterpreter,experimental\nsupportforrunninginafree-threadedmode(PEP703),andaJust-In-Timecompiler(PEP744).\nError messages continue to improve, with tracebacks now highlighted in color by default. The locals() builtin\nnowhasdefinedsemanticsforchangingthereturnedmapping,andtypeparametersnowsupportdefaultvalues.\nThe library changes contain removal of deprecated APIs and modules, as well as the usual improvements in user-\nfriendlinessandcorrectness. Severallegacystandardlibrarymoduleshavenowbeenremovedfollowingtheirdepre-\ncationinPython3.11(PEP594).\nThis article doesn\u2019t attempt to provide a complete specification of all new features, but instead gives a convenient\noverview. For full details refer to the documentation, such as the Library Reference and Language Reference. To\nunderstand the complete implementation and design rationale for a change, refer to the PEP for a particular new\nfeature;butnotethatPEPsusuallyarenotkeptup-to-dateonceafeaturehasbeenfullyimplemented. SeePortingto\nPython3.13forguidanceonupgradingfromearlierversionsofPython.\nInterpreterimprovements:\n\u2022 Agreatlyimprovedinteractiveinterpreterandimprovederrormessages.\n\u2022 PEP 667: The locals() builtin now has defined semantics when mutating the returned mapping. Python\ndebuggers and similar tools may now more reliably update local variables in optimized scopes even during\nconcurrentcodeexecution.\n\u2022 PEP703: CPython3.13hasexperimentalsupportforrunningwiththeglobalinterpreterlockdisabled. See\nFree-threadedCPythonformoredetails.\n3\n\u2022 PEP744: AbasicJITcompilerwasadded. Itiscurrentlydisabledbydefault(thoughwemayturnitonlater).\nPerformanceimprovementsaremodest\u2013weexpecttoimprovethisoverthenextfewreleases.\n\u2022 Colorsupportinthenewinteractiveinterpreter,aswellasintracebacksanddoctestoutput. Thiscanbedisabled\nthroughthePYTHON_COLORSandNO_COLORenvironmentvariables.\nPythondatamodelimprovements:\n\u2022 __static_attributes__storesthenamesofattributesaccessedthroughself.Xinanyfunctioninaclass\nbody.\n\u2022 __firstlineno__recordsthefirstlinenumberofaclassdefinition.\nSignificantimprovementsinthestandardlibrary:\n\u2022 AddanewPythonFinalizationErrorexception,raisedwhenanoperationisblockedduringfinalization.\n\u2022 Theargparsemodulenowsupportsdeprecatingcommand-lineoptions,positionalarguments,andsubcom-\nmands.\n\u2022 Thenewfunctionsbase64.z85encode()andbase64.z85decode()supportencodinganddecodingZ85\ndata.\n\u2022 Thecopymodulenowhasacopy.replace()function,withsupportformanybuiltintypesandanyclass\ndefiningthe__replace__()method.\n\u2022 Thenewdbm.sqlite3moduleisnowthedefaultdbmbackend.\n\u2022 TheosmodulehasasuiteofnewfunctionsforworkingwithLinux\u2019stimernotificationfiledescriptors.\n\u2022 Therandommodulenowhasacommand-lineinterface.\nSecurityimprovements:\n\u2022 ssl.create_default_context() sets ssl.VERIFY_X509_PARTIAL_CHAIN and ssl.\nVERIFY_X509_STRICTasdefaultflags.\nCAPIimprovements:\n\u2022 ThePy_mod_gilslotisnowusedtoindicatethatanextensionmodulesupportsrunningwiththeGILdisabled.\n\u2022 ThePyTimeCAPIhasbeenadded,providingaccesstosystemclocks.\n\u2022 PyMutexisanewlightweightmutexthatoccupiesasinglebyte.\n\u2022 ThereisanewsuiteoffunctionsforgeneratingPEP669monitoringeventsintheCAPI.\nNewtypingfeatures:\n\u2022 PEP696: Typeparameters(typing.TypeVar,typing.ParamSpec,andtyping.TypeVarTuple)now\nsupportdefaults.\n\u2022 PEP702: Thenewwarnings.deprecated()decoratoraddssupportformarkingdeprecationsinthetype\nsystemandatruntime.\n\u2022 PEP705: typing.ReadOnlycanbeusedtomarkanitemofatyping.TypedDictasread-onlyfortype\ncheckers.\n\u2022 PEP742: typing.TypeIsprovidesmoreintuitivetypenarrowingbehavior,asanalternativetotyping.\nTypeGuard.\nPlatformsupport:\n\u2022 PEP730: Apple\u2019siOSisnowanofficiallysupportedplatform,attier3.\n\u2022 PEP738: Androidisnowanofficiallysupportedplatform,attier3.\n\u2022 wasm32-wasiisnowsupportedasatier2platform.\n\u2022 wasm32-emscriptenisnolongeranofficiallysupportedplatform.\nImportantremovals:\n4\n\u2022 PEP 594: The remaining 19 \u201cdead batteries\u201d (legacy stdlib modules) have been removed from the stan-\ndard library: aifc, audioop, cgi, cgitb, chunk, crypt, imghdr, mailcap, msilib, nis, nntplib,\nossaudiodev,pipes,sndhdr,spwd,sunau,telnetlib,uuandxdrlib.\n\u2022 Removethe2to3toolandlib2to3module(deprecatedinPython3.11).\n\u2022 Removethetkinter.tixmodule(deprecatedinPython3.6).\n\u2022 Removethelocale.resetlocale()function.\n\u2022 Removethetyping.ioandtyping.renamespaces.\n\u2022 Removechainedclassmethoddescriptors.\nReleaseschedulechanges:\nPEP602(\u201cAnnualReleaseCycleforPython\u201d)hasbeenupdatedtoextendthefullsupport(\u2018bugfix\u2019)periodfornew\nreleasestotwoyears. Thisupdatedpolicymeansthat:\n\u2022 Python3.9\u20133.12haveoneandahalfyearsoffullsupport,followedbythreeandahalfyearsofsecurityfixes.\n\u2022 Python3.13andlaterhavetwoyearsoffullsupport,followedbythreeyearsofsecurityfixes.\n2 New Features\n2.1 A better interactive interpreter\nPythonnowusesanewinteractiveshellbydefault,basedoncodefromthePyPyproject. Whentheuserstartsthe\nREPLfromaninteractiveterminal,thefollowingnewfeaturesarenowsupported:\n\u2022 Multilineeditingwithhistorypreservation.\n\u2022 Direct support for REPL-specific commands like help, exit, and quit, without the need to call them as\nfunctions.\n\u2022 Promptsandtracebackswithcolorenabledbydefault.\n\u2022 InteractivehelpbrowsingusingF1withaseparatecommandhistory.\n\u2022 HistorybrowsingusingF2thatskipsoutputaswellasthe\u00bb>and\u2026prompts.\n\u2022 \u201cPastemode\u201dwithF3thatmakespastinglargerblocksofcodeeasier(pressF3againtoreturntotheregular\nprompt).\nTodisablethenewinteractiveshell, setthePYTHON_BASIC_REPLenvironmentvariable. Formoreoninteractive\nmode,seetut-interac.\n(ContributedbyPabloGalindoSalgado,\u0141ukaszLanga,andLysandrosNikolaouingh-111201basedoncodefrom\nthePyPyproject. WindowssupportcontributedbyDinoViehlandandAnthonyShaw.)\n2.2 Improved error messages\n\u2022 The interpreter now uses color by default when displaying tracebacks in the terminal. This feature can\nbe controlled via the new PYTHON_COLORS environment variable as well as the canonical NO_COLOR and\nFORCE_COLORenvironmentvariables. (ContributedbyPabloGalindoSalgadoingh-112730.)\n\u2022 Acommonmistakeistowriteascriptwiththesamenameasastandardlibrarymodule. Whenthisresultsin\nerrors,wenowdisplayamorehelpfulerrormessage:\n$ python random.py\nTraceback (most recent call last):\nFile \"/home/me/random.py\", line 1, in <module>\nimport random\nFile \"/home/me/random.py\", line 3, in <module>\nprint(random.randint(5))\n^^^^^^^^^^^^^^\n(continuesonnextpage)\n5\n(continuedfrompreviouspage)\nAttributeError: module 'random' has no attribute 'randint' (consider renaming\n,\u2192'/home/me/random.py' since it has the same name as the standard library\u2423\n,\u2192module named 'random' and prevents importing that standard library module)\nSimilarly,ifascripthasthesamenameasathird-partymodulethatitattemptstoimportandthisresultsin\nerrors,wealsodisplayamorehelpfulerrormessage:\n$ python numpy.py\nTraceback (most recent call last):\nFile \"/home/me/numpy.py\", line 1, in <module>\nimport numpy as np\nFile \"/home/me/numpy.py\", line 3, in <module>\nnp.array([1, 2, 3])\n^^^^^^^^\nAttributeError: module 'numpy' has no attribute 'array' (consider renaming '/\n,\u2192home/me/numpy.py' if it has the same name as a library you intended to\u2423\n,\u2192import)\n(ContributedbyShantanuJainingh-95754.)\n\u2022 Theerrormessagenowtriestosuggestthecorrectkeywordargumentwhenanincorrectkeywordargumentis\npassedtoafunction.\n>>> \"Better error messages!\".split(max_split=1)\nTraceback (most recent call last):\nFile \"<python-input-0>\", line 1, in <module>\n\"Better error messages!\".split(max_split=1)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\nTypeError: split() got an unexpected keyword argument 'max_split'. Did you\u2423\n,\u2192mean 'maxsplit'?\n(ContributedbyPabloGalindoSalgadoandShantanuJainingh-107944.)\n2.3 Free-threaded CPython\nCPythonnowhasexperimentalsupportforrunninginafree-threadedmode,withtheglobalinterpreterlock(GIL)\ndisabled. Thisisanexperimentalfeatureandthereforeisnotenabledbydefault. Thefree-threadedmoderequires\na different executable, usually called python3.13t or python3.13t.exe. Pre-built binaries marked as free-\nthreadedcanbeinstalledaspartoftheofficialWindowsandmacOSinstallers,orCPythoncanbebuiltfromsource\nwiththe--disable-giloption.\nFree-threadedexecutionallowsforfullutilizationoftheavailableprocessingpowerbyrunningthreadsinparallelon\navailableCPUcores. Whilenotallsoftwarewillbenefitfromthisautomatically,programsdesignedwiththreading\ninmindwillrunfasteronmulti-corehardware. Thefree-threadedmodeisexperimentalandworkisongoingto\nimproveit: expectsomebugsandasubstantialsingle-threadedperformancehit. Free-threadedbuildsofCPython\nsupport optionally running with the GIL enabled at runtime using the environment variable PYTHON_GIL or the\ncommand-lineoption-X gil=1.\nTocheckifthecurrentinterpretersupportsfree-threading,python -VVandsys.versioncontain\u201cexperimental\nfree-threading build\u201d. The new sys._is_gil_enabled() function can be used to check whether the GIL is\nactuallydisabledintherunningprocess.\nC-API extension modules need to be built specifically for the free-threaded build. Extensions that support run-\nning with the GIL disabled should use the Py_mod_gil slot. Extensions using single-phase init should use\nPyUnstable_Module_SetGIL() to indicate whether they support running with the GIL disabled. Importing C\nextensions that don\u2019t use these mechanisms will cause the GIL to be enabled, unless the GIL was explicitly dis-\nabledwiththePYTHON_GILenvironmentvariableorthe-X gil=0option. pip24.1ornewerisrequiredtoinstall\npackageswithCextensionsinthefree-threadedbuild.\n6\nThisworkwasmadepossiblethankstomanyindividualsandorganizations,includingthelargecommunityofcon-\ntributorstoPythonandthird-partyprojectstotestandenablefree-threadingsupport. Notablecontributorsinclude:\nSam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett Simmers, Dino Viehland, Carl Meyer, Nathan\nGoldbaum, Ralf Gommers, Lysandros Nikolaou, and many others. Many of these contributors are employed by\nMeta,whichhasprovidedsignificantengineeringresourcestosupportthisproject.\n(cid:181) Seealso\nPEP 703 \u201cMaking the Global Interpreter Lock Optional in CPython\u201d contains rationale and information sur-\nroundingthiswork.\nPorting Extension Modules to Support Free-Threading: A community-maintained porting guide for extension\nauthors.\n2.4 An experimental just-in-time (JIT) compiler\nWhen CPython is configured and built using the --enable-experimental-jit option, a just-in-time (JIT)\ncompiler is added which may speed up some Python programs. On Windows, use PCbuild/build.bat\n--experimental-jit to enable the JIT or --experimental-jit-interpreter to enable the Tier 2 inter-\npreter. BuildrequirementsandfurthersupportinginformationarecontainedatTools/jit/README.md.\nThe --enable-experimental-jit option takes these (optional) values, defaulting to yes if\n--enable-experimental-jitispresentwithouttheoptionalvalue.\n\u2022 no: DisabletheentireTier2andJITpipeline.\n\u2022 yes: EnabletheJIT.TodisabletheJITatruntime,passtheenvironmentvariablePYTHON_JIT=0.\n\u2022 yes-off: BuildtheJITbutdisableitbydefault. ToenabletheJITatruntime,passtheenvironmentvariable\nPYTHON_JIT=1.\n\u2022 interpreter: EnabletheTier2interpreterbutdisabletheJIT.Theinterpretercanbedisabledbyrunning\nwithPYTHON_JIT=0.\nTheinternalarchitectureisroughlyasfollows:\n\u2022 WestartwithspecializedTier1bytecode. SeeWhat\u2019snewin3.11fordetails.\n\u2022 WhentheTier1bytecodegetshotenough,itgetstranslatedtoanewpurelyinternalintermediaterepresentation\n(IR),calledtheTier2IR,andsometimesreferredtoasmicro-ops(\u201cuops\u201d).\n\u2022 TheTier2IRusesthesamestack-basedvirtualmachineasTier1,buttheinstructionformatisbettersuited\ntotranslationtomachinecode.\n\u2022 WehaveseveraloptimizationpassesforTier2IR,whichareappliedbeforeitisinterpretedortranslatedto\nmachinecode.\n\u2022 There is a Tier 2 interpreter, but it is mostly intended for debugging the earlier stages of\nthe optimization pipeline. The Tier 2 interpreter can be enabled by configuring Python with\n--enable-experimental-jit=interpreter.\n\u2022 WhentheJITisenabled,theoptimizedTier2IRistranslatedtomachinecode,whichisthenexecuted.\n\u2022 Themachinecodetranslationprocessusesatechniquecalledcopy-and-patch. Ithasnoruntimedependencies,\nbutthereisanewbuild-timedependencyonLLVM.\n(cid:181) Seealso\nPEP744\n(JITbyBrandtBucher, inspiredbyapaperbyHaoranXuandFredrikKjolstad. Tier2IRbyMarkShannonand\nGuidovanRossum. Tier2optimizerbyKenJin.)\n7\n2.5 Defined mutation semantics for locals()\nHistorically, the expected result of mutating the return value of locals() has been left to individual Python im-\nplementations to define. Starting from Python 3.13, PEP 667 standardises the historical behavior of CPython for\nmostcodeexecutionscopes,butchangesoptimizedscopes(functions,generators,coroutines,comprehensions,and\ngeneratorexpressions)toexplicitlyreturnindependentsnapshotsofthecurrentlyassignedlocalvariables,including\nlocallyreferencednonlocalvariablescapturedinclosures.\nThischangetothesemanticsoflocals()inoptimizedscopesalsoaffectsthedefaultbehaviorofcodeexecution\nfunctionsthatimplicitlytargetlocals()ifnoexplicitnamespaceisprovided(suchasexec()andeval()). In\npreviousversions,whetherornotchangescouldbeaccessedbycallinglocals()aftercallingthecodeexecution\nfunctionwasimplementation-dependent. InCPythonspecifically,suchcodewouldtypicallyappeartoworkasde-\nsired, but could sometimes fail in optimized scopes based on other code (including debuggers and code execution\ntracingtools)potentiallyresettingthesharedsnapshotinthatscope. Now,thecodewillalwaysrunagainstaninde-\npendentsnapshotofthelocalvariablesinoptimizedscopes,andhencethechangeswillneverbevisibleinsubsequent\ncallstolocals(). Toaccessthechangesmadeinthesecases,anexplicitnamespacereferencemustnowbepassed\ntotherelevantfunction. Alternatively,itmaymakesensetoupdateaffectedcodetouseahigherlevelcodeexecution\nAPI that returns the resulting code execution namespace (e.g. runpy.run_path() when executing Python files\nfromdisk).\nTo ensure debuggers and similar tools can reliably update local variables in scopes affected by this change,\nFrameType.f_localsnowreturnsawrite-throughproxytotheframe\u2019slocalandlocallyreferencednonlocalvari-\nablesinthesescopes,ratherthanreturninganinconsistentlyupdatedshareddictinstancewithundefinedruntime\nsemantics.\nSeePEP667formoredetails,includingrelatedCAPIchangesanddeprecations. Portingnotesarealsoprovided\nbelowfortheaffectedPythonAPIsandCAPIs.\n(PEPandimplementationcontributedbyMarkShannonandTianGaoingh-74929. Documentationupdatespro-\nvidedbyGuidovanRossumandAlyssaCoghlan.)\n2.6 Support for mobile platforms\nPEP 730: iOS is now a PEP 11 supported platform, with the arm64-apple-ios and\narm64-apple-ios-simulatortargetsattier3(iPhoneandiPaddevicesreleasedafter2013andtheXcodeiOS\nsimulator running on Apple silicon hardware, respectively). x86_64-apple-ios-simulator (the Xcode iOS\nsimulatorrunningonolderx86_64hardware)isnotatier3supportedplatform, butwillhavebest-effortsupport.\n(PEPwrittenandimplementationcontributedbyRussellKeith-Mageeingh-114099.)\nPEP 738: Android is now a PEP 11 supported platform, with the aarch64-linux-android\nand x86_64-linux-android targets at tier 3. The 32-bit targets arm-linux-androideabi and\ni686-linux-android are not tier 3 supported platforms, but will have best-effort support. (PEP written\nandimplementationcontributedbyMalcolmSmithingh-116622.)\n(cid:181) Seealso\nPEP730,PEP738\n3 Other Language Changes\n\u2022 Thecompilernowstripscommonleadingwhitespacefromeverylineinadocstring. Thisreducesthesizeofthe\nbytecodecache(suchas.pycfiles),withreductionsinfilesizeofaround5%,forexampleinsqlalchemy.\norm.sessionfromSQLAlchemy2.0. Thischangeaffectstoolsthatusedocstrings,suchasdoctest.\n>>> def spam():\n... \"\"\"\n... This is a docstring with\n... leading whitespace.\n...\n(continuesonnextpage)\n8\n(continuedfrompreviouspage)\n... It even has multiple paragraphs!\n... \"\"\"\n...\n>>> spam.__doc__\n'\\nThis is a docstring with\\n leading whitespace.\\n\\nIt even has multiple\u2423\n,\u2192paragraphs!\\n'\n(ContributedbyInadaNaokiingh-81283.)\n\u2022 Annotationscopeswithinclassscopescannowcontainlambdasandcomprehensions. Comprehensionsthat\narelocatedwithinclassscopesarenotinlinedintotheirparentscope.\nclass C[T]:\ntype Alias = lambda: T\n(ContributedbyJelleZijlstraingh-109118andgh-118160.)\n\u2022 Futurestatementsarenolongertriggeredbyrelativeimportsofthe__future__module,meaningthatstate-\nments of the form from .__future__ import ... are now simply standard relative imports, with no\nspecialfeaturesactivated. (ContributedbyJeremiahGabrielPascualingh-118216.)\n\u2022 globaldeclarationsarenowpermittedinexceptblockswhenthatglobalisusedintheelseblock. Previ-\nouslythisraisedanerroneousSyntaxError. (ContributedbyIritKatrielingh-111123.)\n\u2022 AddPYTHON_FROZEN_MODULES,anewenvironmentvariablethatdetermineswhetherfrozenmodulesareig-\nnoredbytheimportmachinery,equivalenttothe-X frozen_modulescommand-lineoption. (Contributed\nbyYileiYangingh-111374.)\n\u2022 Add support for the perf profiler working without frame pointers through the new environment variable\nPYTHON_PERF_JIT_SUPPORT and command-line option -X perf_jit. (Contributed by Pablo Galindo\ningh-118518.)\n\u2022 Thelocationofa.python_historyfilecanbechangedviathenewPYTHON_HISTORYenvironmentvari-\nable. (ContributedbyLeviSabah,ZackerySpytzandHugovanKemenadeingh-73965.)\n\u2022 Classeshaveanew__static_attributes__attribute. Thisispopulatedbythecompilerwithatupleofthe\nclass\u2019sattributenameswhichareassignedthroughself.<name>fromanyfunctioninitsbody. (Contributed\nbyIritKatrielingh-115775.)\n\u2022 Thecompilernowcreatesa__firstlineno__attributeonclasseswiththelinenumberofthefirstlineof\ntheclassdefinition. (ContributedbySerhiyStorchakaingh-118465.)\n\u2022 Theexec()andeval()builtinsnowaccepttheglobalsandlocalsargumentsaskeywords. (Contributedby\nRaphaelGaschignardingh-105879)\n\u2022 The compile() builtin now accepts a new flag, ast.PyCF_OPTIMIZED_AST, which is similar to ast.\nPyCF_ONLY_ASTexceptthatthereturnedASTisoptimizedaccordingtothevalueoftheoptimizeargument.\n(ContributedbyIritKatrielingh-108113).\n\u2022 Adda__name__attributeonpropertyobjects. (ContributedbyEugeneToderingh-101860.)\n\u2022 AddPythonFinalizationError,anewexceptionderivedfromRuntimeErrorandusedtosignalwhen\noperationsareblockedduringfinalization. ThefollowingcallablesnowraisePythonFinalizationError,\ninsteadofRuntimeError:\n\u2013 _thread.start_new_thread()\n\u2013 os.fork()\n\u2013 os.forkpty()\n\u2013 subprocess.Popen\n(ContributedbyVictorStinneringh-114570.)\n9\n\u2022 Allow the count argument of str.replace() to be a keyword. (Contributed by Hugo van Kemenade in\ngh-106487.)\n\u2022 Manyfunctionsnowemitawarningifabooleanvalueispassedasafiledescriptorargument. Thiscanhelp\ncatchsomeerrorsearlier. (ContributedbySerhiyStorchakaingh-82626.)\n\u2022 Addednameandmodeattributesforcompressedandarchivedfile-likeobjectsinthebz2,lzma,tarfile,\nandzipfilemodules. (ContributedbySerhiyStorchakaingh-115961.)\n4 New Modules\n\u2022 dbm.sqlite3: AnSQLitebackendfordbm. (ContributedbyRaymondHettingerandErlendE.Aaslandin\ngh-100414.)\n5 Improved Modules\n5.1 argparse\n\u2022 Addthedeprecatedparametertotheadd_argument()andadd_parser()methods,toenabledeprecating\ncommand-line options, positional arguments, and subcommands. (Contributed by Serhiy Storchaka in gh-\n83648.)\n5.2 array\n\u2022 Addthe'w'typecode(Py_UCS4)forUnicodecharacters. Itshouldbeusedinsteadofthedeprecated'u'\ntypecode. (ContributedbyInadaNaokiingh-80480.)\n\u2022 Register array.array as a MutableSequence by implementing the clear() method. (Contributed by\nMikeZiminingh-114894.)\n5.3 ast\n\u2022 Theconstructorsofnodetypesintheastmodulearenowstricterintheargumentstheyaccept, withmore\nintuitivebehaviorwhenargumentsareomitted.\nIf an optional field on an AST node is not included as an argument when constructing an instance, the field\nwill now be set to None. Similarly, if a list field is omitted, that field will now be set to an empty list, and\nifanexpr_contextfieldisomitted,itdefaultstoLoad(). (Previously,inallcases,theattributewouldbe\nmissingonthenewlyconstructedASTnodeinstance.)\nIn all other cases, where a required argument is omitted, the node constructor will emit a\nDeprecationWarning. This will raise an exception in Python 3.15. Similarly, passing a keyword argu-\nment to the constructor that does not map to a field on the AST node is now deprecated, and will raise an\nexceptioninPython3.15.\nThesechangesdonotapplytouser-definedsubclassesofast.ASTunlesstheclassoptsintothenewbehavior\nbydefiningtheAST._field_typesmapping.\n(ContributedbyJelleZijlstraingh-105858,gh-117486,andgh-118851.)\n\u2022 ast.parse()nowacceptsanoptionalargumentoptimizewhichispassedontocompile(). Thismakesit\npossibletoobtainanoptimizedAST.(ContributedbyIritKatrielingh-108113.)\n5.4 asyncio\n\u2022 asyncio.as_completed()nowreturnsanobjectthatisbothanasynchronousiteratorandaplainiterator\nof awaitables. The awaitables yielded by asynchronous iteration include original task or future objects that\nwerepassed in, makingiteasierto associateresultswiththetasksbeingcompleted. (ContributedbyJustin\nArthuringh-77714.)\n\u2022 asyncio.loop.create_unix_server()willnowautomaticallyremovetheUnixsocketwhentheserver\nisclosed. (ContributedbyPierreOssmaningh-111246.)\n10\n\u2022 DatagramTransport.sendto() will now send zero-length datagrams if called with an empty bytes ob-\nject. Thetransportflowcontrolalsonowaccountsforthedatagramheaderwhencalculatingthebuffersize.\n(ContributedbyJamiePhaningh-115199.)\n\u2022 AddQueue.shutdownandQueueShutDowntomanagequeuetermination. (ContributedbyLaurieOpper-\nmanandYvesDupratingh-104228.)\n\u2022 Add the Server.close_clients() and Server.abort_clients() methods, which more forcefully\ncloseanasyncioserver. (ContributedbyPierreOssmaningh-113538.)\n\u2022 AcceptatupleofseparatorsinStreamReader.readuntil(),stoppingwhenanyoneofthemisencoun-\ntered. (ContributedbyBruceMerryingh-81322.)\n\u2022 ImprovethebehaviorofTaskGroupwhenanexternalcancellationcollideswithaninternalcancellation. For\nexample,whentwotaskgroupsarenestedandbothexperienceanexceptioninachildtasksimultaneously,it\nwaspossiblethattheoutertaskgroupwouldhang,becauseitsinternalcancellationwasswallowedbytheinner\ntaskgroup.\nInthecasewhereataskgroupiscancelledexternallyandalsomustraiseanExceptionGroup,itwillnowcall\ntheparenttask\u2019scancel()method. ThisensuresthataCancelledErrorwillberaisedatthenextawait,\nsothecancellationisnotlost.\nAnaddedbenefitofthesechangesisthattaskgroupsnowpreservethecancellationcount(cancelling()).\nInordertohandlesomecornercases, uncancel()maynowresettheundocumented_must_cancelflag\nwhenthecancellationcountreacheszero.\n(InspiredbyanissuereportedbyArthurTaccaingh-116720.)\n\u2022 WhenTaskGroup.create_task()iscalledonaninactiveTaskGroup,thegivencoroutinewillbeclosed\n(whichpreventsaRuntimeWarningaboutthegivencoroutinebeingneverawaited). (ContributedbyArthur\nTaccaandJasonZhangingh-115957.)\n5.5 base64\n\u2022 Addz85encode()andz85decode()functionsforencodingbytesasZ85dataanddecodingZ85-encoded\ndatatobytes. (ContributedbyMatanPerelmaningh-75299.)\n5.6 compileall\n\u2022 Thedefaultnumberofworkerthreadsandprocessesisnowselectedusingos.process_cpu_count()in-\nsteadofos.cpu_count(). (ContributedbyVictorStinneringh-109649.)\n5.7 concurrent.futures\n\u2022 Thedefaultnumberofworkerthreadsandprocessesisnowselectedusingos.process_cpu_count()in-\nsteadofos.cpu_count(). (ContributedbyVictorStinneringh-109649.)\n5.8 configparser\n\u2022 ConfigParsernowhassupportforunnamedsections,whichallowsfortop-levelkey-valuepairs. Thiscanbe\nenabledwiththenewallow_unnamed_sectionparameter. (ContributedbyPedroSousaLacerdaingh-66449.)\n5.9 copy\n\u2022 Thenewreplace()functionandthereplace protocolmakecreatingmodifiedcopiesofobjectsmuch\nsimpler. This is especially useful when working with immutable objects. The following types support the\nreplace()functionandimplementthereplaceprotocol:\n\u2013 collections.namedtuple()\n\u2013 dataclasses.dataclass\n\u2013 datetime.datetime,datetime.date,datetime.time\n11\n\u2013 inspect.Signature,inspect.Parameter\n\u2013 types.SimpleNamespace\n\u2013 codeobjects\nAnyuser-definedclasscanalsosupportcopy.replace()bydefiningthe__replace__()method. (Con-\ntributedbySerhiyStorchakaingh-108751.)\n5.10 ctypes\n\u2022 As a consequence of necessary internal refactoring, initialization of internal metaclasses now happens in\n__init__ratherthanin__new__. Thisaffectsprojectsthatsubclasstheseinternalmetaclassestoprovide\ncustominitialization. Generally:\n\u2013 Custom logic that was done in __new__ after calling super().__new__ should be moved to\n__init__.\n\u2013 Tocreateaclass,callthemetaclass,notonlythemetaclass\u2019s__new__method.\nSeegh-124520fordiscussionandlinkstochangesinsomeaffectedprojects.\n\u2022 ctypes.Structureobjectshaveanew_align_attributewhichallowsthealignmentofthestructurebeing\npackedto/frommemorytobespecifiedexplicitly. (ContributedbyMattSandersoningh-112433)\n5.11 dbm\n\u2022 Adddbm.sqlite3,anewmodulewhichimplementsanSQLitebackend,andmakeitthedefaultdbmback-\nend. (ContributedbyRaymondHettingerandErlendE.Aaslandingh-100414.)\n\u2022 Allowremovingallitemsfromthedatabasethroughthenewgdbm.clear()andndbm.clear()methods.\n(ContributedbyDongheeNaingh-107122.)\n5.12 dis\n\u2022 Change the output of dis module functions to show logical labels for jump targets and exception handlers,\nratherthanoffsets. Theoffsetscanbeaddedwiththenew-Ocommand-lineoptionortheshow_offsetsargu-\nment. (ContributedbyIritKatrielingh-112137.)\n\u2022 get_instructions()nolongerrepresentscacheentriesasseparateinstructions. Instead,itreturnsthemas\npartoftheInstruction,inthenewcache_infofield. Theshow_cachesargumenttoget_instructions()\nisdeprecatedandnolongerhasanyeffect. (ContributedbyIritKatrielingh-112962.)\n5.13 doctest\n\u2022 doctestoutputisnowcoloredbydefault. ThiscanbecontrolledviathenewPYTHON_COLORSenvironment\nvariable as well as the canonical NO_COLOR and FORCE_COLOR environment variables. See also using-on-\ncontrolling-color. (ContributedbyHugovanKemenadeingh-117225.)\n\u2022 TheDocTestRunner.run()methodnowcountsthenumberofskippedtests. AddtheDocTestRunner.\nskipsandTestResults.skippedattributes. (ContributedbyVictorStinneringh-108794.)\n5.14 email\n\u2022 Headers with embedded newlines are now quoted on output. The generator will now refuse to serialize\n(write) headers that are improperly folded or delimited, such that they would be parsed as multiple headers\norjoinedwithadjacentdata. Ifyouneedtoturnthissafetyfeatureoff,setverify_generated_headers.\n(ContributedbyBasBloemsaatandPetrViktoriningh-121650.)\n\u2022 getaddresses() and parseaddr() now return ('', '') pairs in more situations where invalid email\naddresses are encountered instead of potentially inaccurate values. The two functions have a new optional\nstrict parameter(defaultTrue). Togettheoldbehavior(acceptingmalformedinput), usestrict=False.\ngetattr(email.utils, 'supports_strict_parsing', False) can be used to check if the strict\n12\nparameterisavailable. (ContributedbyThomasDwyerandVictorStinnerforgh-102988toimprovetheCVE\n2023-27043fix.)\n5.15 enum\n\u2022 EnumDicthasbeenmadepublictobettersupportsubclassingEnumType.\n5.16 fractions\n\u2022 Fractionobjectsnowsupportthestandardformatspecificationmini-languagerulesforfill,alignment,sign\nhandling,minimumwidth,andgrouping. (ContributedbyMarkDickinsoningh-111320.)\n5.17 glob\n\u2022 Addtranslate(),afunctiontoconvertapathspecificationwithshell-stylewildcardstoaregularexpression.\n(ContributedbyBarneyGaleingh-72904.)\n5.18 importlib\n\u2022 Thefollowingfunctionsinimportlib.resourcesnowallowaccessingadirectory(ortree)ofresources,\nusingmultiplepositionalarguments(theencodinganderrorsargumentsinthetext-readingfunctionsarenow\nkeyword-only):\n\u2013 is_resource()\n\u2013 open_binary()\n\u2013 open_text()\n\u2013 path()\n\u2013 read_binary()\n\u2013 read_text()\nThesefunctionsarenolongerdeprecatedandarenotscheduledforremoval. (ContributedbyPetrViktorinin\ngh-116608.)\n\u2022 contents()remainsdeprecatedinfavorofthefully-featuredTraversableAPI.However,thereisnowno\nplantoremoveit. (ContributedbyPetrViktoriningh-116608.)\n5.19 io\n\u2022 TheIOBasefinalizernowlogsanyerrorsraisedbytheclose()methodwithsys.unraisablehook. Pre-\nviously,errorswereignoredsilentlybydefault,andonlyloggedinPythonDevelopmentModeorwhenusing\naPythondebugbuild. (ContributedbyVictorStinneringh-62948.)\n5.20 ipaddress\n\u2022 AddtheIPv4Address.ipv6_mappedproperty,whichreturnstheIPv4-mappedIPv6address. (Contributed\nbyCharlesMachalowingh-109466.)\n\u2022 Fix is_global and is_private behavior in IPv4Address, IPv6Address, IPv4Network, and\nIPv6Network. (ContributedbyJakubStasiakingh-113171.)\n5.21 itertools\n\u2022 batched() has a new strict parameter, which raises a ValueError if the final batch is shorter than the\nspecifiedbatchsize. (ContributedbyRaymondHettingeringh-113202.)\n13\n5.22 marshal\n\u2022 Addtheallow_codeparameterinmodulefunctions. Passingallow_code=Falsepreventsserializationand\nde-serialization of code objects which are incompatible between Python versions. (Contributed by Serhiy\nStorchakaingh-113626.)\n5.23 math\n\u2022 The new function fma() performs fused multiply-add operations. This computes x * y + z with only a\nsingleround,andsoavoidsanyintermediatelossofprecision. Itwrapsthefma()functionprovidedbyC99,\nandfollowsthespecificationoftheIEEE754\u201cfusedMultiplyAdd\u201doperationforspecialcases. (Contributed\nbyMarkDickinsonandVictorStinneringh-73468.)\n5.24 mimetypes\n\u2022 Add the guess_file_type() function to guess a MIME type from a filesystem path. Using paths with\nguess_type()isnowsoftdeprecated. (ContributedbySerhiyStorchakaingh-66543.)\n5.25 mmap\n\u2022 mmapisnowprotectedfromcrashingonWindowswhenthemappedmemoryisinaccessibleduetofilesystem\nerrorsoraccessviolations. (ContributedbyJannisWeigendingh-118209.)\n\u2022 mmap has a new seekable() method that can be used when a seekable file-like object is required. The\nseek()methodnowreturnsthenewabsoluteposition. (ContributedbyDongheeNaandSylvieLibermanin\ngh-111835.)\n\u2022 ThenewUNIX-onlytrackfdparameterformmapcontrolsfiledescriptorduplication;iffalse,thefiledescriptor\nspecifiedbyfilenowillnotbeduplicated. (ContributedbyZackerySpytzandPetrViktoriningh-78502.)\n5.26 multiprocessing\n\u2022 Thedefaultnumberofworkerthreadsandprocessesisnowselectedusingos.process_cpu_count()in-\nsteadofos.cpu_count(). (ContributedbyVictorStinneringh-109649.)\n5.27 os\n\u2022 Addprocess_cpu_count()functiontogetthenumberoflogicalCPUcoresusablebythecallingthread\nofthecurrentprocess. (ContributedbyVictorStinneringh-109649.)\n\u2022 cpu_count() and process_cpu_count() can be overridden through the new environment variable\nPYTHON_CPU_COUNTorthenewcommand-lineoption-X cpu_count. Thisoptionisusefulforuserswho\nneedtolimitCPUresourcesofacontainersystemwithouthavingtomodifyapplicationcodeorthecontainer\nitself. (ContributedbyDongheeNaingh-109595.)\n\u2022 Add a low level interface to Linux\u2019s timer file descriptors via timerfd_create(),\ntimerfd_settime(), timerfd_settime_ns(), timerfd_gettime(), timerfd_gettime_ns(),\nTFD_NONBLOCK, TFD_CLOEXEC, TFD_TIMER_ABSTIME, and TFD_TIMER_CANCEL_ON_SET (Contributed\nbyMasaruTsuchiyamaingh-108277.)\n\u2022 lchmod()andthefollow_symlinksargumentofchmod()arebothnowavailableonWindows. Notethatthe\ndefault valueof follow_symlinks in lchmod() is False onWindows. (Contributed bySerhiyStorchakain\ngh-59616.)\n\u2022 fchmod()andsupportforfiledescriptorsinchmod()arebothnowavailableonWindows. (Contributedby\nSerhiyStorchakaingh-113191.)\n\u2022 OnWindows,mkdir()andmakedirs()nowsupportpassingamodevalueof0o700toapplyaccesscontrol\ntothenewdirectory. Thisimplicitlyaffectstempfile.mkdtemp()andisamitigationforCVE2024-4030.\nOthervaluesformodecontinuetobeignored. (ContributedbySteveDoweringh-118486.)\n\u2022 posix_spawn()nowacceptsNonefortheenvargument,whichmakesthenewlyspawnedprocessusethe\ncurrentprocessenvironment. (ContributedbyJakubKulikingh-113119.)\n14\n\u2022 posix_spawn()cannowusethePOSIX_SPAWN_CLOSEFROMattributeinthefile_actionsparameteronplat-\nformsthatsupportposix_spawn_file_actions_addclosefrom_np(). (ContributedbyJakubKulikin\ngh-113117.)\n5.28 os.path\n\u2022 Addisreserved()tocheckifapathisreservedonthecurrentsystem. Thisfunctionisonlyavailableon\nWindows. (ContributedbyBarneyGaleingh-88569.)\n\u2022 On Windows, isabs() no longer considers paths starting with exactly one slash (\\ or /) to be absolute.\n(ContributedbyBarneyGaleandJonFosteringh-44626.)\n\u2022 realpath()nowresolvesMS-DOSstylefilenamesevenifthefileisnotaccessible. (ContributedbyMoonsik\nParkingh-82367.)\n5.29 pathlib\n\u2022 AddUnsupportedOperation,whichisraisedinsteadofNotImplementedErrorwhenapathoperation\nisn\u2019tsupported. (ContributedbyBarneyGaleingh-89812.)\n\u2022 AddanewconstructorforcreatingPathobjectsfrom\u2018file\u2019URIs(file:///), Path.from_uri(). (Con-\ntributedbyBarneyGaleingh-107465.)\n\u2022 AddPurePath.full_match()formatchingpathswithshell-stylewildcards,includingtherecursivewild-\ncard\u201c**\u201d. (ContributedbyBarneyGaleingh-73435.)\n\u2022 AddthePurePath.parserclassattributetostoretheimplementationofos.pathusedforlow-levelpath\nparsingandjoining. Thiswillbeeitherposixpathorntpath.\n\u2022 Addrecurse_symlinkskeyword-onlyargumenttoPath.glob()andrglob(). (ContributedbyBarneyGale\ningh-77609.)\n\u2022 Path.glob()andrglob()nowreturnfilesanddirectorieswhengivenapatternthatendswith\u201c**\u201d. Pre-\nviously,onlydirectorieswerereturned. (ContributedbyBarneyGaleingh-70303.)\n\u2022 Addthefollow_symlinks keyword-onlyargumenttoPath.is_file, Path.is_dir, Path.owner(), and\nPath.group(). (ContributedbyBarneyGaleingh-105793andKamilTurekingh-107962.)\n5.30 pdb\n\u2022 breakpoint()andset_trace()nowenterthedebuggerimmediatelyratherthanonthenextlineofcode\ntobeexecuted. Thischangepreventsthedebuggerfrombreakingoutsideofthecontextwhenbreakpoint()\nispositionedattheendofthecontext. (ContributedbyTianGaoingh-118579.)\n\u2022 sys.path[0] is no longer replaced by the directory of the script being debugged when sys.flags.\nsafe_pathisset. (ContributedbyTianGaoandChristianWaltheringh-111762.)\n\u2022 zipappisnowsupportedasadebuggingtarget. (ContributedbyTianGaoingh-118501.)\n\u2022 Add ability to move between chained exceptions during post-mortem debugging in pm() using the new\nexceptions [exc_number]commandforPdb. (ContributedbyMatthiasBussonnieringh-106676.)\n\u2022 Expressionsandstatementswhoseprefixisapdbcommandarenowcorrectlyidentifiedandexecuted. (Con-\ntributedbyTianGaoingh-108464.)\n5.31 queue\n\u2022 AddQueue.shutdownandShutDowntomanagequeuetermination. (ContributedbyLaurieOppermanand\nYvesDupratingh-104750.)\n15\n5.32 random\n\u2022 Addacommand-lineinterface. (ContributedbyHugovanKemenadeingh-118131.)\n5.33 re\n\u2022 Renamere.errortoPatternErrorforimprovedclarity. re.erroriskeptforbackwardcompatibility.\n5.34 shutil\n\u2022 Supportthedir_fdandfollow_symlinkskeywordargumentsinchown(). (ContributedbyBerkerPeksagand\nTahiaKingh-62308)\n5.35 site\n\u2022 .pth files are now decoded using UTF-8 first, and then with the locale encoding if UTF-8 decoding fails.\n(ContributedbyInadaNaokiingh-117802.)\n5.36 sqlite3\n\u2022 A ResourceWarning is now emitted if a Connection object is not closed explicitly. (Contributed by\nErlendE.Aaslandingh-105539.)\n\u2022 Addthefilterkeyword-onlyparametertoConnection.iterdump()forfilteringdatabaseobjectstodump.\n(ContributedbyMariuszFelisiakingh-91602.)\n5.37 ssl\n\u2022 The create_default_context() API now includes VERIFY_X509_PARTIAL_CHAIN and\nVERIFY_X509_STRICTinitsdefaultflags.\n(cid:174) Note\nVERIFY_X509_STRICTmayrejectpre-RFC5280ormalformedcertificatesthattheunderlyingOpenSSL\nimplementationmightotherwiseaccept. Whilstdisablingthisisnotrecommended,youcandosousing:\nimport ssl\nctx = ssl.create_default_context()\nctx.verify_flags &= ~ssl.VERIFY_X509_STRICT\n(ContributedbyWilliamWoodruffingh-112389.)\n5.38 statistics\n\u2022 Addkde()forkerneldensityestimation. Thismakesitpossibletoestimateacontinuousprobabilitydensity\nfunctionfromafixednumberofdiscretesamples. (ContributedbyRaymondHettingeringh-115863.)\n\u2022 Addkde_random()forsamplingfromanestimatedprobabilitydensityfunctioncreatedbykde(). (Con-\ntributedbyRaymondHettingeringh-115863.)\n5.39 subprocess\n\u2022 Thesubprocessmodulenowusestheposix_spawn()functioninmoresituations.\nNotably, when close_fds is True (the default), posix_spawn() will be used when the C library provides\nposix_spawn_file_actions_addclosefrom_np(),whichincludesrecentversionsofLinux,FreeBSD,\nandSolaris. OnLinux,thisshouldperformsimilarlytotheexistingLinuxvfork()basedcode.\n16\nA private control knob subprocess._USE_POSIX_SPAWN can be set to False if you need to force\nsubprocess to never use posix_spawn(). Please report your reason and platform details in the issue\ntracker if you set this so that we can improve our API selection logic for everyone. (Contributed by Jakub\nKulikingh-113117.)\n5.40 sys\n\u2022 Addthe_is_interned()functiontotestifastringwasinterned. Thisfunctionisnotguaranteedtoexist\ninallimplementationsofPython. (ContributedbySerhiyStorchakaingh-78573.)\n5.41 tempfile\n\u2022 OnWindows,thedefaultmode0o700usedbytempfile.mkdtemp()nowlimitsaccesstothenewdirectory\nduetochangestoos.mkdir(). ThisisamitigationforCVE2024-4030. (ContributedbySteveDowerin\ngh-118486.)\n5.42 time\n\u2022 OnWindows,monotonic()nowusestheQueryPerformanceCounter()clockforaresolutionof1mi-\ncrosecond, instead of the GetTickCount64() clock which has a resolution of 15.6 milliseconds. (Con-\ntributedbyVictorStinneringh-88494.)\n\u2022 On Windows, time() now uses the GetSystemTimePreciseAsFileTime() clock for a resolution of 1\nmicrosecond,insteadoftheGetSystemTimeAsFileTime()clockwhichhasaresolutionof15.6millisec-\nonds. (ContributedbyVictorStinneringh-63207.)\n5.43 tkinter\n\u2022 Add tkinter widget methods: tk_busy_hold(), tk_busy_configure(), tk_busy_cget(),\ntk_busy_forget(), tk_busy_current(), and tk_busy_status(). (Contributed by Miguel, klapp-\nnaseandSerhiyStorchakaingh-72684.)\n\u2022 Thetkinterwidgetmethodwm_attributes()nowacceptstheattributenamewithouttheminusprefix\nto get window attributes, for example w.wm_attributes('alpha') and allows specifying attributes and\nvaluestosetaskeywordarguments,forexamplew.wm_attributes(alpha=0.5). (ContributedbySerhiy\nStorchakaingh-43457.)\n\u2022 wm_attributes()cannowreturnattributesasadict,byusingthenewoptionalkeyword-onlyparameter\nreturn_python_dict. (ContributedbySerhiyStorchakaingh-43457.)\n\u2022 Text.count()cannowreturnasimpleintwhenthenewoptionalkeyword-onlyparameterreturn_intsis\nused. Otherwise, the single count is returned as a 1-tuple or None. (Contributed by Serhiy Storchaka in\ngh-97928.)\n\u2022 Support the \u201cvsapi\u201d element type in the element_create() method of tkinter.ttk.Style. (Con-\ntributedbySerhiyStorchakaingh-68166.)\n\u2022 Addtheafter_info()methodforTkinterwidgets. (ContributedbyCherylSabellaingh-77020.)\n\u2022 Addanewcopy_replace()methodtoPhotoImagetocopyaregionfromoneimagetoanother,possibly\nwithpixelzooming,subsampling,orboth. (ContributedbySerhiyStorchakaingh-118225.)\n\u2022 Addfrom_coordsparametertothePhotoImagemethodscopy(),zoom()andsubsample(). Addzoom\nand subsample parameters to the PhotoImage method copy(). (Contributed by Serhiy Storchaka in gh-\n118225.)\n\u2022 Add the PhotoImage methods read() to read an image from a file and data() to get the image data.\nAdd background and grayscale parameters to the write() method. (Contributed by Serhiy Storchaka in\ngh-118271.)\n17\n5.44 traceback\n\u2022 Addtheexc_type_strattributetoTracebackException, whichholdsastringdisplayoftheexc_type.\nDeprecatetheexc_typeattribute,whichholdsthetypeobjectitself. Addparametersave_exc_type(default\nTrue)toindicatewhetherexc_typeshouldbesaved. (ContributedbyIritKatrielingh-112332.)\n\u2022 Addanewshow_groupkeyword-onlyparametertoTracebackException.format_exception_only()\nto(recursively)formatthenestedexceptionsofaBaseExceptionGroupinstance. (ContributedbyIritKa-\ntrielingh-105292.)\n5.45 types\n\u2022 SimpleNamespacecannowtakeasinglepositionalargumenttoinitialisethenamespace\u2019sarguments. This\nargument must either be a mapping or an iterable of key-value pairs. (Contributed by Serhiy Storchaka in\ngh-108191.)\n5.46 typing\n\u2022 PEP705: AddReadOnly,aspecialtypingconstructtomarkaTypedDictitemasread-onlyfortypecheck-\ners.\n\u2022 PEP742: AddTypeIs,atypingconstructthatcanbeusedtoinstructatypecheckerhowtonarrowatype.\n\u2022 AddNoDefault,asentinelobjectusedtorepresentthedefaultsofsomeparametersinthetypingmodule.\n(ContributedbyJelleZijlstraingh-116126.)\n\u2022 Addget_protocol_members()toreturnthesetofmembersdefiningatyping.Protocol. (Contributed\nbyJelleZijlstraingh-104873.)\n\u2022 Addis_protocol()tocheckwhetheraclassisaProtocol. (ContributedbyJelleZijlstraingh-104873.)\n\u2022 ClassVarcannowbenestedinFinal,andviceversa. (ContributedbyMehdiDrissiingh-89547.)\n5.47 unicodedata\n\u2022 UpdatetheUnicodedatabasetoversion15.1.0. (ContributedbyJamesGerityingh-109559.)\n5.48 venv\n\u2022 Addsupportforcreatingsourcecontrolmanagement(SCM)ignorefilesinavirtualenvironment\u2019sdirectory. By\ndefault,Gitissupported. Thisisimplementedasopt-inviatheAPI,whichcanbeextendedtosupportother\nSCMs (EnvBuilder and create()), and opt-out via the CLI, using --without-scm-ignore-files.\n(ContributedbyBrettCannoningh-108125.)\n5.49 warnings\n\u2022 PEP 702: The new warnings.deprecated() decorator provides a way to communicate deprecations to\na static type checker and to warn on usage of deprecated classes and functions. A DeprecationWarning\nmayalsobeemittedwhenadecoratedfunctionorclassisusedatruntime. (ContributedbyJelleZijlstrain\ngh-104003.)\n5.50 xml\n\u2022 AllowcontrollingExpat>=2.6.0reparsedeferral(CVE2023-52425)byaddingfivenewmethods:\n\u2013 xml.etree.ElementTree.XMLParser.flush()\n\u2013 xml.etree.ElementTree.XMLPullParser.flush()\n\u2013 xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()\n\u2013 xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()\n\u2013 xml.sax.expatreader.ExpatParser.flush()\n18\n(ContributedbySebastianPippingingh-115623.)\n\u2022 Add the close() method for the iterator returned by iterparse() for explicit cleanup. (Contributed by\nSerhiyStorchakaingh-69893.)\n5.51 zipimport\n\u2022 Add support for ZIP64 format files. Everybody loves huge data, right? (Contributed by Tim Hatch in gh-\n94146.)\n6 Optimizations\n\u2022 Several standard library modules have had their import times significantly improved. For example, the im-\nport time of the typing module has been reduced by around a third by removing dependencies on re and\ncontextlib. Other modules to enjoy import-time speedups include email.utils, enum, functools,\nimportlib.metadata, and threading. (Contributed by Alex Waygood, Shantanu Jain, Adam Turner,\nDanielHollas,andothersingh-109653.)\n\u2022 textwrap.indent()isnowaround30%fasterthanbeforeforlargeinput. (ContributedbyInadaNaokiin\ngh-107369.)\n\u2022 The subprocess module now uses the posix_spawn() function in more situations, including when\nclose_fdsisTrue(thedefault)onmanymodernplatforms. Thisshouldprovideanotableperformanceincrease\nwhenlaunchingprocessesonFreeBSDandSolaris. Seethesubprocesssectionabovefordetails. (Contributed\nbyJakubKulikingh-113117.)\n7 Removed Modules And APIs\n7.1 PEP 594: Remove \u201cdead batteries\u201d from the standard library\nPEP594proposedremoving19modulesfromthestandardlibrary, colloquiallyreferredtoas\u2018deadbatteries\u2019due\ntotheirhistoric,obsolete,orinsecurestatus. AllofthefollowingmodulesweredeprecatedinPython3.11,andare\nnowremoved:\n\u2022 aifc\n\u2013 standard-aifc: UsetheredistributionofaifclibraryfromPyPI.\n\u2022 audioop\n\u2013 audioop-lts: Useaudioop-ltslibraryfromPyPI.\n\u2022 chunk\n\u2013 standard-chunk: UsetheredistributionofchunklibraryfromPyPI.\n\u2022 cgiandcgitb\n\u2013 cgi.FieldStoragecantypicallybereplacedwithurllib.parse.parse_qsl()forGETandHEAD\nrequests,andtheemail.messagemoduleorthemultipartlibraryforPOSTandPUTrequests.\n\u2013 cgi.parse()canbereplacedbycallingurllib.parse.parse_qs()directlyonthedesiredquery\nstring, unless the input is multipart/form-data, which should be replaced as described below for\ncgi.parse_multipart().\n\u2013 cgi.parse_header()canbereplacedwiththefunctionalityintheemailpackage,whichimplements\nthesameMIMERFCs. Forexample,withemail.message.EmailMessage:\nfrom email.message import EmailMessage\nmsg = EmailMessage()\nmsg['content-type'] = 'application/json; charset=\"utf8\"'\nmain, params = msg.get_content_type(), msg['content-type'].params\n19\n\u2013 cgi.parse_multipart() can be replaced with the functionality in the email package, which im-\nplements the same MIME RFCs, or with the multipart library. For example, the email.message.\nEmailMessageandemail.message.Messageclasses.\n\u2013 standard-cgi: andstandard-cgitb: UsetheredistributionofcgiandcgitblibraryfromPyPI.\n\u2022 crypt and the private _crypt extension. The hashlib module may be an appropriate replacement when\nsimplyhashingavalueisrequired. Otherwise,variousthird-partylibrariesonPyPIareavailable:\n\u2013 bcrypt: Modernpasswordhashingforyoursoftwareandyourservers.\n\u2013 passlib: Comprehensivepasswordhashingframeworksupportingover30schemes.\n\u2013 argon2-cffi: ThesecureArgon2passwordhashingalgorithm.\n\u2013 legacycrypt: ctypeswrappertothePOSIXcryptlibrarycallandassociatedfunctionality.\n\u2013 crypt_r: Forkofthecryptmodule,wrappertothecrypt_r(3)librarycallandassociatedfunction-\nality.\n\u2013 standard-cryptanddeprecated-crypt-alternative: Usetheredistributionofcryptandreimplementation\nof_cryptlibrariesfromPyPI.\n\u2022 imghdr: Thefiletype,puremagic,orpython-magiclibrariesshouldbeusedasreplacements. Forexample,the\npuremagic.what()functioncanbeusedtoreplacetheimghdr.what()functionforallfileformatsthat\nweresupportedbyimghdr.\n\u2013 standard-imghdr: UsetheredistributionofimghdrlibraryfromPyPI.\n\u2022 mailcap: Usethemimetypesmoduleinstead.\n\u2013 standard-mailcap: UsetheredistributionofmailcaplibraryfromPyPI.\n\u2022 msilib\n\u2022 nis\n\u2022 nntplib: UsethepynntplibraryfromPyPIinstead.\n\u2013 standard-nntplib: UsetheredistributionofnntpliblibraryfromPyPI.\n\u2022 ossaudiodev: Foraudioplayback,usethepygamelibraryfromPyPIinstead.\n\u2022 pipes: Usethesubprocessmoduleinstead. Useshlex.quote()toreplacetheundocumentedpipes.\nquotefunction.\n\u2013 standard-pipes: UsetheredistributionofpipeslibraryfromPyPI.\n\u2022 sndhdr: Thefiletype,puremagic,orpython-magiclibrariesshouldbeusedasreplacements.\n\u2013 standard-sndhdr: UsetheredistributionofsndhdrlibraryfromPyPI.\n\u2022 spwd: Usethepython-pamlibraryfromPyPIinstead.\n\u2022 sunau\n\u2013 standard-sunau: UsetheredistributionofsunaulibraryfromPyPI.\n\u2022 telnetlib,Usethetelnetlib3orExscriptlibrariesfromPyPIinstead.\n\u2013 standard-telnetlib: UsetheredistributionoftelnetliblibraryfromPyPI.\n\u2022 uu: Usethebase64moduleinstead,asamodernalternative.\n\u2013 standard-uu: UsetheredistributionofuulibraryfromPyPI.\n\u2022 xdrlib\n\u2013 standard-xdrlib: UsetheredistributionofxdrliblibraryfromPyPI.\n(ContributedbyVictorStinnerandZacharyWareingh-104773andgh-104780.)\n20\n7.2 2to3\n\u2022 Removethe2to3programandthelib2to3module,previouslydeprecatedinPython3.11. (Contributedby\nVictorStinneringh-104780.)\n7.3 builtins\n\u2022 Remove support for chained classmethod descriptors (introduced in gh-63272). These can no longer be\nused to wrap other descriptors, such as property. The core design of this feature was flawed and led to\nseveral problems. To \u201cpass-through\u201d a classmethod, consider using the __wrapped__ attribute that was\naddedinPython3.10. (ContributedbyRaymondHettingeringh-89519.)\n\u2022 RaiseaRuntimeErrorwhencallingframe.clear()onasuspendedframe(ashasalwaysbeenthecase\nforanexecutingframe). (ContributedbyIritKatrielingh-79932.)\n7.4 configparser\n\u2022 RemovetheundocumentedLegacyInterpolationclass,deprecatedinthedocstringsincePython3.2,and\natruntimesincePython3.11. (ContributedbyHugovanKemenadeingh-104886.)\n7.5 importlib.metadata\n\u2022 Remove deprecated subscript (__getitem__()) access for EntryPoint objects. (Contributed by Jason R.\nCoombsingh-113175.)\n7.6 locale\n\u2022 Remove the locale.resetlocale() function, deprecated in Python 3.11. Use locale.\nsetlocale(locale.LC_ALL, \"\")instead. (ContributedbyVictorStinneringh-104783.)\n7.7 opcode\n\u2022 Moveopcode.ENABLE_SPECIALIZATIONto_opcode.ENABLE_SPECIALIZATION.Thisfieldwasadded\nin 3.12, it was never documented, and is not intended for external use. (Contributed by Irit Katriel in gh-\n105481.)\n\u2022 Remove opcode.is_pseudo(), opcode.MIN_PSEUDO_OPCODE, and opcode.MAX_PSEUDO_OPCODE,\nwhich were added in Python 3.12, but were neither documented nor exposed through dis, and were not\nintendedtobeusedexternally. (ContributedbyIritKatrielingh-105481.)\n7.8 optparse\n\u2022 Thismoduleisnolongerconsideredsoftdeprecated. Whileargparseremainspreferredfornewprojectsthat\naren\u2019tusingathirdpartycommandlineargumentprocessinglibrary,thereareaspectsofthewayargparse\nworksthatmeanthelowerleveloptparsemodulemayprovideabetterfoundationforwritingargumentpro-\ncessinglibraries,andforimplementingcommandlineapplicationswhichadheremorestrictlythanargparse\ndoestovariousUnixcommandlineprocessingconventionsthatoriginateinthebehaviouroftheCgetopt()\nfunction. (ContributedbyAlyssaCoghlanandSerhiyStorchakaingh-126180.)\n7.9 pathlib\n\u2022 RemovetheabilitytousePathobjectsascontextmanagers. Thisfunctionalitywasdeprecatedandhashad\nnoeffectsincePython3.9. (ContributedbyBarneyGaleingh-83863.)\n7.10 re\n\u2022 Remove the undocumented, deprecated, and broken re.template() function and re.TEMPLATE / re.T\nflag. (ContributedbySerhiyStorchakaandNikitaSobolevingh-105687.)\n21\n7.11 tkinter.tix\n\u2022 Removethetkinter.tixmodule,deprecatedinPython3.6. Thethird-partyTixlibrarywhichthemodule\nwrappedisunmaintained. (ContributedbyZacharyWareingh-75552.)\n7.12 turtle\n\u2022 RemovetheRawTurtle.settiltangle()method,deprecatedinthedocumentationsincePython3.1and\natruntimesincePython3.11. (ContributedbyHugovanKemenadeingh-104876.)\n7.13 typing\n\u2022 Remove the typing.io and typing.re namespaces, deprecated since Python 3.8. The items in those\nnamespaces can be imported directly from the typing module. (Contributed by Sebastian Rittau in gh-\n92871.)\n\u2022 Remove the keyword-argument method of creating TypedDict types, deprecated in Python 3.11. (Con-\ntributedbyTomasRouningh-104786.)\n7.14 unittest\n\u2022 Removethefollowingunittestfunctions,deprecatedinPython3.11:\n\u2013 unittest.findTestCases()\n\u2013 unittest.makeSuite()\n\u2013 unittest.getTestCaseNames()\nUseTestLoadermethodsinstead:\n\u2013 loadTestsFromModule()\n\u2013 loadTestsFromTestCase()\n\u2013 getTestCaseNames()\n(ContributedbyHugovanKemenadeingh-104835.)\n\u2022 RemovetheuntestedandundocumentedTestProgram.usageExit()method,deprecatedinPython3.11.\n(ContributedbyHugovanKemenadeingh-104992.)\n7.15 urllib\n\u2022 Remove the cafile, capath, and cadefault parameters of the urllib.request.urlopen() function,\ndeprecated in Python 3.6. Use the context parameter instead with an SSLContext instance. The\nssl.SSLContext.load_cert_chain() function can be used to load specific certificates, or let ssl.\ncreate_default_context() select the operating system\u2019s trusted certificate authority (CA) certificates.\n(ContributedbyVictorStinneringh-105382.)\n7.16 webbrowser\n\u2022 Remove the untested and undocumented MacOSX class, deprecated in Python 3.11. Use the\nMacOSXOSAScript class (introduced in Python 3.2) instead. (Contributed by Hugo van Kemenade in gh-\n104804.)\n\u2022 RemovethedeprecatedMacOSXOSAScript._nameattribute. UsetheMacOSXOSAScript.nameattribute\ninstead. (ContributedbyNikitaSobolevingh-105546.)\n8 New Deprecations\n\u2022 User-definedfunctions:\n22\n\u2013 Deprecate assignment to a function\u2019s __code__ attribute, where the new code object\u2019s type does not\nmatchthefunction\u2019stype. Thedifferenttypesare: plainfunction,generator,asyncgenerator,andcorou-\ntine. (ContributedbyIritKatrielingh-81137.)\n\u2022 array:\n\u2013 Deprecatethe'u'formatcode(wchar_t)atruntime. Thisformatcodehasbeendeprecatedindocu-\nmentationsincePython3.3,andwillberemovedinPython3.16. Usethe'w'formatcode(Py_UCS4)\nforUnicodecharactersinstead. (ContributedbyHugovanKemenadeingh-80480.)\n\u2022 ctypes:\n\u2013 Deprecate the undocumented SetPointerType() function, to be removed in Python 3.15. (Con-\ntributedbyVictorStinneringh-105733.)\n\u2013 Soft-deprecate the ARRAY() function in favour of type * length multiplication. (Contributed by\nVictorStinneringh-105733.)\n\u2022 decimal:\n\u2013 Deprecatethenon-standardandundocumentedDecimalformatspecifier'N',whichisonlysupported\ninthedecimalmodule\u2019sCimplementation. (ContributedbySerhiyStorchakaingh-89902.)\n\u2022 dis:\n\u2013 DeprecatetheHAVE_ARGUMENTseparator. Checkmembershipinhasarginstead. (ContributedbyIrit\nKatrielingh-109319.)\n\u2022 gettext:\n\u2013 Deprecatenon-integernumbersasargumentstofunctionsandmethodsthatconsiderpluralformsinthe\ngettextmodule,evenifnotranslationwasfound. (ContributedbySerhiyStorchakaingh-88434.)\n\u2022 glob:\n\u2013 Deprecatetheundocumentedglob0()andglob1()functions. Useglob()andpassapath-likeobject\nspecifying the root directory to the root_dir parameter instead. (Contributed by Barney Gale in gh-\n117337.)\n\u2022 http.server:\n\u2013 Deprecate CGIHTTPRequestHandler, to be removed in Python 3.15. Process-based CGI HTTP\nservershavebeenoutoffavorforaverylongtime. Thiscodewasoutdated,unmaintained,andrarely\nused. Ithasahighpotentialforbothsecurityandfunctionalitybugs. (ContributedbyGregoryP.Smith\ningh-109096.)\n\u2013 Deprecatethe--cgiflagtothepython -m http.servercommand-lineinterface,toberemovedin\nPython3.15. (ContributedbyGregoryP.Smithingh-109096.)\n\u2022 mimetypes:\n\u2013 Soft-deprecatefilepathargumentstoguess_type(),useguess_file_type()instead. (Contributed\nbySerhiyStorchakaingh-66543.)\n\u2022 re:\n\u2013 Deprecatepassingtheoptionalmaxsplit,count,orflagsargumentsaspositionalargumentstothemodule-\nlevelsplit(),sub(),andsubn()functions. Theseparameterswillbecomekeyword-onlyinafuture\nversionofPython. (ContributedbySerhiyStorchakaingh-56166.)\n\u2022 pathlib:\n\u2013 Deprecate PurePath.is_reserved(), to be removed in Python 3.15. Use os.path.\nisreserved()todetectreservedpathsonWindows. (ContributedbyBarneyGaleingh-88569.)\n\u2022 platform:\n\u2013 Deprecatejava_ver(),toberemovedinPython3.15. ThisfunctionisonlyusefulforJythonsupport,\nhasaconfusingAPI,andislargelyuntested. (ContributedbyNikitaSobolevingh-116349.)\n\u2022 pydoc:\n23\n\u2013 Deprecatetheundocumentedispackage()function. (ContributedbyZackerySpytzingh-64020.)\n\u2022 sqlite3:\n\u2013 Deprecatepassingmorethanonepositionalargumenttotheconnect()functionandtheConnection\nconstructor. The remaining parameters will become keyword-only in Python 3.15. (Contributed by\nErlendE.Aaslandingh-107948.)\n\u2013 Deprecate passing name, number of arguments, and the callable as keyword arguments for\nConnection.create_function() and Connection.create_aggregate() These parameters\nwillbecomepositional-onlyinPython3.15. (ContributedbyErlendE.Aaslandingh-108278.)\n\u2013 Deprecate passing the callback callable by keyword for the set_authorizer(),\nset_progress_handler(), and set_trace_callback() Connection methods. The call-\nback callables will become positional-only in Python 3.15. (Contributed by Erlend E. Aasland in\ngh-108278.)\n\u2022 sys:\n\u2013 Deprecatethe_enablelegacywindowsfsencoding()function,toberemovedinPython3.16. Use\nthePYTHONLEGACYWINDOWSFSENCODINGenvironmentvariableinstead. (ContributedbyInadaNaoki\ningh-73427.)\n\u2022 tarfile:\n\u2013 DeprecatetheundocumentedandunusedTarFile.tarfileattribute,toberemovedinPython3.16.\n(Contributedingh-115256.)\n\u2022 traceback:\n\u2013 Deprecate the TracebackException.exc_type attribute. Use TracebackException.\nexc_type_strinstead. (ContributedbyIritKatrielingh-112332.)\n\u2022 typing:\n\u2013 DeprecatetheundocumentedkeywordargumentsyntaxforcreatingNamedTupleclasses(e.g. Point\n= NamedTuple(\"Point\", x=int, y=int)), to be removed in Python 3.15. Use the class-based\nsyntaxorthefunctionalsyntaxinstead. (ContributedbyAlexWaygoodingh-105566.)\n\u2013 Deprecate omitting the fields parameter when creating a NamedTuple or typing.TypedDict class,\nand deprecate passing None to the fields parameter of both types. Python 3.15 will require a\nvalid sequence for the fields parameter. To create a NamedTuple class with zero fields, use class\nNT(NamedTuple): passorNT = NamedTuple(\"NT\", ()). TocreateaTypedDictclasswithzero\nfields,useclass TD(TypedDict): passorTD = TypedDict(\"TD\", {}). (ContributedbyAlex\nWaygoodingh-105566andgh-105570.)\n\u2013 Deprecate the typing.no_type_check_decorator() decorator function, to be removed in in\nPython 3.15. After eight years in the typing module, it has yet to be supported by any major type\nchecker. (ContributedbyAlexWaygoodingh-106309.)\n\u2013 Deprecate typing.AnyStr. In Python 3.16, it will be removed from typing.__all__, and a\nDeprecationWarningwillbeemittedatruntimewhenitisimportedoraccessed. Itwillberemoved\nentirely in Python 3.18. Use the new type parameter syntax instead. (Contributed by Michael The in\ngh-107116.)\n\u2022 wave:\n\u2013 Deprecate the getmark(), setmark(), and getmarkers() methods of the Wave_read and\nWave_writeclasses,toberemovedinPython3.15. (ContributedbyVictorStinneringh-105096.)\n8.1 Pending Removal in Python 3.14\n\u2022 argparse: Thetype,choices,andmetavarparametersofargparse.BooleanOptionalActionaredep-\nrecatedandwillberemovedin3.14. (ContributedbyNikitaSobolevingh-92248.)\n24\n\u2022 ast: The following features have been deprecated in documentation since Python 3.8, now cause a\nDeprecationWarning to be emitted at runtime when they are accessed or used, and will be removed in\nPython3.14:\n\u2013 ast.Num\n\u2013 ast.Str\n\u2013 ast.Bytes\n\u2013 ast.NameConstant\n\u2013 ast.Ellipsis\nUseast.Constantinstead. (ContributedbySerhiyStorchakaingh-90953.)\n\u2022 asyncio:\n\u2013 The child watcher classes MultiLoopChildWatcher, FastChildWatcher,\nAbstractChildWatcher and SafeChildWatcher are deprecated and will be removed in\nPython3.14. (ContributedbyKumarAdityaingh-94597.)\n\u2013 asyncio.set_child_watcher(), asyncio.get_child_watcher(),\nasyncio.AbstractEventLoopPolicy.set_child_watcher() and asyncio.\nAbstractEventLoopPolicy.get_child_watcher() are deprecated and will be removed in\nPython3.14. (ContributedbyKumarAdityaingh-94597.)\n\u2013 Theget_event_loop()methodofthedefaulteventlooppolicynowemitsaDeprecationWarning\nifthereisnocurrenteventloopsetanditdecidestocreateone. (ContributedbySerhiyStorchakaand\nGuidovanRossumingh-100160.)\n\u2022 collections.abc: Deprecated ByteString. Prefer Sequence or Buffer. For use in typing, prefer a\nunion, likebytes | bytearray, orcollections.abc.Buffer. (ContributedbyShantanuJainingh-\n91896.)\n\u2022 email: Deprecatedtheisdstparameterinemail.utils.localtime(). (ContributedbyAlanWilliamsin\ngh-72346.)\n\u2022 importlib.abcdeprecatedclasses:\n\u2013 importlib.abc.ResourceReader\n\u2013 importlib.abc.Traversable\n\u2013 importlib.abc.TraversableResources\nUseimportlib.resources.abcclassesinstead:\n\u2013 importlib.resources.abc.Traversable\n\u2013 importlib.resources.abc.TraversableResources\n(ContributedbyJasonR.CoombsandHugovanKemenadeingh-93963.)\n\u2022 itertoolshadundocumented, inefficient, historicallybuggy, andinconsistentsupportforcopy, deepcopy,\nandpickleoperations. Thiswillberemovedin3.14forasignificantreductionincodevolumeandmaintenance\nburden. (ContributedbyRaymondHettingeringh-101588.)\n\u2022 multiprocessing: The default start method will change to a safer one on Linux, BSDs, and other non-\nmacOSPOSIXplatformswhere'fork'iscurrentlythedefault(gh-84559). Addingaruntimewarningabout\nthiswasdeemedtoodisruptiveasthemajorityofcodeisnotexpectedtocare. Usetheget_context()or\nset_start_method() APIs to explicitly specify when your code requires 'fork'. See multiprocessing-\nstart-methods.\n\u2022 pathlib: is_relative_to()andrelative_to(): passingadditionalargumentsisdeprecated.\n\u2022 pkgutil: find_loader() and get_loader() now raise DeprecationWarning; use importlib.\nutil.find_spec()instead. (ContributedbyNikitaSobolevingh-97850.)\n\u2022 pty:\n25\n\u2013 master_open(): usepty.openpty().\n\u2013 slave_open(): usepty.openpty().\n\u2022 sqlite3:\n\u2013 versionandversion_info.\n\u2013 execute()andexecutemany()ifnamedplaceholdersareusedandparametersisasequenceinstead\nofadict.\n\u2022 typing: ByteString, deprecated since Python 3.9, now causes a DeprecationWarning to be emitted\nwhenitisused.\n\u2022 urllib: urllib.parse.Quoter is deprecated: it was not intended to be a public API. (Contributed by\nGregoryP.Smithingh-88168.)\n8.2 Pending Removal in Python 3.15\n\u2022 Theimportsystem:\n\u2013 Setting __cached__ on a module while failing to set __spec__.cached is deprecated. In Python\n3.15, __cached__ will cease to be set or take into consideration by the import system or standard\nlibrary. (gh-97879)\n\u2013 Setting __package__ on a module while failing to set __spec__.parent is deprecated. In Python\n3.15, __package__ will cease to be set or take into consideration by the import system or standard\nlibrary. (gh-97879)\n\u2022 ctypes:\n\u2013 Theundocumentedctypes.SetPointerType()functionhasbeendeprecatedsincePython3.13.\n\u2022 http.server:\n\u2013 TheobsoleteandrarelyusedCGIHTTPRequestHandlerhasbeendeprecatedsincePython3.13. No\ndirectreplacementexists. AnythingisbetterthanCGItointerfaceawebserverwitharequesthandler.\n\u2013 The--cgiflagtothepython -m http.servercommand-lineinterfacehasbeendeprecatedsince\nPython3.13.\n\u2022 importlib:\n\u2013 load_module()method: useexec_module()instead.\n\u2022 locale:\n\u2013 The getdefaultlocale() function has been deprecated since Python 3.11. Its removal was origi-\nnallyplannedforPython3.13(gh-90817),buthasbeenpostponedtoPython3.15. Usegetlocale(),\nsetlocale(),andgetencoding()instead. (ContributedbyHugovanKemenadeingh-111187.)\n\u2022 pathlib:\n\u2013 PurePath.is_reserved()hasbeendeprecatedsincePython3.13. Useos.path.isreserved()\ntodetectreservedpathsonWindows.\n\u2022 platform:\n\u2013 java_ver() hasbeendeprecatedsincePython3.13. ThisfunctionisonlyusefulforJythonsupport,\nhasaconfusingAPI,andislargelyuntested.\n\u2022 sysconfig:\n\u2013 The check_home argument of sysconfig.is_python_build() has been deprecated since Python\n3.12.\n\u2022 threading:\n\u2013 RLock() will take no arguments in Python 3.15. Passing any arguments has been deprecated since\nPython3.14,asthePythonversiondoesnotpermitanyarguments,buttheCversionallowsanynumber\nofpositionalorkeywordarguments,ignoringeveryargument.\n26\n\u2022 types:\n\u2013 types.CodeType: Accessingco_lnotabwasdeprecatedinPEP626since3.10andwasplannedto\nberemovedin3.12,butitonlygotaproperDeprecationWarningin3.12. Mayberemovedin3.15.\n(ContributedbyNikitaSobolevingh-101866.)\n\u2022 typing:\n\u2013 The undocumented keyword argument syntax for creating NamedTuple classes (e.g. Point =\nNamedTuple(\"Point\", x=int, y=int)) has been deprecated since Python 3.13. Use the class-\nbasedsyntaxorthefunctionalsyntaxinstead.\n\u2013 The typing.no_type_check_decorator() decorator function has been deprecated since Python\n3.13. Aftereightyearsinthetypingmodule,ithasyettobesupportedbyanymajortypechecker.\n\u2022 wave:\n\u2013 The getmark(), setmark(), and getmarkers() methods of the Wave_read and Wave_write\nclasseshavebeendeprecatedsincePython3.13.\n8.3 Pending removal in Python 3.16\n\u2022 Theimportsystem:\n\u2013 Setting __loader__ on a module while failing to set __spec__.loader is deprecated. In Python\n3.16,__loader__willceasetobesetortakenintoconsiderationbytheimportsystemorthestandard\nlibrary.\n\u2022 array:\n\u2013 The'u'formatcode(wchar_t)hasbeendeprecatedindocumentationsincePython3.3andatruntime\nsincePython3.13. Usethe'w'formatcode(Py_UCS4)forUnicodecharactersinstead.\n\u2022 asyncio:\n\u2013 asyncio.iscoroutinefunction() is deprecated and will be removed in Python 3.16, use\ninspect.iscoroutinefunction() instead. (Contributed by Jiahao Li and Kumar Aditya in gh-\n122875.)\n\u2022 builtins:\n\u2013 Bitwise inversion on boolean types, ~True or ~False has been deprecated since Python 3.12, as it\nproducessurprisingandunintuitiveresults(-2and-1). Usenot xinsteadforthelogicalnegationofa\nBoolean. Intherarecasethatyouneedthebitwiseinversionoftheunderlyinginteger,converttoint\nexplicitly(~int(x)).\n\u2022 shutil:\n\u2013 TheExecErrorexceptionhasbeendeprecatedsincePython3.14. Ithasnotbeenusedbyanyfunction\ninshutilsincePython3.4,andisnowanaliasofRuntimeError.\n\u2022 symtable:\n\u2013 TheClass.get_methodsmethodhasbeendeprecatedsincePython3.14.\n\u2022 sys:\n\u2013 The_enablelegacywindowsfsencoding()functionhasbeendeprecatedsincePython3.13. Use\nthePYTHONLEGACYWINDOWSFSENCODINGenvironmentvariableinstead.\n\u2022 tarfile:\n\u2013 TheundocumentedandunusedTarFile.tarfileattributehasbeendeprecatedsincePython3.13.\n27\n8.4 Pending Removal in Future Versions\nThefollowingAPIswillberemovedinthefuture,althoughthereiscurrentlynodatescheduledfortheirremoval.\n\u2022 argparse: Nestingargumentgroupsandnestingmutuallyexclusivegroupsaredeprecated.\n\u2022 array\u2019s'u'formatcode(gh-57281)\n\u2022 builtins:\n\u2013 bool(NotImplemented).\n\u2013 Generators: throw(type, exc, tb) and athrow(type, exc, tb) signature is deprecated: use\nthrow(exc)andathrow(exc)instead,thesingleargumentsignature.\n\u2013 CurrentlyPythonacceptsnumericliteralsimmediatelyfollowedbykeywords,forexample0in x,1or\nx,0if 1else 2. Itallowsconfusingandambiguousexpressionslike[0x1for x in y](whichcan\nbe interpreted as [0x1 for x in y] or [0x1f or x in y]). A syntax warning is raised if the\nnumericliteralisimmediatelyfollowedbyoneofkeywordsand,else,for,if,in,isandor. Ina\nfuturereleaseitwillbechangedtoasyntaxerror. (gh-87999)\n\u2013 Supportfor__index__()and__int__()methodreturningnon-inttype: thesemethodswillbere-\nquiredtoreturnaninstanceofastrictsubclassofint.\n\u2013 Supportfor__float__()methodreturningastrictsubclassoffloat: thesemethodswillberequired\ntoreturnaninstanceoffloat.\n\u2013 Support for __complex__() method returning a strict subclass of complex: these methods will be\nrequiredtoreturnaninstanceofcomplex.\n\u2013 Delegationofint()to__trunc__()method.\n\u2013 Passingacomplexnumberastherealorimagargumentinthecomplex()constructorisnowdeprecated;\nitshouldonlybepassedasasinglepositionalargument. (ContributedbySerhiyStorchakaingh-109218.)\n\u2022 calendar: calendar.January and calendar.February constants are deprecated and replaced by\ncalendar.JANUARYandcalendar.FEBRUARY.(ContributedbyPrinceRoshaningh-103636.)\n\u2022 codeobject.co_lnotab: usethecodeobject.co_lines()methodinstead.\n\u2022 datetime:\n\u2013 utcnow(): usedatetime.datetime.now(tz=datetime.UTC).\n\u2013 utcfromtimestamp(): use datetime.datetime.fromtimestamp(timestamp,\ntz=datetime.UTC).\n\u2022 gettext: Pluralvaluemustbeaninteger.\n\u2022 importlib:\n\u2013 cache_from_source() debug_override parameter is deprecated: use the optimization parameter in-\nstead.\n\u2022 importlib.metadata:\n\u2013 EntryPointstupleinterface.\n\u2013 ImplicitNoneonreturnvalues.\n\u2022 logging: thewarn()methodhasbeendeprecatedsincePython3.3,usewarning()instead.\n\u2022 mailbox: UseofStringIOinputandtextmodeisdeprecated,useBytesIOandbinarymodeinstead.\n\u2022 os: Callingos.register_at_fork()inmulti-threadedprocess.\n\u2022 pydoc.ErrorDuringImport: Atuplevalueforexc_infoparameterisdeprecated,useanexceptioninstance.\n\u2022 re: Morestrictrulesarenowappliedfornumericalgroupreferencesandgroupnamesinregularexpressions.\nOnlysequenceofASCIIdigitsisnowacceptedasanumericalreference. Thegroupnameinbytespatterns\nandreplacementstringscannowonlycontainASCIIlettersanddigitsandunderscore. (ContributedbySerhiy\nStorchakaingh-91760.)\n28\n\u2022 sre_compile,sre_constantsandsre_parsemodules.\n\u2022 shutil: rmtree()\u2019sonerrorparameterisdeprecatedinPython3.12;usetheonexcparameterinstead.\n\u2022 ssloptionsandprotocols:\n\u2013 ssl.SSLContextwithoutprotocolargumentisdeprecated.\n\u2013 ssl.SSLContext: set_npn_protocols()andselected_npn_protocol()aredeprecated: use\nALPNinstead.\n\u2013 ssl.OP_NO_SSL*options\n\u2013 ssl.OP_NO_TLS*options\n\u2013 ssl.PROTOCOL_SSLv3\n\u2013 ssl.PROTOCOL_TLS\n\u2013 ssl.PROTOCOL_TLSv1\n\u2013 ssl.PROTOCOL_TLSv1_1\n\u2013 ssl.PROTOCOL_TLSv1_2\n\u2013 ssl.TLSVersion.SSLv3\n\u2013 ssl.TLSVersion.TLSv1\n\u2013 ssl.TLSVersion.TLSv1_1\n\u2022 threadingmethods:\n\u2013 threading.Condition.notifyAll(): usenotify_all().\n\u2013 threading.Event.isSet(): useis_set().\n\u2013 threading.Thread.isDaemon(), threading.Thread.setDaemon(): use threading.\nThread.daemonattribute.\n\u2013 threading.Thread.getName(), threading.Thread.setName(): use threading.Thread.\nnameattribute.\n\u2013 threading.currentThread(): usethreading.current_thread().\n\u2013 threading.activeCount(): usethreading.active_count().\n\u2022 typing.Text(gh-92332).\n\u2022 unittest.IsolatedAsyncioTestCase: it is deprecated to return a value that is not None from a test\ncase.\n\u2022 urllib.parsedeprecatedfunctions: urlparse()instead\n\u2013 splitattr()\n\u2013 splithost()\n\u2013 splitnport()\n\u2013 splitpasswd()\n\u2013 splitport()\n\u2013 splitquery()\n\u2013 splittag()\n\u2013 splittype()\n\u2013 splituser()\n\u2013 splitvalue()\n\u2013 to_bytes()\n29\n\u2022 urllib.request: URLopenerandFancyURLopenerstyleofinvokingrequestsisdeprecated. Usenewer\nurlopen()functionsandmethods.\n\u2022 wsgiref: SimpleHandler.stdout.write()shouldnotdopartialwrites.\n\u2022 xml.etree.ElementTree: TestingthetruthvalueofanElementisdeprecated. Inafuturereleaseitwill\nalwaysreturnTrue. Preferexplicitlen(elem)orelem is not Nonetestsinstead.\n\u2022 zipimport.zipimporter.load_module()isdeprecated: useexec_module()instead.\n9 CPython Bytecode Changes\n\u2022 TheopargofYIELD_VALUEisnow1iftheyieldispartofayield-fromorawait,and0otherwise. Theoparg\nofRESUMEwaschangedtoaddabitindicatingiftheexcept-depthis1,whichisneededtooptimizeclosing\nofgenerators. (ContributedbyIritKatrielingh-111354.)\n10 C API Changes\n10.1 New Features\n\u2022 AddthePyMonitoringCAPIforgeneratingPEP669monitoringevents:\n\u2013 PyMonitoringState\n\u2013 PyMonitoring_FirePyStartEvent()\n\u2013 PyMonitoring_FirePyResumeEvent()\n\u2013 PyMonitoring_FirePyReturnEvent()\n\u2013 PyMonitoring_FirePyYieldEvent()\n\u2013 PyMonitoring_FireCallEvent()\n\u2013 PyMonitoring_FireLineEvent()\n\u2013 PyMonitoring_FireJumpEvent()\n\u2013 PyMonitoring_FireBranchEvent()\n\u2013 PyMonitoring_FireCReturnEvent()\n\u2013 PyMonitoring_FirePyThrowEvent()\n\u2013 PyMonitoring_FireRaiseEvent()\n\u2013 PyMonitoring_FireCRaiseEvent()\n\u2013 PyMonitoring_FireReraiseEvent()\n\u2013 PyMonitoring_FireExceptionHandledEvent()\n\u2013 PyMonitoring_FirePyUnwindEvent()\n\u2013 PyMonitoring_FireStopIterationEvent()\n\u2013 PyMonitoring_EnterScope()\n\u2013 PyMonitoring_ExitScope()\n(ContributedbyIritKatrielingh-111997).\n\u2022 Add PyMutex, a lightweight mutex that occupies a single byte, and the new PyMutex_Lock() and\nPyMutex_Unlock()functions. PyMutex_Lock()willreleasetheGIL(ifcurrentlyheld)iftheoperation\nneedstoblock. (ContributedbySamGrossingh-108724.)\n\u2022 AddthePyTimeCAPItoprovideaccesstosystemclocks:\n\u2013 PyTime_t.\n30\n\u2013 PyTime_MINandPyTime_MAX.\n\u2013 PyTime_AsSecondsDouble().\n\u2013 PyTime_Monotonic().\n\u2013 PyTime_MonotonicRaw().\n\u2013 PyTime_PerfCounter().\n\u2013 PyTime_PerfCounterRaw().\n\u2013 PyTime_Time().\n\u2013 PyTime_TimeRaw().\n(ContributedbyVictorStinnerandPetrViktoriningh-110850.)\n\u2022 AddthePyDict_ContainsString()functionwiththesamebehaviorasPyDict_Contains(),butkeyis\nspecifiedasaconst char*UTF-8encodedbytesstring,ratherthanaPyObject*. (ContributedbyVictor\nStinneringh-108314.)\n\u2022 AddthePyDict_GetItemRef()andPyDict_GetItemStringRef()functions, whichbehavesimilarly\ntoPyDict_GetItemWithError(),butreturnastrongreferenceinsteadofaborrowedreference. Moreover,\nthesefunctionsreturn-1onerror,removingtheneedtocheckPyErr_Occurred(). (ContributedbyVictor\nStinneringh-106004.)\n\u2022 Add the PyDict_SetDefaultRef() function, which behaves similarly to PyDict_SetDefault(), but\nreturnsastrongreferenceinsteadofaborrowedreference. Thisfunctionreturns-1onerror,0oninsertion,\nand1ifthekeywasalreadypresentinthedictionary. (ContributedbySamGrossingh-112066.)\n\u2022 AddthePyDict_Pop()andPyDict_PopString()functionstoremoveakeyfromadictionaryandoption-\nallyreturntheremovedvalue. Thisissimilartodict.pop(),thoughthereisnodefaultvalue,andKeyError\nisnotraisedformissingkeys. (ContributedbyStefanBehnelandVictorStinneringh-111262.)\n\u2022 AddthePyMapping_GetOptionalItem()andPyMapping_GetOptionalItemString()functionsas\nalternatives to PyObject_GetItem() and PyMapping_GetItemString() respectively. The new func-\ntions do not raise KeyError if the requested key is missing from the mapping. These variants are more\nconvenientandfasterifamissingkeyshouldnotbetreatedasafailure. (ContributedbySerhiyStorchakain\ngh-106307.)\n\u2022 AddthePyObject_GetOptionalAttr()andPyObject_GetOptionalAttrString()functionsasal-\nternatives to PyObject_GetAttr() and PyObject_GetAttrString() respectively. The new functions\ndonotraiseAttributeErroriftherequestedattributeisnotfoundontheobject. Thesevariantsaremore\nconvenientandfasterifthemissingattributeshouldnotbetreatedasafailure. (ContributedbySerhiyStor-\nchakaingh-106521.)\n\u2022 AddthePyErr_FormatUnraisable()functionasanextensiontoPyErr_WriteUnraisable()thatal-\nlowscustomizingthewarningmessage. (ContributedbySerhiyStorchakaingh-108082.)\n\u2022 Addnewfunctionsthatreturnastrongreferenceinsteadofaborrowedreferenceforframelocals,globals,and\nbuiltins,aspartofPEP667:\n\u2013 PyEval_GetFrameBuiltins()replacesPyEval_GetBuiltins()\n\u2013 PyEval_GetFrameGlobals()replacesPyEval_GetGlobals()\n\u2013 PyEval_GetFrameLocals()replacesPyEval_GetLocals()\n(ContributedbyMarkShannonandTianGaoingh-74929.)\n\u2022 AddthePy_GetConstant()andPy_GetConstantBorrowed()functionstogetstrongorborrowedref-\nerencestoconstants. Forexample,Py_GetConstant(Py_CONSTANT_ZERO)returnsastrongreferenceto\ntheconstantzero. (ContributedbyVictorStinneringh-115754.)\n\u2022 AddthePyImport_AddModuleRef()functionasareplacementforPyImport_AddModule()thatreturns\nastrongreferenceinsteadofaborrowedreference. (ContributedbyVictorStinneringh-105922.)\n\u2022 AddthePy_IsFinalizing()functiontocheckwhetherthemainPythoninterpreterisshuttingdown. (Con-\ntributedbyVictorStinneringh-108014.)\n31\n\u2022 AddthePyList_GetItemRef()functionasareplacementforPyList_GetItem()thatreturnsastrong\nreferenceinsteadofaborrowedreference. (ContributedbySamGrossingh-114329.)\n\u2022 AddthePyList_Extend()andPyList_Clear()functions,mirroringthePythonlist.extend()and\nlist.clear()methods. (ContributedbyVictorStinneringh-111138.)\n\u2022 AddthePyLong_AsInt()function. ItbehavessimilarlytoPyLong_AsLong(),butstorestheresultinaC\nintinsteadofaClong. (ContributedbyVictorStinneringh-108014.)\n\u2022 Add the PyLong_AsNativeBytes(), PyLong_FromNativeBytes(), and\nPyLong_FromUnsignedNativeBytes() functions to simplify converting between native integer\ntypesandPythonintobjects. (ContributedbySteveDoweringh-111140.)\n\u2022 Add PyModule_Add() function, which is similar to PyModule_AddObjectRef() and\nPyModule_AddObject(), but always steals a reference to the value. (Contributed by Serhiy Storchaka in\ngh-86493.)\n\u2022 AddthePyObject_GenericHash()functionthatimplementsthedefaulthashingfunctionofaPythonob-\nject. (ContributedbySerhiyStorchakaingh-113024.)\n\u2022 AddthePy_HashPointer()functiontohasharawpointer. (ContributedbyVictorStinneringh-111545.)\n\u2022 Add the PyObject_VisitManagedDict() and PyObject_ClearManagedDict() functions. which\nmust be called by the traverse and clear functions of a type using the Py_TPFLAGS_MANAGED_DICT flag.\nThepythoncapi-compatprojectcanbeusedtousethesefunctionswithPython3.11and3.12. (Contributed\nbyVictorStinneringh-107073.)\n\u2022 AddthePyRefTracer_SetTracer()andPyRefTracer_GetTracer()functions,whichenabletracking\nobjectcreationanddestructioninthesamewaythatthetracemallocmoduledoes. (ContributedbyPablo\nGalindoingh-93502.)\n\u2022 AddthePySys_AuditTuple()functionasanalternativetoPySys_Audit()thattakeseventargumentsas\naPythontupleobject. (ContributedbyVictorStinneringh-85283.)\n\u2022 Add the PyThreadState_GetUnchecked() function as an alternative to PyThreadState_Get() that\ndoesn\u2019t kill the process with a fatal error if it is NULL. The caller is responsible for checking if the result is\nNULL.(ContributedbyVictorStinneringh-108867.)\n\u2022 AddthePyType_GetFullyQualifiedName()functiontogetthetype\u2019sfullyqualifiedname. Themodule\nnameisprependediftype.__module__isastringandisnotequaltoeither'builtins'or'__main__'.\n(ContributedbyVictorStinneringh-111696.)\n\u2022 AddthePyType_GetModuleName()functiontogetthetype\u2019smodulename. Thisisequivalenttogetting\nthetype.__module__attribute. (ContributedbyEricSnowandVictorStinneringh-111696.)\n\u2022 AddthePyUnicode_EqualToUTF8AndSize()andPyUnicode_EqualToUTF8()functionstocompare\naUnicodeobjectwithaconst char*UTF-8encodedstringand1iftheyareequalor0otherwise. These\nfunctionsdonotraiseexceptions. (ContributedbySerhiyStorchakaingh-110289.)\n\u2022 Add the PyWeakref_GetRef() function as an alternative to PyWeakref_GetObject() that returns a\nstrongreferenceorNULLifthereferentisnolongerlive. (ContributedbyVictorStinneringh-105927.)\n\u2022 Addfixedvariantsoffunctionswhichsilentlyignoreerrors:\n\u2013 PyObject_HasAttrWithError()replacesPyObject_HasAttr().\n\u2013 PyObject_HasAttrStringWithError()replacesPyObject_HasAttrString().\n\u2013 PyMapping_HasKeyWithError()replacesPyMapping_HasKey().\n\u2013 PyMapping_HasKeyStringWithError()replacesPyMapping_HasKeyString().\nThenewfunctionsreturn-1forerrorsandthestandard1fortrueand0forfalse.\n(ContributedbySerhiyStorchakaingh-108511.)\n32\n10.2 Changed C APIs\n\u2022 The keywords parameter of PyArg_ParseTupleAndKeywords() and\nPyArg_VaParseTupleAndKeywords()nowhastypechar *const*inCandconst char *const*\nin C++, instead of char**. In C++, this makes these functions compatible with arguments of type const\nchar *const*, const char**, or char *const* without an explicit type cast. In C, the functions\nonly support arguments of type char *const*. This can be overridden with the PY_CXX_CONST macro.\n(ContributedbySerhiyStorchakaingh-65210.)\n\u2022 PyArg_ParseTupleAndKeywords()nowsupportsnon-ASCIIkeywordparameternames. (Contributedby\nSerhiyStorchakaingh-110815.)\n\u2022 The PyCode_GetFirstFree() function is now unstable API and is now named\nPyUnstable_Code_GetFirstFree(). (ContributedbyBogdanRomanyukingh-115781.)\n\u2022 The PyDict_GetItem(), PyDict_GetItemString(), PyMapping_HasKey(),\nPyMapping_HasKeyString(), PyObject_HasAttr(), PyObject_HasAttrString(), and\nPySys_GetObject() functions, each of which clears all errors which occurred when calling them\nnow reports these errors using sys.unraisablehook(). You may replace them with other functions as\nrecommendedinthedocumentation. (ContributedbySerhiyStorchakaingh-106672.)\n\u2022 Addsupportforthe%T,%#T,%Nand%#NformatstoPyUnicode_FromFormat():\n\u2013 %T:Getthefullyqualifiednameofanobjecttype\n\u2013 %#T:Asabove,butuseacolonastheseparator\n\u2013 %N:Getthefullyqualifiednameofatype\n\u2013 %#N:Asabove,butuseacolonastheseparator\nSeePEP737formoreinformation. (ContributedbyVictorStinneringh-111696.)\n\u2022 YounolongerhavetodefinethePY_SSIZE_T_CLEANmacrobeforeincludingPython.hwhenusing#for-\nmatsinformatcodes. APIsacceptingtheformatcodesalwaysusePy_ssize_tfor#formats. (Contributed\nbyInadaNaokiingh-104922.)\n\u2022 IfPythonisbuiltindebugmodeorwith assertions,PyTuple_SET_ITEM()andPyList_SET_ITEM()\nnowchecktheindexargumentwithanassertion. (ContributedbyVictorStinneringh-106168.)\n10.3 Limited C API Changes\n\u2022 ThefollowingfunctionsarenowincludedintheLimitedCAPI:\n\u2013 PyMem_RawMalloc()\n\u2013 PyMem_RawCalloc()\n\u2013 PyMem_RawRealloc()\n\u2013 PyMem_RawFree()\n\u2013 PySys_Audit()\n\u2013 PySys_AuditTuple()\n\u2013 PyType_GetModuleByDef()\n(ContributedbyVictorStinneringh-85283,gh-85283,andgh-116936.)\n\u2022 Pythonbuiltwith--with-trace-refs(tracingreferences)nowsupportstheLimitedAPI.(Contributedby\nVictorStinneringh-108634.)\n10.4 Removed C APIs\n\u2022 Removeseveralfunctions, macros, variables, etcwithnamesprefixedby_Py or _PY (whichareconsidered\nprivate). If your project is affected by one of these removals and you believe that the removed API should\nremainavailable,pleaseopenanewissuetorequestapublicCAPIandaddcc: @vstinnertotheissueto\nnotifyVictorStinner. (ContributedbyVictorStinneringh-106320.)\n33\n\u2022 RemoveoldbufferprotocolsdeprecatedinPython3.0. Usebufferobjectsinstead.\n\u2013 PyObject_CheckReadBuffer(): Use PyObject_CheckBuffer() to test whether the ob-\nject supports the buffer protocol. Note that PyObject_CheckBuffer() doesn\u2019t guarantee that\nPyObject_GetBuffer()willsucceed. Totestiftheobjectisactuallyreadable,seethenextexample\nofPyObject_GetBuffer().\n\u2013 PyObject_AsCharBuffer(), PyObject_AsReadBuffer(): Use PyObject_GetBuffer() and\nPyBuffer_Release()instead:\nPy_buffer view;\nif (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) {\nreturn NULL;\n}\n// Use `view.buf` and `view.len` to read from the buffer.\n// You may need to cast buf as `(const char*)view.buf`.\nPyBuffer_Release(&view);\n\u2013 PyObject_AsWriteBuffer(): Use PyObject_GetBuffer() and PyBuffer_Release() in-\nstead:\nPy_buffer view;\nif (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) {\nreturn NULL;\n}\n// Use `view.buf` and `view.len` to write to the buffer.\nPyBuffer_Release(&view);\n(ContributedbyInadaNaokiingh-85275.)\n\u2022 RemovevariousfunctionsdeprecatedinPython3.9:\n\u2013 PyEval_CallObject(), PyEval_CallObjectWithKeywords(): Use\nPyObject_CallNoArgs()orPyObject_Call()instead.\n(cid:193) Warning\nIn PyObject_Call(), positional arguments must be a tuple and must not be NULL, and\nkeyword arguments must be a dict or NULL, whereas the removed functions checked\nargument types and accepted NULL positional and keyword arguments. To replace\nPyEval_CallObjectWithKeywords(func, NULL, kwargs) with PyObject_Call(),\npassanemptytupleaspositionalargumentsusingPyTuple_New(0).\n\u2013 PyEval_CallFunction(): UsePyObject_CallFunction()instead.\n\u2013 PyEval_CallMethod(): UsePyObject_CallMethod()instead.\n\u2013 PyCFunction_Call(): UsePyObject_Call()instead.\n(ContributedbyVictorStinneringh-105107.)\n\u2022 RemovethefollowingoldfunctionstoconfigurethePythoninitialization,deprecatedinPython3.11:\n\u2013 PySys_AddWarnOptionUnicode(): UsePyConfig.warnoptionsinstead.\n\u2013 PySys_AddWarnOption(): UsePyConfig.warnoptionsinstead.\n\u2013 PySys_AddXOption(): UsePyConfig.xoptionsinstead.\n\u2013 PySys_HasWarnOptions(): UsePyConfig.xoptionsinstead.\n\u2013 PySys_SetPath(): SetPyConfig.module_search_pathsinstead.\n\u2013 Py_SetPath(): SetPyConfig.module_search_pathsinstead.\n34\n\u2013 Py_SetStandardStreamEncoding(): Set PyConfig.stdio_encoding instead, and set also\nmaybePyConfig.legacy_windows_stdio(onWindows).\n\u2013 _Py_SetProgramFullPath(): SetPyConfig.executableinstead.\nUsethenewPyConfigAPIofthePythonInitializationConfigurationinstead(PEP587),addedtoPython\n3.8. (ContributedbyVictorStinneringh-105145.)\n\u2022 Remove PyEval_AcquireLock() and PyEval_ReleaseLock() functions, deprecated in Python 3.2.\nTheydidn\u2019tupdatethecurrentthreadstate. Theycanbereplacedwith:\n\u2013 PyEval_SaveThread()andPyEval_RestoreThread();\n\u2013 low-levelPyEval_AcquireThread()andPyEval_RestoreThread();\n\u2013 orPyGILState_Ensure()andPyGILState_Release().\n(ContributedbyVictorStinneringh-105182.)\n\u2022 Remove the PyEval_ThreadsInitialized() function, deprecated in Python 3.9. Since Python\n3.7, Py_Initialize() always creates the GIL: calling PyEval_InitThreads() does nothing and\nPyEval_ThreadsInitialized()alwaysreturnsnon-zero. (ContributedbyVictorStinneringh-105182.)\n\u2022 Remove the _PyInterpreterState_Get() alias to PyInterpreterState_Get() which was kept\nfor backward compatibility with Python 3.8. The pythoncapi-compat project can be used to get\nPyInterpreterState_Get()onPython3.8andolder. (ContributedbyVictorStinneringh-106320.)\n\u2022 Removetheprivate_PyObject_FastCall()function: usePyObject_Vectorcall()whichisavailable\nsincePython3.8(PEP590). (ContributedbyVictorStinneringh-106023.)\n\u2022 Removethecpython/pytime.hheaderfile,whichonlycontainedprivatefunctions. (ContributedbyVictor\nStinneringh-106316.)\n\u2022 RemovetheundocumentedPY_TIMEOUT_MAXconstantfromthelimitedCAPI.(ContributedbyVictorStin-\nneringh-110014.)\n\u2022 RemovetheoldtrashcanmacrosPy_TRASHCAN_SAFE_BEGINandPy_TRASHCAN_SAFE_END.Replaceboth\nwith the new macros Py_TRASHCAN_BEGIN and Py_TRASHCAN_END. (Contributed by Irit Katriel in gh-\n105111.)\n10.5 Deprecated C APIs\n\u2022 DeprecateoldPythoninitializationfunctions:\n\u2013 PySys_ResetWarnOptions(): Clearsys.warnoptionsandwarnings.filtersinstead.\n\u2013 Py_GetExecPrefix(): Getsys.exec_prefixinstead.\n\u2013 Py_GetPath(): Getsys.pathinstead.\n\u2013 Py_GetPrefix(): Getsys.prefixinstead.\n\u2013 Py_GetProgramFullPath(): Getsys.executableinstead.\n\u2013 Py_GetProgramName(): Getsys.executableinstead.\n\u2013 Py_GetPythonHome(): GetPyConfig.homeorthePYTHONHOMEenvironmentvariableinstead.\n(ContributedbyVictorStinneringh-105145.)\n\u2022 SoftdeprecatethePyEval_GetBuiltins(),PyEval_GetGlobals(),andPyEval_GetLocals()func-\ntions,whichreturnaborrowedreference. (SoftdeprecatedaspartofPEP667.)\n\u2022 Deprecate the PyImport_ImportModuleNoBlock() function, which is just an alias to\nPyImport_ImportModule()sincePython3.3. (ContributedbyVictorStinneringh-105396.)\n\u2022 Soft deprecate the PyModule_AddObject() function. It should be replaced with PyModule_Add() or\nPyModule_AddObjectRef(). (ContributedbySerhiyStorchakaingh-86493.)\n35\n\u2022 DeprecatetheoldPy_UNICODEandPY_UNICODE_TYPEtypesandthePy_UNICODE_WIDEdefine. Usethe\nwchar_ttypedirectlyinstead. SincePython3.3, Py_UNICODEandPY_UNICODE_TYPEarejustaliasesto\nwchar_t. (ContributedbyVictorStinneringh-105156.)\n\u2022 DeprecatethePyWeakref_GetObject()andPyWeakref_GET_OBJECT()functions,whichreturnabor-\nrowedreference. ReplacethemwiththenewPyWeakref_GetRef()function,whichreturnsastrongrefer-\nence. Thepythoncapi-compatprojectcanbeusedtogetPyWeakref_GetRef()onPython3.12andolder.\n(ContributedbyVictorStinneringh-105927.)\nPendingRemovalinPython3.14\n\u2022 Thema_version_tagfieldinPyDictObjectforextensionmodules(PEP699;gh-101193).\n\u2022 Creatingimmutable typeswithmutablebases(gh-95388).\n\u2022 FunctionstoconfigurePython\u2019sinitialization,deprecatedinPython3.11:\n\u2013 PySys_SetArgvEx(): SetPyConfig.argvinstead.\n\u2013 PySys_SetArgv(): SetPyConfig.argvinstead.\n\u2013 Py_SetProgramName(): SetPyConfig.program_nameinstead.\n\u2013 Py_SetPythonHome(): SetPyConfig.homeinstead.\nThePy_InitializeFromConfig()APIshouldbeusedwithPyConfiginstead.\n\u2022 Globalconfigurationvariables:\n\u2013 Py_DebugFlag: UsePyConfig.parser_debuginstead.\n\u2013 Py_VerboseFlag: UsePyConfig.verboseinstead.\n\u2013 Py_QuietFlag: UsePyConfig.quietinstead.\n\u2013 Py_InteractiveFlag: UsePyConfig.interactiveinstead.\n\u2013 Py_InspectFlag: UsePyConfig.inspectinstead.\n\u2013 Py_OptimizeFlag: UsePyConfig.optimization_levelinstead.\n\u2013 Py_NoSiteFlag: UsePyConfig.site_importinstead.\n\u2013 Py_BytesWarningFlag: UsePyConfig.bytes_warninginstead.\n\u2013 Py_FrozenFlag: UsePyConfig.pathconfig_warningsinstead.\n\u2013 Py_IgnoreEnvironmentFlag: UsePyConfig.use_environmentinstead.\n\u2013 Py_DontWriteBytecodeFlag: UsePyConfig.write_bytecodeinstead.\n\u2013 Py_NoUserSiteDirectory: UsePyConfig.user_site_directoryinstead.\n\u2013 Py_UnbufferedStdioFlag: UsePyConfig.buffered_stdioinstead.\n\u2013 Py_HashRandomizationFlag: Use PyConfig.use_hash_seed and PyConfig.hash_seed in-\nstead.\n\u2013 Py_IsolatedFlag: UsePyConfig.isolatedinstead.\n\u2013 Py_LegacyWindowsFSEncodingFlag: UsePyPreConfig.legacy_windows_fs_encodingin-\nstead.\n\u2013 Py_LegacyWindowsStdioFlag: UsePyConfig.legacy_windows_stdioinstead.\n\u2013 Py_FileSystemDefaultEncoding: UsePyConfig.filesystem_encodinginstead.\n\u2013 Py_HasFileSystemDefaultEncoding: UsePyConfig.filesystem_encodinginstead.\n\u2013 Py_FileSystemDefaultEncodeErrors: UsePyConfig.filesystem_errorsinstead.\n\u2013 Py_UTF8Mode: UsePyPreConfig.utf8_modeinstead. (seePy_PreInitialize())\nThePy_InitializeFromConfig()APIshouldbeusedwithPyConfiginstead.\n36\nPendingRemovalinPython3.15\n\u2022 Thebundledcopyoflibmpdecimal.\n\u2022 ThePyImport_ImportModuleNoBlock(): UsePyImport_ImportModule()instead.\n\u2022 PyWeakref_GetObject()andPyWeakref_GET_OBJECT(): UsePyWeakref_GetRef()instead.\n\u2022 Py_UNICODEtypeandthePy_UNICODE_WIDEmacro: Usewchar_tinstead.\n\u2022 Pythoninitializationfunctions:\n\u2013 PySys_ResetWarnOptions(): Clearsys.warnoptionsandwarnings.filtersinstead.\n\u2013 Py_GetExecPrefix(): Getsys.base_exec_prefixandsys.exec_prefixinstead.\n\u2013 Py_GetPath(): Getsys.pathinstead.\n\u2013 Py_GetPrefix(): Getsys.base_prefixandsys.prefixinstead.\n\u2013 Py_GetProgramFullPath(): Getsys.executableinstead.\n\u2013 Py_GetProgramName(): Getsys.executableinstead.\n\u2013 Py_GetPythonHome(): GetPyConfig.homeorthePYTHONHOMEenvironmentvariableinstead.\nPendingRemovalinFutureVersions\nThe following APIs are deprecated and will be removed, although there is currently no date scheduled for their\nremoval.\n\u2022 Py_TPFLAGS_HAVE_FINALIZE:UnneededsincePython3.8.\n\u2022 PyErr_Fetch(): UsePyErr_GetRaisedException()instead.\n\u2022 PyErr_NormalizeException(): UsePyErr_GetRaisedException()instead.\n\u2022 PyErr_Restore(): UsePyErr_SetRaisedException()instead.\n\u2022 PyModule_GetFilename(): UsePyModule_GetFilenameObject()instead.\n\u2022 PyOS_AfterFork(): UsePyOS_AfterFork_Child()instead.\n\u2022 PySlice_GetIndicesEx(): UsePySlice_Unpack()andPySlice_AdjustIndices()instead.\n\u2022 PyUnicode_AsDecodedObject(): UsePyCodec_Decode()instead.\n\u2022 PyUnicode_AsDecodedUnicode(): UsePyCodec_Decode()instead.\n\u2022 PyUnicode_AsEncodedObject(): UsePyCodec_Encode()instead.\n\u2022 PyUnicode_AsEncodedUnicode(): UsePyCodec_Encode()instead.\n\u2022 PyUnicode_READY(): UnneededsincePython3.12\n\u2022 PyErr_Display(): UsePyErr_DisplayException()instead.\n\u2022 _PyErr_ChainExceptions(): Use_PyErr_ChainExceptions1()instead.\n\u2022 PyBytesObject.ob_shashmember: callPyObject_Hash()instead.\n\u2022 PyDictObject.ma_version_tagmember.\n\u2022 ThreadLocalStorage(TLS)API:\n\u2013 PyThread_create_key(): UsePyThread_tss_alloc()instead.\n\u2013 PyThread_delete_key(): UsePyThread_tss_free()instead.\n\u2013 PyThread_set_key_value(): UsePyThread_tss_set()instead.\n\u2013 PyThread_get_key_value(): UsePyThread_tss_get()instead.\n\u2013 PyThread_delete_key_value(): UsePyThread_tss_delete()instead.\n\u2013 PyThread_ReInitTLS(): UnneededsincePython3.7.\n37\n11 Build Changes\n\u2022 arm64-apple-iosandarm64-apple-ios-simulatorarebothnowPEP11tier3platforms. (PEP730\nwrittenandimplementationcontributedbyRussellKeith-Mageeingh-114099.)\n\u2022 aarch64-linux-android and x86_64-linux-android are both now PEP 11 tier 3 platforms. (PEP\n738writtenandimplementationcontributedbyMalcolmSmithingh-116622.)\n\u2022 wasm32-wasiisnowaPEP11tier2platform. (ContributedbyBrettCannoningh-115192.)\n\u2022 wasm32-emscripten is no longer a PEP 11 supported platform. (Contributed by Brett Cannon in gh-\n115192.)\n\u2022 Building CPython now requires a compiler with support for the C11 atomic library, GCC built-in atomic\nfunctions,orMSVCinterlockedintrinsics.\n\u2022 Autoconf 2.71 and aclocal 1.16.5 are now required to regenerate the configure script. (Contributed by\nChristianHeimesingh-89886andbyVictorStinneringh-112090.)\n\u2022 SQLite3.15.2ornewerisrequiredtobuildthesqlite3extensionmodule. (ContributedbyErlendAasland\ningh-105875.)\n\u2022 CPython now bundles the mimalloc library by default. It is licensed under the MIT license; see mimalloc\nlicense. Thebundledmimallochascustomchanges,seegh-113141fordetails. (ContributedbyDinoViehland\ningh-109914.)\n\u2022 The configure option --with-system-libmpdec now defaults to yes. The bundled copy of\nlibmpdecimalwillberemovedinPython3.15.\n\u2022 Python built with configure --with-trace-refs (tracing references) is now ABI compatible with the\nPythonreleasebuildanddebugbuild. (ContributedbyVictorStinneringh-108634.)\n\u2022 OnPOSIXsystems,thepkg-config(.pc)filenamesnowincludetheABIflags. Forexample,thefree-threaded\nbuildgeneratespython-3.13t.pcandthedebugbuildgeneratespython-3.13d.pc.\n\u2022 The errno, fcntl, grp, md5, pwd, resource, termios, winsound, _ctypes_test,\n_multiprocessing.posixshmem, _scproxy, _stat, _statistics, _testconsole,\n_testimportmultiple and _uuid C extensions are now built with the limited C API. (Contributed\nbyVictorStinneringh-85283.)\n12 Porting to Python 3.13\nThissectionlistspreviouslydescribedchangesandotherbugfixesthatmayrequirechangestoyourcode.\n12.1 Changes in the Python API\n\u2022 PEP667introducesseveralchangestothesemanticsoflocals()andf_locals:\n\u2013 Callinglocals()inanoptimizedscopenowproducesanindependentsnapshotoneachcall,andhence\nnolongerimplicitlyupdatespreviouslyreturnedreferences. ObtainingthelegacyCPythonbehaviornow\nrequires explicit calls to update the initially returned dictionary with the results of subsequent calls to\nlocals(). Codeexecutionfunctionsthatimplicitlytargetlocals()(suchasexecandeval)must\nbepassedanexplicitnamespacetoaccesstheirresultsinanoptimizedscope. (ChangedaspartofPEP\n667.)\n\u2013 Callinglocals()fromacomprehensionatmoduleorclassscope(includingviaexecoreval)once\nmore behaves as if the comprehension were running as an independent nested function (i.e. the local\nvariablesfromthecontainingscopearenotincluded). InPython3.12,thishadchangedtoincludethe\nlocalvariablesfromthecontainingscopewhenimplementingPEP709. (ChangedaspartofPEP667.)\n\u2013 AccessingFrameType.f_localsinanoptimizedscopenowreturnsawrite-throughproxyratherthan\nasnapshotthatgetsupdatedatill-specifiedtimes. Ifasnapshotisdesired,itmustbecreatedexplicitly\nwithdictortheproxy\u2019s.copy()method. (ChangedaspartofPEP667.)\n38\n\u2022 functools.partialnowemitsaFutureWarningwhenusedasamethod. Thebehaviorwillchangein\nfuturePythonversions. Wrapitinstaticmethod()ifyouwanttopreservetheoldbehavior. (Contributed\nbySerhiyStorchakaingh-121027.)\n\u2022 An OSError is now raised by getpass.getuser() for any failure to retrieve a username, instead of\nImportErroronnon-UnixplatformsorKeyErroronUnixplatformswherethepassworddatabaseisempty.\n\u2022 Thevalueofthemodeattributeofgzip.GzipFileisnowastring('rb'or'wb')insteadofaninteger(1or\n2). Thevalueofthemodeattributeofthereadablefile-likeobjectreturnedbyzipfile.ZipFile.open()\nisnow'rb'insteadof'r'. (ContributedbySerhiyStorchakaingh-115961.)\n\u2022 mailbox.Maildirnowignoresfileswithaleadingdot(.). (ContributedbyZackerySpytzingh-65559.)\n\u2022 pathlib.Path.glob()andrglob()nowreturnbothfilesanddirectoriesifapatternthatendswith\u201c**\u201dis\ngiven,ratherthandirectoriesonly. Addatrailingslashtokeepthepreviousbehaviorandonlymatchdirectories.\n\u2022 Thethreadingmodulenowexpectsthe_threadmoduletohavean_is_main_interpreter()function.\nThisfunctiontakesnoargumentsandreturnsTrueifthecurrentinterpreteristhemaininterpreter.\nAny library or application that provides a custom _thread module must provide\n_is_main_interpreter(),justlikethemodule\u2019sother\u201cprivate\u201dattributes. (gh-112826.)\n12.2 Changes in the C API\n\u2022 Python.hnolongerincludesthe<ieeefp.h>standardheader. Itwasincludedforthefinite()function\nwhichisnowprovidedbythe<math.h>header. Itshouldnowbeincludedexplicitlyifneeded. Removealso\ntheHAVE_IEEEFP_Hmacro. (ContributedbyVictorStinneringh-108765.)\n\u2022 Python.hnolongerincludesthesestandardheaderfiles: <time.h>,<sys/select.h>and<sys/time.\nh>. Ifneeded, theyshouldnowbeincludedexplicitly. Forexample, <time.h>providestheclock()and\ngmtime()functions,<sys/select.h>providestheselect()function,and<sys/time.h>providesthe\nfutimes(),gettimeofday()andsetitimer()functions. (ContributedbyVictorStinneringh-108765.)\n\u2022 OnWindows,Python.hnolongerincludesthe<stddef.h>standardheaderfile. Ifneeded,itshouldnow\nbeincludedexplicitly. Forexample,itprovidesoffsetof()function,andsize_tandptrdiff_ttypes.\nIncluding<stddef.h>explicitlywasalreadyneededbyallotherplatforms,theHAVE_STDDEF_Hmacrois\nonlydefinedonWindows. (ContributedbyVictorStinneringh-108765.)\n\u2022 If the Py_LIMITED_API macro is defined, Py_BUILD_CORE, Py_BUILD_CORE_BUILTIN and\nPy_BUILD_CORE_MODULE macros are now undefined by <Python.h>. (Contributed by Victor Stin-\nneringh-85283.)\n\u2022 TheoldtrashcanmacrosPy_TRASHCAN_SAFE_BEGINandPy_TRASHCAN_SAFE_ENDwereremoved. They\nshouldbereplacedbythenewmacrosPy_TRASHCAN_BEGINandPy_TRASHCAN_END.\nAtp_deallocfunctionthathastheoldmacros,suchas:\nstatic void\nmytype_dealloc(mytype *p)\n{\nPyObject_GC_UnTrack(p);\nPy_TRASHCAN_SAFE_BEGIN(p);\n...\nPy_TRASHCAN_SAFE_END\n}\nshouldmigratetothenewmacrosasfollows:\nstatic void\nmytype_dealloc(mytype *p)\n{\nPyObject_GC_UnTrack(p);\nPy_TRASHCAN_BEGIN(p, mytype_dealloc)\n(continuesonnextpage)\n39\n(continuedfrompreviouspage)\n...\nPy_TRASHCAN_END\n}\nNote that Py_TRASHCAN_BEGIN has a second argument which should be the deallocation function it is in.\nThenewmacroswereaddedinPython3.8andtheoldmacrosweredeprecatedinPython3.11. (Contributed\nbyIritKatrielingh-105111.)\n\u2022 PEP667introducesseveralchangestoframe-relatedfunctions:\n\u2013 TheeffectsofmutatingthedictionaryreturnedfromPyEval_GetLocals()inanoptimizedscopehave\nchanged. NewdictentriesaddedthiswaywillnowonlybevisibletosubsequentPyEval_GetLocals()\ncalls in that frame, as PyFrame_GetLocals(), locals(), and FrameType.f_locals no longer\naccess the same underlying cached dictionary. Changes made to entries for actual variable names\nand names added via the write-through proxy interfaces will be overwritten on subsequent calls to\nPyEval_GetLocals() in that frame. The recommended code update depends on how the function\nwasbeingused,sorefertothedeprecationnoticeonthefunctionfordetails.\n\u2013 CallingPyFrame_GetLocals()inanoptimizedscopenowreturnsawrite-throughproxyratherthan\nasnapshotthatgetsupdatedatill-specifiedtimes. Ifasnapshotisdesired,itmustbecreatedexplicitly\n(e.g. withPyDict_Copy()),orbycallingthenewPyEval_GetFrameLocals()API.\n\u2013 PyFrame_FastToLocals()andPyFrame_FastToLocalsWithError()nolongerhaveanyeffect.\nCallingthesefunctionshasbeenredundantsincePython3.11,whenPyFrame_GetLocals()wasfirst\nintroduced.\n\u2013 PyFrame_LocalsToFast() no longer has any effect. Calling this function is redundant now that\nPyFrame_GetLocals()returnsawrite-throughproxyforoptimizedscopes.\n\u2022 Python3.13removedmanyprivatefunctions. Someofthemcanbereplacedusingthesealternatives:\n\u2013 _PyDict_Pop(): PyDict_Pop()orPyDict_PopString();\n\u2013 _PyDict_GetItemWithError(): PyDict_GetItemRef();\n\u2013 _PyErr_WriteUnraisableMsg(): PyErr_FormatUnraisable();\n\u2013 _PyEval_SetTrace(): PyEval_SetTrace()orPyEval_SetTraceAllThreads();\n\u2013 _PyList_Extend(): PyList_Extend();\n\u2013 _PyLong_AsInt(): PyLong_AsInt();\n\u2013 _PyMem_RawStrdup(): strdup();\n\u2013 _PyMem_Strdup(): strdup();\n\u2013 _PyObject_ClearManagedDict(): PyObject_ClearManagedDict();\n\u2013 _PyObject_VisitManagedDict(): PyObject_VisitManagedDict();\n\u2013 _PyThreadState_UncheckedGet(): PyThreadState_GetUnchecked();\n\u2013 _PyTime_AsSecondsDouble(): PyTime_AsSecondsDouble();\n\u2013 _PyTime_GetMonotonicClock(): PyTime_Monotonic()orPyTime_MonotonicRaw();\n\u2013 _PyTime_GetPerfCounter(): PyTime_PerfCounter()orPyTime_PerfCounterRaw();\n\u2013 _PyTime_GetSystemClock(): PyTime_Time()orPyTime_TimeRaw();\n\u2013 _PyTime_MAX:PyTime_MAX;\n\u2013 _PyTime_MIN:PyTime_MIN;\n\u2013 _PyTime_t: PyTime_t;\n\u2013 _Py_HashPointer(): Py_HashPointer();\n\u2013 _Py_IsFinalizing(): Py_IsFinalizing().\n40\nThepythoncapi-compatprojectcanbeusedtogetmostofthesenewfunctionsonPython3.12andolder.\n13 Regression Test Changes\n\u2022 Python built with configure --with-pydebug now supports a -X presite=package.module\ncommand-line option. If used, it specifies a module that should be imported early in the lifecycle of the\ninterpreter,beforesite.pyisexecuted. (Contributedby\u0141ukaszLangaingh-110769.)\n14 Notable changes in 3.13.1\n14.1 sys\n\u2022 Thepreviouslyundocumentedspecialfunctionsys.getobjects(),whichonlyexistsinspecializedbuilds\nofPython,maynowreturnobjectsfromotherinterpretersthantheoneit\u2019scalledin.\n41\nIndex\nC\nCommon Vulnerabilities and Exposures\nCVE 2023-27043,13\nCVE 2023-52425,18\nCVE 2024-4030,14,17\nE\nenvironment variable\nPYTHON_BASIC_REPL,5\nPYTHON_COLORS,4,5,12\nPYTHON_CPU_COUNT,14\nPYTHON_FROZEN_MODULES,9\nPYTHON_GIL,6\nPYTHON_HISTORY,9\nPYTHON_PERF_JIT_SUPPORT,9\nPYTHONHOME,35,37\nPYTHONLEGACYWINDOWSFSENCODING,24,27\nP\nPython Enhancement Proposals\nPEP 11,8,38\nPEP 11#tier-2,4\nPEP 11#tier-3,4\nPEP 587,35\nPEP 590,35\nPEP 594,3,19\nPEP 602,5\nPEP 626,27\nPEP 667,3,8,35,38\nPEP 669,4,30\nPEP 696,4\nPEP 699,36\nPEP 702,4,18\nPEP 703,3,7\nPEP 705,4,18\nPEP 709,38\nPEP 719,3\nPEP 730,4,8\nPEP 737,33\nPEP 738,4,8\nPEP 742,4,18\nPEP 744,3,4,7\nPYTHON_BASIC_REPL,5\nPYTHON_COLORS,4,5,12\nPYTHON_CPU_COUNT,14\nPYTHON_FROZEN_MODULES,9\nPYTHON_GIL,6\nPYTHON_HISTORY,9\nPYTHON_PERF_JIT_SUPPORT,9\nPYTHONHOME,35,37\nPYTHONLEGACYWINDOWSFSENCODING,24,27\nR\nRFC\nRFC 5280,16\n42\n",
  "context": "2.2 Improvederrormessages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n2.3 Free-threadedCPython . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.4 Anexperimentaljust-in-time(JIT)compiler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7",
  "source_file": "resources\\Year 3\\Python\\whatsnew.pdf",
  "line_numbers": [
    14,
    1803
  ]
}