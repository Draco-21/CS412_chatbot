{
  "title": "faq",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "2.2.4 HowdoIshareglobalvariablesacrossmodules?",
  "code": "2.2.7 HowcanIpassoptionalorkeywordparametersfromonefunctiontoanother? . . . . . . 12\n2.2.8 Whatisthedifferencebetweenargumentsandparameters? . . . . . . . . . . . . . . . . 12\n2.2.9 Whydidchanginglist\u2018y\u2019alsochangelist\u2018x\u2019? . . . . . . . . . . . . . . . . . . . . . . . . 12\n2.2.10 HowdoIwriteafunctionwithoutputparameters(callbyreference)? . . . . . . . . . . . 13\ni\n2.2.11 HowdoyoumakeahigherorderfunctioninPython? . . . . . . . . . . . . . . . . . . . 14\n2.2.12 HowdoIcopyanobjectinPython?. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n2.2.13 HowcanIfindthemethodsorattributesofanobject? . . . . . . . . . . . . . . . . . . . 15\n2.2.14 Howcanmycodediscoverthenameofanobject? . . . . . . . . . . . . . . . . . . . . . 16\n2.2.15 What\u2019supwiththecommaoperator\u2019sprecedence? . . . . . . . . . . . . . . . . . . . . . 16\n2.2.16 IsthereanequivalentofC\u2019s\u201c?:\u201d ternaryoperator? . . . . . . . . . . . . . . . . . . . . . 16\n2.2.17 Isitpossibletowriteobfuscatedone-linersinPython? . . . . . . . . . . . . . . . . . . . 17\n2.2.18 Whatdoestheslash(/)intheparameterlistofafunctionmean? . . . . . . . . . . . . . . 17\n2.3 Numbersandstrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n2.3.1 HowdoIspecifyhexadecimalandoctalintegers? . . . . . . . . . . . . . . . . . . . . . 18\n2.3.2 Whydoes-22//10return-3? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n2.3.3 HowdoIgetintliteralattributeinsteadofSyntaxError? . . . . . . . . . . . . . . . . . . 18\n2.3.4 HowdoIconvertastringtoanumber? . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n2.3.5 HowdoIconvertanumbertoastring? . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n2.3.6 HowdoImodifyastringinplace? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n2.3.7 HowdoIusestringstocallfunctions/methods?. . . . . . . . . . . . . . . . . . . . . . . 19\n2.3.8 IsthereanequivalenttoPerl\u2019schomp()forremovingtrailingnewlinesfromstrings? . . . 20\n2.3.9 Isthereascanf()orsscanf()equivalent? . . . . . . . . . . . . . . . . . . . . . . . 20\n2.3.10 WhatdoesUnicodeDecodeErrororUnicodeEncodeErrorerrormean? . . . . . . . 21\n2.3.11 CanIendarawstringwithanoddnumberofbackslashes? . . . . . . . . . . . . . . . . 21\n2.4 Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n2.4.1 Myprogramistooslow. HowdoIspeeditup? . . . . . . . . . . . . . . . . . . . . . . . 21\n2.4.2 Whatisthemostefficientwaytoconcatenatemanystringstogether?. . . . . . . . . . . . 22\n2.5 Sequences(Tuples/Lists) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\n2.5.1 HowdoIconvertbetweentuplesandlists? . . . . . . . . . . . . . . . . . . . . . . . . . 22\n2.5.2 What\u2019sanegativeindex? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n2.5.3 HowdoIiterateoverasequenceinreverseorder? . . . . . . . . . . . . . . . . . . . . . 23\n2.5.4 Howdoyouremoveduplicatesfromalist? . . . . . . . . . . . . . . . . . . . . . . . . . 23\n2.5.5 Howdoyouremovemultipleitemsfromalist . . . . . . . . . . . . . . . . . . . . . . . 23\n2.5.6 HowdoyoumakeanarrayinPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n2.5.7 HowdoIcreateamultidimensionallist? . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n2.5.8 HowdoIapplyamethodorfunctiontoasequenceofobjects?. . . . . . . . . . . . . . . 24\n2.5.9 Whydoesa_tuple[i]+=[\u2018item\u2019]raiseanexceptionwhentheadditionworks? . . . . . . . 25\n2.5.10 Iwanttodoacomplicatedsort: canyoudoaSchwartzianTransforminPython? . . . . . 26\n2.5.11 HowcanIsortonelistbyvaluesfromanotherlist? . . . . . . . . . . . . . . . . . . . . . 26\n2.6 Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n2.6.1 Whatisaclass? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n2.6.2 Whatisamethod?. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n2.6.3 Whatisself? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n2.6.4 HowdoIcheckifanobjectisaninstanceofagivenclassorofasubclassofit? . . . . . . 27\n2.6.5 Whatisdelegation? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n2.6.6 HowdoIcallamethoddefinedinabaseclassfromaderivedclassthatextendsit? . . . . 29\n2.6.7 HowcanIorganizemycodetomakeiteasiertochangethebaseclass? . . . . . . . . . . 29\n2.6.8 HowdoIcreatestaticclassdataandstaticclassmethods? . . . . . . . . . . . . . . . . . 29\n2.6.9 HowcanIoverloadconstructors(ormethods)inPython? . . . . . . . . . . . . . . . . . 30\n2.6.10 Itrytouse__spamandIgetanerrorabout_SomeClassName__spam. . . . . . . . . . . 30\n2.6.11 Myclassdefines__del__butitisnotcalledwhenIdeletetheobject. . . . . . . . . . . . 31\n2.6.12 HowdoIgetalistofallinstancesofagivenclass? . . . . . . . . . . . . . . . . . . . . . 31\n2.6.13 Whydoestheresultofid()appeartobenotunique? . . . . . . . . . . . . . . . . . . . 31\n2.6.14 WhencanIrelyonidentitytestswiththeisoperator? . . . . . . . . . . . . . . . . . . . 32\n2.6.15 Howcanasubclasscontrolwhatdataisstoredinanimmutableinstance? . . . . . . . . . 33\n2.6.16 HowdoIcachemethodcalls? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n2.7 Modules. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n2.7.1 HowdoIcreatea.pycfile? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n2.7.2 HowdoIfindthecurrentmodulename? . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n2.7.3 HowcanIhavemodulesthatmutuallyimporteachother? . . . . . . . . . . . . . . . . . 36\n2.7.4 __import__(\u2018x.y.z\u2019)returns<module\u2018x\u2019>;howdoIgetz? . . . . . . . . . . . . . . . . . 36\nii\n2.7.5 When I edit an importedmodule and reimport it, thechanges don\u2019t show up. Whydoes\nthishappen? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n3 DesignandHistoryFAQ 39\n3.1 WhydoesPythonuseindentationforgroupingofstatements? . . . . . . . . . . . . . . . . . . . . 39\n3.2 WhyamIgettingstrangeresultswithsimplearithmeticoperations? . . . . . . . . . . . . . . . . . 39\n3.3 Whyarefloating-pointcalculationssoinaccurate? . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n3.4 WhyarePythonstringsimmutable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n3.5 Whymust\u2018self\u2019beusedexplicitlyinmethoddefinitionsandcalls?. . . . . . . . . . . . . . . . . . 40\n3.6 Whycan\u2019tIuseanassignmentinanexpression? . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n3.7 WhydoesPythonusemethodsforsomefunctionality(e.g. list.index())butfunctionsforother(e.g.\nlen(list))? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n3.8 Whyisjoin()astringmethodinsteadofalistortuplemethod? . . . . . . . . . . . . . . . . . . . 41\n3.9 Howfastareexceptions? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n3.10 Whyisn\u2019tthereaswitchorcasestatementinPython? . . . . . . . . . . . . . . . . . . . . . . . . 42\n3.11 Can\u2019tyouemulatethreadsintheinterpreterinsteadofrelyingonanOS-specificthreadimplemen-\ntation? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n3.12 Whycan\u2019tlambdaexpressionscontainstatements? . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n3.13 CanPythonbecompiledtomachinecode,Corsomeotherlanguage? . . . . . . . . . . . . . . . 43\n3.14 HowdoesPythonmanagememory? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n3.15 Whydoesn\u2019tCPythonuseamoretraditionalgarbagecollectionscheme? . . . . . . . . . . . . . . 44\n3.16 Whyisn\u2019tallmemoryfreedwhenCPythonexits? . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n3.17 Whyarethereseparatetupleandlistdatatypes? . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n3.18 HowarelistsimplementedinCPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n3.19 HowaredictionariesimplementedinCPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n3.20 Whymustdictionarykeysbeimmutable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n3.21 Whydoesn\u2019tlist.sort()returnthesortedlist? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n3.22 HowdoyouspecifyandenforceaninterfacespecinPython? . . . . . . . . . . . . . . . . . . . . 46\n3.23 Whyistherenogoto? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n3.24 Whycan\u2019trawstrings(r-strings)endwithabackslash? . . . . . . . . . . . . . . . . . . . . . . . 47\n3.25 Whydoesn\u2019tPythonhavea\u201cwith\u201dstatementforattributeassignments? . . . . . . . . . . . . . . . 47\n3.26 Whydon\u2019tgeneratorssupportthewithstatement? . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n3.27 Whyarecolonsrequiredfortheif/while/def/classstatements?. . . . . . . . . . . . . . . . . . . . 48\n3.28 WhydoesPythonallowcommasattheendoflistsandtuples? . . . . . . . . . . . . . . . . . . . 49\n4 LibraryandExtensionFAQ 51\n4.1 GeneralLibraryQuestions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n4.1.1 HowdoIfindamoduleorapplicationtoperformtaskX? . . . . . . . . . . . . . . . . . 51\n4.1.2 Whereisthemath.py(socket.py,regex.py,etc.) sourcefile? . . . . . . . . . . . . . . . . 51\n4.1.3 HowdoImakeaPythonscriptexecutableonUnix? . . . . . . . . . . . . . . . . . . . . 51\n4.1.4 Isthereacurses/termcappackageforPython? . . . . . . . . . . . . . . . . . . . . . . . 52\n4.1.5 IsthereanequivalenttoC\u2019sonexit()inPython? . . . . . . . . . . . . . . . . . . . . . . 52\n4.1.6 Whydon\u2019tmysignalhandlerswork? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n4.2 Commontasks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n4.2.1 HowdoItestaPythonprogramorcomponent? . . . . . . . . . . . . . . . . . . . . . . 52\n4.2.2 HowdoIcreatedocumentationfromdocstrings? . . . . . . . . . . . . . . . . . . . . . 53\n4.2.3 HowdoIgetasinglekeypressatatime? . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n4.3 Threads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n4.3.1 HowdoIprogramusingthreads? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n4.3.2 Noneofmythreadsseemtorun: why? . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n4.3.3 HowdoIparceloutworkamongabunchofworkerthreads? . . . . . . . . . . . . . . . 54\n4.3.4 Whatkindsofglobalvaluemutationarethread-safe? . . . . . . . . . . . . . . . . . . . . 55\n4.3.5 Can\u2019twegetridoftheGlobalInterpreterLock? . . . . . . . . . . . . . . . . . . . . . . 55\n4.4 InputandOutput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n4.4.1 HowdoIdeleteafile? (Andotherfilequestions\u2026) . . . . . . . . . . . . . . . . . . . . 56\n4.4.2 HowdoIcopyafile? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n4.4.3 HowdoIread(orwrite)binarydata? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n4.4.4 Ican\u2019tseemtouseos.read()onapipecreatedwithos.popen();why?. . . . . . . . . . . . 57\niii\n4.4.5 HowdoIaccesstheserial(RS232)port? . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n4.4.6 Whydoesn\u2019tclosingsys.stdout(stdin,stderr)reallycloseit? . . . . . . . . . . . . . . . . 57\n4.5 Network/InternetProgramming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n4.5.1 WhatWWWtoolsarethereforPython? . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n4.5.2 WhatmoduleshouldIusetohelpwithgeneratingHTML? . . . . . . . . . . . . . . . . . 58\n4.5.3 HowdoIsendmailfromaPythonscript? . . . . . . . . . . . . . . . . . . . . . . . . . 58\n4.5.4 HowdoIavoidblockingintheconnect()methodofasocket? . . . . . . . . . . . . . . . 58\n4.6 Databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n4.6.1 ArethereanyinterfacestodatabasepackagesinPython?. . . . . . . . . . . . . . . . . . 59\n4.6.2 HowdoyouimplementpersistentobjectsinPython? . . . . . . . . . . . . . . . . . . . . 59\n4.7 MathematicsandNumerics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n4.7.1 HowdoIgeneraterandomnumbersinPython?. . . . . . . . . . . . . . . . . . . . . . . 59\n5 Extending/EmbeddingFAQ 61\n5.1 CanIcreatemyownfunctionsinC? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n5.2 CanIcreatemyownfunctionsinC++? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n5.3 WritingCishard;arethereanyalternatives? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n5.4 HowcanIexecutearbitraryPythonstatementsfromC? . . . . . . . . . . . . . . . . . . . . . . . 61\n5.5 HowcanIevaluateanarbitraryPythonexpressionfromC? . . . . . . . . . . . . . . . . . . . . . 61\n5.6 HowdoIextractCvaluesfromaPythonobject? . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n5.7 HowdoIusePy_BuildValue()tocreateatupleofarbitrarylength? . . . . . . . . . . . . . . . . . 62\n5.8 HowdoIcallanobject\u2019smethodfromC? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\n5.9 HowdoIcatchtheoutputfromPyErr_Print()(oranythingthatprintstostdout/stderr)? . . . . . . 62\n5.10 HowdoIaccessamodulewritteninPythonfromC? . . . . . . . . . . . . . . . . . . . . . . . . 63\n5.11 HowdoIinterfacetoC++objectsfromPython?. . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n5.12 IaddedamoduleusingtheSetupfileandthemakefails;why? . . . . . . . . . . . . . . . . . . . 63\n5.13 HowdoIdebuganextension? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n5.14 IwanttocompileaPythonmoduleonmyLinuxsystem,butsomefilesaremissing. Why? . . . . . 64\n5.15 HowdoItell\u201cincompleteinput\u201dfrom\u201cinvalidinput\u201d? . . . . . . . . . . . . . . . . . . . . . . . 64\n5.16 HowdoIfindundefinedg++symbols__builtin_newor__pure_virtual? . . . . . . . . . . . . . . 64\n5.17 CanIcreateanobjectclasswithsomemethodsimplementedinCandothersinPython(e.g. through\ninheritance)? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\n6 PythononWindowsFAQ 65\n6.1 HowdoIrunaPythonprogramunderWindows? . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n6.2 HowdoImakePythonscriptsexecutable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n6.3 WhydoesPythonsometimestakesolongtostart? . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n6.4 HowdoImakeanexecutablefromaPythonscript? . . . . . . . . . . . . . . . . . . . . . . . . . 66\n6.5 Isa*.pydfilethesameasaDLL? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n6.6 HowcanIembedPythonintoaWindowsapplication? . . . . . . . . . . . . . . . . . . . . . . . 67\n6.7 HowdoIkeepeditorsfrominsertingtabsintomyPythonsource? . . . . . . . . . . . . . . . . . 68\n6.8 HowdoIcheckforakeypresswithoutblocking? . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n6.9 HowdoIsolvethemissingapi-ms-win-crt-runtime-l1-1-0.dllerror? . . . . . . . . . . . . . . . . 68\n7 GraphicUserInterfaceFAQ 69\n7.1 GeneralGUIQuestions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n7.2 WhatGUItoolkitsexistforPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n7.3 Tkinterquestions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n7.3.1 HowdoIfreezeTkinterapplications?. . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\n7.3.2 CanIhaveTkeventshandledwhilewaitingforI/O? . . . . . . . . . . . . . . . . . . . . 69\n7.3.3 Ican\u2019tgetkeybindingstoworkinTkinter: why? . . . . . . . . . . . . . . . . . . . . . . 69\n8 \u201cWhyisPythonInstalledonmyComputer?\u201d FAQ 71\n8.1 WhatisPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n8.2 WhyisPythoninstalledonmymachine? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n8.3 CanIdeletePython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\nA Glossary 73\niv\nB Aboutthisdocumentation 91\nB.1 ContributorstothePythondocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\nC HistoryandLicense 93\nC.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\nC.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 94\nC.2.1 PYTHONSOFTWAREFOUNDATIONLICENSEVERSION2 . . . . . . . . . . . . . 94\nC.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 95\nC.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 95\nC.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 96\nC.2.5 ZERO-CLAUSEBSDLICENSEFORCODEINTHEPYTHONDOCUMENTATION . 97\nC.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 97\nC.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\nC.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\nC.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\nC.3.4 Cookiemanagement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\nC.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\nC.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100\nC.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\nC.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\nC.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\nC.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\nC.3.11 strtodanddtoa. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\nC.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\nC.3.13 expat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106\nC.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\nC.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\nC.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108\nC.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108\nC.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\nC.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\nC.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\nC.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110\nD Copyright 113\nIndex 115\nv\nvi\nCHAPTER\nONE\nGENERAL PYTHON FAQ\n1.1 General Information\n1.1.1 What is Python?\nPython is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions,\ndynamictyping,veryhighleveldynamicdatatypes,andclasses. Itsupportsmultipleprogrammingparadigmsbeyond\nobject-orientedprogramming,suchasproceduralandfunctionalprogramming. Pythoncombinesremarkablepower\nwith very clear syntax. It has interfaces to many system calls and libraries, as well as to various window systems,\nandisextensibleinCorC++. Itisalsousableasanextensionlanguageforapplicationsthatneedaprogrammable\ninterface. Finally,Pythonisportable: itrunsonmanyUnixvariantsincludingLinuxandmacOS,andonWindows.\nTofindoutmore,startwithtutorial-index. TheBeginner\u2019sGuidetoPythonlinkstootherintroductorytutorialsand\nresourcesforlearningPython.\n1.1.2 What is the Python Software Foundation?\nThePythonSoftwareFoundationisanindependentnon-profitorganizationthatholdsthecopyrightonPythonver-\nsions2.1andnewer. ThePSF\u2019smissionistoadvanceopensourcetechnologyrelatedtothePythonprogramming\nlanguageandtopublicizetheuseofPython. ThePSF\u2019shomepageisathttps://www.python.org/psf/.\nDonationstothePSFaretax-exemptintheUS.IfyouusePythonandfindithelpful,pleasecontributeviathePSF\ndonationpage.\n1.1.3 Are there copyright restrictions on the use of Python?\nYoucandoanythingyouwantwiththesource,aslongasyouleavethecopyrightsinanddisplaythosecopyrights\nin any documentation about Python that you produce. If you honor the copyright rules, it\u2019s OK to use Python for\ncommercialuse,tosellcopiesofPythoninsourceorbinaryform(modifiedorunmodified),ortosellproductsthat\nincorporatePythoninsomeform. WewouldstillliketoknowaboutallcommercialuseofPython,ofcourse.\nSeethelicensepagetofindfurtherexplanationsandthefulltextofthePSFLicense.\nThePythonlogoistrademarked,andincertaincasespermissionisrequiredtouseit. ConsulttheTrademarkUsage\nPolicyformoreinformation.\n1.1.4 Why was Python created in the first place?\nHere\u2019saverybriefsummaryofwhatstarteditall,writtenbyGuidovanRossum:\nIhadextensiveexperiencewithimplementinganinterpretedlanguageintheABCgroupatCWI,and\nfromworkingwiththisgroupIhadlearnedalotaboutlanguagedesign. ThisistheoriginofmanyPython\nfeatures,includingtheuseofindentationforstatementgroupingandtheinclusionofvery-high-leveldata\ntypes(althoughthedetailsarealldifferentinPython).\nIhadanumberofgripesabouttheABClanguage,butalsolikedmanyofitsfeatures. Itwasimpossible\nto extend the ABC language (or its implementation) to remedy my complaints \u2013 in fact its lack of\nextensibilitywasoneofitsbiggestproblems. IhadsomeexperiencewithusingModula-2+andtalked\n1\nPythonFrequentlyAskedQuestions,Release3.13.3\nwiththedesignersofModula-3andreadtheModula-3report. Modula-3istheoriginofthesyntaxand\nsemanticsusedforexceptions,andsomeotherPythonfeatures.\nIwasworkingintheAmoebadistributedoperatingsystemgroupatCWI.Weneededabetterwayto\ndosystemadministrationthanbywritingeitherCprogramsorBourneshellscripts,sinceAmoebahad\nitsownsystemcallinterfacewhichwasn\u2019teasilyaccessiblefromtheBourneshell. Myexperiencewith\nerrorhandlinginAmoebamademeacutelyawareoftheimportanceofexceptionsasaprogramming\nlanguagefeature.\nItoccurredtomethatascriptinglanguagewithasyntaxlikeABCbutwithaccesstotheAmoebasystem\ncallswouldfilltheneed. IrealizedthatitwouldbefoolishtowriteanAmoeba-specificlanguage,soI\ndecidedthatIneededalanguagethatwasgenerallyextensible.\nDuringthe1989Christmasholidays,Ihadalotoftimeonmyhand,soIdecidedtogiveitatry. During\nthenextyear,whilestillmostlyworkingonitinmyowntime,PythonwasusedintheAmoebaproject\nwithincreasingsuccess,andthefeedbackfromcolleaguesmademeaddmanyearlyimprovements.\nInFebruary1991, afterjustoverayearofdevelopment,IdecidedtoposttoUSENET.Therestisin\ntheMisc/HISTORYfile.\n1.1.5 What is Python good for?\nPythonisahigh-levelgeneral-purposeprogramminglanguagethatcanbeappliedtomanydifferentclassesofprob-\nlems.\nThe language comes with a large standard library that covers areas such as string processing (regular expressions,\nUnicode, calculatingdifferencesbetweenfiles), internetprotocols(HTTP,FTP,SMTP,XML-RPC,POP,IMAP),\nsoftwareengineering(unittesting,logging,profiling,parsingPythoncode),andoperatingsysteminterfaces(system\ncalls,filesystems,TCP/IPsockets). Lookatthetableofcontentsforlibrary-indextogetanideaofwhat\u2019savailable.\nAwidevarietyofthird-partyextensionsarealsoavailable. ConsultthePythonPackageIndextofindpackagesof\ninteresttoyou.\n1.1.6 How does the Python version numbering scheme work?\nPythonversionsarenumbered\u201cA.B.C\u201dor\u201cA.B\u201d:\n\u2022 Aisthemajorversionnumber\u2013itisonlyincrementedforreallymajorchangesinthelanguage.\n\u2022 Bistheminorversionnumber\u2013itisincrementedforlessearth-shatteringchanges.\n\u2022 C isthemicroversionnumber\u2013itisincrementedforeachbugfixrelease.\nNotallreleasesarebugfixreleases. Intherun-uptoanewfeaturerelease,aseriesofdevelopmentreleasesaremade,\ndenoted as alpha, beta, or release candidate. Alphas are early releases in which interfaces aren\u2019t yet finalized; it\u2019s\nnot unexpected to see an interface change between two alpha releases. Betas are more stable, preserving existing\ninterfacesbutpossiblyaddingnewmodules,andreleasecandidatesarefrozen,makingnochangesexceptasneeded\ntofixcriticalbugs.\nAlpha,betaandreleasecandidateversionshaveanadditionalsuffix:\n\u2022 Thesuffixforanalphaversionis\u201caN\u201dforsomesmallnumberN.\n\u2022 Thesuffixforabetaversionis\u201cbN\u201dforsomesmallnumberN.\n\u2022 Thesuffixforareleasecandidateversionis\u201crcN\u201dforsomesmallnumberN.\nInotherwords,allversionslabeled2.0aNprecedetheversionslabeled2.0bN,whichprecedeversionslabeled2.0rcN,\nandthoseprecede2.0.\nYoumayalsofindversionnumberswitha\u201c+\u201dsuffix,e.g. \u201c2.2+\u201d. Theseareunreleasedversions,builtdirectlyfrom\ntheCPythondevelopmentrepository. Inpractice,afterafinalminorreleaseismade,theversionisincrementedto\nthenextminorversion,whichbecomesthe\u201ca0\u201dversion,e.g. \u201c2.4a0\u201d.\nSee the Developer\u2019s Guide for more information about the development cycle, and PEP 387 to learn more about\nPython\u2019s backward compatibility policy. See also the documentation for sys.version, sys.hexversion, and\nsys.version_info.\n2 Chapter1. GeneralPythonFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n1.1.7 How do I obtain a copy of the Python source?\nThe latest Python source distribution is always available from python.org, at https://www.python.org/downloads/.\nThelatestdevelopmentsourcescanbeobtainedathttps://github.com/python/cpython/.\nThe source distribution is a gzipped tar file containing the complete C source, Sphinx-formatted documentation,\nPython library modules, example programs, and several useful pieces of freely distributable software. The source\nwillcompileandrunoutoftheboxonmostUNIXplatforms.\nConsulttheGettingStartedsectionofthePythonDeveloper\u2019sGuideformoreinformationongettingthesourcecode\nandcompilingit.\n1.1.8 How do I get documentation on Python?\nThestandarddocumentationforthecurrentstableversionofPythonisavailableathttps://docs.python.org/3/. PDF,\nplaintext,anddownloadableHTMLversionsarealsoavailableathttps://docs.python.org/3/download.html.\nThe documentation is written in reStructuredText and processed by the Sphinx documentation tool. The reStruc-\nturedTextsourceforthedocumentationispartofthePythonsourcedistribution.\n1.1.9 I\u2019ve never programmed before. Is there a Python tutorial?\nTherearenumeroustutorialsandbooksavailable. Thestandarddocumentationincludestutorial-index.\nConsulttheBeginner\u2019sGuidetofindinformationforbeginningPythonprogrammers,includinglistsoftutorials.\n1.1.10 Is there a newsgroup or mailing list devoted to Python?\nThere is a newsgroup, comp.lang.python, and a mailing list, python-list. The newsgroup and mailing list are\ngatewayed into each other \u2013 if you can read news it\u2019s unnecessary to subscribe to the mailing list. comp.lang.\npython is high-traffic, receiving hundreds of postings every day, and Usenet readers are often more able to cope\nwiththisvolume.\nAnnouncementsofnewsoftwarereleasesandeventscanbefoundincomp.lang.python.announce,alow-trafficmod-\neratedlistthatreceivesaboutfivepostingsperday. It\u2019savailableasthepython-announcemailinglist.\nMoreinfoaboutothermailinglistsandnewsgroupscanbefoundathttps://www.python.org/community/lists/.\n1.1.11 How do I get a beta test version of Python?\nAlphaandbetareleasesareavailablefromhttps://www.python.org/downloads/. Allreleasesareannouncedonthe\ncomp.lang.pythonandcomp.lang.python.announcenewsgroupsandonthePythonhomepageathttps://www.python.\norg/;anRSSfeedofnewsisavailable.\nYoucanalsoaccessthedevelopmentversionofPythonthroughGit. SeeThePythonDeveloper\u2019sGuidefordetails.\n1.1.12 How do I submit bug reports and patches for Python?\nToreportabugorsubmitapatch,usetheissuetrackerathttps://github.com/python/cpython/issues.\nFormoreinformationonhowPythonisdeveloped,consultthePythonDeveloper\u2019sGuide.\n1.1.13 Are there any published articles about Python that I can reference?\nIt\u2019sprobablybesttociteyourfavoritebookaboutPython.\nTheveryfirstarticleaboutPythonwaswrittenin1991andisnowquiteoutdated.\nGuido van Rossum and Jelke de Boer, \u201cInteractively Testing Remote Servers Using the Python Pro-\ngrammingLanguage\u201d,CWIQuarterly,Volume4,Issue4(December1991),Amsterdam,pp283\u2013303.\n1.1. GeneralInformation 3\nPythonFrequentlyAskedQuestions,Release3.13.3\n1.1.14 Are there any books on Python?\nYes, there are many, and more are being published. See the python.org wiki at https://wiki.python.org/moin/\nPythonBooksforalist.\nYoucanalsosearchonlinebookstoresfor\u201cPython\u201dandfilterouttheMontyPythonreferences;orperhapssearchfor\n\u201cPython\u201dand\u201clanguage\u201d.\n1.1.15 Where in the world is www.python.org located?\nThePythonproject\u2019sinfrastructureislocatedallovertheworldandismanagedbythePythonInfrastructureTeam.\nDetailshere.\n1.1.16 Why is it called Python?\nWhen he began implementing Python, Guido van Rossum was also reading the published scripts from \u201cMonty\nPython\u2019s Flying Circus\u201d, a BBC comedy series from the 1970s. Van Rossum thought he needed a name that was\nshort,unique,andslightlymysterious,sohedecidedtocallthelanguagePython.\n1.1.17 Do I have to like \u201cMonty Python\u2019s Flying Circus\u201d?\nNo,butithelps. :)\n1.2 Python in the real world\n1.2.1 How stable is Python?\nVery stable. New, stable releases have been coming out roughly every 6 to 18 months since 1991, and this seems\nlikelytocontinue. Asofversion3.9,Pythonwillhaveanewfeaturereleaseevery12months(PEP602).\nThedevelopersissuebugfixreleasesofolderversions,sothestabilityofexistingreleasesgraduallyimproves. Bugfix\nreleases, indicatedby a third component ofthe version number (e.g. 3.5.3, 3.6.2), aremanaged for stability; only\nfixesforknownproblemsareincludedinabugfixrelease, andit\u2019sguaranteedthatinterfaceswillremainthesame\nthroughoutaseriesofbugfixreleases.\nThelateststablereleasescanalwaysbefoundonthePythondownloadpage. Python3.xistherecommendedversion\nandsupportedbymostwidelyusedlibraries. Python2.xisnotmaintainedanymore.\n1.2.2 How many people are using Python?\nThereareprobablymillionsofusers,thoughit\u2019sdifficulttoobtainanexactcount.\nPythonisavailableforfreedownload,sotherearenosalesfigures,andit\u2019savailablefrommanydifferentsitesand\npackagedwithmanyLinuxdistributions,sodownloadstatisticsdon\u2019ttellthewholestoryeither.\nThecomp.lang.pythonnewsgroupisveryactive,butnotallPythonusersposttothegrouporevenreadit.\n1.2.3 Have any significant projects been done in Python?\nSeehttps://www.python.org/about/successforalistofprojectsthatusePython. Consultingtheproceedingsforpast\nPythonconferenceswillrevealcontributionsfrommanydifferentcompaniesandorganizations.\nHigh-profilePythonprojectsincludetheMailmanmailinglistmanagerandtheZopeapplicationserver. SeveralLinux\ndistributions,mostnotablyRedHat,havewrittenpartoralloftheirinstallerandsystemadministrationsoftwarein\nPython. CompaniesthatusePythoninternallyincludeGoogle,Yahoo,andLucasfilmLtd.\n1.2.4 What new developments are expected for Python in the future?\nSeehttps://peps.python.org/forthePythonEnhancementProposals(PEPs). PEPsaredesigndocumentsdescribing\nasuggestednewfeatureforPython,providingaconcisetechnicalspecificationandarationale. LookforaPEPtitled\n\u201cPythonX.YReleaseSchedule\u201d,whereX.Yisaversionthathasn\u2019tbeenpubliclyreleasedyet.\n4 Chapter1. GeneralPythonFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\nNewdevelopmentisdiscussedonthepython-devmailinglist.\n1.2.5 Is it reasonable to propose incompatible changes to Python?\nIngeneral,no. TherearealreadymillionsoflinesofPythoncodearoundtheworld,soanychangeinthelanguage\nthatinvalidatesmorethanaverysmallfractionofexistingprogramshastobefrownedupon. Evenifyoucanprovide\naconversionprogram,there\u2019sstilltheproblemofupdatingalldocumentation;manybookshavebeenwrittenabout\nPython,andwedon\u2019twanttoinvalidatethemallatasinglestroke.\nProvidingagradualupgradepathisnecessaryifafeaturehastobechanged. PEP5describestheprocedurefollowed\nforintroducingbackward-incompatiblechangeswhileminimizingdisruptionforusers.\n1.2.6 Is Python a good language for beginning programmers?\nYes.\nItisstillcommontostartstudentswithaproceduralandstaticallytypedlanguagesuchasPascal,C,orasubsetof\nC++orJava. StudentsmaybebetterservedbylearningPythonastheirfirstlanguage. Pythonhasaverysimpleand\nconsistentsyntaxandalargestandardlibraryand,mostimportantly,usingPythoninabeginningprogrammingcourse\nletsstudentsconcentrateonimportantprogrammingskillssuchasproblemdecompositionanddatatypedesign. With\nPython,studentscanbequicklyintroducedtobasicconceptssuchasloopsandprocedures. Theycanprobablyeven\nworkwithuser-definedobjectsintheirveryfirstcourse.\nFor a student who has never programmed before, using a statically typed language seems unnatural. It presents\nadditionalcomplexitythatthestudentmustmasterandslowsthepaceofthecourse. Thestudentsaretryingtolearn\nto think like a computer, decompose problems, design consistent interfaces, and encapsulate data. While learning\ntouseastaticallytypedlanguageisimportantinthelongterm,itisnotnecessarilythebesttopictoaddressinthe\nstudents\u2019firstprogrammingcourse.\nMany other aspects of Python make it a good first language. Like Java, Python has a large standard library so\nthatstudentscanbeassignedprogrammingprojectsveryearlyinthecoursethatdosomething. Assignmentsaren\u2019t\nrestricted to the standard four-function calculator and check balancing programs. By using the standard library,\nstudentscangainthesatisfactionofworkingonrealisticapplicationsastheylearnthefundamentalsofprogramming.\nUsing the standard library also teaches students about code reuse. Third-party modules such as PyGame are also\nhelpfulinextendingthestudents\u2019reach.\nPython\u2019sinteractiveinterpreterenablesstudentstotestlanguagefeatureswhilethey\u2019reprogramming. Theycankeep\na window with the interpreter running while they enter their program\u2019s source in another window. If they can\u2019t\nrememberthemethodsforalist,theycandosomethinglikethis:\n>>> L = []\n>>> dir(L)\n['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',\n'__dir__', '__doc__', '__eq__', '__format__', '__ge__',\n'__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__',\n'__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__',\n'__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__',\n'__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__',\n'__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',\n'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove',\n'reverse', 'sort']\n>>> [d for d in dir(L) if '__' not in d]\n['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove',\n,\u2192'reverse', 'sort']\n>>> help(L.append)\nHelp on built-in function append:\nappend(...)\nL.append(object) -> None -- append object to end\n(continuesonnextpage)\n1.2. Pythonintherealworld 5\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\n>>> L.append(1)\n>>> L\n[1]\nWiththeinterpreter,documentationisneverfarfromthestudentastheyareprogramming.\nTherearealsogoodIDEsforPython. IDLEisacross-platformIDEforPythonthatiswritteninPythonusingTkinter.\nEmacs users will be happy to know that there is a very good Python mode for Emacs. All of these programming\nenvironments provide syntax highlighting, auto-indenting, and access to the interactive interpreter while coding.\nConsultthePythonwikiforafulllistofPythoneditingenvironments.\nIfyouwanttodiscussPython\u2019suseineducation,youmaybeinterestedinjoiningtheedu-sigmailinglist.\n6 Chapter1. GeneralPythonFAQ\nCHAPTER\nTWO\nPROGRAMMING FAQ\n2.1 General Questions\n2.1.1 Is there a source code level debugger with breakpoints, single-stepping,\netc.?\nYes.\nSeveraldebuggersforPythonaredescribedbelow,andthebuilt-infunctionbreakpoint()allowsyoutodropinto\nanyofthem.\nThepdbmoduleisasimplebutadequateconsole-modedebuggerforPython. ItispartofthestandardPythonlibrary,\nandisdocumented in the Library Reference Manual. Youcanalsowriteyourowndebuggerbyusingthe\ncodeforpdbasanexample.\nTheIDLEinteractivedevelopmentenvironment,whichispartofthestandardPythondistribution(normallyavailable\nasTools/scripts/idle3),includesagraphicaldebugger.\nPythonWinisaPythonIDEthatincludesaGUIdebuggerbasedonpdb. ThePythonWindebuggercolorsbreakpoints\nand has quite a few cool features such as debugging non-PythonWin programs. PythonWin is available as part of\npywin32projectandasapartoftheActivePythondistribution.\nEricisanIDEbuiltonPyQtandtheScintillaeditingcomponent.\ntrepan3kisagdb-likedebugger.\nVisualStudioCodeisanIDEwithdebuggingtoolsthatintegrateswithversion-controlsoftware.\nThereareanumberofcommercialPythonIDEsthatincludegraphicaldebuggers. Theyinclude:\n\u2022 WingIDE\n\u2022 KomodoIDE\n\u2022 PyCharm\n2.1.2 Are there tools to help find bugs or perform static analysis?\nYes.\nPylintandPyflakesdobasiccheckingthatwillhelpyoucatchbugssooner.\nStatictypecheckerssuchasMypy,Pyre,andPytypecanchecktypehintsinPythonsourcecode.\n2.1.3 How can I create a stand-alone binary from a Python script?\nYou don\u2019t need the ability to compile Python to C code if all you want is a stand-alone program that users can\ndownloadandrunwithouthavingtoinstallthePythondistributionfirst. Thereareanumberoftoolsthatdetermine\nthesetofmodulesrequiredbyaprogramandbindthesemodulestogetherwithaPythonbinarytoproduceasingle\nexecutable.\n7\nPythonFrequentlyAskedQuestions,Release3.13.3\nOneistousethefreezetool, whichisincludedinthePythonsourcetreeasTools/freeze. ItconvertsPythonbyte\ncodetoCarrays;withaCcompileryoucanembedallyourmodulesintoanewprogram,whichisthenlinkedwith\nthestandardPythonmodules.\nItworksbyscanningyoursourcerecursivelyforimportstatements(inbothforms)andlookingforthemodulesinthe\nstandardPythonpathaswellasinthesourcedirectory(forbuilt-inmodules). Itthenturnsthebytecodeformodules\nwritteninPythonintoCcode(arrayinitializersthatcanbeturnedintocodeobjectsusingthemarshalmodule)and\ncreatesacustom-madeconfigfilethatonlycontainsthosebuilt-inmoduleswhichareactuallyusedintheprogram.\nItthencompilesthegeneratedCcodeandlinksitwiththerestofthePythoninterpretertoformaself-contained\nbinarywhichactsexactlylikeyourscript.\nThefollowingpackagescanhelpwiththecreationofconsoleandGUIexecutables:\n\u2022 Nuitka(Cross-platform)\n\u2022 PyInstaller(Cross-platform)\n\u2022 PyOxidizer(Cross-platform)\n\u2022 cx_Freeze(Cross-platform)\n\u2022 py2app(macOSonly)\n\u2022 py2exe(Windowsonly)\n2.1.4 Are there coding standards or a style guide for Python programs?\nYes. ThecodingstylerequiredforstandardlibrarymodulesisdocumentedasPEP8.\n2.2 Core Language\n2.2.1 Why am I getting an UnboundLocalError when the variable has a value?\nItcanbeasurprisetogettheUnboundLocalErrorinpreviouslyworkingcodewhenitismodifiedbyaddingan\nassignmentstatementsomewhereinthebodyofafunction.\nThiscode:\n>>> x = 10\n>>> def bar():\n... print(x)\n...\n>>> bar()\n10\nworks,butthiscode:\n>>> x = 10\n>>> def foo():\n... print(x)\n... x += 1\nresultsinanUnboundLocalError:\n>>> foo()\nTraceback (most recent call last):\n...\nUnboundLocalError: local variable 'x' referenced before assignment\nThis is because when you make an assignment to a variable in a scope, that variable becomes local to that scope\nand shadows any similarly named variable in the outer scope. Since the last statement in foo assigns a new value\ntox,thecompilerrecognizesitasalocalvariable. Consequentlywhentheearlierprint(x)attemptstoprintthe\nuninitializedlocalvariableandanerrorresults.\n8 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\nIntheexampleaboveyoucanaccesstheouterscopevariablebydeclaringitglobal:\n>>> x = 10\n>>> def foobar():\n... global x\n... print(x)\n... x += 1\n...\n>>> foobar()\n10\nThisexplicitdeclarationisrequiredinordertoremindyouthat(unlikethesuperficiallyanalogoussituationwithclass\nandinstancevariables)youareactuallymodifyingthevalueofthevariableintheouterscope:\n>>> print(x)\n11\nYoucandoasimilarthinginanestedscopeusingthenonlocalkeyword:\n>>> def foo():\n... x = 10\n... def bar():\n... nonlocal x\n... print(x)\n... x += 1\n... bar()\n... print(x)\n...\n>>> foo()\n10\n11\n2.2.2 What are the rules for local and global variables in Python?\nInPython,variablesthatareonlyreferencedinsideafunctionareimplicitlyglobal. Ifavariableisassignedavalue\nanywherewithinthefunction\u2019sbody,it\u2019sassumedtobealocalunlessexplicitlydeclaredasglobal.\nThoughabitsurprisingatfirst,amoment\u2019sconsiderationexplainsthis. Ononehand,requiringglobalforassigned\nvariables provides a bar against unintended side-effects. On the other hand, if global wasrequired for all global\nreferences,you\u2019dbeusingglobalallthetime. You\u2019dhavetodeclareasglobaleveryreferencetoabuilt-infunction\nortoacomponentofanimportedmodule. Thisclutterwoulddefeattheusefulnessoftheglobaldeclarationfor\nidentifyingside-effects.\n2.2.3 Why do lambdas defined in a loop with different values all return the same\nresult?\nAssumeyouuseaforlooptodefineafewdifferentlambdas(orevenplainfunctions),e.g.:\n>>> squares = []\n>>> for x in range(5):\n... squares.append(lambda: x**2)\nThisgivesyoualistthatcontains5lambdasthatcalculatex**2. Youmightexpectthat, whencalled, theywould\nreturn,respectively,0,1,4,9,and16. However,whenyouactuallytryyouwillseethattheyallreturn16:\n>>> squares[2]()\n16\n>>> squares[4]()\n16\n2.2. CoreLanguage 9\nPythonFrequentlyAskedQuestions,Release3.13.3\nThis happens because x is not local to the lambdas, but is defined in the outer scope, and it is accessed when the\nlambdaiscalled\u2014notwhenitisdefined. Attheendoftheloop,thevalueofxis4,soallthefunctionsnowreturn\n4**2,i.e. 16. Youcanalsoverifythisbychangingthevalueofxandseehowtheresultsofthelambdaschange:\n>>> x = 8\n>>> squares[2]()\n64\nInordertoavoidthis,youneedtosavethevaluesinvariableslocaltothelambdas,sothattheydon\u2019trelyonthevalue\noftheglobalx:\n>>> squares = []\n>>> for x in range(5):\n... squares.append(lambda n=x: n**2)\nHere,n=xcreatesanewvariablenlocaltothelambdaandcomputedwhenthelambdaisdefinedsothatithasthe\nsamevaluethatxhadatthatpointintheloop. Thismeansthatthevalueofnwillbe0inthefirstlambda,1inthe\nsecond,2inthethird,andsoon. Thereforeeachlambdawillnowreturnthecorrectresult:\n>>> squares[2]()\n4\n>>> squares[4]()\n16\nNotethatthisbehaviourisnotpeculiartolambdas,butappliestoregularfunctionstoo.\n2.2.4 How do I share global variables across modules?\nThecanonicalwaytoshareinformationacrossmoduleswithinasingleprogramistocreateaspecialmodule(often\ncalled config or cfg). Just import the config module in all modules of your application; the module then becomes\navailable as a global name. Because there is only one instance of each module, any changes made to the module\nobjectgetreflectedeverywhere. Forexample:\nconfig.py:\nx = 0 # Default value of the 'x' configuration setting\nmod.py:\nimport config\nconfig.x = 1\nmain.py:\nimport config\nimport mod\nprint(config.x)\nNotethatusingamoduleisalsothebasisforimplementingthesingletondesignpattern,forthesamereason.\n2.2.5 What are the \u201cbest practices\u201d for using import in a module?\nIn general, don\u2019t use from modulename import *. Doing so clutters the importer\u2019s namespace, and makes it\nmuchharderforlinterstodetectundefinednames.\nImport modules at the top of a file. Doing so makes it clear what other modules your code requires and avoids\nquestionsofwhetherthemodulenameisinscope. Usingoneimportperlinemakesiteasytoaddanddeletemodule\nimports,butusingmultipleimportsperlineuseslessscreenspace.\nIt\u2019sgoodpracticeifyouimportmodulesinthefollowingorder:\n1. standardlibrarymodules\u2013e.g. sys,os,argparse,re\n10 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n2. third-party library modules (anything installed in Python\u2019s site-packages directory) \u2013 e.g. dateutil,\nrequests,PIL.Image\n3. locallydevelopedmodules\nItissometimesnecessarytomoveimportstoafunctionorclasstoavoidproblemswithcircularimports. Gordon\nMcMillansays:\nCircular imports are fine where both modules use the \u201cimport <module>\u201d form of import. They fail\nwhenthe2ndmodulewantstograbanameoutofthefirst(\u201cfrommoduleimportname\u201d)andtheimport\nisatthetoplevel. That\u2019sbecausenamesinthe1starenotyetavailable,becausethefirstmoduleisbusy\nimportingthe2nd.\nInthiscase,ifthesecondmoduleisonlyusedinonefunction,thentheimportcaneasilybemovedintothatfunction.\nBy the time the import is called, the first module will have finished initializing, and the second module can do its\nimport.\nItmayalsobenecessarytomoveimportsoutofthetoplevelofcodeifsomeofthemodulesareplatform-specific.\nInthatcase,itmaynotevenbepossibletoimportallofthemodulesatthetopofthefile. Inthiscase,importingthe\ncorrectmodulesinthecorrespondingplatform-specificcodeisagoodoption.\nOnlymoveimportsintoalocalscope,suchasinsideafunctiondefinition,ifit\u2019snecessarytosolveaproblemsuch\nasavoidingacircularimportoraretryingtoreducetheinitializationtimeofamodule. Thistechniqueisespecially\nhelpfulifmanyoftheimportsareunnecessarydependingonhowtheprogramexecutes. Youmayalsowanttomove\nimportsintoafunctionifthemodulesareonlyeverusedinthatfunction. Notethatloadingamodulethefirsttime\nmaybeexpensivebecauseoftheonetimeinitializationofthemodule,butloadingamodulemultipletimesisvirtually\nfree, costing only a couple of dictionary lookups. Even if the module name has gone out of scope, the module is\nprobablyavailableinsys.modules.\n2.2.6 Why are default values shared between objects?\nThistypeofbugcommonlybitesneophyteprogrammers. Considerthisfunction:\ndef foo(mydict={}): # Danger: shared reference to one dict for all calls\n... compute something ...\nmydict[key] = value\nreturn mydict\nThefirsttimeyoucallthisfunction,mydictcontainsasingleitem. Thesecondtime,mydictcontainstwoitems\nbecausewhenfoo()beginsexecuting,mydictstartsoutwithanitemalreadyinit.\nItisoftenexpectedthatafunctioncallcreatesnewobjectsfordefaultvalues. Thisisnotwhathappens. Defaultvalues\narecreatedexactlyonce,whenthefunctionisdefined. Ifthatobjectischanged,likethedictionaryinthisexample,\nsubsequentcallstothefunctionwillrefertothischangedobject.\nBy definition, immutable objects such as numbers, strings, tuples, and None, are safe from change. Changes to\nmutableobjectssuchasdictionaries,lists,andclassinstancescanleadtoconfusion.\nBecauseofthisfeature,itisgoodprogrammingpracticetonotusemutableobjectsasdefaultvalues. Instead,useNone\nasthedefaultvalueandinsidethefunction,checkiftheparameterisNoneandcreateanewlist/dictionary/whatever\nifitis. Forexample,don\u2019twrite:\ndef foo(mydict={}):\n...\nbut:\ndef foo(mydict=None):\nif mydict is None:\nmydict = {} # create a new dict for local namespace\n2.2. CoreLanguage 11\nPythonFrequentlyAskedQuestions,Release3.13.3\nThisfeaturecanbeuseful. Whenyouhaveafunctionthat\u2019stime-consumingtocompute,acommontechniqueisto\ncache the parameters and the resulting value of each call to the function, and return the cached value if the same\nvalueisrequestedagain. Thisiscalled\u201cmemoizing\u201d,andcanbeimplementedlikethis:\n# Callers can only provide two parameters and optionally pass _cache by keyword\ndef expensive(arg1, arg2, *, _cache={}):\nif (arg1, arg2) in _cache:\nreturn _cache[(arg1, arg2)]\n# Calculate the value\nresult = ... expensive computation ...\n_cache[(arg1, arg2)] = result # Store result in the cache\nreturn result\nYoucoulduseaglobalvariablecontainingadictionaryinsteadofthedefaultvalue;it\u2019samatteroftaste.\n2.2.7 How can I pass optional or keyword parameters from one function to an-\nother?\nCollect the arguments using the * and ** specifiers in the function\u2019s parameter list; this gives you the positional\nargumentsasatupleandthekeywordargumentsasadictionary. Youcanthenpasstheseargumentswhencalling\nanotherfunctionbyusing*and**:\ndef f(x, *args, **kwargs):\n...\nkwargs['width'] = '14.3c'\n...\ng(x, *args, **kwargs)\n2.2.8 What is the difference between arguments and parameters?\nParametersaredefinedbythenamesthatappearinafunctiondefinition,whereasargumentsarethevaluesactually\npassedtoafunctionwhencallingit. Parametersdefinewhatkindofargumentsafunctioncanaccept. Forexample,\ngiventhefunctiondefinition:\ndef func(foo, bar=None, **kwargs):\npass\nfoo,barandkwargsareparametersoffunc. However,whencallingfunc,forexample:\nfunc(42, bar=314, extra=somevar)\nthevalues42,314,andsomevararearguments.\n2.2.9 Why did changing list \u2018y\u2019 also change list \u2018x\u2019?\nIfyouwrotecodelike:\n>>> x = []\n>>> y = x\n>>> y.append(10)\n>>> y\n[10]\n>>> x\n[10]\nyoumightbewonderingwhyappendinganelementtoychangedxtoo.\nTherearetwofactorsthatproducethisresult:\n12 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n1) Variablesaresimplynamesthatrefertoobjects. Doingy = xdoesn\u2019tcreateacopyofthelist\u2013itcreatesa\nnewvariableythatreferstothesameobjectxrefersto. Thismeansthatthereisonlyoneobject(thelist),and\nbothxandyrefertoit.\n2) Listsaremutable,whichmeansthatyoucanchangetheircontent.\nAfterthecalltoappend(),thecontentofthemutableobjecthaschangedfrom[]to[10]. Sinceboththevariables\nrefertothesameobject,usingeithernameaccessesthemodifiedvalue[10].\nIfweinsteadassignanimmutableobjecttox:\n>>> x = 5 # ints are immutable\n>>> y = x\n>>> x = x + 1 # 5 can't be mutated, we are creating a new object here\n>>> x\n6\n>>> y\n5\nwecanseethatinthiscasexandyarenotequalanymore. Thisisbecauseintegersareimmutable,andwhenwedo\nx = x + 1wearenotmutatingtheint5byincrementingitsvalue;instead,wearecreatinganewobject(theint6)\nandassigningittox(thatis,changingwhichobjectxrefersto). Afterthisassignmentwehavetwoobjects(theints\n6and5)andtwovariablesthatrefertothem(xnowrefersto6butystillrefersto5).\nSome operations (for example y.append(10) and y.sort()) mutate the object, whereas superficially similar\noperations (for example y = y + [10] and sorted(y)) create a new object. In general in Python (and in all\ncasesinthestandardlibrary)amethodthatmutatesanobjectwillreturnNonetohelpavoidgettingthetwotypesof\noperationsconfused. Soifyoumistakenlywritey.sort()thinkingitwillgiveyouasortedcopyofy,you\u2019llinstead\nendupwithNone,whichwilllikelycauseyourprogramtogenerateaneasilydiagnosederror.\nHowever,thereisoneclassofoperationswherethesameoperationsometimeshasdifferentbehaviorswithdifferent\ntypes: theaugmentedassignmentoperators. Forexample,+=mutateslistsbutnottuplesorints(a_list += [1,\n2, 3]isequivalenttoa_list.extend([1, 2, 3])andmutatesa_list,whereassome_tuple += (1, 2,\n3)andsome_int += 1createnewobjects).\nInotherwords:\n\u2022 Ifwehaveamutableobject(list,dict,set,etc.),wecanusesomespecificoperationstomutateitandall\nthevariablesthatrefertoitwillseethechange.\n\u2022 Ifwehaveanimmutableobject(str,int,tuple,etc.),allthevariablesthatrefertoitwillalwaysseethe\nsamevalue,butoperationsthattransformthatvalueintoanewvaluealwaysreturnanewobject.\nIf you want to know if two variables refer to the same object or not, you can use the is operator, or the built-in\nfunctionid().\n2.2.10 How do I write a function with output parameters (call by reference)?\nRememberthatargumentsarepassedbyassignmentinPython. Sinceassignmentjustcreatesreferencestoobjects,\nthere\u2019snoaliasbetweenanargumentnameinthecallerandcallee,andsonocall-by-referenceperse. Youcanachieve\nthedesiredeffectinanumberofways.\n1) Byreturningatupleoftheresults:\n>>> def func1(a, b):\n... a = 'new-value' # a and b are local names\n... b = b + 1 # assigned to new objects\n... return a, b # return new values\n...\n>>> x, y = 'old-value', 99\n>>> func1(x, y)\n('new-value', 100)\nThisisalmostalwaystheclearestsolution.\n2.2. CoreLanguage 13\nPythonFrequentlyAskedQuestions,Release3.13.3\n2) Byusingglobalvariables. Thisisn\u2019tthread-safe,andisnotrecommended.\n3) Bypassingamutable(changeablein-place)object:\n>>> def func2(a):\n... a[0] = 'new-value' # 'a' references a mutable list\n... a[1] = a[1] + 1 # changes a shared object\n...\n>>> args = ['old-value', 99]\n>>> func2(args)\n>>> args\n['new-value', 100]\n4) Bypassinginadictionarythatgetsmutated:\n>>> def func3(args):\n... args['a'] = 'new-value' # args is a mutable dictionary\n... args['b'] = args['b'] + 1 # change it in-place\n...\n>>> args = {'a': 'old-value', 'b': 99}\n>>> func3(args)\n>>> args\n{'a': 'new-value', 'b': 100}\n5) Orbundleupvaluesinaclassinstance:\n>>> class Namespace:\n... def __init__(self, /, **args):\n... for key, value in args.items():\n... setattr(self, key, value)\n...\n>>> def func4(args):\n... args.a = 'new-value' # args is a mutable Namespace\n... args.b = args.b + 1 # change object in-place\n...\n>>> args = Namespace(a='old-value', b=99)\n>>> func4(args)\n>>> vars(args)\n{'a': 'new-value', 'b': 100}\nThere\u2019salmostneveragoodreasontogetthiscomplicated.\nYourbestchoiceistoreturnatuplecontainingthemultipleresults.\n2.2.11 How do you make a higher order function in Python?\nYouhavetwochoices: youcanusenestedscopesoryoucanusecallableobjects. Forexample,supposeyouwanted\ntodefinelinear(a,b)whichreturnsafunctionf(x)thatcomputesthevaluea*x+b. Usingnestedscopes:\ndef linear(a, b):\ndef result(x):\nreturn a * x + b\nreturn result\nOrusingacallableobject:\nclass linear:\ndef __init__(self, a, b):\n(continuesonnextpage)\n14 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nself.a, self.b = a, b\ndef __call__(self, x):\nreturn self.a * x + self.b\nInbothcases,\ntaxes = linear(0.3, 2)\ngivesacallableobjectwheretaxes(10e6) == 0.3 * 10e6 + 2.\nThecallableobjectapproachhasthedisadvantagethatitisabitslowerandresultsinslightlylongercode. However,\nnotethatacollectionofcallablescansharetheirsignatureviainheritance:\nclass exponential(linear):\n# __init__ inherited\ndef __call__(self, x):\nreturn self.a * (x ** self.b)\nObjectcanencapsulatestateforseveralmethods:\nclass counter:\nvalue = 0\ndef set(self, x):\nself.value = x\ndef up(self):\nself.value = self.value + 1\ndef down(self):\nself.value = self.value - 1\ncount = counter()\ninc, dec, reset = count.up, count.down, count.set\nHereinc(),dec()andreset()actlikefunctionswhichsharethesamecountingvariable.\n2.2.12 How do I copy an object in Python?\nIngeneral,trycopy.copy()orcopy.deepcopy()forthegeneralcase. Notallobjectscanbecopied,butmost\ncan.\nSomeobjectscanbecopiedmoreeasily. Dictionarieshaveacopy()method:\nnewdict = olddict.copy()\nSequencescanbecopiedbyslicing:\nnew_l = l[:]\n2.2.13 How can I find the methods or attributes of an object?\nForaninstancexofauser-definedclass,dir(x)returnsanalphabetizedlistofthenamescontainingtheinstance\nattributesandmethodsandattributesdefinedbyitsclass.\n2.2. CoreLanguage 15\nPythonFrequentlyAskedQuestions,Release3.13.3\n2.2.14 How can my code discover the name of an object?\nGenerallyspeaking,itcan\u2019t,becauseobjectsdon\u2019treallyhavenames. Essentially,assignmentalwaysbindsanameto\navalue;thesameistrueofdefandclassstatements,butinthatcasethevalueisacallable. Considerthefollowing\ncode:\n>>> class A:\n... pass\n...\n>>> B = A\n>>> a = B()\n>>> b = a\n>>> print(b)\n<__main__.A object at 0x16D07CC>\n>>> print(a)\n<__main__.A object at 0x16D07CC>\nArguablytheclasshasaname: eventhoughitisboundtotwonamesandinvokedthroughthenameBthecreated\ninstanceisstillreportedasaninstanceofclassA.However,itisimpossibletosaywhethertheinstance\u2019snameisa\norb,sincebothnamesareboundtothesamevalue.\nGenerallyspeakingitshouldnotbenecessaryforyourcodeto\u201cknowthenames\u201dofparticularvalues. Unlessyouare\ndeliberatelywritingintrospectiveprograms,thisisusuallyanindicationthatachangeofapproachmightbebeneficial.\nIncomp.lang.python,FredrikLundhoncegaveanexcellentanalogyinanswertothisquestion:\nThesamewayasyougetthenameofthatcatyoufoundonyourporch: thecat(object)itselfcannot\ntellyouitsname,anditdoesn\u2019treallycare\u2013sotheonlywaytofindoutwhatit\u2019scalledistoaskallyour\nneighbours(namespaces)ifit\u2019stheircat(object)\u2026\n\u2026.anddon\u2019tbesurprisedifyou\u2019llfindthatit\u2019sknownbymanynames,ornonameatall!\n2.2.15 What\u2019s up with the comma operator\u2019s precedence?\nCommaisnotanoperatorinPython. Considerthissession:\n>>> \"a\" in \"b\", \"a\"\n(False, 'a')\nSincethecommaisnotanoperator,butaseparatorbetweenexpressionstheaboveisevaluatedasifyouhadentered:\n(\"a\" in \"b\"), \"a\"\nnot:\n\"a\" in (\"b\", \"a\")\nThesameistrueofthevariousassignmentoperators(=,+=etc). Theyarenottrulyoperatorsbutsyntacticdelimiters\ninassignmentstatements.\n2.2.16 Is there an equivalent of C\u2019s \u201c?:\u201d ternary operator?\nYes,thereis. Thesyntaxisasfollows:\n[on_true] if [expression] else [on_false]\nx, y = 50, 25\nsmall = x if x < y else y\nBeforethissyntaxwasintroducedinPython2.5,acommonidiomwastouselogicaloperators:\n16 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n[expression] and [on_true] or [on_false]\nHowever,thisidiomisunsafe,asitcangivewrongresultswhenon_truehasafalsebooleanvalue. Therefore,itis\nalwaysbettertousethe... if ... else ...form.\n2.2.17 Is it possible to write obfuscated one-liners in Python?\nYes. Usuallythisisdonebynestinglambdawithinlambda. Seethefollowingthreeexamples,slightlyadaptedfrom\nUlfBartelt:\nfrom functools import reduce\n# Primes < 1000\nprint(list(filter(None,map(lambda y:y*reduce(lambda x,y:x*y!=0,\nmap(lambda x,y=y:y%x,range(2,int(pow(y,0.5)+1))),1),range(2,1000)))))\n# First 10 Fibonacci numbers\nprint(list(map(lambda x,f=lambda x,f:(f(x-1,f)+f(x-2,f)) if x>1 else 1:\nf(x,f), range(10))))\n# Mandelbrot set\nprint((lambda Ru,Ro,Iu,Io,IM,Sx,Sy:reduce(lambda x,y:x+'\\n'+y,map(lambda y,\nIu=Iu,Io=Io,Ru=Ru,Ro=Ro,Sy=Sy,L=lambda yc,Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,i=IM,\nSx=Sx,Sy=Sy:reduce(lambda x,y:x+y,map(lambda x,xc=Ru,yc=yc,Ru=Ru,Ro=Ro,\ni=i,Sx=Sx,F=lambda xc,yc,x,y,k,f=lambda xc,yc,x,y,k,f:(k<=0)or (x*x+y*y\n>=4.0) or 1+f(xc,yc,x*x-y*y+xc,2.0*x*y+yc,k-1,f):f(xc,yc,x,y,k,f):chr(\n64+F(Ru+x*(Ro-Ru)/Sx,yc,0,0,i)),range(Sx))):L(Iu+y*(Io-Iu)/Sy),range(Sy\n))))(-2.1, 0.7, -1.2, 1.2, 30, 80, 24))\n# \\___ ___/ \\___ ___/ | | |__ lines on screen\n# V V | |______ columns on screen\n# | | |__________ maximum of \"iterations\"\n# | |_________________ range on y axis\n# |____________________________ range on x axis\nDon\u2019ttrythisathome,kids!\n2.2.18 What does the slash(/) in the parameter list of a function mean?\nA slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-\nonlyparametersaretheoneswithoutanexternallyusablename. Uponcallingafunctionthatacceptspositional-only\nparameters,argumentsaremappedtoparametersbasedsolelyontheirposition. Forexample,divmod()isafunction\nthatacceptspositional-onlyparameters. Itsdocumentationlookslikethis:\n>>> help(divmod)\nHelp on built-in function divmod in module builtins:\ndivmod(x, y, /)\nReturn the tuple (x//y, x%y). Invariant: div*y + mod == x.\nTheslashattheendoftheparameterlistmeansthatbothparametersarepositional-only. Thus,callingdivmod()\nwithkeywordargumentswouldleadtoanerror:\n>>> divmod(x=3, y=4)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: divmod() takes no keyword arguments\n2.2. CoreLanguage 17\nPythonFrequentlyAskedQuestions,Release3.13.3\n2.3 Numbers and strings\n2.3.1 How do I specify hexadecimal and octal integers?\nTospecifyanoctaldigit,precedetheoctalvaluewithazero,andthenaloweroruppercase\u201co\u201d. Forexample,toset\nthevariable\u201ca\u201dtotheoctalvalue\u201c10\u201d(8indecimal),type:\n>>> a = 0o10\n>>> a\n8\nHexadecimalisjustaseasy. Simplyprecedethehexadecimalnumberwithazero,andthenaloweroruppercase\u201cx\u201d.\nHexadecimaldigitscanbespecifiedinloweroruppercase. Forexample,inthePythoninterpreter:\n>>> a = 0xa5\n>>> a\n165\n>>> b = 0XB2\n>>> b\n178\n2.3.2 Why does -22 // 10 return -3?\nIt\u2019sprimarilydrivenbythedesirethati % jhavethesamesignasj. Ifyouwantthat,andalsowant:\ni == (i // j) * j + (i % j)\nthenintegerdivisionhastoreturnthefloor. Calsorequiresthatidentitytohold,andthencompilersthattruncatei\n// jneedtomakei % jhavethesamesignasi.\nTherearefewrealusecasesfori % jwhenjisnegative. Whenjispositive,therearemany,andinvirtuallyallof\nthemit\u2019smoreusefulfori % jtobe>= 0. Iftheclocksays10now,whatdiditsay200hoursago? -190 % 12\n== 2isuseful;-190 % 12 == -10isabugwaitingtobite.\n2.3.3 How do I get int literal attribute instead of SyntaxError?\nTryingtolookupanintliteralattributeinthenormalmannergivesaSyntaxErrorbecausetheperiodisseenas\nadecimalpoint:\n>>> 1.__class__\nFile \"<stdin>\", line 1\n1.__class__\n^\nSyntaxError: invalid decimal literal\nThesolutionistoseparatetheliteralfromtheperiodwitheitheraspaceorparentheses.\n>>> 1 .__class__\n<class 'int'>\n>>> (1).__class__\n<class 'int'>\n2.3.4 How do I convert a string to a number?\nForintegers,usethebuilt-inint()typeconstructor,e.g. int('144') == 144. Similarly,float()convertsto\nafloating-pointnumber,e.g. float('144') == 144.0.\nBydefault,theseinterpretthenumberasdecimal,sothatint('0144') == 144holdstrue,andint('0x144')\nraisesValueError. int(string, base)takesthebasetoconvertfromasasecondoptionalargument,soint(\n18 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n'0x144', 16) == 324. Ifthebaseisspecifiedas0,thenumberisinterpretedusingPython\u2019srules: aleading\u20180o\u2019\nindicatesoctal,and\u20180x\u2019indicatesahexnumber.\nDonotusethebuilt-infunctioneval()ifallyouneedistoconvertstringstonumbers. eval()willbesignificantly\nsloweranditpresentsasecurityrisk: someonecouldpassyouaPythonexpressionthatmighthaveunwantedside\neffects. Forexample,someonecouldpass__import__('os').system(\"rm -rf $HOME\")whichwoulderase\nyourhomedirectory.\neval()alsohastheeffectofinterpretingnumbersasPythonexpressions,sothate.g. eval('09')givesasyntax\nerrorbecausePythondoesnotallowleading\u20180\u2019inadecimalnumber(except\u20180\u2019).\n2.3.5 How do I convert a number to a string?\nTo convert, e.g., the number 144 to the string '144', use the built-in type constructor str(). If you want a\nhexadecimal or octal representation, use the built-in functions hex() or oct(). For fancy formatting, see the f-\nstringsandformatstringssections, e.g. \"{:04d}\".format(144)yields'0144'and\"{:.3f}\".format(1.0/\n3.0)yields'0.333'.\n2.3.6 How do I modify a string in place?\nYou can\u2019t, because strings are immutable. In most situations, you should simply construct a new string from the\nvarious parts you want to assemble it from. However, if you need an object with the ability to modify in-place\nunicodedata,tryusinganio.StringIOobjectorthearraymodule:\n>>> import io\n>>> s = \"Hello, world\"\n>>> sio = io.StringIO(s)\n>>> sio.getvalue()\n'Hello, world'\n>>> sio.seek(7)\n7\n>>> sio.write(\"there!\")\n6\n>>> sio.getvalue()\n'Hello, there!'\n>>> import array\n>>> a = array.array('w', s)\n>>> print(a)\narray('w', 'Hello, world')\n>>> a[0] = 'y'\n>>> print(a)\narray('w', 'yello, world')\n>>> a.tounicode()\n'yello, world'\n2.3.7 How do I use strings to call functions/methods?\nTherearevarioustechniques.\n\u2022 Thebestistouseadictionarythatmapsstringstofunctions. Theprimaryadvantageofthistechniqueisthat\nthestringsdonotneedtomatchthenamesofthefunctions. Thisisalsotheprimarytechniqueusedtoemulate\nacaseconstruct:\ndef a():\npass\ndef b():\npass\n(continuesonnextpage)\n2.3. Numbersandstrings 19\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\ndispatch = {'go': a, 'stop': b} # Note lack of parens for funcs\ndispatch[get_input()]() # Note trailing parens to call function\n\u2022 Usethebuilt-infunctiongetattr():\nimport foo\ngetattr(foo, 'bar')()\nNotethatgetattr()worksonanyobject,includingclasses,classinstances,modules,andsoon.\nThisisusedinseveralplacesinthestandardlibrary,likethis:\nclass Foo:\ndef do_foo(self):\n...\ndef do_bar(self):\n...\nf = getattr(foo_instance, 'do_' + opname)\nf()\n\u2022 Uselocals()toresolvethefunctionname:\ndef myFunc():\nprint(\"hello\")\nfname = \"myFunc\"\nf = locals()[fname]\nf()\n2.3.8 Is there an equivalent to Perl\u2019s chomp() for removing trailing newlines from\nstrings?\nYou can use S.rstrip(\"\\r\\n\") to remove all occurrences of any line terminator from the end of the string S\nwithoutremovingothertrailingwhitespace. IfthestringSrepresentsmorethanoneline,withseveralemptylinesat\ntheend,thelineterminatorsforalltheblanklineswillberemoved:\n>>> lines = (\"line 1 \\r\\n\"\n... \"\\r\\n\"\n... \"\\r\\n\")\n>>> lines.rstrip(\"\\n\\r\")\n'line 1 '\nSincethisistypicallyonlydesiredwhenreadingtextonelineatatime,usingS.rstrip()thiswayworkswell.\n2.3.9 Is there a scanf() or sscanf() equivalent?\nNotassuch.\nForsimpleinputparsing,theeasiestapproachisusuallytosplitthelineintowhitespace-delimitedwordsusingthe\nsplit() method of string objects and then convert decimal strings to numeric values using int() or float().\nsplit()supportsanoptional\u201csep\u201dparameterwhichisusefulifthelineusessomethingotherthanwhitespaceasa\nseparator.\n20 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\nFormorecomplicatedinputparsing,regularexpressionsaremorepowerfulthanC\u2019ssscanfandbettersuitedfor\nthetask.\n2.3.10 What does UnicodeDecodeError or UnicodeEncodeError error mean?\nSeetheunicode-howto.\n2.3.11 Can I end a raw string with an odd number of backslashes?\nArawstringendingwithanoddnumberofbackslasheswillescapethestring\u2019squote:\n>>> r'C:\\this\\will\\not\\work\\'\nFile \"<stdin>\", line 1\nr'C:\\this\\will\\not\\work\\'\n^\nSyntaxError: unterminated string literal (detected at line 1)\nThereareseveralworkaroundsforthis. Oneistouseregularstringsanddoublethebackslashes:\n>>> 'C:\\\\this\\\\will\\\\work\\\\'\n'C:\\\\this\\\\will\\\\work\\\\'\nAnotheristoconcatenatearegularstringcontaininganescapedbackslashtotherawstring:\n>>> r'C:\\this\\will\\work' '\\\\'\n'C:\\\\this\\\\will\\\\work\\\\'\nItisalsopossibletouseos.path.join()toappendabackslashonWindows:\n>>> os.path.join(r'C:\\this\\will\\work', '')\n'C:\\\\this\\\\will\\\\work\\\\'\nNote that while a backslash will \u201cescape\u201d a quote for the purposes of determining where the raw string ends, no\nescapingoccurswheninterpretingthevalueoftherawstring. Thatis,thebackslashremainspresentinthevalueof\ntherawstring:\n>>> r'backslash\\'preserved'\n\"backslash\\\\'preserved\"\nAlsoseethespecificationinthelanguagereference.\n2.4 Performance\n2.4.1 My program is too slow. How do I speed it up?\nThat\u2019satoughone,ingeneral. First,herearealistofthingstorememberbeforedivingfurther:\n\u2022 PerformancecharacteristicsvaryacrossPythonimplementations. ThisFAQfocusesonCPython.\n\u2022 Behaviourcanvaryacrossoperatingsystems,especiallywhentalkingaboutI/Oormulti-threading.\n\u2022 Youshouldalwaysfindthehotspotsinyourprogrambeforeattemptingtooptimizeanycode(seetheprofile\nmodule).\n\u2022 Writingbenchmarkscriptswillallowyoutoiteratequicklywhensearchingforimprovements(seethetimeit\nmodule).\n\u2022 It is highly recommended to have good code coverage (through unit testing or any other technique) before\npotentiallyintroducingregressionshiddeninsophisticatedoptimizations.\nThatbeingsaid,therearemanytrickstospeedupPythoncode. Herearesomegeneralprincipleswhichgoalong\nwaytowardsreachingacceptableperformancelevels:\n2.4. Performance 21\nPythonFrequentlyAskedQuestions,Release3.13.3\n\u2022 Makingyouralgorithmsfaster(orchangingtofasterones)canyieldmuchlargerbenefitsthantryingtosprinkle\nmicro-optimizationtricksalloveryourcode.\n\u2022 Usetherightdatastructures. Studydocumentationforthebltin-typesandthecollectionsmodule.\n\u2022 Whenthestandardlibraryprovidesaprimitivefordoingsomething,itislikely(althoughnotguaranteed)to\nbefasterthananyalternativeyoumaycomeupwith. ThisisdoublytrueforprimitiveswritteninC,suchas\nbuiltinsandsomeextensiontypes. Forexample,besuretouseeitherthelist.sort()built-inmethodor\ntherelatedsorted()functiontodosorting(andseethesortinghowtoforexamplesofmoderatelyadvanced\nusage).\n\u2022 Abstractions tend to create indirections and force the interpreter to work more. If the levels of indirection\noutweightheamountofusefulworkdone,yourprogramwillbeslower. Youshouldavoidexcessiveabstraction,\nespeciallyundertheformoftinyfunctionsormethods(whicharealsooftendetrimentaltoreadability).\nIfyouhavereachedthelimitofwhatpurePythoncanallow,therearetoolstotakeyoufurtheraway. Forexample,\nCythoncancompileaslightlymodifiedversionofPythoncodeintoaCextension,andcanbeusedonmanydifferent\nplatforms. Cythoncantakeadvantageofcompilation(andoptionaltypeannotations)tomakeyourcodesignificantly\nfasterthanwheninterpreted. IfyouareconfidentinyourCprogrammingskills, youcanalsowriteaCextension\nmoduleyourself.\n(cid:181) Seealso\nThewikipagedevotedtoperformancetips.\n2.4.2 What is the most efficient way to concatenate many strings together?\nstrandbytesobjectsareimmutable,thereforeconcatenatingmanystringstogetherisinefficientaseachconcate-\nnationcreatesanewobject. Inthegeneralcase,thetotalruntimecostisquadraticinthetotalstringlength.\nToaccumulatemanystrobjects,therecommendedidiomistoplacethemintoalistandcallstr.join()atthe\nend:\nchunks = []\nfor s in my_strings:\nchunks.append(s)\nresult = ''.join(chunks)\n(anotherreasonablyefficientidiomistouseio.StringIO)\nToaccumulatemanybytesobjects,therecommendedidiomistoextendabytearrayobjectusingin-placecon-\ncatenation(the+=operator):\nresult = bytearray()\nfor b in my_bytes_objects:\nresult += b\n2.5 Sequences (Tuples/Lists)\n2.5.1 How do I convert between tuples and lists?\nThetypeconstructortuple(seq)convertsanysequence(actually,anyiterable)intoatuplewiththesameitemsin\nthesameorder.\nForexample,tuple([1, 2, 3])yields(1, 2, 3)andtuple('abc')yields('a', 'b', 'c'). Ifthear-\ngumentisatuple,itdoesnotmakeacopybutreturnsthesameobject,soitischeaptocalltuple()whenyouaren\u2019t\nsurethatanobjectisalreadyatuple.\nThe type constructor list(seq) converts any sequence or iterable into a list with the same items in the same\norder. Forexample,list((1, 2, 3))yields[1, 2, 3]andlist('abc')yields['a', 'b', 'c']. Ifthe\nargumentisalist,itmakesacopyjustlikeseq[:] would.\n22 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n2.5.2 What\u2019s a negative index?\nPythonsequencesareindexedwithpositivenumbersandnegativenumbers. Forpositivenumbers0isthefirstindex\n1isthesecondindexandsoforth. Fornegativeindices-1isthelastindexand-2isthepenultimate(nexttolast)\nindexandsoforth. Thinkofseq[-n]asthesameasseq[len(seq)-n].\nUsingnegativeindicescanbeveryconvenient. ForexampleS[:-1]isallofthestringexceptforitslastcharacter,\nwhichisusefulforremovingthetrailingnewlinefromastring.\n2.5.3 How do I iterate over a sequence in reverse order?\nUsethereversed()built-infunction:\nfor x in reversed(sequence):\n... # do something with x ...\nThiswon\u2019ttouchyouroriginalsequence,butbuildanewcopywithreversedordertoiterateover.\n2.5.4 How do you remove duplicates from a list?\nSeethePythonCookbookforalongdiscussionofmanywaystodothis:\nhttps://code.activestate.com/recipes/52560/\nIfyoudon\u2019tmindreorderingthelist,sortitandthenscanfromtheendofthelist,deletingduplicatesasyougo:\nif mylist:\nmylist.sort()\nlast = mylist[-1]\nfor i in range(len(mylist)-2, -1, -1):\nif last == mylist[i]:\ndel mylist[i]\nelse:\nlast = mylist[i]\nIfallelementsofthelistmaybeusedassetkeys(i.e. theyareallhashable)thisisoftenfaster\nmylist = list(set(mylist))\nThisconvertsthelistintoaset,therebyremovingduplicates,andthenbackintoalist.\n2.5.5 How do you remove multiple items from a list\nAswithremovingduplicates,explicitlyiteratinginreversewithadeleteconditionisonepossibility. However,itis\neasierandfastertouseslicereplacementwithanimplicitorexplicitforwarditeration. Herearethreevariations.:\nmylist[:] = filter(keep_function, mylist)\nmylist[:] = (x for x in mylist if keep_condition)\nmylist[:] = [x for x in mylist if keep_condition]\nThelistcomprehensionmaybefastest.\n2.5.6 How do you make an array in Python?\nUsealist:\n[\"this\", 1, \"is\", \"an\", \"array\"]\nListsareequivalenttoCorPascalarraysintheirtimecomplexity; theprimarydifferenceisthataPythonlistcan\ncontainobjectsofmanydifferenttypes.\n2.5. Sequences(Tuples/Lists) 23\nPythonFrequentlyAskedQuestions,Release3.13.3\nThearraymodulealsoprovidesmethodsforcreatingarraysoffixedtypeswithcompactrepresentations,butthey\nareslowertoindexthanlists. AlsonotethatNumPyandotherthirdpartypackagesdefinearray-likestructureswith\nvariouscharacteristicsaswell.\nTogetLisp-stylelinkedlists,youcanemulateconscellsusingtuples:\nlisp_list = (\"like\", (\"this\", (\"example\", None) ) )\nIfmutabilityisdesired,youcoulduselistsinsteadoftuples. HeretheanalogueofaLispcarislisp_list[0]and\ntheanalogueofcdrislisp_list[1]. Onlydothisifyou\u2019resureyoureallyneedto,becauseit\u2019susuallyalotslower\nthanusingPythonlists.\n2.5.7 How do I create a multidimensional list?\nYouprobablytriedtomakeamultidimensionalarraylikethis:\n>>> A = [[None] * 2] * 3\nThislookscorrectifyouprintit:\n>>> A\n[[None, None], [None, None], [None, None]]\nButwhenyouassignavalue,itshowsupinmultipleplaces:\n>>> A[0][0] = 5\n>>> A\n[[5, None], [5, None], [5, None]]\nThereasonisthatreplicatingalistwith*doesn\u2019tcreatecopies,itonlycreatesreferencestotheexistingobjects. The\n*3 creates a list containing 3 references to the same list of length two. Changes to one row will show in all rows,\nwhichisalmostcertainlynotwhatyouwant.\nThesuggestedapproachistocreatealistofthedesiredlengthfirstandthenfillineachelementwithanewlycreated\nlist:\nA = [None] * 3\nfor i in range(3):\nA[i] = [None] * 2\nThisgeneratesalistcontaining3differentlistsoflengthtwo. Youcanalsousealistcomprehension:\nw, h = 2, 3\nA = [[None] * w for i in range(h)]\nOr,youcanuseanextensionthatprovidesamatrixdatatype;NumPyisthebestknown.\n2.5.8 How do I apply a method or function to a sequence of objects?\nTocallamethodorfunctionandaccumulatethereturnvaluesisalist,alistcomprehensionisanelegantsolution:\nresult = [obj.method() for obj in mylist]\nresult = [function(obj) for obj in mylist]\nTojustrunthemethodorfunctionwithoutsavingthereturnvalues,aplainforloopwillsuffice:\nfor obj in mylist:\nobj.method()\n(continuesonnextpage)\n24 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nfor obj in mylist:\nfunction(obj)\n2.5.9 Whydoesa_tuple[i]+=[\u2018item\u2019]raiseanexceptionwhentheadditionworks?\nThisisbecauseofacombinationofthefactthataugmentedassignmentoperatorsareassignmentoperators,andthe\ndifferencebetweenmutableandimmutableobjectsinPython.\nThisdiscussionappliesingeneralwhenaugmentedassignmentoperatorsareappliedtoelementsofatuplethatpoint\ntomutableobjects,butwe\u2019llusealistand+=asourexemplar.\nIfyouwrote:\n>>> a_tuple = (1, 2)\n>>> a_tuple[0] += 1\nTraceback (most recent call last):\n...\nTypeError: 'tuple' object does not support item assignment\nThe reason for the exception should be immediately clear: 1 is added to the object a_tuple[0] points to (1),\nproducingtheresultobject,2,butwhenweattempttoassigntheresultofthecomputation,2,toelement0ofthe\ntuple,wegetanerrorbecausewecan\u2019tchangewhatanelementofatuplepointsto.\nUnderthecovers,whatthisaugmentedassignmentstatementisdoingisapproximatelythis:\n>>> result = a_tuple[0] + 1\n>>> a_tuple[0] = result\nTraceback (most recent call last):\n...\nTypeError: 'tuple' object does not support item assignment\nItistheassignmentpartoftheoperationthatproducestheerror,sinceatupleisimmutable.\nWhenyouwritesomethinglike:\n>>> a_tuple = (['foo'], 'bar')\n>>> a_tuple[0] += ['item']\nTraceback (most recent call last):\n...\nTypeError: 'tuple' object does not support item assignment\nTheexceptionisabitmoresurprising,andevenmoresurprisingisthefactthateventhoughtherewasanerror,the\nappendworked:\n>>> a_tuple[0]\n['foo', 'item']\nTo see why this happens, you need to know that (a) if an object implements an __iadd__() magic method, it\ngetscalledwhenthe+=augmentedassignmentisexecuted,anditsreturnvalueiswhatgetsusedintheassignment\nstatement;and(b)forlists,__iadd__()isequivalenttocallingextend()onthelistandreturningthelist. That\u2019s\nwhywesaythatforlists,+=isa\u201cshorthand\u201dforlist.extend():\n>>> a_list = []\n>>> a_list += [1]\n>>> a_list\n[1]\nThisisequivalentto:\n2.5. Sequences(Tuples/Lists) 25\nPythonFrequentlyAskedQuestions,Release3.13.3\n>>> result = a_list.__iadd__([1])\n>>> a_list = result\nTheobjectpointedtobya_listhasbeenmutated,andthepointertothemutatedobjectisassignedbacktoa_list.\nThe end result of the assignment is a no-op, since it is a pointer to the same object that a_list was previously\npointingto,buttheassignmentstillhappens.\nThus,inourtupleexamplewhatishappeningisequivalentto:\n>>> result = a_tuple[0].__iadd__(['item'])\n>>> a_tuple[0] = result\nTraceback (most recent call last):\n...\nTypeError: 'tuple' object does not support item assignment\nThe __iadd__() succeeds, and thus the list is extended, but even though result points to the same object that\na_tuple[0]alreadypointsto,thatfinalassignmentstillresultsinanerror,becausetuplesareimmutable.\n2.5.10 I want to do a complicated sort: can you do a Schwartzian Transform in\nPython?\nThetechnique,attributedtoRandalSchwartzofthePerlcommunity,sortstheelementsofalistbyametricwhich\nmapseachelementtoits\u201csortvalue\u201d. InPython,usethekeyargumentforthelist.sort()method:\nIsorted = L[:]\nIsorted.sort(key=lambda s: int(s[10:15]))\n2.5.11 How can I sort one list by values from another list?\nMergethemintoaniteratoroftuples,sorttheresultinglist,andthenpickouttheelementyouwant.\n>>> list1 = [\"what\", \"I'm\", \"sorting\", \"by\"]\n>>> list2 = [\"something\", \"else\", \"to\", \"sort\"]\n>>> pairs = zip(list1, list2)\n>>> pairs = sorted(pairs)\n>>> pairs\n[(\"I'm\", 'else'), ('by', 'sort'), ('sorting', 'to'), ('what', 'something')]\n>>> result = [x[1] for x in pairs]\n>>> result\n['else', 'sort', 'to', 'something']\n2.6 Objects\n2.6.1 What is a class?\nAclassistheparticularobjecttypecreatedbyexecutingaclassstatement. Classobjectsareusedastemplatesto\ncreateinstanceobjects,whichembodyboththedata(attributes)andcode(methods)specifictoadatatype.\nAclasscanbebasedononeormoreotherclasses,calleditsbaseclass(es). Ittheninheritstheattributesandmeth-\nods of its base classes. This allows an object model to be successively refined by inheritance. You might have a\ngenericMailboxclassthatprovidesbasicaccessormethodsforamailbox,andsubclassessuchasMboxMailbox,\nMaildirMailbox,OutlookMailboxthathandlevariousspecificmailboxformats.\n26 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n2.6.2 What is a method?\nAmethodisafunctiononsomeobjectxthatyounormallycallasx.name(arguments...). Methodsaredefined\nasfunctionsinsidetheclassdefinition:\nclass C:\ndef meth(self, arg):\nreturn arg * 2 + self.attribute\n2.6.3 What is self?\nSelfismerelyaconventionalnameforthefirstargumentofamethod. Amethoddefinedasmeth(self, a, b,\nc)shouldbecalledasx.meth(a, b, c)forsomeinstancexoftheclassinwhichthedefinitionoccurs;thecalled\nmethodwillthinkitiscalledasmeth(x, a, b, c).\nSeealsoWhymust\u2018self\u2019beusedexplicitlyinmethoddefinitionsandcalls?.\n2.6.4 How do I check if an object is an instance of a given class or of a subclass\nof it?\nUse the built-in function isinstance(obj, cls). You can check if an object is an instance of any of a num-\nber of classes by providing a tuple instead of a single class, e.g. isinstance(obj, (class1, class2, ..\n.)), and can also check whether an object is one of Python\u2019s built-in types, e.g. isinstance(obj, str) or\nisinstance(obj, (int, float, complex)).\nNote that isinstance() also checks for virtual inheritance from an abstract base class. So, the test will return\nTrueforaregisteredclassevenifhasn\u2019tdirectlyorindirectlyinheritedfromit. Totestfor\u201ctrueinheritance\u201d,scan\ntheMROoftheclass:\nfrom collections.abc import Mapping\nclass P:\npass\nclass C(P):\npass\nMapping.register(P)\n>>> c = C()\n>>> isinstance(c, C) # direct\nTrue\n>>> isinstance(c, P) # indirect\nTrue\n>>> isinstance(c, Mapping) # virtual\nTrue\n# Actual inheritance chain\n>>> type(c).__mro__\n(<class 'C'>, <class 'P'>, <class 'object'>)\n# Test for \"true inheritance\"\n>>> Mapping in type(c).__mro__\nFalse\nNotethatmostprogramsdonotuseisinstance()onuser-definedclassesveryoften. Ifyouaredevelopingthe\nclassesyourself,amoreproperobject-orientedstyleistodefinemethodsontheclassesthatencapsulateaparticular\nbehaviour,insteadofcheckingtheobject\u2019sclassanddoingadifferentthingbasedonwhatclassitis. Forexample,if\nyouhaveafunctionthatdoessomething:\n2.6. Objects 27\nPythonFrequentlyAskedQuestions,Release3.13.3\ndef search(obj):\nif isinstance(obj, Mailbox):\n... # code to search a mailbox\nelif isinstance(obj, Document):\n... # code to search a document\nelif ...\nAbetterapproachistodefineasearch()methodonalltheclassesandjustcallit:\nclass Mailbox:\ndef search(self):\n... # code to search a mailbox\nclass Document:\ndef search(self):\n... # code to search a document\nobj.search()\n2.6.5 What is delegation?\nDelegationisanobjectorientedtechnique(alsocalledadesignpattern). Let\u2019ssayyouhaveanobjectxandwantto\nchangethebehaviourofjustoneofitsmethods. Youcancreateanewclassthatprovidesanewimplementationof\nthemethodyou\u2019reinterestedinchanginganddelegatesallothermethodstothecorrespondingmethodofx.\nPython programmers can easily implement delegation. For example, the following class implements a class that\nbehaveslikeafilebutconvertsallwrittendatatouppercase:\nclass UpperOut:\ndef __init__(self, outfile):\nself._outfile = outfile\ndef write(self, s):\nself._outfile.write(s.upper())\ndef __getattr__(self, name):\nreturn getattr(self._outfile, name)\nHeretheUpperOutclassredefinesthewrite()methodtoconverttheargumentstringtouppercasebeforecall-\ningtheunderlyingself._outfile.write()method. Allothermethodsaredelegatedtotheunderlyingself.\n_outfileobject. Thedelegationisaccomplishedviathe__getattr__()method;consultthelanguagereference\nformoreinformationaboutcontrollingattributeaccess.\nNote that for more general cases delegation can get trickier. When attributes must be set as well as retrieved,\nthe class must define a __setattr__() method too, and it must do so carefully. The basic implementation of\n__setattr__()isroughlyequivalenttothefollowing:\nclass X:\n...\ndef __setattr__(self, name, value):\nself.__dict__[name] = value\n...\nMany__setattr__()implementationscallobject.__setattr__()tosetanattributeonselfwithoutcausing\ninfiniterecursion:\n28 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\nclass X:\ndef __setattr__(self, name, value):\n# Custom logic here...\nobject.__setattr__(self, name, value)\nAlternatively,itispossibletosetattributesbyinsertingentriesintoself.__dict__directly.\n2.6.6 How do I call a method defined in a base class from a derived class that\nextends it?\nUsethebuilt-insuper()function:\nclass Derived(Base):\ndef meth(self):\nsuper().meth() # calls Base.meth\nIntheexample,super()willautomaticallydeterminetheinstancefromwhichitwascalled(theselfvalue),look\nupthemethodresolutionorder (MRO)withtype(self).__mro__,andreturnthenextinlineafterDerivedin\ntheMRO:Base.\n2.6.7 How can I organize my code to make it easier to change the base class?\nYoucouldassignthebaseclasstoanaliasandderivefromthealias. Thenallyouhavetochangeisthevalueassigned\ntothealias. Incidentally,thistrickisalsohandyifyouwanttodecidedynamically(e.g. dependingonavailabilityof\nresources)whichbaseclasstouse. Example:\nclass Base:\n...\nBaseAlias = Base\nclass Derived(BaseAlias):\n...\n2.6.8 How do I create static class data and static class methods?\nBothstaticdataandstaticmethods(inthesenseofC++orJava)aresupportedinPython.\nForstaticdata,simplydefineaclassattribute. Toassignanewvaluetotheattribute,youhavetoexplicitlyusethe\nclassnameintheassignment:\nclass C:\ncount = 0 # number of times C.__init__ called\ndef __init__(self):\nC.count = C.count + 1\ndef getcount(self):\nreturn C.count # or return self.count\nc.countalsoreferstoC.countforanycsuchthatisinstance(c, C)holds,unlessoverriddenbycitselforby\nsomeclassonthebase-classsearchpathfromc.__class__backtoC.\nCaution: withinamethodofC,anassignmentlikeself.count = 42createsanewandunrelatedinstancenamed\n\u201ccount\u201d in self\u2019s own dict. Rebinding of a class-static data name must always specify the class whether inside a\nmethodornot:\nC.count = 314\n2.6. Objects 29\nPythonFrequentlyAskedQuestions,Release3.13.3\nStaticmethodsarepossible:\nclass C:\n@staticmethod\ndef static(arg1, arg2, arg3):\n# No 'self' parameter!\n...\nHowever,afarmorestraightforwardwaytogettheeffectofastaticmethodisviaasimplemodule-levelfunction:\ndef getcount():\nreturn C.count\nIfyourcodeisstructuredsoastodefineoneclass(ortightlyrelatedclasshierarchy)permodule, thissuppliesthe\ndesiredencapsulation.\n2.6.9 How can I overload constructors (or methods) in Python?\nThisansweractuallyappliestoallmethods,butthequestionusuallycomesupfirstinthecontextofconstructors.\nInC++you\u2019dwrite\nclass C {\nC() { cout << \"No arguments\\n\"; }\nC(int i) { cout << \"Argument is \" << i << \"\\n\"; }\n}\nInPythonyouhavetowriteasingleconstructorthatcatchesallcasesusingdefaultarguments. Forexample:\nclass C:\ndef __init__(self, i=None):\nif i is None:\nprint(\"No arguments\")\nelse:\nprint(\"Argument is\", i)\nThisisnotentirelyequivalent,butcloseenoughinpractice.\nYoucouldalsotryavariable-lengthargumentlist,e.g.\ndef __init__(self, *args):\n...\nThesameapproachworksforallmethoddefinitions.\n2.6.10 I try to use __spam and I get an error about _SomeClassName__spam.\nVariablenameswithdoubleleadingunderscoresare\u201cmangled\u201dtoprovideasimplebuteffectivewaytodefineclass\nprivatevariables. Anyidentifieroftheform__spam(atleasttwoleadingunderscores,atmostonetrailingunder-\nscore)istextuallyreplacedwith_classname__spam,whereclassnameisthecurrentclassnamewithanyleading\nunderscoresstripped.\nTheidentifiercanbeusedunchangedwithintheclass,buttoaccessitoutsidetheclass,themanglednamemustbe\nused:\nclass A:\ndef __one(self):\nreturn 1\ndef two(self):\nreturn 2 * self.__one()\n(continuesonnextpage)\n30 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nclass B(A):\ndef three(self):\nreturn 3 * self._A__one()\nfour = 4 * A()._A__one()\nInparticular,thisdoesnotguaranteeprivacysinceanoutsideusercanstilldeliberatelyaccesstheprivateattribute;\nmanyPythonprogrammersneverbothertouseprivatevariablenamesatall.\n(cid:181) Seealso\nTheprivatenamemanglingspecificationsfordetailsandspecialcases.\n2.6.11 My class defines __del__ but it is not called when I delete the object.\nThereareseveralpossiblereasonsforthis.\nThedelstatementdoesnotnecessarilycall__del__()\u2013itsimplydecrementstheobject\u2019sreferencecount,andif\nthisreacheszero__del__()iscalled.\nIfyourdatastructurescontaincircularlinks(e.g. atreewhereeachchildhasaparentreferenceandeachparenthas\nalistofchildren)thereferencecountswillnevergobacktozero. OnceinawhilePythonrunsanalgorithmtodetect\nsuchcycles,butthegarbagecollectormightrunsometimeafterthelastreferencetoyourdatastructurevanishes,so\nyour__del__()methodmaybecalledataninconvenientandrandomtime. Thisisinconvenientifyou\u2019retrying\ntoreproduceaproblem. Worse,theorderinwhichobject\u2019s__del__()methodsareexecutedisarbitrary. Youcan\nrungc.collect()toforceacollection,buttherearepathologicalcaseswhereobjectswillneverbecollected.\nDespitethecyclecollector,it\u2019sstillagoodideatodefineanexplicitclose()methodonobjectstobecalledwhen-\neveryou\u2019redonewiththem. Theclose() methodcanthenremoveattributesthatrefertosubobjects. Don\u2019tcall\n__del__()directly\u2013__del__()shouldcallclose()andclose()shouldmakesurethatitcanbecalledmore\nthanonceforthesameobject.\nAnotherwaytoavoidcyclicalreferencesistousetheweakrefmodule,whichallowsyoutopointtoobjectswithout\nincrementingtheirreferencecount. Treedatastructures,forinstance,shoulduseweakreferencesfortheirparentand\nsiblingreferences(iftheyneedthem!).\nFinally,ifyour__del__()methodraisesanexception,awarningmessageisprintedtosys.stderr.\n2.6.12 How do I get a list of all instances of a given class?\nPythondoesnotkeeptrackofallinstancesofaclass(orofabuilt-intype). Youcanprogramtheclass\u2019sconstructor\ntokeeptrackofallinstancesbykeepingalistofweakreferencestoeachinstance.\n2.6.13 Why does the result of id() appear to be not unique?\nTheid()builtinreturnsanintegerthatisguaranteedtobeuniqueduringthelifetimeoftheobject. SinceinCPython,\nthisistheobject\u2019smemoryaddress,ithappensfrequentlythatafteranobjectisdeletedfrommemory,thenextfreshly\ncreatedobjectisallocatedatthesamepositioninmemory. Thisisillustratedbythisexample:\n>>> id(1000)\n13901272\n>>> id(2000)\n13901272\nThetwoidsbelongtodifferentintegerobjectsthatarecreatedbefore,anddeletedimmediatelyafterexecutionofthe\nid()call. Tobesurethatobjectswhoseidyouwanttoexaminearestillalive,createanotherreferencetotheobject:\n2.6. Objects 31\nPythonFrequentlyAskedQuestions,Release3.13.3\n>>> a = 1000; b = 2000\n>>> id(a)\n13901272\n>>> id(b)\n13891296\n2.6.14 When can I rely on identity tests with the is operator?\nTheisoperatortestsforobjectidentity. Thetesta is bisequivalenttoid(a) == id(b).\nThemostimportantpropertyofanidentitytestisthatanobjectisalwaysidenticaltoitself,a is aalwaysreturns\nTrue. Identitytestsareusuallyfasterthanequalitytests. Andunlikeequalitytests,identitytestsareguaranteedto\nreturnabooleanTrueorFalse.\nHowever,identitytestscanonlybesubstitutedforequalitytestswhenobjectidentityisassured. Generally,thereare\nthreecircumstanceswhereidentityisguaranteed:\n1) Assignments create new names but do not change object identity. After the assignment new = old, it is\nguaranteedthatnew is old.\n2) Putting an object in a container that stores object references does not change object identity. After the list\nassignments[0] = x,itisguaranteedthats[0] is x.\n3) Ifanobjectisasingleton,itmeansthatonlyoneinstanceofthatobjectcanexist. Aftertheassignmentsa =\nNoneandb = None,itisguaranteedthata is bbecauseNoneisasingleton.\nInmostothercircumstances,identitytestsareinadvisableandequalitytestsarepreferred. Inparticular,identitytests\nshouldnotbeusedtocheckconstantssuchasintandstrwhicharen\u2019tguaranteedtobesingletons:\n>>> a = 1000\n>>> b = 500\n>>> c = b + 500\n>>> a is c\nFalse\n>>> a = 'Python'\n>>> b = 'Py'\n>>> c = b + 'thon'\n>>> a is c\nFalse\nLikewise,newinstancesofmutablecontainersareneveridentical:\n>>> a = []\n>>> b = []\n>>> a is b\nFalse\nInthestandardlibrarycode,youwillseeseveralcommonpatternsforcorrectlyusingidentitytests:\n1) As recommended by PEP 8, an identity test is the preferred way to check for None. This reads like plain\nEnglishincodeandavoidsconfusionwithotherobjectsthatmayhavebooleanvaluesthatevaluatetofalse.\n2) Detecting optional arguments can be tricky when None is a valid input value. In those situations, you can\ncreate a singleton sentinel object guaranteed to be distinct from other objects. For example, here is how to\nimplementamethodthatbehaveslikedict.pop():\n_sentinel = object()\ndef pop(self, key, default=_sentinel):\nif key in self:\n(continuesonnextpage)\n32 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nvalue = self[key]\ndel self[key]\nreturn value\nif default is _sentinel:\nraise KeyError(key)\nreturn default\n3) Container implementations sometimes need to augment equality tests with identity tests. This prevents the\ncodefrombeingconfusedbyobjectssuchasfloat('NaN')thatarenotequaltothemselves.\nForexample,hereistheimplementationofcollections.abc.Sequence.__contains__():\ndef __contains__(self, value):\nfor v in self:\nif v is value or v == value:\nreturn True\nreturn False\n2.6.15 Howcanasubclasscontrolwhatdataisstoredinanimmutableinstance?\nWhensubclassinganimmutabletype,overridethe__new__()methodinsteadofthe__init__()method. The\nlatteronlyrunsafteraninstanceiscreated,whichistoolatetoalterdatainanimmutableinstance.\nAlloftheseimmutableclasseshaveadifferentsignaturethantheirparentclass:\nfrom datetime import date\nclass FirstOfMonthDate(date):\n\"Always choose the first day of the month\"\ndef __new__(cls, year, month, day):\nreturn super().__new__(cls, year, month, 1)\nclass NamedInt(int):\n\"Allow text names for some numbers\"\nxlat = {'zero': 0, 'one': 1, 'ten': 10}\ndef __new__(cls, value):\nvalue = cls.xlat.get(value, value)\nreturn super().__new__(cls, value)\nclass TitleStr(str):\n\"Convert str to name suitable for a URL path\"\ndef __new__(cls, s):\ns = s.lower().replace(' ', '-')\ns = ''.join([c for c in s if c.isalnum() or c == '-'])\nreturn super().__new__(cls, s)\nTheclassescanbeusedlikethis:\n>>> FirstOfMonthDate(2012, 2, 14)\nFirstOfMonthDate(2012, 2, 1)\n>>> NamedInt('ten')\n10\n>>> NamedInt(20)\n20\n>>> TitleStr('Blog: Why Python Rocks')\n'blog-why-python-rocks'\n2.6. Objects 33\nPythonFrequentlyAskedQuestions,Release3.13.3\n2.6.16 How do I cache method calls?\nThe two principal tools for caching methods are functools.cached_property() and functools.\nlru_cache(). Theformerstoresresultsattheinstancelevelandthelatterattheclasslevel.\nThecached_propertyapproachonlyworkswithmethodsthatdonottakeanyarguments. Itdoesnotcreateareference\ntotheinstance. Thecachedmethodresultwillbekeptonlyaslongastheinstanceisalive.\nTheadvantageisthatwhenaninstanceisnolongerused,thecachedmethodresultwillbereleasedrightaway. The\ndisadvantage is that if instances accumulate, so too will the accumulated method results. They can grow without\nbound.\nThe lru_cache approach works with methods that have hashable arguments. It creates a reference to the instance\nunlessspecialeffortsaremadetopassinweakreferences.\nTheadvantageoftheleastrecentlyusedalgorithmisthatthecacheisboundedbythespecifiedmaxsize. Thedisad-\nvantageisthatinstancesarekeptaliveuntiltheyageoutofthecacheoruntilthecacheiscleared.\nThisexampleshowsthevarioustechniques:\nclass Weather:\n\"Lookup weather information on a government website\"\ndef __init__(self, station_id):\nself._station_id = station_id\n# The _station_id is private and immutable\ndef current_temperature(self):\n\"Latest hourly observation\"\n# Do not cache this because old results\n# can be out of date.\n@cached_property\ndef location(self):\n\"Return the longitude/latitude coordinates of the station\"\n# Result only depends on the station_id\n@lru_cache(maxsize=20)\ndef historic_rainfall(self, date, units='mm'):\n\"Rainfall on a given date\"\n# Depends on the station_id, date, and units.\nThe above example assumes that the station_id never changes. If the relevant instance attributes are mutable, the\ncached_propertyapproachcan\u2019tbemadetoworkbecauseitcannotdetectchangestotheattributes.\nTomakethelru_cacheapproachworkwhenthestation_id ismutable,theclassneedstodefinethe__eq__()and\n__hash__()methodssothatthecachecandetectrelevantattributeupdates:\nclass Weather:\n\"Example with a mutable station identifier\"\ndef __init__(self, station_id):\nself.station_id = station_id\ndef change_station(self, station_id):\nself.station_id = station_id\ndef __eq__(self, other):\nreturn self.station_id == other.station_id\ndef __hash__(self):\n(continuesonnextpage)\n34 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nreturn hash(self.station_id)\n@lru_cache(maxsize=20)\ndef historic_rainfall(self, date, units='cm'):\n'Rainfall on a given date'\n# Depends on the station_id, date, and units.\n2.7 Modules\n2.7.1 How do I create a .pyc file?\nWhenamoduleisimportedforthefirsttime(orwhenthesourcefilehaschangedsincethecurrentcompiledfilewas\ncreated)a.pycfilecontainingthecompiledcodeshouldbecreatedina__pycache__subdirectoryofthedirectory\ncontainingthe.pyfile. The.pycfilewillhaveafilenamethatstartswiththesamenameasthe.pyfile,andends\nwith.pyc,withamiddlecomponentthatdependsontheparticularpythonbinarythatcreatedit. (SeePEP3147\nfordetails.)\nOnereasonthata .pycfilemaynotbecreatedisapermissionsproblemwiththedirectorycontainingthesource\nfile,meaningthatthe__pycache__subdirectorycannotbecreated. Thiscanhappen,forexample,ifyoudevelop\nasoneuserbutrunasanother,suchasifyouaretestingwithawebserver.\nUnlessthePYTHONDONTWRITEBYTECODEenvironmentvariableisset,creationofa.pycfileisautomaticifyou\u2019re\nimportingamoduleandPythonhastheability(permissions,freespace,etc\u2026)tocreatea__pycache__subdirectory\nandwritethecompiledmoduletothatsubdirectory.\nRunningPythononatoplevelscriptisnotconsideredanimportandno.pycwillbecreated. Forexample,ifyou\nhaveatop-levelmodulefoo.pythatimportsanothermodulexyz.py,whenyourunfoo(bytypingpython foo.\npyasashellcommand),a.pycwillbecreatedforxyzbecausexyzisimported,butno.pycfilewillbecreated\nforfoosincefoo.pyisn\u2019tbeingimported.\nIfyouneedtocreatea.pycfileforfoo\u2013thatis,tocreatea.pycfileforamodulethatisnotimported\u2013youcan,\nusingthepy_compileandcompileallmodules.\nThepy_compile modulecanmanuallycompileanymodule. Onewayisto use thecompile() functioninthat\nmoduleinteractively:\n>>> import py_compile\n>>> py_compile.compile('foo.py')\nThiswillwritethe.pyctoa__pycache__subdirectoryinthesamelocationasfoo.py(oryoucanoverridethat\nwiththeoptionalparametercfile).\nYoucanalsoautomaticallycompileallfilesinadirectoryordirectoriesusingthecompileallmodule. Youcando\nitfromtheshellpromptbyrunningcompileall.pyandprovidingthepathofadirectorycontainingPythonfiles\ntocompile:\npython -m compileall .\n2.7.2 How do I find the current module name?\nAmodulecanfindoutitsownmodulenamebylookingatthepredefinedglobalvariable__name__. Ifthishasthe\nvalue'__main__',theprogramisrunningasascript. Manymodulesthatareusuallyusedbyimportingthemalso\nprovideacommand-lineinterfaceoraself-test,andonlyexecutethiscodeafterchecking__name__:\ndef main():\nprint('Running test...')\n...\n(continuesonnextpage)\n2.7. Modules 35\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nif __name__ == '__main__':\nmain()\n2.7.3 How can I have modules that mutually import each other?\nSupposeyouhavethefollowingmodules:\nfoo.py:\nfrom bar import bar_var\nfoo_var = 1\nbar.py:\nfrom foo import foo_var\nbar_var = 2\nTheproblemisthattheinterpreterwillperformthefollowingsteps:\n\u2022 mainimportsfoo\n\u2022 Emptyglobalsforfooarecreated\n\u2022 fooiscompiledandstartsexecuting\n\u2022 fooimportsbar\n\u2022 Emptyglobalsforbararecreated\n\u2022 bariscompiledandstartsexecuting\n\u2022 barimportsfoo(whichisano-opsincetherealreadyisamodulenamedfoo)\n\u2022 Theimportmechanismtriestoreadfoo_varfromfooglobals,tosetbar.foo_var = foo.foo_var\nThelaststepfails,becausePythonisn\u2019tdonewithinterpretingfooyetandtheglobalsymboldictionaryforfoois\nstillempty.\nThesamethinghappenswhenyouuseimport foo,andthentrytoaccessfoo.foo_varinglobalcode.\nThereare(atleast)threepossibleworkaroundsforthisproblem.\nGuidovanRossumrecommends avoidingalluses of from <module> import ..., andplacingall codeinside\nfunctions. Initializationsofglobalvariablesandclassvariablesshoulduseconstantsorbuilt-infunctionsonly. This\nmeanseverythingfromanimportedmoduleisreferencedas<module>.<name>.\nJimRoskindsuggestsperformingstepsinthefollowingorderineachmodule:\n\u2022 exports(globals,functions,andclassesthatdon\u2019tneedimportedbaseclasses)\n\u2022 importstatements\n\u2022 activecode(includingglobalsthatareinitializedfromimportedvalues).\nVanRossumdoesn\u2019tlikethisapproachmuchbecausetheimportsappearinastrangeplace,butitdoeswork.\nMatthiasUrlichsrecommendsrestructuringyourcodesothattherecursiveimportisnotnecessaryinthefirstplace.\nThesesolutionsarenotmutuallyexclusive.\n2.7.4 __import__(\u2018x.y.z\u2019) returns <module \u2018x\u2019>; how do I get z?\nConsiderusingtheconveniencefunctionimport_module()fromimportlibinstead:\nz = importlib.import_module('x.y.z')\n36 Chapter2. ProgrammingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n2.7.5 When I edit an imported module and reimport it, the changes don\u2019t show\nup. Why does this happen?\nFor reasons of efficiency as well as consistency, Python only reads the module file on the first time a module is\nimported. Ifitdidn\u2019t,inaprogramconsistingofmanymoduleswhereeachoneimportsthesamebasicmodule,the\nbasicmodulewouldbeparsedandre-parsedmanytimes. Toforcere-readingofachangedmodule,dothis:\nimport importlib\nimport modname\nimportlib.reload(modname)\nWarning: thistechniqueisnot100%fool-proof. Inparticular,modulescontainingstatementslike\nfrom modname import some_objects\nwillcontinuetoworkwiththeoldversionoftheimportedobjects. Ifthemodulecontainsclassdefinitions,existing\nclass instances will not be updated to use the new class definition. This can result in the following paradoxical\nbehaviour:\n>>> import importlib\n>>> import cls\n>>> c = cls.C() # Create an instance of C\n>>> importlib.reload(cls)\n<module 'cls' from 'cls.py'>\n>>> isinstance(c, cls.C) # isinstance is false?!?\nFalse\nThenatureoftheproblemismadeclearifyouprintoutthe\u201cidentity\u201doftheclassobjects:\n>>> hex(id(c.__class__))\n'0x7352a0'\n>>> hex(id(cls.C))\n'0x4198d0'\n2.7. Modules 37\nPythonFrequentlyAskedQuestions,Release3.13.3\n38 Chapter2. ProgrammingFAQ\nCHAPTER\nTHREE\nDESIGN AND HISTORY FAQ\n3.1 Why does Python use indentation for grouping of statements?\nGuidovanRossumbelievesthatusingindentationforgroupingisextremelyelegantandcontributesalottotheclarity\noftheaveragePythonprogram. Mostpeoplelearntolovethisfeatureafterawhile.\nSincetherearenobegin/endbracketstherecannotbeadisagreementbetweengroupingperceivedbytheparserand\nthehumanreader. OccasionallyCprogrammerswillencounterafragmentofcodelikethis:\nif (x <= y)\nx++;\ny--;\nz++;\nOnlythex++statementisexecutediftheconditionistrue,buttheindentationleadsmanytobelieveotherwise. Even\nexperiencedCprogrammerswillsometimesstareatitalongtimewonderingastowhyyisbeingdecrementedeven\nforx > y.\nBecausetherearenobegin/endbrackets,Pythonismuchlesspronetocoding-styleconflicts. InCtherearemany\ndifferent ways to place the braces. After becoming used to reading and writing code using a particular style, it is\nnormaltofeelsomewhatuneasywhenreading(orbeingrequiredtowrite)inadifferentone.\nManycodingstylesplacebegin/endbracketsonalinebythemselves. Thismakesprogramsconsiderablylongerand\nwastesvaluablescreenspace,makingithardertogetagoodoverviewofaprogram. Ideally,afunctionshouldfiton\nonescreen(say,20\u201330lines). 20linesofPythoncandoalotmoreworkthan20linesofC.Thisisnotsolelydueto\nthelackofbegin/endbrackets\u2013thelackofdeclarationsandthehigh-leveldatatypesarealsoresponsible\u2013butthe\nindentation-basedsyntaxcertainlyhelps.\n3.2 Why am I getting strange results with simple arithmetic opera-\ntions?\nSeethenextquestion.\n3.3 Why are floating-point calculations so inaccurate?\nUsersareoftensurprisedbyresultslikethis:\n>>> 1.2 - 1.0\n0.19999999999999996\nand think it is a bug in Python. It\u2019s not. This has little to do with Python, and much more to do with how the\nunderlyingplatformhandlesfloating-pointnumbers.\nThefloattypeinCPythonusesaCdoubleforstorage. Afloatobject\u2019svalueisstoredinbinaryfloating-point\nwith a fixed precision (typically 53 bits) and Python uses C operations, which in turn rely on the hardware imple-\n39\nPythonFrequentlyAskedQuestions,Release3.13.3\nmentationintheprocessor,toperformfloating-pointoperations. Thismeansthatasfarasfloating-pointoperations\nareconcerned,PythonbehaveslikemanypopularlanguagesincludingCandJava.\nMany numbers that can be written easily in decimal notation cannot be expressed exactly in binary floating point.\nForexample,after:\n>>> x = 1.2\nthevaluestoredforxisa(verygood)approximationtothedecimalvalue1.2,butisnotexactlyequaltoit. Ona\ntypicalmachine,theactualstoredvalueis:\n1.0011001100110011001100110011001100110011001100110011 (binary)\nwhichisexactly:\n1.1999999999999999555910790149937383830547332763671875 (decimal)\nThetypicalprecisionof53bitsprovidesPythonfloatswith15\u201316decimaldigitsofaccuracy.\nForafullerexplanation,pleaseseethefloating-pointarithmeticchapterinthePythontutorial.\n3.4 Why are Python strings immutable?\nThereareseveraladvantages.\nOneisperformance: knowingthatastringisimmutablemeanswecanallocatespaceforitatcreationtime,andthe\nstoragerequirementsarefixedandunchanging. Thisisalsooneofthereasonsforthedistinctionbetweentuplesand\nlists.\nAnother advantage is that strings in Python are considered as \u201celemental\u201d as numbers. No amount of activity will\nchangethevalue8toanythingelse,andinPython,noamountofactivitywillchangethestring\u201ceight\u201dtoanything\nelse.\n3.5 Why must \u2018self\u2019 be used explicitly in method definitions and\ncalls?\nTheideawasborrowedfromModula-3. Itturnsouttobeveryuseful,foravarietyofreasons.\nFirst,it\u2019smoreobviousthatyouareusingamethodorinstanceattributeinsteadofalocalvariable. Readingself.x\norself.meth()makesitabsolutelyclearthataninstancevariableormethodisusedevenifyoudon\u2019tknowthe\nclassdefinitionbyheart. InC++, youcansortoftellbythelackofalocalvariabledeclaration(assumingglobals\narerareoreasilyrecognizable)\u2013butinPython,therearenolocalvariabledeclarations,soyou\u2019dhavetolookupthe\nclassdefinitiontobesure. SomeC++andJavacodingstandardscallforinstanceattributestohaveanm_prefix,so\nthisexplicitnessisstillusefulinthoselanguages,too.\nSecond, it means that no special syntax is necessary if you want to explicitly reference or call the method from a\nparticularclass. InC++,ifyouwanttouseamethodfromabaseclasswhichisoverriddeninaderivedclass,you\nhavetousethe:: operator\u2013inPythonyoucanwritebaseclass.methodname(self, <argument list>).\nThisisparticularlyusefulfor__init__()methods,andingeneralincaseswhereaderivedclassmethodwantsto\nextendthebaseclassmethodofthesamenameandthushastocallthebaseclassmethodsomehow.\nFinally,forinstancevariablesitsolvesasyntacticproblemwithassignment: sincelocalvariablesinPythonare(by\ndefinition!) thosevariablestowhichavalueisassignedinafunctionbody(andthataren\u2019texplicitlydeclaredglobal),\ntherehastobesomewaytotelltheinterpreterthatanassignmentwasmeanttoassigntoaninstancevariableinstead\noftoalocalvariable,anditshouldpreferablybesyntactic(forefficiencyreasons). C++doesthisthroughdeclarations,\nbutPythondoesn\u2019thavedeclarationsanditwouldbeapityhavingtointroducethemjustforthispurpose. Usingthe\nexplicitself.varsolvesthisnicely. Similarly,forusinginstancevariables,havingtowriteself.varmeansthat\nreferencestounqualifiednamesinsideamethoddon\u2019thavetosearchtheinstance\u2019sdirectories. Toputitanotherway,\nlocalvariablesandinstancevariablesliveintwodifferentnamespaces,andyouneedtotellPythonwhichnamespace\ntouse.\n40 Chapter3. DesignandHistoryFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n3.6 Why can\u2019t I use an assignment in an expression?\nStartinginPython3.8,youcan!\nAssignmentexpressionsusingthewalrusoperator:=assignavariableinanexpression:\nwhile chunk := fp.read(200):\nprint(chunk)\nSeePEP572formoreinformation.\n3.7 Why does Python use methods for some functionality (e.g.\nlist.index()) but functions for other (e.g. len(list))?\nAsGuidosaid:\n(a) For some operations, prefix notation just reads better than postfix \u2013 prefix (and infix!) operations\nhave a long tradition in mathematics which likes notations where the visuals help the mathematician\nthinkingaboutaproblem. Comparetheeasywithwhichwerewriteaformulalikex*(a+b)intox*a+\nx*btotheclumsinessofdoingthesamethingusingarawOOnotation.\n(b) When I read code that says len(x) I know that it is asking for the length of something. This tells\nme two things: the result is an integer, and the argument is some kind of container. To the contrary,\nwhenIreadx.len(),Ihavetoalreadyknowthatxissomekindofcontainerimplementinganinterface\norinheritingfromaclassthathasastandardlen(). Witnesstheconfusionweoccasionallyhavewhena\nclassthatisnotimplementingamappinghasaget()orkeys()method,orsomethingthatisn\u2019tafilehas\nawrite()method.\n\u2014https://mail.python.org/pipermail/python-3000/2006-November/004643.html\n3.8 Why is join() a string method instead of a list or tuple method?\nStringsbecamemuchmorelikeotherstandardtypesstartinginPython1.6,whenmethodswereaddedwhichgive\nthesamefunctionalitythathasalwaysbeenavailable usingthefunctionsofthestringmodule. Mostofthesenew\nmethodshavebeenwidelyaccepted,buttheonewhichappearstomakesomeprogrammersfeeluncomfortableis:\n\", \".join(['1', '2', '4', '8', '16'])\nwhichgivestheresult:\n\"1, 2, 4, 8, 16\"\nTherearetwocommonargumentsagainstthisusage.\nThefirstrunsalongthelinesof: \u201cItlooksreallyuglyusingamethodofastringliteral(stringconstant)\u201d,towhichthe\nansweristhatitmight,butastringliteralisjustafixedvalue. Ifthemethodsaretobeallowedonnamesboundto\nstringsthereisnologicalreasontomakethemunavailableonliterals.\nThesecondobjectionistypicallycastas: \u201cIamreallytellingasequencetojoinitsmemberstogetherwithastring\nconstant\u201d. Sadly,youaren\u2019t. Forsomereasonthereseemstobemuchlessdifficultywithhavingsplit()asastring\nmethod,sinceinthatcaseitiseasytoseethat\n\"1, 2, 4, 8, 16\".split(\", \")\nisaninstructiontoastringliteraltoreturnthesubstringsdelimitedbythegivenseparator(or,bydefault,arbitrary\nrunsofwhitespace).\njoin()isastringmethodbecauseinusingityouaretellingtheseparatorstringtoiterateoverasequenceofstrings\nandinsertitselfbetweenadjacentelements. Thismethodcanbeusedwithanyargumentwhichobeystherulesfor\nsequenceobjects,includinganynewclassesyoumightdefineyourself. Similarmethodsexistforbytesandbytearray\nobjects.\n3.6. Whycan\u2019tIuseanassignmentinanexpression? 41\nPythonFrequentlyAskedQuestions,Release3.13.3\n3.9 How fast are exceptions?\nAtry/exceptblockisextremelyefficientifnoexceptionsareraised. Actuallycatchinganexceptionisexpensive.\nInversionsofPythonpriorto2.0itwascommontousethisidiom:\ntry:\nvalue = mydict[key]\nexcept KeyError:\nmydict[key] = getvalue(key)\nvalue = mydict[key]\nThis only made sense when you expected the dict to have the key almost all the time. If that wasn\u2019t the case, you\ncodeditlikethis:\nif key in mydict:\nvalue = mydict[key]\nelse:\nvalue = mydict[key] = getvalue(key)\nForthisspecificcase,youcouldalsousevalue = dict.setdefault(key, getvalue(key)),butonlyifthe\ngetvalue()callischeapenoughbecauseitisevaluatedinallcases.\n3.10 Why isn\u2019t there a switch or case statement in Python?\nIngeneral,structuredswitchstatementsexecuteoneblockofcodewhenanexpressionhasaparticularvalueorsetof\nvalues. SincePython3.10onecaneasilymatchliteralvalues,orconstantswithinanamespace,withamatch ...\ncasestatement. Anolderalternativeisasequenceofif... elif... elif... else.\nForcaseswhereyouneedtochoosefromaverylargenumberofpossibilities,youcancreateadictionarymapping\ncasevaluestofunctionstocall. Forexample:\nfunctions = {'a': function_1,\n'b': function_2,\n'c': self.method_1}\nfunc = functions[value]\nfunc()\nForcallingmethodsonobjects, youcansimplifyyetfurtherbyusingthegetattr()built-intoretrievemethods\nwithaparticularname:\nclass MyVisitor:\ndef visit_a(self):\n...\ndef dispatch(self, value):\nmethod_name = 'visit_' + str(value)\nmethod = getattr(self, method_name)\nmethod()\nIt\u2019ssuggestedthatyouuseaprefixforthemethodnames,suchasvisit_inthisexample. Withoutsuchaprefix,if\nvaluesarecomingfromanuntrustedsource,anattackerwouldbeabletocallanymethodonyourobject.\nImitatingswitchwithfallthrough,aswithC\u2019sswitch-case-default,ispossible,muchharder,andlessneeded.\n42 Chapter3. DesignandHistoryFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n3.11 Can\u2019t you emulate threads in the interpreter instead of relying\non an OS-specific thread implementation?\nAnswer 1: Unfortunately, the interpreter pushes at least one C stack frame for each Python stack frame. Also,\nextensions can call back into Python at almost random moments. Therefore, a complete threads implementation\nrequiresthreadsupportforC.\nAnswer2: Fortunately,thereisStacklessPython,whichhasacompletelyredesignedinterpreterloopthatavoidsthe\nCstack.\n3.12 Why can\u2019t lambda expressions contain statements?\nPythonlambdaexpressionscannotcontainstatementsbecausePython\u2019ssyntacticframeworkcan\u2019thandlestatements\nnestedinsideexpressions. However,inPython,thisisnotaseriousproblem. Unlikelambdaformsinotherlanguages,\nwheretheyaddfunctionality,Pythonlambdasareonlyashorthandnotationifyou\u2019retoolazytodefineafunction.\nFunctionsarealreadyfirstclassobjectsinPython,andcanbedeclaredinalocalscope. Thereforetheonlyadvantage\nof using a lambda instead of a locally defined function is that you don\u2019t need to invent a name for the function \u2013\nbutthat\u2019sjustalocalvariabletowhichthefunctionobject(whichisexactlythesametypeofobjectthatalambda\nexpressionyields)isassigned!\n3.13 Can Python be compiled to machine code, C or some other\nlanguage?\nCython compiles a modified version of Python with optional annotations into C extensions. Nuitka is an up-and-\ncomingcompilerofPythonintoC++code,aimingtosupportthefullPythonlanguage.\n3.14 How does Python manage memory?\nThedetailsofPythonmemorymanagementdependontheimplementation. ThestandardimplementationofPython,\nCPython,usesreferencecountingtodetectinaccessibleobjects,andanothermechanismtocollectreferencecycles,\nperiodicallyexecutingacycledetectionalgorithmwhichlooksforinaccessiblecyclesanddeletestheobjectsinvolved.\nThegcmoduleprovidesfunctionstoperformagarbagecollection,obtaindebuggingstatistics,andtunethecollector\u2019s\nparameters.\nOtherimplementations(suchasJythonorPyPy),however,canrelyonadifferentmechanismsuchasafull-blown\ngarbage collector. This difference can cause some subtle porting problems if your Python code depends on the\nbehaviorofthereferencecountingimplementation.\nInsomePythonimplementations,thefollowingcode(whichisfineinCPython)willprobablyrunoutoffiledescrip-\ntors:\nfor file in very_long_list_of_files:\nf = open(file)\nc = f.read(1)\nIndeed,usingCPython\u2019sreferencecountinganddestructorscheme,eachnewassignmenttofclosesthepreviousfile.\nWithatraditionalGC,however, thosefileobjectswillonlygetcollected(andclosed)atvaryingandpossiblylong\nintervals.\nIfyouwanttowritecodethatwillworkwithanyPythonimplementation,youshouldexplicitlyclosethefileoruse\nthewithstatement;thiswillworkregardlessofmemorymanagementscheme:\nfor file in very_long_list_of_files:\nwith open(file) as f:\nc = f.read(1)\n3.11. Can\u2019tyouemulatethreadsintheinterpreterinsteadofrelyingonanOS-specificthread 43\nimplementation?\nPythonFrequentlyAskedQuestions,Release3.13.3\n3.15 Why doesn\u2019t CPython use a more traditional garbage collec-\ntion scheme?\nForonething,thisisnotaCstandardfeatureandhenceit\u2019snotportable. (Yes,weknowabouttheBoehmGClibrary.\nIthasbitsofassemblercodeformost commonplatforms,notforallofthem,andalthoughitismostlytransparent,\nitisn\u2019tcompletelytransparent;patchesarerequiredtogetPythontoworkwithit.)\nTraditional GC also becomes a problem when Python is embedded into other applications. While in a standalone\nPythonit\u2019sfinetoreplacethestandardmalloc()andfree()withversionsprovidedbytheGClibrary,anapplica-\ntionembeddingPythonmaywanttohaveitsownsubstituteformalloc()andfree(),andmaynotwantPython\u2019s.\nRightnow,CPythonworkswithanythingthatimplementsmalloc()andfree()properly.\n3.16 Why isn\u2019t all memory freed when CPython exits?\nObjects referenced from the global namespaces of Python modules are not always deallocated when Python exits.\nThismayhappeniftherearecircularreferences. TherearealsocertainbitsofmemorythatareallocatedbytheC\nlibrarythatareimpossibletofree(e.g. atoollikePurifywillcomplainaboutthese). Pythonis,however,aggressive\naboutcleaningupmemoryonexitanddoestrytodestroyeverysingleobject.\nIfyouwanttoforcePythontodeletecertainthingsondeallocationusetheatexitmoduletorunafunctionthat\nwillforcethosedeletions.\n3.17 Why are there separate tuple and list data types?\nListsandtuples,whilesimilarinmanyrespects,aregenerallyusedinfundamentallydifferentways. Tuplescanbe\nthoughtofasbeingsimilartoPascalrecordsorCstructs;they\u2019resmallcollectionsofrelateddatawhichmaybe\nofdifferenttypeswhichareoperatedonasagroup. Forexample,aCartesiancoordinateisappropriatelyrepresented\nasatupleoftwoorthreenumbers.\nLists,ontheotherhand,aremorelikearraysinotherlanguages. Theytendtoholdavaryingnumberofobjectsall\nofwhichhavethesametypeandwhichareoperatedonone-by-one. Forexample,os.listdir('.')returnsalist\nofstringsrepresentingthefilesinthecurrentdirectory. Functionswhichoperateonthisoutputwouldgenerallynot\nbreakifyouaddedanotherfileortwotothedirectory.\nTuplesareimmutable,meaningthatonceatuplehasbeencreated,youcan\u2019treplaceanyofitselementswithanew\nvalue. Listsaremutable,meaningthatyoucanalwayschangealist\u2019selements. Onlyimmutableelementscanbeused\nasdictionarykeys,andhenceonlytuplesandnotlistscanbeusedaskeys.\n3.18 How are lists implemented in CPython?\nCPython\u2019s lists are really variable-length arrays, not Lisp-style linked lists. The implementation uses a contiguous\narrayofreferencestootherobjects,andkeepsapointertothisarrayandthearray\u2019slengthinalistheadstructure.\nThis makes indexing a list a[i] an operation whose cost is independent of the size of the list or the value of the\nindex.\nWhenitemsareappendedorinserted,thearrayofreferencesisresized. Someclevernessisappliedtoimprovethe\nperformanceofappendingitemsrepeatedly;whenthearraymustbegrown,someextraspaceisallocatedsothenext\nfewtimesdon\u2019trequireanactualresize.\n3.19 How are dictionaries implemented in CPython?\nCPython\u2019sdictionariesareimplementedasresizablehashtables. ComparedtoB-trees,thisgivesbetterperformance\nforlookup(themostcommonoperationbyfar)undermostcircumstances,andtheimplementationissimpler.\nDictionariesworkbycomputingahashcodeforeachkeystoredinthedictionaryusingthehash()built-infunction.\nThe hash code varies widely depending on the key and a per-process seed; for example, 'Python' could hash to\n-539294296while'python', astringthatdiffersbyasinglebit, couldhashto1142331976. Thehashcodeis\n44 Chapter3. DesignandHistoryFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\nthen used to calculate a location in an internal array where the value will be stored. Assuming that you\u2019re storing\nkeysthatallhavedifferenthashvalues,thismeansthatdictionariestakeconstanttime\u2013O(1),inBig-Onotation\u2013to\nretrieveakey.\n3.20 Why must dictionary keys be immutable?\nThehashtableimplementationofdictionariesusesahashvaluecalculatedfromthekeyvaluetofindthekey. Ifthe\nkeywereamutableobject,itsvaluecouldchange,andthusitshashcouldalsochange. Butsincewhoeverchanges\nthekeyobjectcan\u2019ttellthatitwasbeingusedasadictionarykey,itcan\u2019tmovetheentryaroundinthedictionary.\nThen,whenyoutrytolookupthesameobjectinthedictionaryitwon\u2019tbefoundbecauseitshashvalueisdifferent.\nIfyoutriedtolookuptheoldvalueitwouldn\u2019tbefoundeither,becausethevalueoftheobjectfoundinthathashbin\nwouldbedifferent.\nIfyouwantadictionaryindexedwithalist,simplyconvertthelisttoatuplefirst;thefunctiontuple(L)createsa\ntuplewiththesameentriesasthelistL.Tuplesareimmutableandcanthereforebeusedasdictionarykeys.\nSomeunacceptablesolutionsthathavebeenproposed:\n\u2022 Hash lists by their address (object ID). This doesn\u2019t work because if you construct a new list with the same\nvalueitwon\u2019tbefound;e.g.:\nmydict = {[1, 2]: '12'}\nprint(mydict[[1, 2]])\nwouldraiseaKeyErrorexceptionbecausetheidofthe[1, 2]usedinthesecondlinediffersfromthatin\nthefirstline. Inotherwords,dictionarykeysshouldbecomparedusing==,notusingis.\n\u2022 Make a copy when using a list as a key. This doesn\u2019t work because the list, being a mutable object, could\ncontainareferencetoitself,andthenthecopyingcodewouldrunintoaninfiniteloop.\n\u2022 Allowlistsaskeysbuttelltheusernottomodifythem. Thiswouldallowaclassofhard-to-trackbugsinpro-\ngramswhenyouforgotormodifiedalistbyaccident. Italsoinvalidatesanimportantinvariantofdictionaries:\neveryvalueind.keys()isusableasakeyofthedictionary.\n\u2022 Marklistsasread-onlyoncetheyareusedasadictionarykey. Theproblemisthatit\u2019snotjustthetop-level\nobjectthatcouldchangeitsvalue;youcoulduseatuplecontainingalistasakey. Enteringanythingasakeyinto\nadictionarywouldrequiremarkingallobjectsreachablefromthereasread-only\u2013andagain,self-referential\nobjectscouldcauseaninfiniteloop.\nThereisatricktogetaroundthisifyouneedto,butuseitatyourownrisk: Youcanwrapamutablestructureinside\naclassinstancewhichhasbotha__eq__()anda__hash__()method. Youmustthenmakesurethatthehash\nvalueforallsuchwrapperobjectsthatresideinadictionary(orotherhashbasedstructure),remainfixedwhilethe\nobjectisinthedictionary(orotherstructure).\nclass ListWrapper:\ndef __init__(self, the_list):\nself.the_list = the_list\ndef __eq__(self, other):\nreturn self.the_list == other.the_list\ndef __hash__(self):\nl = self.the_list\nresult = 98767 - len(l)*555\nfor i, el in enumerate(l):\ntry:\nresult = result + (hash(el) % 9999999) * 1001 + i\nexcept Exception:\nresult = (result % 7777777) + i * 333\nreturn result\n3.20. Whymustdictionarykeysbeimmutable? 45\nPythonFrequentlyAskedQuestions,Release3.13.3\nNotethatthehashcomputationiscomplicatedbythepossibilitythatsomemembersofthelistmaybeunhashable\nandalsobythepossibilityofarithmeticoverflow.\nFurthermore it must always be the case that if o1 == o2 (ie o1.__eq__(o2) is True) then hash(o1) ==\nhash(o2)(ie,o1.__hash__() == o2.__hash__()),regardlessofwhethertheobjectisinadictionaryornot.\nIfyoufailtomeettheserestrictionsdictionariesandotherhashbasedstructureswillmisbehave.\nInthecaseofListWrapper, wheneverthewrapperobjectisinadictionarythewrappedlistmustnotchangeto\navoidanomalies. Don\u2019tdothisunlessyouarepreparedtothinkhardabouttherequirementsandtheconsequences\nofnotmeetingthemcorrectly. Consideryourselfwarned.\n3.21 Why doesn\u2019t list.sort() return the sorted list?\nInsituationswhereperformancematters,makingacopyofthelistjusttosortitwouldbewasteful. Therefore,list.\nsort()sortsthelistinplace. Inordertoremindyouofthatfact,itdoesnotreturnthesortedlist. Thisway,you\nwon\u2019tbefooledintoaccidentallyoverwritingalistwhenyouneedasortedcopybutalsoneedtokeeptheunsorted\nversionaround.\nIfyouwanttoreturnanewlist,usethebuilt-insorted()functioninstead. Thisfunctioncreatesanewlistfrom\naprovidediterable,sortsitandreturnsit. Forexample,here\u2019showtoiterateoverthekeysofadictionaryinsorted\norder:\nfor key in sorted(mydict):\n... # do whatever with mydict[key]...\n3.22 How do you specify and enforce an interface spec in Python?\nAninterfacespecificationforamoduleasprovidedbylanguagessuchasC++andJavadescribestheprototypesfor\nthemethodsandfunctionsofthemodule. Manyfeelthatcompile-timeenforcementofinterfacespecificationshelps\nintheconstructionoflargeprograms.\nPython2.6addsanabcmodulethatletsyoudefineAbstractBaseClasses(ABCs). Youcanthenuseisinstance()\nandissubclass()tocheckwhetheraninstanceoraclassimplementsaparticularABC.Thecollections.abc\nmoduledefinesasetofusefulABCssuchasIterable,Container,andMutableMapping.\nForPython,manyoftheadvantagesofinterfacespecificationscanbeobtainedbyanappropriatetestdisciplinefor\ncomponents.\nAgoodtestsuiteforamodulecanbothprovidearegressiontestandserveasamoduleinterfacespecificationanda\nsetofexamples. ManyPythonmodulescanberunasascripttoprovideasimple\u201cselftest.\u201d Evenmoduleswhichuse\ncomplexexternalinterfacescanoftenbetestedinisolationusingtrivial\u201cstub\u201demulationsoftheexternalinterface.\nThedoctestandunittestmodulesorthird-partytestframeworkscanbeusedtoconstructexhaustivetestsuites\nthatexerciseeverylineofcodeinamodule.\nAn appropriate testing discipline can help build large complex applications in Python as well as having interface\nspecifications would. In fact, it can be better because an interface specification cannot test certain properties of a\nprogram. Forexample,thelist.append()methodisexpectedtoaddnewelementstotheendofsomeinternal\nlist;aninterfacespecificationcannottestthatyourlist.append()implementationwillactuallydothiscorrectly,\nbutit\u2019strivialtocheckthispropertyinatestsuite.\nWritingtestsuitesisveryhelpful,andyoumightwanttodesignyourcodetomakeiteasilytested. Oneincreasingly\npopulartechnique,test-drivendevelopment,callsforwritingpartsofthetestsuitefirst,beforeyouwriteanyofthe\nactualcode. OfcoursePythonallowsyoutobesloppyandnotwritetestcasesatall.\n3.23 Why is there no goto?\nInthe1970speoplerealizedthatunrestrictedgotocouldleadtomessy\u201cspaghetti\u201dcodethatwashardtounderstand\nand revise. In a high-level language, it is also unneeded as long as there are ways to branch (in Python, with if\nstatementsandor,and,andif/elseexpressions)andloop(withwhileandforstatements,possiblycontaining\ncontinueandbreak).\n46 Chapter3. DesignandHistoryFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\nOnecanalsouseexceptionstoprovidea\u201cstructuredgoto\u201dthatworksevenacrossfunctioncalls. Manyfeelthatex-\nceptionscanconvenientlyemulateallreasonableusesofthegoorgotoconstructsofC,Fortran,andotherlanguages.\nForexample:\nclass label(Exception): pass # declare a label\ntry:\n...\nif condition: raise label() # goto label\n...\nexcept label: # where to goto\npass\n...\nThisdoesn\u2019tallowyoutojumpintothemiddleofaloop,butthat\u2019susuallyconsideredanabuseofgotoanyway. Use\nsparingly.\n3.24 Why can\u2019t raw strings (r-strings) end with a backslash?\nMore precisely, they can\u2019t end with an odd number of backslashes: the unpaired backslash at the end escapes the\nclosingquotecharacter,leavinganunterminatedstring.\nRawstringsweredesignedtoeasecreatinginputforprocessors(chieflyregularexpressionengines)thatwanttodo\ntheir own backslash escape processing. Such processors consider an unmatched trailing backslash to be an error\nanyway, sorawstringsdisallowthat. Inreturn, theyallowyoutopassonthestringquotecharacterbyescapingit\nwithabackslash. Theserulesworkwellwhenr-stringsareusedfortheirintendedpurpose.\nIfyou\u2019retryingtobuildWindowspathnames,notethatallWindowssystemcallsacceptforwardslashestoo:\nf = open(\"/mydir/file.txt\") # works fine!\nIfyou\u2019retryingtobuildapathnameforaDOScommand,trye.g. oneof\ndir = r\"\\this\\is\\my\\dos\\dir\" \"\\\\\"\ndir = r\"\\this\\is\\my\\dos\\dir\\ \"[:-1]\ndir = \"\\\\this\\\\is\\\\my\\\\dos\\\\dir\\\\\"\n3.25 Why doesn\u2019t Python have a \u201cwith\u201d statement for attribute as-\nsignments?\nPython has a with statement that wraps the execution of a block, calling code on the entrance and exit from the\nblock. Somelanguageshaveaconstructthatlookslikethis:\nwith obj:\na = 1 # equivalent to obj.a = 1\ntotal = total + 1 # obj.total = obj.total + 1\nInPython,suchaconstructwouldbeambiguous.\nOtherlanguages,suchasObjectPascal,Delphi,andC++,usestatictypes,soit\u2019spossibletoknow,inanunambiguous\nway,whatmemberisbeingassignedto. Thisisthemainpointofstatictyping\u2013thecompileralwaysknowsthescope\nofeveryvariableatcompiletime.\nPythonusesdynamictypes. Itisimpossibletoknowinadvancewhichattributewillbereferencedatruntime. Member\nattributesmaybeaddedorremovedfromobjectsonthefly. Thismakesitimpossibletoknow,fromasimplereading,\nwhatattributeisbeingreferenced: alocalone,aglobalone,oramemberattribute?\nForinstance,takethefollowingincompletesnippet:\n3.24. Whycan\u2019trawstrings(r-strings)endwithabackslash? 47\nPythonFrequentlyAskedQuestions,Release3.13.3\ndef foo(a):\nwith a:\nprint(x)\nThesnippetassumesthatamusthaveamemberattributecalledx. However,thereisnothinginPythonthattellsthe\ninterpreterthis. Whatshouldhappenifais,letussay,aninteger? Ifthereisaglobalvariablenamedx,willitbe\nusedinsidethewithblock? Asyousee,thedynamicnatureofPythonmakessuchchoicesmuchharder.\nThe primary benefit of with and similar language features (reduction of code volume) can, however, easily be\nachievedinPythonbyassignment. Insteadof:\nfunction(args).mydict[index][index].a = 21\nfunction(args).mydict[index][index].b = 42\nfunction(args).mydict[index][index].c = 63\nwritethis:\nref = function(args).mydict[index][index]\nref.a = 21\nref.b = 42\nref.c = 63\nThisalsohastheside-effectofincreasingexecutionspeedbecausenamebindingsareresolvedatrun-timeinPython,\nandthesecondversiononlyneedstoperformtheresolutiononce.\nSimilarproposalsthatwouldintroducesyntaxtofurtherreducecodevolume,suchasusinga\u2018leadingdot\u2019,havebeen\nrejectedinfavourofexplicitness(seehttps://mail.python.org/pipermail/python-ideas/2016-May/040070.html).\n3.26 Why don\u2019t generators support the with statement?\nFortechnicalreasons,ageneratoruseddirectlyasacontextmanagerwouldnotworkcorrectly. When,asismostcom-\nmon,ageneratorisusedasaniteratorruntocompletion,noclosingisneeded. Whenitis,wrapitascontextlib.\nclosing(generator)inthewithstatement.\n3.27 Why are colons required for the if/while/def/class statements?\nThecolonisrequiredprimarilytoenhancereadability(oneoftheresultsoftheexperimentalABClanguage). Con-\nsiderthis:\nif a == b\nprint(a)\nversus\nif a == b:\nprint(a)\nNoticehowthesecondoneisslightlyeasiertoread. NoticefurtherhowacolonsetsofftheexampleinthisFAQ\nanswer;it\u2019sastandardusageinEnglish.\nAnotherminorreasonisthatthecolonmakesiteasierforeditorswithsyntaxhighlighting;theycanlookforcolons\ntodecidewhenindentationneedstobeincreasedinsteadofhavingtodoamoreelaborateparsingoftheprogram\ntext.\n48 Chapter3. DesignandHistoryFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n3.28 Why does Python allow commas at the end of lists and tuples?\nPythonletsyouaddatrailingcommaattheendoflists,tuples,anddictionaries:\n[1, 2, 3,]\n('a', 'b', 'c',)\nd = {\n\"A\": [1, 5],\n\"B\": [6, 7], # last trailing comma is optional but good style\n}\nThereareseveralreasonstoallowthis.\nWhen you have a literal value for a list, tuple, or dictionary spread across multiple lines, it\u2019s easier to add more\nelementsbecauseyoudon\u2019thavetoremembertoaddacommatothepreviousline. Thelinescanalsobereordered\nwithoutcreatingasyntaxerror.\nAccidentallyomittingthecommacanleadtoerrorsthatarehardtodiagnose. Forexample:\nx = [\n\"fee\",\n\"fie\"\n\"foo\",\n\"fum\"\n]\nThislistlookslikeithasfourelements,butitactuallycontainsthree: \u201cfee\u201d,\u201cfiefoo\u201dand\u201cfum\u201d. Alwaysaddingthe\ncommaavoidsthissourceoferror.\nAllowingthetrailingcommamayalsomakeprogrammaticcodegenerationeasier.\n3.28. WhydoesPythonallowcommasattheendoflistsandtuples? 49\nPythonFrequentlyAskedQuestions,Release3.13.3\n50 Chapter3. DesignandHistoryFAQ\nCHAPTER\nFOUR\nLIBRARY AND EXTENSION FAQ\n4.1 General Library Questions\n4.1.1 How do I find a module or application to perform task X?\nChecktheLibraryReferencetoseeifthere\u2019sarelevantstandardlibrarymodule. (Eventuallyyou\u2019lllearnwhat\u2019sin\nthestandardlibraryandwillbeabletoskipthisstep.)\nForthird-partypackages,searchthePythonPackageIndexortryGoogleoranotherwebsearchengine. Searching\nfor\u201cPython\u201dplusakeywordortwoforyourtopicofinterestwillusuallyfindsomethinghelpful.\n4.1.2 Where is the math.py (socket.py, regex.py, etc.) source file?\nIfyoucan\u2019tfindasourcefileforamoduleitmaybeabuilt-inordynamicallyloadedmoduleimplementedinC,C++\norothercompiledlanguage. Inthiscaseyoumaynothavethesourcefileoritmaybesomethinglikemathmodule.c,\nsomewhereinaCsourcedirectory(notonthePythonPath).\nThereare(atleast)threekindsofmodulesinPython:\n1) moduleswritteninPython(.py);\n2) moduleswritteninCanddynamicallyloaded(.dll,.pyd,.so,.sl,etc);\n3) moduleswritteninCandlinkedwiththeinterpreter;togetalistofthese,type:\nimport sys\nprint(sys.builtin_module_names)\n4.1.3 How do I make a Python script executable on Unix?\nYouneedtodotwothings: thescriptfile\u2019smodemustbeexecutableandthefirstlinemustbeginwith#!followed\nbythepathofthePythoninterpreter.\nThefirstisdonebyexecutingchmod +x scriptfileorperhapschmod 755 scriptfile.\nThesecondcanbedoneinanumberofways. Themoststraightforwardwayistowrite\n#!/usr/local/bin/python\nastheveryfirstlineofyourfile,usingthepathnameforwherethePythoninterpreterisinstalledonyourplatform.\nIfyouwouldlikethescripttobeindependentofwherethePythoninterpreterlives,youcanusetheenvprogram.\nAlmostallUnixvariantssupportthefollowing,assumingthePythoninterpreterisinadirectoryontheuser\u2019sPATH:\n#!/usr/bin/env python\nDon\u2019tdothisforCGIscripts. ThePATHvariableforCGIscriptsisoftenveryminimal,soyouneedtousetheactual\nabsolutepathnameoftheinterpreter.\nOccasionally,auser\u2019senvironmentissofullthatthe/usr/bin/envprogramfails;orthere\u2019snoenvprogramatall.\nInthatcase,youcantrythefollowinghack(duetoAlexRezinsky):\n51\nPythonFrequentlyAskedQuestions,Release3.13.3\n#! /bin/sh\n\"\"\":\"\nexec python $0 ${1+\"$@\"}\n\"\"\"\nTheminordisadvantageisthatthisdefinesthescript\u2019s__doc__string. However,youcanfixthatbyadding\n__doc__ = \"\"\"...Whatever...\"\"\"\n4.1.4 Is there a curses/termcap package for Python?\nForUnixvariants: ThestandardPythonsourcedistributioncomeswithacursesmoduleintheModulessubdirectory,\nthoughit\u2019snotcompiledbydefault. (NotethatthisisnotavailableintheWindowsdistribution\u2013thereisnocurses\nmoduleforWindows.)\nThecursesmodulesupportsbasiccursesfeaturesaswellasmanyadditionalfunctionsfromncursesandSYSVcurses\nsuchascolour,alternativecharactersetsupport,pads,andmousesupport. Thismeansthemoduleisn\u2019tcompatible\nwithoperatingsystemsthatonlyhaveBSDcurses,buttheredon\u2019tseemtobeanycurrentlymaintainedOSesthatfall\nintothiscategory.\n4.1.5 Is there an equivalent to C\u2019s onexit() in Python?\nTheatexitmoduleprovidesaregisterfunctionthatissimilartoC\u2019sonexit().\n4.1.6 Why don\u2019t my signal handlers work?\nThemostcommonproblemisthatthesignalhandlerisdeclaredwiththewrongargumentlist. Itiscalledas\nhandler(signum, frame)\nsoitshouldbedeclaredwithtwoparameters:\ndef handler(signum, frame):\n...\n4.2 Common tasks\n4.2.1 How do I test a Python program or component?\nPythoncomeswithtwotestingframeworks. Thedoctestmodulefindsexamplesinthedocstringsforamoduleand\nrunsthem,comparingtheoutputwiththeexpectedoutputgiveninthedocstring.\nTheunittestmoduleisafanciertestingframeworkmodelledonJavaandSmalltalktestingframeworks.\nTomaketestingeasier,youshouldusegoodmodulardesigninyourprogram. Yourprogramshouldhavealmostall\nfunctionalityencapsulatedineitherfunctionsorclassmethods\u2013andthissometimeshasthesurprisinganddelightful\neffectofmakingtheprogramrunfaster(becauselocalvariableaccessesarefasterthanglobalaccesses). Furthermore\ntheprogramshouldavoiddependingonmutatingglobalvariables,sincethismakestestingmuchmoredifficulttodo.\nThe\u201cglobalmainlogic\u201dofyourprogrammaybeassimpleas\nif __name__ == \"__main__\":\nmain_logic()\natthebottomofthemainmoduleofyourprogram.\nOnce your program is organized as a tractable collection of function and class behaviours, you should write test\nfunctionsthatexercisethebehaviours. Atestsuitethatautomatesasequenceoftestscanbeassociatedwitheach\nmodule. Thissoundslikealotofwork,butsincePythonissoterseandflexibleit\u2019ssurprisinglyeasy. Youcanmake\n52 Chapter4. LibraryandExtensionFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\ncodingmuchmorepleasantandfunbywritingyourtestfunctionsinparallelwiththe\u201cproductioncode\u201d,sincethis\nmakesiteasytofindbugsandevendesignflawsearlier.\n\u201cSupportmodules\u201dthatarenotintendedtobethemainmoduleofaprogrammayincludeaself-testofthemodule.\nif __name__ == \"__main__\":\nself_test()\nEvenprogramsthatinteractwithcomplexexternalinterfacesmaybetestedwhentheexternalinterfacesareunavail-\nablebyusing\u201cfake\u201dinterfacesimplementedinPython.\n4.2.2 How do I create documentation from doc strings?\nThepydocmodulecancreateHTMLfromthedocstringsinyourPythonsourcecode. Analternativeforcreating\nAPIdocumentationpurelyfromdocstringsisepydoc. Sphinxcanalsoincludedocstringcontent.\n4.2.3 How do I get a single keypress at a time?\nForUnixvariantsthereareseveralsolutions. It\u2019sstraightforwardtodothisusingcurses,butcursesisafairlylarge\nmoduletolearn.\n4.3 Threads\n4.3.1 How do I program using threads?\nBesuretousethethreadingmoduleandnotthe_threadmodule. Thethreadingmodulebuildsconvenient\nabstractionsontopofthelow-levelprimitivesprovidedbythe_threadmodule.\n4.3.2 None of my threads seem to run: why?\nAssoonasthemainthreadexits,allthreadsarekilled. Yourmainthreadisrunningtooquickly,givingthethreads\nnotimetodoanywork.\nAsimplefixistoaddasleeptotheendoftheprogramthat\u2019slongenoughforallthethreadstofinish:\nimport threading, time\ndef thread_task(name, n):\nfor i in range(n):\nprint(name, i)\nfor i in range(10):\nT = threading.Thread(target=thread_task, args=(str(i), i))\nT.start()\ntime.sleep(10) # <---------------------------!\nBut now (on many platforms) the threads don\u2019t run in parallel, but appear to run sequentially, one at a time! The\nreasonisthattheOSthreadschedulerdoesn\u2019tstartanewthreaduntilthepreviousthreadisblocked.\nAsimplefixistoaddatinysleeptothestartoftherunfunction:\ndef thread_task(name, n):\ntime.sleep(0.001) # <--------------------!\nfor i in range(n):\nprint(name, i)\nfor i in range(10):\nT = threading.Thread(target=thread_task, args=(str(i), i))\n(continuesonnextpage)\n4.3. Threads 53\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nT.start()\ntime.sleep(10)\nInsteadoftryingtoguessagooddelayvaluefortime.sleep(),it\u2019sbettertousesomekindofsemaphoremech-\nanism. Oneideaistousethequeuemoduletocreateaqueueobject,leteachthreadappendatokentothequeue\nwhenitfinishes,andletthemainthreadreadasmanytokensfromthequeueastherearethreads.\n4.3.3 How do I parcel out work among a bunch of worker threads?\nTheeasiestwayistousetheconcurrent.futuresmodule,especiallytheThreadPoolExecutorclass.\nOr,ifyouwantfinecontroloverthedispatchingalgorithm,youcanwriteyourownlogicmanually. Usethequeue\nmoduletocreateaqueuecontainingalistofjobs. TheQueueclassmaintainsalistofobjectsandhasa.put(obj)\nmethodthataddsitemstothequeueanda.get()methodtoreturnthem. Theclasswilltakecareofthelocking\nnecessarytoensurethateachjobishandedoutexactlyonce.\nHere\u2019satrivialexample:\nimport threading, queue, time\n# The worker thread gets jobs off the queue. When the queue is empty, it\n# assumes there will be no more work and exits.\n# (Realistically workers will run until terminated.)\ndef worker():\nprint('Running worker')\ntime.sleep(0.1)\nwhile True:\ntry:\narg = q.get(block=False)\nexcept queue.Empty:\nprint('Worker', threading.current_thread(), end=' ')\nprint('queue empty')\nbreak\nelse:\nprint('Worker', threading.current_thread(), end=' ')\nprint('running with argument', arg)\ntime.sleep(0.5)\n# Create queue\nq = queue.Queue()\n# Start a pool of 5 workers\nfor i in range(5):\nt = threading.Thread(target=worker, name='worker %i' % (i+1))\nt.start()\n# Begin adding work to the queue\nfor i in range(50):\nq.put(i)\n# Give threads time to run\nprint('Main thread sleeping')\ntime.sleep(5)\nWhenrun,thiswillproducethefollowingoutput:\n54 Chapter4. LibraryandExtensionFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\nRunning worker\nRunning worker\nRunning worker\nRunning worker\nRunning worker\nMain thread sleeping\nWorker <Thread(worker 1, started 130283832797456)> running with argument 0\nWorker <Thread(worker 2, started 130283824404752)> running with argument 1\nWorker <Thread(worker 3, started 130283816012048)> running with argument 2\nWorker <Thread(worker 4, started 130283807619344)> running with argument 3\nWorker <Thread(worker 5, started 130283799226640)> running with argument 4\nWorker <Thread(worker 1, started 130283832797456)> running with argument 5\n...\nConsultthemodule\u2019sdocumentationformoredetails;theQueueclassprovidesafeaturefulinterface.\n4.3.4 What kinds of global value mutation are thread-safe?\nAglobalinterpreterlock(GIL)isusedinternallytoensurethatonlyonethreadrunsinthePythonVMatatime. In\ngeneral,Pythonofferstoswitchamongthreadsonlybetweenbytecodeinstructions; howfrequentlyitswitchescan\nbesetviasys.setswitchinterval(). EachbytecodeinstructionandthereforealltheCimplementationcode\nreachedfromeachinstructionisthereforeatomicfromthepointofviewofaPythonprogram.\nIntheory,thismeansanexactaccountingrequiresanexactunderstandingofthePVMbytecodeimplementation. In\npractice,itmeansthatoperationsonsharedvariablesofbuilt-indatatypes(ints,lists,dicts,etc)that\u201clookatomic\u201d\nreallyare.\nForexample,thefollowingoperationsareallatomic(L,L1,L2arelists,D,D1,D2aredicts,x,yareobjects,i,jare\nints):\nL.append(x)\nL1.extend(L2)\nx = L[i]\nx = L.pop()\nL1[i:j] = L2\nL.sort()\nx = y\nx.field = y\nD[x] = y\nD1.update(D2)\nD.keys()\nThesearen\u2019t:\ni = i+1\nL.append(L[-1])\nL[i] = L[j]\nD[x] = D[x] + 1\nOperationsthatreplaceotherobjectsmayinvokethoseotherobjects\u2019__del__()methodwhentheirreferencecount\nreacheszero,andthatcanaffectthings. Thisisespeciallytrueforthemassupdatestodictionariesandlists. Whenin\ndoubt,useamutex!\n4.3.5 Can\u2019t we get rid of the Global Interpreter Lock?\nThe global interpreter lock (GIL) is often seen as a hindrance to Python\u2019s deployment on high-end multiprocessor\nservermachines,becauseamulti-threadedPythonprogrameffectivelyonlyusesoneCPU,duetotheinsistencethat\n(almost)allPythoncodecanonlyrunwhiletheGILisheld.\n4.3. Threads 55\nPythonFrequentlyAskedQuestions,Release3.13.3\nWith the approval of PEP 703 work is now underway to remove the GIL from the CPython implementation of\nPython. Initiallyitwillbeimplementedasanoptionalcompilerflagwhenbuildingtheinterpreter,andsoseparate\nbuildswillbeavailablewithandwithouttheGIL.Long-term,thehopeistosettleonasinglebuild,oncetheperfor-\nmanceimplicationsofremovingtheGILarefullyunderstood. Python3.13islikelytobethefirstreleasecontaining\nthiswork,althoughitmaynotbecompletelyfunctionalinthisrelease.\nThecurrentworktoremovetheGILisbasedonaforkofPython3.9withtheGILremovedbySamGross. Prior\ntothat,inthedaysofPython1.5,GregSteinactuallyimplementedacomprehensivepatchset(the\u201cfreethreading\u201d\npatches)thatremovedtheGILandreplaceditwithfine-grainedlocking. AdamOlsendidasimilarexperimentinhis\npython-safethreadproject. Unfortunately,bothoftheseearlierexperimentsexhibitedasharpdropinsingle-thread\nperformance(atleast30%slower),duetotheamountoffine-grainedlockingnecessarytocompensatefortheremoval\noftheGIL.ThePython3.9forkisthefirstattemptatremovingtheGILwithanacceptableperformanceimpact.\nThepresenceoftheGILincurrentPythonreleasesdoesn\u2019tmeanthatyoucan\u2019tmakegooduseofPythononmulti-\nCPU machines! You just have to be creative with dividing the work up between multiple processes rather than\nmultiplethreads. TheProcessPoolExecutorclassinthenewconcurrent.futuresmoduleprovidesaneasy\nway of doing so; the multiprocessing module provides a lower-level API in case you want more control over\ndispatchingoftasks.\nJudicioususeofCextensionswillalsohelp;ifyouuseaCextensiontoperformatime-consumingtask,theextension\ncanreleasetheGILwhilethethreadofexecutionisintheCcodeandallowotherthreadstogetsomeworkdone.\nSomestandardlibrarymodulessuchaszlibandhashlibalreadydothis.\nAnalternativeapproachtoreducingtheimpactoftheGIListomaketheGILaper-interpreter-statelockratherthan\ntruly global. This was first implemented in Python 3.12 and is available in the C API. A Python interface to it is\nexpectedinPython3.13. Themainlimitationtoitatthemomentislikelytobe3rdpartyextensionmodules,since\nthesemustbewrittenwithmultipleinterpretersinmindinordertobeusable,somanyolderextensionmoduleswill\nnotbeusable.\n4.4 Input and Output\n4.4.1 How do I delete a file? (And other file questions\u2026)\nUseos.remove(filename)oros.unlink(filename);fordocumentation,seetheosmodule. Thetwofunc-\ntionsareidentical;unlink()issimplythenameoftheUnixsystemcallforthisfunction.\nToremoveadirectory, useos.rmdir(); useos.mkdir()tocreateone. os.makedirs(path)willcreateany\nintermediatedirectoriesinpaththatdon\u2019texist. os.removedirs(path)willremoveintermediatedirectoriesas\nlongasthey\u2019reempty;ifyouwanttodeleteanentiredirectorytreeanditscontents,useshutil.rmtree().\nTorenameafile,useos.rename(old_path, new_path).\nTotruncateafile,openitusingf = open(filename, \"rb+\"),andusef.truncate(offset);offsetdefaults\ntothecurrentseekposition. There\u2019salsoos.ftruncate(fd, offset)forfilesopenedwithos.open(),where\nfdisthefiledescriptor(asmallinteger).\nThe shutil module also contains a number of functions to work on files including copyfile(), copytree(),\nandrmtree().\n4.4.2 How do I copy a file?\nThe shutil module contains a copyfile() function. Note that on Windows NTFS volumes, it does not copy\nalternatedatastreamsnorresourceforksonmacOSHFS+volumes,thoughbotharenowrarelyused. Italsodoesn\u2019t\ncopyfilepermissionsandmetadata,thoughusingshutil.copy2()insteadwillpreservemost(thoughnotall)of\nit.\n4.4.3 How do I read (or write) binary data?\nTo read or write complex binary data formats, it\u2019s best to use the struct module. It allows you to take a string\ncontainingbinarydata(usuallynumbers)andconvertittoPythonobjects;andviceversa.\nForexample,thefollowingcodereadstwo2-byteintegersandone4-byteintegerinbig-endianformatfromafile:\n56 Chapter4. LibraryandExtensionFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\nimport struct\nwith open(filename, \"rb\") as f:\ns = f.read(8)\nx, y, z = struct.unpack(\">hhl\", s)\nThe\u2018>\u2019intheformatstringforcesbig-endiandata;theletter\u2018h\u2019readsone\u201cshortinteger\u201d(2bytes),and\u2018l\u2019readsone\n\u201clonginteger\u201d(4bytes)fromthestring.\nFordatathatismoreregular(e.g. ahomogeneouslistofintsorfloats),youcanalsousethearraymodule.\n(cid:174) Note\nToreadandwritebinarydata,itismandatorytoopenthefileinbinarymode(here,passing\"rb\"toopen()).\nIfyouuse \"r\" instead(thedefault), thefilewillbe openintextmodeand f.read() willreturnstr objects\nratherthanbytesobjects.\n4.4.4 I can\u2019t seem to use os.read() on a pipe created with os.popen(); why?\nos.read()isalow-levelfunctionwhichtakesafiledescriptor, asmallintegerrepresentingtheopenedfile. os.\npopen()createsahigh-levelfileobject, thesametypereturnedbythebuilt-inopen()function. Thus, toreadn\nbytesfromapipepcreatedwithos.popen(),youneedtousep.read(n).\n4.4.5 How do I access the serial (RS232) port?\nForWin32,OSX,Linux,BSD,Jython,IronPython:\npyserial\nForUnix,seeaUsenetpostbyMitchChapman:\nhttps://groups.google.com/groups?selm=34A04430.CF9@ohioee.com\n4.4.6 Why doesn\u2019t closing sys.stdout (stdin, stderr) really close it?\nPythonfileobjectsareahigh-levellayerofabstractiononlow-levelCfiledescriptors.\nFormostfileobjectsyoucreateinPythonviathebuilt-inopen()function,f.close()marksthePythonfileobject\nas being closed from Python\u2019s point of view, and also arranges to close the underlying C file descriptor. This also\nhappensautomaticallyinf\u2019sdestructor,whenfbecomesgarbage.\nButstdin, stdoutandstderraretreatedspeciallybyPython, becauseofthespecialstatusalsogiventothembyC.\nRunningsys.stdout.close()marksthePython-levelfileobjectasbeingclosed,butdoesnotclosetheassociated\nCfiledescriptor.\nToclosetheunderlyingCfiledescriptorforoneofthesethree,youshouldfirstbesurethat\u2019swhatyoureallywantto\ndo(e.g.,youmayconfuseextensionmodulestryingtodoI/O).Ifitis,useos.close():\nos.close(stdin.fileno())\nos.close(stdout.fileno())\nos.close(stderr.fileno())\nOryoucanusethenumericconstants0,1and2,respectively.\n4.5 Network/Internet Programming\n4.5.1 What WWW tools are there for Python?\nSee the chapters titled internet and netdata in the Library Reference Manual. Python has many modules that will\nhelpyoubuildserver-sideandclient-sidewebsystems.\n4.5. Network/InternetProgramming 57\nPythonFrequentlyAskedQuestions,Release3.13.3\nA summary of available frameworks is maintained by Paul Boddie at https://wiki.python.org/moin/\nWebProgramming.\n4.5.2 What module should I use to help with generating HTML?\nYoucanfindacollectionofusefullinksontheWebProgrammingwikipage.\n4.5.3 How do I send mail from a Python script?\nUsethestandardlibrarymodulesmtplib.\nHere\u2019saverysimpleinteractivemailsenderthatusesit. ThismethodwillworkonanyhostthatsupportsanSMTP\nlistener.\nimport sys, smtplib\nfromaddr = input(\"From: \")\ntoaddrs = input(\"To: \").split(',')\nprint(\"Enter message, end with ^D:\")\nmsg = ''\nwhile True:\nline = sys.stdin.readline()\nif not line:\nbreak\nmsg += line\n# The actual mail send\nserver = smtplib.SMTP('localhost')\nserver.sendmail(fromaddr, toaddrs, msg)\nserver.quit()\nAUnix-onlyalternativeusessendmail. Thelocationofthesendmailprogramvariesbetweensystems;sometimesit\nis/usr/lib/sendmail,sometimes/usr/sbin/sendmail. Thesendmailmanualpagewillhelpyouout. Here\u2019s\nsomesamplecode:\nimport os\nSENDMAIL = \"/usr/sbin/sendmail\" # sendmail location\np = os.popen(\"%s -t -i\" % SENDMAIL, \"w\")\np.write(\"To: receiver@example.com\\n\")\np.write(\"Subject: test\\n\")\np.write(\"\\n\") # blank line separating headers from body\np.write(\"Some text\\n\")\np.write(\"some more text\\n\")\nsts = p.close()\nif sts != 0:\nprint(\"Sendmail exit status\", sts)\n4.5.4 How do I avoid blocking in the connect() method of a socket?\nTheselectmoduleiscommonlyusedtohelpwithasynchronousI/Oonsockets.\nTo prevent theTCP connectfrom blocking, you canset the socketto non-blockingmode. Then whenyou dothe\nconnect(), you will either connect immediately (unlikely) or get an exception that contains the error number as\n.errno. errno.EINPROGRESSindicatesthattheconnectionisinprogress,buthasn\u2019tfinishedyet. DifferentOSes\nwillreturndifferentvalues,soyou\u2019regoingtohavetocheckwhat\u2019sreturnedonyoursystem.\nYoucanusetheconnect_ex()methodtoavoidcreatinganexception. Itwilljustreturntheerrnovalue. Topoll,\nyoucancallconnect_ex()againlater\u20130orerrno.EISCONNindicatethatyou\u2019reconnected\u2013oryoucanpass\nthissockettoselect.select()tocheckifit\u2019swritable.\n58 Chapter4. LibraryandExtensionFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n(cid:174) Note\nThe asyncio module provides a general purpose single-threaded and concurrent asynchronous library, which\ncanbeusedforwritingnon-blockingnetworkcode. Thethird-partyTwistedlibraryisapopularandfeature-rich\nalternative.\n4.6 Databases\n4.6.1 Are there any interfaces to database packages in Python?\nYes.\nInterfaces to disk-based hashes such as DBM and GDBM are also included with standard Python. There is also the\nsqlite3module,whichprovidesalightweightdisk-basedrelationaldatabase.\nSupportformostrelationaldatabasesisavailable. SeetheDatabaseProgrammingwikipagefordetails.\n4.6.2 How do you implement persistent objects in Python?\nThe pickle library module solves this in a very general way (though you still can\u2019t store things like open files,\nsocketsorwindows),andtheshelvelibrarymoduleusespickleand(g)dbmtocreatepersistentmappingscontaining\narbitraryPythonobjects.\n4.7 Mathematics and Numerics\n4.7.1 How do I generate random numbers in Python?\nThestandardmodulerandomimplementsarandomnumbergenerator. Usageissimple:\nimport random\nrandom.random()\nThisreturnsarandomfloating-pointnumberintherange[0,1).\nTherearealsomanyotherspecializedgeneratorsinthismodule,suchas:\n\u2022 randrange(a, b)choosesanintegerintherange[a,b).\n\u2022 uniform(a, b)choosesafloating-pointnumberintherange[a,b).\n\u2022 normalvariate(mean, sdev)samplesthenormal(Gaussian)distribution.\nSomehigher-levelfunctionsoperateonsequencesdirectly,suchas:\n\u2022 choice(S)choosesarandomelementfromagivensequence.\n\u2022 shuffle(L)shufflesalistin-place,i.e. permutesitrandomly.\nThere\u2019salsoaRandomclassyoucaninstantiatetocreateindependentmultiplerandomnumbergenerators.\n4.6. Databases 59\nPythonFrequentlyAskedQuestions,Release3.13.3\n60 Chapter4. LibraryandExtensionFAQ\nCHAPTER\nFIVE\nEXTENDING/EMBEDDING FAQ\n5.1 Can I create my own functions in C?\nYes, you can create built-in modules containing functions, variables, exceptions and even new types in C. This is\nexplainedinthedocumentextending-index.\nMostintermediateoradvancedPythonbookswillalsocoverthistopic.\n5.2 Can I create my own functions in C++?\nYes,usingtheCcompatibilityfeaturesfoundinC++. Placeextern \"C\" { ... }aroundthePythonincludefiles\nandputextern \"C\"beforeeachfunctionthatisgoingtobecalledbythePythoninterpreter. GlobalorstaticC++\nobjectswithconstructorsareprobablynotagoodidea.\n5.3 Writing C is hard; are there any alternatives?\nThereareanumberofalternativestowritingyourownCextensions,dependingonwhatyou\u2019retryingtodo.\nCython and its relative Pyrex are compilers that accept a slightly modified form of Python and generate the cor-\nresponding C code. Cython and Pyrex make it possible to write an extension without having to learn Python\u2019s C\nAPI.\nIfyouneedtointerfacetosomeCorC++libraryforwhichnoPythonextensioncurrentlyexists,youcantrywrapping\nthelibrary\u2019sdatatypesandfunctionswithatoolsuchasSWIG.SIP,CXXBoost,orWeavearealsoalternativesfor\nwrappingC++libraries.\n5.4 How can I execute arbitrary Python statements from C?\nThehighest-levelfunctiontodothisisPyRun_SimpleString()whichtakesasinglestringargumenttobeexecuted\nin the context of the module __main__ and returns 0 for success and -1 when an exception occurred (including\nSyntaxError). Ifyouwantmorecontrol,usePyRun_String(); seethesourceforPyRun_SimpleString()\ninPython/pythonrun.c.\n5.5 How can I evaluate an arbitrary Python expression from C?\nCallthefunctionPyRun_String()fromthepreviousquestionwiththestartsymbolPy_eval_input; itparses\nanexpression,evaluatesitandreturnsitsvalue.\n5.6 How do I extract C values from a Python object?\nThatdependsontheobject\u2019stype. Ifit\u2019satuple, PyTuple_Size()returnsitslengthandPyTuple_GetItem()\nreturnstheitemataspecifiedindex. Listshavesimilarfunctions,PyList_Size()andPyList_GetItem().\n61\nPythonFrequentlyAskedQuestions,Release3.13.3\nForbytes,PyBytes_Size()returnsitslengthandPyBytes_AsStringAndSize()providesapointertoitsvalue\nanditslength. NotethatPythonbytesobjectsmaycontainnullbytessoC\u2019sstrlen()shouldnotbeused.\nTotestthetypeofanobject,firstmakesureitisn\u2019tNULL,andthenusePyBytes_Check(),PyTuple_Check(),\nPyList_Check(),etc.\nThere is also a high-level API to Python objects which is provided by the so-called \u2018abstract\u2019 interface \u2013 read\nInclude/abstract.hforfurtherdetails. ItallowsinterfacingwithanykindofPythonsequenceusingcallslike\nPySequence_Length(),PySequence_GetItem(),etc. aswellasmanyotherusefulprotocolssuchasnumbers\n(PyNumber_Index()etal.) andmappingsinthePyMappingAPIs.\n5.7 How do I use Py_BuildValue() to create a tuple of arbitrary\nlength?\nYoucan\u2019t. UsePyTuple_Pack()instead.\n5.8 How do I call an object\u2019s method from C?\nThePyObject_CallMethod()functioncanbeusedtocallanarbitrarymethodofanobject. Theparametersare\ntheobject,thenameofthemethodtocall,aformatstringlikethatusedwithPy_BuildValue(),andtheargument\nvalues:\nPyObject *\nPyObject_CallMethod(PyObject *object, const char *method_name,\nconst char *arg_format, ...);\nThis works for any object that has methods \u2013 whether built-in or user-defined. You are responsible for eventually\nPy_DECREF()\u2018ingthereturnvalue.\nTocall,e.g.,afileobject\u2019s\u201cseek\u201dmethodwitharguments10,0(assumingthefileobjectpointeris\u201cf\u201d):\nres = PyObject_CallMethod(f, \"seek\", \"(ii)\", 10, 0);\nif (res == NULL) {\n... an exception occurred ...\n}\nelse {\nPy_DECREF(res);\n}\nNote that since PyObject_CallObject() always wants a tuple for the argument list, to call a function without\narguments,pass\u201c()\u201dfortheformat,andtocallafunctionwithoneargument,surroundtheargumentinparentheses,\ne.g. \u201c(i)\u201d.\n5.9 How do I catch the output from PyErr_Print() (or anything that\nprints to stdout/stderr)?\nInPythoncode,defineanobjectthatsupportsthewrite()method. Assignthisobjecttosys.stdoutandsys.\nstderr. Callprint_error,orjustallowthestandardtracebackmechanismtowork. Then,theoutputwillgowherever\nyourwrite()methodsendsit.\nTheeasiestwaytodothisistousetheio.StringIOclass:\n>>> import io, sys\n>>> sys.stdout = io.StringIO()\n>>> print('foo')\n>>> print('hello world!')\n>>> sys.stderr.write(sys.stdout.getvalue())\n(continuesonnextpage)\n62 Chapter5. Extending/EmbeddingFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nfoo\nhello world!\nAcustomobjecttodothesamewouldlooklikethis:\n>>> import io, sys\n>>> class StdoutCatcher(io.TextIOBase):\n... def __init__(self):\n... self.data = []\n... def write(self, stuff):\n... self.data.append(stuff)\n...\n>>> import sys\n>>> sys.stdout = StdoutCatcher()\n>>> print('foo')\n>>> print('hello world!')\n>>> sys.stderr.write(''.join(sys.stdout.data))\nfoo\nhello world!\n5.10 How do I access a module written in Python from C?\nYoucangetapointertothemoduleobjectasfollows:\nmodule = PyImport_ImportModule(\"<modulename>\");\nIf the module hasn\u2019t been imported yet (i.e. it is not yet present in sys.modules), this initializes the module;\notherwiseitsimplyreturnsthevalueofsys.modules[\"<modulename>\"]. Notethatitdoesn\u2019tenterthemodule\nintoanynamespace\u2013itonlyensuresithasbeeninitializedandisstoredinsys.modules.\nYoucanthenaccessthemodule\u2019sattributes(i.e. anynamedefinedinthemodule)asfollows:\nattr = PyObject_GetAttrString(module, \"<attrname>\");\nCallingPyObject_SetAttrString()toassigntovariablesinthemodulealsoworks.\n5.11 How do I interface to C++ objects from Python?\nDependingonyourrequirements,therearemanyapproaches. Todothismanually,beginbyreadingthe\u201cExtending\nandEmbedding\u201ddocument. RealizethatforthePythonrun-timesystem,thereisn\u2019tawholelotofdifferencebetween\nCandC++\u2013sothestrategyofbuildinganewPythontypearoundaCstructure(pointer)typewillalsoworkfor\nC++objects.\nForC++libraries,seeWritingCishard;arethereanyalternatives?.\n5.12 I added a module using the Setup file and the make fails; why?\nSetupmustendinanewline,ifthereisnonewlinethere,thebuildprocessfails. (Fixingthisrequiressomeuglyshell\nscripthackery,andthisbugissominorthatitdoesn\u2019tseemworththeeffort.)\n5.13 How do I debug an extension?\nWhenusingGDBwithdynamicallyloadedextensions,youcan\u2019tsetabreakpointinyourextensionuntilyourextension\nisloaded.\nInyour.gdbinitfile(orinteractively),addthecommand:\n5.10. HowdoIaccessamodulewritteninPythonfromC? 63\nPythonFrequentlyAskedQuestions,Release3.13.3\nbr _PyImport_LoadDynamicModule\nThen,whenyourunGDB:\n$ gdb /local/bin/python\ngdb) run myscript.py\ngdb) continue # repeat until your extension is loaded\ngdb) finish # so that your extension is loaded\ngdb) br myfunction.c:50\ngdb) continue\n5.14 I want to compile a Python module on my Linux system, but\nsome files are missing. Why?\nMostpackagedversionsofPythonomitsomefilesrequiredforcompilingPythonextensions.\nForRedHat,installthepython3-develRPMtogetthenecessaryfiles.\nForDebian,runapt-get install python3-dev.\n5.15 How do I tell \u201cincomplete input\u201d from \u201cinvalid input\u201d?\nSometimesyouwanttoemulatethePythoninteractiveinterpreter\u2019sbehavior,whereitgivesyouacontinuationprompt\nwhentheinputisincomplete(e.g. youtypedthestartofan\u201cif\u201dstatementoryoudidn\u2019tcloseyourparenthesesor\ntriplestringquotes),butitgivesyouasyntaxerrormessageimmediatelywhentheinputisinvalid.\nInPythonyoucanusethecodeopmodule,whichapproximatestheparser\u2019sbehaviorsufficiently. IDLEusesthis,\nforexample.\nThe easiest way to do it in C is to call PyRun_InteractiveLoop() (perhaps in a separate thread) and let the\nPythoninterpreterhandletheinputforyou. YoucanalsosetthePyOS_ReadlineFunctionPointer()topoint\natyourcustominputfunction. SeeModules/readline.candParser/myreadline.cformorehints.\n5.16 How do I find undefined g++ symbols __builtin_new or\n__pure_virtual?\nTodynamicallyloadg++extensionmodules,youmustrecompilePython,relinkitusingg++(changeLINKCCin\nthePythonModulesMakefile),andlinkyourextensionmoduleusingg++(e.g.,g++ -shared -o mymodule.so\nmymodule.o).\n5.17 Can I create an object class with some methods implemented\nin C and others in Python (e.g. through inheritance)?\nYes,youcaninheritfrombuilt-inclassessuchasint,list,dict,etc.\nThe Boost Python Library (BPL, https://www.boost.org/libs/python/doc/index.html) provides a way of doing this\nfromC++(i.e. youcaninheritfromanextensionclasswritteninC++usingtheBPL).\n64 Chapter5. Extending/EmbeddingFAQ\nCHAPTER\nSIX\nPYTHON ON WINDOWS FAQ\n6.1 How do I run a Python program under Windows?\nThisisnotnecessarilyastraightforwardquestion. IfyouarealreadyfamiliarwithrunningprogramsfromtheWin-\ndowscommandlinetheneverythingwillseemobvious;otherwise,youmightneedalittlemoreguidance.\nUnlessyouusesomesortofintegrateddevelopmentenvironment,youwillenduptypingWindowscommandsinto\nwhatisreferredtoasa\u201cCommandpromptwindow\u201d. Usuallyyoucancreatesuchawindowfromyoursearchbar\nbysearchingforcmd. Youshouldbeabletorecognizewhenyouhavestartedsuchawindowbecauseyouwillseea\nWindows\u201ccommandprompt\u201d,whichusuallylookslikethis:\nC:\\>\nThelettermaybedifferent,andtheremightbeotherthingsafterit,soyoumightjustaseasilyseesomethinglike:\nD:\\YourName\\Projects\\Python>\ndependingonhowyourcomputerhasbeensetupandwhatelseyouhaverecentlydonewithit. Onceyouhavestarted\nsuchawindow,youarewellonthewaytorunningPythonprograms.\nYouneedtorealizethatyourPythonscriptshavetobeprocessedbyanotherprogramcalledthePythoninterpreter.\nTheinterpreterreadsyourscript,compilesitintobytecodes,andthenexecutesthebytecodestorunyourprogram.\nSo,howdoyouarrangefortheinterpretertohandleyourPython?\nFirst, you need to make sure that your command window recognises the word \u201cpy\u201d as an instruction to start the\ninterpreter. Ifyouhaveopenedacommandwindow,youshouldtryenteringthecommandpyandhittingreturn:\nC:\\Users\\YourName> py\nYoushouldthenseesomethinglike:\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)]\u2423\n,\u2192on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\nYouhavestartedtheinterpreterin\u201cinteractivemode\u201d. ThatmeansyoucanenterPythonstatementsorexpressions\ninteractivelyandhavethemexecutedorevaluatedwhileyouwait. ThisisoneofPython\u2019sstrongestfeatures. Check\nitbyenteringafewexpressionsofyourchoiceandseeingtheresults:\n>>> print(\"Hello\")\nHello\n>>> \"Hello\" * 3\n'HelloHelloHello'\nManypeopleusetheinteractivemodeasaconvenientyethighlyprogrammablecalculator. Whenyouwanttoend\nyourinteractivePythonsession,calltheexit()functionorholdtheCtrlkeydownwhileyouenteraZ,thenhit\nthe\u201cEnter\u201dkeytogetbacktoyourWindowscommandprompt.\n65\nPythonFrequentlyAskedQuestions,Release3.13.3\nYoumayalsofindthatyouhaveaStart-menuentrysuchasStart\u2023Programs\u2023Python3.x\u2023Python(commandline)\nthatresultsinyouseeingthe>>>promptinanewwindow. Ifso,thewindowwilldisappearafteryoucalltheexit()\nfunctionorentertheCtrl-Zcharacter;Windowsisrunningasingle\u201cpython\u201dcommandinthewindow,andcloses\nitwhenyouterminatetheinterpreter.\nNowthatweknowthepycommandisrecognized,youcangiveyourPythonscripttoit. You\u2019llhavetogiveeitheran\nabsoluteorarelativepathtothePythonscript. Let\u2019ssayyourPythonscriptislocatedinyourdesktopandisnamed\nhello.py,andyourcommandpromptisnicelyopenedinyourhomedirectorysoyou\u2019reseeingsomethingsimilar\nto:\nC:\\Users\\YourName>\nSonowyou\u2019llaskthepycommandtogiveyourscripttoPythonbytypingpyfollowedbyyourscriptpath:\nC:\\Users\\YourName> py Desktop\\hello.py\nhello\n6.2 How do I make Python scripts executable?\nOnWindows,thestandardPythoninstalleralreadyassociatesthe.pyextensionwithafiletype(Python.File)andgives\nthatfiletypeanopencommandthatrunstheinterpreter(D:\\Program Files\\Python\\python.exe \"%1\" %*).\nThisisenoughtomakescriptsexecutablefromthecommandpromptas\u2018foo.py\u2019. Ifyou\u2019dratherbeabletoexecute\nthescriptbysimpletyping\u2018foo\u2019withnoextensionyouneedtoadd.pytothePATHEXTenvironmentvariable.\n6.3 Why does Python sometimes take so long to start?\nUsuallyPythonstartsveryquicklyonWindows,butoccasionallytherearebugreportsthatPythonsuddenlybegins\ntotakealongtimetostartup. ThisismadeevenmorepuzzlingbecausePythonwillworkfineonotherWindows\nsystemswhichappeartobeconfiguredidentically.\nTheproblemmaybecausedbyamisconfigurationofviruscheckingsoftwareontheproblemmachine. Somevirus\nscannershavebeenknowntointroducestartupoverheadoftwoordersofmagnitudewhenthescannerisconfigured\ntomonitorallreadsfromthefilesystem. Trycheckingtheconfigurationofvirusscanningsoftwareonyoursystems\ntoensurethattheyareindeedconfiguredidentically. McAfee,whenconfiguredtoscanallfilesystemreadactivity,\nisaparticularoffender.\n6.4 How do I make an executable from a Python script?\nSeeHowcanIcreateastand-alonebinaryfromaPythonscript? foralistoftoolsthatcanbeusedtomakeexecutables.\n6.5 Is a *.pyd file the same as a DLL?\nYes, .pyd files are dll\u2019s, but there are a few differences. If you have a DLL named foo.pyd, then it must have a\nfunctionPyInit_foo(). YoucanthenwritePython\u201cimportfoo\u201d,andPythonwillsearchforfoo.pyd(aswellas\nfoo.py,foo.pyc)andifitfindsit,willattempttocallPyInit_foo()toinitializeit. Youdonotlinkyour.exewith\nfoo.lib,asthatwouldcauseWindowstorequiretheDLLtobepresent.\nNotethatthesearchpathforfoo.pydisPYTHONPATH,notthesameasthepaththatWindowsusestosearchfor\nfoo.dll. Also,foo.pydneednotbepresenttorunyourprogram,whereasifyoulinkedyourprogramwithadll,the\ndllisrequired. Ofcourse,foo.pydisrequiredifyouwanttosayimport foo. InaDLL,linkageisdeclaredinthe\nsourcecodewith__declspec(dllexport). Ina.pyd,linkageisdefinedinalistofavailablefunctions.\n66 Chapter6. PythononWindowsFAQ\nPythonFrequentlyAskedQuestions,Release3.13.3\n6.6 How can I embed Python into a Windows application?\nEmbeddingthePythoninterpreterinaWindowsappcanbesummarizedasfollows:\n1. Do not build Python into your .exe file directly. On Windows, Python must be a DLL to handle importing\nmodulesthatarethemselvesDLL\u2019s. (Thisisthefirstkeyundocumentedfact.) Instead,linktopythonNN.dll;\nitistypicallyinstalledinC:\\Windows\\System. NNisthePythonversion,anumbersuchas\u201c33\u201dforPython\n3.3.\nYoucanlinktoPythonintwodifferentways. Load-timelinkingmeanslinkingagainstpythonNN.lib,while\nrun-time linking means linking against pythonNN.dll. (General note: pythonNN.lib is the so-called\n\u201cimportlib\u201dcorrespondingtopythonNN.dll. Itmerelydefinessymbolsforthelinker.)\nRun-time linking greatly simplifies link options; everything happens at run time. Your code must load\npythonNN.dll using the Windows LoadLibraryEx() routine. The code must also use access rou-\ntines and data in pythonNN.dll (that is, Python\u2019s C API\u2019s) using pointers obtained by the Windows\nGetProcAddress() routine. Macros can make using these pointers transparent to any C code that calls\nroutinesinPython\u2019sCAPI.\n2. IfyouuseSWIG,itiseasytocreateaPython\u201cextensionmodule\u201dthatwillmaketheapp\u2019sdataandmethods\navailabletoPython. SWIGwillhandlejustaboutallthegrungydetailsforyou. TheresultisCcodethatyou\nlinkintoyour.exefile(!) YoudonothavetocreateaDLLfile,andthisalsosimplifieslinking.\n3. SWIGwillcreateaninitfunction(aCfunction)whosenamedependsonthenameoftheextensionmodule.\nFor example, if the name of the module is leo, the init function will be called initleo(). If you use SWIG\nshadowclasses,asyoushould,theinitfunctionwillbecalledinitleoc(). Thisinitializesamostlyhiddenhelper\nclassusedbytheshadowclass.\nThe reason you can link the C code in step 2 into your .exe file is that calling the initialization function is\nequivalenttoimportingthemoduleintoPython! (Thisisthesecondkeyundocumentedfact.)\n4. Inshort,youcanusethefollowingcodetoinitializethePythoninterpreterwithyourextensionmodule.\n#include <Python.h>\n...\nPy_Initialize(); // Initialize Python.\ninitmyAppc(); // Initialize (import) the helper class.\nPyRun_SimpleString(\"import myApp\"); // Import the shadow class.\n5. There are two problems with Python\u2019s C API which will become apparent if you use a compiler other than\nMSVC,thecompilerusedtobuildpythonNN.dll.\nProblem1: Theso-called\u201cVeryHighLevel\u201dfunctionsthattakeFILE *argumentswillnotworkinamulti-\ncompilerenvironmentbecauseeachcompiler\u2019snotionofastruct FILEwillbedifferent. Fromanimple-\nmentationstandpointtheseareverylowlevelfunctions.\nProblem2: SWIGgeneratesthefollowingcodewhengeneratingwrapperstovoidfunctions:\nPy_INCREF(Py_None);\n_resultobj = Py_None;\nreturn _resultobj;\nAlas,Py_Noneisamacrothatexpandstoareferencetoacomplexdatastructurecalled_Py_NoneStructinside\npythonNN.dll. Again,thiscodewillfailinamult-compilerenvironment. Replacesuchcodeby:\nreturn Py_BuildValue(\"\");\nItmaybepossibletouseSWIG\u2019s%typemapcommandtomakethechangeautomatically,thoughIhavenot\nbeenabletogetthistowork(I\u2019macompleteSWIGnewbie).\n6. Using a Python shell script to put up a Python interpreter window from inside your Windows app is not a\ngood idea; the resulting window will be independent of your app\u2019s windowing system. Rather, you (or the\nwxPythonWindowclass)shouldcreatea\u201cnative\u201dinterpreterwindow. Itiseasytoconnectthatwindowtothe\n6.6. HowcanIembedPythonintoaWindowsapplication? 67\nPythonFrequentlyAskedQuestions,Release3.13.3\nPythoninterpreter. YoucanredirectPython\u2019si/oto_any_objectthatsupportsreadandwrite,soallyouneed\nisaPythonobject(definedinyourextensionmodule)thatcontainsread()andwrite()methods.\n6.7 How do I keep editors from inserting tabs into my Python\nsource?\nTheFAQdoesnotrecommendusingtabs,andthePythonstyleguide,PEP8,recommends4spacesfordistributed\nPythoncode;thisisalsotheEmacspython-modedefault.\nUnderanyeditor,mixingtabsandspacesisabadidea. MSVCisnodifferentinthisrespect,andiseasilyconfigured\ntousespaces: TakeTools\u2023Options\u2023Tabs,andforfiletype\u201cDefault\u201dset\u201cTabsize\u201dand\u201cIndentsize\u201dto4,andselect\nthe\u201cInsertspaces\u201dradiobutton.\nPythonraisesIndentationErrororTabErrorifmixedtabsandspacesarecausingproblemsinleadingwhites-\npace. Youmayalsorunthetabnannymoduletocheckadirectorytreeinbatchmode.\n6.8 How do I check for a keypress without blocking?\nUse the msvcrt module. This is a standard Windows-specific extension module. It defines a function kbhit()\nwhichcheckswhetherakeyboardhitispresent,andgetch()whichgetsonecharacterwithoutechoingit.\n6.9 How do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll er-\nror?\nThiscanoccuronPython3.5andlaterwhenusingWindows8.1orearlierwithoutallupdateshavingbeeninstalled.\nFirst ensure your operating system is supported and is up to date, and if that does not resolve the issue, visit the\nMicrosoftsupportpageforguidanceonmanuallyinstallingtheCRuntimeupdate.\n68 Chapter6. PythononWindowsFAQ\nCHAPTER\nSEVEN\nGRAPHIC USER INTERFACE FAQ\n7.1 General GUI Questions\n7.2 What GUI toolkits exist for Python?\nStandardbuildsofPythonincludeanobject-orientedinterfacetotheTcl/Tkwidgetset,calledtkinter. Thisisprobably\ntheeasiesttoinstall(sinceitcomesincludedwithmostbinarydistributionsofPython)anduse. Formoreinfoabout\nTk, includingpointerstothesource, seetheTcl/Tkhomepage. Tcl/TkisfullyportabletothemacOS,Windows,\nandUnixplatforms.\nDepending on what platform(s) you are aiming at, there are also several alternatives. A list of cross-platform and\nplatform-specificGUIframeworkscanbefoundonthepythonwiki.\n7.3 Tkinter questions\n7.3.1 How do I freeze Tkinter applications?\nFreezeisatooltocreatestand-aloneapplications. WhenfreezingTkinterapplications,theapplicationswillnotbe\ntrulystand-alone,astheapplicationwillstillneedtheTclandTklibraries.\nOne solution is to ship the application with the Tcl and Tk libraries, and point to them at run-time using the\nTCL_LIBRARYandTK_LIBRARYenvironmentvariables.\nVariousthird-partyfreezelibrariessuchaspy2exeandcx_FreezehavehandlingforTkinterapplicationsbuilt-in.\n7.3.2 Can I have Tk events handled while waiting for I/O?\nOnplatformsotherthanWindows,yes,andyoudon\u2019tevenneedthreads! Butyou\u2019llhavetorestructureyourI/Ocode\nabit. TkhastheequivalentofXt\u2019sXtAddInput()call,whichallowsyoutoregisteracallbackfunctionwhichwill\nbecalledfromtheTkmainloopwhenI/Oispossibleonafiledescriptor. Seetkinter-file-handlers.\n7.3.3 I can\u2019t get key bindings to work in Tkinter: why?\nAn often-heard complaint is that event handlers bound to events with the bind() method don\u2019t get handled even\nwhentheappropriatekeyispressed.\nThemostcommoncauseisthatthewidgettowhichthebindingappliesdoesn\u2019thave\u201ckeyboardfocus\u201d. Checkout\ntheTkdocumentationforthefocuscommand. Usuallyawidgetisgiventhekeyboardfocusbyclickinginit(butnot\nforlabels;seethetakefocusoption).\n69\nPythonFrequentlyAskedQuestions,Release3.13.3\n70 Chapter7. GraphicUserInterfaceFAQ\nCHAPTER\nEIGHT\n\u201cWHY IS PYTHON INSTALLED ON MY COMPUTER?\u201d FAQ\n8.1 What is Python?\nPython is a programming language. It\u2019s used for many different applications. It\u2019s used in some high schools and\ncollegesasanintroductoryprogramminglanguagebecausePythoniseasytolearn,butit\u2019salsousedbyprofessional\nsoftwaredevelopersatplacessuchasGoogle,NASA,andLucasfilmLtd.\nIfyouwishtolearnmoreaboutPython,startwiththeBeginner\u2019sGuidetoPython.\n8.2 Why is Python installed on my machine?\nIfyoufindPythoninstalledonyoursystembutdon\u2019trememberinstallingit,thereareseveralpossiblewaysitcould\nhavegottenthere.\n\u2022 Perhapsanotheruseronthecomputerwantedtolearnprogrammingandinstalledit;you\u2019llhavetofigureout\nwho\u2019sbeenusingthemachineandmighthaveinstalledit.\n\u2022 Athird-partyapplicationinstalledonthemachinemighthavebeenwritteninPythonandincludedaPython\ninstallation. There are many such applications, from GUI programs to network servers and administrative\nscripts.\n\u2022 SomeWindowsmachinesalsohavePythoninstalled. Atthiswritingwe\u2019reawareofcomputersfromHewlett-\nPackardandCompaqthatincludePython. ApparentlysomeofHP/Compaq\u2019sadministrativetoolsarewritten\ninPython.\n\u2022 ManyUnix-compatibleoperatingsystems,suchasmacOSandsomeLinuxdistributions,havePythoninstalled\nbydefault;it\u2019sincludedinthebaseinstallation.\n8.3 Can I delete Python?\nThatdependsonwherePythoncamefrom.\nIfsomeoneinstalleditdeliberately,youcanremoveitwithouthurtinganything. OnWindows,usetheAdd/Remove\nProgramsiconintheControlPanel.\nIfPythonwasinstalledbyathird-partyapplication,youcanalsoremoveit,butthatapplicationwillnolongerwork.\nYoushouldusethatapplication\u2019suninstallerratherthanremovingPythondirectly.\nIfPythoncamewithyouroperatingsystem,removingitisnotrecommended. Ifyouremoveit,whatevertoolswere\nwritteninPythonwillnolongerrun, andsomeofthemmightbeimportanttoyou. Reinstallingthewholesystem\nwouldthenberequiredtofixthingsagain.\n71\nPythonFrequentlyAskedQuestions,Release3.13.3\n72 Chapter8. \u201cWhyisPythonInstalledonmyComputer?\u201d FAQ\nAPPENDIX\nA\nGLOSSARY\n>>>\nThe default Python prompt of the interactive shell. Often seen for code examples which can be executed\ninteractivelyintheinterpreter.\n...\nCanreferto:\n\u2022 ThedefaultPythonpromptoftheinteractiveshellwhenenteringthecodeforanindentedcodeblock,\nwhen within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or\ntriplequotes),orafterspecifyingadecorator.\n\u2022 TheEllipsisbuilt-inconstant.\nabstractbaseclass\nAbstractbaseclassescomplementduck-typingbyprovidingawaytodefineinterfaceswhenothertechniques\nlikehasattr()wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual\nsubclasses, which are classes that don\u2019t inherit from a class but are still recognized by isinstance() and\nissubclass();seetheabcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-\ntures(inthecollections.abcmodule),numbers(inthenumbersmodule),streams(intheiomodule),\nimportfindersandloaders(intheimportlib.abcmodule). YoucancreateyourownABCswiththeabc\nmodule.\nannotation\nAlabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention\nasatypehint.\nAnnotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-\ntributes, andfunctionsarestoredinthe__annotations__specialattributeofmodules, classes, andfunc-\ntions,respectively.\nSeevariableannotation,functionannotation,PEP484andPEP526,whichdescribethisfunctionality. Also\nseeannotations-howtoforbestpracticesonworkingwithannotations.\nargument\nAvaluepassedtoafunction(ormethod)whencallingthefunction. Therearetwokindsofargument:\n\u2022 keywordargument: anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa\nvalueinadictionaryprecededby**. Forexample,3and5arebothkeywordargumentsinthefollowing\ncallstocomplex():\ncomplex(real=3, imag=5)\ncomplex(**{'real': 3, 'imag': 5})\n\u2022 positionalargument: anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe\nbeginningofanargumentlistand/orbepassedaselementsofaniterableprecededby*. Forexample,3\nand5arebothpositionalargumentsinthefollowingcalls:\ncomplex(3, 5)\ncomplex(*(3, 5))\n73\nPythonFrequentlyAskedQuestions,Release3.13.3\nArguments are assigned to the named local variables in a function body. See the calls section for the rules\ngoverningthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument;theevaluated\nvalueisassignedtothelocalvariable.\nSeealsotheparameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\nandPEP362.\nasynchronouscontextmanager\nAnobjectwhichcontrolstheenvironmentseeninanasync withstatementbydefining__aenter__()and\n__aexit__()methods. IntroducedbyPEP492.\nasynchronousgenerator\nAfunctionwhichreturnsanasynchronousgeneratoriterator. Itlookslikeacoroutinefunctiondefinedwith\nasync def except that it contains yield expressions for producing a series of values usable in an async\nforloop.\nUsuallyreferstoanasynchronousgeneratorfunction, butmayrefertoanasynchronousgeneratoriterator in\nsomecontexts. Incaseswheretheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\nAnasynchronousgeneratorfunctionmaycontainawaitexpressionsaswellasasync for,andasync with\nstatements.\nasynchronousgeneratoriterator\nAnobjectcreatedbyaasynchronousgeneratorfunction.\nThisisanasynchronousiteratorwhichwhencalledusingthe__anext__()methodreturnsanawaitableobject\nwhichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenextyieldexpression.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npendingtry-statements). Whentheasynchronousgeneratoriteratoreffectivelyresumeswithanotherawaitable\nreturnedby__anext__(),itpicksupwhereitleftoff. SeePEP492andPEP525.\nasynchronousiterable\nAn object, that can be used in an async for statement. Must return an asynchronous iterator from its\n__aiter__()method. IntroducedbyPEP492.\nasynchronousiterator\nAn object that implements the __aiter__() and __anext__() methods. __anext__() must return an\nawaitableobject. async forresolvestheawaitablesreturnedbyanasynchronousiterator\u2019s__anext__()\nmethoduntilitraisesaStopAsyncIterationexception. IntroducedbyPEP492.\nattribute\nAvalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,\nifanobjectohasanattributeaitwouldbereferencedaso.a.\nItispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample\nusingsetattr(),iftheobjectallowsit. Suchanattributewillnotbeaccessibleusingadottedexpression,\nandwouldinsteadneedtoberetrievedwithgetattr().\nawaitable\nAnobjectthatcanbeusedinanawaitexpression. Canbeacoroutineoranobjectwithan__await__()\nmethod. SeealsoPEP492.\nBDFL\nBenevolentDictatorForLife,a.k.a. GuidovanRossum,Python\u2019screator.\nbinaryfile\nAfileobjectabletoreadandwritebytes-likeobjects. Examplesofbinaryfilesarefilesopenedinbinarymode\n('rb','wb'or'rb+'),sys.stdin.buffer,sys.stdout.buffer,andinstancesofio.BytesIOand\ngzip.GzipFile.\nSeealsotextfileforafileobjectabletoreadandwritestrobjects.\nborrowedreference\nInPython\u2019sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot\nownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection\ncanremovethelaststrongreferencetotheobjectandsodestroyit.\n74 AppendixA. Glossary\nPythonFrequentlyAskedQuestions,Release3.13.3\nCallingPy_INCREF()ontheborrowedreferenceisrecommendedtoconvertittoastrongreferencein-place,\nexceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. ThePy_NewRef()\nfunctioncanbeusedtocreateanewstrongreference.\nbytes-likeobject\nAn object that supports the bufferobjects and can export a C-contiguous buffer. This includes all bytes,\nbytearray,andarray.arrayobjects,aswellasmanycommonmemoryviewobjects. Bytes-likeobjects\ncanbeusedforvariousoperationsthatworkwithbinarydata;theseincludecompression,savingtoabinary\nfile,andsendingoverasocket.\nSomeoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas\u201cread-write\nbytes-likeobjects\u201d. Examplemutablebufferobjectsincludebytearrayandamemoryviewofabytearray.\nOther operations require the binary data to be stored in immutable objects (\u201cread-only bytes-like objects\u201d);\nexamplesoftheseincludebytesandamemoryviewofabytesobject.\nbytecode\nPythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython\ninterpreter. Thebytecodeisalsocachedin.pycfilessothatexecutingthesamefileisfasterthesecondtime\n(recompilation from source to bytecode can be avoided). This \u201cintermediate language\u201d is said to run on a\nvirtualmachinethatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare\nnotexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.\nAlistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.\ncallable\nAcallableisanobjectthatcanbecalled,possiblywithasetofarguments(seeargument),withthefollowing\nsyntax:\ncallable(argument1, argument2, argumentN)\nAfunction,andbyextensionamethod,isacallable. Aninstanceofaclassthatimplementsthe__call__()\nmethodisalsoacallable.\ncallback\nAsubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.\nclass\nA template for creating user-defined objects. Class definitions normally contain method definitions which\noperateoninstancesoftheclass.\nclassvariable\nAvariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).\nclosurevariable\nAfreevariablereferencedfromanestedscopethatisdefinedinanouterscoperatherthanbeingresolvedat\nruntime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to\nallowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.\nForexample,intheinnerfunctioninthefollowingcode,bothxandprintarefreevariables,butonlyxis\naclosurevariable:\ndef outer():\nx = 0\ndef inner():\nnonlocal x\nx += 1\nprint(x)\nreturn inner\nDuetothecodeobject.co_freevarsattribute(which,despiteitsname,onlyincludesthenamesofclosure\nvariablesratherthanlistingallreferencedfreevariables),themoregeneralfreevariabletermissometimesused\nevenwhentheintendedmeaningistoreferspecificallytoclosurevariables.\n75\nPythonFrequentlyAskedQuestions,Release3.13.3\ncomplexnumber\nAnextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand\nanimaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof-1),often\nwritten i in mathematics or j in engineering. Python has built-in support for complex numbers, which are\nwrittenwiththislatternotation;theimaginarypartiswrittenwithajsuffix,e.g.,3+1j. Togetaccesstocom-\nplexequivalentsofthemathmodule,usecmath. Useofcomplexnumbersisafairlyadvancedmathematical\nfeature. Ifyou\u2019renotawareofaneedforthem,it\u2019salmostcertainyoucansafelyignorethem.\ncontext\nThistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:\n\u2022 Thetemporarystateorenvironmentestablishedbyacontextmanagerviaawithstatement.\n\u2022 The collection of keyvalue bindings associated with a particular contextvars.Context object and\naccessedviaContextVarobjects. Alsoseecontextvariable.\n\u2022 Acontextvars.Contextobject. Alsoseecurrentcontext.\ncontextmanagementprotocol\nThe__enter__()and__exit__()methodscalledbythewithstatement. SeePEP343.\ncontextmanager\nAnobjectwhichimplementsthecontextmanagementprotocol andcontrolstheenvironmentseenina with\nstatement. SeePEP343.\ncontextvariable\nA variable whose value depends on which context is the current context. Values are accessed via\ncontextvars.ContextVarobjects. Contextvariablesareprimarilyusedtoisolatestatebetweenconcur-\nrentasynchronoustasks.\ncontiguous\nAbufferisconsideredcontiguousexactlyifitiseitherC-contiguousorFortrancontiguous. Zero-dimensional\nbuffersareCandFortrancontiguous. Inone-dimensionalarrays,theitemsmustbelaidoutinmemorynext\ntoeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the\nlastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous\narrays,thefirstindexvariesthefastest.\ncoroutine\nCoroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at\nanotherpoint. Coroutinescanbeentered,exited,andresumedatmanydifferentpoints. Theycanbeimple-\nmentedwiththeasync defstatement. SeealsoPEP492.\ncoroutinefunction\nAfunctionwhichreturnsacoroutineobject. Acoroutinefunctionmaybedefinedwiththeasync defstate-\nment, and may contain await, async for, and async with keywords. These were introduced by PEP\n492.\nCPython\nThecanonicalimplementationofthePythonprogramminglanguage,asdistributedonpython.org. Theterm\n\u201cCPython\u201disusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.\ncurrentcontext\nThecontext (contextvars.Contextobject)thatiscurrentlyusedbyContextVarobjectstoaccess(get\nor set) the values of context variables. Each thread has its own current context. Frameworks for executing\nasynchronous tasks (see asyncio) associate each task with a context which becomes the current context\nwheneverthetaskstartsorresumesexecution.\ndecorator\nAfunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe@wrappersyntax.\nCommonexamplesfordecoratorsareclassmethod()andstaticmethod().\nThedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-\nalent:\n76 AppendixA. Glossary\nPythonFrequentlyAskedQuestions,Release3.13.3\ndef f(arg):\n...\nf = staticmethod(f)\n@staticmethod\ndef f(arg):\n...\nThe same concept exists for classes, but is less commonly used there. See the documentation for function\ndefinitionsandclassdefinitionsformoreaboutdecorators.\ndescriptor\nAnyobjectwhichdefinesthemethods__get__(),__set__(),or__delete__(). Whenaclassattribute\nis a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.b to get,\nset or delete an attribute looks up the object named b in the class dictionary for a, but if b is a descriptor,\ntherespectivedescriptormethodgetscalled. Understandingdescriptorsisakeytoadeepunderstandingof\nPythonbecausetheyarethebasisformanyfeaturesincludingfunctions,methods,properties,classmethods,\nstaticmethods,andreferencetosuperclasses.\nFormoreinformationaboutdescriptors\u2019methods,seedescriptorsortheDescriptorHowToGuide.\ndictionary\nAnassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith__hash__()\nand__eq__()methods. CalledahashinPerl.\ndictionarycomprehension\nA compact way to process all or part of the elements in an iterable and return a dictionary with the re-\nsults. results = {n: n ** 2 for n in range(10)}generatesadictionarycontainingkeynmapped\ntovaluen ** 2. Seecomprehensions.\ndictionaryview\nTheobjectsreturnedfromdict.keys(),dict.values(),anddict.items()arecalleddictionaryviews.\nTheyprovideadynamicviewonthedictionary\u2019sentries,whichmeansthatwhenthedictionarychanges,the\nview reflects these changes. To force the dictionary view to become a full list use list(dictview). See\ndict-views.\ndocstring\nAstringliteralwhichappearsasthefirstexpressioninaclass,functionormodule. Whileignoredwhenthe\nsuiteisexecuted,itisrecognizedbythecompilerandputintothe__doc__attributeoftheenclosingclass,\nfunctionormodule. Sinceitisavailableviaintrospection,itisthecanonicalplacefordocumentationofthe\nobject.\nduck-typing\nAprogrammingstylewhichdoesnotlookatanobject\u2019stypetodetermineifithastherightinterface;instead,\nthe method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be\na duck.\u201d) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility\nby allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). (Note,\nhowever, that duck-typing can be complemented with abstract base classes.) Instead, it typically employs\nhasattr()testsorEAFPprogramming.\nEAFP\nEasier to ask for forgiveness than permission. This common Python coding style assumes the existence of\nvalid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is\ncharacterizedbythepresenceofmanytryandexceptstatements. ThetechniquecontrastswiththeLBYL\nstylecommontomanyotherlanguagessuchasC.\nexpression\nApieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof\nexpressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In\ncontrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealsostatementswhich\ncannotbeusedasexpressions,suchaswhile. Assignmentsarealsostatements,notexpressions.\n77\nPythonFrequentlyAskedQuestions,Release3.13.3\nextensionmodule\nAmodulewritteninCorC++,usingPython\u2019sCAPItointeractwiththecoreandwithusercode.\nf-string\nString literals prefixed with 'f' or 'F' are commonly called \u201cf-strings\u201d which is short for formatted string\nliterals. SeealsoPEP498.\nfileobject\nAnobjectexposingafile-orientedAPI(withmethodssuchasread()orwrite())toanunderlyingresource.\nDependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof\nstorageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).\nFileobjectsarealsocalledfile-likeobjectsorstreams.\nThereareactuallythreecategoriesoffileobjects: rawbinaryfiles, bufferedbinaryfilesandtextfiles. Their\ninterfaces are defined in the io module. The canonical way to create a file object is by using the open()\nfunction.\nfile-likeobject\nAsynonymforfileobject.\nfilesystemencodinganderrorhandler\nEncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto\ntheoperatingsystem.\nThefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding\nfailstoprovidethisguarantee,APIfunctionscanraiseUnicodeError.\nThe sys.getfilesystemencoding() and sys.getfilesystemencodeerrors() functions can be\nusedtogetthefilesystemencodinganderrorhandler.\nThefilesystemencodinganderrorhandlerareconfiguredatPythonstartupbythePyConfig_Read()func-\ntion: seefilesystem_encodingandfilesystem_errorsmembersofPyConfig.\nSeealsothelocaleencoding.\nfinder\nAnobjectthattriestofindtheloaderforamodulethatisbeingimported.\nTherearetwotypesoffinder: metapathfindersforusewithsys.meta_path,andpathentryfindersforuse\nwithsys.path_hooks.\nSeefinders-and-loadersandimportlibformuchmoredetail.\nfloordivision\nMathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris//. Forexample,the\nexpression11 // 4evaluatesto2incontrasttothe2.75returnedbyfloattruedivision. Notethat(-11)\n// 4is-3becausethatis-2.75roundeddownward. SeePEP238.\nfreethreading\nAthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.\nThisisincontrasttotheglobalinterpreterlockwhichallowsonlyonethreadtoexecutePythonbytecodeata\ntime. SeePEP703.\nfreevariable\nFormally, as defined in the language execution model, a free variable is any variable used in a namespace\nwhichisnotalocalvariableinthatnamespace. Seeclosurevariableforanexample. Pragmatically,duetothe\nnameofthecodeobject.co_freevarsattribute,thetermisalsosometimesusedasasynonymforclosure\nvariable.\nfunction\nAseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormoreargumentswhich\nmaybeusedintheexecutionofthebody. Seealsoparameter,method,andthefunctionsection.\nfunctionannotation\nAnannotationofafunctionparameterorreturnvalue.\n78 AppendixA. Glossary\nPythonFrequentlyAskedQuestions,Release3.13.3\nFunction annotations are usually used for type hints: for example, this function is expected to take two int\nargumentsandisalsoexpectedtohaveanintreturnvalue:\ndef sum_two_numbers(a: int, b: int) -> int:\nreturn a + b\nFunctionannotationsyntaxisexplainedinsectionfunction.\nSeevariableannotationandPEP484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest\npracticesonworkingwithannotations.\n__future__\nAfuturestatement,from __future__ import <feature>,directsthecompilertocompilethecurrent\nmoduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The__future__\nmoduledocumentsthepossiblevaluesoffeature. Byimportingthismoduleandevaluatingitsvariables,you\ncanseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:\n>>> import __future__\n>>> __future__.division\n_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)\ngarbagecollection\nTheprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference\ncountingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector\ncanbecontrolledusingthegcmodule.\ngenerator\nA function which returns a generator iterator. It looks like a normal function except that it contains yield\nexpressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe\nnext()function.\nUsuallyreferstoageneratorfunction,butmayrefertoageneratoriterator insomecontexts. Incaseswhere\ntheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\ngeneratoriterator\nAnobjectcreatedbyageneratorfunction.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npending try-statements). When the generator iterator resumes, it picks up where it left off (in contrast to\nfunctionswhichstartfreshoneveryinvocation).\ngeneratorexpression\nAnexpressionthatreturnsaniterator. Itlookslikeanormalexpressionfollowedbyaforclausedefininga\nloop variable, range, andan optional if clause. The combinedexpressiongeneratesvaluesfor an enclosing\nfunction:\n>>> sum(i*i for i in range(10)) # sum of squares 0, 1, 4, ... 81\n285\ngenericfunction\nAfunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-\nplementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.\nSeealsothesingledispatchglossaryentry,thefunctools.singledispatch()decorator,andPEP443.\ngenerictype\nAtypethatcanbeparameterized; typicallyacontainerclasssuchaslistordict. Usedfortypehintsand\nannotations.\nFormoredetails,seegenericaliastypes,PEP483,PEP484,PEP585,andthetypingmodule.\nGIL\nSeeglobalinterpreterlock.\n79\nPythonFrequentlyAskedQuestions,Release3.13.3\nglobalinterpreterlock\nThe mechanism used by the CPython interpreter to assure that only one thread executes Python bytecode at\na time. This simplifies the CPython implementation by making the object model (including critical built-in\ntypessuchasdict)implicitlysafeagainstconcurrentaccess. Lockingtheentireinterpretermakesiteasier\nfortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor\nmachines.\nHowever,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen\ndoingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen\ndoingI/O.\nAsofPython3.13, theGILcanbedisabledusingthe--disable-gilbuildconfiguration. Afterbuilding\nPythonwiththisoption,codemustberunwith-X gil=0oraftersettingthePYTHON_GIL=0environment\nvariable. This feature enables improved performance for multi-threaded applications and makes it easier to\nusemulti-coreCPUsefficiently. Formoredetails,seePEP703.\nhash-basedpyc\nAbytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto\ndetermineitsvalidity. Seepyc-invalidation.\nhashable\nAnobjectishashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa__hash__()\nmethod), and can be compared to other objects (it needs an __eq__() method). Hashable objects which\ncompareequalmusthavethesamehashvalue.\nHashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe\nhashvalueinternally.\nMost of Python\u2019s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)\narenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.\nObjectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except\nwiththemselves),andtheirhashvalueisderivedfromtheirid().\nIDLE\nAnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-\nronmentwhichshipswiththestandarddistributionofPython.\nimmortal\nImmortalobjectsareaCPythonimplementationdetailintroducedinPEP683.\nIfanobjectisimmortal,itsreferencecount isnevermodified,andthereforeitisneverdeallocatedwhilethe\ninterpreterisrunning. Forexample,TrueandNoneareimmortalinCPython.\nimmutable\nAnobjectwithafixedvalue. Immutableobjectsincludenumbers,stringsandtuples. Suchanobjectcannot\nbealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein\nplaceswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.\nimportpath\nAlistoflocations(orpathentries)thataresearchedbythepathbasedfinderformodulestoimport. During\nimport,thislistoflocationsusuallycomesfromsys.path,butforsubpackagesitmayalsocomefromthe\nparentpackage\u2019s__path__attribute.\nimporting\nTheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.\nimporter\nAnobjectthatbothfindsandloadsamodule;bothafinderandloaderobject.\ninteractive\nPythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter\nprompt, immediately execute them and see their results. Just launch python with no arguments (possibly\nby selecting it fromyour computer\u2019s mainmenu). It isa very powerfulway to testout new ideas orinspect\nmodulesandpackages(rememberhelp(x)). Formoreoninteractivemode,seetut-interac.\n80 AppendixA. Glossary\nPythonFrequentlyAskedQuestions,Release3.13.3\ninterpreted\nPythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause\nofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly\ncreating an executable which is then run. Interpreted languages typically have a shorter development/debug\ncyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealsointeractive.\ninterpretershutdown\nWhenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated\nresources, suchasmodulesandvariouscriticalinternalstructures. Italsomakesseveralcallstothegarbage\ncollector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-\ncutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction\nanymore(commonexamplesarelibrarymodulesorthewarningsmachinery).\nThemainreasonforinterpretershutdownisthatthe__main__moduleorthescriptbeingrunhasfinished\nexecuting.\niterable\nAnobjectcapableofreturningitsmembersoneatatime. Examplesofiterablesincludeallsequencetypes\n(such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any\nclassesyoudefinewithan__iter__()methodorwitha__getitem__()methodthatimplementssequence\nsemantics.\nIterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(),\n\u2026). Whenaniterableobjectispassedasanargumenttothebuilt-infunctioniter(),itreturnsaniterator\nfortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot\nnecessarytocalliter()ordealwithiteratorobjectsyourself. Theforstatementdoesthatautomaticallyfor\nyou,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealsoiterator,\nsequence,andgenerator.\niterator\nAn object representing a stream of data. Repeated calls to the iterator\u2019s __next__() method (or passing\nittothebuilt-infunctionnext())returnsuccessiveitemsinthestream. Whennomoredataareavailablea\nStopIterationexceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls\ntoits__next__()methodjustraiseStopIterationagain. Iteratorsarerequiredtohavean__iter__()\nmethodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces\nwhereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A\ncontainerobject(suchasalist)producesafreshnewiteratoreachtimeyoupassittotheiter()function\noruseitinaforloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused\ninthepreviousiterationpass,makingitappearlikeanemptycontainer.\nMoreinformationcanbefoundintypeiter.\nCPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine\n__iter__(). Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof\niteratoroperations.\nkeyfunction\nAkeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,\nlocale.strxfrm()isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.\nA number of tools in Python accept key functions to control how elements are ordered or grouped. They\ninclude min(), max(), sorted(), list.sort(), heapq.merge(), heapq.nsmallest(), heapq.\nnlargest(),anditertools.groupby().\nThere are several ways to create a key function. For example. the str.lower() method can serve as a\nkey function for case insensitive sorts. Alternatively, a key function can be built from a lambda expression\nsuchaslambda r: (r[0], r[2]). Also,operator.attrgetter(),operator.itemgetter(),and\noperator.methodcaller()arethreekeyfunctionconstructors. SeetheSortingHOWTOforexamples\nofhowtocreateandusekeyfunctions.\nkeywordargument\nSeeargument.\n81\nPythonFrequentlyAskedQuestions,Release3.13.3\nlambda\nAnanonymousinlinefunctionconsistingofasingleexpressionwhichisevaluatedwhenthefunctioniscalled.\nThesyntaxtocreatealambdafunctionislambda [parameters]: expression\nLBYL\nLookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This\nstylecontrastswiththeEAFPapproachandischaracterizedbythepresenceofmanyifstatements.\nIn a multi-threaded environment, the LBYL approach can risk introducing a race condition between \u201cthe\nlooking\u201dand\u201ctheleaping\u201d. Forexample, thecode, if key in mapping: return mapping[key] can\nfailifanotherthreadremoveskeyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved\nwithlocksorbyusingtheEAFPapproach.\nlexicalanalyzer\nFormalnameforthetokenizer;seetoken.\nlist\nAbuilt-inPythonsequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist\nsinceaccesstoelementsisO(1).\nlistcomprehension\nAcompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result\n= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0]generatesalistofstringscon-\ntainingevenhexnumbers(0x..) intherangefrom0to255. Theifclauseisoptional. Ifomitted,allelements\ninrange(256)areprocessed.\nloader\nAn object that loads a module. It must define the exec_module() and create_module() methods to\nimplementtheLoaderinterface. Aloaderistypicallyreturnedbyafinder. Seealso:\n\u2022 finders-and-loaders\n\u2022 importlib.abc.Loader\n\u2022 PEP302\nlocaleencoding\nOn Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.\nLC_CTYPE, new_locale).\nOnWindows,itistheANSIcodepage(ex: \"cp1252\").\nOnAndroidandVxWorks,Pythonuses\"utf-8\"asthelocaleencoding.\nlocale.getencoding()canbeusedtogetthelocaleencoding.\nSeealsothefilesystemencodinganderrorhandler.\nmagicmethod\nAninformalsynonymforspecialmethod.\nmapping\nA container object that supports arbitrary key lookups and implements the methods specified in the\ncollections.abc.Mapping or collections.abc.MutableMapping abstract base classes. Exam-\nples include dict, collections.defaultdict, collections.OrderedDict and collections.\nCounter.\nmetapathfinder\nAfinderreturnedbyasearchofsys.meta_path. Metapathfindersarerelatedto,butdifferentfrompath\nentryfinders.\nSeeimportlib.abc.MetaPathFinderforthemethodsthatmetapathfindersimplement.\nmetaclass\nTheclassofaclass. Classdefinitionscreateaclassname, aclassdictionary, andalistofbaseclasses. The\nmetaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-\ngramming languages provide a default implementation. What makes Python special is that it is possible to\ncreatecustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide\n82 AppendixA. Glossary\nPythonFrequentlyAskedQuestions,Release3.13.3\npowerful,elegantsolutions. Theyhavebeenusedforloggingattributeaccess,addingthread-safety,tracking\nobjectcreation,implementingsingletons,andmanyothertasks.\nMoreinformationcanbefoundinmetaclasses.\nmethod\nAfunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod\nwillgettheinstanceobjectasitsfirstargument(whichisusuallycalledself). Seefunctionandnestedscope.\nmethodresolutionorder\nMethod Resolution Order is the order in which base classes are searched for a member during lookup. See\npython_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.\nmodule\nAnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary\nPythonobjects. ModulesareloadedintoPythonbytheprocessofimporting.\nSeealsopackage.\nmodulespec\nAnamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceofimportlib.\nmachinery.ModuleSpec.\nSeealsomodule-specs.\nMRO\nSeemethodresolutionorder.\nmutable\nMutableobjectscanchangetheirvaluebutkeeptheirid(). Seealsoimmutable.\nnamedtuple\nTheterm\u201cnamedtuple\u201dappliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare\nalsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.\nSeveral built-in types are named tuples, including the values returned by time.localtime() and os.\nstat(). Anotherexampleissys.float_info:\n>>> sys.float_info[1] # indexed access\n1024\n>>> sys.float_info.max_exp # named field access\n1024\n>>> isinstance(sys.float_info, tuple) # kind of tuple\nTrue\nSome named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be\ncreated from a regular class definition that inherits from tuple and that defines named fields. Such a class\ncanbewrittenbyhand,oritcanbecreatedbyinheritingtyping.NamedTuple,orwiththefactoryfunction\ncollections.namedtuple(). Thelattertechniquesalsoaddsomeextramethodsthatmaynotbefound\ninhand-writtenorbuilt-innamedtuples.\nnamespace\nThe place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,\nglobal and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support\nmodularitybypreventingnamingconflicts. Forinstance,thefunctionsbuiltins.openandos.open()are\ndistinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear\nwhich module implements a function. For instance, writing random.seed() or itertools.islice()\nmakesitclearthatthosefunctionsareimplementedbytherandomanditertoolsmodules,respectively.\nnamespacepackage\nA package which serves only as a container for subpackages. Namespace packages may have no physical\nrepresentation,andspecificallyarenotlikearegularpackagebecausetheyhaveno__init__.pyfile.\nNamespacepackagesallowseveralindividuallyinstallablepackagestohaveacommonparentpackage. Oth-\nerwise,itisrecommendedtousearegularpackage.\n83\nPythonFrequentlyAskedQuestions,Release3.13.3\nFormoreinformation,seePEP420andreference-namespace-package.\nSeealsomodule.\nnestedscope\nThe ability to refer to a variable in an enclosing definition. For instance, a function defined inside another\nfunctioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference\nandnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables\nreadandwritetotheglobalnamespace. Thenonlocalallowswritingtoouterscopes.\nnew-styleclass\nOld name for the flavor of classes now used for all class objects. In earlier Python versions, only\nnew-style classes could use Python\u2019s newer, versatile features like __slots__, descriptors, properties,\n__getattribute__(),classmethods,andstaticmethods.\nobject\nAnydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany\nnew-styleclass.\noptimizedscope\nA scope where target local variable names are reliably known to the compiler when the code is compiled,\nallowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,\ncoroutines,comprehensions,andgeneratorexpressionsareoptimizedinthisfashion. Note: mostinterpreter\noptimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames\narerestrictedtooptimizedscopes.\npackage\nA Python module which can contain submodules or recursively, subpackages. Technically, a package is a\nPythonmodulewitha__path__attribute.\nSeealsoregularpackageandnamespacepackage.\nparameter\nAnamedentityinafunction(ormethod)definitionthatspecifiesanargument (orinsomecases,arguments)\nthatthefunctioncanaccept. Therearefivekindsofparameter:\n\u2022 positional-or-keyword: specifiesanargumentthatcanbepassedeitherpositionallyorasakeywordargu-\nment. Thisisthedefaultkindofparameter,forexamplefooandbarinthefollowing:\ndef func(foo, bar=None): ...\n\u2022 positional-only: specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters\ncanbedefinedbyincludinga/characterintheparameterlistofthefunctiondefinitionafterthem,for\nexampleposonly1andposonly2inthefollowing:\ndef func(posonly1, posonly2, /, positional_or_keyword): ...\n\u2022 keyword-only: specifiesanargumentthatcanbesuppliedonlybykeyword. Keyword-onlyparameters\ncanbedefinedbyincludingasinglevar-positionalparameterorbare*intheparameterlistofthefunction\ndefinitionbeforethem,forexamplekw_only1andkw_only2inthefollowing:\ndef func(arg, *, kw_only1, kw_only2): ...\n\u2022 var-positional: specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition\ntoanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby\nprependingtheparameternamewith*,forexampleargsinthefollowing:\ndef func(*args, **kwargs): ...\n\u2022 var-keyword: specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-\nwordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending\ntheparameternamewith**,forexamplekwargsintheexampleabove.\n84 AppendixA. Glossary\nPythonFrequentlyAskedQuestions,Release3.13.3\nParameters can specify both optional and required arguments, as well as default values for some optional\narguments.\nSeealsotheargument glossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\ntheinspect.Parameterclass,thefunctionsection,andPEP362.\npathentry\nAsinglelocationontheimportpathwhichthepathbasedfinderconsultstofindmodulesforimporting.\npathentryfinder\nA finder returned by a callable on sys.path_hooks (i.e. a path entry hook) which knows how to locate\nmodulesgivenapathentry.\nSeeimportlib.abc.PathEntryFinderforthemethodsthatpathentryfindersimplement.\npathentryhook\nAcallableonthesys.path_hookslistwhichreturnsapathentryfinderifitknowshowtofindmoduleson\naspecificpathentry.\npathbasedfinder\nOneofthedefaultmetapathfinderswhichsearchesanimportpathformodules.\npath-likeobject\nAn object representing a file system path. A path-like object is either a str or bytes object representing\na path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike\nprotocol can be converted to a str or bytes file system path by calling the os.fspath() function; os.\nfsdecode() and os.fsencode() can be used to guarantee a str or bytes result instead, respectively.\nIntroducedbyPEP519.\nPEP\nPythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,\nordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical\nspecificationandarationaleforproposedfeatures.\nPEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity\ninputonanissue, andfordocumentingthedesigndecisionsthathavegoneintoPython. ThePEPauthoris\nresponsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.\nSeePEP1.\nportion\nA set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as\ndefinedinPEP420.\npositionalargument\nSeeargument.\nprovisionalAPI\nA provisional API is one which has been deliberately excluded from the standard library\u2019s backwards com-\npatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked\nprovisional, backwards incompatible changes (up to and including removal of the interface) may occur if\ndeemednecessarybycoredevelopers. Suchchangeswillnotbemadegratuitously\u2013theywilloccuronlyif\nseriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.\nEven for provisional APIs, backwards incompatible changes are seen as a \u201csolution of last resort\u201d - every\nattemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.\nThisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign\nerrorsforextendedperiodsoftime. SeePEP411formoredetails.\nprovisionalpackage\nSeeprovisionalAPI.\nPython3000\nNicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe\ndistantfuture.) Thisisalsoabbreviated\u201cPy3k\u201d.\n85\nPythonFrequentlyAskedQuestions,Release3.13.3\nPythonic\nAnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan\nimplementingcodeusingconceptscommontootherlanguages. Forexample,acommonidiominPythonis\ntoloopoverallelementsofaniterableusingaforstatement. Manyotherlanguagesdon\u2019thavethistypeof\nconstruct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:\nfor i in range(len(food)):\nprint(food[i])\nAsopposedtothecleaner,Pythonicmethod:\nfor piece in food:\nprint(piece)\nqualifiedname\nAdottednameshowingthe\u201cpath\u201dfromamodule\u2019sglobalscopetoaclass,functionormethoddefinedinthat\nmodule, as defined in PEP 3155. For top-level functions and classes, the qualified name is the same as the\nobject\u2019sname:\n>>> class C:\n... class D:\n... def meth(self):\n... pass\n...\n>>> C.__qualname__\n'C'\n>>> C.D.__qualname__\n'C.D'\n>>> C.D.meth.__qualname__\n'C.D.meth'\nWhenusedtorefertomodules,thefullyqualifiednamemeanstheentiredottedpathtothemodule,including\nanyparentpackages,e.g. email.mime.text:\n>>> import email.mime.text\n>>> email.mime.text.__name__\n'email.mime.text'\nreferencecount\nThenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.\nSome objects are immortal and have reference counts that are never modified, and therefore the objects are\nneverdeallocated. ReferencecountingisgenerallynotvisibletoPythoncode, butitisakeyelementofthe\nCPythonimplementation. Programmerscancallthesys.getrefcount()functiontoreturnthereference\ncountforaparticularobject.\nregularpackage\nAtraditionalpackage,suchasadirectorycontainingan__init__.pyfile.\nSeealsonamespacepackage.\nREPL\nAnacronymforthe\u201cread\u2013eval\u2013printloop\u201d,anothernamefortheinteractiveinterpretershell.\n__slots__\nAdeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating\ninstancedictionaries. Thoughpopular,thetechniqueissomewhattrickytogetrightandisbestreservedfor\nrarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.\nsequence\nAn iterable which supports efficient element access using integer indices via the __getitem__() special\nmethod and defines a __len__() method that returns the length of the sequence. Some built-in sequence\n86 AppendixA. Glossary\nPythonFrequentlyAskedQuestions,Release3.13.3\ntypesarelist,str,tuple,andbytes. Notethatdictalsosupports__getitem__()and__len__(),\nbut is considered a mapping rather than a sequence because the lookups use arbitrary hashable keys rather\nthanintegers.\nThecollections.abc.Sequenceabstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust\n__getitem__()and__len__(),addingcount(),index(),__contains__(),and__reversed__().\nTypes that implement this expanded interface can be registered explicitly using register(). For more\ndocumentationonsequencemethodsgenerally,seeCommonSequenceOperations.\nsetcomprehension\nAcompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results\n= {c for c in 'abracadabra' if c not in 'abc'}generatesthesetofstrings{'r', 'd'}. See\ncomprehensions.\nsingledispatch\nAformofgenericfunctiondispatchwheretheimplementationischosenbasedonthetypeofasingleargument.\nslice\nAnobjectusuallycontainingaportionofasequence. Asliceiscreatedusingthesubscriptnotation,[]with\ncolons between numbers when several are given, such as in variable_name[1:3:5]. The bracket (sub-\nscript)notationusessliceobjectsinternally.\nsoftdeprecated\nAsoftdeprecatedAPIshouldnotbeusedinnewcode,butitissafeforalreadyexistingcodetouseit. The\nAPIremainsdocumentedandtested,butwillnotbeenhancedfurther.\nSoftdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.\nSeePEP387: SoftDeprecation.\nspecialmethod\nAmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such\nmethodshavenamesstartingandendingwithdoubleunderscores. Specialmethodsaredocumentedinspe-\ncialnames.\nstatement\nAstatementispartofasuite(a\u201cblock\u201dofcode). Astatementiseitheranexpressionoroneofseveralconstructs\nwithakeyword,suchasif,whileorfor.\nstatictypechecker\nAnexternaltoolthatreadsPythoncodeandanalyzesit, lookingforissuessuchasincorrecttypes. Seealso\ntypehintsandthetypingmodule.\nstrongreference\nIn Python\u2019s C API, a strong reference is a reference to an object which is owned by the code holding the\nreference. ThestrongreferenceistakenbycallingPy_INCREF()whenthereferenceiscreatedandreleased\nwithPy_DECREF()whenthereferenceisdeleted.\nThePy_NewRef()functioncanbeusedtocreateastrongreferencetoanobject. Usually,thePy_DECREF()\nfunctionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking\nonereference.\nSeealsoborrowedreference.\ntextencoding\nAstringinPythonisasequenceofUnicodecodepoints(inrangeU+0000\u2013U+10FFFF).Tostoreortransfer\nastring,itneedstobeserializedasasequenceofbytes.\nSerializingastringintoasequenceofbytesisknownas\u201cencoding\u201d,andrecreatingthestringfromthesequence\nofbytesisknownas\u201cdecoding\u201d.\nThereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas\u201ctextencodings\u201d.\ntextfile\nAfileobjectabletoreadandwritestrobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream\nandhandlesthetextencodingautomatically. Examplesoftextfilesarefilesopenedintextmode('r'or'w'),\nsys.stdin,sys.stdout,andinstancesofio.StringIO.\n87\nPythonFrequentlyAskedQuestions,Release3.13.3\nSeealsobinaryfileforafileobjectabletoreadandwritebytes-likeobjects.\ntoken\nA small unit of source code, generated by the lexical analyzer (also called the tokenizer). Names, numbers,\nstrings,operators,newlinesandsimilararerepresentedbytokens.\nThe tokenize module exposes Python\u2019s lexical analyzer. The token module contains information on the\nvarioustypesoftokens.\ntriple-quotedstring\nAstringwhichisboundbythreeinstancesofeitheraquotationmark(\u201d)oranapostrophe(\u2018). Whiletheydon\u2019t\nprovide any functionality not available with single-quoted strings, they are useful for a number of reasons.\nTheyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines\nwithouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.\ntype\nThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject\u2019stypeis\naccessibleasits__class__attributeorcanberetrievedwithtype(obj).\ntypealias\nAsynonymforatype,createdbyassigningthetypetoanidentifier.\nTypealiasesareusefulforsimplifyingtypehints. Forexample:\ndef remove_gray_shades(\ncolors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\npass\ncouldbemademorereadablelikethis:\nColor = tuple[int, int, int]\ndef remove_gray_shades(colors: list[Color]) -> list[Color]:\npass\nSeetypingandPEP484,whichdescribethisfunctionality.\ntypehint\nAnannotationthatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn\nvalue.\nTypehintsareoptionalandarenotenforcedbyPythonbuttheyareusefultostatictypecheckers. Theycan\nalsoaidIDEswithcodecompletionandrefactoring.\nType hints of global variables, class attributes, and functions, but not local variables, can be accessed using\ntyping.get_type_hints().\nSeetypingandPEP484,whichdescribethisfunctionality.\nuniversalnewlines\nAmannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix\nend-of-lineconvention'\\n',theWindowsconvention'\\r\\n',andtheoldMacintoshconvention'\\r'. See\nPEP278andPEP3116,aswellasbytes.splitlines()foranadditionaluse.\nvariableannotation\nAnannotationofavariableoraclassattribute.\nWhenannotatingavariableoraclassattribute,assignmentisoptional:\nclass C:\nfield: 'annotation'\nVariableannotationsareusuallyusedfortypehints: forexamplethisvariableisexpectedtotakeintvalues:\n88 AppendixA. Glossary\nPythonFrequentlyAskedQuestions,Release3.13.3\ncount: int = 0\nVariableannotationsyntaxisexplainedinsectionannassign.\nSeefunctionannotation,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto\nforbestpracticesonworkingwithannotations.\nvirtualenvironment\nAcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade\nPythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon\nthesamesystem.\nSeealsovenv.\nvirtualmachine\nAcomputerdefinedentirelyinsoftware. Python\u2019svirtualmachineexecutesthebytecodeemittedbythebyte-\ncodecompiler.\nZenofPython\nListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.\nThelistingcanbefoundbytyping\u201cimport this\u201dattheinteractiveprompt.\n89\nPythonFrequentlyAskedQuestions,Release3.13.3\n90 AppendixA. Glossary\nAPPENDIX\nB\nABOUT THIS DOCUMENTATION\nPython\u2019sdocumentationisgeneratedfromreStructuredTextsourcesusingSphinx,adocumentationgeneratororigi-\nnallycreatedforPythonandnowmaintainedasanindependentproject.\nDevelopment of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you\nwanttocontribute,pleasetakealookatthereporting-bugspageforinformationonhowtodoso. Newvolunteers\narealwayswelcome!\nManythanksgoto:\n\u2022 FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandauthorofmuchofthecontent;\n\u2022 theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;\n\u2022 FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.\nB.1 Contributors to the Python documentation\nManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.\nSeeMisc/ACKSinthePythonsourcedistributionforapartiallistofcontributors.\nItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation\n\u2013ThankYou!\n91\nPythonFrequentlyAskedQuestions,Release3.13.3\n92 AppendixB. Aboutthisdocumentation\nAPPENDIX\nC\nHISTORY AND LICENSE\nC.1 History of the software\nPythonwascreatedintheearly1990sbyGuidovanRossumatStichtingMathematischCentrum(CWI,seehttps:\n//www.cwi.nl)intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython\u2019sprincipalauthor,\nalthoughitincludesmanycontributionsfromothers.\nIn1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,seehttps:\n//www.cnri.reston.va.us)inReston,Virginiawherehereleasedseveralversionsofthesoftware.\nInMay2000,GuidoandthePythoncoredevelopmentteammovedtoBeOpen.comtoformtheBeOpenPythonLabs\nteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations,whichbecameZopeCorpo-\nration. In2001,thePythonSoftwareFoundation(PSF,seehttps://www.python.org/psf/)wasformed,anon-profit\norganization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring\nmemberofthePSF.\nAllPythonreleasesareOpenSource(seehttps://opensource.orgfortheOpenSourceDefinition). Historically,most,\nbutnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.\nRelease Derivedfrom Year Owner GPL-compatible? (1)\n0.9.0thru1.2 n/a 1991-1995 CWI yes\n1.3thru1.5.2 1.2 1995-1999 CNRI yes\n1.6 1.5.2 2000 CNRI no\n2.0 1.6 2000 BeOpen.com no\n1.6.1 1.6 2001 CNRI yes(2)\n2.1 2.0+1.6.1 2001 PSF no\n2.0.1 2.0+1.6.1 2001 PSF yes\n2.1.1 2.1+2.0.1 2001 PSF yes\n2.1.2 2.1.1 2002 PSF yes\n2.1.3 2.1.2 2002 PSF yes\n2.2andabove 2.1.1 2001-now PSF yes\n(cid:174) Note\n(1) GPL-compatibledoesn\u2019tmeanthatwe\u2019redistributingPythonundertheGPL.AllPythonlicenses,unlike\nthe GPL, let you distribute a modified version without making your changes open source. The GPL-\ncompatible licenses make it possible to combine Python with other software that is released under the\nGPL;theothersdon\u2019t.\n(2) AccordingtoRichardStallman,1.6.1isnotGPL-compatible,becauseitslicensehasachoiceoflawclause.\nAccordingtoCNRI,however, Stallman\u2019slawyerhastoldCNRI\u2019slawyerthat1.6.1is\u201cnotincompatible\u201d\nwiththeGPL.\nThankstothemanyoutsidevolunteerswhohaveworkedunderGuido\u2019sdirectiontomakethesereleasespossible.\n93\nPythonFrequentlyAskedQuestions,Release3.13.3\nC.2 Terms and conditions for accessing or otherwise using Python\nPythonsoftwareanddocumentationarelicensedunderthePythonSoftwareFoundationLicenseVersion2.\nStartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF\nLicenseVersion2andtheZero-ClauseBSDlicense.\nSomesoftwareincorporatedintoPythonisunderdifferentlicenses. Thelicensesarelistedwithcodefallingunder\nthatlicense. SeeLicensesandAcknowledgementsforIncorporatedSoftwareforanincompletelistoftheselicenses.\nC.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\nthe Individual or Organization (\"Licensee\") accessing and otherwise using this\nsoftware (\"Python\") in source or binary form and its associated documentation.\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative\nversion, provided, however, that PSF's License Agreement and PSF's notice of\ncopyright, i.e., \"Copyright \u00a9 2001-2024 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python or any part thereof, and wants to make the\nderivative work available to others as provided herein, then Licensee hereby\nagrees to include in any such work a brief summary of the changes made to\u2423\n,\u2192Python.\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\nPSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. Nothing in this License Agreement shall be deemed to create any relationship\nof agency, partnership, or joint venture between PSF and Licensee. This License\nAgreement does not grant permission to use PSF trademarks or trade name in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.\n8. By copying, installing or otherwise using Python, Licensee agrees\nto be bound by the terms and conditions of this License Agreement.\n94 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\nC.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nBEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n(\"Licensee\") accessing and otherwise using this software in source or binary\nform and its associated documentation (\"the Software\").\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\nBeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\nto reproduce, analyze, test, perform and/or display publicly, prepare derivative\nworks, distribute, and otherwise use the Software alone or in any derivative\nversion, provided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\nBEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\nMODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\nADVISED OF THE POSSIBILITY THEREOF.\n5. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n6. This License Agreement shall be governed by and interpreted in all respects\nby the law of the State of California, excluding conflict of law provisions.\nNothing in this License Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between BeOpen and Licensee. This License\nAgreement does not grant permission to use BeOpen trademarks or trade names in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party. As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the permissions\ngranted on that web page.\n7. By copying, installing or otherwise using the software, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\nC.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n1. This LICENSE AGREEMENT is between the Corporation for National Research\nInitiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n(\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using Python 1.6.1 software in source or binary form and its\nassociated documentation.\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python 1.6.1 alone or in any derivative version,\nprovided, however, that CNRI's License Agreement and CNRI's notice of copyright,\ni.e., \"Copyright \u00a9 1995-2001 Corporation for National Research Initiatives; All\n(continuesonnextpage)\nC.2. TermsandconditionsforaccessingorotherwiseusingPython 95\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nRights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\nprepared by Licensee. Alternately, in lieu of CNRI's License Agreement,\nLicensee may substitute the following text (omitting the quotes): \"Python 1.6.1\nis made available subject to the terms and conditions in CNRI's License\nAgreement. This Agreement together with Python 1.6.1 may be located on the\ninternet using the following unique, persistent identifier (known as a handle):\n1895.22/1013. This Agreement may also be obtained from a proxy server on the\ninternet using the following URL: http://hdl.handle.net/1895.22/1013\".\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python 1.6.1 or any part thereof, and wants to make the derivative\nwork available to others as provided herein, then Licensee hereby agrees to\ninclude in any such work a brief summary of the changes made to Python 1.6.1.\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI\nMAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,\nBUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\nOF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\nPYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. This License Agreement shall be governed by the federal intellectual property\nlaw of the United States, including without limitation the federal copyright\nlaw, and, to the extent such U.S. federal law does not apply, by the law of the\nCommonwealth of Virginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based on Python\n1.6.1 that incorporate non-separable material that was previously distributed\nunder the GNU General Public License (GPL), the law of the Commonwealth of\nVirginia shall govern this License Agreement only as to issues arising under or\nwith respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in\nthis License Agreement shall be deemed to create any relationship of agency,\npartnership, or joint venture between CNRI and Licensee. This License Agreement\ndoes not grant permission to use CNRI trademarks or trade name in a trademark\nsense to endorse or promote products or services of Licensee, or any third\nparty.\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\nor otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\nconditions of this License Agreement.\nC.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nCopyright \u00a9 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands. All rights reserved.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\n(continuesonnextpage)\n96 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\nC.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTA-\nTION\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3 Licenses and Acknowledgements for Incorporated Software\nThissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated\ninthePythondistribution.\nC.3.1 Mersenne Twister\nThe_randomCextensionunderlyingtherandommoduleincludescodebasedonadownloadfromhttp://www.math.\nsci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. Thefollowingaretheverbatimcommentsfromthe\noriginalcode:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 97\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\nC.3.2 Sockets\nThesocketmoduleusesthefunctions,getaddrinfo(),andgetnameinfo(),whicharecodedinseparatesource\nfilesfromtheWIDEProject,https://www.wide.ad.jp/.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n98 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\nC.3.3 Asynchronous socket services\nThetest.support.asynchatandtest.support.asyncoremodulescontainthefollowingnotice:\nCopyright 1996 by Sam Rushing\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nC.3.4 Cookie management\nThehttp.cookiesmodulecontainsthefollowingnotice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3.5 Execution tracing\nThetracemodulecontainsthefollowingnotice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr... reserved and offered to the public under the terms of the\nPython 2.2 license.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 99\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\nC.3.6 UUencode and UUdecode functions\nTheuucodeccontainsthefollowingnotice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\nbetween ascii and binary. This results in a 1000-fold speedup. The C\nversion is still 5 times faster, though.\n- Arguments more compliant with Python standard\n100 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\nC.3.7 XML Remote Procedure Calls\nThexmlrpc.clientmodulecontainsthefollowingnotice:\nThe XML-RPC client interface is\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\nC.3.8 test_epoll\nThetest.test_epollmodulecontainsthefollowingnotice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 101\nPythonFrequentlyAskedQuestions,Release3.13.3\nC.3.9 Select kqueue\nTheselectmodulecontainsthefollowingnoticeforthekqueueinterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.10 SipHash24\nThefilePython/pyhash.ccontainsMarekMajkowski\u2019implementationofDanBernstein\u2019sSipHash24algorithm.\nItcontainsthefollowingnote:\n<MIT License>\nCopyright (c) 2013 Marek Majkowski <marek@popcount.org>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\nOriginal location:\nhttps://github.com/majek/csiphash/\nSolution inspired by code from:\nSamuel Neves (supercop/crypto_auth/siphash24/little)\ndjb (supercop/crypto_auth/siphash24/little2)\nJean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\n102 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\nC.3.11 strtod and dtoa\nThefilePython/dtoa.c,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,\nisderivedfromthefileofthesamenamebyDavidM.Gay, currentlyavailablefromhttps://web.archive.org/web/\n20220517033456/http://www.netlib.org/fp/dtoa.c. The original file, as retrieved on March 16, 2009, contains the\nfollowingcopyrightandlicensingnotice:\n/****************************************************************\n*\n* The author of this software is David M. Gay.\n*\n* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n*\n* Permission to use, copy, modify, and distribute this software for any\n* purpose without fee is hereby granted, provided that this entire notice\n* is included in all copies of any software which is or includes a copy\n* or modification of this software and in all copies of the supporting\n* documentation for such software.\n*\n* THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n*\n***************************************************************/\nC.3.12 OpenSSL\nThemoduleshashlib,posixandsslusetheOpenSSLlibraryforaddedperformanceifmadeavailablebythe\noperatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL\nlibraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived\nfromthat,theApacheLicensev2applies:\nApache License\nVersion 2.0, January 2004\nhttps://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 103\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\n(continuesonnextpage)\n104 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 105\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nC.3.13 expat\nThe pyexpat extension is built using an included copy of the expat sources unless the build is configured\n--with-system-expat:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\nand Clark Cooper\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n(continuesonnextpage)\n106 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.14 libffi\nThe_ctypesCextensionunderlyingthectypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless\nthebuildisconfigured--with-system-libffi:\nCopyright (c) 1996-2008 Red Hat, Inc and others.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nC.3.15 zlib\nThezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo\noldtobeusedforthebuild:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 107\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\nJean-loup Gailly Mark Adler\njloup@gzip.org madler@alumni.caltech.edu\nC.3.16 cfuhash\nTheimplementationofthehashtableusedbythetracemallocisbasedonthecfuhashproject:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\nThis code is released under the BSD license:\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n* Neither the name of the author nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\nC.3.17 libmpdec\nThe_decimalCextensionunderlyingthedecimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary\nunlessthebuildisconfigured--with-system-libmpdec:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\nRedistribution and use in source and binary forms, with or without\n(continuesonnextpage)\n108 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.18 W3C C14N test suite\nTheC14N2.0testsuiteinthetestpackage(Lib/test/xmltestdata/c14n-20/)wasretrievedfromtheW3C\nwebsiteathttps://www.w3.org/TR/xml-c14n2-testcases/andisdistributedunderthe3-clauseBSDlicense:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of works must retain the original copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\nused to endorse or promote products derived from this work without\nspecific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 109\nPythonFrequentlyAskedQuestions,Release3.13.3\nC.3.19 mimalloc\nMITLicense:\nCopyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nC.3.20 asyncio\nPartsoftheasynciomoduleareincorporatedfromuvloop0.16,whichisdistributedundertheMITlicense:\nCopyright (c) 2015-2021 MagicStack Inc. http://magic.io\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.21 Global Unbounded Sequences (GUS)\nThe file Python/qsbr.c is adapted from FreeBSD\u2019s \u201cGlobal Unbounded Sequences\u201d safe memory reclamation\nschemeinsubr_smr.c. Thefileisdistributedunderthe2-ClauseBSDLicense:\nCopyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\n(continuesonnextpage)\n110 AppendixC. HistoryandLicense\nPythonFrequentlyAskedQuestions,Release3.13.3\n(continuedfrompreviouspage)\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice unmodified, this list of conditions, and the following\ndisclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 111\nPythonFrequentlyAskedQuestions,Release3.13.3\n112 AppendixC. HistoryandLicense\nAPPENDIX\nD\nCOPYRIGHT\nPythonandthisdocumentationis:\nCopyright\u00a92001-2024PythonSoftwareFoundation. Allrightsreserved.\nCopyright\u00a92000BeOpen.com. Allrightsreserved.\nCopyright\u00a91995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.\nCopyright\u00a91991-1995StichtingMathematischCentrum. Allrightsreserved.\nSeeHistoryandLicenseforcompletelicenseandpermissionsinformation.\n113\nPythonFrequentlyAskedQuestions,Release3.13.3\n114 AppendixD. Copyright\nINDEX\nNon-alphabetical\ndescriptor,77\n...,73\ndictionary,77\n>>>,73 dictionary comprehension,77\n__future__,79 dictionary view,77\n__slots__,86\ndocstring,77\nduck-typing,77\nA\nE\nabstract base class,73\nannotation,73 EAFP,77\nargument,73 environment variable\ndifference from parameter,12 PATH,51\nasynchronous context manager,74 PYTHON_GIL,80\nasynchronous generator,74 PYTHONDONTWRITEBYTECODE,35\nasynchronous generator iterator,74 expression,77\nasynchronous iterable,74 extension module,78\nasynchronous iterator,74\nF\nattribute,74\nawaitable,74 f-string,78\nfile object,78\nB\nfile-like object,78\nBDFL,74 filesystem encoding and error handler,78\nbinary file,74 finder,78\nborrowed reference,74 floor division,78\nbytecode,75 Fortran contiguous,76\nbytes-like object,75 free threading,78\nfree variable,78\nC function,78\nfunction annotation,78\ncallable,75\ncallback,75\nG\nC-contiguous,76\nclass,75 garbage collection,79\nclass variable,75 generator,79\nclosure variable,75 generator expression,79\ncomplex number,76 generator iterator,79\ncontext,76 generic function,79\ncontext management protocol,76 generic type,79\ncontext manager,76 GIL,79\ncontext variable,76 global interpreter lock,80\ncontiguous,76\nH\ncoroutine,76\ncoroutine function,76 hash-based pyc,80\nCPython,76 hashable,80\ncurrent context,76\nI\nD\nIDLE,80\ndecorator,76 immortal,80\n115\nPythonFrequentlyAskedQuestions,Release3.13.3\nimmutable,80 path entry hook,85\nimport path,80 path-like object,85\nimporter,80 PEP,85\nimporting,80 portion,85\ninteractive,80 positional argument,85\ninterpreted,81 provisional API,85\ninterpreter shutdown,81 provisional package,85\niterable,81 Python 3000,85\niterator,81 Python Enhancement Proposals\nPEP 1,85\nK\nPEP 5,5\nkey function,81 PEP 8,8,32,68\nkeyword argument,81 PEP 238,78\nPEP 278,88\nL\nPEP 302,82\nlambda,82 PEP 343,76\nLBYL,82 PEP 362,74,85\nlexical analyzer,82 PEP 373,4\nlist,82 PEP 387,2\nlist comprehension,82 PEP 411,85\nloader,82 PEP 420,84,85\nlocale encoding,82 PEP 443,79\nPEP 483,79\nM\nPEP 484,73,79,88,89\nPEP 492,74,76\nmagic\nmethod,82 PEP 498,78\nmagic method,82 PEP 519,85\nmapping,82 PEP 525,74\nmeta path finder,82 PEP 526,73,89\nmetaclass,82 PEP 572,41\nmethod,83 PEP 585,79\nmagic,82 PEP 602,4\nspecial,87 PEP 683,80\nmethod resolution order,83 PEP 703,56,78,80\nmodule,83 PEP 3116,88\nmodule spec,83 PEP 3147,35\nMRO,83 PEP 3155,86\nmutable,83\nPYTHON_GIL,80\nPYTHONDONTWRITEBYTECODE,35\nN Pythonic,86\nnamed tuple,83\nQ\nnamespace,83\nnamespace package,83 qualified name,86\nnested scope,84\nR\nnew-style class,84\nreference count,86\nO\nregular package,86\nobject,84 REPL,86\noptimized scope,84\nS\nP\nsequence,86\npackage,84 set comprehension,87\nparameter,84 single dispatch,87\ndifference from argument,12 slice,87\nPATH,51 soft deprecated,87\npath based finder,85 special\npath entry,85 method,87\npath entry finder,85 special method,87\n116 Index\nPythonFrequentlyAskedQuestions,Release3.13.3\nstatement,87\nstatic type checker,87\nstrong reference,87\nT\ntext encoding,87\ntext file,87\ntoken,88\ntriple-quoted string,88\ntype,88\ntype alias,88\ntype hint,88\nU\nuniversal newlines,88\nV\nvariable annotation,88\nvirtual environment,89\nvirtual machine,89\nZ\nZen of Python,89\nIndex 117\n",
  "context": "2.2.4 HowdoIshareglobalvariablesacrossmodules? . . . . . . . . . . . . . . . . . . . . . . 10\n2.2.5 Whatarethe\u201cbestpractices\u201dforusingimportinamodule? . . . . . . . . . . . . . . . . 10\n2.2.6 Whyaredefaultvaluessharedbetweenobjects? . . . . . . . . . . . . . . . . . . . . . . 11",
  "source_file": "resources\\Year 3\\Python\\faq.pdf",
  "line_numbers": [
    48,
    4875
  ]
}