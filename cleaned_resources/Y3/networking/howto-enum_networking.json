{
  "title": "howto-enum",
  "language": "cpp",
  "topics": [
    "web_dev",
    "fundamentals",
    "networking",
    "data_structures",
    "database"
  ],
  "purpose": "8 RestrictedEnumsubclassing 9 9 Dataclasssupport 9 10 Pickling 10",
  "code": "11 FunctionalAPI 10\n12 DerivedEnumerations 12\n12.1 IntEnum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n12.2 StrEnum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n12.3 IntFlag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n12.4 Flag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n12.5 Others . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n13 Whentouse__new__()vs. __init__() 16\n13.1 FinerPoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n14 HowareEnumsandFlagsdifferent? 20\n14.1 EnumClasses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n14.2 FlagClasses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n14.3 EnumMembers(akainstances) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n14.4 FlagMembers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n1\n15 EnumCookbook 21\n15.1 Omittingvalues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n15.2 OrderedEnum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n15.3 DuplicateFreeEnum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n15.4 MultiValueEnum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n15.5 Planet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n15.6 TimePeriod . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n16 SubclassingEnumType 26\nAnEnumisasetofsymbolicnamesboundtouniquevalues. Theyaresimilartoglobalvariables, buttheyoffera\nmoreusefulrepr(),grouping,type-safety,andafewotherfeatures.\nTheyaremostusefulwhenyouhaveavariablethatcantakeoneofalimitedselectionofvalues. Forexample,the\ndaysoftheweek:\n>>> from enum import Enum\n>>> class Weekday(Enum):\n... MONDAY = 1\n... TUESDAY = 2\n... WEDNESDAY = 3\n... THURSDAY = 4\n... FRIDAY = 5\n... SATURDAY = 6\n... SUNDAY = 7\nOrperhapstheRGBprimarycolors:\n>>> from enum import Enum\n>>> class Color(Enum):\n... RED = 1\n... GREEN = 2\n... BLUE = 3\nAsyoucansee,creatinganEnumisassimpleaswritingaclassthatinheritsfromEnumitself.\n(cid:174) Note\nCaseofEnumMembers\nBecauseEnumsareusedtorepresentconstants,andtohelpavoidissueswithnameclashesbetweenmixin-class\nmethods/attributesandenumnames,westronglyrecommendusingUPPER_CASEnamesformembers,andwill\nbeusingthatstyleinourexamples.\nDependingonthenatureoftheenumamember\u2019svaluemayormaynotbeimportant,buteitherwaythatvaluecan\nbeusedtogetthecorrespondingmember:\n>>> Weekday(3)\n<Weekday.WEDNESDAY: 3>\nAsyoucansee,therepr()ofamembershowstheenumname,themembername,andthevalue. Thestr()ofa\nmembershowsonlytheenumnameandmembername:\n>>> print(Weekday.THURSDAY)\nWeekday.THURSDAY\nThetypeofanenumerationmemberistheenumitbelongsto:\n2\n>>> type(Weekday.MONDAY)\n<enum 'Weekday'>\n>>> isinstance(Weekday.FRIDAY, Weekday)\nTrue\nEnummembershaveanattributethatcontainsjusttheirname:\n>>> print(Weekday.TUESDAY.name)\nTUESDAY\nLikewise,theyhaveanattributefortheirvalue:\n>>> Weekday.WEDNESDAY.value\n3\nUnlikemanylanguagesthattreatenumerationssolelyasname/valuepairs,PythonEnumscanhavebehavioradded.\nForexample,datetime.datehastwomethodsforreturningtheweekday: weekday()andisoweekday(). The\ndifferenceisthatoneofthemcountsfrom0-6andtheotherfrom1-7. Ratherthankeeptrackofthatourselveswe\ncanaddamethodtotheWeekdayenumtoextractthedayfromthedateinstanceandreturnthematchingenum\nmember:\n@classmethod\ndef from_date(cls, date):\nreturn cls(date.isoweekday())\nThecompleteWeekdayenumnowlookslikethis:\n>>> class Weekday(Enum):\n... MONDAY = 1\n... TUESDAY = 2\n... WEDNESDAY = 3\n... THURSDAY = 4\n... FRIDAY = 5\n... SATURDAY = 6\n... SUNDAY = 7\n... #\n... @classmethod\n... def from_date(cls, date):\n... return cls(date.isoweekday())\nNowwecanfindoutwhattodayis! Observe:\n>>> from datetime import date\n>>> Weekday.from_date(date.today())\n<Weekday.TUESDAY: 2>\nOfcourse,ifyou\u2019rereadingthisonsomeotherday,you\u2019llseethatdayinstead.\nThisWeekdayenumisgreatifourvariableonlyneedsoneday,butwhatifweneedseveral? Maybewe\u2019rewritinga\nfunctiontoplotchoresduringaweek,anddon\u2019twanttousealist\u2013wecoulduseadifferenttypeofEnum:\n>>> from enum import Flag\n>>> class Weekday(Flag):\n... MONDAY = 1\n... TUESDAY = 2\n... WEDNESDAY = 4\n... THURSDAY = 8\n... FRIDAY = 16\n(continuesonnextpage)\n3\n(continuedfrompreviouspage)\n... SATURDAY = 32\n... SUNDAY = 64\nWe\u2019vechangedtwothings: we\u2019reinheritedfromFlag,andthevaluesareallpowersof2.\nJustliketheoriginalWeekdayenumabove,wecanhaveasingleselection:\n>>> first_week_day = Weekday.MONDAY\n>>> first_week_day\n<Weekday.MONDAY: 1>\nButFlagalsoallowsustocombineseveralmembersintoasinglevariable:\n>>> weekend = Weekday.SATURDAY | Weekday.SUNDAY\n>>> weekend\n<Weekday.SATURDAY|SUNDAY: 96>\nYoucaneveniterateoveraFlagvariable:\n>>> for day in weekend:\n... print(day)\nWeekday.SATURDAY\nWeekday.SUNDAY\nOkay,let\u2019sgetsomechoressetup:\n>>> chores_for_ethan = {\n... 'feed the cat': Weekday.MONDAY | Weekday.WEDNESDAY | Weekday.FRIDAY,\n... 'do the dishes': Weekday.TUESDAY | Weekday.THURSDAY,\n... 'answer SO questions': Weekday.SATURDAY,\n... }\nAndafunctiontodisplaythechoresforagivenday:\n>>> def show_chores(chores, day):\n... for chore, days in chores.items():\n... if day in days:\n... print(chore)\n...\n>>> show_chores(chores_for_ethan, Weekday.SATURDAY)\nanswer SO questions\nIncaseswheretheactualvaluesofthemembersdonotmatter,youcansaveyourselfsomeworkanduseauto()\nforthevalues:\n>>> from enum import auto\n>>> class Weekday(Flag):\n... MONDAY = auto()\n... TUESDAY = auto()\n... WEDNESDAY = auto()\n... THURSDAY = auto()\n... FRIDAY = auto()\n... SATURDAY = auto()\n... SUNDAY = auto()\n... WEEKEND = SATURDAY | SUNDAY\n4\n1 Programmatic access to enumeration members and their at-\ntributes\nSometimesit\u2019susefultoaccessmembersinenumerationsprogrammatically(i.e. situationswhereColor.REDwon\u2019t\ndobecausetheexactcolorisnotknownatprogram-writingtime). Enumallowssuchaccess:\n>>> Color(1)\n<Color.RED: 1>\n>>> Color(3)\n<Color.BLUE: 3>\nIfyouwanttoaccessenummembersbyname,useitemaccess:\n>>> Color['RED']\n<Color.RED: 1>\n>>> Color['GREEN']\n<Color.GREEN: 2>\nIfyouhaveanenummemberandneeditsnameorvalue:\n>>> member = Color.RED\n>>> member.name\n'RED'\n>>> member.value\n1\n2 Duplicating enum members and values\nHavingtwoenummemberswiththesamenameisinvalid:\n>>> class Shape(Enum):\n... SQUARE = 2\n... SQUARE = 3\n...\nTraceback (most recent call last):\n...\nTypeError: 'SQUARE' already defined as 2\nHowever,anenummembercanhaveothernamesassociatedwithit. GiventwoentriesAandBwiththesamevalue\n(and A definedfirst), B is an alias forthe member A. By-value lookup ofthe value of A will return the member A.\nBy-namelookupofAwillreturnthememberA.By-namelookupofBwillalsoreturnthememberA:\n>>> class Shape(Enum):\n... SQUARE = 2\n... DIAMOND = 1\n... CIRCLE = 3\n... ALIAS_FOR_SQUARE = 2\n...\n>>> Shape.SQUARE\n<Shape.SQUARE: 2>\n>>> Shape.ALIAS_FOR_SQUARE\n<Shape.SQUARE: 2>\n>>> Shape(2)\n<Shape.SQUARE: 2>\n5\n(cid:174) Note\nAttemptingtocreateamemberwiththesamenameasanalreadydefinedattribute(anothermember,amethod,\netc.) orattemptingtocreateanattributewiththesamenameasamemberisnotallowed.\n3 Ensuring unique enumeration values\nBydefault,enumerationsallowmultiplenamesasaliasesforthesamevalue. Whenthisbehaviorisn\u2019tdesired,you\ncanusetheunique()decorator:\n>>> from enum import Enum, unique\n>>> @unique\n... class Mistake(Enum):\n... ONE = 1\n... TWO = 2\n... THREE = 3\n... FOUR = 3\n...\nTraceback (most recent call last):\n...\nValueError: duplicate values found in <enum 'Mistake'>: FOUR -> THREE\n4 Using automatic values\nIftheexactvalueisunimportantyoucanuseauto:\n>>> from enum import Enum, auto\n>>> class Color(Enum):\n... RED = auto()\n... BLUE = auto()\n... GREEN = auto()\n...\n>>> [member.value for member in Color]\n[1, 2, 3]\nThevaluesarechosenby_generate_next_value_(),whichcanbeoverridden:\n>>> class AutoName(Enum):\n... @staticmethod\n... def _generate_next_value_(name, start, count, last_values):\n... return name\n...\n>>> class Ordinal(AutoName):\n... NORTH = auto()\n... SOUTH = auto()\n... EAST = auto()\n... WEST = auto()\n...\n>>> [member.value for member in Ordinal]\n['NORTH', 'SOUTH', 'EAST', 'WEST']\n(cid:174) Note\nThe_generate_next_value_()methodmustbedefinedbeforeanymembers.\n6\n5 Iteration\nIteratingoverthemembersofanenumdoesnotprovidethealiases:\n>>> list(Shape)\n[<Shape.SQUARE: 2>, <Shape.DIAMOND: 1>, <Shape.CIRCLE: 3>]\n>>> list(Weekday)\n[<Weekday.MONDAY: 1>, <Weekday.TUESDAY: 2>, <Weekday.WEDNESDAY: 4>, <Weekday.\n,\u2192THURSDAY: 8>, <Weekday.FRIDAY: 16>, <Weekday.SATURDAY: 32>, <Weekday.SUNDAY: 64>]\nNotethatthealiasesShape.ALIAS_FOR_SQUAREandWeekday.WEEKENDaren\u2019tshown.\nThe special attribute __members__ is a read-only ordered mapping of names to members. It includes all names\ndefinedintheenumeration,includingthealiases:\n>>> for name, member in Shape.__members__.items():\n... name, member\n...\n('SQUARE', <Shape.SQUARE: 2>)\n('DIAMOND', <Shape.DIAMOND: 1>)\n('CIRCLE', <Shape.CIRCLE: 3>)\n('ALIAS_FOR_SQUARE', <Shape.SQUARE: 2>)\nThe__members__attributecanbeusedfordetailedprogrammaticaccesstotheenumerationmembers. Forexam-\nple,findingallthealiases:\n>>> [name for name, member in Shape.__members__.items() if member.name != name]\n['ALIAS_FOR_SQUARE']\n(cid:174) Note\nAliasesforflagsincludevalueswithmultipleflagsset,suchas3,andnoflagsset,i.e. 0.\n6 Comparisons\nEnumerationmembersarecomparedbyidentity:\n>>> Color.RED is Color.RED\nTrue\n>>> Color.RED is Color.BLUE\nFalse\n>>> Color.RED is not Color.BLUE\nTrue\nOrdered comparisons between enumeration values are not supported. Enum members are not integers (but see\nIntEnumbelow):\n>>> Color.RED < Color.BLUE\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: '<' not supported between instances of 'Color' and 'Color'\nEqualitycomparisonsaredefinedthough:\n>>> Color.BLUE == Color.RED\nFalse\n>>> Color.BLUE != Color.RED\n(continuesonnextpage)\n7\n(continuedfrompreviouspage)\nTrue\n>>> Color.BLUE == Color.BLUE\nTrue\nComparisonsagainstnon-enumerationvalueswillalwayscomparenotequal(again,IntEnumwasexplicitlydesigned\ntobehavedifferently,seebelow):\n>>> Color.BLUE == 2\nFalse\n(cid:193) Warning\nIt is possible to reload modules \u2013 if a reloaded module contains enums, they will be recreated, and the new\nmembersmaynotcompareidentical/equaltotheoriginalmembers.\n7 Allowed members and attributes of enumerations\nMostoftheexamplesaboveuseintegersforenumerationvalues. Usingintegersisshortandhandy(andprovidedby\ndefaultbytheFunctionalAPI),butnotstrictlyenforced. Inthevastmajorityofuse-cases,onedoesn\u2019tcarewhatthe\nactualvalueofanenumerationis. Butifthevalueisimportant,enumerationscanhavearbitraryvalues.\nEnumerationsarePythonclasses,andcanhavemethodsandspecialmethodsasusual. Ifwehavethisenumeration:\n>>> class Mood(Enum):\n... FUNKY = 1\n... HAPPY = 3\n...\n... def describe(self):\n... # self is the member here\n... return self.name, self.value\n...\n... def __str__(self):\n... return 'my custom str! {0}'.format(self.value)\n...\n... @classmethod\n... def favorite_mood(cls):\n... # cls here is the enumeration\n... return cls.HAPPY\n...\nThen:\n>>> Mood.favorite_mood()\n<Mood.HAPPY: 3>\n>>> Mood.HAPPY.describe()\n('HAPPY', 3)\n>>> str(Mood.FUNKY)\n'my custom str! 1'\nTherulesforwhatisallowedareasfollows: namesthatstartandendwithasingleunderscorearereservedbyenum\nandcannotbeused; allotherattributesdefinedwithinanenumerationwillbecomemembersofthisenumeration,\nwiththeexceptionofspecialmethods(__str__(),__add__(),etc.),descriptors(methodsarealsodescriptors),\nandvariablenameslistedin_ignore_.\nNote: ifyourenumerationdefines__new__()and/or__init__(), anyvalue(s)giventotheenummemberwill\nbepassedintothosemethods. SeePlanetforanexample.\n8\n(cid:174) Note\nThe__new__()method,ifdefined,isusedduringcreationoftheEnummembers;itisthenreplacedbyEnum\u2019s\n__new__()whichisusedafterclasscreationforlookupofexistingmembers. SeeWhentouse__new__()vs.\n__init__()formoredetails.\n8 Restricted Enum subclassing\nAnewEnumclassmusthaveonebaseenumclass,uptooneconcretedatatype,andasmanyobject-basedmixin\nclassesasneeded. Theorderofthesebaseclassesis:\nclass EnumName([mix-in, ...,] [data-type,] base-enum):\npass\nAlso,subclassinganenumerationisallowedonlyiftheenumerationdoesnotdefineanymembers. Sothisisforbidden:\n>>> class MoreColor(Color):\n... PINK = 17\n...\nTraceback (most recent call last):\n...\nTypeError: <enum 'MoreColor'> cannot extend <enum 'Color'>\nButthisisallowed:\n>>> class Foo(Enum):\n... def some_behavior(self):\n... pass\n...\n>>> class Bar(Foo):\n... HAPPY = 1\n... SAD = 2\n...\nAllowingsubclassingofenumsthatdefinememberswouldleadtoaviolationofsomeimportantinvariantsoftypes\nand instances. On the other hand, it makes sense to allow sharing some common behavior between a group of\nenumerations. (SeeOrderedEnumforanexample.)\n9 Dataclass support\nWheninheritingfromadataclass,the__repr__()omitstheinheritedclass\u2019name. Forexample:\n>>> from dataclasses import dataclass, field\n>>> @dataclass\n... class CreatureDataMixin:\n... size: str\n... legs: int\n... tail: bool = field(repr=False, default=True)\n...\n>>> class Creature(CreatureDataMixin, Enum):\n... BEETLE = 'small', 6\n... DOG = 'medium', 4\n...\n>>> Creature.DOG\n<Creature.DOG: size='medium', legs=4>\n9\nUsethedataclass()argumentrepr=Falsetousethestandardrepr().\nChangedinversion3.12: Onlythedataclassfieldsareshowninthevaluearea,notthedataclass\u2019name.\n(cid:174) Note\nAddingdataclass()decoratortoEnumanditssubclassesisnotsupported. Itwillnotraiseanyerrors,butit\nwillproduceverystrangeresultsatruntime,suchasmembersbeingequaltoeachother:\n>>> @dataclass # don't do this: it does not make any sense\n... class Color(Enum):\n... RED = 1\n... BLUE = 2\n...\n>>> Color.RED is Color.BLUE\nFalse\n>>> Color.RED == Color.BLUE # problem is here: they should not be equal\nTrue\n10 Pickling\nEnumerationscanbepickledandunpickled:\n>>> from test.test_enum import Fruit\n>>> from pickle import dumps, loads\n>>> Fruit.TOMATO is loads(dumps(Fruit.TOMATO))\nTrue\nTheusualrestrictionsforpicklingapply: picklableenumsmustbedefinedinthetoplevelofamodule,sinceunpick-\nlingrequiresthemtobeimportablefromthatmodule.\n(cid:174) Note\nWithpickleprotocolversion4itispossibletoeasilypickleenumsnestedinotherclasses.\nItispossibletomodifyhowenummembersarepickled/unpickledbydefining__reduce_ex__()intheenumera-\ntionclass. Thedefaultmethodisby-value,butenumswithcomplicatedvaluesmaywanttouseby-name:\n>>> import enum\n>>> class MyEnum(enum.Enum):\n... __reduce_ex__ = enum.pickle_by_enum_name\n(cid:174) Note\nUsingby-nameforflagsisnotrecommended,asunnamedaliaseswillnotunpickle.\n11 Functional API\nTheEnumclassiscallable,providingthefollowingfunctionalAPI:\n>>> Animal = Enum('Animal', 'ANT BEE CAT DOG')\n>>> Animal\n<enum 'Animal'>\n(continuesonnextpage)\n10\n(continuedfrompreviouspage)\n>>> Animal.ANT\n<Animal.ANT: 1>\n>>> list(Animal)\n[<Animal.ANT: 1>, <Animal.BEE: 2>, <Animal.CAT: 3>, <Animal.DOG: 4>]\nThesemanticsofthisAPIresemblenamedtuple. ThefirstargumentofthecalltoEnumisthenameoftheenu-\nmeration.\nThesecondargumentisthesourceofenumerationmembernames. Itcanbeawhitespace-separatedstringofnames,\nasequenceofnames,asequenceof2-tupleswithkey/valuepairs,oramapping(e.g. dictionary)ofnamestovalues.\nThe last two options enable assigning arbitrary values to enumerations; the others auto-assign increasing integers\nstartingwith1(usethestartparametertospecifyadifferentstartingvalue). AnewclassderivedfromEnumis\nreturned. Inotherwords,theaboveassignmenttoAnimalisequivalentto:\n>>> class Animal(Enum):\n... ANT = 1\n... BEE = 2\n... CAT = 3\n... DOG = 4\n...\nThereasonfordefaultingto1asthestartingnumberandnot0isthat0isFalseinabooleansense,butbydefault\nenummembersallevaluatetoTrue.\nPicklingenumscreatedwiththefunctionalAPIcanbetrickyasframestackimplementationdetailsareusedtotry\nand figure out which module the enumeration is being created in (e.g. it will fail if you use a utility function in\na separate module, and also may not work on IronPython or Jython). The solution is to specify the module name\nexplicitlyasfollows:\n>>> Animal = Enum('Animal', 'ANT BEE CAT DOG', module=__name__)\n(cid:193) Warning\nIfmoduleisnotsupplied,andEnumcannotdeterminewhatitis,thenewEnummemberswillnotbeunpicklable;\ntokeeperrorsclosertothesource,picklingwillbedisabled.\nThe new pickle protocol 4 also, in some circumstances, relies on __qualname__ being set to the location where\npickle will be able to find the class. For example, if the class was made available in class SomeData in the global\nscope:\n>>> Animal = Enum('Animal', 'ANT BEE CAT DOG', qualname='SomeData.Animal')\nThecompletesignatureis:\nEnum(\nvalue='NewEnumName',\nnames=<...>,\n*,\nmodule='...',\nqualname='...',\ntype=<mixed-in class>,\nstart=1,\n)\n\u2022 value: Whatthenewenumclasswillrecordasitsname.\n\u2022 names: Theenummembers. Thiscanbeawhitespace-orcomma-separatedstring(valueswillstartat1unless\notherwisespecified):\n11\n'RED GREEN BLUE' | 'RED,GREEN,BLUE' | 'RED, GREEN, BLUE'\noraniteratorofnames:\n['RED', 'GREEN', 'BLUE']\noraniteratorof(name,value)pairs:\n[('CYAN', 4), ('MAGENTA', 5), ('YELLOW', 6)]\noramapping:\n{'CHARTREUSE': 7, 'SEA_GREEN': 11, 'ROSEMARY': 42}\n\u2022 module: nameofmodulewherenewenumclasscanbefound.\n\u2022 qualname: whereinmodulenewenumclasscanbefound.\n\u2022 type: typetomixintonewenumclass.\n\u2022 start: numbertostartcountingatifonlynamesarepassedin.\nChangedinversion3.5: Thestartparameterwasadded.\n12 Derived Enumerations\n12.1 IntEnum\nThefirstvariationofEnumthatisprovidedisalsoasubclassofint. MembersofanIntEnumcanbecomparedto\nintegers;byextension,integerenumerationsofdifferenttypescanalsobecomparedtoeachother:\n>>> from enum import IntEnum\n>>> class Shape(IntEnum):\n... CIRCLE = 1\n... SQUARE = 2\n...\n>>> class Request(IntEnum):\n... POST = 1\n... GET = 2\n...\n>>> Shape == 1\nFalse\n>>> Shape.CIRCLE == 1\nTrue\n>>> Shape.CIRCLE == Request.POST\nTrue\nHowever,theystillcan\u2019tbecomparedtostandardEnumenumerations:\n>>> class Shape(IntEnum):\n... CIRCLE = 1\n... SQUARE = 2\n...\n>>> class Color(Enum):\n... RED = 1\n... GREEN = 2\n...\n>>> Shape.CIRCLE == Color.RED\nFalse\n12\nIntEnumvaluesbehavelikeintegersinotherwaysyou\u2019dexpect:\n>>> int(Shape.CIRCLE)\n1\n>>> ['a', 'b', 'c'][Shape.CIRCLE]\n'b'\n>>> [i for i in range(Shape.SQUARE)]\n[0, 1]\n12.2 StrEnum\nThesecondvariationofEnumthatisprovidedisalsoasubclassofstr. MembersofaStrEnumcanbecompared\ntostrings;byextension,stringenumerationsofdifferenttypescanalsobecomparedtoeachother.\nAddedinversion3.11.\n12.3 IntFlag\nThenextvariationofEnumprovided,IntFlag,isalsobasedonint. ThedifferencebeingIntFlagmemberscan\nbe combined using the bitwise operators (&, |, ^, ~) and the result is still an IntFlag member, if possible. Like\nIntEnum,IntFlagmembersarealsointegersandcanbeusedwhereveranintisused.\n(cid:174) Note\nAnyoperationonanIntFlagmemberbesidesthebit-wiseoperationswilllosetheIntFlagmembership.\nBit-wise operations that result in invalid IntFlag values will lose the IntFlag membership. See\nFlagBoundaryfordetails.\nAddedinversion3.6.\nChangedinversion3.11.\nSampleIntFlagclass:\n>>> from enum import IntFlag\n>>> class Perm(IntFlag):\n... R = 4\n... W = 2\n... X = 1\n...\n>>> Perm.R | Perm.W\n<Perm.R|W: 6>\n>>> Perm.R + Perm.W\n6\n>>> RW = Perm.R | Perm.W\n>>> Perm.R in RW\nTrue\nItisalsopossibletonamethecombinations:\n>>> class Perm(IntFlag):\n... R = 4\n... W = 2\n... X = 1\n... RWX = 7\n...\n>>> Perm.RWX\n<Perm.RWX: 7>\n(continuesonnextpage)\n13\n(continuedfrompreviouspage)\n>>> ~Perm.RWX\n<Perm: 0>\n>>> Perm(7)\n<Perm.RWX: 7>\n(cid:174) Note\nNamedcombinationsareconsideredaliases. Aliasesdonotshowupduringiteration,butcanbereturnedfrom\nby-valuelookups.\nChangedinversion3.11.\nAnother important difference between IntFlag and Enum is that if no flags are set (the value is 0), its boolean\nevaluationisFalse:\n>>> Perm.R & Perm.X\n<Perm: 0>\n>>> bool(Perm.R & Perm.X)\nFalse\nBecause IntFlag members are also subclasses of int they can be combined with them (but may lose IntFlag\nmembership:\n>>> Perm.X | 4\n<Perm.R|X: 5>\n>>> Perm.X + 8\n9\n(cid:174) Note\nThenegationoperator,~,alwaysreturnsanIntFlagmemberwithapositivevalue:\n>>> (~Perm.X).value == (Perm.R|Perm.W).value == 6\nTrue\nIntFlagmemberscanalsobeiteratedover:\n>>> list(RW)\n[<Perm.R: 4>, <Perm.W: 2>]\nAddedinversion3.11.\n12.4 Flag\nThe last variation is Flag. Like IntFlag, Flag members can be combined using the bitwise operators (&, |, ^,\n~). UnlikeIntFlag,theycannotbecombinedwith,norcomparedagainst,anyotherFlagenumeration,norint.\nWhileitispossibletospecifythevaluesdirectlyitisrecommendedtouseautoasthevalueandletFlagselectan\nappropriatevalue.\nAddedinversion3.6.\nLikeIntFlag,ifacombinationofFlagmembersresultsinnoflagsbeingset,thebooleanevaluationisFalse:\n>>> from enum import Flag, auto\n>>> class Color(Flag):\n(continuesonnextpage)\n14\n(continuedfrompreviouspage)\n... RED = auto()\n... BLUE = auto()\n... GREEN = auto()\n...\n>>> Color.RED & Color.GREEN\n<Color: 0>\n>>> bool(Color.RED & Color.GREEN)\nFalse\nIndividualflagsshouldhavevaluesthatarepowersoftwo(1,2,4,8,\u2026),whilecombinationsofflagswillnot:\n>>> class Color(Flag):\n... RED = auto()\n... BLUE = auto()\n... GREEN = auto()\n... WHITE = RED | BLUE | GREEN\n...\n>>> Color.WHITE\n<Color.WHITE: 7>\nGivinganametothe\u201cnoflagsset\u201dconditiondoesnotchangeitsbooleanvalue:\n>>> class Color(Flag):\n... BLACK = 0\n... RED = auto()\n... BLUE = auto()\n... GREEN = auto()\n...\n>>> Color.BLACK\n<Color.BLACK: 0>\n>>> bool(Color.BLACK)\nFalse\nFlagmemberscanalsobeiteratedover:\n>>> purple = Color.RED | Color.BLUE\n>>> list(purple)\n[<Color.RED: 1>, <Color.BLUE: 2>]\nAddedinversion3.11.\n(cid:174) Note\nForthemajorityofnewcode,EnumandFlagarestronglyrecommended,sinceIntEnumandIntFlagbreak\nsome semantic promises of an enumeration (by being comparable to integers, and thus by transitivity to other\nunrelatedenumerations). IntEnumandIntFlagshouldbeusedonlyincaseswhereEnumandFlagwillnotdo;\nforexample,whenintegerconstantsarereplacedwithenumerations,orforinteroperabilitywithothersystems.\n12.5 Others\nWhileIntEnumispartoftheenummodule,itwouldbeverysimpletoimplementindependently:\nclass IntEnum(int, ReprEnum): # or Enum instead of ReprEnum\npass\nThisdemonstrateshowsimilarderivedenumerationscanbedefined;forexampleaFloatEnumthatmixesinfloat\ninsteadofint.\n15\nSomerules:\n1. WhensubclassingEnum,mix-intypesmustappearbeforetheEnumclassitselfinthesequenceofbases,asin\ntheIntEnumexampleabove.\n2. Mix-intypesmustbesubclassable. Forexample,boolandrangearenotsubclassableandwillthrowanerror\nduringEnumcreationifusedasthemix-intype.\n3. WhileEnumcanhavemembersofanytype,onceyoumixinanadditionaltype,allthemembersmusthave\nvaluesofthattype, e.g. intabove. Thisrestrictiondoesnotapplytomix-inswhichonlyaddmethodsand\ndon\u2019tspecifyanothertype.\n4. Whenanotherdatatypeismixedin,thevalueattributeisnotthesameastheenummemberitself,although\nitisequivalentandwillcompareequal.\n5. Adata typeisamixinthatdefines__new__(),oradataclass\n6. %-styleformatting: %sand%rcalltheEnumclass\u2019s__str__()and__repr__()respectively;othercodes\n(suchas%ior%hforIntEnum)treattheenummemberasitsmixed-intype.\n7. Formattedstringliterals,str.format(),andformat()willusetheenum\u2019s__str__()method.\n(cid:174) Note\nBecauseIntEnum,IntFlag,andStrEnumaredesignedtobedrop-inreplacementsforexistingconstants,their\n__str__()methodhasbeenresettotheirdatatypes\u2019__str__()method.\n13 When to use __new__() vs. __init__()\n__new__()mustbeusedwheneveryouwanttocustomizetheactualvalueoftheEnummember. Anyothermodi-\nficationsmaygoineither__new__()or__init__(),with__init__()beingpreferred.\nForexample,ifyouwanttopassseveralitemstotheconstructor,butonlywantoneofthemtobethevalue:\n>>> class Coordinate(bytes, Enum):\n... \"\"\"\n... Coordinate with binary codes that can be indexed by the int code.\n... \"\"\"\n... def __new__(cls, value, label, unit):\n... obj = bytes.__new__(cls, [value])\n... obj._value_ = value\n... obj.label = label\n... obj.unit = unit\n... return obj\n... PX = (0, 'P.X', 'km')\n... PY = (1, 'P.Y', 'km')\n... VX = (2, 'V.X', 'km/s')\n... VY = (3, 'V.Y', 'km/s')\n...\n>>> print(Coordinate['PY'])\nCoordinate.PY\n>>> print(Coordinate(3))\nCoordinate.VY\n(cid:193) Warning\n16\nDonot callsuper().__new__(),asthelookup-only__new__istheonethatisfound; instead,usethedata\ntypedirectly.\n13.1 Finer Points\nSupported__dunder__names\n__members__isaread-onlyorderedmappingofmember_name:memberitems. Itisonlyavailableontheclass.\n__new__(),ifspecified,mustcreateandreturntheenummembers;itisalsoaverygoodideatosetthemember\u2019s\n_value_appropriately. Onceallthemembersarecreateditisnolongerused.\nSupported_sunder_names\n\u2022 _name_\u2013nameofthemember\n\u2022 _value_\u2013valueofthemember;canbesetin__new__\n\u2022 _missing_()\u2013alookupfunctionusedwhenavalueisnotfound;maybeoverridden\n\u2022 _ignore_\u2013alistofnames,eitherasalistorastr,thatwillnotbetransformedintomembers,andwill\nberemovedfromthefinalclass\n\u2022 _generate_next_value_()\u2013usedtogetanappropriatevalueforanenummember;maybeoverridden\n\u2022 _add_alias_()\u2013addsanewnameasanaliastoanexistingmember.\n\u2022 _add_value_alias_()\u2013addsanewvalueasanaliastoanexistingmember. SeeMultiValueEnumforan\nexample.\n(cid:174) Note\nForstandardEnumclassesthenextvaluechosenisthehighestvalueseenincrementedbyone.\nForFlagclassesthenextvaluechosenwillbethenexthighestpower-of-two.\nChangedinversion3.13: Priorversionswouldusethelastseenvalueinsteadofthehighestvalue.\nAddedinversion3.6: _missing_,_order_,_generate_next_value_\nAddedinversion3.7: _ignore_\nAddedinversion3.13: _add_alias_,_add_value_alias_\nTohelpkeepPython2/Python3codeinsyncan_order_attributecanbeprovided. Itwillbecheckedagainstthe\nactualorderoftheenumerationandraiseanerrorifthetwodonotmatch:\n>>> class Color(Enum):\n... _order_ = 'RED GREEN BLUE'\n... RED = 1\n... BLUE = 3\n... GREEN = 2\n...\nTraceback (most recent call last):\n...\nTypeError: member order does not match _order_:\n['RED', 'BLUE', 'GREEN']\n['RED', 'GREEN', 'BLUE']\n17\n(cid:174) Note\nInPython2codethe_order_attributeisnecessaryasdefinitionorderislostbeforeitcanberecorded.\n_Private__names\nPrivatenamesarenotconvertedtoenummembers,butremainnormalattributes.\nChangedinversion3.11.\nEnummembertype\nEnum members are instances of their enum class, and are normally accessed as EnumClass.member. In certain\nsituations,suchaswritingcustomenumbehavior,beingabletoaccessonememberdirectlyfromanotherisuseful,\nand is supported; however, in order to avoid name clashes between member names and attributes/methods from\nmixed-inclasses,upper-casenamesarestronglyrecommended.\nChangedinversion3.5.\nCreatingmembersthataremixedwithotherdatatypes\nWhensubclassingotherdatatypes,suchasintorstr,withanEnum,allvaluesafterthe=arepassedtothatdata\ntype\u2019sconstructor. Forexample:\n>>> class MyEnum(IntEnum): # help(int) -> int(x, base=10) -> integer\n... example = '11', 16 # so x='11' and base=16\n...\n>>> MyEnum.example.value # and hex(11) is...\n17\nBooleanvalueofEnumclassesandmembers\nEnumclassesthataremixedwithnon-Enumtypes(suchasint,str,etc.) areevaluatedaccordingtothemixed-in\ntype\u2019srules;otherwise,allmembersevaluateasTrue. Tomakeyourownenum\u2019sbooleanevaluationdependonthe\nmember\u2019svalueaddthefollowingtoyourclass:\ndef __bool__(self):\nreturn bool(self.value)\nPlainEnumclassesalwaysevaluateasTrue.\nEnumclasseswithmethods\nIfyougiveyourenumsubclassextramethods,likethePlanet classbelow,thosemethodswillshowupinadir()\nofthemember,butnotoftheclass:\n>>> dir(Planet)\n['EARTH', 'JUPITER', 'MARS', 'MERCURY', 'NEPTUNE', 'SATURN', 'URANUS', 'VENUS', '__\n,\u2192class__', '__doc__', '__members__', '__module__']\n>>> dir(Planet.EARTH)\n['__class__', '__doc__', '__module__', 'mass', 'name', 'radius', 'surface_gravity',\n,\u2192 'value']\nCombiningmembersofFlag\nIteratingoveracombinationofFlagmemberswillonlyreturnthemembersthatarecomprisedofasinglebit:\n18\n>>> class Color(Flag):\n... RED = auto()\n... GREEN = auto()\n... BLUE = auto()\n... MAGENTA = RED | BLUE\n... YELLOW = RED | GREEN\n... CYAN = GREEN | BLUE\n...\n>>> Color(3) # named combination\n<Color.YELLOW: 3>\n>>> Color(7) # not named combination\n<Color.RED|GREEN|BLUE: 7>\nFlagandIntFlagminutia\nUsingthefollowingsnippetforourexamples:\n>>> class Color(IntFlag):\n... BLACK = 0\n... RED = 1\n... GREEN = 2\n... BLUE = 4\n... PURPLE = RED | BLUE\n... WHITE = RED | GREEN | BLUE\n...\nthefollowingaretrue:\n\u2022 single-bitflagsarecanonical\n\u2022 multi-bitandzero-bitflagsarealiases\n\u2022 onlycanonicalflagsarereturnedduringiteration:\n>>> list(Color.WHITE)\n[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 4>]\n\u2022 negatingaflagorflagsetreturnsanewflag/flagsetwiththecorrespondingpositiveintegervalue:\n>>> Color.BLUE\n<Color.BLUE: 4>\n>>> ~Color.BLUE\n<Color.RED|GREEN: 3>\n\u2022 namesofpseudo-flagsareconstructedfromtheirmembers\u2019names:\n>>> (Color.RED | Color.GREEN).name\n'RED|GREEN'\n>>> class Perm(IntFlag):\n... R = 4\n... W = 2\n... X = 1\n...\n>>> (Perm.R & Perm.W).name is None # effectively Perm(0)\nTrue\n\u2022 multi-bitflags,akaaliases,canbereturnedfromoperations:\n19\n>>> Color.RED | Color.BLUE\n<Color.PURPLE: 5>\n>>> Color(7) # or Color(-1)\n<Color.WHITE: 7>\n>>> Color(0)\n<Color.BLACK: 0>\n\u2022 membership/containmentchecking: zero-valuedflagsarealwaysconsideredtobecontained:\n>>> Color.BLACK in Color.WHITE\nTrue\notherwise,onlyifallbitsofoneflagareintheotherflagwillTruebereturned:\n>>> Color.PURPLE in Color.WHITE\nTrue\n>>> Color.GREEN in Color.PURPLE\nFalse\nThereisanewboundarymechanismthatcontrolshowout-of-range/invalidbitsarehandled: STRICT,CONFORM,\nEJECT,andKEEP:\n\u2022 STRICT\u2013>raisesanexceptionwhenpresentedwithinvalidvalues\n\u2022 CONFORM\u2013>discardsanyinvalidbits\n\u2022 EJECT\u2013>loseFlagstatusandbecomeanormalintwiththegivenvalue\n\u2022 KEEP\u2013>keeptheextrabits\n\u2013 keepsFlagstatusandextrabits\n\u2013 extrabitsdonotshowupiniteration\n\u2013 extrabitsdoshowupinrepr()andstr()\nThe default for Flag is STRICT, the default for IntFlag is EJECT, and the default for _convert_ is KEEP (see\nssl.OptionsforanexampleofwhenKEEPisneeded).\n14 How are Enums and Flags different?\nEnumshaveacustommetaclassthataffectsmanyaspectsofbothderivedEnumclassesandtheirinstances(members).\n14.1 Enum Classes\nTheEnumTypemetaclassisresponsibleforprovidingthe__contains__(),__dir__(),__iter__()andother\nmethods that allow one to do things with an Enum class that fail on a typical class, such as list(Color) or\nsome_enum_var in Color. EnumTypeisresponsibleforensuringthatvariousothermethodsonthefinalEnum\nclassarecorrect(suchas__new__(),__getnewargs__(),__str__()and__repr__()).\n14.2 Flag Classes\nFlagshaveanexpandedviewofaliasing: tobecanonical,thevalueofaflagneedstobeapower-of-twovalue,and\nnotaduplicatename. So,inadditiontotheEnumdefinitionofalias,aflagwithnovalue(a.k.a. 0)orwithmorethan\nonepower-of-twovalue(e.g. 3)isconsideredanalias.\n20\n14.3 Enum Members (aka instances)\nThe most interesting thing about enum members is that they are singletons. EnumType creates them all while it\nis creating the enum class itself, and then puts a custom __new__() in place to ensure that no new ones are ever\ninstantiatedbyreturningonlytheexistingmemberinstances.\n14.4 Flag Members\nFlagmemberscanbeiteratedoverjustliketheFlagclass,andonlythecanonicalmemberswillbereturned. For\nexample:\n>>> list(Color)\n[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 4>]\n(NotethatBLACK,PURPLE,andWHITEdonotshowup.)\nInvertingaflagmemberreturnsthecorrespondingpositivevalue,ratherthananegativevalue\u2014forexample:\n>>> ~Color.RED\n<Color.GREEN|BLUE: 6>\nFlagmembershavealengthcorrespondingtothenumberofpower-of-twovaluestheycontain. Forexample:\n>>> len(Color.PURPLE)\n2\n15 Enum Cookbook\nWhileEnum,IntEnum,StrEnum,Flag,andIntFlagareexpectedtocoverthemajorityofuse-cases,theycannot\ncoverthemall. Herearerecipesforsomedifferenttypesofenumerationsthatcanbeuseddirectly,orasexamples\nforcreatingone\u2019sown.\n15.1 Omitting values\nInmanyuse-cases,onedoesn\u2019tcarewhattheactualvalueofanenumerationis. Thereareseveralwaystodefinethis\ntypeofsimpleenumeration:\n\u2022 useinstancesofautoforthevalue\n\u2022 useinstancesofobjectasthevalue\n\u2022 useadescriptivestringasthevalue\n\u2022 useatupleasthevalueandacustom__new__()toreplacethetuplewithanintvalue\nUsing any of these methods signifies to the user that these values are not important, and also enables one to add,\nremove,orreordermemberswithouthavingtorenumbertheremainingmembers.\nUsingauto\nUsingautowouldlooklike:\n>>> class Color(Enum):\n... RED = auto()\n... BLUE = auto()\n... GREEN = auto()\n...\n>>> Color.GREEN\n<Color.GREEN: 3>\n21\nUsingobject\nUsingobjectwouldlooklike:\n>>> class Color(Enum):\n... RED = object()\n... GREEN = object()\n... BLUE = object()\n...\n>>> Color.GREEN\n<Color.GREEN: <object object at 0x...>>\nThisisalsoagoodexampleofwhyyoumightwanttowriteyourown__repr__():\n>>> class Color(Enum):\n... RED = object()\n... GREEN = object()\n... BLUE = object()\n... def __repr__(self):\n... return \"<%s.%s>\" % (self.__class__.__name__, self._name_)\n...\n>>> Color.GREEN\n<Color.GREEN>\nUsingadescriptivestring\nUsingastringasthevaluewouldlooklike:\n>>> class Color(Enum):\n... RED = 'stop'\n... GREEN = 'go'\n... BLUE = 'too fast!'\n...\n>>> Color.GREEN\n<Color.GREEN: 'go'>\nUsingacustom__new__()\nUsinganauto-numbering__new__()wouldlooklike:\n>>> class AutoNumber(Enum):\n... def __new__(cls):\n... value = len(cls.__members__) + 1\n... obj = object.__new__(cls)\n... obj._value_ = value\n... return obj\n...\n>>> class Color(AutoNumber):\n... RED = ()\n... GREEN = ()\n... BLUE = ()\n...\n>>> Color.GREEN\n<Color.GREEN: 2>\nTomakeamoregeneralpurposeAutoNumber,add*argstothesignature:\n22\n>>> class AutoNumber(Enum):\n... def __new__(cls, *args): # this is the only change from above\n... value = len(cls.__members__) + 1\n... obj = object.__new__(cls)\n... obj._value_ = value\n... return obj\n...\nThenwhenyouinheritfromAutoNumberyoucanwriteyourown__init__tohandleanyextraarguments:\n>>> class Swatch(AutoNumber):\n... def __init__(self, pantone='unknown'):\n... self.pantone = pantone\n... AUBURN = '3497'\n... SEA_GREEN = '1246'\n... BLEACHED_CORAL = () # New color, no Pantone code yet!\n...\n>>> Swatch.SEA_GREEN\n<Swatch.SEA_GREEN: 2>\n>>> Swatch.SEA_GREEN.pantone\n'1246'\n>>> Swatch.BLEACHED_CORAL.pantone\n'unknown'\n(cid:174) Note\nThe__new__()method,ifdefined,isusedduringcreationoftheEnummembers;itisthenreplacedbyEnum\u2019s\n__new__()whichisusedafterclasscreationforlookupofexistingmembers.\n(cid:193) Warning\nDonot callsuper().__new__(),asthelookup-only__new__istheonethatisfound; instead,usethedata\ntypedirectly\u2013e.g.:\nobj = int.__new__(cls, value)\n15.2 OrderedEnum\nAn ordered enumeration that is not based on IntEnum and so maintains the normal Enum invariants (such as not\nbeingcomparabletootherenumerations):\n>>> class OrderedEnum(Enum):\n... def __ge__(self, other):\n... if self.__class__ is other.__class__:\n... return self.value >= other.value\n... return NotImplemented\n... def __gt__(self, other):\n... if self.__class__ is other.__class__:\n... return self.value > other.value\n... return NotImplemented\n... def __le__(self, other):\n... if self.__class__ is other.__class__:\n... return self.value <= other.value\n... return NotImplemented\n(continuesonnextpage)\n23\n(continuedfrompreviouspage)\n... def __lt__(self, other):\n... if self.__class__ is other.__class__:\n... return self.value < other.value\n... return NotImplemented\n...\n>>> class Grade(OrderedEnum):\n... A = 5\n... B = 4\n... C = 3\n... D = 2\n... F = 1\n...\n>>> Grade.C < Grade.A\nTrue\n15.3 DuplicateFreeEnum\nRaisesanerrorifaduplicatemembervalueisfoundinsteadofcreatinganalias:\n>>> class DuplicateFreeEnum(Enum):\n... def __init__(self, *args):\n... cls = self.__class__\n... if any(self.value == e.value for e in cls):\n... a = self.name\n... e = cls(self.value).name\n... raise ValueError(\n... \"aliases not allowed in DuplicateFreeEnum: %r --> %r\"\n... % (a, e))\n...\n>>> class Color(DuplicateFreeEnum):\n... RED = 1\n... GREEN = 2\n... BLUE = 3\n... GRENE = 2\n...\nTraceback (most recent call last):\n...\nValueError: aliases not allowed in DuplicateFreeEnum: 'GRENE' --> 'GREEN'\n(cid:174) Note\nThisisausefulexampleforsubclassingEnumtoaddorchangeotherbehaviorsaswellasdisallowingaliases. If\ntheonlydesiredchangeisdisallowingaliases,theunique()decoratorcanbeusedinstead.\n15.4 MultiValueEnum\nSupportshavingmorethanonevaluepermember:\n>>> class MultiValueEnum(Enum):\n... def __new__(cls, value, *values):\n... self = object.__new__(cls)\n... self._value_ = value\n... for v in values:\n... self._add_value_alias_(v)\n... return self\n(continuesonnextpage)\n24\n(continuedfrompreviouspage)\n...\n>>> class DType(MultiValueEnum):\n... float32 = 'f', 8\n... double64 = 'd', 9\n...\n>>> DType('f')\n<DType.float32: 'f'>\n>>> DType(9)\n<DType.double64: 'd'>\n15.5 Planet\nIf__new__()or__init__()isdefined,thevalueoftheenummemberwillbepassedtothosemethods:\n>>> class Planet(Enum):\n... MERCURY = (3.303e+23, 2.4397e6)\n... VENUS = (4.869e+24, 6.0518e6)\n... EARTH = (5.976e+24, 6.37814e6)\n... MARS = (6.421e+23, 3.3972e6)\n... JUPITER = (1.9e+27, 7.1492e7)\n... SATURN = (5.688e+26, 6.0268e7)\n... URANUS = (8.686e+25, 2.5559e7)\n... NEPTUNE = (1.024e+26, 2.4746e7)\n... def __init__(self, mass, radius):\n... self.mass = mass # in kilograms\n... self.radius = radius # in meters\n... @property\n... def surface_gravity(self):\n... # universal gravitational constant (m3 kg-1 s-2)\n... G = 6.67300E-11\n... return G * self.mass / (self.radius * self.radius)\n...\n>>> Planet.EARTH.value\n(5.976e+24, 6378140.0)\n>>> Planet.EARTH.surface_gravity\n9.802652743337129\n15.6 TimePeriod\nAnexampletoshowthe_ignore_attributeinuse:\n>>> from datetime import timedelta\n>>> class Period(timedelta, Enum):\n... \"different lengths of time\"\n... _ignore_ = 'Period i'\n... Period = vars()\n... for i in range(367):\n... Period['day_%d' % i] = i\n...\n>>> list(Period)[:2]\n[<Period.day_0: datetime.timedelta(0)>, <Period.day_1: datetime.timedelta(days=1)>]\n>>> list(Period)[-2:]\n[<Period.day_365: datetime.timedelta(days=365)>, <Period.day_366: datetime.\n,\u2192timedelta(days=366)>]\n25\n16 Subclassing EnumType\nWhilemostenumneedscanbemetbycustomizingEnumsubclasses,eitherwithclassdecoratorsorcustomfunctions,\nEnumTypecanbesubclassedtoprovideadifferentEnumexperience.\n26\n",
  "context": "8 RestrictedEnumsubclassing 9\n9 Dataclasssupport 9\n10 Pickling 10",
  "source_file": "resources\\Year 3\\Python\\howto-enum.pdf",
  "line_numbers": [
    18,
    1082
  ]
}