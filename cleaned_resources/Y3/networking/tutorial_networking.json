{
  "title": "tutorial",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "4 MoreControlFlowTools 17 4.1 ifStatements.",
  "code": "4.3 Therange()Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n4.4 breakandcontinueStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n4.5 elseClausesonLoops . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n4.6 passStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n4.7 matchStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n4.8 DefiningFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n4.9 MoreonDefiningFunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n4.9.1 DefaultArgumentValues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n4.9.2 KeywordArguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n4.9.3 Specialparameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n4.9.4 ArbitraryArgumentLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n4.9.5 UnpackingArgumentLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n4.9.6 LambdaExpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n4.9.7 DocumentationStrings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n4.9.8 FunctionAnnotations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n4.10 Intermezzo: CodingStyle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n5 DataStructures 33\n5.1 MoreonLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n5.1.1 UsingListsasStacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n5.1.2 UsingListsasQueues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n5.1.3 ListComprehensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n5.1.4 NestedListComprehensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n5.2 Thedelstatement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n5.3 TuplesandSequences. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n5.4 Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\ni\n5.5 Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n5.6 LoopingTechniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n5.7 MoreonConditions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n5.8 ComparingSequencesandOtherTypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n6 Modules 43\n6.1 MoreonModules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n6.1.1 Executingmodulesasscripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n6.1.2 TheModuleSearchPath . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n6.1.3 \u201cCompiled\u201dPythonfiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n6.2 StandardModules. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n6.3 Thedir()Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n6.4 Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n6.4.1 Importing*FromaPackage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n6.4.2 Intra-packageReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50\n6.4.3 PackagesinMultipleDirectories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n7 InputandOutput 53\n7.1 FancierOutputFormatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n7.1.1 FormattedStringLiterals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n7.1.2 TheStringformat()Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n7.1.3 ManualStringFormatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n7.1.4 Oldstringformatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n7.2 ReadingandWritingFiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n7.2.1 MethodsofFileObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58\n7.2.2 Savingstructureddatawithjson . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n8 ErrorsandExceptions 61\n8.1 SyntaxErrors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n8.2 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n8.3 HandlingExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\n8.4 RaisingExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\n8.5 ExceptionChaining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n8.6 User-definedExceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n8.7 DefiningClean-upActions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n8.8 PredefinedClean-upActions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n8.9 RaisingandHandlingMultipleUnrelatedExceptions . . . . . . . . . . . . . . . . . . . . . . . . 68\n8.10 EnrichingExceptionswithNotes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70\n9 Classes 73\n9.1 AWordAboutNamesandObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n9.2 PythonScopesandNamespaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n9.2.1 ScopesandNamespacesExample . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n9.3 AFirstLookatClasses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n9.3.1 ClassDefinitionSyntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n9.3.2 ClassObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\n9.3.3 InstanceObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n9.3.4 MethodObjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n9.3.5 ClassandInstanceVariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n9.4 RandomRemarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n9.5 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n9.5.1 MultipleInheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n9.6 PrivateVariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n9.7 OddsandEnds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n9.8 Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\n9.9 Generators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n9.10 GeneratorExpressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n10 BriefTouroftheStandardLibrary 87\nii\n10.1 OperatingSystemInterface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n10.2 FileWildcards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n10.3 CommandLineArguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n10.4 ErrorOutputRedirectionandProgramTermination . . . . . . . . . . . . . . . . . . . . . . . . . 88\n10.5 StringPatternMatching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n10.6 Mathematics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n10.7 InternetAccess . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\n10.8 DatesandTimes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n10.9 DataCompression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n10.10 PerformanceMeasurement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n10.11 QualityControl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n10.12 BatteriesIncluded. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n11 BriefTouroftheStandardLibrary\u2014PartII 93\n11.1 OutputFormatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\n11.2 Templating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n11.3 WorkingwithBinaryDataRecordLayouts. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n11.4 Multi-threading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\n11.5 Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n11.6 WeakReferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\n11.7 ToolsforWorkingwithLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\n11.8 DecimalFloating-PointArithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\n12 VirtualEnvironmentsandPackages 101\n12.1 Introduction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\n12.2 CreatingVirtualEnvironments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\n12.3 ManagingPackageswithpip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\n13 WhatNow? 105\n14 InteractiveInputEditingandHistorySubstitution 107\n14.1 TabCompletionandHistoryEditing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n14.2 AlternativestotheInteractiveInterpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\n15 Floating-PointArithmetic: IssuesandLimitations 109\n15.1 RepresentationError . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n16 Appendix 115\n16.1 InteractiveMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n16.1.1 ErrorHandling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n16.1.2 ExecutablePythonScripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\n16.1.3 TheInteractiveStartupFile . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\n16.1.4 TheCustomizationModules. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\nA Glossary 117\nB Aboutthisdocumentation 135\nB.1 ContributorstothePythondocumentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\nC HistoryandLicense 137\nC.1 Historyofthesoftware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137\nC.2 TermsandconditionsforaccessingorotherwiseusingPython . . . . . . . . . . . . . . . . . . . . 138\nC.2.1 PYTHONSOFTWAREFOUNDATIONLICENSEVERSION2 . . . . . . . . . . . . . 138\nC.2.2 BEOPEN.COMLICENSEAGREEMENTFORPYTHON2.0 . . . . . . . . . . . . . . 139\nC.2.3 CNRILICENSEAGREEMENTFORPYTHON1.6.1 . . . . . . . . . . . . . . . . . . 139\nC.2.4 CWILICENSEAGREEMENTFORPYTHON0.9.0THROUGH1.2 . . . . . . . . . . 140\nC.2.5 ZERO-CLAUSEBSDLICENSEFORCODEINTHEPYTHONDOCUMENTATION . 141\nC.3 LicensesandAcknowledgementsforIncorporatedSoftware . . . . . . . . . . . . . . . . . . . . . 141\nC.3.1 MersenneTwister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\nC.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\niii\nC.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\nC.3.4 Cookiemanagement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\nC.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143\nC.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\nC.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\nC.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145\nC.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146\nC.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146\nC.3.11 strtodanddtoa. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\nC.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\nC.3.13 expat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\nC.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\nC.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\nC.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\nC.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\nC.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153\nC.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\nC.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\nC.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\nD Copyright 157\nIndex 159\niv\nPythonTutorial,Release3.13.3\nPythonisaneasytolearn,powerfulprogramminglanguage. Ithasefficienthigh-leveldatastructuresandasimple\nbuteffectiveapproachtoobject-orientedprogramming. Python\u2019selegantsyntaxanddynamictyping,togetherwith\nits interpreted nature, make it an ideal language for scripting and rapid application development in many areas on\nmostplatforms.\nThePythoninterpreterandtheextensivestandardlibraryarefreelyavailableinsourceorbinaryformforallmajor\nplatforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also\ncontainsdistributionsofandpointerstomanyfreethirdpartyPythonmodules,programsandtools,andadditional\ndocumentation.\nThe Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other\nlanguagescallablefromC).Pythonisalsosuitableasanextensionlanguageforcustomizableapplications.\nThistutorialintroducesthereaderinformallytothebasicconceptsandfeaturesofthePythonlanguageandsystem. It\nhelpstohaveaPythoninterpreterhandyforhands-onexperience,butallexamplesareself-contained,sothetutorial\ncanbereadoff-lineaswell.\nForadescriptionofstandardobjectsandmodules,seelibrary-index. reference-indexgivesamoreformaldefinition\nofthelanguage. TowriteextensionsinCorC++,readextending-indexandc-api-index. Therearealsoseveralbooks\ncoveringPythonindepth.\nThis tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used\nfeature. Instead, it introduces many of Python\u2019s most noteworthy features, and will give you a good idea of the\nlanguage\u2019sflavorandstyle. Afterreadingit,youwillbeabletoreadandwritePythonmodulesandprograms,and\nyouwillbereadytolearnmoreaboutthevariousPythonlibrarymodulesdescribedinlibrary-index.\nTheGlossaryisalsoworthgoingthrough.\nCONTENTS 1\nPythonTutorial,Release3.13.3\n2 CONTENTS\nCHAPTER\nONE\nWHETTING YOUR APPETITE\nIfyoudomuchworkoncomputers,eventuallyyoufindthatthere\u2019ssometaskyou\u2019dliketoautomate. Forexample,\nyoumaywishtoperformasearch-and-replaceoveralargenumberoftextfiles, orrenameandrearrangeabunch\nof photo files in a complicated way. Perhaps you\u2019d like to write a small custom database, or a specialized GUI\napplication,orasimplegame.\nIfyou\u2019reaprofessionalsoftwaredeveloper,youmayhavetoworkwithseveralC/C++/Javalibrariesbutfindtheusual\nwrite/compile/test/re-compilecycleistooslow. Perhapsyou\u2019rewritingatestsuiteforsuchalibraryandfindwriting\nthetestingcodeatedioustask. Ormaybeyou\u2019vewrittenaprogramthatcoulduseanextensionlanguage,andyou\ndon\u2019twanttodesignandimplementawholenewlanguageforyourapplication.\nPythonisjustthelanguageforyou.\nYoucouldwriteaUnixshellscriptorWindowsbatchfilesforsomeofthesetasks,butshellscriptsarebestatmoving\naroundfilesandchangingtextdata,notwell-suitedforGUIapplicationsorgames. YoucouldwriteaC/C++/Java\nprogram,butitcantakealotofdevelopmenttimetogetevenafirst-draftprogram. Pythonissimplertouse,available\nonWindows,macOS,andUnixoperatingsystems,andwillhelpyougetthejobdonemorequickly.\nPythonissimpletouse,butitisarealprogramminglanguage,offeringmuchmorestructureandsupportforlarge\nprogramsthanshellscriptsorbatchfilescanoffer. Ontheotherhand,Pythonalsooffersmuchmoreerrorchecking\nthanC,and,beingavery-high-levellanguage,ithashigh-leveldatatypesbuiltin,suchasflexiblearraysanddictio-\nnaries. BecauseofitsmoregeneraldatatypesPythonisapplicabletoamuchlargerproblemdomainthanAwkor\nevenPerl,yetmanythingsareatleastaseasyinPythonasinthoselanguages.\nPythonallowsyoutosplityourprogramintomodulesthatcanbereusedinotherPythonprograms. Itcomeswitha\nlargecollectionofstandardmodulesthatyoucanuseasthebasisofyourprograms\u2014orasexamplestostartlearning\ntoprograminPython. SomeofthesemodulesprovidethingslikefileI/O,systemcalls,sockets,andeveninterfaces\ntographicaluserinterfacetoolkitslikeTk.\nPythonisaninterpretedlanguage, whichcansaveyouconsiderabletimeduringprogramdevelopmentbecauseno\ncompilationandlinkingisnecessary. Theinterpretercanbeusedinteractively,whichmakesiteasytoexperimentwith\nfeaturesofthelanguage,towritethrow-awayprograms,ortotestfunctionsduringbottom-upprogramdevelopment.\nItisalsoahandydeskcalculator.\nPython enables programs to be written compactly and readably. Programs written in Python are typically much\nshorterthanequivalentC,C++,orJavaprograms,forseveralreasons:\n\u2022 thehigh-leveldatatypesallowyoutoexpresscomplexoperationsinasinglestatement;\n\u2022 statementgroupingisdonebyindentationinsteadofbeginningandendingbrackets;\n\u2022 novariableorargumentdeclarationsarenecessary.\nPython is extensible: if you know how to program in C it is easy to add a new built-in function or module to the\ninterpreter,eithertoperformcriticaloperationsatmaximumspeed,ortolinkPythonprogramstolibrariesthatmay\nonlybeavailableinbinaryform(suchasavendor-specificgraphicslibrary). Onceyouarereallyhooked, youcan\nlinkthePythoninterpreterintoanapplicationwritteninCanduseitasanextensionorcommandlanguageforthat\napplication.\nBytheway,thelanguageisnamedaftertheBBCshow\u201cMontyPython\u2019sFlyingCircus\u201dandhasnothingtodowith\nreptiles. MakingreferencestoMontyPythonskitsindocumentationisnotonlyallowed,itisencouraged!\n3\nPythonTutorial,Release3.13.3\nNowthatyouareallexcitedaboutPython,you\u2019llwanttoexamineitinsomemoredetail. Sincethebestwaytolearn\nalanguageistouseit,thetutorialinvitesyoutoplaywiththePythoninterpreterasyouread.\nInthenextchapter, themechanicsofusingtheinterpreterareexplained. Thisisrathermundaneinformation, but\nessentialfortryingouttheexamplesshownlater.\nThe rest of the tutorial introduces various features of the Python language and system through examples, begin-\nningwithsimpleexpressions,statementsanddatatypes,throughfunctionsandmodules,andfinallytouchingupon\nadvancedconceptslikeexceptionsanduser-definedclasses.\n4 Chapter1. WhettingYourAppetite\nCHAPTER\nTWO\nUSING THE PYTHON INTERPRETER\n2.1 Invoking the Interpreter\nThePythoninterpreterisusuallyinstalledas/usr/local/bin/python3.13onthosemachineswhereitisavail-\nable;putting/usr/local/bininyourUnixshell\u2019ssearchpathmakesitpossibletostartitbytypingthecommand:\npython3.13\ntotheshell.1 Sincethechoiceofthedirectorywheretheinterpreterlivesisaninstallationoption,otherplacesare\npossible; check with your local Python guru or system administrator. (E.g., /usr/local/python is a popular\nalternativelocation.)\nOnWindowsmachineswhereyouhaveinstalledPythonfromtheMicrosoftStore,thepython3.13commandwill\nbeavailable. Ifyouhavethepy.exelauncherinstalled,youcanusethepycommand. Seesetting-envvarsforother\nwaystolaunchPython.\nTypinganend-of-filecharacter(Control-DonUnix,Control-ZonWindows)attheprimarypromptcausesthe\ninterpretertoexitwithazeroexitstatus. Ifthatdoesn\u2019twork, youcanexittheinterpreterbytypingthefollowing\ncommand: quit().\nTheinterpreter\u2019sline-editingfeaturesincludeinteractiveediting,historysubstitutionandcodecompletiononsystems\nthatsupporttheGNUReadlinelibrary. Perhapsthequickestchecktoseewhethercommandlineeditingissupported\nistypingControl-PtothefirstPythonpromptyouget. Ifitbeeps,youhavecommandlineediting;seeAppendix\nInteractiveInputEditingandHistorySubstitutionforanintroductiontothekeys. Ifnothingappearstohappen,orif\n^Pisechoed,commandlineeditingisn\u2019tavailable;you\u2019llonlybeabletousebackspacetoremovecharactersfrom\nthecurrentline.\nTheinterpreteroperatessomewhatliketheUnixshell: whencalledwithstandardinputconnectedtoattydevice,it\nreadsandexecutescommandsinteractively;whencalledwithafilenameargumentorwithafileasstandardinput,it\nreadsandexecutesascriptfromthatfile.\nAsecondwayofstartingtheinterpreterispython -c command [arg] ...,whichexecutesthestatement(s)in\ncommand,analogoustotheshell\u2019s-coption. SincePythonstatementsoftencontainspacesorothercharactersthat\narespecialtotheshell,itisusuallyadvisedtoquotecommandinitsentirety.\nSome Python modules are also useful as scripts. These can be invoked using python -m module [arg] ...,\nwhichexecutesthesourcefileformoduleasifyouhadspelledoutitsfullnameonthecommandline.\nWhenascriptfileisused,itissometimesusefultobeabletorunthescriptandenterinteractivemodeafterwards.\nThiscanbedonebypassing-ibeforethescript.\nAllcommandlineoptionsaredescribedinusing-on-general.\n1OnUnix,thePython3.xinterpreterisbydefaultnotinstalledwiththeexecutablenamedpython,sothatitdoesnotconflictwithasimul-\ntaneouslyinstalledPython2.xexecutable.\n5\nPythonTutorial,Release3.13.3\n2.1.1 Argument Passing\nWhenknowntotheinterpreter,thescriptnameandadditionalargumentsthereafterareturnedintoalistofstrings\nandassignedtotheargvvariableinthesysmodule. Youcanaccessthislistbyexecutingimport sys. Thelength\nofthelistisatleastone;whennoscriptandnoargumentsaregiven,sys.argv[0]isanemptystring. Whenthe\nscript name is given as '-' (meaning standard input), sys.argv[0] is set to '-'. When -c command is used,\nsys.argv[0]issetto'-c'. When-mmoduleisused,sys.argv[0]issettothefullnameofthelocatedmodule.\nOptionsfoundafter-ccommandor-mmodulearenotconsumedbythePythoninterpreter\u2019soptionprocessingbut\nleftinsys.argvforthecommandormoduletohandle.\n2.1.2 Interactive Mode\nWhencommandsarereadfromatty, theinterpreterissaidtobeininteractivemode. Inthismodeitpromptsfor\nthenextcommandwiththeprimaryprompt,usuallythreegreater-thansigns(>>>);forcontinuationlinesitprompts\nwiththesecondaryprompt,bydefaultthreedots(...). Theinterpreterprintsawelcomemessagestatingitsversion\nnumberandacopyrightnoticebeforeprintingthefirstprompt:\n$ python3.13\nPython 3.13 (default, April 4 2023, 09:25:04)\n[GCC 10.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\nContinuationlinesareneededwhenenteringamulti-lineconstruct. Asanexample,takealookatthisifstatement:\n>>> the_world_is_flat = True\n>>> if the_world_is_flat:\n... print(\"Be careful not to fall off!\")\n...\nBe careful not to fall off!\nFormoreoninteractivemode,seeInteractiveMode.\n2.2 The Interpreter and Its Environment\n2.2.1 Source Code Encoding\nBydefault,PythonsourcefilesaretreatedasencodedinUTF-8. Inthatencoding,charactersofmostlanguagesin\nthe world can be used simultaneously in string literals, identifiers and comments \u2014 although the standard library\nonly uses ASCII characters for identifiers, a convention that any portable code should follow. To display all these\ncharacters properly, your editor must recognize that the file is UTF-8, and it must use a font that supports all the\ncharactersinthefile.\nTodeclareanencodingotherthanthedefaultone,aspecialcommentlineshouldbeaddedasthefirstlineofthefile.\nThesyntaxisasfollows:\n# -*- coding: encoding -*-\nwhereencodingisoneofthevalidcodecssupportedbyPython.\nForexample,todeclarethatWindows-1252encodingistobeused,thefirstlineofyoursourcecodefileshouldbe:\n# -*- coding: cp1252 -*-\nOneexceptiontothefirstlineruleiswhenthesourcecodestartswithaUNIX\u201cshebang\u201dline. Inthiscase,theencoding\ndeclarationshouldbeaddedasthesecondlineofthefile. Forexample:\n#!/usr/bin/env python3\n# -*- coding: cp1252 -*-\n6 Chapter2. UsingthePythonInterpreter\nCHAPTER\nTHREE\nAN INFORMAL INTRODUCTION TO PYTHON\nIn the following examples, input and output are distinguished by the presence or absence of prompts (\u00bb> and \u2026):\ntorepeattheexample,youmusttypeeverythingaftertheprompt,whenthepromptappears;linesthatdonotbegin\nwithapromptareoutputfromtheinterpreter. Notethatasecondarypromptonalinebyitselfinanexamplemeans\nyoumusttypeablankline;thisisusedtoendamulti-linecommand.\nManyoftheexamplesinthismanual,eventhoseenteredattheinteractiveprompt,includecomments. Comments\ninPythonstartwiththehashcharacter,#,andextendtotheendofthephysicalline. Acommentmayappearatthe\nstartofalineorfollowingwhitespaceorcode,butnotwithinastringliteral. Ahashcharacterwithinastringliteral\nisjustahashcharacter. SincecommentsaretoclarifycodeandarenotinterpretedbyPython,theymaybeomitted\nwhentypinginexamples.\nSomeexamples:\n# this is the first comment\nspam = 1 # and this is the second comment\n# ... and now a third!\ntext = \"# This is not a comment because it's inside quotes.\"\n3.1 Using Python as a Calculator\nLet\u2019strysomesimplePythoncommands. Starttheinterpreterandwaitfortheprimaryprompt,>>>. (Itshouldn\u2019t\ntakelong.)\n3.1.1 Numbers\nTheinterpreteractsasasimplecalculator: youcantypeanexpressionatitanditwillwritethevalue. Expression\nsyntax is straightforward: the operators +, -, * and / can be used to perform arithmetic; parentheses (()) can be\nusedforgrouping. Forexample:\n>>> 2 + 2\n4\n>>> 50 - 5*6\n20\n>>> (50 - 5*6) / 4\n5.0\n>>> 8 / 5 # division always returns a floating-point number\n1.6\nTheintegernumbers(e.g. 2,4,20)havetypeint,theoneswithafractionalpart(e.g. 5.0,1.6)havetypefloat.\nWewillseemoreaboutnumerictypeslaterinthetutorial.\nDivision (/) always returns a float. To do floor division and get an integer result you can use the // operator; to\ncalculatetheremainderyoucanuse%:\n7\nPythonTutorial,Release3.13.3\n>>> 17 / 3 # classic division returns a float\n5.666666666666667\n>>>\n>>> 17 // 3 # floor division discards the fractional part\n5\n>>> 17 % 3 # the % operator returns the remainder of the division\n2\n>>> 5 * 3 + 2 # floored quotient * divisor + remainder\n17\nWithPython,itispossibletousethe**operatortocalculatepowers1:\n>>> 5 ** 2 # 5 squared\n25\n>>> 2 ** 7 # 2 to the power of 7\n128\nTheequalsign(=)isusedtoassignavaluetoavariable. Afterwards,noresultisdisplayedbeforethenextinteractive\nprompt:\n>>> width = 20\n>>> height = 5 * 9\n>>> width * height\n900\nIfavariableisnot\u201cdefined\u201d(assignedavalue),tryingtouseitwillgiveyouanerror:\n>>> n # try to access an undefined variable\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nNameError: name 'n' is not defined\nThereisfullsupportforfloatingpoint; operatorswithmixedtypeoperandsconverttheintegeroperandtofloating\npoint:\n>>> 4 * 3.75 - 1\n14.0\nIn interactive mode, the last printed expression is assigned to the variable _. This means that when you are using\nPythonasadeskcalculator,itissomewhateasiertocontinuecalculations,forexample:\n>>> tax = 12.5 / 100\n>>> price = 100.50\n>>> price * tax\n12.5625\n>>> price + _\n113.0625\n>>> round(_, 2)\n113.06\nThisvariableshouldbetreatedasread-onlybytheuser. Don\u2019texplicitlyassignavaluetoit\u2014youwouldcreatean\nindependentlocalvariablewiththesamenamemaskingthebuilt-invariablewithitsmagicbehavior.\nInadditiontointandfloat,Pythonsupportsothertypesofnumbers,suchasDecimalandFraction. Python\nalsohasbuilt-insupportforcomplexnumbers,andusesthejorJsuffixtoindicatetheimaginarypart(e.g. 3+5j).\n1Since**hashigherprecedencethan-,-3**2willbeinterpretedas-(3**2)andthusresultin-9. Toavoidthisandget9,youcanuse\n(-3)**2.\n8 Chapter3. AnInformalIntroductiontoPython\nPythonTutorial,Release3.13.3\n3.1.2 Text\nPythoncanmanipulatetext(representedbytypestr,so-called\u201cstrings\u201d)aswellasnumbers. Thisincludescharacters\n\u201c!\u201d,words\u201crabbit\u201d,names\u201cParis\u201d,sentences\u201cGot your back.\u201d,etc. \u201cYay! :)\u201d. Theycanbeenclosedin\nsinglequotes('...')ordoublequotes(\"...\")withthesameresult2.\n>>> 'spam eggs' # single quotes\n'spam eggs'\n>>> \"Paris rabbit got your back :)! Yay!\" # double quotes\n'Paris rabbit got your back :)! Yay!'\n>>> '1975' # digits and numerals enclosed in quotes are also strings\n'1975'\nToquoteaquote,weneedto\u201cescape\u201dit,byprecedingitwith\\. Alternatively,wecanusetheothertypeofquotation\nmarks:\n>>> 'doesn\\'t' # use \\' to escape the single quote...\n\"doesn't\"\n>>> \"doesn't\" # ...or use double quotes instead\n\"doesn't\"\n>>> '\"Yes,\" they said.'\n'\"Yes,\" they said.'\n>>> \"\\\"Yes,\\\" they said.\"\n'\"Yes,\" they said.'\n>>> '\"Isn\\'t,\" they said.'\n'\"Isn\\'t,\" they said.'\nInthePythonshell,thestringdefinitionandoutputstringcanlookdifferent. Theprint()functionproducesamore\nreadableoutput,byomittingtheenclosingquotesandbyprintingescapedandspecialcharacters:\n>>> s = 'First line.\\nSecond line.' # \\n means newline\n>>> s # without print(), special characters are included in the string\n'First line.\\nSecond line.'\n>>> print(s) # with print(), special characters are interpreted, so \\n produces\u2423\n,\u2192new line\nFirst line.\nSecond line.\nIfyoudon\u2019twantcharactersprefacedby\\tobeinterpretedasspecialcharacters,youcanuserawstringsbyadding\nanrbeforethefirstquote:\n>>> print('C:\\some\\name') # here \\n means newline!\nC:\\some\name\n>>> print(r'C:\\some\\name') # note the r before the quote\nC:\\some\\name\nThereisonesubtleaspecttorawstrings: arawstringmaynotendinanoddnumberof\\characters;seetheFAQ\nentryformoreinformationandworkarounds.\nString literals can span multiple lines. One way is using triple-quotes: \"\"\"...\"\"\" or '''...'''. End-of-line\ncharactersareautomaticallyincludedinthestring,butit\u2019spossibletopreventthisbyaddinga\\attheendoftheline.\nInthefollowingexample,theinitialnewlineisnotincluded:\n>>> print(\"\"\"\\\n... Usage: thingy [OPTIONS]\n... -h Display this usage message\n(continuesonnextpage)\n2Unlikeotherlanguages,specialcharacterssuchas\\nhavethesamemeaningwithbothsingle('...')anddouble(\"...\")quotes. The\nonlydifferencebetweenthetwoisthatwithinsinglequotesyoudon\u2019tneedtoescape\"(butyouhavetoescape\\')andviceversa.\n3.1. UsingPythonasaCalculator 9\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n... -H hostname Hostname to connect to\n... \"\"\")\nUsage: thingy [OPTIONS]\n-h Display this usage message\n-H hostname Hostname to connect to\n>>>\nStringscanbeconcatenated(gluedtogether)withthe+operator,andrepeatedwith*:\n>>> # 3 times 'un', followed by 'ium'\n>>> 3 * 'un' + 'ium'\n'unununium'\nTwoormorestringliterals(i.e. theonesenclosedbetweenquotes)nexttoeachotherareautomaticallyconcatenated.\n>>> 'Py' 'thon'\n'Python'\nThisfeatureisparticularlyusefulwhenyouwanttobreaklongstrings:\n>>> text = ('Put several strings within parentheses '\n... 'to have them joined together.')\n>>> text\n'Put several strings within parentheses to have them joined together.'\nThisonlyworkswithtwoliteralsthough,notwithvariablesorexpressions:\n>>> prefix = 'Py'\n>>> prefix 'thon' # can't concatenate a variable and a string literal\nFile \"<stdin>\", line 1\nprefix 'thon'\n^^^^^^\nSyntaxError: invalid syntax\n>>> ('un' * 3) 'ium'\nFile \"<stdin>\", line 1\n('un' * 3) 'ium'\n^^^^^\nSyntaxError: invalid syntax\nIfyouwanttoconcatenatevariablesoravariableandaliteral,use+:\n>>> prefix + 'thon'\n'Python'\nStringscanbeindexed (subscripted),withthefirstcharacterhavingindex0. Thereisnoseparatecharactertype;a\ncharacterissimplyastringofsizeone:\n>>> word = 'Python'\n>>> word[0] # character in position 0\n'P'\n>>> word[5] # character in position 5\n'n'\nIndicesmayalsobenegativenumbers,tostartcountingfromtheright:\n>>> word[-1] # last character\n'n'\n(continuesonnextpage)\n10 Chapter3. AnInformalIntroductiontoPython\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n>>> word[-2] # second-last character\n'o'\n>>> word[-6]\n'P'\nNotethatsince-0isthesameas0,negativeindicesstartfrom-1.\nInadditiontoindexing,slicingisalsosupported. Whileindexingisusedtoobtainindividualcharacters,slicingallows\nyoutoobtainasubstring:\n>>> word[0:2] # characters from position 0 (included) to 2 (excluded)\n'Py'\n>>> word[2:5] # characters from position 2 (included) to 5 (excluded)\n'tho'\nSliceindiceshaveusefuldefaults;anomittedfirstindexdefaultstozero,anomittedsecondindexdefaultstothesize\nofthestringbeingsliced.\n>>> word[:2] # character from the beginning to position 2 (excluded)\n'Py'\n>>> word[4:] # characters from position 4 (included) to the end\n'on'\n>>> word[-2:] # characters from the second-last (included) to the end\n'on'\nNotehowthestartisalwaysincluded,andtheendalwaysexcluded. Thismakessurethats[:i] + s[i:] isalways\nequaltos:\n>>> word[:2] + word[2:]\n'Python'\n>>> word[:4] + word[4:]\n'Python'\nOnewaytorememberhowslicesworkistothinkoftheindicesaspointingbetweencharacters,withtheleftedgeof\nthefirstcharacternumbered0. Thentherightedgeofthelastcharacterofastringofncharactershasindexn,for\nexample:\n+---+---+---+---+---+---+\n| P | y | t | h | o | n |\n+---+---+---+---+---+---+\n0 1 2 3 4 5 6\n-6 -5 -4 -3 -2 -1\nThefirstrowofnumbersgivesthepositionoftheindices0\u20266inthestring;thesecondrowgivesthecorresponding\nnegativeindices. Theslicefromitojconsistsofallcharactersbetweentheedgeslabelediandj,respectively.\nFornon-negativeindices,thelengthofasliceisthedifferenceoftheindices,ifbotharewithinbounds. Forexample,\nthelengthofword[1:3]is2.\nAttemptingtouseanindexthatistoolargewillresultinanerror:\n>>> word[42] # the word only has 6 characters\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nIndexError: string index out of range\nHowever,outofrangesliceindexesarehandledgracefullywhenusedforslicing:\n3.1. UsingPythonasaCalculator 11\nPythonTutorial,Release3.13.3\n>>> word[4:42]\n'on'\n>>> word[42:]\n''\nPythonstringscannotbechanged\u2014theyareimmutable. Therefore, assigningtoanindexedpositioninthestring\nresultsinanerror:\n>>> word[0] = 'J'\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: 'str' object does not support item assignment\n>>> word[2:] = 'py'\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: 'str' object does not support item assignment\nIfyouneedadifferentstring,youshouldcreateanewone:\n>>> 'J' + word[1:]\n'Jython'\n>>> word[:2] + 'py'\n'Pypy'\nThebuilt-infunctionlen()returnsthelengthofastring:\n>>> s = 'supercalifragilisticexpialidocious'\n>>> len(s)\n34\n(cid:181) Seealso\ntextseq\nStringsareexamplesofsequencetypes,andsupportthecommonoperationssupportedbysuchtypes.\nstring-methods\nStringssupportalargenumberofmethodsforbasictransformationsandsearching.\nf-strings\nStringliteralsthathaveembeddedexpressions.\nformatstrings\nInformationaboutstringformattingwithstr.format().\nold-string-formatting\nTheoldformattingoperationsinvokedwhenstringsaretheleftoperandofthe%operatoraredescribedin\nmoredetailhere.\n3.1.3 Lists\nPythonknowsanumberofcompounddatatypes,usedtogrouptogetherothervalues. Themostversatileisthelist,\nwhichcanbewrittenasalistofcomma-separatedvalues(items)betweensquarebrackets. Listsmightcontainitems\nofdifferenttypes,butusuallytheitemsallhavethesametype.\n>>> squares = [1, 4, 9, 16, 25]\n>>> squares\n[1, 4, 9, 16, 25]\nLikestrings(andallotherbuilt-insequencetypes),listscanbeindexedandsliced:\n12 Chapter3. AnInformalIntroductiontoPython\nPythonTutorial,Release3.13.3\n>>> squares[0] # indexing returns the item\n1\n>>> squares[-1]\n25\n>>> squares[-3:] # slicing returns a new list\n[9, 16, 25]\nListsalsosupportoperationslikeconcatenation:\n>>> squares + [36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nUnlikestrings,whichareimmutable,listsareamutabletype,i.e. itispossibletochangetheircontent:\n>>> cubes = [1, 8, 27, 65, 125] # something's wrong here\n>>> 4 ** 3 # the cube of 4 is 64, not 65!\n64\n>>> cubes[3] = 64 # replace the wrong value\n>>> cubes\n[1, 8, 27, 64, 125]\nYoucanalsoaddnewitemsattheendofthelist, byusingthelist.append()method (wewillseemoreabout\nmethodslater):\n>>> cubes.append(216) # add the cube of 6\n>>> cubes.append(7 ** 3) # and the cube of 7\n>>> cubes\n[1, 8, 27, 64, 125, 216, 343]\nSimpleassignmentinPythonnevercopiesdata. Whenyouassignalisttoavariable,thevariablereferstotheexisting\nlist. Anychangesyoumaketothelistthroughonevariablewillbeseenthroughallothervariablesthatrefertoit.:\n>>> rgb = [\"Red\", \"Green\", \"Blue\"]\n>>> rgba = rgb\n>>> id(rgb) == id(rgba) # they reference the same object\nTrue\n>>> rgba.append(\"Alph\")\n>>> rgb\n[\"Red\", \"Green\", \"Blue\", \"Alph\"]\nAllsliceoperationsreturnanewlistcontainingtherequestedelements. Thismeansthatthefollowingslicereturnsa\nshallowcopyofthelist:\n>>> correct_rgba = rgba[:]\n>>> correct_rgba[-1] = \"Alpha\"\n>>> correct_rgba\n[\"Red\", \"Green\", \"Blue\", \"Alpha\"]\n>>> rgba\n[\"Red\", \"Green\", \"Blue\", \"Alph\"]\nAssignmenttoslicesisalsopossible,andthiscanevenchangethesizeofthelistorclearitentirely:\n>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>> letters\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>> # replace some values\n>>> letters[2:5] = ['C', 'D', 'E']\n>>> letters\n(continuesonnextpage)\n3.1. UsingPythonasaCalculator 13\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n['a', 'b', 'C', 'D', 'E', 'f', 'g']\n>>> # now remove them\n>>> letters[2:5] = []\n>>> letters\n['a', 'b', 'f', 'g']\n>>> # clear the list by replacing all the elements with an empty list\n>>> letters[:] = []\n>>> letters\n[]\nThebuilt-infunctionlen()alsoappliestolists:\n>>> letters = ['a', 'b', 'c', 'd']\n>>> len(letters)\n4\nItispossibletonestlists(createlistscontainingotherlists),forexample:\n>>> a = ['a', 'b', 'c']\n>>> n = [1, 2, 3]\n>>> x = [a, n]\n>>> x\n[['a', 'b', 'c'], [1, 2, 3]]\n>>> x[0]\n['a', 'b', 'c']\n>>> x[0][1]\n'b'\n3.2 First Steps Towards Programming\nOfcourse,wecanusePythonformorecomplicatedtasksthanaddingtwoandtwotogether. Forinstance,wecan\nwriteaninitialsub-sequenceoftheFibonacciseriesasfollows:\n>>> # Fibonacci series:\n>>> # the sum of two elements defines the next\n>>> a, b = 0, 1\n>>> while a < 10:\n... print(a)\n... a, b = b, a+b\n...\n0\n1\n1\n2\n3\n5\n8\nThisexampleintroducesseveralnewfeatures.\n\u2022 Thefirstlinecontainsamultipleassignment: thevariablesaandbsimultaneouslygetthenewvalues0and1.\nOnthelastlinethisisusedagain,demonstratingthattheexpressionsontheright-handsideareallevaluated\nfirstbeforeanyoftheassignmentstakeplace. Theright-handsideexpressionsareevaluatedfromtheleftto\ntheright.\n\u2022 Thewhileloopexecutesaslongasthecondition(here: a < 10)remainstrue. InPython,likeinC,anynon-\nzerointegervalueistrue;zeroisfalse. Theconditionmayalsobeastringorlistvalue,infactanysequence;\n14 Chapter3. AnInformalIntroductiontoPython\nPythonTutorial,Release3.13.3\nanythingwithanon-zerolengthistrue,emptysequencesarefalse. Thetestusedintheexampleisasimple\ncomparison. ThestandardcomparisonoperatorsarewrittenthesameasinC:<(lessthan),>(greaterthan),\n==(equalto),<=(lessthanorequalto),>=(greaterthanorequalto)and!=(notequalto).\n\u2022 Thebodyoftheloopisindented:indentationisPython\u2019swayofgroupingstatements. Attheinteractiveprompt,\nyouhavetotypeataborspace(s)foreachindentedline. Inpracticeyouwillpreparemorecomplicatedinput\nforPythonwithatexteditor;alldecenttexteditorshaveanauto-indentfacility. Whenacompoundstatement\nis entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot\nguess when you have typed the last line). Note that each line within a basic block must be indented by the\nsameamount.\n\u2022 Theprint()functionwritesthevalueoftheargument(s)itisgiven. Itdiffersfromjustwritingtheexpression\nyou want to write (as we did earlier in the calculator examples) in the way it handles multiple arguments,\nfloating-pointquantities,andstrings. Stringsareprintedwithoutquotes,andaspaceisinsertedbetweenitems,\nsoyoucanformatthingsnicely,likethis:\n>>> i = 256*256\n>>> print('The value of i is', i)\nThe value of i is 65536\nThekeywordargumentendcanbeusedtoavoidthenewlineaftertheoutput,orendtheoutputwithadifferent\nstring:\n>>> a, b = 0, 1\n>>> while a < 1000:\n... print(a, end=',')\n... a, b = b, a+b\n...\n0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,\n3.2. FirstStepsTowardsProgramming 15\nPythonTutorial,Release3.13.3\n16 Chapter3. AnInformalIntroductiontoPython\nCHAPTER\nFOUR\nMORE CONTROL FLOW TOOLS\nAswellasthewhilestatementjustintroduced,Pythonusesafewmorethatwewillencounterinthischapter.\n4.1 if Statements\nPerhapsthemostwell-knownstatementtypeistheifstatement. Forexample:\n>>> x = int(input(\"Please enter an integer: \"))\nPlease enter an integer: 42\n>>> if x < 0:\n... x = 0\n... print('Negative changed to zero')\n... elif x == 0:\n... print('Zero')\n... elif x == 1:\n... print('Single')\n... else:\n... print('More')\n...\nMore\nTherecanbezeroormoreelifparts,andtheelsepartisoptional. Thekeyword\u2018elif\u2019isshortfor\u2018elseif\u2019,andis\nusefultoavoidexcessiveindentation. Anif\u2026elif\u2026elif\u2026sequenceisasubstitutefortheswitchorcase\nstatementsfoundinotherlanguages.\nIf you\u2019re comparing the same value to several constants, or checking for specific types or attributes, you may also\nfindthematchstatementuseful. FormoredetailsseematchStatements.\n4.2 for Statements\nTheforstatementinPythondiffersabitfromwhatyoumaybeusedtoinCorPascal. Ratherthanalwaysiterating\noveranarithmeticprogressionofnumbers(likeinPascal),orgivingtheusertheabilitytodefineboththeiteration\nstepandhaltingcondition(asC),Python\u2019sforstatementiteratesovertheitemsofanysequence(alistorastring),\nintheorderthattheyappearinthesequence. Forexample(nopunintended):\n>>> # Measure some strings:\n>>> words = ['cat', 'window', 'defenestrate']\n>>> for w in words:\n... print(w, len(w))\n...\ncat 3\nwindow 6\ndefenestrate 12\nCodethatmodifiesacollectionwhileiteratingoverthatsamecollectioncanbetrickytogetright. Instead,itisusually\nmorestraight-forwardtoloopoveracopyofthecollectionortocreateanewcollection:\n17\nPythonTutorial,Release3.13.3\n# Create a sample collection\nusers = {'Hans': 'active', '\u00c9l\u00e9onore': 'inactive', '(cid:0)(cid:0)(cid:0)': 'active'}\n# Strategy: Iterate over a copy\nfor user, status in users.copy().items():\nif status == 'inactive':\ndel users[user]\n# Strategy: Create a new collection\nactive_users = {}\nfor user, status in users.items():\nif status == 'active':\nactive_users[user] = status\n4.3 The range() Function\nIfyoudoneedtoiterateoverasequenceofnumbers,thebuilt-infunctionrange()comesinhandy. Itgenerates\narithmeticprogressions:\n>>> for i in range(5):\n... print(i)\n...\n0\n1\n2\n3\n4\nThegivenendpointisneverpartofthegeneratedsequence;range(10)generates10values,thelegalindicesfor\nitems of a sequence of length 10. It is possible to let the range start at another number, or to specify a different\nincrement(evennegative;sometimesthisiscalledthe\u2018step\u2019):\n>>> list(range(5, 10))\n[5, 6, 7, 8, 9]\n>>> list(range(0, 10, 3))\n[0, 3, 6, 9]\n>>> list(range(-10, -100, -30))\n[-10, -40, -70]\nToiterateovertheindicesofasequence,youcancombinerange()andlen()asfollows:\n>>> a = ['Mary', 'had', 'a', 'little', 'lamb']\n>>> for i in range(len(a)):\n... print(i, a[i])\n...\n0 Mary\n1 had\n2 a\n3 little\n4 lamb\nInmostsuchcases,however,itisconvenienttousetheenumerate()function,seeLoopingTechniques.\nAstrangethinghappensifyoujustprintarange:\n18 Chapter4. MoreControlFlowTools\nPythonTutorial,Release3.13.3\n>>> range(10)\nrange(0, 10)\nInmanywaystheobjectreturnedbyrange()behavesasifitisalist,butinfactitisn\u2019t. Itisanobjectwhichreturns\nthesuccessiveitemsofthedesiredsequencewhenyouiterateoverit,butitdoesn\u2019treallymakethelist,thussaving\nspace.\nWesaysuchanobjectisiterable,thatis,suitableasatargetforfunctionsandconstructsthatexpectsomethingfrom\nwhichtheycanobtainsuccessiveitemsuntilthesupplyisexhausted. Wehaveseenthattheforstatementissucha\nconstruct,whileanexampleofafunctionthattakesaniterableissum():\n>>> sum(range(4)) # 0 + 1 + 2 + 3\n6\nLaterwewillseemorefunctionsthatreturniterablesandtakeiterablesasarguments. InchapterDataStructures,we\nwilldiscussinmoredetailaboutlist().\n4.4 break and continue Statements\nThebreakstatementbreaksoutoftheinnermostenclosingfororwhileloop:\n>>> for n in range(2, 10):\n... for x in range(2, n):\n... if n % x == 0:\n... print(f\"{n} equals {x} * {n//x}\")\n... break\n...\n4 equals 2 * 2\n6 equals 2 * 3\n8 equals 2 * 4\n9 equals 3 * 3\nThecontinuestatementcontinueswiththenextiterationoftheloop:\n>>> for num in range(2, 10):\n... if num % 2 == 0:\n... print(f\"Found an even number {num}\")\n... continue\n... print(f\"Found an odd number {num}\")\n...\nFound an even number 2\nFound an odd number 3\nFound an even number 4\nFound an odd number 5\nFound an even number 6\nFound an odd number 7\nFound an even number 8\nFound an odd number 9\n4.5 else Clauses on Loops\nIn a for or while loop the break statement may be paired with an else clause. If the loop finishes without\nexecutingthebreak,theelseclauseexecutes.\nInaforloop,theelseclauseisexecutedaftertheloopfinishesitsfinaliteration,thatis,ifnobreakoccurred.\nInawhileloop,it\u2019sexecutedaftertheloop\u2019sconditionbecomesfalse.\n4.4. breakandcontinueStatements 19\nPythonTutorial,Release3.13.3\nIneitherkindofloop,theelseclauseisnotexecutediftheloopwasterminatedbyabreak. Ofcourse,otherways\nofendingtheloopearly,suchasareturnoraraisedexception,willalsoskipexecutionoftheelseclause.\nThisisexemplifiedinthefollowingforloop,whichsearchesforprimenumbers:\n>>> for n in range(2, 10):\n... for x in range(2, n):\n... if n % x == 0:\n... print(n, 'equals', x, '*', n//x)\n... break\n... else:\n... # loop fell through without finding a factor\n... print(n, 'is a prime number')\n...\n2 is a prime number\n3 is a prime number\n4 equals 2 * 2\n5 is a prime number\n6 equals 2 * 3\n7 is a prime number\n8 equals 2 * 4\n9 equals 3 * 3\n(Yes,thisisthecorrectcode. Lookclosely: theelseclausebelongstotheforloop,nottheifstatement.)\nOnewaytothinkoftheelseclauseistoimagineitpairedwiththeifinsidetheloop. Astheloopexecutes,itwill\nrunasequencelikeif/if/if/else. Theifisinsidetheloop,encounteredanumberoftimes. Iftheconditionisever\ntrue,abreakwillhappen. Iftheconditionisnevertrue,theelseclauseoutsidetheloopwillexecute.\nWhenusedwithaloop,theelseclausehasmoreincommonwiththeelseclauseofatrystatementthanitdoes\nwiththatofifstatements: atrystatement\u2019selseclauserunswhennoexceptionoccurs,andaloop\u2019selseclause\nrunswhennobreakoccurs. Formoreonthetrystatementandexceptions,seeHandlingExceptions.\n4.6 pass Statements\nThepassstatementdoesnothing. Itcanbeusedwhenastatementisrequiredsyntacticallybuttheprogramrequires\nnoaction. Forexample:\n>>> while True:\n... pass # Busy-wait for keyboard interrupt (Ctrl+C)\n...\nThisiscommonlyusedforcreatingminimalclasses:\n>>> class MyEmptyClass:\n... pass\n...\nAnotherplacepasscanbeusedisasaplace-holderforafunctionorconditionalbodywhenyouareworkingonnew\ncode,allowingyoutokeepthinkingatamoreabstractlevel. Thepassissilentlyignored:\n>>> def initlog(*args):\n... pass # Remember to implement this!\n...\n20 Chapter4. MoreControlFlowTools\nPythonTutorial,Release3.13.3\n4.7 match Statements\nA match statement takes an expression and compares its value to successive patterns given as one or more case\nblocks. ThisissuperficiallysimilartoaswitchstatementinC,JavaorJavaScript(andmanyotherlanguages),butit\u2019s\nmoresimilartopatternmatchinginlanguageslikeRustorHaskell. Onlythefirstpatternthatmatchesgetsexecuted\nanditcanalsoextractcomponents(sequenceelementsorobjectattributes)fromthevalueintovariables.\nThesimplestformcomparesasubjectvalueagainstoneormoreliterals:\ndef http_error(status):\nmatch status:\ncase 400:\nreturn \"Bad request\"\ncase 404:\nreturn \"Not found\"\ncase 418:\nreturn \"I'm a teapot\"\ncase _:\nreturn \"Something's wrong with the internet\"\nNotethelastblock: the\u201cvariablename\u201d_actsasawildcard andneverfailstomatch. Ifnocasematches,noneof\nthebranchesisexecuted.\nYoucancombineseveralliteralsinasinglepatternusing|(\u201cor\u201d):\ncase 401 | 403 | 404:\nreturn \"Not allowed\"\nPatternscanlooklikeunpackingassignments,andcanbeusedtobindvariables:\n# point is an (x, y) tuple\nmatch point:\ncase (0, 0):\nprint(\"Origin\")\ncase (0, y):\nprint(f\"Y={y}\")\ncase (x, 0):\nprint(f\"X={x}\")\ncase (x, y):\nprint(f\"X={x}, Y={y}\")\ncase _:\nraise ValueError(\"Not a point\")\nStudythatonecarefully! Thefirstpatternhastwoliterals,andcanbethoughtofasanextensionoftheliteralpattern\nshownabove. Butthenexttwopatternscombinealiteralandavariable,andthevariablebindsavaluefromthesubject\n(point). Thefourthpatterncapturestwovalues,whichmakesitconceptuallysimilartotheunpackingassignment\n(x, y) = point.\nIfyouareusingclassestostructureyourdatayoucanusetheclassnamefollowedbyanargumentlistresemblinga\nconstructor,butwiththeabilitytocaptureattributesintovariables:\nclass Point:\ndef __init__(self, x, y):\nself.x = x\nself.y = y\ndef where_is(point):\nmatch point:\ncase Point(x=0, y=0):\n(continuesonnextpage)\n4.7. matchStatements 21\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nprint(\"Origin\")\ncase Point(x=0, y=y):\nprint(f\"Y={y}\")\ncase Point(x=x, y=0):\nprint(f\"X={x}\")\ncase Point():\nprint(\"Somewhere else\")\ncase _:\nprint(\"Not a point\")\nYoucanusepositionalparameterswithsomebuiltinclassesthatprovideanorderingfortheirattributes(e.g. data-\nclasses). Youcanalsodefineaspecificpositionforattributesinpatternsbysettingthe__match_args__special\nattributeinyourclasses. Ifit\u2019ssetto(\u201cx\u201d,\u201cy\u201d),thefollowingpatternsareallequivalent(andallbindtheyattribute\ntothevarvariable):\nPoint(1, var)\nPoint(1, y=var)\nPoint(x=1, y=var)\nPoint(y=var, x=1)\nArecommendedwaytoreadpatternsistolookatthemasanextendedformofwhatyouwouldputontheleftof\nanassignment,tounderstandwhichvariableswouldbesettowhat. Onlythestandalonenames(likevarabove)are\nassigned to by a match statement. Dotted names (like foo.bar), attribute names (the x= and y= above) or class\nnames(recognizedbythe\u201c(\u2026)\u201dnexttothemlikePointabove)areneverassignedto.\nPatternscanbearbitrarilynested. Forexample,ifwehaveashortlistofPoints,with__match_args__added,we\ncouldmatchitlikethis:\nclass Point:\n__match_args__ = ('x', 'y')\ndef __init__(self, x, y):\nself.x = x\nself.y = y\nmatch points:\ncase []:\nprint(\"No points\")\ncase [Point(0, 0)]:\nprint(\"The origin\")\ncase [Point(x, y)]:\nprint(f\"Single point {x}, {y}\")\ncase [Point(0, y1), Point(0, y2)]:\nprint(f\"Two on the Y axis at {y1}, {y2}\")\ncase _:\nprint(\"Something else\")\nWecanaddanifclausetoapattern,knownasa\u201cguard\u201d. Iftheguardisfalse,matchgoesontotrythenextcase\nblock. Notethatvaluecapturehappensbeforetheguardisevaluated:\nmatch point:\ncase Point(x, y) if x == y:\nprint(f\"Y=X at {x}\")\ncase Point(x, y):\nprint(f\"Not on the diagonal\")\nSeveralotherkeyfeaturesofthisstatement:\n\u2022 Likeunpackingassignments,tupleandlistpatternshaveexactlythesamemeaningandactuallymatcharbitrary\nsequences. Animportantexceptionisthattheydon\u2019tmatchiteratorsorstrings.\n22 Chapter4. MoreControlFlowTools\nPythonTutorial,Release3.13.3\n\u2022 Sequencepatternssupportextendedunpacking: [x, y, *rest]and(x, y, *rest)worksimilartoun-\npackingassignments. Thenameafter*mayalsobe_, so(x, y, *_)matchesasequenceofatleasttwo\nitemswithoutbindingtheremainingitems.\n\u2022 Mappingpatterns:{\"bandwidth\": b, \"latency\": l}capturesthe\"bandwidth\"and\"latency\"val-\nuesfromadictionary. Unlikesequencepatterns, extrakeysareignored. Anunpackinglike**restisalso\nsupported. (But**_wouldberedundant,soitisnotallowed.)\n\u2022 Subpatternsmaybecapturedusingtheaskeyword:\ncase (Point(x1, y1), Point(x2, y2) as p2): ...\nwillcapturethesecondelementoftheinputasp2(aslongastheinputisasequenceoftwopoints)\n\u2022 Most literals are compared by equality, however the singletons True, False and None are compared by\nidentity.\n\u2022 Patterns may use named constants. These must be dotted names to prevent them from being interpreted as\ncapturevariable:\nfrom enum import Enum\nclass Color(Enum):\nRED = 'red'\nGREEN = 'green'\nBLUE = 'blue'\ncolor = Color(input(\"Enter your choice of 'red', 'blue' or 'green': \"))\nmatch color:\ncase Color.RED:\nprint(\"I see red!\")\ncase Color.GREEN:\nprint(\"Grass is green\")\ncase Color.BLUE:\nprint(\"I'm feeling the blues :(\")\nForamoredetailedexplanationandadditionalexamples,youcanlookintoPEP636whichiswritteninatutorial\nformat.\n4.8 Defining Functions\nWecancreateafunctionthatwritestheFibonacciseriestoanarbitraryboundary:\n>>> def fib(n): # write Fibonacci series less than n\n... \"\"\"Print a Fibonacci series less than n.\"\"\"\n... a, b = 0, 1\n... while a < n:\n... print(a, end=' ')\n... a, b = b, a+b\n... print()\n...\n>>> # Now call the function we just defined:\n>>> fib(2000)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597\nThekeyworddefintroducesafunctiondefinition. Itmustbefollowedbythefunctionnameandtheparenthesizedlist\nofformalparameters. Thestatementsthatformthebodyofthefunctionstartatthenextline,andmustbeindented.\nThefirststatementofthefunctionbodycanoptionallybeastringliteral;thisstringliteralisthefunction\u2019sdocumen-\ntation string, or docstring. (More about docstrings can be found in the section Documentation Strings.) There are\n4.8. DefiningFunctions 23\nPythonTutorial,Release3.13.3\ntoolswhichusedocstringstoautomaticallyproduceonlineorprinteddocumentation,ortolettheuserinteractively\nbrowsethroughcode;it\u2019sgoodpracticetoincludedocstringsincodethatyouwrite,somakeahabitofit.\nTheexecutionofafunctionintroducesanewsymboltableusedforthelocalvariablesofthefunction. Moreprecisely,\nallvariableassignmentsinafunctionstorethevalueinthelocalsymboltable;whereasvariablereferencesfirstlook\ninthelocalsymboltable,theninthelocalsymboltablesofenclosingfunctions,thenintheglobalsymboltable,and\nfinallyinthetableofbuilt-innames. Thus,globalvariablesandvariablesofenclosingfunctionscannotbedirectly\nassigned a value within a function (unless, for global variables, named in a global statement, or, for variables of\nenclosingfunctions,namedinanonlocalstatement),althoughtheymaybereferenced.\nTheactualparameters(arguments)toafunctioncallareintroducedinthelocalsymboltableofthecalledfunction\nwhenitiscalled;thus,argumentsarepassedusingcallbyvalue(wherethevalueisalwaysanobjectreference,not\nthevalueoftheobject).1 Whenafunctioncallsanotherfunction,orcallsitselfrecursively,anewlocalsymboltable\niscreatedforthatcall.\nAfunctiondefinitionassociatesthefunctionnamewiththefunctionobjectinthecurrentsymboltable. Theinterpreter\nrecognizestheobjectpointedtobythatnameasauser-definedfunction. Othernamescanalsopointtothatsame\nfunctionobjectandcanalsobeusedtoaccessthefunction:\n>>> fib\n<function fib at 10042ed0>\n>>> f = fib\n>>> f(100)\n0 1 1 2 3 5 8 13 21 34 55 89\nComingfromotherlanguages,youmightobjectthatfibisnotafunctionbutaproceduresinceitdoesn\u2019treturna\nvalue. Infact,evenfunctionswithoutareturnstatementdoreturnavalue,albeitaratherboringone. Thisvalue\niscalledNone(it\u2019sabuilt-inname). WritingthevalueNoneisnormallysuppressedbytheinterpreterifitwouldbe\ntheonlyvaluewritten. Youcanseeitifyoureallywanttousingprint():\n>>> fib(0)\n>>> print(fib(0))\nNone\nItissimpletowriteafunctionthatreturnsalistofthenumbersoftheFibonacciseries,insteadofprintingit:\n>>> def fib2(n): # return Fibonacci series up to n\n... \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n... result = []\n... a, b = 0, 1\n... while a < n:\n... result.append(a) # see below\n... a, b = b, a+b\n... return result\n...\n>>> f100 = fib2(100) # call it\n>>> f100 # write the result\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\nThisexample,asusual,demonstratessomenewPythonfeatures:\n\u2022 Thereturnstatementreturnswithavaluefromafunction. returnwithoutanexpressionargumentreturns\nNone. FallingofftheendofafunctionalsoreturnsNone.\n\u2022 The statement result.append(a) calls a method of the list object result. A method is a function that\n\u2018belongs\u2019toanobjectandisnamedobj.methodname,whereobjissomeobject(thismaybeanexpression),\nandmethodnameisthenameofamethodthatisdefinedbytheobject\u2019stype. Differenttypesdefinedifferent\nmethods. Methodsofdifferenttypes mayhavethesamenamewithoutcausingambiguity. (Itispossibleto\ndefine your own object types and methods, using classes, see Classes) The method append() shown in the\n1Actually,callbyobjectreferencewouldbeabetterdescription,sinceifamutableobjectispassed,thecallerwillseeanychangesthecallee\nmakestoit(itemsinsertedintoalist).\n24 Chapter4. MoreControlFlowTools\nPythonTutorial,Release3.13.3\nexampleisdefinedforlistobjects;itaddsanewelementattheendofthelist. Inthisexampleitisequivalent\ntoresult = result + [a],butmoreefficient.\n4.9 More on Defining Functions\nIt is also possible to define functions with a variable number of arguments. There are three forms, which can be\ncombined.\n4.9.1 Default Argument Values\nThe most useful form is to specify a default value for one or more arguments. This creates a function that can be\ncalledwithfewerargumentsthanitisdefinedtoallow. Forexample:\ndef ask_ok(prompt, retries=4, reminder='Please try again!'):\nwhile True:\nreply = input(prompt)\nif reply in {'y', 'ye', 'yes'}:\nreturn True\nif reply in {'n', 'no', 'nop', 'nope'}:\nreturn False\nretries = retries - 1\nif retries < 0:\nraise ValueError('invalid user response')\nprint(reminder)\nThisfunctioncanbecalledinseveralways:\n\u2022 givingonlythemandatoryargument: ask_ok('Do you really want to quit?')\n\u2022 givingoneoftheoptionalarguments: ask_ok('OK to overwrite the file?', 2)\n\u2022 or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes\nor no!')\nThisexamplealsointroducestheinkeyword. Thistestswhetherornotasequencecontainsacertainvalue.\nThedefaultvaluesareevaluatedatthepointoffunctiondefinitioninthedefiningscope,sothat\ni = 5\ndef f(arg=i):\nprint(arg)\ni = 6\nf()\nwillprint5.\nImportantwarning: Thedefaultvalueisevaluatedonlyonce. Thismakesadifferencewhenthedefaultisamutable\nobjectsuchasalist, dictionary, orinstancesofmostclasses. Forexample, thefollowingfunctionaccumulatesthe\nargumentspassedtoitonsubsequentcalls:\ndef f(a, L=[]):\nL.append(a)\nreturn L\nprint(f(1))\nprint(f(2))\nprint(f(3))\nThiswillprint\n4.9. MoreonDefiningFunctions 25\nPythonTutorial,Release3.13.3\n[1]\n[1, 2]\n[1, 2, 3]\nIfyoudon\u2019twantthedefaulttobesharedbetweensubsequentcalls,youcanwritethefunctionlikethisinstead:\ndef f(a, L=None):\nif L is None:\nL = []\nL.append(a)\nreturn L\n4.9.2 Keyword Arguments\nFunctionscanalsobecalledusingkeywordargumentsoftheformkwarg=value. Forinstance,thefollowingfunc-\ntion:\ndef parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\nprint(\"-- This parrot wouldn't\", action, end=' ')\nprint(\"if you put\", voltage, \"volts through it.\")\nprint(\"-- Lovely plumage, the\", type)\nprint(\"-- It's\", state, \"!\")\nacceptsonerequiredargument(voltage)andthreeoptionalarguments(state,action,andtype). Thisfunction\ncanbecalledinanyofthefollowingways:\nparrot(1000) # 1 positional argument\nparrot(voltage=1000) # 1 keyword argument\nparrot(voltage=1000000, action='VOOOOOM') # 2 keyword arguments\nparrot(action='VOOOOOM', voltage=1000000) # 2 keyword arguments\nparrot('a million', 'bereft of life', 'jump') # 3 positional arguments\nparrot('a thousand', state='pushing up the daisies') # 1 positional, 1 keyword\nbutallthefollowingcallswouldbeinvalid:\nparrot() # required argument missing\nparrot(voltage=5.0, 'dead') # non-keyword argument after a keyword argument\nparrot(110, voltage=220) # duplicate value for the same argument\nparrot(actor='John Cleese') # unknown keyword argument\nIn a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must\nmatchoneoftheargumentsacceptedbythefunction(e.g. actorisnotavalidargumentfortheparrotfunction),\nandtheirorderisnotimportant. Thisalsoincludesnon-optionalarguments(e.g. parrot(voltage=1000)isvalid\ntoo). Noargumentmayreceiveavaluemorethanonce. Here\u2019sanexamplethatfailsduetothisrestriction:\n>>> def function(a):\n... pass\n...\n>>> function(0, a=0)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: function() got multiple values for argument 'a'\nWhenafinalformalparameteroftheform**nameispresent,itreceivesadictionary(seetypesmapping)containing\nallkeywordargumentsexceptforthosecorrespondingtoaformalparameter. Thismaybecombinedwithaformal\nparameter of the form *name (described in the next subsection) which receives a tuple containing the positional\narguments beyond the formal parameter list. (*name must occur before **name.) For example, if we define a\nfunctionlikethis:\n26 Chapter4. MoreControlFlowTools\nPythonTutorial,Release3.13.3\ndef cheeseshop(kind, *arguments, **keywords):\nprint(\"-- Do you have any\", kind, \"?\")\nprint(\"-- I'm sorry, we're all out of\", kind)\nfor arg in arguments:\nprint(arg)\nprint(\"-\" * 40)\nfor kw in keywords:\nprint(kw, \":\", keywords[kw])\nItcouldbecalledlikethis:\ncheeseshop(\"Limburger\", \"It's very runny, sir.\",\n\"It's really very, VERY runny, sir.\",\nshopkeeper=\"Michael Palin\",\nclient=\"John Cleese\",\nsketch=\"Cheese Shop Sketch\")\nandofcourseitwouldprint:\n-- Do you have any Limburger ?\n-- I'm sorry, we're all out of Limburger\nIt's very runny, sir.\nIt's really very, VERY runny, sir.\n----------------------------------------\nshopkeeper : Michael Palin\nclient : John Cleese\nsketch : Cheese Shop Sketch\nNotethattheorderinwhichthekeywordargumentsareprintedisguaranteedtomatchtheorderinwhichtheywere\nprovidedinthefunctioncall.\n4.9.3 Special parameters\nBydefault,argumentsmaybepassedtoaPythonfunctioneitherbypositionorexplicitlybykeyword. Forreadability\nandperformance,itmakessensetorestrictthewayargumentscanbepassedsothatadeveloperneedonlylookat\nthefunctiondefinitiontodetermineifitemsarepassedbyposition,bypositionorkeyword,orbykeyword.\nAfunctiondefinitionmaylooklike:\ndef f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n----------- ---------- ----------\n| | |\n| Positional or keyword |\n| - Keyword only\n-- Positional only\nwhere/and*areoptional. Ifused,thesesymbolsindicatethekindofparameterbyhowtheargumentsmaybepassed\ntothefunction: positional-only,positional-or-keyword,andkeyword-only. Keywordparametersarealsoreferredto\nasnamedparameters.\nPositional-or-KeywordArguments\nIf/and*arenotpresentinthefunctiondefinition,argumentsmaybepassedtoafunctionbypositionorbykeyword.\n4.9. MoreonDefiningFunctions 27\nPythonTutorial,Release3.13.3\nPositional-OnlyParameters\nLookingatthisinabitmoredetail,itispossibletomarkcertainparametersaspositional-only. Ifpositional-only,the\nparameters\u2019ordermatters,andtheparameterscannotbepassedbykeyword. Positional-onlyparametersareplaced\nbefore a / (forward-slash). The / is used to logically separate the positional-only parameters from the rest of the\nparameters. Ifthereisno/inthefunctiondefinition,therearenopositional-onlyparameters.\nParametersfollowingthe/maybepositional-or-keywordorkeyword-only.\nKeyword-OnlyArguments\nTomarkparametersaskeyword-only,indicatingtheparametersmustbepassedbykeywordargument,placean*in\ntheargumentslistjustbeforethefirstkeyword-onlyparameter.\nFunctionExamples\nConsiderthefollowingexamplefunctiondefinitionspayingcloseattentiontothemarkers/and*:\n>>> def standard_arg(arg):\n... print(arg)\n...\n>>> def pos_only_arg(arg, /):\n... print(arg)\n...\n>>> def kwd_only_arg(*, arg):\n... print(arg)\n...\n>>> def combined_example(pos_only, /, standard, *, kwd_only):\n... print(pos_only, standard, kwd_only)\nThefirstfunctiondefinition,standard_arg,themostfamiliarform,placesnorestrictionsonthecallingconvention\nandargumentsmaybepassedbypositionorkeyword:\n>>> standard_arg(2)\n2\n>>> standard_arg(arg=2)\n2\nThe second function pos_only_arg is restricted to only use positional parameters as there is a / in the function\ndefinition:\n>>> pos_only_arg(1)\n1\n>>> pos_only_arg(arg=1)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: pos_only_arg() got some positional-only arguments passed as keyword\u2423\n,\u2192arguments: 'arg'\nThethirdfunctionkwd_only_argonlyallowskeywordargumentsasindicatedbya*inthefunctiondefinition:\n>>> kwd_only_arg(3)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: kwd_only_arg() takes 0 positional arguments but 1 was given\n>>> kwd_only_arg(arg=3)\n3\n28 Chapter4. MoreControlFlowTools\nPythonTutorial,Release3.13.3\nAndthelastusesallthreecallingconventionsinthesamefunctiondefinition:\n>>> combined_example(1, 2, 3)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: combined_example() takes 2 positional arguments but 3 were given\n>>> combined_example(1, 2, kwd_only=3)\n1 2 3\n>>> combined_example(1, standard=2, kwd_only=3)\n1 2 3\n>>> combined_example(pos_only=1, standard=2, kwd_only=3)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: combined_example() got some positional-only arguments passed as keyword\u2423\n,\u2192arguments: 'pos_only'\nFinally,considerthisfunctiondefinitionwhichhasapotentialcollisionbetweenthepositionalargumentnameand\n**kwdswhichhasnameasakey:\ndef foo(name, **kwds):\nreturn 'name' in kwds\nThereisnopossiblecallthatwillmakeitreturnTrueasthekeyword'name'willalwaysbindtothefirstparameter.\nForexample:\n>>> foo(1, **{'name': 2})\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: foo() got multiple values for argument 'name'\n>>>\nButusing/(positionalonlyarguments),itispossiblesinceitallowsnameasapositionalargumentand'name'as\nakeyinthekeywordarguments:\n>>> def foo(name, /, **kwds):\n... return 'name' in kwds\n...\n>>> foo(1, **{'name': 2})\nTrue\nInotherwords,thenamesofpositional-onlyparameterscanbeusedin**kwdswithoutambiguity.\nRecap\nTheusecasewilldeterminewhichparameterstouseinthefunctiondefinition:\ndef f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\nAsguidance:\n\u2022 Usepositional-onlyifyouwantthenameoftheparameterstonotbeavailabletotheuser. Thisisusefulwhen\nparameternameshavenorealmeaning,ifyouwanttoenforcetheorderoftheargumentswhenthefunction\niscalledorifyouneedtotakesomepositionalparametersandarbitrarykeywords.\n\u2022 Use keyword-only when names have meaning and the function definition is more understandable by being\nexplicitwithnamesoryouwanttopreventusersrelyingonthepositionoftheargumentbeingpassed.\n4.9. MoreonDefiningFunctions 29\nPythonTutorial,Release3.13.3\n\u2022 ForanAPI,usepositional-onlytopreventbreakingAPIchangesiftheparameter\u2019snameismodifiedinthe\nfuture.\n4.9.4 Arbitrary Argument Lists\nFinally,theleastfrequentlyusedoptionistospecifythatafunctioncanbecalledwithanarbitrarynumberofargu-\nments. Theseargumentswillbewrappedupinatuple(seeTuplesandSequences). Beforethevariablenumberof\narguments,zeroormorenormalargumentsmayoccur.\ndef write_multiple_items(file, separator, *args):\nfile.write(separator.join(args))\nNormally,thesevariadicargumentswillbelastinthelistofformalparameters,becausetheyscoopupallremaining\ninputargumentsthatarepassedtothefunction. Anyformalparameterswhichoccurafterthe*argsparameterare\n\u2018keyword-only\u2019arguments,meaningthattheycanonlybeusedaskeywordsratherthanpositionalarguments.\n>>> def concat(*args, sep=\"/\"):\n... return sep.join(args)\n...\n>>> concat(\"earth\", \"mars\", \"venus\")\n'earth/mars/venus'\n>>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n'earth.mars.venus'\n4.9.5 Unpacking Argument Lists\nThereversesituationoccurswhentheargumentsarealreadyinalistortuplebutneedtobeunpackedforafunctioncall\nrequiringseparatepositionalarguments. Forinstance,thebuilt-inrange()functionexpectsseparatestartandstop\narguments. Iftheyarenotavailableseparately,writethefunctioncallwiththe*-operatortounpackthearguments\noutofalistortuple:\n>>> list(range(3, 6)) # normal call with separate arguments\n[3, 4, 5]\n>>> args = [3, 6]\n>>> list(range(*args)) # call with arguments unpacked from a list\n[3, 4, 5]\nInthesamefashion,dictionariescandeliverkeywordargumentswiththe**-operator:\n>>> def parrot(voltage, state='a stiff', action='voom'):\n... print(\"-- This parrot wouldn't\", action, end=' ')\n... print(\"if you put\", voltage, \"volts through it.\", end=' ')\n... print(\"E's\", state, \"!\")\n...\n>>> d = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"}\n>>> parrot(**d)\n-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin\n,\u2192' demised !\n4.9.6 Lambda Expressions\nSmall anonymous functions can be created with the lambda keyword. This function returns the sum of its two\narguments: lambda a, b: a+b. Lambda functions can be used wherever function objects are required. They\nare syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function\ndefinition. Likenestedfunctiondefinitions,lambdafunctionscanreferencevariablesfromthecontainingscope:\n>>> def make_incrementor(n):\n... return lambda x: x + n\n(continuesonnextpage)\n30 Chapter4. MoreControlFlowTools\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n...\n>>> f = make_incrementor(42)\n>>> f(0)\n42\n>>> f(1)\n43\nThe above example uses a lambda expression to return a function. Another use is to pass a small function as an\nargument:\n>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\n>>> pairs.sort(key=lambda pair: pair[1])\n>>> pairs\n[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]\n4.9.7 Documentation Strings\nHerearesomeconventionsaboutthecontentandformattingofdocumentationstrings.\nThefirstlineshouldalwaysbeashort,concisesummaryoftheobject\u2019spurpose. Forbrevity,itshouldnotexplicitly\nstatetheobject\u2019snameortype, sincetheseareavailablebyothermeans(exceptifthenamehappensto be a verb\ndescribingafunction\u2019soperation). Thislineshouldbeginwithacapitalletterandendwithaperiod.\nIftherearemorelinesinthedocumentationstring,thesecondlineshouldbeblank,visuallyseparatingthesummary\nfromtherestofthedescription. Thefollowinglinesshouldbeoneormoreparagraphsdescribingtheobject\u2019scalling\nconventions,itssideeffects,etc.\nThePythonparserdoesnotstripindentationfrommulti-linestringliteralsinPython,sotoolsthatprocessdocumen-\ntationhavetostripindentationifdesired. Thisisdoneusingthefollowingconvention. Thefirstnon-blanklineafter\nthefirstlineofthestringdeterminestheamountofindentationfortheentiredocumentationstring. (Wecan\u2019tuse\nthefirstlinesinceitisgenerallyadjacenttothestring\u2019sopeningquotessoitsindentationisnotapparentinthestring\nliteral.) Whitespace \u201cequivalent\u201d to this indentationis then stripped from the startof all lines of the string. Lines\nthatareindentedlessshouldnotoccur,butiftheyoccuralltheirleadingwhitespaceshouldbestripped. Equivalence\nofwhitespaceshouldbetestedafterexpansionoftabs(to8spaces,normally).\nHereisanexampleofamulti-linedocstring:\n>>> def my_function():\n... \"\"\"Do nothing, but document it.\n...\n... No, really, it doesn't do anything.\n... \"\"\"\n... pass\n...\n>>> print(my_function.__doc__)\nDo nothing, but document it.\nNo, really, it doesn't do anything.\n4.9.8 Function Annotations\nFunctionannotationsarecompletelyoptionalmetadatainformationaboutthetypesusedbyuser-definedfunctions\n(seePEP3107andPEP484formoreinformation).\nAnnotationsarestoredinthe__annotations__attributeofthefunctionasadictionaryandhavenoeffectonany\notherpartofthefunction. Parameterannotationsaredefinedbyacolonaftertheparametername,followedbyan\nexpressionevaluatingtothevalueoftheannotation. Returnannotationsaredefinedbyaliteral->,followedbyan\nexpression,betweentheparameterlistandthecolondenotingtheendofthedefstatement. Thefollowingexample\nhasarequiredargument,anoptionalargument,andthereturnvalueannotated:\n4.9. MoreonDefiningFunctions 31\nPythonTutorial,Release3.13.3\n>>> def f(ham: str, eggs: str = 'eggs') -> str:\n... print(\"Annotations:\", f.__annotations__)\n... print(\"Arguments:\", ham, eggs)\n... return ham + ' and ' + eggs\n...\n>>> f('spam')\nAnnotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}\nArguments: spam eggs\n'spam and eggs'\n4.10 Intermezzo: Coding Style\nNowthatyouareabouttowritelonger,morecomplexpiecesofPython,itisagoodtimetotalkaboutcodingstyle.\nMostlanguagescanbewritten(ormoreconcise,formatted)indifferentstyles;somearemorereadablethanothers.\nMakingiteasyforotherstoreadyourcodeisalwaysagoodidea,andadoptinganicecodingstylehelpstremendously\nforthat.\nFor Python, PEP 8 has emerged as the style guide that most projects adhere to; it promotes a very readable and\neye-pleasingcodingstyle. EveryPythondevelopershouldreaditatsomepoint;herearethemostimportantpoints\nextractedforyou:\n\u2022 Use4-spaceindentation,andnotabs.\n4spacesareagoodcompromisebetweensmallindentation(allowsgreaternestingdepth)andlargeindentation\n(easiertoread). Tabsintroduceconfusion,andarebestleftout.\n\u2022 Wraplinessothattheydon\u2019texceed79characters.\nThis helps users with small displays and makes it possible to have several code files side-by-side on larger\ndisplays.\n\u2022 Useblanklinestoseparatefunctionsandclasses,andlargerblocksofcodeinsidefunctions.\n\u2022 Whenpossible,putcommentsonalineoftheirown.\n\u2022 Usedocstrings.\n\u2022 Usespacesaroundoperatorsandaftercommas,butnotdirectlyinsidebracketingconstructs: a = f(1, 2)\n+ g(3, 4).\n\u2022 Name your classes and functions consistently; the convention is to use UpperCamelCase for classes and\nlowercase_with_underscores for functions and methods. Always use self as the name for the first\nmethodargument(seeAFirstLookatClassesformoreonclassesandmethods).\n\u2022 Don\u2019t use fancy encodings if your code is meant to be used in international environments. Python\u2019s default,\nUTF-8,orevenplainASCIIworkbestinanycase.\n\u2022 Likewise,don\u2019tusenon-ASCIIcharactersinidentifiersifthereisonlytheslightestchancepeoplespeakinga\ndifferentlanguagewillreadormaintainthecode.\n32 Chapter4. MoreControlFlowTools\nCHAPTER\nFIVE\nDATA STRUCTURES\nThischapterdescribessomethingsyou\u2019velearnedaboutalreadyinmoredetail,andaddssomenewthingsaswell.\n5.1 More on Lists\nThelistdatatypehassomemoremethods. Hereareallofthemethodsoflistobjects:\nlist.append(x)\nAddanitemtotheendofthelist. Similartoa[len(a):] = [x].\nlist.extend(iterable)\nExtendthelistbyappendingalltheitemsfromtheiterable. Similartoa[len(a):] = iterable.\nlist.insert(i,x)\nInsertanitematagivenposition. Thefirstargumentistheindexoftheelementbeforewhichtoinsert,soa.\ninsert(0, x)insertsatthefrontofthelist,anda.insert(len(a), x)isequivalenttoa.append(x).\nlist.remove(x)\nRemovethefirstitemfromthelistwhosevalueisequaltox. ItraisesaValueErrorifthereisnosuchitem.\n[ ]\nlist.pop( i )\nRemovetheitematthegivenpositioninthelist,andreturnit. Ifnoindexisspecified,a.pop()removesand\nreturns the last item in the list. It raises an IndexError if the list is empty or the index is outside the list\nrange.\nlist.clear()\nRemoveallitemsfromthelist. Similartodel a[:].\n[ [ ]]\nlist.index(x ,start ,end )\nReturnzero-basedindexinthelistofthefirstitemwhosevalueisequaltox. RaisesaValueErrorifthere\nisnosuchitem.\nTheoptionalargumentsstart andend areinterpretedasintheslicenotationandareusedtolimitthesearch\nto a particular subsequence of the list. The returned index is computed relative to the beginning of the full\nsequenceratherthanthestartargument.\nlist.count(x)\nReturnthenumberoftimesxappearsinthelist.\nlist.sort(*(Keyword-onlyparametersseparator(PEP3102)),key=None,reverse=False)\nSorttheitemsofthelistinplace(theargumentscanbeusedforsortcustomization,seesorted()fortheir\nexplanation).\nlist.reverse()\nReversetheelementsofthelistinplace.\n33\nPythonTutorial,Release3.13.3\nlist.copy()\nReturnashallowcopyofthelist. Similartoa[:].\nAnexamplethatusesmostofthelistmethods:\n>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']\n>>> fruits.count('apple')\n2\n>>> fruits.count('tangerine')\n0\n>>> fruits.index('banana')\n3\n>>> fruits.index('banana', 4) # Find next banana starting at position 4\n6\n>>> fruits.reverse()\n>>> fruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']\n>>> fruits.append('grape')\n>>> fruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']\n>>> fruits.sort()\n>>> fruits\n['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']\n>>> fruits.pop()\n'pear'\nYoumighthavenoticedthatmethodslikeinsert,removeorsortthatonlymodifythelisthavenoreturnvalue\nprinted\u2013theyreturnthedefaultNone.1 ThisisadesignprincipleforallmutabledatastructuresinPython.\nAnother thing you might notice is that not all data can be sorted or compared. For instance, [None, 'hello',\n10]doesn\u2019tsortbecauseintegerscan\u2019tbecomparedtostringsandNonecan\u2019tbecomparedtoothertypes. Also,there\naresometypesthatdon\u2019thaveadefinedorderingrelation. Forexample,3+4j < 5+7jisn\u2019tavalidcomparison.\n5.1.1 Using Lists as Stacks\nThelistmethodsmakeitveryeasytousealistasastack,wherethelastelementaddedisthefirstelementretrieved\n(\u201clast-in,first-out\u201d). Toaddanitemtothetopofthestack,useappend(). Toretrieveanitemfromthetopofthe\nstack,usepop()withoutanexplicitindex. Forexample:\n>>> stack = [3, 4, 5]\n>>> stack.append(6)\n>>> stack.append(7)\n>>> stack\n[3, 4, 5, 6, 7]\n>>> stack.pop()\n7\n>>> stack\n[3, 4, 5, 6]\n>>> stack.pop()\n6\n>>> stack.pop()\n5\n>>> stack\n[3, 4]\n1Otherlanguagesmayreturnthemutatedobject,whichallowsmethodchaining,suchasd->insert(\"a\")->remove(\"b\")->sort();.\n34 Chapter5. DataStructures\nPythonTutorial,Release3.13.3\n5.1.2 Using Lists as Queues\nItisalsopossibletousealistasaqueue,wherethefirstelementaddedisthefirstelementretrieved(\u201cfirst-in,first-\nout\u201d); however,listsarenotefficientforthispurpose. Whileappendsandpopsfromtheendoflistarefast,doing\ninsertsorpopsfromthebeginningofalistisslow(becausealloftheotherelementshavetobeshiftedbyone).\nTo implement a queue, use collections.deque which was designed to have fast appends and pops from both\nends. Forexample:\n>>> from collections import deque\n>>> queue = deque([\"Eric\", \"John\", \"Michael\"])\n>>> queue.append(\"Terry\") # Terry arrives\n>>> queue.append(\"Graham\") # Graham arrives\n>>> queue.popleft() # The first to arrive now leaves\n'Eric'\n>>> queue.popleft() # The second to arrive now leaves\n'John'\n>>> queue # Remaining queue in order of arrival\ndeque(['Michael', 'Terry', 'Graham'])\n5.1.3 List Comprehensions\nListcomprehensionsprovideaconcisewaytocreatelists. Commonapplicationsaretomakenewlistswhereeach\nelement is the result of some operations applied to each member of another sequence or iterable, or to create a\nsubsequenceofthoseelementsthatsatisfyacertaincondition.\nForexample,assumewewanttocreatealistofsquares,like:\n>>> squares = []\n>>> for x in range(10):\n... squares.append(x**2)\n...\n>>> squares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\nNotethatthiscreates(oroverwrites)avariablenamedxthatstillexistsaftertheloopcompletes. Wecancalculate\nthelistofsquareswithoutanysideeffectsusing:\nsquares = list(map(lambda x: x**2, range(10)))\nor,equivalently:\nsquares = [x**2 for x in range(10)]\nwhichismoreconciseandreadable.\nAlistcomprehensionconsistsofbracketscontaininganexpressionfollowedbyaforclause,thenzeroormorefor\norifclauses. Theresultwillbeanewlistresultingfromevaluatingtheexpressioninthecontextoftheforandif\nclauseswhichfollowit. Forexample,thislistcompcombinestheelementsoftwolistsiftheyarenotequal:\n>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\nandit\u2019sequivalentto:\n>>> combs = []\n>>> for x in [1,2,3]:\n... for y in [3,1,4]:\n... if x != y:\n... combs.append((x, y))\n(continuesonnextpage)\n5.1. MoreonLists 35\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n...\n>>> combs\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\nNotehowtheorderoftheforandifstatementsisthesameinboththesesnippets.\nIftheexpressionisatuple(e.g. the(x, y)inthepreviousexample),itmustbeparenthesized.\n>>> vec = [-4, -2, 0, 2, 4]\n>>> # create a new list with the values doubled\n>>> [x*2 for x in vec]\n[-8, -4, 0, 4, 8]\n>>> # filter the list to exclude negative numbers\n>>> [x for x in vec if x >= 0]\n[0, 2, 4]\n>>> # apply a function to all the elements\n>>> [abs(x) for x in vec]\n[4, 2, 0, 2, 4]\n>>> # call a method on each element\n>>> freshfruit = [' banana', ' loganberry ', 'passion fruit ']\n>>> [weapon.strip() for weapon in freshfruit]\n['banana', 'loganberry', 'passion fruit']\n>>> # create a list of 2-tuples like (number, square)\n>>> [(x, x**2) for x in range(6)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n>>> # the tuple must be parenthesized, otherwise an error is raised\n>>> [x, x**2 for x in range(6)]\nFile \"<stdin>\", line 1\n[x, x**2 for x in range(6)]\n^^^^^^^\nSyntaxError: did you forget parentheses around the comprehension target?\n>>> # flatten a list using a listcomp with two 'for'\n>>> vec = [[1,2,3], [4,5,6], [7,8,9]]\n>>> [num for elem in vec for num in elem]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nListcomprehensionscancontaincomplexexpressionsandnestedfunctions:\n>>> from math import pi\n>>> [str(round(pi, i)) for i in range(1, 6)]\n['3.1', '3.14', '3.142', '3.1416', '3.14159']\n5.1.4 Nested List Comprehensions\nTheinitialexpressioninalistcomprehensioncanbeanyarbitraryexpression,includinganotherlistcomprehension.\nConsiderthefollowingexampleofa3x4matriximplementedasalistof3listsoflength4:\n>>> matrix = [\n... [1, 2, 3, 4],\n... [5, 6, 7, 8],\n... [9, 10, 11, 12],\n... ]\nThefollowinglistcomprehensionwilltransposerowsandcolumns:\n>>> [[row[i] for row in matrix] for i in range(4)]\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n36 Chapter5. DataStructures\nPythonTutorial,Release3.13.3\nAswesawintheprevioussection,theinnerlistcomprehensionisevaluatedinthecontextoftheforthatfollowsit,\nsothisexampleisequivalentto:\n>>> transposed = []\n>>> for i in range(4):\n... transposed.append([row[i] for row in matrix])\n...\n>>> transposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\nwhich,inturn,isthesameas:\n>>> transposed = []\n>>> for i in range(4):\n... # the following 3 lines implement the nested listcomp\n... transposed_row = []\n... for row in matrix:\n... transposed_row.append(row[i])\n... transposed.append(transposed_row)\n...\n>>> transposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\nIntherealworld,youshouldpreferbuilt-infunctionstocomplexflowstatements. Thezip()functionwoulddoa\ngreatjobforthisusecase:\n>>> list(zip(*matrix))\n[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]\nSeeUnpackingArgumentListsfordetailsontheasteriskinthisline.\n5.2 The del statement\nThereisawaytoremoveanitemfromalistgivenitsindexinsteadofitsvalue: thedelstatement. Thisdiffersfrom\nthepop()methodwhichreturnsavalue. Thedelstatementcanalsobeusedtoremoveslicesfromalistorclear\ntheentirelist(whichwedidearlierbyassignmentofanemptylisttotheslice). Forexample:\n>>> a = [-1, 1, 66.25, 333, 333, 1234.5]\n>>> del a[0]\n>>> a\n[1, 66.25, 333, 333, 1234.5]\n>>> del a[2:4]\n>>> a\n[1, 66.25, 1234.5]\n>>> del a[:]\n>>> a\n[]\ndelcanalsobeusedtodeleteentirevariables:\n>>> del a\nReferencingthenameahereafterisanerror(atleastuntilanothervalueisassignedtoit). We\u2019llfindotherusesfor\ndellater.\n5.2. Thedelstatement 37\nPythonTutorial,Release3.13.3\n5.3 Tuples and Sequences\nWesawthatlistsandstringshavemanycommonproperties,suchasindexingandslicingoperations. Theyaretwo\nexamplesofsequencedatatypes(seetypesseq). SincePythonisanevolvinglanguage,othersequencedatatypesmay\nbeadded. Thereisalsoanotherstandardsequencedatatype: thetuple.\nAtupleconsistsofanumberofvaluesseparatedbycommas,forinstance:\n>>> t = 12345, 54321, 'hello!'\n>>> t[0]\n12345\n>>> t\n(12345, 54321, 'hello!')\n>>> # Tuples may be nested:\n>>> u = t, (1, 2, 3, 4, 5)\n>>> u\n((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))\n>>> # Tuples are immutable:\n>>> t[0] = 88888\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>> # but they can contain mutable objects:\n>>> v = ([1, 2, 3], [3, 2, 1])\n>>> v\n([1, 2, 3], [3, 2, 1])\nAsyousee,onoutputtuplesarealwaysenclosedinparentheses,sothatnestedtuplesareinterpretedcorrectly;they\nmaybeinputwithorwithoutsurroundingparentheses,althoughoftenparenthesesarenecessaryanyway(ifthetuple\nispartofalargerexpression). Itisnotpossibletoassigntotheindividualitemsofatuple,howeveritispossibleto\ncreatetupleswhichcontainmutableobjects,suchaslists.\nThoughtuplesmayseemsimilartolists,theyareoftenusedindifferentsituationsandfordifferentpurposes. Tuples\nareimmutable,andusuallycontainaheterogeneoussequenceofelementsthatareaccessedviaunpacking(seelater\ninthissection)orindexing(orevenbyattributeinthecaseofnamedtuples). Listsaremutable,andtheirelements\nareusuallyhomogeneousandareaccessedbyiteratingoverthelist.\nAspecialproblemistheconstructionoftuplescontaining0or1items: thesyntaxhassomeextraquirkstoaccom-\nmodatethese. Emptytuplesareconstructedbyanemptypairofparentheses; atuplewithoneitemisconstructed\nbyfollowingavaluewithacomma(itisnotsufficienttoencloseasinglevalueinparentheses). Ugly,buteffective.\nForexample:\n>>> empty = ()\n>>> singleton = 'hello', # <-- note trailing comma\n>>> len(empty)\n0\n>>> len(singleton)\n1\n>>> singleton\n('hello',)\nThe statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321 and\n'hello!'arepackedtogetherinatuple. Thereverseoperationisalsopossible:\n>>> x, y, z = t\nThisiscalled,appropriatelyenough,sequenceunpackingandworksforanysequenceontheright-handside. Sequence\nunpacking requires that there are as many variables on the left side of the equals sign as there are elements in the\nsequence. Notethatmultipleassignmentisreallyjustacombinationoftuplepackingandsequenceunpacking.\n38 Chapter5. DataStructures\nPythonTutorial,Release3.13.3\n5.4 Sets\nPython also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic uses\nincludemembershiptestingandeliminatingduplicateentries. Setobjectsalsosupportmathematicaloperationslike\nunion,intersection,difference,andsymmetricdifference.\nCurlybracesortheset()functioncanbeusedtocreatesets. Note: tocreateanemptysetyouhavetouseset(),\nnot{};thelattercreatesanemptydictionary,adatastructurethatwediscussinthenextsection.\nHereisabriefdemonstration:\n>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\n>>> print(basket) # show that duplicates have been removed\n{'orange', 'banana', 'pear', 'apple'}\n>>> 'orange' in basket # fast membership testing\nTrue\n>>> 'crabgrass' in basket\nFalse\n>>> # Demonstrate set operations on unique letters from two words\n>>>\n>>> a = set('abracadabra')\n>>> b = set('alacazam')\n>>> a # unique letters in a\n{'a', 'r', 'b', 'c', 'd'}\n>>> a - b # letters in a but not in b\n{'r', 'd', 'b'}\n>>> a | b # letters in a or b or both\n{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}\n>>> a & b # letters in both a and b\n{'a', 'c'}\n>>> a ^ b # letters in a or b but not both\n{'r', 'd', 'b', 'm', 'z', 'l'}\nSimilarlytolistcomprehensions,setcomprehensionsarealsosupported:\n>>> a = {x for x in 'abracadabra' if x not in 'abc'}\n>>> a\n{'r', 'd'}\n5.5 Dictionaries\nAnotherusefuldatatypebuiltintoPythonisthedictionary(seetypesmapping). Dictionariesaresometimesfound\ninotherlanguagesas\u201cassociativememories\u201dor\u201cassociativearrays\u201d. Unlikesequences,whichareindexedbyarange\nofnumbers,dictionariesareindexedbykeys,whichcanbeanyimmutabletype;stringsandnumberscanalwaysbe\nkeys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable\nobjecteitherdirectlyorindirectly,itcannotbeusedasakey. Youcan\u2019tuselistsaskeys,sincelistscanbemodified\ninplaceusingindexassignments,sliceassignments,ormethodslikeappend()andextend().\nItisbesttothinkofadictionaryasasetofkey: valuepairs,withtherequirementthatthekeysareunique(within\nonedictionary). Apairofbracescreatesanemptydictionary: {}. Placingacomma-separatedlistofkey:valuepairs\nwithinthebracesaddsinitialkey:valuepairstothedictionary;thisisalsothewaydictionariesarewrittenonoutput.\nThemainoperationsonadictionaryarestoringavaluewithsomekeyandextractingthevaluegiventhekey. Itisalso\npossibletodeleteakey:valuepairwithdel. Ifyoustoreusingakeythatisalreadyinuse,theoldvalueassociated\nwiththatkeyisforgotten. Itisanerrortoextractavalueusinganon-existentkey.\nPerforminglist(d)onadictionaryreturnsalistofallthekeysusedinthedictionary, ininsertionorder(ifyou\nwantitsorted,justusesorted(d)instead). Tocheckwhetherasinglekeyisinthedictionary,usetheinkeyword.\n5.4. Sets 39\nPythonTutorial,Release3.13.3\nHereisasmallexampleusingadictionary:\n>>> tel = {'jack': 4098, 'sape': 4139}\n>>> tel['guido'] = 4127\n>>> tel\n{'jack': 4098, 'sape': 4139, 'guido': 4127}\n>>> tel['jack']\n4098\n>>> del tel['sape']\n>>> tel['irv'] = 4127\n>>> tel\n{'jack': 4098, 'guido': 4127, 'irv': 4127}\n>>> list(tel)\n['jack', 'guido', 'irv']\n>>> sorted(tel)\n['guido', 'irv', 'jack']\n>>> 'guido' in tel\nTrue\n>>> 'jack' not in tel\nFalse\nThedict()constructorbuildsdictionariesdirectlyfromsequencesofkey-valuepairs:\n>>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\nInaddition,dictcomprehensionscanbeusedtocreatedictionariesfromarbitrarykeyandvalueexpressions:\n>>> {x: x**2 for x in (2, 4, 6)}\n{2: 4, 4: 16, 6: 36}\nWhenthekeysaresimplestrings,itissometimeseasiertospecifypairsusingkeywordarguments:\n>>> dict(sape=4139, guido=4127, jack=4098)\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\n5.6 Looping Techniques\nWhen looping through dictionaries, the key and corresponding value can be retrieved at the same time using the\nitems()method.\n>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}\n>>> for k, v in knights.items():\n... print(k, v)\n...\ngallahad the pure\nrobin the brave\nWhenloopingthroughasequence,thepositionindexandcorrespondingvaluecanberetrievedatthesametimeusing\ntheenumerate()function.\n>>> for i, v in enumerate(['tic', 'tac', 'toe']):\n... print(i, v)\n...\n0 tic\n1 tac\n2 toe\n40 Chapter5. DataStructures\nPythonTutorial,Release3.13.3\nToloopovertwoormoresequencesatthesametime,theentriescanbepairedwiththezip()function.\n>>> questions = ['name', 'quest', 'favorite color']\n>>> answers = ['lancelot', 'the holy grail', 'blue']\n>>> for q, a in zip(questions, answers):\n... print('What is your {0}? It is {1}.'.format(q, a))\n...\nWhat is your name? It is lancelot.\nWhat is your quest? It is the holy grail.\nWhat is your favorite color? It is blue.\nToloopoverasequenceinreverse,firstspecifythesequenceinaforwarddirectionandthencallthereversed()\nfunction.\n>>> for i in reversed(range(1, 10, 2)):\n... print(i)\n...\n9\n7\n5\n3\n1\nToloopoverasequenceinsortedorder, usethesorted()functionwhichreturnsanewsortedlistwhileleaving\nthesourceunaltered.\n>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\n>>> for i in sorted(basket):\n... print(i)\n...\napple\napple\nbanana\norange\norange\npear\nUsingset()onasequenceeliminatesduplicateelements. Theuseofsorted()incombinationwithset()over\nasequenceisanidiomaticwaytoloopoveruniqueelementsofthesequenceinsortedorder.\n>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\n>>> for f in sorted(set(basket)):\n... print(f)\n...\napple\nbanana\norange\npear\nItissometimestemptingtochangealistwhileyouareloopingoverit;however,itisoftensimplerandsafertocreate\nanewlistinstead.\n>>> import math\n>>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]\n>>> filtered_data = []\n>>> for value in raw_data:\n... if not math.isnan(value):\n... filtered_data.append(value)\n(continuesonnextpage)\n5.6. LoopingTechniques 41\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n...\n>>> filtered_data\n[56.2, 51.7, 55.3, 52.5, 47.8]\n5.7 More on Conditions\nTheconditionsusedinwhileandifstatementscancontainanyoperators,notjustcomparisons.\nThecomparisonoperatorsinandnot inaremembershipteststhatdeterminewhetheravalueisin(ornotin)a\ncontainer. Theoperatorsisandis notcomparewhethertwoobjectsarereallythesameobject. Allcomparison\noperatorshavethesamepriority,whichislowerthanthatofallnumericaloperators.\nComparisonscanbechained. Forexample,a < b == ctestswhetheraislessthanbandmoreoverbequalsc.\nComparisonsmaybecombinedusingtheBooleanoperatorsandandor,andtheoutcomeofacomparison(orof\nany other Boolean expression) may be negated with not. These have lower priorities than comparison operators;\nbetweenthem,nothasthehighestpriorityandorthelowest,sothatA and not B or Cisequivalentto(A and\n(not B)) or C.Asalways,parenthesescanbeusedtoexpressthedesiredcomposition.\nTheBooleanoperatorsandandorareso-calledshort-circuit operators: theirargumentsareevaluatedfromleftto\nright,andevaluationstopsassoonastheoutcomeisdetermined. Forexample,ifAandCaretruebutBisfalse,A\nand B and CdoesnotevaluatetheexpressionC.WhenusedasageneralvalueandnotasaBoolean, thereturn\nvalueofashort-circuitoperatoristhelastevaluatedargument.\nItispossibletoassigntheresultofacomparisonorotherBooleanexpressiontoavariable. Forexample,\n>>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'\n>>> non_null = string1 or string2 or string3\n>>> non_null\n'Trondheim'\nNotethatinPython, unlikeC,assignmentinsideexpressionsmustbedoneexplicitlywiththewalrusoperator:=.\nThisavoidsacommonclassofproblemsencounteredinCprograms:typing=inanexpressionwhen==wasintended.\n5.8 Comparing Sequences and Other Types\nSequence objects typically may be compared to other objects with the same sequence type. The comparison uses\nlexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of\nthecomparison; iftheyareequal, thenexttwoitemsarecompared, andsoon, untileithersequenceisexhausted.\nIftwoitemstobecomparedarethemselvessequencesofthesametype,thelexicographicalcomparisoniscarried\noutrecursively. Ifallitemsoftwosequencescompareequal,thesequencesareconsideredequal. Ifonesequence\nisaninitialsub-sequenceoftheother,theshortersequenceisthesmaller(lesser)one. Lexicographicalorderingfor\nstringsusestheUnicodecodepointnumbertoorderindividualcharacters. Someexamplesofcomparisonsbetween\nsequencesofthesametype:\n(1, 2, 3) < (1, 2, 4)\n[1, 2, 3] < [1, 2, 4]\n'ABC' < 'C' < 'Pascal' < 'Python'\n(1, 2, 3, 4) < (1, 2, 4)\n(1, 2) < (1, 2, -1)\n(1, 2, 3) == (1.0, 2.0, 3.0)\n(1, 2, ('aa', 'ab')) < (1, 2, ('abc', 'a'), 4)\nNotethatcomparingobjectsofdifferenttypeswith<or>islegalprovidedthattheobjectshaveappropriatecom-\nparisonmethods. Forexample,mixednumerictypesarecomparedaccordingtotheirnumericvalue,so0equals0.0,\netc. Otherwise,ratherthanprovidinganarbitraryordering,theinterpreterwillraiseaTypeErrorexception.\n42 Chapter5. DataStructures\nCHAPTER\nSIX\nMODULES\nIf you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables)\narelost. Therefore,ifyouwanttowriteasomewhatlongerprogram,youarebetteroffusingatexteditortoprepare\ntheinputfortheinterpreterandrunningitwiththatfileasinputinstead. Thisisknownascreatingascript. Asyour\nprogramgetslonger,youmaywanttosplititintoseveralfilesforeasiermaintenance. Youmayalsowanttousea\nhandyfunctionthatyou\u2019vewritteninseveralprogramswithoutcopyingitsdefinitionintoeachprogram.\nTo support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance\noftheinterpreter. Suchafileiscalledamodule; definitionsfromamodulecanbeimported intoothermodulesor\nintothemainmodule(thecollectionofvariablesthatyouhaveaccesstoinascriptexecutedatthetoplevelandin\ncalculatormode).\nAmoduleisafilecontainingPythondefinitionsandstatements. Thefilenameisthemodulenamewiththesuffix\n.py appended. Within a module, the module\u2019s name (as a string) is available as the value of the global variable\n__name__. Forinstance,useyourfavoritetexteditortocreateafilecalledfibo.pyinthecurrentdirectorywith\nthefollowingcontents:\n# Fibonacci numbers module\ndef fib(n): # write Fibonacci series up to n\na, b = 0, 1\nwhile a < n:\nprint(a, end=' ')\na, b = b, a+b\nprint()\ndef fib2(n): # return Fibonacci series up to n\nresult = []\na, b = 0, 1\nwhile a < n:\nresult.append(a)\na, b = b, a+b\nreturn result\nNowenterthePythoninterpreterandimportthismodulewiththefollowingcommand:\n>>> import fibo\nThisdoesnotaddthenamesofthefunctionsdefinedinfibodirectlytothecurrentnamespace(seePythonScopes\nandNamespacesformoredetails);itonlyaddsthemodulenamefibothere. Usingthemodulenameyoucanaccess\nthefunctions:\n>>> fibo.fib(1000)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n>>> fibo.fib2(100)\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n(continuesonnextpage)\n43\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n>>> fibo.__name__\n'fibo'\nIfyouintendtouseafunctionoftenyoucanassignittoalocalname:\n>>> fib = fibo.fib\n>>> fib(500)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\n6.1 More on Modules\nAmodulecancontainexecutablestatementsaswellasfunctiondefinitions. Thesestatementsareintendedtoinitialize\nthemodule. Theyareexecutedonlythefirst timethemodulenameisencounteredinanimportstatement.1 (They\narealsorunifthefileisexecutedasascript.)\nEachmodulehasitsownprivatenamespace,whichisusedastheglobalnamespacebyallfunctionsdefinedinthe\nmodule. Thus, the author of a module can use global variables in the module without worrying about accidental\nclasheswithauser\u2019sglobalvariables. Ontheotherhand,ifyouknowwhatyouaredoingyoucantouchamodule\u2019s\nglobalvariableswiththesamenotationusedtorefertoitsfunctions,modname.itemname.\nModulescanimportothermodules. Itiscustomarybutnotrequiredtoplaceallimportstatementsatthebeginning\nofamodule(orscript,forthatmatter). Theimportedmodulenames,ifplacedatthetoplevelofamodule(outside\nanyfunctionsorclasses),areaddedtothemodule\u2019sglobalnamespace.\nThereisavariantoftheimportstatementthatimportsnamesfromamoduledirectlyintotheimportingmodule\u2019s\nnamespace. Forexample:\n>>> from fibo import fib, fib2\n>>> fib(500)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\nThisdoesnotintroducethemodulenamefromwhichtheimportsaretakeninthelocalnamespace(sointheexample,\nfiboisnotdefined).\nThereisevenavarianttoimportallnamesthatamoduledefines:\n>>> from fibo import *\n>>> fib(500)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\nThisimportsallnamesexceptthosebeginningwithanunderscore(_). InmostcasesPythonprogrammersdonot\nuse this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you\nhavealreadydefined.\nNote that in general the practice of importing * from a module or package is frowned upon, since it often causes\npoorlyreadablecode. However,itisokaytouseittosavetypingininteractivesessions.\nIfthemodulenameisfollowedbyas,thenthenamefollowingasisbounddirectlytotheimportedmodule.\n>>> import fibo as fib\n>>> fib.fib(500)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\nThisiseffectivelyimportingthemoduleinthesamewaythatimport fibowilldo,withtheonlydifferenceofit\nbeingavailableasfib.\nItcanalsobeusedwhenutilisingfromwithsimilareffects:\n1Infactfunctiondefinitionsarealso\u2018statements\u2019thatare\u2018executed\u2019;theexecutionofamodule-levelfunctiondefinitionaddsthefunctionname\ntothemodule\u2019sglobalnamespace.\n44 Chapter6. Modules\nPythonTutorial,Release3.13.3\n>>> from fibo import fib as fibonacci\n>>> fibonacci(500)\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\n(cid:174) Note\nFor efficiency reasons, each module is only imported once per interpreter session. Therefore, if you change\nyour modules, you must restart the interpreter \u2013 or, if it\u2019s just one module you want to test interactively, use\nimportlib.reload(),e.g. import importlib; importlib.reload(modulename).\n6.1.1 Executing modules as scripts\nWhenyourunaPythonmodulewith\npython fibo.py <arguments>\nthecodeinthemodulewillbeexecuted,justasifyouimportedit,butwiththe__name__setto\"__main__\". That\nmeansthatbyaddingthiscodeattheendofyourmodule:\nif __name__ == \"__main__\":\nimport sys\nfib(int(sys.argv[1]))\nyoucanmakethefileusableasascriptaswellasanimportablemodule,becausethecodethatparsesthecommand\nlineonlyrunsifthemoduleisexecutedasthe\u201cmain\u201dfile:\n$ python fibo.py 50\n0 1 1 2 3 5 8 13 21 34\nIfthemoduleisimported,thecodeisnotrun:\n>>> import fibo\n>>>\nThis is often used either to provide a convenient user interface to a module, or for testing purposes (running the\nmoduleasascriptexecutesatestsuite).\n6.1.2 The Module Search Path\nWhenamodulenamedspamisimported,theinterpreterfirstsearchesforabuilt-inmodulewiththatname. These\nmodulenamesarelistedinsys.builtin_module_names. Ifnotfound,itthensearchesforafilenamedspam.py\ninalistofdirectoriesgivenbythevariablesys.path. sys.pathisinitializedfromtheselocations:\n\u2022 Thedirectorycontainingtheinputscript(orthecurrentdirectorywhennofileisspecified).\n\u2022 PYTHONPATH(alistofdirectorynames,withthesamesyntaxastheshellvariablePATH).\n\u2022 Theinstallation-dependentdefault(byconventionincludingasite-packagesdirectory,handledbythesite\nmodule).\nMoredetailsareatsys-path-init.\n(cid:174) Note\nOnfilesystemswhichsupportsymlinks,thedirectorycontainingtheinputscriptiscalculatedafterthesymlink\nisfollowed. Inotherwordsthedirectorycontainingthesymlinkisnotaddedtothemodulesearchpath.\n6.1. MoreonModules 45\nPythonTutorial,Release3.13.3\nAfterinitialization,Pythonprogramscanmodifysys.path. Thedirectorycontainingthescriptbeingrunisplaced\natthebeginningofthesearchpath,aheadofthestandardlibrarypath. Thismeansthatscriptsinthatdirectorywill\nbeloadedinsteadofmodulesofthesamenameinthelibrarydirectory. Thisisanerrorunlessthereplacementis\nintended. SeesectionStandardModulesformoreinformation.\n6.1.3 \u201cCompiled\u201d Python files\nTospeeduploadingmodules,Pythoncachesthecompiledversionofeachmoduleinthe__pycache__directory\nunder the name module.version.pyc, where the version encodes the format of the compiled file; it generally\ncontainsthePythonversionnumber. Forexample,inCPythonrelease3.3thecompiledversionofspam.pywould\nbe cached as __pycache__/spam.cpython-33.pyc. This naming convention allows compiled modules from\ndifferentreleasesanddifferentversionsofPythontocoexist.\nPythonchecksthemodificationdateofthesourceagainstthecompiledversiontoseeifit\u2019soutofdateandneeds\ntoberecompiled. Thisisacompletelyautomaticprocess. Also,thecompiledmodulesareplatform-independent,so\nthesamelibrarycanbesharedamongsystemswithdifferentarchitectures.\nPythondoesnotcheckthecacheintwocircumstances. First,italwaysrecompilesanddoesnotstoretheresultfor\nthemodulethat\u2019sloadeddirectlyfromthecommandline. Second,itdoesnotcheckthecacheifthereisnosource\nmodule. Tosupportanon-source(compiledonly)distribution,thecompiledmodulemustbeinthesourcedirectory,\nandtheremustnotbeasourcemodule.\nSometipsforexperts:\n\u2022 Youcanusethe-Oor-OOswitchesonthePythoncommandtoreducethesizeofacompiledmodule. The-O\nswitchremovesassertstatements,the-OOswitchremovesbothassertstatementsand__doc__strings. Since\nsomeprogramsmayrelyonhavingtheseavailable,youshouldonlyusethisoptionifyouknowwhatyou\u2019re\ndoing. \u201cOptimized\u201dmoduleshaveanopt-tagandareusuallysmaller. Futurereleasesmaychangetheeffects\nofoptimization.\n\u2022 Aprogramdoesn\u2019trunanyfasterwhenitisreadfroma.pycfilethanwhenitisreadfroma.pyfile;theonly\nthingthat\u2019sfasterabout.pycfilesisthespeedwithwhichtheyareloaded.\n\u2022 Themodulecompileallcancreate.pycfilesforallmodulesinadirectory.\n\u2022 Thereismoredetailonthisprocess,includingaflowchartofthedecisions,inPEP3147.\n6.2 Standard Modules\nPythoncomeswithalibraryofstandardmodules,describedinaseparatedocument,thePythonLibraryReference\n(\u201cLibrary Reference\u201d hereafter). Some modules are built into the interpreter; these provide access to operations\nthatarenotpartofthecoreofthelanguagebutareneverthelessbuiltin, eitherforefficiencyortoprovideaccess\nto operating system primitives such as system calls. The set of such modules is a configuration option which also\ndependsontheunderlyingplatform. Forexample,thewinregmoduleisonlyprovidedonWindowssystems. One\nparticularmoduledeservessomeattention: sys,whichisbuiltintoeveryPythoninterpreter. Thevariablessys.ps1\nandsys.ps2definethestringsusedasprimaryandsecondaryprompts:\n>>> import sys\n>>> sys.ps1\n'>>> '\n>>> sys.ps2\n'... '\n>>> sys.ps1 = 'C> '\nC> print('Yuck!')\nYuck!\nC>\nThesetwovariablesareonlydefinediftheinterpreterisininteractivemode.\nThevariablesys.pathisalistofstringsthatdeterminestheinterpreter\u2019ssearchpathformodules. Itisinitialized\ntoadefaultpathtakenfromtheenvironmentvariablePYTHONPATH,orfromabuilt-indefaultifPYTHONPATHisnot\nset. Youcanmodifyitusingstandardlistoperations:\n46 Chapter6. Modules\nPythonTutorial,Release3.13.3\n>>> import sys\n>>> sys.path.append('/ufs/guido/lib/python')\n6.3 The dir() Function\nThebuilt-infunctiondir()isusedtofindoutwhichnamesamoduledefines. Itreturnsasortedlistofstrings:\n>>> import fibo, sys\n>>> dir(fibo)\n['__name__', 'fib', 'fib2']\n>>> dir(sys)\n['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__',\n'__interactivehook__', '__loader__', '__name__', '__package__', '__spec__',\n'__stderr__', '__stdin__', '__stdout__', '__unraisablehook__',\n'_clear_type_cache', '_current_frames', '_debugmallocstats', '_framework',\n'_getframe', '_git', '_home', '_xoptions', 'abiflags', 'addaudithook',\n'api_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix',\n'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing',\n'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info',\n'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info',\n'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth',\n'getallocatedblocks', 'getdefaultencoding', 'getdlopenflags',\n'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile',\n'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval',\n'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',\n'intern', 'is_finalizing', 'last_traceback', 'last_type', 'last_value',\n'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks',\n'path_importer_cache', 'platform', 'prefix', 'ps1', 'ps2', 'pycache_prefix',\n'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setdlopenflags',\n'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr',\n'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info',\n'warnoptions']\nWithoutarguments,dir()liststhenamesyouhavedefinedcurrently:\n>>> a = [1, 2, 3, 4, 5]\n>>> import fibo\n>>> fib = fibo.fib\n>>> dir()\n['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']\nNotethatitlistsalltypesofnames: variables,modules,functions,etc.\ndir()doesnotlistthenamesofbuilt-infunctionsandvariables. Ifyouwantalistofthose,theyaredefinedinthe\nstandardmodulebuiltins:\n>>> import builtins\n>>> dir(builtins)\n['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',\n'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',\n'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',\n'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',\n'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',\n'FileExistsError', 'FileNotFoundError', 'FloatingPointError',\n'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',\n'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',\n'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\n(continuesonnextpage)\n6.3. Thedir()Function 47\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',\n'NotImplementedError', 'OSError', 'OverflowError',\n'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',\n'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',\n'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',\n'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',\n'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',\n'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',\n'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',\n'__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',\n'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',\n'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',\n'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',\n'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',\n'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',\n'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',\n'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',\n'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',\n'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',\n'zip']\n6.4 Packages\nPackagesareawayofstructuringPython\u2019smodulenamespacebyusing\u201cdottedmodulenames\u201d. Forexample,the\nmodule name A.B designates a submodule named B in a package named A. Just like the use of modules saves the\nauthorsofdifferentmodulesfromhavingtoworryabouteachother\u2019sglobalvariablenames,theuseofdottedmodule\nnamessavestheauthorsofmulti-modulepackageslikeNumPyorPillowfromhavingtoworryabouteachother\u2019s\nmodulenames.\nSupposeyouwanttodesignacollectionofmodules(a\u201cpackage\u201d)fortheuniformhandlingofsoundfilesandsound\ndata. There are many different sound file formats (usually recognized by their extension, for example: .wav, .\naiff, .au), so you may need to create and maintain a growing collection of modules for the conversion between\nthevariousfileformats. Therearealsomanydifferentoperationsyoumightwanttoperformonsounddata(suchas\nmixing, addingecho, applyingan equalizerfunction, creatingan artificialstereoeffect), so inadditionyouwillbe\nwritinganever-endingstreamofmodulestoperformtheseoperations. Here\u2019sapossiblestructureforyourpackage\n(expressedintermsofahierarchicalfilesystem):\nsound/ Top-level package\n__init__.py Initialize the sound package\nformats/ Subpackage for file format conversions\n__init__.py\nwavread.py\nwavwrite.py\naiffread.py\naiffwrite.py\nauread.py\nauwrite.py\n...\neffects/ Subpackage for sound effects\n__init__.py\necho.py\nsurround.py\nreverse.py\n...\nfilters/ Subpackage for filters\n__init__.py\n(continuesonnextpage)\n48 Chapter6. Modules\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nequalizer.py\nvocoder.py\nkaraoke.py\n...\nWhenimportingthepackage,Pythonsearchesthroughthedirectoriesonsys.pathlookingforthepackagesubdi-\nrectory.\nThe __init__.py files are required to make Python treat directories containing the file as packages (unless us-\ning a namespace package, a relatively advanced feature). This prevents directories with a common name, such as\nstring,fromunintentionallyhidingvalidmodulesthatoccurlateronthemodulesearchpath. Inthesimplestcase,\n__init__.pycanjustbeanemptyfile,butitcanalsoexecuteinitializationcodeforthepackageorsetthe__all__\nvariable,describedlater.\nUsersofthepackagecanimportindividualmodulesfromthepackage,forexample:\nimport sound.effects.echo\nThisloadsthesubmodulesound.effects.echo. Itmustbereferencedwithitsfullname.\nsound.effects.echo.echofilter(input, output, delay=0.7, atten=4)\nAnalternativewayofimportingthesubmoduleis:\nfrom sound.effects import echo\nThisalsoloadsthesubmoduleecho,andmakesitavailablewithoutitspackageprefix,soitcanbeusedasfollows:\necho.echofilter(input, output, delay=0.7, atten=4)\nYetanothervariationistoimportthedesiredfunctionorvariabledirectly:\nfrom sound.effects.echo import echofilter\nAgain,thisloadsthesubmoduleecho,butthismakesitsfunctionechofilter()directlyavailable:\nechofilter(input, output, delay=0.7, atten=4)\nNotethatwhenusingfrom package import item,theitemcanbeeitherasubmodule(orsubpackage)ofthe\npackage,orsomeothernamedefinedinthepackage,likeafunction,classorvariable. Theimportstatementfirst\ntestswhethertheitemisdefinedinthepackage;ifnot,itassumesitisamoduleandattemptstoloadit. Ifitfailsto\nfindit,anImportErrorexceptionisraised.\nContrarily,whenusingsyntaxlikeimport item.subitem.subsubitem,eachitemexceptforthelastmustbea\npackage;thelastitemcanbeamoduleorapackagebutcan\u2019tbeaclassorfunctionorvariabledefinedintheprevious\nitem.\n6.4.1 Importing * From a Package\nNow what happens when the user writes from sound.effects import *? Ideally, one would hope that this\nsomehowgoesouttothefilesystem,findswhichsubmodulesarepresentinthepackage,andimportsthemall. This\ncouldtakealongtimeandimportingsub-modulesmighthaveunwantedside-effectsthatshouldonlyhappenwhen\nthesub-moduleisexplicitlyimported.\nTheonlysolutionisforthepackageauthortoprovideanexplicitindexofthepackage. Theimportstatementuses\nthefollowingconvention: ifapackage\u2019s__init__.pycodedefinesalistnamed__all__,itistakentobethelist\nofmodulenamesthatshouldbeimportedwhenfrom package import *isencountered. Itisuptothepackage\nauthortokeepthislistup-to-datewhenanewversionofthepackageisreleased. Packageauthorsmayalsodecide\nnottosupportit,iftheydon\u2019tseeauseforimporting*fromtheirpackage. Forexample,thefilesound/effects/\n__init__.pycouldcontainthefollowingcode:\n6.4. Packages 49\nPythonTutorial,Release3.13.3\n__all__ = [\"echo\", \"surround\", \"reverse\"]\nThis would mean that from sound.effects import * would import the three named submodules of the\nsound.effectspackage.\nBeawarethatsubmodulesmightbecomeshadowedbylocallydefinednames. Forexample,ifyouaddedareverse\nfunctiontothesound/effects/__init__.pyfile,thefrom sound.effects import *wouldonlyimport\nthetwosubmodulesechoandsurround, butnot thereversesubmodule, becauseitisshadowedbythelocally\ndefinedreversefunction:\n__all__ = [\n\"echo\", # refers to the 'echo.py' file\n\"surround\", # refers to the 'surround.py' file\n\"reverse\", # !!! refers to the 'reverse' function now !!!\n]\ndef reverse(msg: str): # <-- this name shadows the 'reverse.py' submodule\nreturn msg[::-1] # in the case of a 'from sound.effects import *'\nIf__all__isnotdefined,thestatementfrom sound.effects import *doesnotimportallsubmodulesfrom\nthe package sound.effects into the current namespace; it only ensures that the package sound.effects has\nbeen imported (possibly running any initialization code in __init__.py) and then imports whatever names are\ndefinedinthepackage. Thisincludesanynamesdefined(andsubmodulesexplicitlyloaded)by__init__.py. It\nalsoincludesanysubmodulesofthepackagethatwereexplicitlyloadedbypreviousimportstatements. Consider\nthiscode:\nimport sound.effects.echo\nimport sound.effects.surround\nfrom sound.effects import *\nInthisexample,theechoandsurroundmodulesareimportedinthecurrentnamespacebecausetheyaredefinedin\nthesound.effectspackagewhenthefrom...importstatementisexecuted. (Thisalsoworkswhen__all__\nisdefined.)\nAlthoughcertainmodulesaredesignedtoexportonlynamesthatfollowcertainpatternswhenyouuseimport *,\nitisstillconsideredbadpracticeinproductioncode.\nRemember, thereisnothingwrongwithusingfrom package import specific_submodule! Infact, thisis\ntherecommendednotationunlesstheimportingmoduleneedstousesubmoduleswiththesamenamefromdifferent\npackages.\n6.4.2 Intra-package References\nWhenpackagesarestructuredintosubpackages(aswiththesoundpackageintheexample),youcanuseabsolute\nimportstorefertosubmodulesofsiblingspackages. Forexample,ifthemodulesound.filters.vocoderneeds\ntousetheechomoduleinthesound.effectspackage,itcanusefrom sound.effects import echo.\nYoucanalsowriterelativeimports,withthefrom module import nameformofimportstatement. Theseim-\nportsuseleadingdotstoindicatethecurrentandparentpackagesinvolvedintherelativeimport. Fromthesurround\nmoduleforexample,youmightuse:\nfrom . import echo\nfrom .. import formats\nfrom ..filters import equalizer\nNote that relative imports are based on the name of the current module. Since the name of the main module is\nalways\"__main__\",modulesintendedforuseasthemainmoduleofaPythonapplicationmustalwaysuseabsolute\nimports.\n50 Chapter6. Modules\nPythonTutorial,Release3.13.3\n6.4.3 Packages in Multiple Directories\nPackagessupportonemorespecialattribute,__path__. Thisisinitializedtobeasequenceofstringscontainingthe\nnameofthedirectoryholdingthepackage\u2019s__init__.pybeforethecodeinthatfileisexecuted. Thisvariablecan\nbemodified;doingsoaffectsfuturesearchesformodulesandsubpackagescontainedinthepackage.\nWhilethisfeatureisnotoftenneeded,itcanbeusedtoextendthesetofmodulesfoundinapackage.\n6.4. Packages 51\nPythonTutorial,Release3.13.3\n52 Chapter6. Modules\nCHAPTER\nSEVEN\nINPUT AND OUTPUT\nThereareseveralwaystopresenttheoutputofaprogram;datacanbeprintedinahuman-readableform,orwritten\ntoafileforfutureuse. Thischapterwilldiscusssomeofthepossibilities.\n7.1 Fancier Output Formatting\nSofarwe\u2019veencounteredtwowaysofwritingvalues: expressionstatementsandtheprint()function. (Athirdway\nis using the write() method of file objects; the standard output file can be referenced as sys.stdout. See the\nLibraryReferenceformoreinformationonthis.)\nOftenyou\u2019llwantmorecontrolovertheformattingofyouroutputthansimplyprintingspace-separatedvalues. There\nareseveralwaystoformatoutput.\n\u2022 Touseformattedstringliterals,beginastringwithforFbeforetheopeningquotationmarkortriplequotation\nmark. Inside this string, you can write a Python expression between { and } characters that can refer to\nvariablesorliteralvalues.\n>>> year = 2016\n>>> event = 'Referendum'\n>>> f'Results of the {year} {event}'\n'Results of the 2016 Referendum'\n\u2022 Thestr.format()methodofstringsrequiresmoremanualeffort. You\u2019llstilluse{and}tomarkwherea\nvariablewillbesubstitutedandcanprovidedetailedformattingdirectives,butyou\u2019llalsoneedtoprovidethe\ninformationtobeformatted. Inthefollowingcodeblocktherearetwoexamplesofhowtoformatvariables:\n>>> yes_votes = 42_572_654\n>>> total_votes = 85_705_149\n>>> percentage = yes_votes / total_votes\n>>> '{:-9} YES votes {:2.2%}'.format(yes_votes, percentage)\n' 42572654 YES votes 49.67%'\nNotice how the yes_votes are padded with spaces and a negative sign only for negative numbers. The\nexamplealsoprintspercentagemultipliedby100,with2decimalplacesandfollowedbyapercentsign(see\nformatspecfordetails).\n\u2022 Finally,youcandoallthestringhandlingyourselfbyusingstringslicingandconcatenationoperationstocreate\nany layout you can imagine. The string type has some methods that perform useful operations for padding\nstringstoagivencolumnwidth.\nWhenyoudon\u2019tneedfancyoutputbutjustwantaquickdisplayofsomevariablesfordebuggingpurposes,youcan\nconvertanyvaluetoastringwiththerepr()orstr()functions.\nThe str() function is meant to return representations of values which are fairly human-readable, while repr()\nismeanttogeneraterepresentationswhichcanbereadbytheinterpreter(orwillforceaSyntaxErrorifthereis\nnoequivalentsyntax). Forobjectswhichdon\u2019thaveaparticularrepresentationforhumanconsumption,str()will\nreturnthesamevalueasrepr(). Manyvalues, suchasnumbersorstructureslikelistsanddictionaries, havethe\nsamerepresentationusingeitherfunction. Strings,inparticular,havetwodistinctrepresentations.\n53\nPythonTutorial,Release3.13.3\nSomeexamples:\n>>> s = 'Hello, world.'\n>>> str(s)\n'Hello, world.'\n>>> repr(s)\n\"'Hello, world.'\"\n>>> str(1/7)\n'0.14285714285714285'\n>>> x = 10 * 3.25\n>>> y = 200 * 200\n>>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'\n>>> print(s)\nThe value of x is 32.5, and y is 40000...\n>>> # The repr() of a string adds string quotes and backslashes:\n>>> hello = 'hello, world\\n'\n>>> hellos = repr(hello)\n>>> print(hellos)\n'hello, world\\n'\n>>> # The argument to repr() may be any Python object:\n>>> repr((x, y, ('spam', 'eggs')))\n\"(32.5, 40000, ('spam', 'eggs'))\"\nThestringmodulecontainsaTemplateclassthatoffersyetanotherwaytosubstitutevaluesintostrings, using\nplaceholderslike$xandreplacingthemwithvaluesfromadictionary,butoffersmuchlesscontroloftheformatting.\n7.1.1 Formatted String Literals\nFormattedstringliterals(alsocalledf-stringsforshort)letyouincludethevalueofPythonexpressionsinsideastring\nbyprefixingthestringwithforFandwritingexpressionsas{expression}.\nAnoptionalformatspecifiercanfollowtheexpression. Thisallowsgreatercontroloverhowthevalueisformatted.\nThefollowingexampleroundspitothreeplacesafterthedecimal:\n>>> import math\n>>> print(f'The value of pi is approximately {math.pi:.3f}.')\nThe value of pi is approximately 3.142.\nPassinganintegerafterthe':' willcausethatfieldtobeaminimumnumberofcharacterswide. Thisisusefulfor\nmakingcolumnslineup.\n>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}\n>>> for name, phone in table.items():\n... print(f'{name:10} ==> {phone:10d}')\n...\nSjoerd ==> 4127\nJack ==> 4098\nDcab ==> 7678\nOthermodifierscanbeusedtoconvertthevaluebeforeitisformatted. '!a'appliesascii(),'!s'appliesstr(),\nand'!r'appliesrepr():\n>>> animals = 'eels'\n>>> print(f'My hovercraft is full of {animals}.')\nMy hovercraft is full of eels.\n>>> print(f'My hovercraft is full of {animals!r}.')\nMy hovercraft is full of 'eels'.\nThe=specifiercanbeusedtoexpandanexpressiontothetextoftheexpression,anequalsign,thentherepresentation\noftheevaluatedexpression:\n54 Chapter7. InputandOutput\nPythonTutorial,Release3.13.3\n>>> bugs = 'roaches'\n>>> count = 13\n>>> area = 'living room'\n>>> print(f'Debugging {bugs=} {count=} {area=}')\nDebugging bugs='roaches' count=13 area='living room'\nSeeself-documentingexpressionsformoreinformationonthe=specifier. Forareferenceontheseformatspecifi-\ncations,seethereferenceguidefortheformatspec.\n7.1.2 The String format() Method\nBasicusageofthestr.format()methodlookslikethis:\n>>> print('We are the {} who say \"{}!\"'.format('knights', 'Ni'))\nWe are the knights who say \"Ni!\"\nThe brackets and characters within them (called format fields) are replaced with the objects passed into the str.\nformat() method. A number in the brackets can be used to refer to the position of the object passed into the\nstr.format()method.\n>>> print('{0} and {1}'.format('spam', 'eggs'))\nspam and eggs\n>>> print('{1} and {0}'.format('spam', 'eggs'))\neggs and spam\nIfkeywordargumentsareusedinthestr.format()method,theirvaluesarereferredtobyusingthenameofthe\nargument.\n>>> print('This {food} is {adjective}.'.format(\n... food='spam', adjective='absolutely horrible'))\nThis spam is absolutely horrible.\nPositionalandkeywordargumentscanbearbitrarilycombined:\n>>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',\n... other='Georg'))\nThe story of Bill, Manfred, and Georg.\nIf you have a really long format string that you don\u2019t want to split up, it would be nice if you could reference the\nvariables to be formatted by name instead of by position. This can be done by simply passing the dict and using\nsquarebrackets'[]'toaccessthekeys.\n>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\n>>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '\n... 'Dcab: {0[Dcab]:d}'.format(table))\nJack: 4098; Sjoerd: 4127; Dcab: 8637678\nThiscouldalsobedonebypassingthetabledictionaryaskeywordargumentswiththe**notation.\n>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\n>>> print('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))\nJack: 4098; Sjoerd: 4127; Dcab: 8637678\nThisisparticularlyusefulincombinationwiththebuilt-infunctionvars(),whichreturnsadictionarycontaining\nalllocalvariables:\n>>> table = {k: str(v) for k, v in vars().items()}\n>>> message = \" \".join([f'{k}: ' + '{' + k +'};' for k in table.keys()])\n(continuesonnextpage)\n7.1. FancierOutputFormatting 55\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n>>> print(message.format(**table))\n__name__: __main__; __doc__: None; __package__: None; __loader__: ...\nAsanexample,thefollowinglinesproduceatidilyalignedsetofcolumnsgivingintegersandtheirsquaresandcubes:\n>>> for x in range(1, 11):\n... print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))\n...\n1 1 1\n2 4 8\n3 9 27\n4 16 64\n5 25 125\n6 36 216\n7 49 343\n8 64 512\n9 81 729\n10 100 1000\nForacompleteoverviewofstringformattingwithstr.format(),seeformatstrings.\n7.1.3 Manual String Formatting\nHere\u2019sthesametableofsquaresandcubes,formattedmanually:\n>>> for x in range(1, 11):\n... print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')\n... # Note use of 'end' on previous line\n... print(repr(x*x*x).rjust(4))\n...\n1 1 1\n2 4 8\n3 9 27\n4 16 64\n5 25 125\n6 36 216\n7 49 343\n8 64 512\n9 81 729\n10 100 1000\n(Notethattheonespacebetweeneachcolumnwasaddedbythewayprint()works: italwaysaddsspacesbetween\nitsarguments.)\nThestr.rjust()methodofstringobjectsright-justifiesastringinafieldofagivenwidthbypaddingitwithspaces\nontheleft. Therearesimilarmethodsstr.ljust()andstr.center(). Thesemethodsdonotwriteanything,\ntheyjustreturnanewstring. Iftheinputstringistoolong,theydon\u2019ttruncateit,butreturnitunchanged;thiswill\nmessupyourcolumnlay-outbutthat\u2019susuallybetterthanthealternative, whichwouldbelyingaboutavalue. (If\nyoureallywanttruncationyoucanalwaysaddasliceoperation,asinx.ljust(n)[:n].)\nThereisanothermethod,str.zfill(),whichpadsanumericstringontheleftwithzeros. Itunderstandsabout\nplusandminussigns:\n>>> '12'.zfill(5)\n'00012'\n>>> '-3.14'.zfill(7)\n'-003.14'\n(continuesonnextpage)\n56 Chapter7. InputandOutput\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n>>> '3.14159265359'.zfill(5)\n'3.14159265359'\n7.1.4 Old string formatting\nThe % operator (modulo) can also be used for string formatting. Given format % values (where format is a\nstring), %conversionspecificationsinformat arereplacedwithzeroormoreelementsofvalues. Thisoperationis\ncommonlyknownasstringinterpolation. Forexample:\n>>> import math\n>>> print('The value of pi is approximately %5.3f.' % math.pi)\nThe value of pi is approximately 3.142.\nMoreinformationcanbefoundintheold-string-formattingsection.\n7.2 Reading and Writing Files\nopen()returnsafileobject,andismostcommonlyusedwithtwopositionalargumentsandonekeywordargument:\nopen(filename, mode, encoding=None)\n>>> f = open('workfile', 'w', encoding=\"utf-8\")\nThe first argument is a string containing the filename. The second argument is another string containing a few\ncharactersdescribingthewayinwhichthefilewillbeused. modecanbe'r'whenthefilewillonlyberead,'w'\nforonlywriting(anexistingfilewiththesamenamewillbeerased),and'a'opensthefileforappending;anydata\nwritten to the file is automatically added to the end. 'r+' opens the file for both reading and writing. The mode\nargumentisoptional;'r'willbeassumedifit\u2019somitted.\nNormally,filesareopenedintextmode,thatmeans,youreadandwritestringsfromandtothefile,whichareencoded\ninaspecificencoding. Ifencodingisnotspecified,thedefaultisplatformdependent(seeopen()). BecauseUTF-\n8isthemodernde-factostandard, encoding=\"utf-8\"isrecommendedunlessyouknowthatyouneedtousea\ndifferentencoding. Appendinga'b'tothemodeopensthefileinbinarymode. Binarymodedataisreadandwritten\nasbytesobjects. Youcannotspecifyencodingwhenopeningfileinbinarymode.\nIntextmode,thedefaultwhenreadingistoconvertplatform-specificlineendings(\\nonUnix,\\r\\nonWindows)\nto just \\n. When writing in text mode, the default is to convert occurrences of \\n back to platform-specific line\nendings. Thisbehind-the-scenesmodificationtofiledataisfinefortextfiles,butwillcorruptbinarydatalikethatin\nJPEGorEXEfiles. Beverycarefultousebinarymodewhenreadingandwritingsuchfiles.\nItisgoodpracticetousethewithkeywordwhendealingwithfileobjects. Theadvantageisthatthefileisproperly\nclosed after its suite finishes, even if an exception is raised at some point. Using with is also much shorter than\nwritingequivalenttry-finallyblocks:\n>>> with open('workfile', encoding=\"utf-8\") as f:\n... read_data = f.read()\n>>> # We can check that the file has been automatically closed.\n>>> f.closed\nTrue\nIfyou\u2019renotusingthewithkeyword,thenyoushouldcallf.close()toclosethefileandimmediatelyfreeupany\nsystemresourcesusedbyit.\n(cid:193) Warning\nCallingf.write()withoutusingthewithkeywordorcallingf.close()mightresultintheargumentsof\nf.write()notbeingcompletelywrittentothedisk,eveniftheprogramexitssuccessfully.\n7.2. ReadingandWritingFiles 57\nPythonTutorial,Release3.13.3\nAfterafileobjectisclosed,eitherbyawithstatementorbycallingf.close(),attemptstousethefileobjectwill\nautomaticallyfail.\n>>> f.close()\n>>> f.read()\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nValueError: I/O operation on closed file.\n7.2.1 Methods of File Objects\nTherestoftheexamplesinthissectionwillassumethatafileobjectcalledfhasalreadybeencreated.\nToreadafile\u2019scontents, callf.read(size), whichreadssomequantityofdataandreturnsitasastring(intext\nmode)orbytesobject(inbinarymode). sizeisanoptionalnumericargument. Whensizeisomittedornegative,the\nentirecontentsofthefilewillbereadandreturned; it\u2019syourproblemifthefileistwiceaslargeasyourmachine\u2019s\nmemory. Otherwise,atmostsizecharacters(intextmode)orsizebytes(inbinarymode)arereadandreturned. If\ntheendofthefilehasbeenreached,f.read()willreturnanemptystring('').\n>>> f.read()\n'This is the entire file.\\n'\n>>> f.read()\n''\nf.readline()readsasinglelinefromthefile;anewlinecharacter(\\n)isleftattheendofthestring,andisonly\nomittedonthelastlineofthefileifthefiledoesn\u2019tendinanewline. Thismakesthereturnvalueunambiguous;if\nf.readline()returnsanemptystring,theendofthefilehasbeenreached,whileablanklineisrepresentedby\n'\\n',astringcontainingonlyasinglenewline.\n>>> f.readline()\n'This is the first line of the file.\\n'\n>>> f.readline()\n'Second line of the file\\n'\n>>> f.readline()\n''\nFor reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple\ncode:\n>>> for line in f:\n... print(line, end='')\n...\nThis is the first line of the file.\nSecond line of the file\nIfyouwanttoreadallthelinesofafileinalistyoucanalsouselist(f)orf.readlines().\nf.write(string)writesthecontentsofstringtothefile,returningthenumberofcharacterswritten.\n>>> f.write('This is a test\\n')\n15\nOthertypesofobjectsneedtobeconverted\u2013eithertoastring(intextmode)orabytesobject(inbinarymode)\u2013\nbeforewritingthem:\n>>> value = ('the answer', 42)\n>>> s = str(value) # convert the tuple to string\n>>> f.write(s)\n18\n58 Chapter7. InputandOutput\nPythonTutorial,Release3.13.3\nf.tell()returnsanintegergivingthefileobject\u2019scurrentpositioninthefilerepresentedasnumberofbytesfrom\nthebeginningofthefilewheninbinarymodeandanopaquenumberwhenintextmode.\nTochangethefileobject\u2019sposition,usef.seek(offset, whence). Thepositioniscomputedfromaddingoffset\ntoareferencepoint;thereferencepointisselectedbythewhenceargument. Awhencevalueof0measuresfromthe\nbeginningofthefile,1usesthecurrentfileposition,and2usestheendofthefileasthereferencepoint. whencecan\nbeomittedanddefaultsto0,usingthebeginningofthefileasthereferencepoint.\n>>> f = open('workfile', 'rb+')\n>>> f.write(b'0123456789abcdef')\n16\n>>> f.seek(5) # Go to the 6th byte in the file\n5\n>>> f.read(1)\nb'5'\n>>> f.seek(-3, 2) # Go to the 3rd byte before the end\n13\n>>> f.read(1)\nb'd'\nIntextfiles(thoseopenedwithoutabinthemodestring),onlyseeksrelativetothebeginningofthefileareallowed\n(theexceptionbeingseekingtotheveryfileendwithseek(0, 2))andtheonlyvalidoffsetvaluesarethosereturned\nfromthef.tell(),orzero. Anyotheroffsetvalueproducesundefinedbehaviour.\nFile objects have some additional methods, such as isatty() and truncate() which are less frequently used;\nconsulttheLibraryReferenceforacompleteguidetofileobjects.\n7.2.2 Saving structured data with json\nStringscaneasilybewrittentoandreadfromafile. Numberstakeabitmoreeffort,sincetheread()methodonly\nreturnsstrings,whichwillhavetobepassedtoafunctionlikeint(),whichtakesastringlike'123'andreturnsits\nnumericvalue123. Whenyouwanttosavemorecomplexdatatypeslikenestedlistsanddictionaries,parsingand\nserializingbyhandbecomescomplicated.\nRatherthanhavingusersconstantlywritinganddebuggingcodetosavecomplicateddatatypestofiles,Pythonallows\nyoutousethepopulardatainterchangeformatcalledJSON(JavaScriptObjectNotation). Thestandardmodulecalled\njsoncantakePythondatahierarchies,andconvertthemtostringrepresentations;thisprocessiscalledserializing.\nReconstructingthedatafromthestringrepresentationiscalleddeserializing. Betweenserializinganddeserializing,\nthestringrepresentingtheobjectmayhavebeenstoredinafileordata,orsentoveranetworkconnectiontosome\ndistantmachine.\n(cid:174) Note\nTheJSONformatiscommonlyusedbymodernapplicationstoallowfordataexchange. Manyprogrammersare\nalreadyfamiliarwithit,whichmakesitagoodchoiceforinteroperability.\nIfyouhaveanobjectx,youcanviewitsJSONstringrepresentationwithasimplelineofcode:\n>>> import json\n>>> x = [1, 'simple', 'list']\n>>> json.dumps(x)\n'[1, \"simple\", \"list\"]'\nAnothervariantofthedumps()function,calleddump(),simplyserializestheobjecttoatextfile. Soiffisatext\nfileobjectopenedforwriting,wecandothis:\njson.dump(x, f)\nTodecodetheobjectagain,iffisabinaryfileortextfileobjectwhichhasbeenopenedforreading:\n7.2. ReadingandWritingFiles 59\nPythonTutorial,Release3.13.3\nx = json.load(f)\n(cid:174) Note\nJSONfilesmustbeencodedinUTF-8. Useencoding=\"utf-8\"whenopeningJSONfileasatextfileforboth\nofreadingandwriting.\nThissimpleserializationtechniquecanhandlelistsanddictionaries,butserializingarbitraryclassinstancesinJSON\nrequiresabitofextraeffort. Thereferenceforthejsonmodulecontainsanexplanationofthis.\n(cid:181) Seealso\npickle-thepicklemodule\nContrarytoJSON,pickleisaprotocolwhichallowstheserializationofarbitrarilycomplexPythonobjects. As\nsuch,itisspecifictoPythonandcannotbeusedtocommunicatewithapplicationswritteninotherlanguages. It\nisalsoinsecurebydefault: deserializingpickledatacomingfromanuntrustedsourcecanexecutearbitrarycode,\nifthedatawascraftedbyaskilledattacker.\n60 Chapter7. InputandOutput\nCHAPTER\nEIGHT\nERRORS AND EXCEPTIONS\nUntilnowerrormessageshaven\u2019tbeenmorethanmentioned,butifyouhavetriedouttheexamplesyouhaveprobably\nseensome. Thereare(atleast)twodistinguishablekindsoferrors: syntaxerrorsandexceptions.\n8.1 Syntax Errors\nSyntaxerrors,alsoknownasparsingerrors,areperhapsthemostcommonkindofcomplaintyougetwhileyouare\nstilllearningPython:\n>>> while True print('Hello world')\nFile \"<stdin>\", line 1\nwhile True print('Hello world')\n^^^^^\nSyntaxError: invalid syntax\nTheparserrepeatstheoffendinglineanddisplayslittlearrows pointingattheplacewheretheerrorwasdetected.\nNote that this is not always the place that needs to be fixed. In the example, the error is detected at the function\nprint(),sinceacolon(':') ismissingjustbeforeit.\nThefilename(<stdin>inourexample)andlinenumberareprintedsoyouknowwheretolookincasetheinput\ncamefromafile.\n8.2 Exceptions\nEvenifastatementorexpressionissyntacticallycorrect,itmaycauseanerrorwhenanattemptismadetoexecute\nit. Errorsdetectedduringexecutionarecalledexceptionsandarenotunconditionallyfatal: youwillsoonlearnhow\nto handle them in Python programs. Most exceptions are not handled by programs, however, and result in error\nmessagesasshownhere:\n>>> 10 * (1/0)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n10 * (1/0)\n~^~\nZeroDivisionError: division by zero\n>>> 4 + spam*3\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n4 + spam*3\n^^^^\nNameError: name 'spam' is not defined\n>>> '2' + 2\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\n'2' + 2\n(continuesonnextpage)\n61\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n~~~~^~~\nTypeError: can only concatenate str (not \"int\") to str\nThe last line of the error message indicates what happened. Exceptions come in different types, and the type is\nprintedaspartofthemessage: thetypesintheexampleareZeroDivisionError,NameErrorandTypeError.\nThestringprintedastheexceptiontypeisthenameofthebuilt-inexceptionthatoccurred. Thisistrueforallbuilt-in\nexceptions,butneednotbetrueforuser-definedexceptions(althoughitisausefulconvention). Standardexception\nnamesarebuilt-inidentifiers(notreservedkeywords).\nTherestofthelineprovidesdetailbasedonthetypeofexceptionandwhatcausedit.\nThe preceding part of the error message shows the context where the exception occurred, in the form of a stack\ntraceback. Ingeneralitcontainsastacktracebacklistingsourcelines; however, itwillnotdisplaylinesreadfrom\nstandardinput.\nbltin-exceptionsliststhebuilt-inexceptionsandtheirmeanings.\n8.3 Handling Exceptions\nIt is possible to write programs that handle selected exceptions. Look at the following example, which asks the\nuserforinputuntilavalidintegerhasbeenentered,butallowstheusertointerrupttheprogram(usingControl-\nC or whatever the operating system supports); note that a user-generated interruption is signalled by raising the\nKeyboardInterruptexception.\n>>> while True:\n... try:\n... x = int(input(\"Please enter a number: \"))\n... break\n... except ValueError:\n... print(\"Oops! That was no valid number. Try again...\")\n...\nThetrystatementworksasfollows.\n\u2022 First,thetryclause(thestatement(s)betweenthetryandexceptkeywords)isexecuted.\n\u2022 Ifnoexceptionoccurs,theexceptclauseisskippedandexecutionofthetrystatementisfinished.\n\u2022 Ifanexceptionoccursduringexecutionofthetryclause,therestoftheclauseisskipped. Then,ifitstype\nmatches the exception named after the except keyword, the except clause is executed, and then execution\ncontinuesafterthetry/exceptblock.\n\u2022 Ifanexceptionoccurswhichdoesnotmatchtheexceptionnamedintheexceptclause,itispassedontoouter\ntrystatements;ifnohandlerisfound,itisanunhandledexceptionandexecutionstopswithanerrormessage.\nA try statement may have morethan one except clause, to specify handlers fordifferent exceptions. Atmost one\nhandlerwillbeexecuted. Handlersonlyhandleexceptionsthatoccurinthecorrespondingtryclause, notinother\nhandlersofthesametrystatement. Anexceptclausemaynamemultipleexceptionsasaparenthesizedtuple, for\nexample:\n... except (RuntimeError, TypeError, NameError):\n... pass\nAclassinanexceptclausematchesexceptionswhichareinstancesoftheclassitselforoneofitsderivedclasses\n(butnottheotherwayaround\u2014anexceptclauselistingaderivedclassdoesnotmatchinstancesofitsbaseclasses).\nForexample,thefollowingcodewillprintB,C,Dinthatorder:\nclass B(Exception):\npass\n(continuesonnextpage)\n62 Chapter8. ErrorsandExceptions\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nclass C(B):\npass\nclass D(C):\npass\nfor cls in [B, C, D]:\ntry:\nraise cls()\nexcept D:\nprint(\"D\")\nexcept C:\nprint(\"C\")\nexcept B:\nprint(\"B\")\nNotethatiftheexceptclauseswerereversed(withexcept Bfirst),itwouldhaveprintedB,B,B\u2014thefirstmatching\nexceptclauseistriggered.\nWhen an exception occurs, it may have associated values, also known as the exception\u2019s arguments. The presence\nandtypesoftheargumentsdependontheexceptiontype.\nTheexceptclausemayspecifyavariableaftertheexceptionname. Thevariableisboundtotheexceptioninstance\nwhich typically has an args attribute that stores the arguments. For convenience, builtin exception types define\n__str__()toprintalltheargumentswithoutexplicitlyaccessing.args.\n>>> try:\n... raise Exception('spam', 'eggs')\n... except Exception as inst:\n... print(type(inst)) # the exception type\n... print(inst.args) # arguments stored in .args\n... print(inst) # __str__ allows args to be printed directly,\n... # but may be overridden in exception subclasses\n... x, y = inst.args # unpack args\n... print('x =', x)\n... print('y =', y)\n...\n<class 'Exception'>\n('spam', 'eggs')\n('spam', 'eggs')\nx = spam\ny = eggs\nTheexception\u2019s__str__()outputisprintedasthelastpart(\u2018detail\u2019)ofthemessageforunhandledexceptions.\nBaseExceptionisthecommonbaseclassofallexceptions. Oneofitssubclasses,Exception,isthebaseclassof\nallthenon-fatalexceptions. ExceptionswhicharenotsubclassesofExceptionarenottypicallyhandled,because\nthey are used to indicate that the program should terminate. They include SystemExit which is raised by sys.\nexit()andKeyboardInterruptwhichisraisedwhenauserwishestointerrupttheprogram.\nExceptioncanbeusedasawildcardthatcatches(almost)everything. However,itisgoodpracticetobeasspecific\naspossiblewiththetypesofexceptionsthatweintendtohandle,andtoallowanyunexpectedexceptionstopropagate\non.\nThemostcommonpatternforhandlingExceptionistoprintorlogtheexceptionandthenre-raiseit(allowinga\ncallertohandletheexceptionaswell):\nimport sys\n(continuesonnextpage)\n8.3. HandlingExceptions 63\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\ntry:\nf = open('myfile.txt')\ns = f.readline()\ni = int(s.strip())\nexcept OSError as err:\nprint(\"OS error:\", err)\nexcept ValueError:\nprint(\"Could not convert data to an integer.\")\nexcept Exception as err:\nprint(f\"Unexpected {err=}, {type(err)=}\")\nraise\nThetry\u2026exceptstatementhasanoptionalelseclause,which,whenpresent,mustfollowallexceptclauses. Itis\nusefulforcodethatmustbeexecutedifthetryclausedoesnotraiseanexception. Forexample:\nfor arg in sys.argv[1:]:\ntry:\nf = open(arg, 'r')\nexcept OSError:\nprint('cannot open', arg)\nelse:\nprint(arg, 'has', len(f.readlines()), 'lines')\nf.close()\nThe use of the else clause is better than adding additional code to the try clause because it avoids accidentally\ncatchinganexceptionthatwasn\u2019traisedbythecodebeingprotectedbythetry\u2026exceptstatement.\nExceptionhandlersdonothandleonlyexceptionsthatoccurimmediatelyinthetryclause,butalsothosethatoccur\ninsidefunctionsthatarecalled(evenindirectly)inthetryclause. Forexample:\n>>> def this_fails():\n... x = 1/0\n...\n>>> try:\n... this_fails()\n... except ZeroDivisionError as err:\n... print('Handling run-time error:', err)\n...\nHandling run-time error: division by zero\n8.4 Raising Exceptions\nTheraisestatementallowstheprogrammertoforceaspecifiedexceptiontooccur. Forexample:\n>>> raise NameError('HiThere')\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nraise NameError('HiThere')\nNameError: HiThere\nThesoleargumenttoraiseindicatestheexceptiontoberaised. Thismustbeeitheranexceptioninstanceoran\nexception class (a class that derives from BaseException, such as Exception or one of its subclasses). If an\nexceptionclassispassed,itwillbeimplicitlyinstantiatedbycallingitsconstructorwithnoarguments:\nraise ValueError # shorthand for 'raise ValueError()'\n64 Chapter8. ErrorsandExceptions\nPythonTutorial,Release3.13.3\nIfyouneedtodeterminewhetheranexceptionwasraisedbutdon\u2019tintendtohandleit,asimplerformoftheraise\nstatementallowsyoutore-raisetheexception:\n>>> try:\n... raise NameError('HiThere')\n... except NameError:\n... print('An exception flew by!')\n... raise\n...\nAn exception flew by!\nTraceback (most recent call last):\nFile \"<stdin>\", line 2, in <module>\nraise NameError('HiThere')\nNameError: HiThere\n8.5 Exception Chaining\nIfanunhandledexceptionoccursinsideanexceptsection,itwillhavetheexceptionbeinghandledattachedtoit\nandincludedintheerrormessage:\n>>> try:\n... open(\"database.sqlite\")\n... except OSError:\n... raise RuntimeError(\"unable to handle error\")\n...\nTraceback (most recent call last):\nFile \"<stdin>\", line 2, in <module>\nopen(\"database.sqlite\")\n~~~~^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'database.sqlite'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\nFile \"<stdin>\", line 4, in <module>\nraise RuntimeError(\"unable to handle error\")\nRuntimeError: unable to handle error\nToindicatethatanexceptionisadirectconsequenceofanother,theraisestatementallowsanoptionalfromclause:\n# exc must be exception instance or None.\nraise RuntimeError from exc\nThiscanbeusefulwhenyouaretransformingexceptions. Forexample:\n>>> def func():\n... raise ConnectionError\n...\n>>> try:\n... func()\n... except ConnectionError as exc:\n... raise RuntimeError('Failed to open database') from exc\n...\nTraceback (most recent call last):\nFile \"<stdin>\", line 2, in <module>\nfunc()\n~~~~^^\n(continuesonnextpage)\n8.5. ExceptionChaining 65\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nFile \"<stdin>\", line 2, in func\nConnectionError\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\nFile \"<stdin>\", line 4, in <module>\nraise RuntimeError('Failed to open database') from exc\nRuntimeError: Failed to open database\nItalsoallowsdisablingautomaticexceptionchainingusingthefrom Noneidiom:\n>>> try:\n... open('database.sqlite')\n... except OSError:\n... raise RuntimeError from None\n...\nTraceback (most recent call last):\nFile \"<stdin>\", line 4, in <module>\nraise RuntimeError from None\nRuntimeError\nFormoreinformationaboutchainingmechanics,seebltin-exceptions.\n8.6 User-defined Exceptions\nPrograms may name their own exceptions by creating a new exception class (see Classes for more about Python\nclasses). ExceptionsshouldtypicallybederivedfromtheExceptionclass,eitherdirectlyorindirectly.\nExceptionclassescanbedefinedwhichdoanythinganyotherclasscando,butareusuallykeptsimple,oftenonly\nofferinganumberofattributesthatallowinformationabouttheerrortobeextractedbyhandlersfortheexception.\nMostexceptionsaredefinedwithnamesthatendin\u201cError\u201d,similartothenamingofthestandardexceptions.\nManystandardmodulesdefinetheirownexceptionstoreporterrorsthatmayoccurinfunctionstheydefine.\n8.7 Defining Clean-up Actions\nThetrystatementhasanotheroptionalclausewhichisintendedtodefineclean-upactionsthatmustbeexecuted\nunderallcircumstances. Forexample:\n>>> try:\n... raise KeyboardInterrupt\n... finally:\n... print('Goodbye, world!')\n...\nGoodbye, world!\nTraceback (most recent call last):\nFile \"<stdin>\", line 2, in <module>\nraise KeyboardInterrupt\nKeyboardInterrupt\nIfafinallyclauseispresent,thefinallyclausewillexecuteasthelasttaskbeforethetrystatementcompletes.\nThe finally clause runs whether or not the try statement produces an exception. The following points discuss\nmorecomplexcaseswhenanexceptionoccurs:\n\u2022 Ifanexceptionoccursduringexecutionofthetryclause,theexceptionmaybehandledbyanexceptclause.\nIftheexceptionisnothandledbyanexceptclause,theexceptionisre-raisedafterthefinallyclausehas\n66 Chapter8. ErrorsandExceptions\nPythonTutorial,Release3.13.3\nbeenexecuted.\n\u2022 Anexceptioncouldoccurduringexecutionofanexceptorelseclause. Again,theexceptionisre-raised\nafterthefinallyclausehasbeenexecuted.\n\u2022 Ifthefinallyclauseexecutesabreak,continueorreturnstatement,exceptionsarenotre-raised.\n\u2022 Ifthetrystatementreachesabreak,continueorreturnstatement,thefinallyclausewillexecutejust\npriortothebreak,continueorreturnstatement\u2019sexecution.\n\u2022 If a finally clause includes a return statement, the returned value will be the one from the finally\nclause\u2019sreturnstatement,notthevaluefromthetryclause\u2019sreturnstatement.\nForexample:\n>>> def bool_return():\n... try:\n... return True\n... finally:\n... return False\n...\n>>> bool_return()\nFalse\nAmorecomplicatedexample:\n>>> def divide(x, y):\n... try:\n... result = x / y\n... except ZeroDivisionError:\n... print(\"division by zero!\")\n... else:\n... print(\"result is\", result)\n... finally:\n... print(\"executing finally clause\")\n...\n>>> divide(2, 1)\nresult is 2.0\nexecuting finally clause\n>>> divide(2, 0)\ndivision by zero!\nexecuting finally clause\n>>> divide(\"2\", \"1\")\nexecuting finally clause\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\ndivide(\"2\", \"1\")\n~~~~~~^^^^^^^^^^\nFile \"<stdin>\", line 3, in divide\nresult = x / y\n~~^~~\nTypeError: unsupported operand type(s) for /: 'str' and 'str'\nAsyoucansee,thefinallyclauseisexecutedinanyevent. TheTypeErrorraisedbydividingtwostringsisnot\nhandledbytheexceptclauseandthereforere-raisedafterthefinallyclausehasbeenexecuted.\nIn real world applications, the finally clause is useful for releasing external resources (such as files or network\nconnections),regardlessofwhethertheuseoftheresourcewassuccessful.\n8.7. DefiningClean-upActions 67\nPythonTutorial,Release3.13.3\n8.8 Predefined Clean-up Actions\nSomeobjectsdefinestandardclean-upactionstobeundertakenwhentheobjectisnolongerneeded,regardlessof\nwhetherornottheoperationusingtheobjectsucceededorfailed. Lookatthefollowingexample,whichtriestoopen\nafileandprintitscontentstothescreen.\nfor line in open(\"myfile.txt\"):\nprint(line, end=\"\")\nTheproblemwiththiscodeisthatitleavesthefileopenforanindeterminateamountoftimeafterthispartofthe\ncodehasfinishedexecuting. Thisisnotanissueinsimplescripts,butcanbeaproblemforlargerapplications. The\nwith statementallowsobjectslikefilesto be used ina waythatensuresthey arealwayscleaneduppromptlyand\ncorrectly.\nwith open(\"myfile.txt\") as f:\nfor line in f:\nprint(line, end=\"\")\nAfterthestatementisexecuted,thefilef isalwaysclosed,evenifaproblemwasencounteredwhileprocessingthe\nlines. Objectswhich,likefiles,providepredefinedclean-upactionswillindicatethisintheirdocumentation.\n8.9 Raising and Handling Multiple Unrelated Exceptions\nTherearesituationswhereitisnecessarytoreportseveralexceptionsthathaveoccurred. Thisisoftenthecasein\nconcurrencyframeworks,whenseveraltasksmayhavefailedinparallel,buttherearealsootherusecaseswhereit\nisdesirabletocontinueexecutionandcollectmultipleerrorsratherthanraisethefirstexception.\nThebuiltinExceptionGroupwrapsalistofexceptioninstancessothattheycanberaisedtogether. Itisanexception\nitself,soitcanbecaughtlikeanyotherexception.\n>>> def f():\n... excs = [OSError('error 1'), SystemError('error 2')]\n... raise ExceptionGroup('there were problems', excs)\n...\n>>> f()\n+ Exception Group Traceback (most recent call last):\n| File \"<stdin>\", line 1, in <module>\n| f()\n| ~^^\n| File \"<stdin>\", line 3, in f\n| raise ExceptionGroup('there were problems', excs)\n| ExceptionGroup: there were problems (2 sub-exceptions)\n+-+---------------- 1 ----------------\n| OSError: error 1\n+---------------- 2 ----------------\n| SystemError: error 2\n+------------------------------------\n>>> try:\n... f()\n... except Exception as e:\n... print(f'caught {type(e)}: e')\n...\ncaught <class 'ExceptionGroup'>: e\n>>>\nByusingexcept*insteadofexcept,wecanselectivelyhandleonlytheexceptionsinthegroupthatmatchacertain\ntype. Inthefollowingexample,whichshowsanestedexceptiongroup,eachexcept*clauseextractsfromthegroup\nexceptionsofacertaintypewhilelettingallotherexceptionspropagatetootherclausesandeventuallytobereraised.\n68 Chapter8. ErrorsandExceptions\nPythonTutorial,Release3.13.3\n>>> def f():\n... raise ExceptionGroup(\n... \"group1\",\n... [\n... OSError(1),\n... SystemError(2),\n... ExceptionGroup(\n... \"group2\",\n... [\n... OSError(3),\n... RecursionError(4)\n... ]\n... )\n... ]\n... )\n...\n>>> try:\n... f()\n... except* OSError as e:\n... print(\"There were OSErrors\")\n... except* SystemError as e:\n... print(\"There were SystemErrors\")\n...\nThere were OSErrors\nThere were SystemErrors\n+ Exception Group Traceback (most recent call last):\n| File \"<stdin>\", line 2, in <module>\n| f()\n| ~^^\n| File \"<stdin>\", line 2, in f\n| raise ExceptionGroup(\n| ...<12 lines>...\n| )\n| ExceptionGroup: group1 (1 sub-exception)\n+-+---------------- 1 ----------------\n| ExceptionGroup: group2 (1 sub-exception)\n+-+---------------- 1 ----------------\n| RecursionError: 4\n+------------------------------------\n>>>\nNotethattheexceptionsnestedinanexceptiongroupmustbeinstances,nottypes. Thisisbecauseinpracticethe\nexceptions would typically be ones that have already been raised and caught by the program, along the following\npattern:\n>>> excs = []\n... for test in tests:\n... try:\n... test.run()\n... except Exception as e:\n... excs.append(e)\n...\n>>> if excs:\n... raise ExceptionGroup(\"Test Failures\", excs)\n...\n8.9. RaisingandHandlingMultipleUnrelatedExceptions 69\nPythonTutorial,Release3.13.3\n8.10 Enriching Exceptions with Notes\nWhenanexceptioniscreatedinordertoberaised,itisusuallyinitializedwithinformationthatdescribestheerror\nthat has occurred. There are cases where it is useful to add information after the exception was caught. For this\npurpose,exceptionshaveamethodadd_note(note)thatacceptsastringandaddsittotheexception\u2019snoteslist.\nThestandardtracebackrenderingincludesallnotes,intheordertheywereadded,aftertheexception.\n>>> try:\n... raise TypeError('bad type')\n... except Exception as e:\n... e.add_note('Add some information')\n... e.add_note('Add some more information')\n... raise\n...\nTraceback (most recent call last):\nFile \"<stdin>\", line 2, in <module>\nraise TypeError('bad type')\nTypeError: bad type\nAdd some information\nAdd some more information\n>>>\nForexample, whencollectingexceptionsintoanexceptiongroup, wemaywanttoaddcontextinformationforthe\nindividualerrors. Inthefollowingeachexceptioninthegrouphasanoteindicatingwhenthiserrorhasoccurred.\n>>> def f():\n... raise OSError('operation failed')\n...\n>>> excs = []\n>>> for i in range(3):\n... try:\n... f()\n... except Exception as e:\n... e.add_note(f'Happened in Iteration {i+1}')\n... excs.append(e)\n...\n>>> raise ExceptionGroup('We have some problems', excs)\n+ Exception Group Traceback (most recent call last):\n| File \"<stdin>\", line 1, in <module>\n| raise ExceptionGroup('We have some problems', excs)\n| ExceptionGroup: We have some problems (3 sub-exceptions)\n+-+---------------- 1 ----------------\n| Traceback (most recent call last):\n| File \"<stdin>\", line 3, in <module>\n| f()\n| ~^^\n| File \"<stdin>\", line 2, in f\n| raise OSError('operation failed')\n| OSError: operation failed\n| Happened in Iteration 1\n+---------------- 2 ----------------\n| Traceback (most recent call last):\n| File \"<stdin>\", line 3, in <module>\n| f()\n| ~^^\n| File \"<stdin>\", line 2, in f\n| raise OSError('operation failed')\n| OSError: operation failed\n(continuesonnextpage)\n70 Chapter8. ErrorsandExceptions\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n| Happened in Iteration 2\n+---------------- 3 ----------------\n| Traceback (most recent call last):\n| File \"<stdin>\", line 3, in <module>\n| f()\n| ~^^\n| File \"<stdin>\", line 2, in f\n| raise OSError('operation failed')\n| OSError: operation failed\n| Happened in Iteration 3\n+------------------------------------\n>>>\n8.10. EnrichingExceptionswithNotes 71\nPythonTutorial,Release3.13.3\n72 Chapter8. ErrorsandExceptions\nCHAPTER\nNINE\nCLASSES\nClassesprovideameansofbundlingdataandfunctionalitytogether. Creatinganewclasscreatesanewtypeofobject,\nallowingnewinstancesofthattypetobemade. Eachclassinstancecanhaveattributesattachedtoitformaintaining\nitsstate. Classinstancescanalsohavemethods(definedbyitsclass)formodifyingitsstate.\nComparedwithotherprogramminglanguages,Python\u2019sclassmechanismaddsclasseswithaminimumofnewsyntax\nandsemantics. ItisamixtureoftheclassmechanismsfoundinC++andModula-3. Pythonclassesprovideallthe\nstandardfeaturesofObjectOrientedProgramming: theclassinheritancemechanismallowsmultiplebaseclasses,a\nderivedclasscanoverrideanymethodsofitsbaseclassorclasses,andamethodcancallthemethodofabaseclass\nwiththesamename. Objectscancontainarbitraryamountsandkindsofdata. Asistrueformodules,classespartake\nofthedynamicnatureofPython: theyarecreatedatruntime,andcanbemodifiedfurtheraftercreation.\nIn C++ terminology, normally class members (including the data members) are public (except see below Private\nVariables),andallmemberfunctionsarevirtual. AsinModula-3,therearenoshorthandsforreferencingtheobject\u2019s\nmembersfromitsmethods: themethodfunctionisdeclaredwithanexplicitfirstargumentrepresentingtheobject,\nwhichisprovidedimplicitlybythecall. AsinSmalltalk,classesthemselvesareobjects. Thisprovidessemanticsfor\nimportingandrenaming. UnlikeC++andModula-3,built-intypescanbeusedasbaseclassesforextensionbythe\nuser. Also,likeinC++,mostbuilt-inoperatorswithspecialsyntax(arithmeticoperators,subscriptingetc.) canbe\nredefinedforclassinstances.\n(Lacking universally accepted terminology to talk about classes, I will make occasional use of Smalltalk and C++\nterms. IwoulduseModula-3terms,sinceitsobject-orientedsemanticsareclosertothoseofPythonthanC++,but\nIexpectthatfewreadershaveheardofit.)\n9.1 A Word About Names and Objects\nObjectshaveindividuality,andmultiplenames(inmultiplescopes)canbeboundtothesameobject. Thisisknown\nasaliasinginotherlanguages. ThisisusuallynotappreciatedonafirstglanceatPython,andcanbesafelyignored\nwhendealingwithimmutablebasictypes(numbers,strings,tuples). However,aliasinghasapossiblysurprisingeffect\nonthesemanticsofPythoncodeinvolvingmutableobjectssuchaslists,dictionaries,andmostothertypes. Thisis\nusuallyusedtothebenefitoftheprogram,sincealiasesbehavelikepointersinsomerespects. Forexample,passing\nanobjectischeapsinceonlyapointerispassedbytheimplementation;andifafunctionmodifiesanobjectpassedas\nanargument,thecallerwillseethechange\u2014thiseliminatestheneedfortwodifferentargumentpassingmechanisms\nasinPascal.\n9.2 Python Scopes and Namespaces\nBeforeintroducingclasses,IfirsthavetotellyousomethingaboutPython\u2019sscoperules. Classdefinitionsplaysome\nneat tricks with namespaces, and you need to know how scopes and namespaces work to fully understand what\u2019s\ngoingon. Incidentally,knowledgeaboutthissubjectisusefulforanyadvancedPythonprogrammer.\nLet\u2019sbeginwithsomedefinitions.\nAnamespaceisamappingfromnamestoobjects. MostnamespacesarecurrentlyimplementedasPythondictionar-\nies,butthat\u2019snormallynotnoticeableinanyway(exceptforperformance),anditmaychangeinthefuture. Examples\nof namespaces are: the set of built-in names (containing functions such as abs(), and built-in exception names);\nthe global names in a module; and the local names in a function invocation. In a sense the set of attributes of an\n73\nPythonTutorial,Release3.13.3\nobjectalsoformanamespace. Theimportantthingtoknowaboutnamespacesisthatthereisabsolutelynorelation\nbetweennamesindifferentnamespaces;forinstance,twodifferentmodulesmaybothdefineafunctionmaximize\nwithoutconfusion\u2014usersofthemodulesmustprefixitwiththemodulename.\nBytheway,Iusethewordattributeforanynamefollowingadot\u2014forexample,intheexpressionz.real,real\nis an attribute of the object z. Strictly speaking, references to names in modules are attribute references: in the\nexpressionmodname.funcname,modnameisamoduleobjectandfuncnameisanattributeofit. Inthiscasethere\nhappenstobeastraightforwardmappingbetweenthemodule\u2019sattributesandtheglobalnamesdefinedinthemodule:\ntheysharethesamenamespace!1\nAttributesmayberead-onlyorwritable. Inthelattercase,assignmenttoattributesispossible. Moduleattributesare\nwritable: youcanwritemodname.the_answer = 42. Writableattributesmayalsobedeletedwiththedelstate-\nment. Forexample, del modname.the_answerwillremovetheattributethe_answerfromtheobjectnamed\nbymodname.\nNamespaces are created at different moments and have different lifetimes. The namespace containing the built-in\nnames is created when the Python interpreter starts up, and is never deleted. The global namespace for a module\niscreatedwhenthemoduledefinitionisreadin; normally, modulenamespacesalsolastuntiltheinterpreterquits.\nThestatementsexecutedbythetop-levelinvocationoftheinterpreter,eitherreadfromascriptfileorinteractively,\nareconsideredpartofamodulecalled__main__, sotheyhavetheirownglobalnamespace. (Thebuilt-innames\nactuallyalsoliveinamodule;thisiscalledbuiltins.)\nThelocalnamespaceforafunctioniscreatedwhenthefunctioniscalled,anddeletedwhenthefunctionreturnsor\nraisesanexceptionthatisnothandledwithinthefunction. (Actually,forgettingwouldbeabetterwaytodescribe\nwhatactuallyhappens.) Ofcourse,recursiveinvocationseachhavetheirownlocalnamespace.\nAscopeisatextualregionofaPythonprogramwhereanamespaceisdirectlyaccessible. \u201cDirectlyaccessible\u201dhere\nmeansthatanunqualifiedreferencetoanameattemptstofindthenameinthenamespace.\nAlthoughscopesaredeterminedstatically,theyareuseddynamically. Atanytimeduringexecution,thereare3or4\nnestedscopeswhosenamespacesaredirectlyaccessible:\n\u2022 theinnermostscope,whichissearchedfirst,containsthelocalnames\n\u2022 the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contain\nnon-local,butalsonon-globalnames\n\u2022 thenext-to-lastscopecontainsthecurrentmodule\u2019sglobalnames\n\u2022 theoutermostscope(searchedlast)isthenamespacecontainingbuilt-innames\nIfanameisdeclaredglobal,thenallreferencesandassignmentsgodirectlytothenext-to-lastscopecontainingthe\nmodule\u2019sglobalnames. Torebindvariablesfoundoutsideoftheinnermostscope,thenonlocalstatementcanbe\nused;ifnotdeclarednonlocal,thosevariablesareread-only(anattempttowritetosuchavariablewillsimplycreate\nanewlocalvariableintheinnermostscope,leavingtheidenticallynamedoutervariableunchanged).\nUsually, thelocalscopereferencesthelocalnamesofthe(textually)currentfunction. Outsidefunctions, thelocal\nscopereferencesthesamenamespaceastheglobalscope:themodule\u2019snamespace. Classdefinitionsplaceyetanother\nnamespaceinthelocalscope.\nIt is important to realize that scopes are determined textually: the global scope of a function defined in a module\nis that module\u2019s namespace, no matter from where or by what alias the function is called. On the other hand, the\nactualsearchfornamesisdonedynamically,atruntime\u2014however,thelanguagedefinitionisevolvingtowardsstatic\nnameresolution, at\u201ccompile\u201dtime, sodon\u2019trelyondynamicnameresolution! (Infact, localvariablesarealready\ndeterminedstatically.)\nAspecialquirkofPythonisthat\u2013ifnoglobalornonlocalstatementisineffect\u2013assignmentstonamesalways\ngointotheinnermostscope. Assignmentsdonotcopydata\u2014theyjustbindnamestoobjects. Thesameistruefor\ndeletions: thestatementdel xremovesthebindingofxfromthenamespacereferencedbythelocalscope. Infact,\nalloperationsthatintroducenewnamesusethelocalscope: inparticular,importstatementsandfunctiondefinitions\nbindthemoduleorfunctionnameinthelocalscope.\n1Exceptforonething. Moduleobjectshaveasecretread-onlyattributecalled__dict__whichreturnsthedictionaryusedtoimplement\nthemodule\u2019snamespace;thename__dict__isanattributebutnotaglobalname. Obviously,usingthisviolatestheabstractionofnamespace\nimplementation,andshouldberestrictedtothingslikepost-mortemdebuggers.\n74 Chapter9. Classes\nPythonTutorial,Release3.13.3\nTheglobalstatementcanbeusedtoindicatethatparticularvariablesliveintheglobalscopeandshouldberebound\nthere;thenonlocalstatementindicatesthatparticularvariablesliveinanenclosingscopeandshouldberebound\nthere.\n9.2.1 Scopes and Namespaces Example\nThis is an example demonstrating how to reference the different scopes and namespaces, and how global and\nnonlocalaffectvariablebinding:\ndef scope_test():\ndef do_local():\nspam = \"local spam\"\ndef do_nonlocal():\nnonlocal spam\nspam = \"nonlocal spam\"\ndef do_global():\nglobal spam\nspam = \"global spam\"\nspam = \"test spam\"\ndo_local()\nprint(\"After local assignment:\", spam)\ndo_nonlocal()\nprint(\"After nonlocal assignment:\", spam)\ndo_global()\nprint(\"After global assignment:\", spam)\nscope_test()\nprint(\"In global scope:\", spam)\nTheoutputoftheexamplecodeis:\nAfter local assignment: test spam\nAfter nonlocal assignment: nonlocal spam\nAfter global assignment: nonlocal spam\nIn global scope: global spam\nNotehowthelocalassignment(whichisdefault)didn\u2019tchangescope_test\u2019sbindingofspam. Thenonlocalassign-\nmentchangedscope_test\u2019sbindingofspam,andtheglobalassignmentchangedthemodule-levelbinding.\nYoucanalsoseethattherewasnopreviousbindingforspambeforetheglobalassignment.\n9.3 A First Look at Classes\nClassesintroducealittlebitofnewsyntax,threenewobjecttypes,andsomenewsemantics.\n9.3.1 Class Definition Syntax\nThesimplestformofclassdefinitionlookslikethis:\nclass ClassName:\n<statement-1>\n.\n.\n.\n<statement-N>\n9.3. AFirstLookatClasses 75\nPythonTutorial,Release3.13.3\nClassdefinitions,likefunctiondefinitions(defstatements)mustbeexecutedbeforetheyhaveanyeffect. (Youcould\nconceivablyplaceaclassdefinitioninabranchofanifstatement,orinsideafunction.)\nInpractice, thestatementsinsideaclassdefinitionwillusuallybefunctiondefinitions, butotherstatementsareal-\nlowed,andsometimesuseful\u2014we\u2019llcomebacktothislater. Thefunctiondefinitionsinsideaclassnormallyhave\napeculiarformofargumentlist,dictatedbythecallingconventionsformethods\u2014again,thisisexplainedlater.\nWhenaclassdefinitionisentered,anewnamespaceiscreated,andusedasthelocalscope\u2014thus,allassignments\ntolocalvariablesgointothisnewnamespace. Inparticular,functiondefinitionsbindthenameofthenewfunction\nhere.\nWhenaclassdefinitionisleftnormally(viatheend),aclassobjectiscreated. Thisisbasicallyawrapperaroundthe\ncontentsofthenamespacecreatedbytheclassdefinition;we\u2019lllearnmoreaboutclassobjectsinthenextsection. The\noriginallocalscope(theoneineffectjustbeforetheclassdefinitionwasentered)isreinstated,andtheclassobjectis\nboundheretotheclassnamegivenintheclassdefinitionheader(ClassNameintheexample).\n9.3.2 Class Objects\nClassobjectssupporttwokindsofoperations: attributereferencesandinstantiation.\nAttributereferences usethestandardsyntaxusedforallattributereferencesinPython: obj.name. Validattribute\nnamesareallthenamesthatwereintheclass\u2019snamespacewhentheclassobjectwascreated. So,iftheclassdefinition\nlookedlikethis:\nclass MyClass:\n\"\"\"A simple example class\"\"\"\ni = 12345\ndef f(self):\nreturn 'hello world'\nthenMyClass.iandMyClass.farevalidattributereferences,returninganintegerandafunctionobject,respec-\ntively. Classattributescanalsobeassignedto,soyoucanchangethevalueofMyClass.ibyassignment. __doc__\nisalsoavalidattribute,returningthedocstringbelongingtotheclass: \"A simple example class\".\nClassinstantiationusesfunctionnotation. Justpretendthattheclassobjectisaparameterlessfunctionthatreturnsa\nnewinstanceoftheclass. Forexample(assumingtheaboveclass):\nx = MyClass()\ncreatesanewinstanceoftheclassandassignsthisobjecttothelocalvariablex.\nTheinstantiationoperation(\u201ccalling\u201daclassobject)createsanemptyobject. Manyclassesliketocreateobjectswith\ninstancescustomizedtoaspecificinitialstate. Thereforeaclassmaydefineaspecialmethodnamed__init__(),\nlikethis:\ndef __init__(self):\nself.data = []\nWhenaclassdefinesan__init__()method,classinstantiationautomaticallyinvokes__init__()forthenewly\ncreatedclassinstance. Sointhisexample,anew,initializedinstancecanbeobtainedby:\nx = MyClass()\nOfcourse,the__init__()methodmayhaveargumentsforgreaterflexibility. Inthatcase,argumentsgiventothe\nclassinstantiationoperatorarepassedonto__init__(). Forexample,\n>>> class Complex:\n... def __init__(self, realpart, imagpart):\n... self.r = realpart\n... self.i = imagpart\n(continuesonnextpage)\n76 Chapter9. Classes\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n...\n>>> x = Complex(3.0, -4.5)\n>>> x.r, x.i\n(3.0, -4.5)\n9.3.3 Instance Objects\nNowwhatcanwedowithinstanceobjects? Theonlyoperationsunderstoodbyinstanceobjectsareattributerefer-\nences. Therearetwokindsofvalidattributenames: dataattributesandmethods.\ndataattributescorrespondto\u201cinstancevariables\u201dinSmalltalk,andto\u201cdatamembers\u201dinC++. Dataattributesneed\nnotbedeclared;likelocalvariables,theyspringintoexistencewhentheyarefirstassignedto. Forexample,ifxis\ntheinstanceofMyClasscreatedabove,thefollowingpieceofcodewillprintthevalue16,withoutleavingatrace:\nx.counter = 1\nwhile x.counter < 10:\nx.counter = x.counter * 2\nprint(x.counter)\ndel x.counter\nTheotherkindofinstanceattributereferenceisamethod. Amethodisafunctionthat\u201cbelongsto\u201danobject.\nValidmethodnamesofaninstanceobjectdependonitsclass. Bydefinition,allattributesofaclassthatarefunction\nobjects define corresponding methods of its instances. So in our example, x.f is a valid method reference, since\nMyClass.fisafunction,butx.iisnot,sinceMyClass.iisnot. Butx.fisnotthesamethingasMyClass.f\u2014\nitisamethodobject,notafunctionobject.\n9.3.4 Method Objects\nUsually,amethodiscalledrightafteritisbound:\nx.f()\nIntheMyClassexample,thiswillreturnthestring'hello world'. However,itisnotnecessarytocallamethod\nrightaway: x.fisamethodobject,andcanbestoredawayandcalledatalatertime. Forexample:\nxf = x.f\nwhile True:\nprint(xf())\nwillcontinuetoprinthello worlduntiltheendoftime.\nWhatexactlyhappenswhenamethodiscalled? Youmayhavenoticedthatx.f()wascalledwithoutanargument\nabove,eventhoughthefunctiondefinitionforf()specifiedanargument. Whathappenedtotheargument? Surely\nPythonraisesanexceptionwhenafunctionthatrequiresanargumentiscalledwithoutany\u2014eveniftheargument\nisn\u2019tactuallyused\u2026\nActually,youmayhaveguessedtheanswer: thespecialthingaboutmethodsisthattheinstanceobjectispassedasthe\nfirstargumentofthefunction. Inourexample,thecallx.f()isexactlyequivalenttoMyClass.f(x). Ingeneral,\ncallingamethodwithalistofnargumentsisequivalenttocallingthecorrespondingfunctionwithanargumentlist\nthatiscreatedbyinsertingthemethod\u2019sinstanceobjectbeforethefirstargument.\nIngeneral,methodsworkasfollows. Whenanon-dataattributeofaninstanceisreferenced,theinstance\u2019sclassis\nsearched. Ifthenamedenotesavalidclassattributethatisafunctionobject,referencestoboththeinstanceobject\nandthefunctionobjectarepackedintoamethodobject. Whenthemethodobjectiscalledwithanargumentlist,a\nnewargumentlistisconstructedfromtheinstanceobjectandtheargumentlist,andthefunctionobjectiscalledwith\nthisnewargumentlist.\n9.3. AFirstLookatClasses 77\nPythonTutorial,Release3.13.3\n9.3.5 Class and Instance Variables\nGenerallyspeaking,instancevariablesarefordatauniquetoeachinstanceandclassvariablesareforattributesand\nmethodssharedbyallinstancesoftheclass:\nclass Dog:\nkind = 'canine' # class variable shared by all instances\ndef __init__(self, name):\nself.name = name # instance variable unique to each instance\n>>> d = Dog('Fido')\n>>> e = Dog('Buddy')\n>>> d.kind # shared by all dogs\n'canine'\n>>> e.kind # shared by all dogs\n'canine'\n>>> d.name # unique to d\n'Fido'\n>>> e.name # unique to e\n'Buddy'\nAs discussed in A Word About Names and Objects, shared data can have possibly surprising effects with involving\nmutableobjectssuchaslistsanddictionaries. Forexample,thetrickslistinthefollowingcodeshouldnotbeusedas\naclassvariablebecausejustasinglelistwouldbesharedbyallDoginstances:\nclass Dog:\ntricks = [] # mistaken use of a class variable\ndef __init__(self, name):\nself.name = name\ndef add_trick(self, trick):\nself.tricks.append(trick)\n>>> d = Dog('Fido')\n>>> e = Dog('Buddy')\n>>> d.add_trick('roll over')\n>>> e.add_trick('play dead')\n>>> d.tricks # unexpectedly shared by all dogs\n['roll over', 'play dead']\nCorrectdesignoftheclassshoulduseaninstancevariableinstead:\nclass Dog:\ndef __init__(self, name):\nself.name = name\nself.tricks = [] # creates a new empty list for each dog\ndef add_trick(self, trick):\nself.tricks.append(trick)\n>>> d = Dog('Fido')\n>>> e = Dog('Buddy')\n>>> d.add_trick('roll over')\n(continuesonnextpage)\n78 Chapter9. Classes\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n>>> e.add_trick('play dead')\n>>> d.tricks\n['roll over']\n>>> e.tricks\n['play dead']\n9.4 Random Remarks\nIfthesameattributenameoccursinbothaninstanceandinaclass,thenattributelookupprioritizestheinstance:\n>>> class Warehouse:\n... purpose = 'storage'\n... region = 'west'\n...\n>>> w1 = Warehouse()\n>>> print(w1.purpose, w1.region)\nstorage west\n>>> w2 = Warehouse()\n>>> w2.region = 'east'\n>>> print(w2.purpose, w2.region)\nstorage east\nDataattributesmaybereferencedbymethodsaswellasbyordinaryusers(\u201cclients\u201d)ofanobject. Inotherwords,\nclassesarenotusabletoimplementpureabstractdatatypes. Infact,nothinginPythonmakesitpossibletoenforce\ndata hiding \u2014 it is all based upon convention. (On the other hand, the Python implementation, written in C, can\ncompletelyhideimplementationdetailsandcontrolaccesstoanobjectifnecessary;thiscanbeusedbyextensions\ntoPythonwritteninC.)\nClientsshouldusedataattributeswithcare\u2014clientsmaymessupinvariantsmaintainedbythemethodsbystamping\nontheirdataattributes. Notethatclientsmayadddataattributesoftheirowntoaninstanceobjectwithoutaffecting\nthevalidityofthemethods, aslongasnameconflictsareavoided\u2014again, anamingconventioncansavealotof\nheadacheshere.\nThere is no shorthand for referencing data attributes (or other methods!) from within methods. I find that this\nactuallyincreasesthereadabilityofmethods: thereisnochanceofconfusinglocalvariablesandinstancevariables\nwhenglancingthroughamethod.\nOften,thefirstargumentofamethodiscalledself. Thisisnothingmorethanaconvention: thenameselfhas\nabsolutelynospecialmeaningtoPython. Note,however,thatbynotfollowingtheconventionyourcodemaybeless\nreadabletootherPythonprogrammers,anditisalsoconceivablethataclassbrowserprogrammightbewrittenthat\nreliesuponsuchaconvention.\nAnyfunctionobjectthatisaclassattributedefinesamethodforinstancesofthatclass. Itisnotnecessarythatthe\nfunctiondefinitionistextuallyenclosedintheclassdefinition: assigningafunctionobjecttoalocalvariableinthe\nclassisalsook. Forexample:\n# Function defined outside the class\ndef f1(self, x, y):\nreturn min(x, x+y)\nclass C:\nf = f1\ndef g(self):\nreturn 'hello world'\nh = g\n9.4. RandomRemarks 79\nPythonTutorial,Release3.13.3\nNowf,gandhareallattributesofclassCthatrefertofunctionobjects,andconsequentlytheyareallmethodsof\ninstancesofC\u2014hbeingexactlyequivalenttog. Notethatthispracticeusuallyonlyservestoconfusethereaderof\naprogram.\nMethodsmaycallothermethodsbyusingmethodattributesoftheselfargument:\nclass Bag:\ndef __init__(self):\nself.data = []\ndef add(self, x):\nself.data.append(x)\ndef addtwice(self, x):\nself.add(x)\nself.add(x)\nMethods may reference global names in the same way as ordinary functions. The global scope associated with a\nmethodisthemodulecontainingitsdefinition. (Aclassisneverusedasaglobalscope.) Whileonerarelyencounters\nagoodreasonforusingglobaldatainamethod,therearemanylegitimateusesoftheglobalscope: foronething,\nfunctionsandmodulesimportedintotheglobalscopecanbeusedbymethods,aswellasfunctionsandclassesdefined\ninit. Usually,theclasscontainingthemethodisitselfdefinedinthisglobalscope,andinthenextsectionwe\u2019llfind\nsomegoodreasonswhyamethodwouldwanttoreferenceitsownclass.\nEachvalueisanobject,andthereforehasaclass(alsocalleditstype). Itisstoredasobject.__class__.\n9.5 Inheritance\nOfcourse,alanguagefeaturewouldnotbeworthyofthename\u201cclass\u201dwithoutsupportinginheritance. Thesyntax\nforaderivedclassdefinitionlookslikethis:\nclass DerivedClassName(BaseClassName):\n<statement-1>\n.\n.\n.\n<statement-N>\nThenameBaseClassNamemustbedefinedinanamespaceaccessiblefromthescopecontainingthederivedclass\ndefinition. Inplaceofabaseclassname,otherarbitraryexpressionsarealsoallowed. Thiscanbeuseful,forexample,\nwhenthebaseclassisdefinedinanothermodule:\nclass DerivedClassName(modname.BaseClassName):\nExecutionofaderivedclassdefinitionproceedsthesameasforabaseclass. Whentheclassobjectisconstructed,\nthe base class is remembered. This is used for resolving attribute references: if a requested attribute is not found\nintheclass, thesearchproceedstolookinthebaseclass. Thisruleisappliedrecursivelyifthebaseclassitselfis\nderivedfromsomeotherclass.\nThere\u2019snothingspecialaboutinstantiationofderivedclasses: DerivedClassName()createsanewinstanceofthe\nclass. Methodreferencesareresolvedasfollows: thecorrespondingclassattributeissearched,descendingdownthe\nchainofbaseclassesifnecessary,andthemethodreferenceisvalidifthisyieldsafunctionobject.\nDerivedclassesmayoverridemethodsoftheirbaseclasses. Becausemethodshavenospecialprivilegeswhencalling\nothermethodsofthesameobject,amethodofabaseclassthatcallsanothermethoddefinedinthesamebaseclass\nmayendupcallingamethodofaderivedclassthatoverridesit. (ForC++programmers: allmethodsinPythonare\neffectivelyvirtual.)\nAnoverridingmethodinaderivedclassmayinfactwanttoextendratherthansimplyreplacethebaseclassmethod\nof the same name. There is a simple way to call the base class method directly: just call BaseClassName.\n80 Chapter9. Classes\nPythonTutorial,Release3.13.3\nmethodname(self, arguments). This is occasionally useful to clients as well. (Note that this only works if\nthebaseclassisaccessibleasBaseClassNameintheglobalscope.)\nPythonhastwobuilt-infunctionsthatworkwithinheritance:\n\u2022 Use isinstance() to check an instance\u2019s type: isinstance(obj, int) will be True only if obj.\n__class__isintorsomeclassderivedfromint.\n\u2022 Useissubclass()tocheckclassinheritance: issubclass(bool, int)isTruesinceboolisasubclass\nofint. However,issubclass(float, int)isFalsesincefloatisnotasubclassofint.\n9.5.1 Multiple Inheritance\nPythonsupportsaformofmultipleinheritanceaswell. Aclassdefinitionwithmultiplebaseclasseslookslikethis:\nclass DerivedClassName(Base1, Base2, Base3):\n<statement-1>\n.\n.\n.\n<statement-N>\nFormostpurposes,inthesimplestcases,youcanthinkofthesearchforattributesinheritedfromaparentclassas\ndepth-first,left-to-right,notsearchingtwiceinthesameclasswherethereisanoverlapinthehierarchy. Thus,ifan\nattributeisnotfoundinDerivedClassName,itissearchedforinBase1,then(recursively)inthebaseclassesof\nBase1,andifitwasnotfoundthere,itwassearchedforinBase2,andsoon.\nInfact,itisslightlymorecomplexthanthat;themethodresolutionorderchangesdynamicallytosupportcooperative\ncallstosuper(). Thisapproachisknowninsomeothermultiple-inheritancelanguagesascall-next-methodandis\nmorepowerfulthanthesupercallfoundinsingle-inheritancelanguages.\nDynamicorderingisnecessarybecauseallcasesofmultipleinheritanceexhibitoneormorediamondrelationships\n(where at least one of the parent classes can be accessed through multiple paths from the bottommost class). For\nexample,allclassesinheritfromobject,soanycaseofmultipleinheritanceprovidesmorethanonepathtoreach\nobject. Tokeepthebaseclassesfrombeingaccessedmorethanonce,thedynamicalgorithmlinearizesthesearch\norderinawaythatpreservestheleft-to-rightorderingspecifiedineachclass,thatcallseachparentonlyonce,andthat\nismonotonic(meaningthataclasscanbesubclassedwithoutaffectingtheprecedenceorderofitsparents). Taken\ntogether, these properties make it possible to design reliable and extensible classes with multiple inheritance. For\nmoredetail,seepython_2.3_mro.\n9.6 Private Variables\n\u201cPrivate\u201dinstancevariablesthatcannotbeaccessedexceptfrominsideanobjectdon\u2019texistinPython. However,there\nisaconventionthatisfollowedbymostPythoncode: anameprefixedwithanunderscore(e.g. _spam)shouldbe\ntreatedasanon-publicpartoftheAPI(whetheritisafunction,amethodoradatamember). Itshouldbeconsidered\nanimplementationdetailandsubjecttochangewithoutnotice.\nSince there is a valid use-case for class-private members (namely to avoid name clashes of names with names\ndefined by subclasses), there is limited support for such a mechanism, called name mangling. Any identifier of\nthe form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with\n_classname__spam,whereclassnameisthecurrentclassnamewithleadingunderscore(s)stripped. Thisman-\nglingisdonewithoutregardtothesyntacticpositionoftheidentifier,aslongasitoccurswithinthedefinitionofa\nclass.\n(cid:181) Seealso\nTheprivatenamemanglingspecificationsfordetailsandspecialcases.\nName mangling is helpful for letting subclasses override methods without breaking intraclass method calls. For\nexample:\n9.6. PrivateVariables 81\nPythonTutorial,Release3.13.3\nclass Mapping:\ndef __init__(self, iterable):\nself.items_list = []\nself.__update(iterable)\ndef update(self, iterable):\nfor item in iterable:\nself.items_list.append(item)\n__update = update # private copy of original update() method\nclass MappingSubclass(Mapping):\ndef update(self, keys, values):\n# provides new signature for update()\n# but does not break __init__()\nfor item in zip(keys, values):\nself.items_list.append(item)\nThe above example would work even if MappingSubclass were to introduce a __update identifier since\nit is replaced with _Mapping__update in the Mapping class and _MappingSubclass__update in the\nMappingSubclassclassrespectively.\nNotethatthemanglingrulesaredesignedmostlytoavoidaccidents;itstillispossibletoaccessormodifyavariable\nthatisconsideredprivate. Thiscanevenbeusefulinspecialcircumstances,suchasinthedebugger.\nNoticethatcodepassedtoexec()oreval()doesnotconsidertheclassnameoftheinvokingclasstobethecurrent\nclass; thisissimilartotheeffectoftheglobalstatement,theeffectofwhichislikewiserestrictedtocodethatis\nbyte-compiledtogether. Thesamerestrictionappliestogetattr(),setattr()anddelattr(),aswellaswhen\nreferencing__dict__directly.\n9.7 Odds and Ends\nSometimesitisusefultohaveadatatypesimilartothePascal\u201crecord\u201dorC\u201cstruct\u201d,bundlingtogetherafewnamed\ndataitems. Theidiomaticapproachistousedataclassesforthispurpose:\nfrom dataclasses import dataclass\n@dataclass\nclass Employee:\nname: str\ndept: str\nsalary: int\n>>> john = Employee('john', 'computer lab', 1000)\n>>> john.dept\n'computer lab'\n>>> john.salary\n1000\nA piece of Python code that expects a particular abstract data type can often be passed a class that emulates the\nmethodsofthatdatatypeinstead. Forinstance,ifyouhaveafunctionthatformatssomedatafromafileobject,you\ncandefineaclasswithmethodsread()andreadline()thatgetthedatafromastringbufferinstead,andpassit\nasanargument.\nInstance method objects have attributes, too: m.__self__ is the instance object with the method m(), and m.\n__func__isthefunctionobjectcorrespondingtothemethod.\n82 Chapter9. Classes\nPythonTutorial,Release3.13.3\n9.8 Iterators\nBynowyouhaveprobablynoticedthatmostcontainerobjectscanbeloopedoverusingaforstatement:\nfor element in [1, 2, 3]:\nprint(element)\nfor element in (1, 2, 3):\nprint(element)\nfor key in {'one':1, 'two':2}:\nprint(key)\nfor char in \"123\":\nprint(char)\nfor line in open(\"myfile.txt\"):\nprint(line, end='')\nThis style of access is clear, concise, and convenient. The use of iterators pervades and unifies Python. Behind\nthe scenes, the for statement calls iter() on the container object. The function returns an iterator object that\ndefinesthemethod__next__()whichaccesseselementsinthecontaineroneatatime. Whentherearenomore\nelements,__next__()raisesaStopIterationexceptionwhichtellstheforlooptoterminate. Youcancallthe\n__next__()methodusingthenext()built-infunction;thisexampleshowshowitallworks:\n>>> s = 'abc'\n>>> it = iter(s)\n>>> it\n<str_iterator object at 0x10c90e650>\n>>> next(it)\n'a'\n>>> next(it)\n'b'\n>>> next(it)\n'c'\n>>> next(it)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nnext(it)\nStopIteration\nHavingseenthemechanicsbehindtheiteratorprotocol,itiseasytoadditeratorbehaviortoyourclasses. Definean\n__iter__()methodwhichreturnsanobjectwitha__next__()method. Iftheclassdefines__next__(),then\n__iter__()canjustreturnself:\nclass Reverse:\n\"\"\"Iterator for looping over a sequence backwards.\"\"\"\ndef __init__(self, data):\nself.data = data\nself.index = len(data)\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self.index == 0:\nraise StopIteration\nself.index = self.index - 1\nreturn self.data[self.index]\n>>> rev = Reverse('spam')\n>>> iter(rev)\n(continuesonnextpage)\n9.8. Iterators 83\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n<__main__.Reverse object at 0x00A1DB50>\n>>> for char in rev:\n... print(char)\n...\nm\na\np\ns\n9.9 Generators\nGeneratorsareasimpleandpowerfultoolforcreatingiterators. Theyarewrittenlikeregularfunctionsbutusethe\nyieldstatementwhenevertheywanttoreturndata. Eachtimenext()iscalledonit,thegeneratorresumeswhere\nitleftoff(itremembersallthedatavaluesandwhichstatementwaslastexecuted). Anexampleshowsthatgenerators\ncanbetriviallyeasytocreate:\ndef reverse(data):\nfor index in range(len(data)-1, -1, -1):\nyield data[index]\n>>> for char in reverse('golf'):\n... print(char)\n...\nf\nl\no\ng\nAnything that can be done with generators can also be done with class-based iterators as described in the previ-\nous section. What makes generators so compact is that the __iter__() and __next__() methods are created\nautomatically.\nAnotherkeyfeatureisthatthelocalvariablesandexecutionstateareautomaticallysavedbetweencalls. Thismade\nthefunctioneasiertowriteandmuchmoreclearthananapproachusinginstancevariableslikeself.indexand\nself.data.\nInadditiontoautomaticmethodcreationandsavingprogramstate, whengeneratorsterminate, theyautomatically\nraise StopIteration. In combination, these features make it easy to create iterators with no more effort than\nwritingaregularfunction.\n9.10 Generator Expressions\nSomesimplegeneratorscanbecodedsuccinctlyasexpressionsusingasyntaxsimilartolistcomprehensionsbutwith\nparentheses instead of square brackets. These expressions are designed for situations where the generator is used\nrightawaybyanenclosingfunction. Generatorexpressionsaremorecompactbutlessversatilethanfullgenerator\ndefinitionsandtendtobemorememoryfriendlythanequivalentlistcomprehensions.\nExamples:\n>>> sum(i*i for i in range(10)) # sum of squares\n285\n>>> xvec = [10, 20, 30]\n>>> yvec = [7, 5, 3]\n>>> sum(x*y for x,y in zip(xvec, yvec)) # dot product\n260\n(continuesonnextpage)\n84 Chapter9. Classes\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n>>> unique_words = set(word for line in page for word in line.split())\n>>> valedictorian = max((student.gpa, student.name) for student in graduates)\n>>> data = 'golf'\n>>> list(data[i] for i in range(len(data)-1, -1, -1))\n['f', 'l', 'o', 'g']\n9.10. GeneratorExpressions 85\nPythonTutorial,Release3.13.3\n86 Chapter9. Classes\nCHAPTER\nTEN\nBRIEF TOUR OF THE STANDARD LIBRARY\n10.1 Operating System Interface\nTheosmoduleprovidesdozensoffunctionsforinteractingwiththeoperatingsystem:\n>>> import os\n>>> os.getcwd() # Return the current working directory\n'C:\\\\Python313'\n>>> os.chdir('/server/accesslogs') # Change current working directory\n>>> os.system('mkdir today') # Run the command mkdir in the system shell\n0\nBesuretousetheimport osstyleinsteadoffrom os import *. Thiswillkeepos.open()fromshadowing\nthebuilt-inopen()functionwhichoperatesmuchdifferently.\nThebuilt-indir()andhelp()functionsareusefulasinteractiveaidsforworkingwithlargemoduleslikeos:\n>>> import os\n>>> dir(os)\n<returns a list of all module functions>\n>>> help(os)\n<returns an extensive manual page created from the module's docstrings>\nFordailyfileanddirectorymanagementtasks,theshutilmoduleprovidesahigherlevelinterfacethatiseasierto\nuse:\n>>> import shutil\n>>> shutil.copyfile('data.db', 'archive.db')\n'archive.db'\n>>> shutil.move('/build/executables', 'installdir')\n'installdir'\n10.2 File Wildcards\nTheglobmoduleprovidesafunctionformakingfilelistsfromdirectorywildcardsearches:\n>>> import glob\n>>> glob.glob('*.py')\n['primes.py', 'random.py', 'quote.py']\n10.3 Command Line Arguments\nCommon utility scripts often need to process command line arguments. These arguments are stored in the sys\nmodule\u2019sargvattributeasalist. Forinstance,let\u2019stakethefollowingdemo.pyfile:\n87\nPythonTutorial,Release3.13.3\n# File demo.py\nimport sys\nprint(sys.argv)\nHereistheoutputfromrunningpython demo.py one two threeatthecommandline:\n['demo.py', 'one', 'two', 'three']\nTheargparsemoduleprovidesamoresophisticatedmechanismtoprocesscommandlinearguments. Thefollowing\nscriptextractsoneormorefilenamesandanoptionalnumberoflinestobedisplayed:\nimport argparse\nparser = argparse.ArgumentParser(\nprog='top',\ndescription='Show top lines from each file')\nparser.add_argument('filenames', nargs='+')\nparser.add_argument('-l', '--lines', type=int, default=10)\nargs = parser.parse_args()\nprint(args)\nWhenrunatthecommandlinewithpython top.py --lines=5 alpha.txt beta.txt,thescriptsetsargs.\nlinesto5andargs.filenamesto['alpha.txt', 'beta.txt'].\n10.4 Error Output Redirection and Program Termination\nThesysmodulealsohasattributesforstdin,stdout,andstderr. Thelatterisusefulforemittingwarningsanderror\nmessagestomakethemvisibleevenwhenstdouthasbeenredirected:\n>>> sys.stderr.write('Warning, log file not found starting a new one\\n')\nWarning, log file not found starting a new one\nThemostdirectwaytoterminateascriptistousesys.exit().\n10.5 String Pattern Matching\nTheremoduleprovidesregularexpressiontoolsforadvancedstringprocessing. Forcomplexmatchingandmanip-\nulation,regularexpressionsoffersuccinct,optimizedsolutions:\n>>> import re\n>>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n['foot', 'fell', 'fastest']\n>>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n'cat in the hat'\nWhenonlysimplecapabilitiesareneeded,stringmethodsarepreferredbecausetheyareeasiertoreadanddebug:\n>>> 'tea for too'.replace('too', 'two')\n'tea for two'\n10.6 Mathematics\nThemathmodulegivesaccesstotheunderlyingClibraryfunctionsforfloating-pointmath:\n88 Chapter10. BriefTouroftheStandardLibrary\nPythonTutorial,Release3.13.3\n>>> import math\n>>> math.cos(math.pi / 4)\n0.70710678118654757\n>>> math.log(1024, 2)\n10.0\nTherandommoduleprovidestoolsformakingrandomselections:\n>>> import random\n>>> random.choice(['apple', 'pear', 'banana'])\n'apple'\n>>> random.sample(range(100), 10) # sampling without replacement\n[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n>>> random.random() # random float from the interval [0.0, 1.0)\n0.17970987693706186\n>>> random.randrange(6) # random integer chosen from range(6)\n4\nThestatisticsmodulecalculatesbasicstatisticalproperties(themean,median,variance,etc.) ofnumericdata:\n>>> import statistics\n>>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n>>> statistics.mean(data)\n1.6071428571428572\n>>> statistics.median(data)\n1.25\n>>> statistics.variance(data)\n1.3720238095238095\nTheSciPyproject<https://scipy.org>hasmanyothermodulesfornumericalcomputations.\n10.7 Internet Access\nThereareanumberofmodulesforaccessingtheinternetandprocessinginternetprotocols. Twoofthesimplestare\nurllib.requestforretrievingdatafromURLsandsmtplibforsendingmail:\n>>> from urllib.request import urlopen\n>>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as response:\n... for line in response:\n... line = line.decode() # Convert bytes to a str\n... if line.startswith('datetime'):\n... print(line.rstrip()) # Remove trailing newline\n...\ndatetime: 2022-01-01T01:36:47.689215+00:00\n>>> import smtplib\n>>> server = smtplib.SMTP('localhost')\n>>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n... \"\"\"To: jcaesar@example.org\n... From: soothsayer@example.org\n...\n... Beware the Ides of March.\n... \"\"\")\n>>> server.quit()\n(Notethatthesecondexampleneedsamailserverrunningonlocalhost.)\n10.7. InternetAccess 89\nPythonTutorial,Release3.13.3\n10.8 Dates and Times\nThedatetimemodulesuppliesclassesformanipulatingdatesandtimesinbothsimpleandcomplexways. While\ndateandtimearithmeticissupported,thefocusoftheimplementationisonefficientmemberextractionforoutput\nformattingandmanipulation. Themodulealsosupportsobjectsthataretimezoneaware.\n>>> # dates are easily constructed and formatted\n>>> from datetime import date\n>>> now = date.today()\n>>> now\ndatetime.date(2003, 12, 2)\n>>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n>>> # dates support calendar arithmetic\n>>> birthday = date(1964, 7, 31)\n>>> age = now - birthday\n>>> age.days\n14368\n10.9 Data Compression\nCommondataarchivingandcompressionformatsaredirectlysupportedbymodulesincluding: zlib,gzip,bz2,\nlzma,zipfileandtarfile.\n>>> import zlib\n>>> s = b'witch which has which witches wrist watch'\n>>> len(s)\n41\n>>> t = zlib.compress(s)\n>>> len(t)\n37\n>>> zlib.decompress(t)\nb'witch which has which witches wrist watch'\n>>> zlib.crc32(s)\n226805979\n10.10 Performance Measurement\nSomePythonusersdevelopadeepinterestinknowingtherelativeperformanceofdifferentapproachestothesame\nproblem. Pythonprovidesameasurementtoolthatanswersthosequestionsimmediately.\nForexample,itmaybetemptingtousethetuplepackingandunpackingfeatureinsteadofthetraditionalapproach\ntoswappingarguments. Thetimeitmodulequicklydemonstratesamodestperformanceadvantage:\n>>> from timeit import Timer\n>>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n0.57535828626024577\n>>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n0.54962537085770791\nIn contrast to timeit\u2019s fine level of granularity, the profile and pstats modules provide tools for identifying\ntimecriticalsectionsinlargerblocksofcode.\n90 Chapter10. BriefTouroftheStandardLibrary\nPythonTutorial,Release3.13.3\n10.11 Quality Control\nOne approach for developing high quality software is to write tests for each function as it is developed and to run\nthosetestsfrequentlyduringthedevelopmentprocess.\nThedoctestmoduleprovidesatoolforscanningamoduleandvalidatingtestsembeddedinaprogram\u2019sdocstrings.\nTest construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This\nimprovesthedocumentationbyprovidingtheuserwithanexampleanditallowsthedoctestmoduletomakesure\nthecoderemainstruetothedocumentation:\ndef average(values):\n\"\"\"Computes the arithmetic mean of a list of numbers.\n>>> print(average([20, 30, 70]))\n40.0\n\"\"\"\nreturn sum(values) / len(values)\nimport doctest\ndoctest.testmod() # automatically validate the embedded tests\nTheunittestmoduleisnotaseffortlessasthedoctestmodule,butitallowsamorecomprehensivesetoftests\ntobemaintainedinaseparatefile:\nimport unittest\nclass TestStatisticalFunctions(unittest.TestCase):\ndef test_average(self):\nself.assertEqual(average([20, 30, 70]), 40.0)\nself.assertEqual(round(average([1, 5, 7]), 1), 4.3)\nwith self.assertRaises(ZeroDivisionError):\naverage([])\nwith self.assertRaises(TypeError):\naverage(20, 30, 70)\nunittest.main() # Calling from the command line invokes all tests\n10.12 Batteries Included\nPythonhasa\u201cbatteriesincluded\u201dphilosophy. Thisisbestseenthroughthesophisticatedandrobustcapabilitiesof\nitslargerpackages. Forexample:\n\u2022 The xmlrpc.client and xmlrpc.server modules make implementing remote procedure calls into an\nalmosttrivialtask. Despitethemodules\u2019names,nodirectknowledgeorhandlingofXMLisneeded.\n\u2022 Theemailpackageisalibraryformanagingemailmessages,includingMIMEandotherRFC2822-based\nmessagedocuments. Unlikesmtplibandpoplibwhichactuallysendandreceivemessages,theemailpack-\nagehasacompletetoolsetforbuildingordecodingcomplexmessagestructures(includingattachments)and\nforimplementinginternetencodingandheaderprotocols.\n\u2022 Thejsonpackageprovidesrobustsupportforparsingthispopulardatainterchangeformat. Thecsvmod-\nulesupportsdirectreadingandwritingoffilesinComma-SeparatedValueformat, commonlysupportedby\ndatabasesandspreadsheets. XMLprocessingissupportedbythexml.etree.ElementTree,xml.domand\nxml.saxpackages. Together,thesemodulesandpackagesgreatlysimplifydatainterchangebetweenPython\napplicationsandothertools.\n\u2022 Thesqlite3moduleisawrapperfortheSQLitedatabaselibrary,providingapersistentdatabasethatcan\nbeupdatedandaccessedusingslightlynonstandardSQLsyntax.\n10.11. QualityControl 91\nPythonTutorial,Release3.13.3\n\u2022 Internationalizationissupportedbyanumberofmodulesincludinggettext,locale,andthecodecspack-\nage.\n92 Chapter10. BriefTouroftheStandardLibrary\nCHAPTER\nELEVEN\nBRIEF TOUR OF THE STANDARD LIBRARY \u2014 PART II\nThissecondtourcoversmoreadvancedmodulesthatsupportprofessionalprogrammingneeds. Thesemodulesrarely\noccurinsmallscripts.\n11.1 Output Formatting\nThereprlibmoduleprovidesaversionofrepr()customizedforabbreviateddisplaysoflargeordeeplynested\ncontainers:\n>>> import reprlib\n>>> reprlib.repr(set('supercalifragilisticexpialidocious'))\n\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\"\nThepprintmoduleoffersmoresophisticatedcontroloverprintingbothbuilt-inanduserdefinedobjectsinaway\nthatisreadablebytheinterpreter. Whentheresultislongerthanoneline,the\u201cprettyprinter\u201daddslinebreaksand\nindentationtomoreclearlyrevealdatastructure:\n>>> import pprint\n>>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n... 'yellow'], 'blue']]]\n...\n>>> pprint.pprint(t, width=30)\n[[[['black', 'cyan'],\n'white',\n['green', 'red']],\n[['magenta', 'yellow'],\n'blue']]]\nThetextwrapmoduleformatsparagraphsoftexttofitagivenscreenwidth:\n>>> import textwrap\n>>> doc = \"\"\"The wrap() method is just like fill() except that it returns\n... a list of strings instead of one big string with newlines to separate\n... the wrapped lines.\"\"\"\n...\n>>> print(textwrap.fill(doc, width=40))\nThe wrap() method is just like fill()\nexcept that it returns a list of strings\ninstead of one big string with newlines\nto separate the wrapped lines.\nThelocalemoduleaccessesadatabaseofculturespecificdataformats. Thegroupingattributeoflocale\u2019sformat\nfunctionprovidesadirectwayofformattingnumberswithgroupseparators:\n93\nPythonTutorial,Release3.13.3\n>>> import locale\n>>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')\n'English_United States.1252'\n>>> conv = locale.localeconv() # get a mapping of conventions\n>>> x = 1234567.8\n>>> locale.format_string(\"%d\", x, grouping=True)\n'1,234,567'\n>>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'],\n... conv['frac_digits'], x), grouping=True)\n'$1,234,567.80'\n11.2 Templating\nThestringmoduleincludesaversatileTemplateclasswithasimplifiedsyntaxsuitableforeditingbyend-users.\nThisallowsuserstocustomizetheirapplicationswithouthavingtoaltertheapplication.\nTheformatusesplaceholdernamesformedby$withvalidPythonidentifiers(alphanumericcharactersandunder-\nscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no\ninterveningspaces. Writing$$createsasingleescaped$:\n>>> from string import Template\n>>> t = Template('${village}folk send $$10 to $cause.')\n>>> t.substitute(village='Nottingham', cause='the ditch fund')\n'Nottinghamfolk send $10 to the ditch fund.'\nThe substitute() method raises a KeyError when a placeholder is not supplied in a dictionary or a keyword\nargument. Formail-mergestyleapplications,usersupplieddatamaybeincompleteandthesafe_substitute()\nmethodmaybemoreappropriate\u2014itwillleaveplaceholdersunchangedifdataismissing:\n>>> t = Template('Return the $item to $owner.')\n>>> d = dict(item='unladen swallow')\n>>> t.substitute(d)\nTraceback (most recent call last):\n...\nKeyError: 'owner'\n>>> t.safe_substitute(d)\n'Return the unladen swallow to $owner.'\nTemplatesubclassescanspecifyacustomdelimiter. Forexample,abatchrenamingutilityforaphotobrowsermay\nelecttousepercentsignsforplaceholderssuchasthecurrentdate,imagesequencenumber,orfileformat:\n>>> import time, os.path\n>>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']\n>>> class BatchRename(Template):\n... delimiter = '%'\n...\n>>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format): ')\nEnter rename style (%d-date %n-seqnum %f-format): Ashley_%n%f\n>>> t = BatchRename(fmt)\n>>> date = time.strftime('%d%b%y')\n>>> for i, filename in enumerate(photofiles):\n... base, ext = os.path.splitext(filename)\n... newname = t.substitute(d=date, n=i, f=ext)\n... print('{0} --> {1}'.format(filename, newname))\nimg_1074.jpg --> Ashley_0.jpg\n(continuesonnextpage)\n94 Chapter11. BriefTouroftheStandardLibrary\u2014PartII\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nimg_1076.jpg --> Ashley_1.jpg\nimg_1077.jpg --> Ashley_2.jpg\nAnother application for templating is separating program logic from the details of multiple output formats. This\nmakesitpossibletosubstitutecustomtemplatesforXMLfiles,plaintextreports,andHTMLwebreports.\n11.3 Working with Binary Data Record Layouts\nThe struct module provides pack() and unpack() functions for working with variable length binary record\nformats. The following example shows how to loop through header information in a ZIP file without using the\nzipfilemodule. Packcodes\"H\"and\"I\"representtwoandfourbyteunsignednumbersrespectively. The\"<\"\nindicatesthattheyarestandardsizeandinlittle-endianbyteorder:\nimport struct\nwith open('myfile.zip', 'rb') as f:\ndata = f.read()\nstart = 0\nfor i in range(3): # show the first 3 file headers\nstart += 14\nfields = struct.unpack('<IIIHH', data[start:start+16])\ncrc32, comp_size, uncomp_size, filenamesize, extra_size = fields\nstart += 16\nfilename = data[start:start+filenamesize]\nstart += filenamesize\nextra = data[start:start+extra_size]\nprint(filename, hex(crc32), comp_size, uncomp_size)\nstart += extra_size + comp_size # skip to the next header\n11.4 Multi-threading\nThreadingisatechniquefordecouplingtaskswhicharenotsequentiallydependent. Threadscanbeusedtoimprove\ntheresponsivenessofapplicationsthatacceptuserinputwhileothertasksruninthebackground. Arelatedusecase\nisrunningI/Oinparallelwithcomputationsinanotherthread.\nThefollowingcodeshowshowthehighlevelthreadingmodulecanruntasksinbackgroundwhilethemainprogram\ncontinuestorun:\nimport threading, zipfile\nclass AsyncZip(threading.Thread):\ndef __init__(self, infile, outfile):\nthreading.Thread.__init__(self)\nself.infile = infile\nself.outfile = outfile\ndef run(self):\nf = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)\nf.write(self.infile)\nf.close()\nprint('Finished background zip of:', self.infile)\n(continuesonnextpage)\n11.3. WorkingwithBinaryDataRecordLayouts 95\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nbackground = AsyncZip('mydata.txt', 'myarchive.zip')\nbackground.start()\nprint('The main program continues to run in foreground.')\nbackground.join() # Wait for the background task to finish\nprint('Main program waited until background was done.')\nTheprincipalchallengeofmulti-threadedapplicationsiscoordinatingthreadsthatsharedataorotherresources. To\nthatend, thethreading module providesa numberof synchronization primitivesincluding locks, events, condition\nvariables,andsemaphores.\nWhile those tools are powerful, minor design errors can result in problems that are difficult to reproduce. So, the\npreferredapproachtotaskcoordinationistoconcentrateallaccesstoaresourceinasinglethreadandthenusethe\nqueuemoduletofeedthatthreadwithrequestsfromotherthreads. ApplicationsusingQueueobjectsforinter-thread\ncommunicationandcoordinationareeasiertodesign,morereadable,andmorereliable.\n11.5 Logging\nTheloggingmoduleoffersafullfeaturedandflexibleloggingsystem. Atitssimplest,logmessagesaresenttoa\nfileortosys.stderr:\nimport logging\nlogging.debug('Debugging information')\nlogging.info('Informational message')\nlogging.warning('Warning:config file %s not found', 'server.conf')\nlogging.error('Error occurred')\nlogging.critical('Critical error -- shutting down')\nThisproducesthefollowingoutput:\nWARNING:root:Warning:config file server.conf not found\nERROR:root:Error occurred\nCRITICAL:root:Critical error -- shutting down\nBy default, informational and debugging messages are suppressed and the output is sent to standard error. Other\noutputoptionsincluderoutingmessagesthroughemail,datagrams,sockets,ortoanHTTPServer. Newfilterscan\nselectdifferentroutingbasedonmessagepriority: DEBUG,INFO,WARNING,ERROR,andCRITICAL.\nTheloggingsystemcanbeconfigureddirectlyfromPythonorcanbeloadedfromausereditableconfigurationfile\nforcustomizedloggingwithoutalteringtheapplication.\n11.6 Weak References\nPythondoesautomaticmemorymanagement(referencecountingformostobjectsandgarbagecollectiontoeliminate\ncycles). Thememoryisfreedshortlyafterthelastreferencetoithasbeeneliminated.\nThisapproachworksfineformostapplicationsbutoccasionallythereisaneedtotrackobjectsonlyaslongasthey\narebeingusedbysomethingelse. Unfortunately,justtrackingthemcreatesareferencethatmakesthempermanent.\nTheweakrefmoduleprovidestoolsfortrackingobjectswithoutcreatingareference. Whentheobjectisnolonger\nneeded, it is automatically removed from a weakref table and a callback is triggered for weakref objects. Typical\napplicationsincludecachingobjectsthatareexpensivetocreate:\n>>> import weakref, gc\n>>> class A:\n... def __init__(self, value):\n... self.value = value\n... def __repr__(self):\n(continuesonnextpage)\n96 Chapter11. BriefTouroftheStandardLibrary\u2014PartII\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n... return str(self.value)\n...\n>>> a = A(10) # create a reference\n>>> d = weakref.WeakValueDictionary()\n>>> d['primary'] = a # does not create a reference\n>>> d['primary'] # fetch the object if it is still alive\n10\n>>> del a # remove the one reference\n>>> gc.collect() # run garbage collection right away\n0\n>>> d['primary'] # entry was automatically removed\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nd['primary'] # entry was automatically removed\nFile \"C:/python313/lib/weakref.py\", line 46, in __getitem__\no = self.data[key]()\nKeyError: 'primary'\n11.7 Tools for Working with Lists\nManydatastructureneedscanbemetwiththebuilt-inlisttype. However,sometimesthereisaneedforalternative\nimplementationswithdifferentperformancetrade-offs.\nThearraymoduleprovidesanarrayobjectthatislikealistthatstoresonlyhomogeneousdataandstoresitmore\ncompactly. Thefollowingexampleshowsanarrayofnumbersstoredastwobyteunsignedbinarynumbers(typecode\n\"H\")ratherthantheusual16bytesperentryforregularlistsofPythonintobjects:\n>>> from array import array\n>>> a = array('H', [4000, 10, 700, 22222])\n>>> sum(a)\n26932\n>>> a[1:3]\narray('H', [10, 700])\nThe collections module provides a deque object that is like a list with faster appends and pops from the left\nsidebutslowerlookupsinthemiddle. Theseobjectsarewellsuitedforimplementingqueuesandbreadthfirsttree\nsearches:\n>>> from collections import deque\n>>> d = deque([\"task1\", \"task2\", \"task3\"])\n>>> d.append(\"task4\")\n>>> print(\"Handling\", d.popleft())\nHandling task1\nunsearched = deque([starting_node])\ndef breadth_first_search(unsearched):\nnode = unsearched.popleft()\nfor m in gen_moves(node):\nif is_goal(m):\nreturn m\nunsearched.append(m)\nIn addition to alternative list implementations, the library also offers other tools such as the bisect module with\nfunctionsformanipulatingsortedlists:\n11.7. ToolsforWorkingwithLists 97\nPythonTutorial,Release3.13.3\n>>> import bisect\n>>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]\n>>> bisect.insort(scores, (300, 'ruby'))\n>>> scores\n[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]\nThe heapq module provides functions for implementing heaps based on regular lists. The lowest valued entry is\nalwayskeptatpositionzero. Thisisusefulforapplicationswhichrepeatedlyaccessthesmallestelementbutdonot\nwanttorunafulllistsort:\n>>> from heapq import heapify, heappop, heappush\n>>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n>>> heapify(data) # rearrange the list into heap order\n>>> heappush(data, -5) # add a new entry\n>>> [heappop(data) for i in range(3)] # fetch the three smallest entries\n[-5, 0, 1]\n11.8 Decimal Floating-Point Arithmetic\nThe decimal module offers a Decimal datatype for decimal floating-point arithmetic. Compared to the built-in\nfloatimplementationofbinaryfloatingpoint,theclassisespeciallyhelpfulfor\n\u2022 financialapplicationsandotheruseswhichrequireexactdecimalrepresentation,\n\u2022 controloverprecision,\n\u2022 controloverroundingtomeetlegalorregulatoryrequirements,\n\u2022 trackingofsignificantdecimalplaces,or\n\u2022 applicationswheretheuserexpectstheresultstomatchcalculationsdonebyhand.\nFor example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and\nbinaryfloatingpoint. Thedifferencebecomessignificantiftheresultsareroundedtothenearestcent:\n>>> from decimal import *\n>>> round(Decimal('0.70') * Decimal('1.05'), 2)\nDecimal('0.74')\n>>> round(.70 * 1.05, 2)\n0.73\nTheDecimalresultkeepsatrailingzero,automaticallyinferringfourplacesignificancefrommultiplicandswithtwo\nplacesignificance. Decimalreproducesmathematicsasdonebyhandandavoidsissuesthatcanarisewhenbinary\nfloatingpointcannotexactlyrepresentdecimalquantities.\nExactrepresentationenablestheDecimalclasstoperformmodulocalculationsandequalityteststhatareunsuitable\nforbinaryfloatingpoint:\n>>> Decimal('1.00') % Decimal('.10')\nDecimal('0.00')\n>>> 1.00 % 0.10\n0.09999999999999995\n>>> sum([Decimal('0.1')]*10) == Decimal('1.0')\nTrue\n>>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\nFalse\nThedecimalmoduleprovidesarithmeticwithasmuchprecisionasneeded:\n98 Chapter11. BriefTouroftheStandardLibrary\u2014PartII\nPythonTutorial,Release3.13.3\n>>> getcontext().prec = 36\n>>> Decimal(1) / Decimal(7)\nDecimal('0.142857142857142857142857142857142857')\n11.8. DecimalFloating-PointArithmetic 99\nPythonTutorial,Release3.13.3\n100 Chapter11. BriefTouroftheStandardLibrary\u2014PartII\nCHAPTER\nTWELVE\nVIRTUAL ENVIRONMENTS AND PACKAGES\n12.1 Introduction\nPythonapplicationswilloftenusepackagesandmodulesthatdon\u2019tcomeaspartofthestandardlibrary. Applications\nwillsometimesneedaspecificversionofalibrary,becausetheapplicationmayrequirethataparticularbughasbeen\nfixedortheapplicationmaybewrittenusinganobsoleteversionofthelibrary\u2019sinterface.\nThis means it may not be possible for one Python installation to meet the requirements of every application. If\napplicationAneedsversion1.0ofaparticularmodulebutapplicationBneedsversion2.0,thentherequirementsare\ninconflictandinstallingeitherversion1.0or2.0willleaveoneapplicationunabletorun.\nThesolutionforthisproblemistocreateavirtualenvironment,aself-containeddirectorytreethatcontainsaPython\ninstallationforaparticularversionofPython,plusanumberofadditionalpackages.\nDifferent applications can then use different virtual environments. To resolve the earlier example of conflicting\nrequirements,applicationAcanhaveitsownvirtualenvironmentwithversion1.0installedwhileapplicationBhas\nanothervirtualenvironmentwithversion2.0. IfapplicationBrequiresalibrarybeupgradedtoversion3.0,thiswill\nnotaffectapplicationA\u2019senvironment.\n12.2 Creating Virtual Environments\nThe module used to create and manage virtual environments is called venv. venv will install the Python version\nfromwhichthecommandwasrun(asreportedbythe--versionoption). Forinstance, executingthecommand\nwithpython3.12willinstallversion3.12.\nTocreateavirtualenvironment,decideuponadirectorywhereyouwanttoplaceit,andrunthevenvmoduleasa\nscriptwiththedirectorypath:\npython -m venv tutorial-env\nThiswillcreatethetutorial-envdirectoryifitdoesn\u2019texist,andalsocreatedirectoriesinsideitcontainingacopy\nofthePythoninterpreterandvarioussupportingfiles.\nAcommondirectorylocationforavirtualenvironmentis.venv. Thisnamekeepsthedirectorytypicallyhidden\ninyourshellandthusoutofthewaywhilegivingitanamethatexplainswhythedirectoryexists. Italsoprevents\nclashingwith.envenvironmentvariabledefinitionfilesthatsometoolingsupports.\nOnceyou\u2019vecreatedavirtualenvironment,youmayactivateit.\nOnWindows,run:\ntutorial-env\\Scripts\\activate\nOnUnixorMacOS,run:\nsource tutorial-env/bin/activate\n(Thisscriptiswrittenforthebashshell. Ifyouusethecshorfishshells,therearealternateactivate.cshand\nactivate.fishscriptsyoushoulduseinstead.)\n101\nPythonTutorial,Release3.13.3\nActivatingthevirtualenvironmentwillchangeyourshell\u2019spromptto showwhatvirtualenvironmentyou\u2019reusing,\nandmodifytheenvironmentsothatrunningpythonwillgetyouthatparticularversionandinstallationofPython.\nForexample:\n$ source ~/envs/tutorial-env/bin/activate\n(tutorial-env) $ python\nPython 3.5.1 (default, May 6 2016, 10:59:36)\n...\n>>> import sys\n>>> sys.path\n['', '/usr/local/lib/python35.zip', ...,\n'~/envs/tutorial-env/lib/python3.5/site-packages']\n>>>\nTodeactivateavirtualenvironment,type:\ndeactivate\nintotheterminal.\n12.3 Managing Packages with pip\nYoucaninstall,upgrade,andremovepackagesusingaprogramcalledpip. Bydefaultpipwillinstallpackagesfrom\nthePythonPackageIndex. YoucanbrowsethePythonPackageIndexbygoingtoitinyourwebbrowser.\npip has a number of subcommands: \u201cinstall\u201d, \u201cuninstall\u201d, \u201cfreeze\u201d, etc. (Consult the installing-index guide for\ncompletedocumentationforpip.)\nYoucaninstallthelatestversionofapackagebyspecifyingapackage\u2019sname:\n(tutorial-env) $ python -m pip install novas\nCollecting novas\nDownloading novas-3.1.1.3.tar.gz (136kB)\nInstalling collected packages: novas\nRunning setup.py install for novas\nSuccessfully installed novas-3.1.1.3\nYou can also install a specific version of a package by giving the package name followed by == and the version\nnumber:\n(tutorial-env) $ python -m pip install requests==2.6.0\nCollecting requests==2.6.0\nUsing cached requests-2.6.0-py2.py3-none-any.whl\nInstalling collected packages: requests\nSuccessfully installed requests-2.6.0\nIfyoure-runthiscommand,pipwillnoticethattherequestedversionisalreadyinstalledanddonothing. Youcan\nsupplya differentversionnumberto getthatversion, oryoucanrun python -m pip install --upgrade to\nupgradethepackagetothelatestversion:\n(tutorial-env) $ python -m pip install --upgrade requests\nCollecting requests\nInstalling collected packages: requests\nFound existing installation: requests 2.6.0\nUninstalling requests-2.6.0:\nSuccessfully uninstalled requests-2.6.0\nSuccessfully installed requests-2.7.0\npython -m pip uninstallfollowedbyoneormorepackagenameswillremovethepackagesfromthevirtual\nenvironment.\n102 Chapter12. VirtualEnvironmentsandPackages\nPythonTutorial,Release3.13.3\npython -m pip showwilldisplayinformationaboutaparticularpackage:\n(tutorial-env) $ python -m pip show requests\n---\nMetadata-Version: 2.0\nName: requests\nVersion: 2.7.0\nSummary: Python HTTP for Humans.\nHome-page: http://python-requests.org\nAuthor: Kenneth Reitz\nAuthor-email: me@kennethreitz.com\nLicense: Apache 2.0\nLocation: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages\nRequires:\npython -m pip listwilldisplayallofthepackagesinstalledinthevirtualenvironment:\n(tutorial-env) $ python -m pip list\nnovas (3.1.1.3)\nnumpy (1.9.2)\npip (7.0.3)\nrequests (2.7.0)\nsetuptools (16.0)\npython -m pip freezewillproduceasimilarlistoftheinstalledpackages,buttheoutputusestheformatthat\npython -m pip installexpects. Acommonconventionistoputthislistinarequirements.txtfile:\n(tutorial-env) $ python -m pip freeze > requirements.txt\n(tutorial-env) $ cat requirements.txt\nnovas==3.1.1.3\nnumpy==1.9.2\nrequests==2.7.0\nTherequirements.txtcanthenbecommittedtoversioncontrolandshippedaspartofanapplication. Userscan\ntheninstallallthenecessarypackageswithinstall -r:\n(tutorial-env) $ python -m pip install -r requirements.txt\nCollecting novas==3.1.1.3 (from -r requirements.txt (line 1))\n...\nCollecting numpy==1.9.2 (from -r requirements.txt (line 2))\n...\nCollecting requests==2.7.0 (from -r requirements.txt (line 3))\n...\nInstalling collected packages: novas, numpy, requests\nRunning setup.py install for novas\nSuccessfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0\npiphasmanymoreoptions. Consulttheinstalling-indexguideforcompletedocumentationforpip. Whenyou\u2019ve\nwritten a package and want to make it available on the Python Package Index, consult the Python packaging user\nguide.\n12.3. ManagingPackageswithpip 103\nPythonTutorial,Release3.13.3\n104 Chapter12. VirtualEnvironmentsandPackages\nCHAPTER\nTHIRTEEN\nWHAT NOW?\nReadingthistutorialhasprobablyreinforcedyourinterestinusingPython\u2014youshouldbeeagertoapplyPythonto\nsolvingyourreal-worldproblems. Whereshouldyougotolearnmore?\nThistutorialispartofPython\u2019sdocumentationset. Someotherdocumentsinthesetare:\n\u2022 library-index:\nYoushouldbrowsethroughthismanual,whichgivescomplete(thoughterse)referencematerialabouttypes,\nfunctions,andthemodulesinthestandardlibrary. ThestandardPythondistributionincludesalotofadditional\ncode. TherearemodulestoreadUnixmailboxes,retrievedocumentsviaHTTP,generaterandomnumbers,\nparsecommand-lineoptions,compressdata,andmanyothertasks. SkimmingthroughtheLibraryReference\nwillgiveyouanideaofwhat\u2019savailable.\n\u2022 installing-indexexplainshowtoinstalladditionalmoduleswrittenbyotherPythonusers.\n\u2022 reference-index: AdetailedexplanationofPython\u2019ssyntaxandsemantics. It\u2019sheavyreading,butisusefulas\nacompleteguidetothelanguageitself.\nMorePythonresources:\n\u2022 https://www.python.org: ThemajorPythonwebsite. Itcontainscode,documentation,andpointerstoPython-\nrelatedpagesaroundtheweb.\n\u2022 https://docs.python.org: FastaccesstoPython\u2019sdocumentation.\n\u2022 https://pypi.org: ThePythonPackageIndex,previouslyalsonicknamedtheCheeseShop1,isanindexofuser-\ncreatedPython modulesthatareavailablefordownload. Onceyoubeginreleasingcode, youcanregisterit\nheresothatotherscanfindit.\n\u2022 https://code.activestate.com/recipes/langs/python/: ThePythonCookbookisasizablecollectionofcodeex-\namples,largermodules,andusefulscripts. Particularlynotablecontributionsarecollectedinabookalsotitled\nPythonCookbook(O\u2019Reilly&Associates,ISBN0-596-00797-3.)\n\u2022 https://pyvideo.orgcollectslinkstoPython-relatedvideosfromconferencesanduser-groupmeetings.\n\u2022 https://scipy.org:TheScientificPythonprojectincludesmodulesforfastarraycomputationsandmanipulations\nplusahostofpackagesforsuchthingsaslinearalgebra,Fouriertransforms,non-linearsolvers,randomnumber\ndistributions,statisticalanalysisandthelike.\nFor Python-related questions and problem reports, you can post to the newsgroup comp.lang.python, or send\nthem to the mailing list at python-list@python.org. The newsgroup and mailing list are gatewayed, so messages\nposted to one will automatically be forwarded to the other. There are hundreds of postings a day, asking (and\nanswering)questions, suggestingnewfeatures, andannouncingnewmodules. Mailinglistarchivesareavailableat\nhttps://mail.python.org/pipermail/.\nBefore posting, be sure to check the list of Frequently Asked Questions (also called the FAQ). The FAQ answers\nmanyofthequestionsthatcomeupagainandagain,andmayalreadycontainthesolutionforyourproblem.\n1\u201cCheeseShop\u201disaMontyPython\u2019ssketch:acustomerentersacheeseshop,butwhatevercheeseheasksfor,theclerksaysit\u2019smissing.\n105\nPythonTutorial,Release3.13.3\n106 Chapter13. WhatNow?\nCHAPTER\nFOURTEEN\nINTERACTIVE INPUT EDITING AND HISTORY SUBSTITUTION\nSomeversionsofthePythoninterpretersupporteditingofthecurrentinputlineandhistorysubstitution,similarto\nfacilities found in the Korn shell and the GNU Bash shell. This is implemented using the GNU Readline library,\nwhichsupportsvariousstylesofediting. Thislibraryhasitsowndocumentationwhichwewon\u2019tduplicatehere.\n14.1 Tab Completion and History Editing\nCompletionofvariableandmodulenamesisautomaticallyenabledatinterpreterstartupsothattheTabkeyinvokes\nthe completion function; it looks at Python statement names, the current local variables, and the available module\nnames. Fordottedexpressionssuchasstring.a,itwillevaluatetheexpressionuptothefinal'.'andthensuggest\ncompletions from the attributes of the resulting object. Note that this may execute application-defined code if an\nobjectwitha__getattr__()methodispartoftheexpression. Thedefaultconfigurationalsosavesyourhistory\ninto a file named .python_history in your user directory. The history will be available again during the next\ninteractiveinterpretersession.\n14.2 Alternatives to the Interactive Interpreter\nThisfacilityisanenormousstepforwardcomparedtoearlierversionsoftheinterpreter;however,somewishesare\nleft: Itwouldbeniceiftheproperindentationweresuggestedoncontinuationlines(theparserknowsifanINDENT\ntokenisrequirednext). Thecompletionmechanismmightusetheinterpreter\u2019ssymboltable. Acommandtocheck\n(orevensuggest)matchingparentheses,quotes,etc.,wouldalsobeuseful.\nOnealternativeenhancedinteractiveinterpreterthathasbeenaroundforquitesometimeisIPython,whichfeatures\ntab completion, object exploration and advanced history management. It can also be thoroughly customized and\nembeddedintootherapplications. Anothersimilarenhancedinteractiveenvironmentisbpython.\n107\nPythonTutorial,Release3.13.3\n108 Chapter14. InteractiveInputEditingandHistorySubstitution\nCHAPTER\nFIFTEEN\nFLOATING-POINT ARITHMETIC: ISSUES AND LIMITATIONS\nFloating-pointnumbersarerepresentedincomputerhardwareasbase2(binary)fractions. Forexample,thedecimal\nfraction0.625hasvalue6/10+2/100+5/1000,andinthesamewaythebinaryfraction0.101hasvalue1/2+\n0/4+1/8. Thesetwofractionshaveidenticalvalues,theonlyrealdifferencebeingthatthefirstiswritteninbase10\nfractionalnotation,andthesecondinbase2.\nUnfortunately, mostdecimalfractionscannotberepresentedexactlyasbinaryfractions. Aconsequenceisthat, in\ngeneral, thedecimalfloating-pointnumbersyouenterareonlyapproximatedbythebinaryfloating-pointnumbers\nactuallystoredinthemachine.\nTheproblemiseasiertounderstandatfirstinbase10. Considerthefraction1/3. Youcanapproximatethatasabase\n10fraction:\n0.3\nor,better,\n0.33\nor,better,\n0.333\nandsoon. Nomatterhowmanydigitsyou\u2019rewillingtowritedown,theresultwillneverbeexactly1/3,butwillbe\nanincreasinglybetterapproximationof1/3.\nInthesameway,nomatterhowmanybase2digitsyou\u2019rewillingtouse,thedecimalvalue0.1cannotberepresented\nexactlyasabase2fraction. Inbase2,1/10istheinfinitelyrepeatingfraction\n0.0001100110011001100110011001100110011001100110011...\nStopatanyfinitenumberofbits,andyougetanapproximation. Onmostmachinestoday,floatsareapproximated\nusingabinaryfractionwiththenumeratorusingthefirst53bitsstartingwiththemostsignificantbitandwiththe\ndenominatorasapoweroftwo. Inthecaseof1/10,thebinaryfractionis3602879701896397 / 2 ** 55which\nisclosetobutnotexactlyequaltothetruevalueof1/10.\nManyusersarenotawareoftheapproximationbecauseofthewayvaluesaredisplayed. Pythononlyprintsadecimal\napproximationtothetruedecimalvalueofthebinaryapproximationstoredbythemachine. Onmostmachines,if\nPythonweretoprintthetruedecimalvalueofthebinaryapproximationstoredfor0.1,itwouldhavetodisplay:\n>>> 0.1\n0.1000000000000000055511151231257827021181583404541015625\nThatismoredigitsthanmostpeoplefinduseful,soPythonkeepsthenumberofdigitsmanageablebydisplayinga\nroundedvalueinstead:\n>>> 1 / 10\n0.1\n109\nPythonTutorial,Release3.13.3\nJustremember,eventhoughtheprintedresultlooksliketheexactvalueof1/10,theactualstoredvalueisthenearest\nrepresentablebinaryfraction.\nInterestingly, there are many different decimal numbers that share the same nearest approxi-\nmate binary fraction. For example, the numbers 0.1 and 0.10000000000000001 and 0.\n1000000000000000055511151231257827021181583404541015625 are all approximated by\n3602879701896397 / 2 ** 55. Since all of these decimal values share the same approximation, any\noneofthemcouldbedisplayedwhilestillpreservingtheinvarianteval(repr(x)) == x.\nHistorically, the Python prompt and built-in repr() function would choose the one with 17 significant digits, 0.\n10000000000000001. StartingwithPython3.1, Python(onmostsystems)isnowabletochoosetheshortestof\ntheseandsimplydisplay0.1.\nNotethatthisisintheverynatureofbinaryfloatingpoint: thisisnotabuginPython, anditisnotabuginyour\ncodeeither. You\u2019llseethesamekindofthinginalllanguagesthatsupportyourhardware\u2019sfloating-pointarithmetic\n(althoughsomelanguagesmaynotdisplaythedifferencebydefault,orinalloutputmodes).\nFormorepleasantoutput,youmaywishtousestringformattingtoproducealimitednumberofsignificantdigits:\n>>> format(math.pi, '.12g') # give 12 significant digits\n'3.14159265359'\n>>> format(math.pi, '.2f') # give 2 digits after the point\n'3.14'\n>>> repr(math.pi)\n'3.141592653589793'\nIt\u2019simportanttorealizethatthisis,inarealsense,anillusion: you\u2019resimplyroundingthedisplayofthetruemachine\nvalue.\nOneillusionmaybegetanother. Forexample, since0.1isnotexactly1/10, summingthreevaluesof0.1maynot\nyieldexactly0.3,either:\n>>> 0.1 + 0.1 + 0.1 == 0.3\nFalse\nAlso,sincethe0.1cannotgetanyclosertotheexactvalueof1/10and0.3cannotgetanyclosertotheexactvalue\nof3/10,thenpre-roundingwithround()functioncannothelp:\n>>> round(0.1, 1) + round(0.1, 1) + round(0.1, 1) == round(0.3, 1)\nFalse\nThoughthenumberscannotbemadeclosertotheirintendedexactvalues,themath.isclose()functioncanbe\nusefulforcomparinginexactvalues:\n>>> math.isclose(0.1 + 0.1 + 0.1, 0.3)\nTrue\nAlternatively,theround()functioncanbeusedtocompareroughapproximations:\n>>> round(math.pi, ndigits=2) == round(22 / 7, ndigits=2)\nTrue\nBinaryfloating-pointarithmeticholdsmanysurpriseslikethis. Theproblemwith\u201c0.1\u201disexplainedinprecisedetail\nbelow,inthe\u201cRepresentationError\u201dsection. SeeExamplesofFloatingPointProblemsforapleasantsummaryof\nhowbinaryfloatingpointworksandthekindsofproblemscommonlyencounteredinpractice. AlsoseeThePerils\nofFloatingPointforamorecompleteaccountofothercommonsurprises.\nAsthatsaysneartheend, \u201ctherearenoeasyanswers.\u201d Still, don\u2019tbeundulywaryoffloatingpoint! Theerrorsin\nPythonfloatoperationsareinheritedfromthefloating-pointhardware,andonmostmachinesareontheorderofno\n110 Chapter15. Floating-PointArithmetic: IssuesandLimitations\nPythonTutorial,Release3.13.3\nmorethan1partin2**53peroperation. That\u2019smorethanadequateformosttasks,butyoudoneedtokeepinmind\nthatit\u2019snotdecimalarithmeticandthateveryfloatoperationcansufferanewroundingerror.\nWhile pathological cases do exist, for most casual use of floating-point arithmetic you\u2019ll see the result you expect\nintheendifyousimplyroundthedisplayofyourfinalresultstothenumberofdecimaldigitsyouexpect. str()\nusuallysuffices,andforfinercontrolseethestr.format()method\u2019sformatspecifiersinformatstrings.\nForusecaseswhichrequireexactdecimalrepresentation,tryusingthedecimalmodulewhichimplementsdecimal\narithmeticsuitableforaccountingapplicationsandhigh-precisionapplications.\nAnother form of exact arithmetic is supported by the fractions module which implements arithmetic based on\nrationalnumbers(sothenumberslike1/3canberepresentedexactly).\nIfyouareaheavyuseroffloating-pointoperationsyoushouldtakealookattheNumPypackageandmanyother\npackagesformathematicalandstatisticaloperationssuppliedbytheSciPyproject. See<https://scipy.org>.\nPythonprovidestoolsthatmayhelponthoserareoccasionswhenyoureallydowanttoknowtheexactvalueofa\nfloat. Thefloat.as_integer_ratio()methodexpressesthevalueofafloatasafraction:\n>>> x = 3.14159\n>>> x.as_integer_ratio()\n(3537115888337719, 1125899906842624)\nSincetheratioisexact,itcanbeusedtolosslesslyrecreatetheoriginalvalue:\n>>> x == 3537115888337719 / 1125899906842624\nTrue\nThefloat.hex()methodexpressesafloatinhexadecimal(base16),againgivingtheexactvaluestoredbyyour\ncomputer:\n>>> x.hex()\n'0x1.921f9f01b866ep+1'\nThisprecisehexadecimalrepresentationcanbeusedtoreconstructthefloatvalueexactly:\n>>> x == float.fromhex('0x1.921f9f01b866ep+1')\nTrue\nSincetherepresentationisexact,itisusefulforreliablyportingvaluesacrossdifferentversionsofPython(platform\nindependence)andexchangingdatawithotherlanguagesthatsupportthesameformat(suchasJavaandC99).\nAnotherhelpfultoolisthesum()functionwhichhelpsmitigateloss-of-precisionduringsummation. Itusesextended\nprecision for intermediate rounding steps as values are added onto a running total. That can make a difference in\noverallaccuracysothattheerrorsdonotaccumulatetothepointwheretheyaffectthefinaltotal:\n>>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\nFalse\n>>> sum([0.1] * 10) == 1.0\nTrue\nThemath.fsum()goesfurtherandtracksallofthe\u201clostdigits\u201dasvaluesareaddedontoarunningtotalsothatthe\nresulthasonlyasinglerounding. Thisisslowerthansum()butwillbemoreaccurateinuncommoncaseswhere\nlargemagnitudeinputsmostlycanceleachotheroutleavingafinalsumnearzero:\n>>> arr = [-0.10430216751806065, -266310978.67179024, 143401161448607.16,\n... -143401161400469.7, 266262841.31058735, -0.003244936839808227]\n>>> float(sum(map(Fraction, arr))) # Exact summation with single rounding\n8.042173697819788e-13\n>>> math.fsum(arr) # Single rounding\n8.042173697819788e-13\n>>> sum(arr) # Multiple roundings in extended precision\n(continuesonnextpage)\n111\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n8.042178034628478e-13\n>>> total = 0.0\n>>> for x in arr:\n... total += x # Multiple roundings in standard precision\n...\n>>> total # Straight addition has no correct digits!\n-0.0051575902860057365\n15.1 Representation Error\nThissectionexplainsthe\u201c0.1\u201dexampleindetail,andshowshowyoucanperformanexactanalysisofcaseslikethis\nyourself. Basicfamiliaritywithbinaryfloating-pointrepresentationisassumed.\nRepresentationerrorreferstothefactthatsome(most,actually)decimalfractionscannotberepresentedexactlyas\nbinary(base2)fractions. ThisisthechiefreasonwhyPython(orPerl,C,C++,Java,Fortran,andmanyothers)often\nwon\u2019tdisplaytheexactdecimalnumberyouexpect.\nWhy is that? 1/10 is not exactly representable as a binary fraction. Since at least 2000, almost all machines use\nIEEE754binaryfloating-pointarithmetic,andalmostallplatformsmapPythonfloatstoIEEE754binary64\u201cdouble\nprecision\u201dvalues. IEEE754binary64valuescontain53bitsofprecision,sooninputthecomputerstrivestoconvert\n0.1totheclosestfractionitcanoftheformJ/2**N whereJ isanintegercontainingexactly53bits. Rewriting\n1 / 10 ~= J / (2**N)\nas\nJ ~= 2**N / 10\nandrecallingthatJ hasexactly53bits(is>= 2**52but< 2**53),thebestvalueforN is56:\n>>> 2**52 <= 2**56 // 10 < 2**53\nTrue\nThatis,56istheonlyvalueforNthatleavesJwithexactly53bits. ThebestpossiblevalueforJisthenthatquotient\nrounded:\n>>> q, r = divmod(2**56, 10)\n>>> r\n6\nSincetheremainderismorethanhalfof10,thebestapproximationisobtainedbyroundingup:\n>>> q+1\n7205759403792794\nThereforethebestpossibleapproximationto1/10inIEEE754doubleprecisionis:\n7205759403792794 / 2 ** 56\nDividingboththenumeratoranddenominatorbytworeducesthefractionto:\n3602879701896397 / 2 ** 55\nNotethatsinceweroundedup, thisisactuallya littlebitlargerthan1/10; ifwehadnotroundedup, thequotient\nwouldhavebeenalittlebitsmallerthan1/10. Butinnocasecanitbeexactly1/10!\nSothecomputernever\u201csees\u201d1/10: whatitseesistheexactfractiongivenabove,thebestIEEE754doubleapprox-\nimationitcanget:\n112 Chapter15. Floating-PointArithmetic: IssuesandLimitations\nPythonTutorial,Release3.13.3\n>>> 0.1 * 2 ** 55\n3602879701896397.0\nIfwemultiplythatfractionby10**55,wecanseethevalueoutto55decimaldigits:\n>>> 3602879701896397 * 10 ** 55 // 2 ** 55\n1000000000000000055511151231257827021181583404541015625\nmeaning that the exact number stored in the computer is equal to the decimal value\n0.1000000000000000055511151231257827021181583404541015625. Instead of displaying the full deci-\nmalvalue,manylanguages(includingolderversionsofPython),roundtheresultto17significantdigits:\n>>> format(0.1, '.17f')\n'0.10000000000000001'\nThefractionsanddecimalmodulesmakethesecalculationseasy:\n>>> from decimal import Decimal\n>>> from fractions import Fraction\n>>> Fraction.from_float(0.1)\nFraction(3602879701896397, 36028797018963968)\n>>> (0.1).as_integer_ratio()\n(3602879701896397, 36028797018963968)\n>>> Decimal.from_float(0.1)\nDecimal('0.1000000000000000055511151231257827021181583404541015625')\n>>> format(Decimal.from_float(0.1), '.17')\n'0.10000000000000001'\n15.1. RepresentationError 113\nPythonTutorial,Release3.13.3\n114 Chapter15. Floating-PointArithmetic: IssuesandLimitations\nCHAPTER\nSIXTEEN\nAPPENDIX\n16.1 Interactive Mode\nTherearetwovariantsoftheinteractiveREPL.Theclassicbasicinterpreterissupportedonallplatformswithminimal\nlinecontrolcapabilities.\nOnWindows,orUnix-likesystemswithcursessupport,anewinteractiveshellisusedbydefault. Thisonesupports\ncolor,multilineediting,historybrowsing,andpastemode. Todisablecolor,seeusing-on-controlling-colorfordetails.\nFunctionkeysprovidesomeadditionalfunctionality. F1enterstheinteractivehelpbrowserpydoc. F2allowsfor\nbrowsingcommand-linehistorywithneitheroutputnorthe\u00bb>and\u2026prompts. F3enters\u201cpastemode\u201d,whichmakes\npastinglargerblocksofcodeeasier. PressF3toreturntotheregularprompt.\nWhen using the new interactive shell, exit the shell by typing exit or quit. Adding call parentheses after those\ncommandsisnotrequired.\nIfthenewinteractiveshellisnotdesired,itcanbedisabledviathePYTHON_BASIC_REPLenvironmentvariable.\n16.1.1 Error Handling\nWhenanerroroccurs,theinterpreterprintsanerrormessageandastacktrace. Ininteractivemode,itthenreturns\nto the primary prompt; when input came from a file, it exits with a nonzero exit status after printing the stack\ntrace. (Exceptionshandledbyanexceptclauseinatrystatementarenoterrorsinthiscontext.) Someerrorsare\nunconditionallyfatalandcauseanexitwithanonzeroexitstatus; thisappliestointernalinconsistenciesandsome\ncasesofrunningoutofmemory. Allerrormessagesarewrittentothestandarderrorstream; normaloutputfrom\nexecutedcommandsiswrittentostandardoutput.\nTyping the interrupt character (usually Control-C or Delete) to the primary or secondary prompt cancels\nthe input and returns to the primary prompt.1 Typing an interrupt while a command is executing raises the\nKeyboardInterruptexception,whichmaybehandledbyatrystatement.\n16.1.2 Executable Python Scripts\nOnBSD\u2019ishUnixsystems,Pythonscriptscanbemadedirectlyexecutable,likeshellscripts,byputtingtheline\n#!/usr/bin/env python3\n(assumingthattheinterpreterisontheuser\u2019sPATH)atthebeginningofthescriptandgivingthefileanexecutable\nmode. The#!mustbethefirsttwocharactersofthefile. Onsomeplatforms,thisfirstlinemustendwithaUnix-style\nlineending('\\n'),notaWindows('\\r\\n')lineending. Notethatthehash,orpound,character,'#',isusedto\nstartacommentinPython.\nThescriptcanbegivenanexecutablemode,orpermission,usingthechmodcommand.\n$ chmod +x myscript.py\nOnWindowssystems,thereisnonotionofan\u201cexecutablemode\u201d. ThePythoninstallerautomaticallyassociates.py\nfileswithpython.exesothatadouble-clickonaPythonfilewillrunitasascript. Theextensioncanalsobe.pyw,\ninthatcase,theconsolewindowthatnormallyappearsissuppressed.\n1AproblemwiththeGNUReadlinepackagemaypreventthis.\n115\nPythonTutorial,Release3.13.3\n16.1.3 The Interactive Startup File\nWhenyouusePythoninteractively,itisfrequentlyhandytohavesomestandardcommandsexecutedeverytimethe\ninterpreterisstarted. YoucandothisbysettinganenvironmentvariablenamedPYTHONSTARTUPtothenameofa\nfilecontainingyourstart-upcommands. Thisissimilartothe.profilefeatureoftheUnixshells.\nThisfileisonlyreadininteractivesessions,notwhenPythonreadscommandsfromascript,andnotwhen/dev/tty\nisgivenastheexplicitsourceofcommands(whichotherwisebehaveslikeaninteractivesession). Itisexecutedin\nthesamenamespacewhereinteractivecommandsareexecuted,sothatobjectsthatitdefinesorimportscanbeused\nwithoutqualificationintheinteractivesession. Youcanalsochangethepromptssys.ps1andsys.ps2inthisfile.\nIfyouwanttoreadanadditionalstart-upfilefromthecurrentdirectory,youcanprogramthisintheglobalstart-up\nfileusingcodelikeif os.path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read()). If\nyouwanttousethestartupfileinascript,youmustdothisexplicitlyinthescript:\nimport os\nfilename = os.environ.get('PYTHONSTARTUP')\nif filename and os.path.isfile(filename):\nwith open(filename) as fobj:\nstartup_file = fobj.read()\nexec(startup_file)\n16.1.4 The Customization Modules\nPythonprovidestwohookstoletyoucustomizeit: sitecustomizeandusercustomize. Toseehowitworks,youneed\nfirsttofindthelocationofyourusersite-packagesdirectory. StartPythonandrunthiscode:\n>>> import site\n>>> site.getusersitepackages()\n'/home/user/.local/lib/python3.x/site-packages'\nNowyoucancreateafilenamedusercustomize.pyinthatdirectoryandputanythingyouwantinit. Itwillaffect\neveryinvocationofPython,unlessitisstartedwiththe-soptiontodisabletheautomaticimport.\nsitecustomizeworksinthesameway,butistypicallycreatedbyanadministratorofthecomputerintheglobalsite-\npackages directory, and is imported before usercustomize. See the documentation of the site module for more\ndetails.\n116 Chapter16. Appendix\nAPPENDIX\nA\nGLOSSARY\n>>>\nThe default Python prompt of the interactive shell. Often seen for code examples which can be executed\ninteractivelyintheinterpreter.\n...\nCanreferto:\n\u2022 ThedefaultPythonpromptoftheinteractiveshellwhenenteringthecodeforanindentedcodeblock,\nwhen within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or\ntriplequotes),orafterspecifyingadecorator.\n\u2022 TheEllipsisbuilt-inconstant.\nabstractbaseclass\nAbstractbaseclassescomplementduck-typingbyprovidingawaytodefineinterfaceswhenothertechniques\nlikehasattr()wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual\nsubclasses, which are classes that don\u2019t inherit from a class but are still recognized by isinstance() and\nissubclass();seetheabcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-\ntures(inthecollections.abcmodule),numbers(inthenumbersmodule),streams(intheiomodule),\nimportfindersandloaders(intheimportlib.abcmodule). YoucancreateyourownABCswiththeabc\nmodule.\nannotation\nAlabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention\nasatypehint.\nAnnotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-\ntributes, andfunctionsarestoredinthe__annotations__specialattributeofmodules, classes, andfunc-\ntions,respectively.\nSeevariableannotation,functionannotation,PEP484andPEP526,whichdescribethisfunctionality. Also\nseeannotations-howtoforbestpracticesonworkingwithannotations.\nargument\nAvaluepassedtoafunction(ormethod)whencallingthefunction. Therearetwokindsofargument:\n\u2022 keywordargument: anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa\nvalueinadictionaryprecededby**. Forexample,3and5arebothkeywordargumentsinthefollowing\ncallstocomplex():\ncomplex(real=3, imag=5)\ncomplex(**{'real': 3, 'imag': 5})\n\u2022 positionalargument: anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe\nbeginningofanargumentlistand/orbepassedaselementsofaniterableprecededby*. Forexample,3\nand5arebothpositionalargumentsinthefollowingcalls:\ncomplex(3, 5)\ncomplex(*(3, 5))\n117\nPythonTutorial,Release3.13.3\nArguments are assigned to the named local variables in a function body. See the calls section for the rules\ngoverningthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument;theevaluated\nvalueisassignedtothelocalvariable.\nSeealsotheparameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\nandPEP362.\nasynchronouscontextmanager\nAnobjectwhichcontrolstheenvironmentseeninanasync withstatementbydefining__aenter__()and\n__aexit__()methods. IntroducedbyPEP492.\nasynchronousgenerator\nAfunctionwhichreturnsanasynchronousgeneratoriterator. Itlookslikeacoroutinefunctiondefinedwith\nasync def except that it contains yield expressions for producing a series of values usable in an async\nforloop.\nUsuallyreferstoanasynchronousgeneratorfunction, butmayrefertoanasynchronousgeneratoriterator in\nsomecontexts. Incaseswheretheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\nAnasynchronousgeneratorfunctionmaycontainawaitexpressionsaswellasasync for,andasync with\nstatements.\nasynchronousgeneratoriterator\nAnobjectcreatedbyaasynchronousgeneratorfunction.\nThisisanasynchronousiteratorwhichwhencalledusingthe__anext__()methodreturnsanawaitableobject\nwhichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenextyieldexpression.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npendingtry-statements). Whentheasynchronousgeneratoriteratoreffectivelyresumeswithanotherawaitable\nreturnedby__anext__(),itpicksupwhereitleftoff. SeePEP492andPEP525.\nasynchronousiterable\nAn object, that can be used in an async for statement. Must return an asynchronous iterator from its\n__aiter__()method. IntroducedbyPEP492.\nasynchronousiterator\nAn object that implements the __aiter__() and __anext__() methods. __anext__() must return an\nawaitableobject. async forresolvestheawaitablesreturnedbyanasynchronousiterator\u2019s__anext__()\nmethoduntilitraisesaStopAsyncIterationexception. IntroducedbyPEP492.\nattribute\nAvalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,\nifanobjectohasanattributeaitwouldbereferencedaso.a.\nItispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample\nusingsetattr(),iftheobjectallowsit. Suchanattributewillnotbeaccessibleusingadottedexpression,\nandwouldinsteadneedtoberetrievedwithgetattr().\nawaitable\nAnobjectthatcanbeusedinanawaitexpression. Canbeacoroutineoranobjectwithan__await__()\nmethod. SeealsoPEP492.\nBDFL\nBenevolentDictatorForLife,a.k.a. GuidovanRossum,Python\u2019screator.\nbinaryfile\nAfileobjectabletoreadandwritebytes-likeobjects. Examplesofbinaryfilesarefilesopenedinbinarymode\n('rb','wb'or'rb+'),sys.stdin.buffer,sys.stdout.buffer,andinstancesofio.BytesIOand\ngzip.GzipFile.\nSeealsotextfileforafileobjectabletoreadandwritestrobjects.\nborrowedreference\nInPython\u2019sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot\nownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection\ncanremovethelaststrongreferencetotheobjectandsodestroyit.\n118 AppendixA. Glossary\nPythonTutorial,Release3.13.3\nCallingPy_INCREF()ontheborrowedreferenceisrecommendedtoconvertittoastrongreferencein-place,\nexceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. ThePy_NewRef()\nfunctioncanbeusedtocreateanewstrongreference.\nbytes-likeobject\nAn object that supports the bufferobjects and can export a C-contiguous buffer. This includes all bytes,\nbytearray,andarray.arrayobjects,aswellasmanycommonmemoryviewobjects. Bytes-likeobjects\ncanbeusedforvariousoperationsthatworkwithbinarydata;theseincludecompression,savingtoabinary\nfile,andsendingoverasocket.\nSomeoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas\u201cread-write\nbytes-likeobjects\u201d. Examplemutablebufferobjectsincludebytearrayandamemoryviewofabytearray.\nOther operations require the binary data to be stored in immutable objects (\u201cread-only bytes-like objects\u201d);\nexamplesoftheseincludebytesandamemoryviewofabytesobject.\nbytecode\nPythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython\ninterpreter. Thebytecodeisalsocachedin.pycfilessothatexecutingthesamefileisfasterthesecondtime\n(recompilation from source to bytecode can be avoided). This \u201cintermediate language\u201d is said to run on a\nvirtualmachinethatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare\nnotexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.\nAlistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.\ncallable\nAcallableisanobjectthatcanbecalled,possiblywithasetofarguments(seeargument),withthefollowing\nsyntax:\ncallable(argument1, argument2, argumentN)\nAfunction,andbyextensionamethod,isacallable. Aninstanceofaclassthatimplementsthe__call__()\nmethodisalsoacallable.\ncallback\nAsubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.\nclass\nA template for creating user-defined objects. Class definitions normally contain method definitions which\noperateoninstancesoftheclass.\nclassvariable\nAvariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).\nclosurevariable\nAfreevariablereferencedfromanestedscopethatisdefinedinanouterscoperatherthanbeingresolvedat\nruntime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to\nallowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.\nForexample,intheinnerfunctioninthefollowingcode,bothxandprintarefreevariables,butonlyxis\naclosurevariable:\ndef outer():\nx = 0\ndef inner():\nnonlocal x\nx += 1\nprint(x)\nreturn inner\nDuetothecodeobject.co_freevarsattribute(which,despiteitsname,onlyincludesthenamesofclosure\nvariablesratherthanlistingallreferencedfreevariables),themoregeneralfreevariabletermissometimesused\nevenwhentheintendedmeaningistoreferspecificallytoclosurevariables.\n119\nPythonTutorial,Release3.13.3\ncomplexnumber\nAnextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand\nanimaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof-1),often\nwritten i in mathematics or j in engineering. Python has built-in support for complex numbers, which are\nwrittenwiththislatternotation;theimaginarypartiswrittenwithajsuffix,e.g.,3+1j. Togetaccesstocom-\nplexequivalentsofthemathmodule,usecmath. Useofcomplexnumbersisafairlyadvancedmathematical\nfeature. Ifyou\u2019renotawareofaneedforthem,it\u2019salmostcertainyoucansafelyignorethem.\ncontext\nThistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:\n\u2022 Thetemporarystateorenvironmentestablishedbyacontextmanagerviaawithstatement.\n\u2022 The collection of keyvalue bindings associated with a particular contextvars.Context object and\naccessedviaContextVarobjects. Alsoseecontextvariable.\n\u2022 Acontextvars.Contextobject. Alsoseecurrentcontext.\ncontextmanagementprotocol\nThe__enter__()and__exit__()methodscalledbythewithstatement. SeePEP343.\ncontextmanager\nAnobjectwhichimplementsthecontextmanagementprotocol andcontrolstheenvironmentseenina with\nstatement. SeePEP343.\ncontextvariable\nA variable whose value depends on which context is the current context. Values are accessed via\ncontextvars.ContextVarobjects. Contextvariablesareprimarilyusedtoisolatestatebetweenconcur-\nrentasynchronoustasks.\ncontiguous\nAbufferisconsideredcontiguousexactlyifitiseitherC-contiguousorFortrancontiguous. Zero-dimensional\nbuffersareCandFortrancontiguous. Inone-dimensionalarrays,theitemsmustbelaidoutinmemorynext\ntoeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the\nlastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous\narrays,thefirstindexvariesthefastest.\ncoroutine\nCoroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at\nanotherpoint. Coroutinescanbeentered,exited,andresumedatmanydifferentpoints. Theycanbeimple-\nmentedwiththeasync defstatement. SeealsoPEP492.\ncoroutinefunction\nAfunctionwhichreturnsacoroutineobject. Acoroutinefunctionmaybedefinedwiththeasync defstate-\nment, and may contain await, async for, and async with keywords. These were introduced by PEP\n492.\nCPython\nThecanonicalimplementationofthePythonprogramminglanguage,asdistributedonpython.org. Theterm\n\u201cCPython\u201disusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.\ncurrentcontext\nThecontext (contextvars.Contextobject)thatiscurrentlyusedbyContextVarobjectstoaccess(get\nor set) the values of context variables. Each thread has its own current context. Frameworks for executing\nasynchronous tasks (see asyncio) associate each task with a context which becomes the current context\nwheneverthetaskstartsorresumesexecution.\ndecorator\nAfunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe@wrappersyntax.\nCommonexamplesfordecoratorsareclassmethod()andstaticmethod().\nThedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-\nalent:\n120 AppendixA. Glossary\nPythonTutorial,Release3.13.3\ndef f(arg):\n...\nf = staticmethod(f)\n@staticmethod\ndef f(arg):\n...\nThe same concept exists for classes, but is less commonly used there. See the documentation for function\ndefinitionsandclassdefinitionsformoreaboutdecorators.\ndescriptor\nAnyobjectwhichdefinesthemethods__get__(),__set__(),or__delete__(). Whenaclassattribute\nis a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.b to get,\nset or delete an attribute looks up the object named b in the class dictionary for a, but if b is a descriptor,\ntherespectivedescriptormethodgetscalled. Understandingdescriptorsisakeytoadeepunderstandingof\nPythonbecausetheyarethebasisformanyfeaturesincludingfunctions,methods,properties,classmethods,\nstaticmethods,andreferencetosuperclasses.\nFormoreinformationaboutdescriptors\u2019methods,seedescriptorsortheDescriptorHowToGuide.\ndictionary\nAnassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith__hash__()\nand__eq__()methods. CalledahashinPerl.\ndictionarycomprehension\nA compact way to process all or part of the elements in an iterable and return a dictionary with the re-\nsults. results = {n: n ** 2 for n in range(10)}generatesadictionarycontainingkeynmapped\ntovaluen ** 2. Seecomprehensions.\ndictionaryview\nTheobjectsreturnedfromdict.keys(),dict.values(),anddict.items()arecalleddictionaryviews.\nTheyprovideadynamicviewonthedictionary\u2019sentries,whichmeansthatwhenthedictionarychanges,the\nview reflects these changes. To force the dictionary view to become a full list use list(dictview). See\ndict-views.\ndocstring\nAstringliteralwhichappearsasthefirstexpressioninaclass,functionormodule. Whileignoredwhenthe\nsuiteisexecuted,itisrecognizedbythecompilerandputintothe__doc__attributeoftheenclosingclass,\nfunctionormodule. Sinceitisavailableviaintrospection,itisthecanonicalplacefordocumentationofthe\nobject.\nduck-typing\nAprogrammingstylewhichdoesnotlookatanobject\u2019stypetodetermineifithastherightinterface;instead,\nthe method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be\na duck.\u201d) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility\nby allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). (Note,\nhowever, that duck-typing can be complemented with abstract base classes.) Instead, it typically employs\nhasattr()testsorEAFPprogramming.\nEAFP\nEasier to ask for forgiveness than permission. This common Python coding style assumes the existence of\nvalid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is\ncharacterizedbythepresenceofmanytryandexceptstatements. ThetechniquecontrastswiththeLBYL\nstylecommontomanyotherlanguagessuchasC.\nexpression\nApieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof\nexpressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In\ncontrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealsostatementswhich\ncannotbeusedasexpressions,suchaswhile. Assignmentsarealsostatements,notexpressions.\n121\nPythonTutorial,Release3.13.3\nextensionmodule\nAmodulewritteninCorC++,usingPython\u2019sCAPItointeractwiththecoreandwithusercode.\nf-string\nString literals prefixed with 'f' or 'F' are commonly called \u201cf-strings\u201d which is short for formatted string\nliterals. SeealsoPEP498.\nfileobject\nAnobjectexposingafile-orientedAPI(withmethodssuchasread()orwrite())toanunderlyingresource.\nDependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof\nstorageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).\nFileobjectsarealsocalledfile-likeobjectsorstreams.\nThereareactuallythreecategoriesoffileobjects: rawbinaryfiles, bufferedbinaryfilesandtextfiles. Their\ninterfaces are defined in the io module. The canonical way to create a file object is by using the open()\nfunction.\nfile-likeobject\nAsynonymforfileobject.\nfilesystemencodinganderrorhandler\nEncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto\ntheoperatingsystem.\nThefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding\nfailstoprovidethisguarantee,APIfunctionscanraiseUnicodeError.\nThe sys.getfilesystemencoding() and sys.getfilesystemencodeerrors() functions can be\nusedtogetthefilesystemencodinganderrorhandler.\nThefilesystemencodinganderrorhandlerareconfiguredatPythonstartupbythePyConfig_Read()func-\ntion: seefilesystem_encodingandfilesystem_errorsmembersofPyConfig.\nSeealsothelocaleencoding.\nfinder\nAnobjectthattriestofindtheloaderforamodulethatisbeingimported.\nTherearetwotypesoffinder: metapathfindersforusewithsys.meta_path,andpathentryfindersforuse\nwithsys.path_hooks.\nSeefinders-and-loadersandimportlibformuchmoredetail.\nfloordivision\nMathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris//. Forexample,the\nexpression11 // 4evaluatesto2incontrasttothe2.75returnedbyfloattruedivision. Notethat(-11)\n// 4is-3becausethatis-2.75roundeddownward. SeePEP238.\nfreethreading\nAthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.\nThisisincontrasttotheglobalinterpreterlockwhichallowsonlyonethreadtoexecutePythonbytecodeata\ntime. SeePEP703.\nfreevariable\nFormally, as defined in the language execution model, a free variable is any variable used in a namespace\nwhichisnotalocalvariableinthatnamespace. Seeclosurevariableforanexample. Pragmatically,duetothe\nnameofthecodeobject.co_freevarsattribute,thetermisalsosometimesusedasasynonymforclosure\nvariable.\nfunction\nAseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormoreargumentswhich\nmaybeusedintheexecutionofthebody. Seealsoparameter,method,andthefunctionsection.\nfunctionannotation\nAnannotationofafunctionparameterorreturnvalue.\n122 AppendixA. Glossary\nPythonTutorial,Release3.13.3\nFunction annotations are usually used for type hints: for example, this function is expected to take two int\nargumentsandisalsoexpectedtohaveanintreturnvalue:\ndef sum_two_numbers(a: int, b: int) -> int:\nreturn a + b\nFunctionannotationsyntaxisexplainedinsectionfunction.\nSeevariableannotationandPEP484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest\npracticesonworkingwithannotations.\n__future__\nAfuturestatement,from __future__ import <feature>,directsthecompilertocompilethecurrent\nmoduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The__future__\nmoduledocumentsthepossiblevaluesoffeature. Byimportingthismoduleandevaluatingitsvariables,you\ncanseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:\n>>> import __future__\n>>> __future__.division\n_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)\ngarbagecollection\nTheprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference\ncountingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector\ncanbecontrolledusingthegcmodule.\ngenerator\nA function which returns a generator iterator. It looks like a normal function except that it contains yield\nexpressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe\nnext()function.\nUsuallyreferstoageneratorfunction,butmayrefertoageneratoriterator insomecontexts. Incaseswhere\ntheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\ngeneratoriterator\nAnobjectcreatedbyageneratorfunction.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npending try-statements). When the generator iterator resumes, it picks up where it left off (in contrast to\nfunctionswhichstartfreshoneveryinvocation).\ngeneratorexpression\nAnexpressionthatreturnsaniterator. Itlookslikeanormalexpressionfollowedbyaforclausedefininga\nloop variable, range, andan optional if clause. The combinedexpressiongeneratesvaluesfor an enclosing\nfunction:\n>>> sum(i*i for i in range(10)) # sum of squares 0, 1, 4, ... 81\n285\ngenericfunction\nAfunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-\nplementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.\nSeealsothesingledispatchglossaryentry,thefunctools.singledispatch()decorator,andPEP443.\ngenerictype\nAtypethatcanbeparameterized; typicallyacontainerclasssuchaslistordict. Usedfortypehintsand\nannotations.\nFormoredetails,seegenericaliastypes,PEP483,PEP484,PEP585,andthetypingmodule.\nGIL\nSeeglobalinterpreterlock.\n123\nPythonTutorial,Release3.13.3\nglobalinterpreterlock\nThe mechanism used by the CPython interpreter to assure that only one thread executes Python bytecode at\na time. This simplifies the CPython implementation by making the object model (including critical built-in\ntypessuchasdict)implicitlysafeagainstconcurrentaccess. Lockingtheentireinterpretermakesiteasier\nfortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor\nmachines.\nHowever,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen\ndoingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen\ndoingI/O.\nAsofPython3.13, theGILcanbedisabledusingthe--disable-gilbuildconfiguration. Afterbuilding\nPythonwiththisoption,codemustberunwith-X gil=0oraftersettingthePYTHON_GIL=0environment\nvariable. This feature enables improved performance for multi-threaded applications and makes it easier to\nusemulti-coreCPUsefficiently. Formoredetails,seePEP703.\nhash-basedpyc\nAbytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto\ndetermineitsvalidity. Seepyc-invalidation.\nhashable\nAnobjectishashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa__hash__()\nmethod), and can be compared to other objects (it needs an __eq__() method). Hashable objects which\ncompareequalmusthavethesamehashvalue.\nHashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe\nhashvalueinternally.\nMost of Python\u2019s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)\narenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.\nObjectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except\nwiththemselves),andtheirhashvalueisderivedfromtheirid().\nIDLE\nAnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-\nronmentwhichshipswiththestandarddistributionofPython.\nimmortal\nImmortalobjectsareaCPythonimplementationdetailintroducedinPEP683.\nIfanobjectisimmortal,itsreferencecount isnevermodified,andthereforeitisneverdeallocatedwhilethe\ninterpreterisrunning. Forexample,TrueandNoneareimmortalinCPython.\nimmutable\nAnobjectwithafixedvalue. Immutableobjectsincludenumbers,stringsandtuples. Suchanobjectcannot\nbealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein\nplaceswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.\nimportpath\nAlistoflocations(orpathentries)thataresearchedbythepathbasedfinderformodulestoimport. During\nimport,thislistoflocationsusuallycomesfromsys.path,butforsubpackagesitmayalsocomefromthe\nparentpackage\u2019s__path__attribute.\nimporting\nTheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.\nimporter\nAnobjectthatbothfindsandloadsamodule;bothafinderandloaderobject.\ninteractive\nPythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter\nprompt, immediately execute them and see their results. Just launch python with no arguments (possibly\nby selecting it fromyour computer\u2019s mainmenu). It isa very powerfulway to testout new ideas orinspect\nmodulesandpackages(rememberhelp(x)). Formoreoninteractivemode,seeInteractiveMode.\n124 AppendixA. Glossary\nPythonTutorial,Release3.13.3\ninterpreted\nPythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause\nofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly\ncreating an executable which is then run. Interpreted languages typically have a shorter development/debug\ncyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealsointeractive.\ninterpretershutdown\nWhenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated\nresources, suchasmodulesandvariouscriticalinternalstructures. Italsomakesseveralcallstothegarbage\ncollector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-\ncutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction\nanymore(commonexamplesarelibrarymodulesorthewarningsmachinery).\nThemainreasonforinterpretershutdownisthatthe__main__moduleorthescriptbeingrunhasfinished\nexecuting.\niterable\nAnobjectcapableofreturningitsmembersoneatatime. Examplesofiterablesincludeallsequencetypes\n(such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any\nclassesyoudefinewithan__iter__()methodorwitha__getitem__()methodthatimplementssequence\nsemantics.\nIterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(),\n\u2026). Whenaniterableobjectispassedasanargumenttothebuilt-infunctioniter(),itreturnsaniterator\nfortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot\nnecessarytocalliter()ordealwithiteratorobjectsyourself. Theforstatementdoesthatautomaticallyfor\nyou,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealsoiterator,\nsequence,andgenerator.\niterator\nAn object representing a stream of data. Repeated calls to the iterator\u2019s __next__() method (or passing\nittothebuilt-infunctionnext())returnsuccessiveitemsinthestream. Whennomoredataareavailablea\nStopIterationexceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls\ntoits__next__()methodjustraiseStopIterationagain. Iteratorsarerequiredtohavean__iter__()\nmethodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces\nwhereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A\ncontainerobject(suchasalist)producesafreshnewiteratoreachtimeyoupassittotheiter()function\noruseitinaforloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused\ninthepreviousiterationpass,makingitappearlikeanemptycontainer.\nMoreinformationcanbefoundintypeiter.\nCPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine\n__iter__(). Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof\niteratoroperations.\nkeyfunction\nAkeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,\nlocale.strxfrm()isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.\nA number of tools in Python accept key functions to control how elements are ordered or grouped. They\ninclude min(), max(), sorted(), list.sort(), heapq.merge(), heapq.nsmallest(), heapq.\nnlargest(),anditertools.groupby().\nThere are several ways to create a key function. For example. the str.lower() method can serve as a\nkey function for case insensitive sorts. Alternatively, a key function can be built from a lambda expression\nsuchaslambda r: (r[0], r[2]). Also,operator.attrgetter(),operator.itemgetter(),and\noperator.methodcaller()arethreekeyfunctionconstructors. SeetheSortingHOWTOforexamples\nofhowtocreateandusekeyfunctions.\nkeywordargument\nSeeargument.\n125\nPythonTutorial,Release3.13.3\nlambda\nAnanonymousinlinefunctionconsistingofasingleexpressionwhichisevaluatedwhenthefunctioniscalled.\nThesyntaxtocreatealambdafunctionislambda [parameters]: expression\nLBYL\nLookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This\nstylecontrastswiththeEAFPapproachandischaracterizedbythepresenceofmanyifstatements.\nIn a multi-threaded environment, the LBYL approach can risk introducing a race condition between \u201cthe\nlooking\u201dand\u201ctheleaping\u201d. Forexample, thecode, if key in mapping: return mapping[key] can\nfailifanotherthreadremoveskeyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved\nwithlocksorbyusingtheEAFPapproach.\nlexicalanalyzer\nFormalnameforthetokenizer;seetoken.\nlist\nAbuilt-inPythonsequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist\nsinceaccesstoelementsisO(1).\nlistcomprehension\nAcompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result\n= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0]generatesalistofstringscon-\ntainingevenhexnumbers(0x..) intherangefrom0to255. Theifclauseisoptional. Ifomitted,allelements\ninrange(256)areprocessed.\nloader\nAn object that loads a module. It must define the exec_module() and create_module() methods to\nimplementtheLoaderinterface. Aloaderistypicallyreturnedbyafinder. Seealso:\n\u2022 finders-and-loaders\n\u2022 importlib.abc.Loader\n\u2022 PEP302\nlocaleencoding\nOn Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.\nLC_CTYPE, new_locale).\nOnWindows,itistheANSIcodepage(ex: \"cp1252\").\nOnAndroidandVxWorks,Pythonuses\"utf-8\"asthelocaleencoding.\nlocale.getencoding()canbeusedtogetthelocaleencoding.\nSeealsothefilesystemencodinganderrorhandler.\nmagicmethod\nAninformalsynonymforspecialmethod.\nmapping\nA container object that supports arbitrary key lookups and implements the methods specified in the\ncollections.abc.Mapping or collections.abc.MutableMapping abstract base classes. Exam-\nples include dict, collections.defaultdict, collections.OrderedDict and collections.\nCounter.\nmetapathfinder\nAfinderreturnedbyasearchofsys.meta_path. Metapathfindersarerelatedto,butdifferentfrompath\nentryfinders.\nSeeimportlib.abc.MetaPathFinderforthemethodsthatmetapathfindersimplement.\nmetaclass\nTheclassofaclass. Classdefinitionscreateaclassname, aclassdictionary, andalistofbaseclasses. The\nmetaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-\ngramming languages provide a default implementation. What makes Python special is that it is possible to\ncreatecustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide\n126 AppendixA. Glossary\nPythonTutorial,Release3.13.3\npowerful,elegantsolutions. Theyhavebeenusedforloggingattributeaccess,addingthread-safety,tracking\nobjectcreation,implementingsingletons,andmanyothertasks.\nMoreinformationcanbefoundinmetaclasses.\nmethod\nAfunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod\nwillgettheinstanceobjectasitsfirstargument(whichisusuallycalledself). Seefunctionandnestedscope.\nmethodresolutionorder\nMethod Resolution Order is the order in which base classes are searched for a member during lookup. See\npython_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.\nmodule\nAnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary\nPythonobjects. ModulesareloadedintoPythonbytheprocessofimporting.\nSeealsopackage.\nmodulespec\nAnamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceofimportlib.\nmachinery.ModuleSpec.\nSeealsomodule-specs.\nMRO\nSeemethodresolutionorder.\nmutable\nMutableobjectscanchangetheirvaluebutkeeptheirid(). Seealsoimmutable.\nnamedtuple\nTheterm\u201cnamedtuple\u201dappliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare\nalsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.\nSeveral built-in types are named tuples, including the values returned by time.localtime() and os.\nstat(). Anotherexampleissys.float_info:\n>>> sys.float_info[1] # indexed access\n1024\n>>> sys.float_info.max_exp # named field access\n1024\n>>> isinstance(sys.float_info, tuple) # kind of tuple\nTrue\nSome named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be\ncreated from a regular class definition that inherits from tuple and that defines named fields. Such a class\ncanbewrittenbyhand,oritcanbecreatedbyinheritingtyping.NamedTuple,orwiththefactoryfunction\ncollections.namedtuple(). Thelattertechniquesalsoaddsomeextramethodsthatmaynotbefound\ninhand-writtenorbuilt-innamedtuples.\nnamespace\nThe place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,\nglobal and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support\nmodularitybypreventingnamingconflicts. Forinstance,thefunctionsbuiltins.openandos.open()are\ndistinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear\nwhich module implements a function. For instance, writing random.seed() or itertools.islice()\nmakesitclearthatthosefunctionsareimplementedbytherandomanditertoolsmodules,respectively.\nnamespacepackage\nA package which serves only as a container for subpackages. Namespace packages may have no physical\nrepresentation,andspecificallyarenotlikearegularpackagebecausetheyhaveno__init__.pyfile.\nNamespacepackagesallowseveralindividuallyinstallablepackagestohaveacommonparentpackage. Oth-\nerwise,itisrecommendedtousearegularpackage.\n127\nPythonTutorial,Release3.13.3\nFormoreinformation,seePEP420andreference-namespace-package.\nSeealsomodule.\nnestedscope\nThe ability to refer to a variable in an enclosing definition. For instance, a function defined inside another\nfunctioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference\nandnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables\nreadandwritetotheglobalnamespace. Thenonlocalallowswritingtoouterscopes.\nnew-styleclass\nOld name for the flavor of classes now used for all class objects. In earlier Python versions, only\nnew-style classes could use Python\u2019s newer, versatile features like __slots__, descriptors, properties,\n__getattribute__(),classmethods,andstaticmethods.\nobject\nAnydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany\nnew-styleclass.\noptimizedscope\nA scope where target local variable names are reliably known to the compiler when the code is compiled,\nallowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,\ncoroutines,comprehensions,andgeneratorexpressionsareoptimizedinthisfashion. Note: mostinterpreter\noptimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames\narerestrictedtooptimizedscopes.\npackage\nA Python module which can contain submodules or recursively, subpackages. Technically, a package is a\nPythonmodulewitha__path__attribute.\nSeealsoregularpackageandnamespacepackage.\nparameter\nAnamedentityinafunction(ormethod)definitionthatspecifiesanargument (orinsomecases,arguments)\nthatthefunctioncanaccept. Therearefivekindsofparameter:\n\u2022 positional-or-keyword: specifiesanargumentthatcanbepassedeitherpositionallyorasakeywordargu-\nment. Thisisthedefaultkindofparameter,forexamplefooandbarinthefollowing:\ndef func(foo, bar=None): ...\n\u2022 positional-only: specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters\ncanbedefinedbyincludinga/characterintheparameterlistofthefunctiondefinitionafterthem,for\nexampleposonly1andposonly2inthefollowing:\ndef func(posonly1, posonly2, /, positional_or_keyword): ...\n\u2022 keyword-only: specifiesanargumentthatcanbesuppliedonlybykeyword. Keyword-onlyparameters\ncanbedefinedbyincludingasinglevar-positionalparameterorbare*intheparameterlistofthefunction\ndefinitionbeforethem,forexamplekw_only1andkw_only2inthefollowing:\ndef func(arg, *, kw_only1, kw_only2): ...\n\u2022 var-positional: specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition\ntoanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby\nprependingtheparameternamewith*,forexampleargsinthefollowing:\ndef func(*args, **kwargs): ...\n\u2022 var-keyword: specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-\nwordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending\ntheparameternamewith**,forexamplekwargsintheexampleabove.\n128 AppendixA. Glossary\nPythonTutorial,Release3.13.3\nParameters can specify both optional and required arguments, as well as default values for some optional\narguments.\nSeealsotheargumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\ntheinspect.Parameterclass,thefunctionsection,andPEP362.\npathentry\nAsinglelocationontheimportpathwhichthepathbasedfinderconsultstofindmodulesforimporting.\npathentryfinder\nA finder returned by a callable on sys.path_hooks (i.e. a path entry hook) which knows how to locate\nmodulesgivenapathentry.\nSeeimportlib.abc.PathEntryFinderforthemethodsthatpathentryfindersimplement.\npathentryhook\nAcallableonthesys.path_hookslistwhichreturnsapathentryfinderifitknowshowtofindmoduleson\naspecificpathentry.\npathbasedfinder\nOneofthedefaultmetapathfinderswhichsearchesanimportpathformodules.\npath-likeobject\nAn object representing a file system path. A path-like object is either a str or bytes object representing\na path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike\nprotocol can be converted to a str or bytes file system path by calling the os.fspath() function; os.\nfsdecode() and os.fsencode() can be used to guarantee a str or bytes result instead, respectively.\nIntroducedbyPEP519.\nPEP\nPythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,\nordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical\nspecificationandarationaleforproposedfeatures.\nPEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity\ninputonanissue, andfordocumentingthedesigndecisionsthathavegoneintoPython. ThePEPauthoris\nresponsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.\nSeePEP1.\nportion\nA set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as\ndefinedinPEP420.\npositionalargument\nSeeargument.\nprovisionalAPI\nA provisional API is one which has been deliberately excluded from the standard library\u2019s backwards com-\npatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked\nprovisional, backwards incompatible changes (up to and including removal of the interface) may occur if\ndeemednecessarybycoredevelopers. Suchchangeswillnotbemadegratuitously\u2013theywilloccuronlyif\nseriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.\nEven for provisional APIs, backwards incompatible changes are seen as a \u201csolution of last resort\u201d - every\nattemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.\nThisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign\nerrorsforextendedperiodsoftime. SeePEP411formoredetails.\nprovisionalpackage\nSeeprovisionalAPI.\nPython3000\nNicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe\ndistantfuture.) Thisisalsoabbreviated\u201cPy3k\u201d.\n129\nPythonTutorial,Release3.13.3\nPythonic\nAnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan\nimplementingcodeusingconceptscommontootherlanguages. Forexample,acommonidiominPythonis\ntoloopoverallelementsofaniterableusingaforstatement. Manyotherlanguagesdon\u2019thavethistypeof\nconstruct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:\nfor i in range(len(food)):\nprint(food[i])\nAsopposedtothecleaner,Pythonicmethod:\nfor piece in food:\nprint(piece)\nqualifiedname\nAdottednameshowingthe\u201cpath\u201dfromamodule\u2019sglobalscopetoaclass,functionormethoddefinedinthat\nmodule, as defined in PEP 3155. For top-level functions and classes, the qualified name is the same as the\nobject\u2019sname:\n>>> class C:\n... class D:\n... def meth(self):\n... pass\n...\n>>> C.__qualname__\n'C'\n>>> C.D.__qualname__\n'C.D'\n>>> C.D.meth.__qualname__\n'C.D.meth'\nWhenusedtorefertomodules,thefullyqualifiednamemeanstheentiredottedpathtothemodule,including\nanyparentpackages,e.g. email.mime.text:\n>>> import email.mime.text\n>>> email.mime.text.__name__\n'email.mime.text'\nreferencecount\nThenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.\nSome objects are immortal and have reference counts that are never modified, and therefore the objects are\nneverdeallocated. ReferencecountingisgenerallynotvisibletoPythoncode, butitisakeyelementofthe\nCPythonimplementation. Programmerscancallthesys.getrefcount()functiontoreturnthereference\ncountforaparticularobject.\nregularpackage\nAtraditionalpackage,suchasadirectorycontainingan__init__.pyfile.\nSeealsonamespacepackage.\nREPL\nAnacronymforthe\u201cread\u2013eval\u2013printloop\u201d,anothernamefortheinteractiveinterpretershell.\n__slots__\nAdeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating\ninstancedictionaries. Thoughpopular,thetechniqueissomewhattrickytogetrightandisbestreservedfor\nrarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.\nsequence\nAn iterable which supports efficient element access using integer indices via the __getitem__() special\nmethod and defines a __len__() method that returns the length of the sequence. Some built-in sequence\n130 AppendixA. Glossary\nPythonTutorial,Release3.13.3\ntypesarelist,str,tuple,andbytes. Notethatdictalsosupports__getitem__()and__len__(),\nbut is considered a mapping rather than a sequence because the lookups use arbitrary hashable keys rather\nthanintegers.\nThecollections.abc.Sequenceabstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust\n__getitem__()and__len__(),addingcount(),index(),__contains__(),and__reversed__().\nTypes that implement this expanded interface can be registered explicitly using register(). For more\ndocumentationonsequencemethodsgenerally,seeCommonSequenceOperations.\nsetcomprehension\nAcompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results\n= {c for c in 'abracadabra' if c not in 'abc'}generatesthesetofstrings{'r', 'd'}. See\ncomprehensions.\nsingledispatch\nAformofgenericfunctiondispatchwheretheimplementationischosenbasedonthetypeofasingleargument.\nslice\nAnobjectusuallycontainingaportionofasequence. Asliceiscreatedusingthesubscriptnotation,[]with\ncolons between numbers when several are given, such as in variable_name[1:3:5]. The bracket (sub-\nscript)notationusessliceobjectsinternally.\nsoftdeprecated\nAsoftdeprecatedAPIshouldnotbeusedinnewcode,butitissafeforalreadyexistingcodetouseit. The\nAPIremainsdocumentedandtested,butwillnotbeenhancedfurther.\nSoftdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.\nSeePEP387: SoftDeprecation.\nspecialmethod\nAmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such\nmethodshavenamesstartingandendingwithdoubleunderscores. Specialmethodsaredocumentedinspe-\ncialnames.\nstatement\nAstatementispartofasuite(a\u201cblock\u201dofcode). Astatementiseitheranexpressionoroneofseveralconstructs\nwithakeyword,suchasif,whileorfor.\nstatictypechecker\nAnexternaltoolthatreadsPythoncodeandanalyzesit, lookingforissuessuchasincorrecttypes. Seealso\ntypehintsandthetypingmodule.\nstrongreference\nIn Python\u2019s C API, a strong reference is a reference to an object which is owned by the code holding the\nreference. ThestrongreferenceistakenbycallingPy_INCREF()whenthereferenceiscreatedandreleased\nwithPy_DECREF()whenthereferenceisdeleted.\nThePy_NewRef()functioncanbeusedtocreateastrongreferencetoanobject. Usually,thePy_DECREF()\nfunctionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking\nonereference.\nSeealsoborrowedreference.\ntextencoding\nAstringinPythonisasequenceofUnicodecodepoints(inrangeU+0000\u2013U+10FFFF).Tostoreortransfer\nastring,itneedstobeserializedasasequenceofbytes.\nSerializingastringintoasequenceofbytesisknownas\u201cencoding\u201d,andrecreatingthestringfromthesequence\nofbytesisknownas\u201cdecoding\u201d.\nThereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas\u201ctextencodings\u201d.\ntextfile\nAfileobjectabletoreadandwritestrobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream\nandhandlesthetextencodingautomatically. Examplesoftextfilesarefilesopenedintextmode('r'or'w'),\nsys.stdin,sys.stdout,andinstancesofio.StringIO.\n131\nPythonTutorial,Release3.13.3\nSeealsobinaryfileforafileobjectabletoreadandwritebytes-likeobjects.\ntoken\nA small unit of source code, generated by the lexical analyzer (also called the tokenizer). Names, numbers,\nstrings,operators,newlinesandsimilararerepresentedbytokens.\nThe tokenize module exposes Python\u2019s lexical analyzer. The token module contains information on the\nvarioustypesoftokens.\ntriple-quotedstring\nAstringwhichisboundbythreeinstancesofeitheraquotationmark(\u201d)oranapostrophe(\u2018). Whiletheydon\u2019t\nprovide any functionality not available with single-quoted strings, they are useful for a number of reasons.\nTheyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines\nwithouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.\ntype\nThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject\u2019stypeis\naccessibleasits__class__attributeorcanberetrievedwithtype(obj).\ntypealias\nAsynonymforatype,createdbyassigningthetypetoanidentifier.\nTypealiasesareusefulforsimplifyingtypehints. Forexample:\ndef remove_gray_shades(\ncolors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\npass\ncouldbemademorereadablelikethis:\nColor = tuple[int, int, int]\ndef remove_gray_shades(colors: list[Color]) -> list[Color]:\npass\nSeetypingandPEP484,whichdescribethisfunctionality.\ntypehint\nAnannotationthatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn\nvalue.\nTypehintsareoptionalandarenotenforcedbyPythonbuttheyareusefultostatictypecheckers. Theycan\nalsoaidIDEswithcodecompletionandrefactoring.\nType hints of global variables, class attributes, and functions, but not local variables, can be accessed using\ntyping.get_type_hints().\nSeetypingandPEP484,whichdescribethisfunctionality.\nuniversalnewlines\nAmannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix\nend-of-lineconvention'\\n',theWindowsconvention'\\r\\n',andtheoldMacintoshconvention'\\r'. See\nPEP278andPEP3116,aswellasbytes.splitlines()foranadditionaluse.\nvariableannotation\nAnannotationofavariableoraclassattribute.\nWhenannotatingavariableoraclassattribute,assignmentisoptional:\nclass C:\nfield: 'annotation'\nVariableannotationsareusuallyusedfortypehints: forexamplethisvariableisexpectedtotakeintvalues:\n132 AppendixA. Glossary\nPythonTutorial,Release3.13.3\ncount: int = 0\nVariableannotationsyntaxisexplainedinsectionannassign.\nSeefunctionannotation,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto\nforbestpracticesonworkingwithannotations.\nvirtualenvironment\nAcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade\nPythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon\nthesamesystem.\nSeealsovenv.\nvirtualmachine\nAcomputerdefinedentirelyinsoftware. Python\u2019svirtualmachineexecutesthebytecodeemittedbythebyte-\ncodecompiler.\nZenofPython\nListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.\nThelistingcanbefoundbytyping\u201cimport this\u201dattheinteractiveprompt.\n133\nPythonTutorial,Release3.13.3\n134 AppendixA. Glossary\nAPPENDIX\nB\nABOUT THIS DOCUMENTATION\nPython\u2019sdocumentationisgeneratedfromreStructuredTextsourcesusingSphinx,adocumentationgeneratororigi-\nnallycreatedforPythonandnowmaintainedasanindependentproject.\nDevelopment of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you\nwanttocontribute,pleasetakealookatthereporting-bugspageforinformationonhowtodoso. Newvolunteers\narealwayswelcome!\nManythanksgoto:\n\u2022 FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandauthorofmuchofthecontent;\n\u2022 theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;\n\u2022 FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.\nB.1 Contributors to the Python documentation\nManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.\nSeeMisc/ACKSinthePythonsourcedistributionforapartiallistofcontributors.\nItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation\n\u2013ThankYou!\n135\nPythonTutorial,Release3.13.3\n136 AppendixB. Aboutthisdocumentation\nAPPENDIX\nC\nHISTORY AND LICENSE\nC.1 History of the software\nPythonwascreatedintheearly1990sbyGuidovanRossumatStichtingMathematischCentrum(CWI,seehttps:\n//www.cwi.nl)intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython\u2019sprincipalauthor,\nalthoughitincludesmanycontributionsfromothers.\nIn1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,seehttps:\n//www.cnri.reston.va.us)inReston,Virginiawherehereleasedseveralversionsofthesoftware.\nInMay2000,GuidoandthePythoncoredevelopmentteammovedtoBeOpen.comtoformtheBeOpenPythonLabs\nteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations,whichbecameZopeCorpo-\nration. In2001,thePythonSoftwareFoundation(PSF,seehttps://www.python.org/psf/)wasformed,anon-profit\norganization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring\nmemberofthePSF.\nAllPythonreleasesareOpenSource(seehttps://opensource.orgfortheOpenSourceDefinition). Historically,most,\nbutnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.\nRelease Derivedfrom Year Owner GPL-compatible? (1)\n0.9.0thru1.2 n/a 1991-1995 CWI yes\n1.3thru1.5.2 1.2 1995-1999 CNRI yes\n1.6 1.5.2 2000 CNRI no\n2.0 1.6 2000 BeOpen.com no\n1.6.1 1.6 2001 CNRI yes(2)\n2.1 2.0+1.6.1 2001 PSF no\n2.0.1 2.0+1.6.1 2001 PSF yes\n2.1.1 2.1+2.0.1 2001 PSF yes\n2.1.2 2.1.1 2002 PSF yes\n2.1.3 2.1.2 2002 PSF yes\n2.2andabove 2.1.1 2001-now PSF yes\n(cid:174) Note\n(1) GPL-compatibledoesn\u2019tmeanthatwe\u2019redistributingPythonundertheGPL.AllPythonlicenses,unlike\nthe GPL, let you distribute a modified version without making your changes open source. The GPL-\ncompatible licenses make it possible to combine Python with other software that is released under the\nGPL;theothersdon\u2019t.\n(2) AccordingtoRichardStallman,1.6.1isnotGPL-compatible,becauseitslicensehasachoiceoflawclause.\nAccordingtoCNRI,however, Stallman\u2019slawyerhastoldCNRI\u2019slawyerthat1.6.1is\u201cnotincompatible\u201d\nwiththeGPL.\nThankstothemanyoutsidevolunteerswhohaveworkedunderGuido\u2019sdirectiontomakethesereleasespossible.\n137\nPythonTutorial,Release3.13.3\nC.2 Terms and conditions for accessing or otherwise using Python\nPythonsoftwareanddocumentationarelicensedunderthePythonSoftwareFoundationLicenseVersion2.\nStartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF\nLicenseVersion2andtheZero-ClauseBSDlicense.\nSomesoftwareincorporatedintoPythonisunderdifferentlicenses. Thelicensesarelistedwithcodefallingunder\nthatlicense. SeeLicensesandAcknowledgementsforIncorporatedSoftwareforanincompletelistoftheselicenses.\nC.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\nthe Individual or Organization (\"Licensee\") accessing and otherwise using this\nsoftware (\"Python\") in source or binary form and its associated documentation.\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative\nversion, provided, however, that PSF's License Agreement and PSF's notice of\ncopyright, i.e., \"Copyright \u00a9 2001-2024 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python or any part thereof, and wants to make the\nderivative work available to others as provided herein, then Licensee hereby\nagrees to include in any such work a brief summary of the changes made to\u2423\n,\u2192Python.\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\nPSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. Nothing in this License Agreement shall be deemed to create any relationship\nof agency, partnership, or joint venture between PSF and Licensee. This License\nAgreement does not grant permission to use PSF trademarks or trade name in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.\n8. By copying, installing or otherwise using Python, Licensee agrees\nto be bound by the terms and conditions of this License Agreement.\n138 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\nC.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nBEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n(\"Licensee\") accessing and otherwise using this software in source or binary\nform and its associated documentation (\"the Software\").\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\nBeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\nto reproduce, analyze, test, perform and/or display publicly, prepare derivative\nworks, distribute, and otherwise use the Software alone or in any derivative\nversion, provided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\nBEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\nMODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\nADVISED OF THE POSSIBILITY THEREOF.\n5. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n6. This License Agreement shall be governed by and interpreted in all respects\nby the law of the State of California, excluding conflict of law provisions.\nNothing in this License Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between BeOpen and Licensee. This License\nAgreement does not grant permission to use BeOpen trademarks or trade names in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party. As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the permissions\ngranted on that web page.\n7. By copying, installing or otherwise using the software, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\nC.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n1. This LICENSE AGREEMENT is between the Corporation for National Research\nInitiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n(\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using Python 1.6.1 software in source or binary form and its\nassociated documentation.\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python 1.6.1 alone or in any derivative version,\nprovided, however, that CNRI's License Agreement and CNRI's notice of copyright,\ni.e., \"Copyright \u00a9 1995-2001 Corporation for National Research Initiatives; All\n(continuesonnextpage)\nC.2. TermsandconditionsforaccessingorotherwiseusingPython 139\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nRights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\nprepared by Licensee. Alternately, in lieu of CNRI's License Agreement,\nLicensee may substitute the following text (omitting the quotes): \"Python 1.6.1\nis made available subject to the terms and conditions in CNRI's License\nAgreement. This Agreement together with Python 1.6.1 may be located on the\ninternet using the following unique, persistent identifier (known as a handle):\n1895.22/1013. This Agreement may also be obtained from a proxy server on the\ninternet using the following URL: http://hdl.handle.net/1895.22/1013\".\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python 1.6.1 or any part thereof, and wants to make the derivative\nwork available to others as provided herein, then Licensee hereby agrees to\ninclude in any such work a brief summary of the changes made to Python 1.6.1.\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI\nMAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,\nBUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\nOF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\nPYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. This License Agreement shall be governed by the federal intellectual property\nlaw of the United States, including without limitation the federal copyright\nlaw, and, to the extent such U.S. federal law does not apply, by the law of the\nCommonwealth of Virginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based on Python\n1.6.1 that incorporate non-separable material that was previously distributed\nunder the GNU General Public License (GPL), the law of the Commonwealth of\nVirginia shall govern this License Agreement only as to issues arising under or\nwith respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in\nthis License Agreement shall be deemed to create any relationship of agency,\npartnership, or joint venture between CNRI and Licensee. This License Agreement\ndoes not grant permission to use CNRI trademarks or trade name in a trademark\nsense to endorse or promote products or services of Licensee, or any third\nparty.\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\nor otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\nconditions of this License Agreement.\nC.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nCopyright \u00a9 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands. All rights reserved.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\n(continuesonnextpage)\n140 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\nC.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTA-\nTION\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3 Licenses and Acknowledgements for Incorporated Software\nThissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated\ninthePythondistribution.\nC.3.1 Mersenne Twister\nThe_randomCextensionunderlyingtherandommoduleincludescodebasedonadownloadfromhttp://www.math.\nsci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. Thefollowingaretheverbatimcommentsfromthe\noriginalcode:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 141\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\nC.3.2 Sockets\nThesocketmoduleusesthefunctions,getaddrinfo(),andgetnameinfo(),whicharecodedinseparatesource\nfilesfromtheWIDEProject,https://www.wide.ad.jp/.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n142 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\nC.3.3 Asynchronous socket services\nThetest.support.asynchatandtest.support.asyncoremodulescontainthefollowingnotice:\nCopyright 1996 by Sam Rushing\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nC.3.4 Cookie management\nThehttp.cookiesmodulecontainsthefollowingnotice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3.5 Execution tracing\nThetracemodulecontainsthefollowingnotice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr... reserved and offered to the public under the terms of the\nPython 2.2 license.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 143\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\nC.3.6 UUencode and UUdecode functions\nTheuucodeccontainsthefollowingnotice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\nbetween ascii and binary. This results in a 1000-fold speedup. The C\nversion is still 5 times faster, though.\n- Arguments more compliant with Python standard\n144 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\nC.3.7 XML Remote Procedure Calls\nThexmlrpc.clientmodulecontainsthefollowingnotice:\nThe XML-RPC client interface is\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\nC.3.8 test_epoll\nThetest.test_epollmodulecontainsthefollowingnotice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 145\nPythonTutorial,Release3.13.3\nC.3.9 Select kqueue\nTheselectmodulecontainsthefollowingnoticeforthekqueueinterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.10 SipHash24\nThefilePython/pyhash.ccontainsMarekMajkowski\u2019implementationofDanBernstein\u2019sSipHash24algorithm.\nItcontainsthefollowingnote:\n<MIT License>\nCopyright (c) 2013 Marek Majkowski <marek@popcount.org>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\nOriginal location:\nhttps://github.com/majek/csiphash/\nSolution inspired by code from:\nSamuel Neves (supercop/crypto_auth/siphash24/little)\ndjb (supercop/crypto_auth/siphash24/little2)\nJean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\n146 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\nC.3.11 strtod and dtoa\nThefilePython/dtoa.c,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,\nisderivedfromthefileofthesamenamebyDavidM.Gay, currentlyavailablefromhttps://web.archive.org/web/\n20220517033456/http://www.netlib.org/fp/dtoa.c. The original file, as retrieved on March 16, 2009, contains the\nfollowingcopyrightandlicensingnotice:\n/****************************************************************\n*\n* The author of this software is David M. Gay.\n*\n* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n*\n* Permission to use, copy, modify, and distribute this software for any\n* purpose without fee is hereby granted, provided that this entire notice\n* is included in all copies of any software which is or includes a copy\n* or modification of this software and in all copies of the supporting\n* documentation for such software.\n*\n* THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n*\n***************************************************************/\nC.3.12 OpenSSL\nThemoduleshashlib,posixandsslusetheOpenSSLlibraryforaddedperformanceifmadeavailablebythe\noperatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL\nlibraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived\nfromthat,theApacheLicensev2applies:\nApache License\nVersion 2.0, January 2004\nhttps://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 147\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\n(continuesonnextpage)\n148 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 149\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nC.3.13 expat\nThe pyexpat extension is built using an included copy of the expat sources unless the build is configured\n--with-system-expat:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\nand Clark Cooper\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n(continuesonnextpage)\n150 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.14 libffi\nThe_ctypesCextensionunderlyingthectypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless\nthebuildisconfigured--with-system-libffi:\nCopyright (c) 1996-2008 Red Hat, Inc and others.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nC.3.15 zlib\nThezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo\noldtobeusedforthebuild:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 151\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\nJean-loup Gailly Mark Adler\njloup@gzip.org madler@alumni.caltech.edu\nC.3.16 cfuhash\nTheimplementationofthehashtableusedbythetracemallocisbasedonthecfuhashproject:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\nThis code is released under the BSD license:\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n* Neither the name of the author nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\nC.3.17 libmpdec\nThe_decimalCextensionunderlyingthedecimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary\nunlessthebuildisconfigured--with-system-libmpdec:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\nRedistribution and use in source and binary forms, with or without\n(continuesonnextpage)\n152 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.18 W3C C14N test suite\nTheC14N2.0testsuiteinthetestpackage(Lib/test/xmltestdata/c14n-20/)wasretrievedfromtheW3C\nwebsiteathttps://www.w3.org/TR/xml-c14n2-testcases/andisdistributedunderthe3-clauseBSDlicense:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of works must retain the original copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\nused to endorse or promote products derived from this work without\nspecific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 153\nPythonTutorial,Release3.13.3\nC.3.19 mimalloc\nMITLicense:\nCopyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nC.3.20 asyncio\nPartsoftheasynciomoduleareincorporatedfromuvloop0.16,whichisdistributedundertheMITlicense:\nCopyright (c) 2015-2021 MagicStack Inc. http://magic.io\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.21 Global Unbounded Sequences (GUS)\nThe file Python/qsbr.c is adapted from FreeBSD\u2019s \u201cGlobal Unbounded Sequences\u201d safe memory reclamation\nschemeinsubr_smr.c. Thefileisdistributedunderthe2-ClauseBSDLicense:\nCopyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\n(continuesonnextpage)\n154 AppendixC. HistoryandLicense\nPythonTutorial,Release3.13.3\n(continuedfrompreviouspage)\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice unmodified, this list of conditions, and the following\ndisclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 155\nPythonTutorial,Release3.13.3\n156 AppendixC. HistoryandLicense\nAPPENDIX\nD\nCOPYRIGHT\nPythonandthisdocumentationis:\nCopyright\u00a92001-2024PythonSoftwareFoundation. Allrightsreserved.\nCopyright\u00a92000BeOpen.com. Allrightsreserved.\nCopyright\u00a91995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.\nCopyright\u00a91991-1995StichtingMathematischCentrum. Allrightsreserved.\nSeeHistoryandLicenseforcompletelicenseandpermissionsinformation.\n157\nPythonTutorial,Release3.13.3\n158 AppendixD. Copyright\nINDEX\nNon-alphabetical\nC-contiguous,120\n...,117\nclass,119\n#(hash) class variable,119\ncomment,7 closure variable,119\n*(asterisk) coding\nin function calls,30\nstyle,32\ncomplex number,120\n**\nin function calls,30\ncontext,120\n: (colon) context management protocol,120\nfunction annotations,31 context manager,120\ncontext variable,120\n->\nfunction annotations,31\ncontiguous,120\n>>>,117\ncoroutine,120\n__all__,49 coroutine function,120\n__future__,123\nCPython,120\n__slots__,130 current context,120\nD\nA\nabstract base class,117\ndecorator,120\nannotation,117\ndescriptor,121\ndictionary,121\nannotations\nfunction,31 dictionary comprehension,121\nargument,117 dictionary view,121\nasynchronous context manager,118\ndocstring,121\nasynchronous generator,118\ndocstrings,23,31\nasynchronous generator iterator,118 documentation strings,23,31\nasynchronous iterable,118\nduck-typing,121\nasynchronous iterator,118\nE\nattribute,118\nawaitable,118 EAFP,121\nenvironment variable\nB\nPATH,45,115\nBDFL,118 PYTHON_BASIC_REPL,115\nbinary file,118 PYTHON_GIL,124\nborrowed reference,118 PYTHONPATH,45,46\nbuilt-in function PYTHONSTARTUP,116\nhelp,87 expression,121\nopen,57 extension module,122\nbuiltins\nF\nmodule,47\nbytecode,119 f-string,122\nbytes-like object,119 file\nobject,57\nC file object,122\ncallable,119 file-like object,122\ncallback,119 filesystem encoding and error handler,122\n159\nPythonTutorial,Release3.13.3\nfinder,122 loader,126\nfloor division,122 locale encoding,126\nfor\nM\nstatement,17\nformatted string literal,54 magic\nFortran contiguous,120 method,126\nfree threading,122 magic method,126\nfree variable,122 mangling\nfstring,54 name,81\nf-string,54 mapping,126\nfunction,122 meta path finder,126\nannotations,31 metaclass,126\nfunction annotation,122 method,127\nmagic,126\nG\nobject,77\ngarbage collection,123 special,131\ngenerator,123 method resolution order,127\ngenerator expression,123 module,127\ngenerator iterator,123 builtins,47\ngeneric function,123 json,59\ngeneric type,123 searchpath,45\nGIL,123 sys,46\nglobal interpreter lock,124 module spec,127\nMRO,127\nH\nmutable,127\nhash-based pyc,124\nN\nhashable,124\nhelp name\nbuilt-in function,87 mangling,81\nnamed tuple,127\nI\nnamespace,127\nIDLE,124 namespace package,127\nimmortal,124 nested scope,128\nimmutable,124 new-style class,128\nimport path,124\nO\nimporter,124\nimporting,124 object,128\ninteractive,124 file,57\ninterpolated string literal,54 method,77\ninterpreted,125 open\ninterpreter shutdown,125 built-in function,57\niterable,125 optimized scope,128\niterator,125\nP\nJ\npackage,128\njson parameter,128\nmodule,59 PATH,45,115\npath\nK\nmodulesearch,45\nkey function,125 path based finder,129\nkeyword argument,125 path entry,129\npath entry finder,129\nL\npath entry hook,129\nlambda,126 path-like object,129\nLBYL,126 PEP,129\nlexical analyzer,126 portion,129\nlist,126 positional argument,129\nlist comprehension,126 provisional API,129\n160 Index\nPythonTutorial,Release3.13.3\nprovisional package,129 static type checker,131\nPython 3000,129 string\nPython Enhancement Proposals formatted literal,54\nPEP 1,129 interpolated literal,54\nPEP 8,32 strings, documentation,23,31\nPEP 238,122 strong reference,131\nPEP 278,132 style\nPEP 302,126 coding,32\nPEP 343,120 sys\nPEP 362,118,129 module,46\nPEP 411,129\nT\nPEP 420,128,129\nPEP 443,123 text encoding,131\nPEP 483,123 text file,131\nPEP 484,31,117,123,132,133 token,132\nPEP 492,118,120 triple-quoted string,132\nPEP 498,122 type,132\nPEP 519,129 type alias,132\nPEP 525,118 type hint,132\nPEP 526,117,133\nU\nPEP 585,123\nPEP 636,23 universal newlines,132\nPEP 683,124 usercustomize,116\nPEP 703,122,124\nPEP 3107,31 V\nPEP 3116,132 variable annotation,132\nPEP 3147,46 virtual environment,133\nPEP 3155,130 virtual machine,133\nPYTHON_BASIC_REPL,115\nPYTHON_GIL,124 Z\nPythonic,130\nZen of Python,133\nPYTHONPATH,45,46\nPYTHONSTARTUP,116\nQ\nqualified name,130\nR\nreference count,130\nregular package,130\nREPL,130\nRFC\nRFC 2822,91\nS\nsearch\npath,module,45\nsequence,130\nset comprehension,131\nsingle dispatch,131\nsitecustomize,116\nslice,131\nsoft deprecated,131\nspecial\nmethod,131\nspecial method,131\nstatement,131\nfor,17\nIndex 161\n",
  "context": "4 MoreControlFlowTools 17\n4.1 ifStatements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n4.2 forStatements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17",
  "source_file": "resources\\Year 3\\Python\\tutorial.pdf",
  "line_numbers": [
    25,
    6608
  ]
}