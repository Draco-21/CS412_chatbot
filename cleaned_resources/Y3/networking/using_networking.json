{
  "title": "using",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "C.3.3 Asynchronoussocketservices .",
  "code": "C.3.6 UUencodeandUUdecodefunctions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\nC.3.7 XMLRemoteProcedureCalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\nC.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113\nC.3.9 Selectkqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\nC.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\nC.3.11 strtodanddtoa. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\nC.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\nC.3.13 expat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\nC.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\nC.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\nC.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\nC.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\nC.3.18 W3CC14Ntestsuite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121\nC.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\nC.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\nC.3.21 GlobalUnboundedSequences(GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\nD Copyright 125\nIndex 127\niii\niv\nPythonSetupandUsage,Release3.13.3\nThispartofthedocumentationisdevotedtogeneralinformationonthesetupofthePythonenvironmentondifferent\nplatforms,theinvocationoftheinterpreterandthingsthatmakeworkingwithPythoneasier.\nCONTENTS 1\nPythonSetupandUsage,Release3.13.3\n2 CONTENTS\nCHAPTER\nONE\nCOMMAND LINE AND ENVIRONMENT\nTheCPythoninterpreterscansthecommandlineandtheenvironmentforvarioussettings.\nCPythonimplementationdetail: Otherimplementations\u2019commandlineschemesmaydiffer. Seeimplementations\nforfurtherresources.\n1.1 Command line\nWheninvokingPython,youmayspecifyanyoftheseoptions:\npython [-bBdEhiIOPqRsSuvVWx?] [-c command | -m module-name | script | - ] [args]\nThemostcommonusecaseis,ofcourse,asimpleinvocationofascript:\npython myscript.py\n1.1.1 Interface options\nTheinterpreterinterfaceresemblesthatoftheUNIXshell,butprovidessomeadditionalmethodsofinvocation:\n\u2022 Whencalledwithstandardinputconnectedtoattydevice,itpromptsforcommandsandexecutesthemuntilan\nEOF(anend-of-filecharacter,youcanproducethatwithCtrl-DonUNIXorCtrl-Z,EnteronWindows)\nisread. Formoreoninteractivemode,seetut-interac.\n\u2022 Whencalledwithafilenameargumentorwithafileasstandardinput,itreadsandexecutesascriptfromthat\nfile.\n\u2022 Whencalledwithadirectorynameargument,itreadsandexecutesanappropriatelynamedscriptfromthat\ndirectory.\n\u2022 Whencalledwith-c command,itexecutesthePythonstatement(s)givenascommand. Herecommandmay\ncontainmultiplestatementsseparatedbynewlines. LeadingwhitespaceissignificantinPythonstatements!\n\u2022 Whencalledwith-m module-name,thegivenmoduleislocatedonthePythonmodulepathandexecutedas\nascript.\nInnon-interactivemode,theentireinputisparsedbeforeitisexecuted.\nAninterfaceoptionterminatesthelistofoptionsconsumedbytheinterpreter,allconsecutiveargumentswillendup\ninsys.argv\u2013notethatthefirstelement,subscriptzero(sys.argv[0]),isastringreflectingtheprogram\u2019ssource.\n-c <command>\nExecutethePythoncodeincommand. commandcanbeoneormorestatementsseparatedbynewlines,with\nsignificantleadingwhitespaceasinnormalmodulecode.\nIfthisoptionisgiven,thefirstelementofsys.argvwillbe\"-c\"andthecurrentdirectorywillbeaddedto\nthestartofsys.path(allowingmodulesinthatdirectorytobeimportedastoplevelmodules).\nRaisesanauditingeventcpython.run_commandwithargumentcommand.\n3\nPythonSetupandUsage,Release3.13.3\n-m <module-name>\nSearchsys.pathforthenamedmoduleandexecuteitscontentsasthe__main__module.\nSincetheargumentisamodulename,youmustnotgiveafileextension(.py). Themodulenameshouldbe\navalidabsolutePythonmodulename,buttheimplementationmaynotalwaysenforcethis(e.g. itmayallow\nyoutouseanamethatincludesahyphen).\nPackagenames(includingnamespacepackages)arealsopermitted. Whenapackagenameissuppliedinstead\nof a normal module, the interpreter will execute <pkg>.__main__ as the main module. This behaviour is\ndeliberately similar to the handling of directories and zipfiles that are passed to the interpreter as the script\nargument.\n(cid:174) Note\nThisoptioncannotbeusedwithbuilt-inmodulesandextensionmoduleswritteninC,sincetheydonot\nhavePythonmodulefiles. However,itcanstillbeusedforprecompiledmodules,eveniftheoriginalsource\nfileisnotavailable.\nIfthisoptionisgiven,thefirstelementofsys.argvwillbethefullpathtothemodulefile(whilethemodule\nfileisbeinglocated,thefirstelementwillbesetto\"-m\"). Aswiththe-coption,thecurrentdirectorywillbe\naddedtothestartofsys.path.\n-Ioptioncanbeusedtorunthescriptinisolatedmodewheresys.pathcontainsneitherthecurrentdirectory\nnortheuser\u2019ssite-packagesdirectory. AllPYTHON*environmentvariablesareignored,too.\nManystandardlibrarymodulescontaincodethatisinvokedontheirexecutionasascript. Anexampleisthe\ntimeitmodule:\npython -m timeit -s \"setup here\" \"benchmarked code here\"\npython -m timeit -h # for details\nRaisesanauditingeventcpython.run_modulewithargumentmodule-name.\n(cid:181) Seealso\nrunpy.run_module()\nEquivalentfunctionalitydirectlyavailabletoPythoncode\nPEP338\u2013Executingmodulesasscripts\nChangedinversion3.1: Supplythepackagenametoruna__main__submodule.\nChangedinversion3.4: namespacepackagesarealsosupported\n-\nReadcommandsfromstandardinput(sys.stdin). Ifstandardinputisaterminal,-iisimplied.\nIfthisoptionisgiven,thefirstelementofsys.argvwillbe\"-\"andthecurrentdirectorywillbeaddedto\nthestartofsys.path.\nRaisesanauditingeventcpython.run_stdinwithnoarguments.\n<script>\nExecutethePythoncodecontainedinscript,whichmustbeafilesystempath(absoluteorrelative)referringto\neitheraPythonfile,adirectorycontaininga__main__.pyfile,orazipfilecontaininga__main__.pyfile.\nIfthisoptionisgiven,thefirstelementofsys.argvwillbethescriptnameasgivenonthecommandline.\nIf the script name refers directly to a Python file, the directory containing that file is added to the start of\nsys.path,andthefileisexecutedasthe__main__module.\n4 Chapter1. Commandlineandenvironment\nPythonSetupandUsage,Release3.13.3\nIfthescriptnamereferstoadirectoryorzipfile,thescriptnameisaddedtothestartofsys.pathandthe\n__main__.pyfileinthatlocationisexecutedasthe__main__module.\n-Ioptioncanbeusedtorunthescriptinisolatedmodewheresys.pathcontainsneitherthescript\u2019sdirectory\nnortheuser\u2019ssite-packagesdirectory. AllPYTHON*environmentvariablesareignored,too.\nRaisesanauditingeventcpython.run_filewithargumentfilename.\n(cid:181) Seealso\nrunpy.run_path()\nEquivalentfunctionalitydirectlyavailabletoPythoncode\nIfnointerfaceoptionisgiven,-iisimplied,sys.argv[0]isanemptystring(\"\")andthecurrentdirectorywill\nbeaddedtothestartofsys.path. Also,tab-completionandhistoryeditingisautomaticallyenabled,ifavailable\nonyourplatform(seerlcompleter-config).\n(cid:181) Seealso\ntut-invoking\nChangedinversion3.4: Automaticenablingoftab-completionandhistoryediting.\n1.1.2 Generic options\n-?\n-h\n--help\nPrintashortdescriptionofallcommandlineoptionsandcorrespondingenvironmentvariablesandexit.\n--help-env\nPrintashortdescriptionofPython-specificenvironmentvariablesandexit.\nAddedinversion3.11.\n--help-xoptions\nPrintadescriptionofimplementation-specific-X optionsandexit.\nAddedinversion3.11.\n--help-all\nPrintcompleteusageinformationandexit.\nAddedinversion3.11.\n-V\n--version\nPrintthePythonversionnumberandexit. Exampleoutputcouldbe:\nPython 3.8.0b2+\nWhengiventwice,printmoreinformationaboutthebuild,like:\nPython 3.8.0b2+ (3.8:0c076caaa8, Apr 20 2019, 21:55:00)\n[GCC 6.2.0 20161005]\nAddedinversion3.6: The-VVoption.\n1.1. Commandline 5\nPythonSetupandUsage,Release3.13.3\n1.1.3 Miscellaneous options\n-b\nIssue a warning when converting bytes or bytearray to str without specifying encoding or comparing\nbytesorbytearraywithstrorbyteswithint. Issueanerrorwhentheoptionisgiventwice(-bb).\nChangedinversion3.5: Affectsalsocomparisonsofbyteswithint.\n-B\nIf given, Python won\u2019t try to write .pyc files on the import of source modules. See also\nPYTHONDONTWRITEBYTECODE.\n--check-hash-based-pycs default|always|never\nControlthevalidationbehaviorofhash-based.pycfiles. Seepyc-invalidation. Whensettodefault,checked\nanduncheckedhash-basedbytecodecachefilesarevalidatedaccordingtotheirdefaultsemantics. Whensetto\nalways,allhash-based.pycfiles,whethercheckedorunchecked,arevalidatedagainsttheircorresponding\nsource file. When set to never, hash-based .pyc files are not validated against their corresponding source\nfiles.\nThesemanticsoftimestamp-based.pycfilesareunaffectedbythisoption.\n-d\nTurnonparserdebuggingoutput(forexpertonly). SeealsothePYTHONDEBUGenvironmentvariable.\nThisoptionrequiresadebugbuildofPython,otherwiseit\u2019signored.\n-E\nIgnoreallPYTHON*environmentvariables,e.g. PYTHONPATHandPYTHONHOME,thatmightbeset.\nSeealsothe-Pand-I(isolated)options.\n-i\nEnterinteractivemodeafterexecution.\nUsingthe-ioptionwillenterinteractivemodeinanyofthefollowingcircumstances:\n\u2022 Whenascriptispassedasfirstargument\n\u2022 Whenthe-coptionisused\n\u2022 Whenthe-moptionisused\nInteractivemodewillstartevenwhensys.stdindoesnotappeartobeaterminal. ThePYTHONSTARTUP\nfileisnotread.\nThis can be useful to inspect global variables or a stack trace when a script raises an exception. See also\nPYTHONINSPECT.\n-I\nRunPythoninisolatedmode. Thisalsoimplies-E,-Pand-soptions.\nInisolatedmodesys.pathcontainsneitherthescript\u2019sdirectorynortheuser\u2019ssite-packagesdirectory. All\nPYTHON* environment variables are ignored, too. Further restrictions may be imposed to prevent the user\nfrominjectingmaliciouscode.\nAddedinversion3.4.\n-O\nRemove assert statements and any code conditional on the value of __debug__. Augment the filename\nfor compiled (bytecode) files by adding .opt-1 before the .pyc extension (see PEP 488). See also\nPYTHONOPTIMIZE.\nChangedinversion3.5: Modify.pycfilenamesaccordingtoPEP488.\n6 Chapter1. Commandlineandenvironment\nPythonSetupandUsage,Release3.13.3\n-OO\nDo -O and also discard docstrings. Augment the filename for compiled (bytecode) files by adding .opt-2\nbeforethe.pycextension(seePEP488).\nChangedinversion3.5: Modify.pycfilenamesaccordingtoPEP488.\n-P\nDon\u2019tprependapotentiallyunsafepathtosys.path:\n\u2022 python -m modulecommandline: Don\u2019tprependthecurrentworkingdirectory.\n\u2022 python script.pycommandline: Don\u2019tprependthescript\u2019sdirectory. Ifit\u2019sasymboliclink,resolve\nsymboliclinks.\n\u2022 python -c codeandpython(REPL)commandlines: Don\u2019tprependanemptystring,whichmeans\nthecurrentworkingdirectory.\nSeealsothePYTHONSAFEPATHenvironmentvariable,and-Eand-I(isolated)options.\nAddedinversion3.11.\n-q\nDon\u2019tdisplaythecopyrightandversionmessagesevenininteractivemode.\nAddedinversion3.2.\n-R\nTurnonhashrandomization. ThisoptiononlyhasaneffectifthePYTHONHASHSEEDenvironmentvariableis\nsetto0,sincehashrandomizationisenabledbydefault.\nOnpreviousversionsofPython,thisoptionturnsonhashrandomization,sothatthe__hash__()valuesof\nstrandbytesobjectsare\u201csalted\u201dwithanunpredictablerandomvalue. Althoughtheyremainconstantwithin\nanindividualPythonprocess,theyarenotpredictablebetweenrepeatedinvocationsofPython.\nHashrandomizationisintendedtoprovideprotectionagainstadenial-of-servicecausedbycarefullychosen\ninputsthatexploittheworstcaseperformanceofadictconstruction,O(n2)complexity. Seehttp://ocert.org/\nadvisories/ocert-2011-003.htmlfordetails.\nPYTHONHASHSEEDallowsyoutosetafixedvalueforthehashseedsecret.\nAddedinversion3.2.3.\nChangedinversion3.7: Theoptionisnolongerignored.\n-s\nDon\u2019taddtheuser site-packages directorytosys.path.\nSeealsoPYTHONNOUSERSITE.\n(cid:181) Seealso\nPEP370\u2013Perusersite-packagesdirectory\n-S\nDisable the import of the module site and the site-dependent manipulations of sys.path that it entails.\nAlsodisablethesemanipulationsifsiteisexplicitlyimportedlater(callsite.main()ifyouwantthemto\nbetriggered).\n-u\nForcethestdoutandstderrstreamstobeunbuffered. Thisoptionhasnoeffectonthestdinstream.\nSeealsoPYTHONUNBUFFERED.\nChangedinversion3.7: Thetextlayerofthestdoutandstderrstreamsnowisunbuffered.\n1.1. Commandline 7\nPythonSetupandUsage,Release3.13.3\n-v\nPrintamessageeachtimeamoduleisinitialized,showingtheplace(filenameorbuilt-inmodule)fromwhich\nitisloaded. Whengiventwice(-vv), printamessageforeachfilethatischeckedforwhensearchingfora\nmodule. Alsoprovidesinformationonmodulecleanupatexit.\nChangedinversion3.10: Thesitemodulereportsthesite-specificpathsand.pthfilesbeingprocessed.\nSeealsoPYTHONVERBOSE.\n-W arg\nWarningcontrol. Python\u2019swarningmachinerybydefaultprintswarningmessagestosys.stderr.\nThesimplestsettingsapplyaparticularactionunconditionallytoallwarningsemittedbyaprocess(eventhose\nthatareotherwiseignoredbydefault):\n-Wdefault # Warn once per call location\n-Werror # Convert to exceptions\n-Walways # Warn every time\n-Wall # Same as -Walways\n-Wmodule # Warn once per calling module\n-Wonce # Warn once per Python process\n-Wignore # Never warn\nTheactionnamescanbeabbreviatedasdesiredandtheinterpreterwillresolvethemtotheappropriateaction\nname. Forexample,-Wiisthesameas-Wignore.\nThefullformofargumentis:\naction:message:category:module:lineno\nEmpty fields match all values; trailing empty fields may be omitted. For example -W\nignore::DeprecationWarningignoresallDeprecationWarningwarnings.\nTheactionfieldisasexplainedabovebutonlyappliestowarningsthatmatchtheremainingfields.\nThemessagefieldmustmatchthewholewarningmessage;thismatchiscase-insensitive.\nThecategoryfieldmatchesthewarningcategory(ex: DeprecationWarning). Thismustbeaclassname;the\nmatchtestwhethertheactualwarningcategoryofthemessageisasubclassofthespecifiedwarningcategory.\nThemodulefieldmatchesthe(fullyqualified)modulename;thismatchiscase-sensitive.\nThe lineno field matches the line number, where zero matches all line numbers and is thus equivalent to an\nomittedlinenumber.\nMultiple -W options can be given; when a warning matches more than one option, the action for the last\nmatching option is performed. Invalid -W options are ignored (though, a warning message is printed about\ninvalidoptionswhenthefirstwarningisissued).\nWarningscanalsobecontrolledusingthePYTHONWARNINGSenvironmentvariableandfromwithinaPython\nprogram using the warnings module. For example, the warnings.filterwarnings() function can be\nusedtousearegularexpressiononthewarningmessage.\nSeewarning-filteranddescribing-warning-filtersformoredetails.\n-x\nSkipthefirstlineofthesource,allowinguseofnon-Unixformsof#!cmd. ThisisintendedforaDOSspecific\nhackonly.\n-X\nReservedforvariousimplementation-specificoptions. CPythoncurrentlydefinesthefollowingpossiblevalues:\n\u2022 -X faulthandlertoenablefaulthandler. SeealsoPYTHONFAULTHANDLER.\nAddedinversion3.3.\n8 Chapter1. Commandlineandenvironment\nPythonSetupandUsage,Release3.13.3\n\u2022 -X showrefcount to outputthe totalreference countand numberof used memory blockswhen the\nprogramfinishesoraftereachstatementintheinteractiveinterpreter. Thisonlyworksondebugbuilds.\nAddedinversion3.4.\n\u2022 -X tracemalloctostarttracingPythonmemoryallocationsusingthetracemallocmodule. Byde-\nfault, onlythemostrecentframeisstoredinatracebackofatrace. Use-X tracemalloc=NFRAME\nto start tracing with a traceback limit of NFRAME frames. See tracemalloc.start() and\nPYTHONTRACEMALLOCformoreinformation.\nAddedinversion3.4.\n\u2022 -X int_max_str_digits configures the integer string conversion length limitation. See also\nPYTHONINTMAXSTRDIGITS.\nAddedinversion3.11.\n\u2022 -X importtimetoshowhowlongeachimporttakes. Itshowsmodulename,cumulativetime(including\nnestedimports)andselftime(excludingnestedimports). Notethatitsoutputmaybebrokeninmulti-\nthreadedapplication. Typicalusageispython3 -X importtime -c 'import asyncio'. Seealso\nPYTHONPROFILEIMPORTTIME.\nAddedinversion3.7.\n\u2022 -X dev: enablePythonDevelopmentMode,introducingadditionalruntimechecksthataretooexpen-\nsivetobeenabledbydefault. SeealsoPYTHONDEVMODE.\nAddedinversion3.7.\n\u2022 -X utf8enablesthePythonUTF-8Mode. -X utf8=0explicitlydisablesPythonUTF-8Mode(even\nwhenitwouldotherwiseactivateautomatically). SeealsoPYTHONUTF8.\nAddedinversion3.7.\n\u2022 -X pycache_prefix=PATHenableswriting.pycfilestoaparalleltreerootedatthegivendirectory\ninsteadoftothecodetree. SeealsoPYTHONPYCACHEPREFIX.\nAddedinversion3.8.\n\u2022 -X warn_default_encodingissuesaEncodingWarningwhenthelocale-specificdefaultencoding\nisusedforopeningfiles. SeealsoPYTHONWARNDEFAULTENCODING.\nAddedinversion3.10.\n\u2022 -X no_debug_ranges disables the inclusion of the tables mapping extra location information (end\nline,startcolumnoffsetandendcolumnoffset)toeveryinstructionincodeobjects. Thisisusefulwhen\nsmallercodeobjectsandpycfilesaredesiredaswellassuppressingtheextravisuallocationindicators\nwhentheinterpreterdisplaystracebacks. SeealsoPYTHONNODEBUGRANGES.\nAddedinversion3.11.\n\u2022 -X frozen_modulesdetermineswhetherornotfrozenmodulesareignoredbytheimportmachinery.\nA value of on means they get imported and off means they are ignored. The default is on if this is\nan installed Python (the normal case). If it\u2019s under development (running from the source tree) then\nthedefaultisoff. Notethattheimportlib_bootstrapandimportlib_bootstrap_external\nfrozenmodulesarealwaysused,evenifthisflagissettooff. SeealsoPYTHON_FROZEN_MODULES.\nAddedinversion3.11.\n\u2022 -X perfenablessupportfortheLinuxperfprofiler. Whenthisoptionisprovided,theperfprofiler\nwillbeabletoreportPythoncalls. Thisoptionisonlyavailableonsomeplatformsandwilldonothingif\nisnotsupportedonthecurrentsystem. Thedefaultvalueis\u201coff\u201d. SeealsoPYTHONPERFSUPPORT and\nperf_profiling.\nAddedinversion3.12.\n\u2022 -X perf_jitenablessupportfortheLinuxperfprofilerwithDWARFsupport. Whenthisoptionis\nprovided,theperfprofilerwillbeabletoreportPythoncallsusingDWARFinformation. Thisoption\n1.1. Commandline 9\nPythonSetupandUsage,Release3.13.3\nisonlyavailableonsomeplatformsandwilldonothingifisnotsupportedonthecurrentsystem. The\ndefaultvalueis\u201coff\u201d. SeealsoPYTHON_PERF_JIT_SUPPORTandperf_profiling.\nAddedinversion3.13.\n\u2022 -X cpu_count=n overrides os.cpu_count(), os.process_cpu_count(), and\nmultiprocessing.cpu_count(). n must be greater than or equal to 1. This option may be\nusefulforuserswhoneedtolimitCPUresourcesofacontainersystem. SeealsoPYTHON_CPU_COUNT.\nIfnisdefault,nothingisoverridden.\nAddedinversion3.13.\n\u2022 -X presite=package.modulespecifiesamodulethatshouldbeimportedbeforethesitemodule\nisexecutedandbeforethe__main__moduleexists. Therefore,theimportedmoduleisn\u2019t__main__.\nThiscanbeusedtoexecutecodeearlyduringPythoninitialization. Pythonneedstobebuiltindebug\nmodeforthisoptiontoexist. SeealsoPYTHON_PRESITE.\nAddedinversion3.13.\n\u2022 -X gil=0,1forcestheGILtobedisabledorenabled,respectively. Settingto0isonlyavailableinbuilds\nconfiguredwith--disable-gil. SeealsoPYTHON_GILandwhatsnew313-free-threaded-cpython.\nAddedinversion3.13.\nItalsoallowspassingarbitraryvaluesandretrievingthemthroughthesys._xoptionsdictionary.\nAddedinversion3.2.\nChangedinversion3.9: Removedthe-X showalloccountoption.\nChangedinversion3.10: Removedthe-X oldparseroption.\n1.1.4 Controlling color\nThePythoninterpreterisconfiguredbydefaulttousecolorstohighlightoutputincertainsituationssuchaswhen\ndisplayingtracebacks. Thisbehaviorcanbecontrolledbysettingdifferentenvironmentvariables.\nSettingtheenvironmentvariableTERMtodumbwilldisablecolor.\nIftheFORCE_COLORenvironmentvariableisset,thencolorwillbeenabledregardlessofthevalueofTERM.This\nisusefulonCIsystemswhicharen\u2019tterminalsbutcanstilldisplayANSIescapesequences.\nIftheNO_COLORenvironmentvariableisset,Pythonwilldisableallcolorintheoutput. Thistakesprecedenceover\nFORCE_COLOR.\nAlltheseenvironmentvariablesareusedalsobyothertoolstocontrolcoloroutput. Tocontrolthecoloroutputonly\ninthePythoninterpreter,thePYTHON_COLORSenvironmentvariablecanbeused. Thisvariabletakesprecedence\noverNO_COLOR,whichinturntakesprecedenceoverFORCE_COLOR.\n1.1.5 Options you shouldn\u2019t use\n-J\nReservedforusebyJython.\n1.2 Environment variables\nTheseenvironmentvariablesinfluencePython\u2019sbehavior,theyareprocessedbeforethecommand-lineswitchesother\nthan-Eor-I.Itiscustomarythatcommand-lineswitchesoverrideenvironmentalvariableswherethereisaconflict.\nPYTHONHOME\nChange the location of the standard Python libraries. By default, the libraries are searched in prefix/\nlib/pythonversionandexec_prefix/lib/pythonversion, whereprefix andexec_prefix are\ninstallation-dependentdirectories,bothdefaultingto/usr/local.\nWhenPYTHONHOMEissettoasingledirectory,itsvaluereplacesbothprefixandexec_prefix. Tospecify\ndifferentvaluesforthese,setPYTHONHOMEtoprefix:exec_prefix.\n10 Chapter1. Commandlineandenvironment\nPythonSetupandUsage,Release3.13.3\nPYTHONPATH\nAugment the default search path for module files. The format is the same as the shell\u2019s PATH: one or more\ndirectory pathnames separated by os.pathsep (e.g. colons on Unix or semicolons on Windows). Non-\nexistentdirectoriesaresilentlyignored.\nInadditiontonormaldirectories,individualPYTHONPATHentriesmayrefertozipfilescontainingpurePython\nmodules(ineithersourceorcompiledform). Extensionmodulescannotbeimportedfromzipfiles.\nThedefaultsearchpathisinstallationdependent,butgenerallybeginswithprefix/lib/pythonversion\n(seePYTHONHOMEabove). ItisalwaysappendedtoPYTHONPATH.\nAnadditionaldirectorywillbeinsertedinthesearchpathinfrontofPYTHONPATHasdescribedaboveunder\nInterface options. The search path can be manipulated from within a Python program as the variable sys.\npath.\nPYTHONSAFEPATH\nIfthisissettoanon-emptystring,don\u2019tprependapotentiallyunsafepathtosys.path: seethe-Poptionfor\ndetails.\nAddedinversion3.11.\nPYTHONPLATLIBDIR\nIfthisissettoanon-emptystring,itoverridesthesys.platlibdirvalue.\nAddedinversion3.9.\nPYTHONSTARTUP\nIfthisisthenameofareadablefile,thePythoncommandsinthatfileareexecutedbeforethefirstpromptis\ndisplayed in interactive mode. The file is executed in the same namespace where interactive commands are\nexecutedsothatobjectsdefinedorimportedinitcanbeusedwithoutqualificationintheinteractivesession.\nYoucanalsochangethepromptssys.ps1andsys.ps2andthehooksys.__interactivehook__inthis\nfile.\nRaisesanauditingeventcpython.run_startupwiththefilenameastheargumentwhencalledonstartup.\nPYTHONOPTIMIZE\nIfthisissettoanon-emptystringitisequivalenttospecifyingthe-Ooption. Ifsettoaninteger,itisequivalent\ntospecifying-Omultipletimes.\nPYTHONBREAKPOINT\nIfthisisset, itnamesacallableusingdotted-pathnotation. Themodulecontainingthecallablewillbeim-\nportedandthenthecallablewillberunbythedefaultimplementationofsys.breakpointhook()which\nitselfiscalledbybuilt-inbreakpoint(). Ifnotset,orsettotheemptystring,itisequivalenttothevalue\n\u201cpdb.set_trace\u201d. Settingthistothestring\u201c0\u201dcausesthedefaultimplementationofsys.breakpointhook()\ntodonothingbutreturnimmediately.\nAddedinversion3.7.\nPYTHONDEBUG\nIfthisissettoanon-emptystringitisequivalenttospecifyingthe-doption. Ifsettoaninteger,itisequivalent\ntospecifying-dmultipletimes.\nThisenvironmentvariablerequiresadebugbuildofPython,otherwiseit\u2019signored.\nPYTHONINSPECT\nIfthisissettoanon-emptystringitisequivalenttospecifyingthe-ioption.\nThis variable can also be modified by Python code using os.environ to force inspect mode on program\ntermination.\nRaisesanauditingeventcpython.run_stdinwithnoarguments.\nChangedinversion3.12.5: (also3.11.10,3.10.15,3.9.20,and3.8.20)Emitsauditevents.\n1.2. Environmentvariables 11\nPythonSetupandUsage,Release3.13.3\nChangedinversion3.13: UsesPyREPLifpossible,inwhichcasePYTHONSTARTUPisalsoexecuted. Emits\nauditevents.\nPYTHONUNBUFFERED\nIfthisissettoanon-emptystringitisequivalenttospecifyingthe-uoption.\nPYTHONVERBOSE\nIfthisissettoanon-emptystringitisequivalenttospecifyingthe-voption. Ifsettoaninteger,itisequivalent\ntospecifying-vmultipletimes.\nPYTHONCASEOK\nIfthisisset,Pythonignorescaseinimportstatements. ThisonlyworksonWindowsandmacOS.\nPYTHONDONTWRITEBYTECODE\nIfthisissettoanon-emptystring,Pythonwon\u2019ttrytowrite.pycfilesontheimportofsourcemodules. This\nisequivalenttospecifyingthe-Boption.\nPYTHONPYCACHEPREFIX\nIfthisisset,Pythonwillwrite.pycfilesinamirrordirectorytreeatthispath,insteadofin__pycache__\ndirectorieswithinthesourcetree. Thisisequivalenttospecifyingthe-X pycache_prefix=PATHoption.\nAddedinversion3.8.\nPYTHONHASHSEED\nIfthisvariableisnotsetorsettorandom,arandomvalueisusedtoseedthehashesofstrandbytesobjects.\nIfPYTHONHASHSEEDissettoanintegervalue,itisusedasafixedseedforgeneratingthehash()ofthetypes\ncoveredbythehashrandomization.\nItspurposeistoallowrepeatablehashing,suchasforselftestsfortheinterpreteritself,ortoallowaclusterof\npythonprocessestosharehashvalues.\nTheintegermustbeadecimalnumberintherange[0,4294967295]. Specifyingthevalue0willdisablehash\nrandomization.\nAddedinversion3.2.3.\nPYTHONINTMAXSTRDIGITS\nIfthisvariableissettoaninteger,itisusedtoconfiguretheinterpreter\u2019sglobalintegerstringconversionlength\nlimitation.\nAddedinversion3.11.\nPYTHONIOENCODING\nIfthisissetbeforerunningtheinterpreter,itoverridestheencodingusedforstdin/stdout/stderr,inthesyntax\nencodingname:errorhandler. Boththeencodingnameandthe:errorhandlerpartsareoptionaland\nhavethesamemeaningasinstr.encode().\nForstderr,the:errorhandlerpartisignored;thehandlerwillalwaysbe'backslashreplace'.\nChangedinversion3.4: Theencodingnamepartisnowoptional.\nChangedinversion3.6: OnWindows,theencodingspecifiedbythisvariableisignoredforinteractivecon-\nsolebuffersunlessPYTHONLEGACYWINDOWSSTDIO isalsospecified. Filesandpipesredirectedthroughthe\nstandardstreamsarenotaffected.\nPYTHONNOUSERSITE\nIfthisisset,Pythonwon\u2019taddtheuser site-packages directorytosys.path.\n(cid:181) Seealso\nPEP370\u2013Perusersite-packagesdirectory\n12 Chapter1. Commandlineandenvironment\nPythonSetupandUsage,Release3.13.3\nPYTHONUSERBASE\nDefines the user base directory, which is used to compute the path of the user site-packages\ndirectoryandinstallationpathsforpython -m pip install --user.\n(cid:181) Seealso\nPEP370\u2013Perusersite-packagesdirectory\nPYTHONEXECUTABLE\nIfthisenvironmentvariableisset,sys.argv[0]willbesettoitsvalueinsteadofthevaluegotthroughthe\nCruntime. OnlyworksonmacOS.\nPYTHONWARNINGS\nThisisequivalenttothe-Woption. Ifsettoacommaseparatedstring,itisequivalenttospecifying-Wmultiple\ntimes,withfilterslaterinthelisttakingprecedenceoverthoseearlierinthelist.\nThesimplestsettingsapplyaparticularactionunconditionallytoallwarningsemittedbyaprocess(eventhose\nthatareotherwiseignoredbydefault):\nPYTHONWARNINGS=default # Warn once per call location\nPYTHONWARNINGS=error # Convert to exceptions\nPYTHONWARNINGS=always # Warn every time\nPYTHONWARNINGS=all # Same as PYTHONWARNINGS=always\nPYTHONWARNINGS=module # Warn once per calling module\nPYTHONWARNINGS=once # Warn once per Python process\nPYTHONWARNINGS=ignore # Never warn\nSeewarning-filteranddescribing-warning-filtersformoredetails.\nPYTHONFAULTHANDLER\nIfthisenvironmentvariableissettoanon-emptystring,faulthandler.enable()iscalledatstartup:install\nahandlerforSIGSEGV,SIGFPE,SIGABRT,SIGBUSandSIGILLsignalstodumpthePythontraceback. This\nisequivalentto-X faulthandleroption.\nAddedinversion3.3.\nPYTHONTRACEMALLOC\nIf this environment variable is set to a non-empty string, start tracing Python memory allocations using the\ntracemallocmodule. Thevalueofthevariableisthemaximumnumberofframesstoredinatracebackof\natrace. Forexample,PYTHONTRACEMALLOC=1storesonlythemostrecentframe. Seethetracemalloc.\nstart()functionformoreinformation. Thisisequivalenttosettingthe-X tracemallocoption.\nAddedinversion3.4.\nPYTHONPROFILEIMPORTTIME\nIfthisenvironmentvariableissettoanon-emptystring,Pythonwillshowhowlongeachimporttakes. This\nisequivalenttosettingthe-X importtimeoption.\nAddedinversion3.7.\nPYTHONASYNCIODEBUG\nIfthisenvironmentvariableissettoanon-emptystring,enablethedebugmodeoftheasynciomodule.\nAddedinversion3.4.\nPYTHONMALLOC\nSetthePythonmemoryallocatorsand/orinstalldebughooks.\nSetthefamilyofmemoryallocatorsusedbyPython:\n\u2022 default: usethedefaultmemoryallocators.\n1.2. Environmentvariables 13\nPythonSetupandUsage,Release3.13.3\n\u2022 malloc: use the malloc() function of the C library for all domains (PYMEM_DOMAIN_RAW,\nPYMEM_DOMAIN_MEM,PYMEM_DOMAIN_OBJ).\n\u2022 pymalloc:usethepymallocallocatorforPYMEM_DOMAIN_MEMandPYMEM_DOMAIN_OBJdomainsand\nusethemalloc()functionforthePYMEM_DOMAIN_RAWdomain.\n\u2022 mimalloc: use the mimalloc allocator for PYMEM_DOMAIN_MEM and PYMEM_DOMAIN_OBJ domains\nandusethemalloc()functionforthePYMEM_DOMAIN_RAWdomain.\nInstalldebughooks:\n\u2022 debug: installdebughooksontopofthedefaultmemoryallocators.\n\u2022 malloc_debug: sameasmallocbutalsoinstalldebughooks.\n\u2022 pymalloc_debug: sameaspymallocbutalsoinstalldebughooks.\n\u2022 mimalloc_debug: sameasmimallocbutalsoinstalldebughooks.\nAddedinversion3.6.\nChangedinversion3.7: Addedthe\"default\"allocator.\nPYTHONMALLOCSTATS\nIfsettoanon-emptystring, Pythonwillprintstatisticsofthepymallocmemoryallocatoreverytimeanew\npymallocobjectarenaiscreated,andonshutdown.\nThisvariableisignoredifthePYTHONMALLOCenvironmentvariableisusedtoforcethemalloc()allocator\noftheClibrary,orifPythonisconfiguredwithoutpymallocsupport.\nChangedinversion3.6: ThisvariablecannowalsobeusedonPythoncompiledinreleasemode. Itnowhas\nnoeffectifsettoanemptystring.\nPYTHONLEGACYWINDOWSFSENCODING\nIfsettoanon-emptystring,thedefaultfilesystemencodinganderrorhandlermodewillreverttotheirpre-3.6\nvaluesof\u2018mbcs\u2019and\u2018replace\u2019,respectively. Otherwise,thenewdefaults\u2018utf-8\u2019and\u2018surrogatepass\u2019areused.\nThismayalsobeenabledatruntimewithsys._enablelegacywindowsfsencoding().\nAvailability: Windows.\nAddedinversion3.6: SeePEP529formoredetails.\nPYTHONLEGACYWINDOWSSTDIO\nIfsettoanon-emptystring,doesnotusethenewconsolereaderandwriter. ThismeansthatUnicodecharacters\nwillbeencodedaccordingtotheactiveconsolecodepage,ratherthanusingutf-8.\nThisvariableisignoredifthestandardstreamsareredirected(tofilesorpipes)ratherthanreferringtoconsole\nbuffers.\nAvailability: Windows.\nAddedinversion3.6.\nPYTHONCOERCECLOCALE\nIfsettothevalue0,causesthemainPythoncommandlineapplicationtoskipcoercingthelegacyASCII-based\nCandPOSIXlocalestoamorecapableUTF-8basedalternative.\nIfthisvariableisnot set(orissettoavalueotherthan0),theLC_ALLlocaleoverrideenvironmentvariable\nisalsonotset,andthecurrentlocalereportedfortheLC_CTYPEcategoryiseitherthedefaultClocale,orelse\ntheexplicitlyASCII-basedPOSIXlocale,thenthePythonCLIwillattempttoconfigurethefollowinglocales\nfortheLC_CTYPEcategoryintheorderlistedbeforeloadingtheinterpreterruntime:\n\u2022 C.UTF-8\n\u2022 C.utf8\n\u2022 UTF-8\n14 Chapter1. Commandlineandenvironment\nPythonSetupandUsage,Release3.13.3\nIf setting one of these locale categories succeeds, then the LC_CTYPE environment variable will also be set\naccordinglyinthecurrentprocessenvironmentbeforethePythonruntimeisinitialized. Thisensuresthatin\nadditiontobeingseenbyboththeinterpreteritselfandotherlocale-awarecomponentsrunninginthesame\nprocess (such as the GNU readline library), the updated setting is also seen in subprocesses (regardless\nof whether or not those processes are running a Python interpreter), as well as in operations that query the\nenvironmentratherthanthecurrentClocale(suchasPython\u2019sownlocale.getdefaultlocale()).\nConfiguring one of these locales (either explicitly or via the above implicit locale coercion) automatically\nenablesthesurrogateescapeerrorhandlerforsys.stdinandsys.stdout(sys.stderrcontinuesto\nuse backslashreplace as it does in any other locale). This stream handling behavior can be overridden\nusingPYTHONIOENCODINGasusual.\nFordebuggingpurposes,settingPYTHONCOERCECLOCALE=warnwillcausePythontoemitwarningmessages\nonstderrifeitherthelocalecoercionactivates,orelseifalocalethatwouldhavetriggeredcoercionisstill\nactivewhenthePythonruntimeisinitialized.\nAlso note that even when locale coercion is disabled, or when it fails to find a suitable target locale,\nPYTHONUTF8 will still activate by default in legacy ASCII-based locales. Both features must be disabled\ninordertoforcetheinterpretertouseASCIIinsteadofUTF-8forsysteminterfaces.\nAvailability: Unix.\nAddedinversion3.7: SeePEP538formoredetails.\nPYTHONDEVMODE\nIfthisenvironmentvariableissettoanon-emptystring,enablePythonDevelopmentMode,introducingad-\nditionalruntimechecksthataretooexpensivetobeenabledbydefault. Thisisequivalenttosettingthe-X\ndevoption.\nAddedinversion3.7.\nPYTHONUTF8\nIfsetto1,enablethePythonUTF-8Mode.\nIfsetto0,disablethePythonUTF-8Mode.\nSettinganyothernon-emptystringcausesanerrorduringinterpreterinitialisation.\nAddedinversion3.7.\nPYTHONWARNDEFAULTENCODING\nIfthisenvironmentvariableissettoanon-emptystring,issueaEncodingWarningwhenthelocale-specific\ndefaultencodingisused.\nSeeio-encoding-warningfordetails.\nAddedinversion3.10.\nPYTHONNODEBUGRANGES\nIfthisvariableisset,itdisablestheinclusionofthetablesmappingextralocationinformation(endline,start\ncolumnoffsetandendcolumnoffset)toeveryinstructionincodeobjects. Thisisusefulwhensmallercode\nobjectsandpycfilesaredesiredaswellassuppressingtheextravisuallocationindicatorswhentheinterpreter\ndisplaystracebacks.\nAddedinversion3.11.\nPYTHONPERFSUPPORT\nIfthisvariableissettoanonzerovalue,itenablessupportfortheLinuxperfprofilersoPythoncallscanbe\ndetectedbyit.\nIfsetto0,disableLinuxperfprofilersupport.\nSeealsothe-X perf command-lineoptionandperf_profiling.\nAddedinversion3.12.\n1.2. Environmentvariables 15\nPythonSetupandUsage,Release3.13.3\nPYTHON_PERF_JIT_SUPPORT\nIfthisvariableissettoanonzerovalue,itenablessupportfortheLinuxperfprofilersoPythoncallscanbe\ndetectedbyitusingDWARFinformation.\nIfsetto0,disableLinuxperfprofilersupport.\nSeealsothe-X perf_jitcommand-lineoptionandperf_profiling.\nAddedinversion3.13.\nPYTHON_CPU_COUNT\nIf this variable is set to a positive integer, it overrides the return values of os.cpu_count() and os.\nprocess_cpu_count().\nSeealsothe-X cpu_countcommand-lineoption.\nAddedinversion3.13.\nPYTHON_FROZEN_MODULES\nIf this variable is set to on or off, it determines whether or not frozen modules are ignored by the import\nmachinery. A valueof on means theygetimportedand off means theyareignored. Thedefaultis on for\nnon-debug builds (the normal case) and off for debug builds. Note that the importlib_bootstrap and\nimportlib_bootstrap_externalfrozenmodulesarealwaysused,evenifthisflagissettooff.\nSeealsothe-X frozen_modulescommand-lineoption.\nAddedinversion3.13.\nPYTHON_COLORS\nIfthisvariableissetto1,theinterpreterwillcolorizevariouskindsofoutput. Settingitto0deactivatesthis\nbehavior. SeealsoControllingcolor.\nAddedinversion3.13.\nPYTHON_BASIC_REPL\nIfthisvariableissettoanyvalue,theinterpreterwillnotattempttoloadthePython-basedREPLthatrequires\ncursesandreadline,andwillinsteadusethetraditionalparser-basedREPL.\nAddedinversion3.13.\nPYTHON_HISTORY\nThis environment variable can be used to set the location of a .python_history file (by default, it is .\npython_historyintheuser\u2019shomedirectory).\nAddedinversion3.13.\nPYTHON_GIL\nIfthisvariableissetto1,theglobalinterpreterlock(GIL)willbeforcedon. Settingitto0forcestheGILoff\n(needsPythonconfiguredwiththe--disable-gilbuildoption).\nSeealsothe-X gilcommand-lineoption,whichtakesprecedenceoverthisvariable,andwhatsnew313-free-\nthreaded-cpython.\nAddedinversion3.13.\n1.2.1 Debug-mode variables\nPYTHONDUMPREFS\nIfset,Pythonwilldumpobjectsandreferencecountsstillaliveaftershuttingdowntheinterpreter.\nNeedsPythonconfiguredwiththe--with-trace-refsbuildoption.\n16 Chapter1. Commandlineandenvironment\nPythonSetupandUsage,Release3.13.3\nPYTHONDUMPREFSFILE\nIfset,Pythonwilldumpobjectsandreferencecountsstillaliveaftershuttingdowntheinterpreterintoafile\nunderthepathgivenasthevaluetothisenvironmentvariable.\nNeedsPythonconfiguredwiththe--with-trace-refsbuildoption.\nAddedinversion3.11.\nPYTHON_PRESITE\nIf this variable is set to a module, that module will be imported early in the interpreter lifecycle, before the\nsite module is executed, and before the __main__ module is created. Therefore, the imported module is\nnottreatedas__main__.\nThiscanbeusedtoexecutecodeearlyduringPythoninitialization.\nToimportasubmodule,usepackage.moduleasthevalue,likeinanimportstatement.\nSeealsothe-X presitecommand-lineoption,whichtakesprecedenceoverthisvariable.\nNeedsPythonconfiguredwiththe--with-pydebugbuildoption.\nAddedinversion3.13.\n1.2. Environmentvariables 17\nPythonSetupandUsage,Release3.13.3\n18 Chapter1. Commandlineandenvironment\nCHAPTER\nTWO\nUSING PYTHON ON UNIX PLATFORMS\n2.1 Getting and installing the latest version of Python\n2.1.1 On Linux\nPythoncomespreinstalledonmostLinuxdistributions, andisavailableasapackageonallothers. Howeverthere\narecertainfeaturesyoumightwanttousethatarenotavailableonyourdistro\u2019spackage. Youcancompilethelatest\nversionofPythonfromsource.\nIntheeventthatthelatestversionofPythondoesn\u2019tcomepreinstalledandisn\u2019tintherepositoriesaswell,youcan\nmakepackagesforyourowndistro. Havealookatthefollowinglinks:\n(cid:181) Seealso\nhttps://www.debian.org/doc/manuals/maint-guide/first.en.html\nforDebianusers\nhttps://en.opensuse.org/Portal:Packaging\nforOpenSuseusers\nhttps://docs.fedoraproject.org/en-US/package-maintainers/Packaging_Tutorial_GNU_Hello/\nforFedorausers\nhttps://slackbook.org/html/package-management-making-packages.html\nforSlackwareusers\nInstallingIDLE\nInsomecases,IDLEmightnotbeincludedinyourPythoninstallation.\n\u2022 ForDebianandUbuntuusers:\nsudo apt update\nsudo apt install idle\n\u2022 ForFedora,RHEL,andCentOSusers:\nsudo dnf install python3-idle\n\u2022 ForSUSEandOpenSUSEusers:\nsudo zypper install python3-idle\n\u2022 ForAlpineLinuxusers:\nsudo apk add python3-idle\n19\nPythonSetupandUsage,Release3.13.3\n2.1.2 On FreeBSD and OpenBSD\n\u2022 FreeBSDusers,toaddthepackageuse:\npkg install python3\n\u2022 OpenBSDusers,toaddthepackageuse:\npkg_add -r python\npkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your\u2423\n,\u2192architecture here>/python-<version>.tgz\nForexamplei386usersgetthe2.5.1versionofPythonusing:\npkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz\n2.2 Building Python\nIfyouwanttocompileCPythonyourself,firstthingyoushoulddoisgetthesource. Youcandownloadeitherthe\nlatestrelease\u2019ssourceorjustgrabafreshclone. (Ifyouwanttocontributepatches,youwillneedaclone.)\nThebuildprocessconsistsoftheusualcommands:\n./configure\nmake\nmake install\nConfigurationoptionsandcaveatsforspecificUnixplatformsareextensivelydocumentedintheREADME.rstfilein\ntherootofthePythonsourcetree.\n(cid:193) Warning\nmake install can overwrite or masquerade the python3 binary. make altinstall is therefore recom-\nmendedinsteadofmake installsinceitonlyinstallsexec_prefix/bin/pythonversion.\n2.3 Python-related paths and files\nThese are subject to difference depending on local installation conventions; prefix and exec_prefix are\ninstallation-dependentandshouldbeinterpretedasforGNUsoftware;theymaybethesame.\nForexample,onmostLinuxsystems,thedefaultforbothis/usr.\nFile/directory Meaning\nexec_prefix/bin/python3 Recommendedlocationoftheinterpreter.\nprefix/lib/pythonversion, Recommended locations of the directories containing the standard\nexec_prefix/lib/pythonversion modules.\nprefix/include/pythonversion, Recommendedlocationsofthedirectoriescontainingtheincludefiles\nexec_prefix/include/ needed for developing Python extensions and embedding the inter-\npythonversion preter.\n20 Chapter2. UsingPythononUnixplatforms\nPythonSetupandUsage,Release3.13.3\n2.4 Miscellaneous\nToeasilyusePythonscriptsonUnix,youneedtomakethemexecutable,e.g. with\n$ chmod +x script\nandputanappropriateShebanglineatthetopofthescript. Agoodchoiceisusually\n#!/usr/bin/env python3\nwhichsearchesforthePythoninterpreterinthewholePATH.However,someUnicesmaynothavetheenvcommand,\nsoyoumayneedtohardcode/usr/bin/python3astheinterpreterpath.\nTouseshellcommandsinyourPythonscripts,lookatthesubprocessmodule.\n2.5 Custom OpenSSL\n1. Touseyourvendor\u2019sOpenSSLconfigurationandsystemtruststore,locatethedirectorywithopenssl.cnf\nfileorsymlinkin/etc. Onmostdistributionthefileiseitherin/etc/sslor/etc/pki/tls. Thedirectory\nshouldalsocontainacert.pemfileand/oracertsdirectory.\n$ find /etc/ -name openssl.cnf -printf \"%h\\n\"\n/etc/ssl\n2. Download,build,andinstallOpenSSL.Makesureyouuseinstall_swandnotinstall. Theinstall_sw\ntargetdoesnotoverrideopenssl.cnf.\n$ curl -O https://www.openssl.org/source/openssl-VERSION.tar.gz\n$ tar xzf openssl-VERSION\n$ pushd openssl-VERSION\n$ ./config \\\n--prefix=/usr/local/custom-openssl \\\n--libdir=lib \\\n--openssldir=/etc/ssl\n$ make -j1 depend\n$ make -j8\n$ make install_sw\n$ popd\n3. Build Python with custom OpenSSL (see the configure --with-openssl and --with-openssl-rpath\noptions)\n$ pushd python-3.x.x\n$ ./configure -C \\\n--with-openssl=/usr/local/custom-openssl \\\n--with-openssl-rpath=auto \\\n--prefix=/usr/local/python-3.x.x\n$ make -j8\n$ make altinstall\n(cid:174) Note\nPatch releases of OpenSSL have a backwards compatible ABI. You don\u2019t need to recompile Python to update\nOpenSSL.It\u2019ssufficienttoreplacethecustomOpenSSLinstallationwithanewerversion.\n2.4. Miscellaneous 21\nPythonSetupandUsage,Release3.13.3\n22 Chapter2. UsingPythononUnixplatforms\nCHAPTER\nTHREE\nCONFIGURE PYTHON\n3.1 Build Requirements\nFeaturesandminimumversionsrequiredtobuildCPython:\n\u2022 AC11compiler. OptionalC11featuresarenotrequired.\n\u2022 OnWindows,MicrosoftVisualStudio2017orlaterisrequired.\n\u2022 SupportforIEEE754floating-pointnumbersandfloating-pointNot-a-Number(NaN).\n\u2022 Supportforthreads.\n\u2022 OpenSSL 1.1.1 is the minimum version and OpenSSL 3.0.9 is the recommended minimum version for the\nsslandhashlibextensionmodules.\n\u2022 SQLite3.15.2forthesqlite3extensionmodule.\n\u2022 Tcl/Tk8.5.12forthetkintermodule.\n\u2022 Autoconf2.71andaclocal1.16.5arerequiredtoregeneratetheconfigurescript.\nChangedinversion3.1: Tcl/Tkversion8.3.1isnowrequired.\nChangedinversion3.5:OnWindows,VisualStudio2015orlaterisnowrequired. Tcl/Tkversion8.4isnowrequired.\nChangedinversion3.6: SelectedC99featuresarenowrequired,like<stdint.h>andstatic inlinefunctions.\nChangedinversion3.7: ThreadsupportandOpenSSL1.0.2arenowrequired.\nChangedinversion3.10: OpenSSL1.1.1isnowrequired. RequireSQLite3.7.15.\nChangedinversion3.11: C11compiler,IEEE754andNaNsupportarenowrequired. OnWindows,VisualStudio\n2017orlaterisrequired. Tcl/Tkversion8.5.12isnowrequiredforthetkintermodule.\nChangedinversion3.13: Autoconf2.71,aclocal1.16.5andSQLite3.15.2arenowrequired.\nSeealsoPEP7\u201cStyleGuideforCCode\u201dandPEP11\u201cCPythonplatformsupport\u201d.\n3.2 Generated files\nTo reduce build dependencies, Python source code contains multiple generated files. Commands to regenerate all\ngeneratedfiles:\nmake regen-all\nmake regen-stdlib-module-names\nmake regen-limited-abi\nmake regen-configure\nTheMakefile.pre.infiledocumentsgeneratedfiles,theirinputs,andtoolsusedtoregeneratethem. Searchfor\nregen-*maketargets.\n23\nPythonSetupandUsage,Release3.13.3\n3.2.1 configure script\nThe make regen-configure command regenerates the aclocal.m4 file and the configure script using the\nTools/build/regen-configure.shshellscriptwhichusesanUbuntucontainertogetthesametoolsversions\nandhaveareproducibleoutput.\nThecontainerisoptional,thefollowingcommandcanberunlocally:\nautoreconf -ivf -Werror\nThegeneratedfilescanchangedependingontheexactautoconf-archive,aclocalandpkg-configversions.\n3.3 Configure Options\nListallconfigurescriptoptionsusing:\n./configure --help\nSeealsotheMisc/SpecialBuilds.txtinthePythonsourcedistribution.\n3.3.1 General Options\n--enable-loadable-sqlite-extensions\nSupportloadableextensionsinthe_sqliteextensionmodule(defaultisno)ofthesqlite3module.\nSeethesqlite3.Connection.enable_load_extension()methodofthesqlite3module.\nAddedinversion3.6.\n--disable-ipv6\nDisableIPv6support(enabledbydefaultifsupported),seethesocketmodule.\n--enable-big-digits=[15|30]\nDefinethesizeinbitsofPythonintdigits: 15or30bits.\nBydefault,thedigitsizeis30.\nDefinethePYLONG_BITS_IN_DIGITto15or30.\nSeesys.int_info.bits_per_digit.\n--with-suffix=SUFFIX\nSetthePythonexecutablesuffixtoSUFFIX.\nThedefaultsuffixis.exeonWindowsandmacOS(python.exeexecutable), .jsonEmscriptennode, .\nhtmlonEmscriptenbrowser,.wasmonWASI,andanemptystringonotherplatforms(pythonexecutable).\nChangedinversion3.11: ThedefaultsuffixonWASMplatformisoneof.js,.htmlor.wasm.\n--with-tzpath=<list of absolute paths separated by pathsep>\nSelectthedefaulttimezonesearchpathforzoneinfo.TZPATH.SeetheCompile-timeconfigurationofthe\nzoneinfomodule.\nDefault: /usr/share/zoneinfo:/usr/lib/zoneinfo:/usr/share/lib/zoneinfo:/etc/\nzoneinfo.\nSeeos.pathseppathseparator.\nAddedinversion3.9.\n--without-decimal-contextvar\nBuildthe_decimalextensionmoduleusingathread-localcontextratherthanacoroutine-localcontext(de-\nfault),seethedecimalmodule.\nSeedecimal.HAVE_CONTEXTVARandthecontextvarsmodule.\n24 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\nAddedinversion3.9.\n--with-dbmliborder=<list of backend names>\nOverrideordertocheckdbbackendsforthedbmmodule\nAvalidvalueisacolon(:) separatedstringwiththebackendnames:\n\u2022 ndbm;\n\u2022 gdbm;\n\u2022 bdb.\n--without-c-locale-coercion\nDisableClocalecoerciontoaUTF-8basedlocale(enabledbydefault).\nDon\u2019tdefinethePY_COERCE_C_LOCALEmacro.\nSeePYTHONCOERCECLOCALEandthePEP538.\n--without-freelists\nDisableallfreelistsexcepttheemptytuplesingleton.\nAddedinversion3.11.\n--with-platlibdir=DIRNAME\nPythonlibrarydirectoryname(defaultislib).\nFedoraandSuSEuselib64on64-bitplatforms.\nSeesys.platlibdir.\nAddedinversion3.9.\n--with-wheel-pkg-dir=PATH\nDirectoryofwheelpackagesusedbytheensurepipmodule(nonebydefault).\nSomeLinuxdistributionpackagingpoliciesrecommendagainstbundlingdependencies. Forexample,Fedora\ninstallswheelpackagesinthe/usr/share/python-wheels/directoryanddon\u2019tinstalltheensurepip.\n_bundledpackage.\nAddedinversion3.10.\n--with-pkg-config=[check|yes|no]\nWhetherconfigureshouldusepkg-configtodetectbuilddependencies.\n\u2022 check(default): pkg-configisoptional\n\u2022 yes: pkg-configismandatory\n\u2022 no: configuredoesnotusepkg-configevenwhenpresent\nAddedinversion3.11.\n--enable-pystats\nTurnoninternalPythonperformancestatisticsgathering.\nBydefault, statisticsgatheringisoff. Usepython3 -X pystatscommandorsetPYTHONSTATS=1envi-\nronmentvariabletoturnonstatisticsgatheringatPythonstartup.\nAtPythonexit,dumpstatisticsifstatisticsgatheringwasonandnotcleared.\nEffects:\n\u2022 Add-X pystatscommandlineoption.\n\u2022 AddPYTHONSTATSenvironmentvariable.\n\u2022 DefinethePy_STATSmacro.\n\u2022 Addfunctionstothesysmodule:\n3.3. ConfigureOptions 25\nPythonSetupandUsage,Release3.13.3\n\u2013 sys._stats_on(): Turnsonstatisticsgathering.\n\u2013 sys._stats_off(): Turnsoffstatisticsgathering.\n\u2013 sys._stats_clear(): Clearsthestatistics.\n\u2013 sys._stats_dump(): Dumpstatisticstofile,andclearsthestatistics.\nThestatisticswillbedumpedtoaarbitrary(probablyunique)filein/tmp/py_stats/(Unix)orC:\\temp\\\npy_stats\\(Windows). Ifthatdirectorydoesnotexist,resultswillbeprintedonstderr.\nUseTools/scripts/summarize_stats.pytoreadthestats.\nStatistics:\n\u2022 Opcode:\n\u2013 Specialization: success,failure,hit,deferred,miss,deopt,failures;\n\u2013 Executioncount;\n\u2013 Paircount.\n\u2022 Call:\n\u2013 InlinedPythoncalls;\n\u2013 PyEvalcalls;\n\u2013 Framespushed;\n\u2013 Frameobjectcreated;\n\u2013 Evalcalls: vector,generator,legacy,functionVECTORCALL,buildclass,slot,function\u201cex\u201d,API,\nmethod.\n\u2022 Object:\n\u2013 increfanddecref;\n\u2013 interpreterincrefanddecref;\n\u2013 allocations: all,512bytes,4kiB,big;\n\u2013 free;\n\u2013 to/fromfreelists;\n\u2013 dictionarymaterialized/dematerialized;\n\u2013 typecache;\n\u2013 optimizationattempts;\n\u2013 optimizationtracescreated/executed;\n\u2013 uopsexecuted.\n\u2022 Garbagecollector:\n\u2013 Garbagecollections;\n\u2013 Objectsvisited;\n\u2013 Objectscollected.\nAddedinversion3.11.\n--disable-gil\nEnables experimental support for running Python without the global interpreter lock (GIL): free threading\nbuild.\nDefinesthePy_GIL_DISABLEDmacroandadds\"t\"tosys.abiflags.\nSeewhatsnew313-free-threaded-cpythonformoredetail.\n26 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\nAddedinversion3.13.\n--enable-experimental-jit=[no|yes|yes-off|interpreter]\nIndicatehowtointegratetheJITcompiler.\n\u2022 no-buildtheinterpreterwithouttheJIT.\n\u2022 yes-buildtheinterpreterwiththeJIT.\n\u2022 yes-off-buildtheinterpreterwiththeJITbutdisableitbydefault.\n\u2022 interpreter-buildtheinterpreterwithouttheJIT,butwiththetier2enabledinterpreter.\nByconvention,--enable-experimental-jitisashorthandfor--enable-experimental-jit=yes.\n(cid:174) Note\nWhenbuildingCPythonwithJITenabled,ensurethatyoursystemhasPython3.11orlaterinstalled.\nAddedinversion3.13.\nPKG_CONFIG\nPathtopkg-configutility.\nPKG_CONFIG_LIBDIR\nPKG_CONFIG_PATH\npkg-configoptions.\n3.3.2 C compiler options\nCC\nCcompilercommand.\nCFLAGS\nCcompilerflags.\nCPP\nCpreprocessorcommand.\nCPPFLAGS\nCpreprocessorflags,e.g. -Iinclude_dir.\n3.3.3 Linker options\nLDFLAGS\nLinkerflags,e.g. -Llibrary_directory.\nLIBS\nLibrariestopasstothelinker,e.g. -llibrary.\nMACHDEP\nNameformachine-dependentlibraryfiles.\n3.3.4 Options for third-party dependencies\nAddedinversion3.11.\nBZIP2_CFLAGS\nBZIP2_LIBS\nCcompilerandlinkerflagstolinkPythontolibbz2,usedbybz2module,overridingpkg-config.\n3.3. ConfigureOptions 27\nPythonSetupandUsage,Release3.13.3\nCURSES_CFLAGS\nCURSES_LIBS\nC compiler and linker flags for libncurses or libncursesw, used by curses module, overriding\npkg-config.\nGDBM_CFLAGS\nGDBM_LIBS\nCcompilerandlinkerflagsforgdbm.\nLIBB2_CFLAGS\nLIBB2_LIBS\nCcompilerandlinkerflagsforlibb2(BLAKE2),usedbyhashlibmodule,overridingpkg-config.\nLIBEDIT_CFLAGS\nLIBEDIT_LIBS\nCcompilerandlinkerflagsforlibedit,usedbyreadlinemodule,overridingpkg-config.\nLIBFFI_CFLAGS\nLIBFFI_LIBS\nCcompilerandlinkerflagsforlibffi,usedbyctypesmodule,overridingpkg-config.\nLIBMPDEC_CFLAGS\nLIBMPDEC_LIBS\nCcompilerandlinkerflagsforlibmpdec,usedbydecimalmodule,overridingpkg-config.\n(cid:174) Note\nTheseenvironmentvariableshavenoeffectunless--with-system-libmpdecisspecified.\nLIBLZMA_CFLAGS\nLIBLZMA_LIBS\nCcompilerandlinkerflagsforliblzma,usedbylzmamodule,overridingpkg-config.\nLIBREADLINE_CFLAGS\nLIBREADLINE_LIBS\nCcompilerandlinkerflagsforlibreadline,usedbyreadlinemodule,overridingpkg-config.\nLIBSQLITE3_CFLAGS\nLIBSQLITE3_LIBS\nCcompilerandlinkerflagsforlibsqlite3,usedbysqlite3module,overridingpkg-config.\nLIBUUID_CFLAGS\nLIBUUID_LIBS\nCcompilerandlinkerflagsforlibuuid,usedbyuuidmodule,overridingpkg-config.\nPANEL_CFLAGS\nPANEL_LIBS\nCcompilerandlinkerflagsforPANEL,overridingpkg-config.\nC compiler and linker flags for libpanel or libpanelw, used by curses.panel module, overriding\npkg-config.\n28 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\nTCLTK_CFLAGS\nTCLTK_LIBS\nCcompilerandlinkerflagsforTCLTK,overridingpkg-config.\nZLIB_CFLAGS\nZLIB_LIBS\nCcompilerandlinkerflagsforlibzlib,usedbygzipmodule,overridingpkg-config.\n3.3.5 WebAssembly Options\n--with-emscripten-target=[browser|node]\nSetbuildflavorforwasm32-emscripten.\n\u2022 browser(default): preloadminimalstdlib,defaultMEMFS.\n\u2022 node: NODERAWFSandpthreadsupport.\nAddedinversion3.11.\n--enable-wasm-dynamic-linking\nTurnondynamiclinkingsupportforWASM.\nDynamiclinkingenablesdlopen. Filesizeoftheexecutableincreasesduetolimiteddeadcodeelimination\nandadditionalfeatures.\nAddedinversion3.11.\n--enable-wasm-pthreads\nTurnonpthreadssupportforWASM.\nAddedinversion3.11.\n3.3.6 Install Options\n--prefix=PREFIX\nInstallarchitecture-independentfilesinPREFIX.OnUnix,itdefaultsto/usr/local.\nThisvaluecanberetrievedatruntimeusingsys.prefix.\nAsanexample,onecanuse--prefix=\"$HOME/.local/\"toinstallaPythoninitshomedirectory.\n--exec-prefix=EPREFIX\nInstallarchitecture-dependentfilesinEPREFIX,defaultsto--prefix.\nThisvaluecanberetrievedatruntimeusingsys.exec_prefix.\n--disable-test-modules\nDon\u2019t build nor install test modules, like the test package or the _testcapi extension module (built and\ninstalledbydefault).\nAddedinversion3.10.\n--with-ensurepip=[upgrade|install|no]\nSelecttheensurepipcommandrunonPythoninstallation:\n\u2022 upgrade(default): runpython -m ensurepip --altinstall --upgradecommand.\n\u2022 install: runpython -m ensurepip --altinstallcommand;\n\u2022 no: don\u2019trunensurepip;\nAddedinversion3.6.\n3.3. ConfigureOptions 29\nPythonSetupandUsage,Release3.13.3\n3.3.7 Performance options\nConfiguringPythonusing--enable-optimizations --with-lto(PGO+LTO)isrecommendedforbestper-\nformance. Theexperimental--enable-boltflagcanalsobeusedtoimproveperformance.\n--enable-optimizations\nEnableProfileGuidedOptimization(PGO)usingPROFILE_TASK (disabledbydefault).\nTheCcompilerClangrequiresllvm-profdataprogramforPGO.OnmacOS,GCCalsorequiresit: GCC\nisjustanaliastoClangonmacOS.\nDisable also semantic interposition in libpython if --enable-shared and GCC is used: add\n-fno-semantic-interpositiontothecompilerandlinkerflags.\n(cid:174) Note\nDuring the build, you may encounter compiler warnings about profile data not being available for\nsome source files. These warnings are harmless, as only a subset of the code is exercised dur-\ning profile data acquisition. To disable these warnings on Clang, manually suppress them by adding\n-Wno-profile-instr-unprofiledtoCFLAGS.\nAddedinversion3.6.\nChangedinversion3.10: Use-fno-semantic-interpositiononGCC.\nPROFILE_TASK\nEnvironmentvariableusedintheMakefile: PythoncommandlineargumentsforthePGOgenerationtask.\nDefault: -m test --pgo --timeout=$(TESTTIMEOUT).\nAddedinversion3.8.\nChangedinversion3.13: Taskfailureisnolongerignoredsilently.\n--with-lto=[full|thin|no|yes]\nEnableLinkTimeOptimization(LTO)inanybuild(disabledbydefault).\nTheCcompilerClangrequiresllvm-arforLTO(aronmacOS),aswellasanLTO-awarelinker(ld.gold\norlld).\nAddedinversion3.6.\nAddedinversion3.11: TouseThinLTOfeature,use--with-lto=thinonClang.\nChangedinversion3.12: UseThinLTOasthedefaultoptimizationpolicyonClangifthecompileraccepts\ntheflag.\n--enable-bolt\nEnableusageoftheBOLTpost-linkbinaryoptimizer(disabledbydefault).\nBOLTispartoftheLLVMprojectbutisnotalwaysincludedintheirbinarydistributions. Thisflagrequires\nthatllvm-boltandmerge-fdataareavailable.\nBOLT is still a fairly new project so this flag should be considered experimental for now. Because this tool\noperates on machine code its success is dependent on a combination of the build environment + the other\noptimizationconfigureargs+theCPUarchitecture,andnotallcombinationsaresupported. BOLTversions\nbefore LLVM 16 are known to crash BOLT under some scenarios. Use of LLVM 16 or newer for BOLT\noptimizationisstronglyencouraged.\nTheBOLT_INSTRUMENT_FLAGSandBOLT_APPLY_FLAGSconfigurevariablescanbedefinedtooverride\nthedefaultsetofargumentsforllvm-bolttoinstrumentandapplyBOLTdatatobinaries,respectively.\nAddedinversion3.12.\n30 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\nBOLT_APPLY_FLAGS\nArgumentstollvm-boltwhencreatingaBOLToptimizedbinary.\nAddedinversion3.12.\nBOLT_INSTRUMENT_FLAGS\nArgumentstollvm-boltwheninstrumentingbinaries.\nAddedinversion3.12.\n--with-computed-gotos\nEnablecomputedgotosinevaluationloop(enabledbydefaultonsupportedcompilers).\n--without-mimalloc\nDisablethefastmimallocallocator(enabledbydefault).\nSeealsoPYTHONMALLOCenvironmentvariable.\n--without-pymalloc\nDisablethespecializedPythonmemoryallocatorpymalloc(enabledbydefault).\nSeealsoPYTHONMALLOCenvironmentvariable.\n--without-doc-strings\nDisable static documentation strings to reduce the memory footprint (enabled by default). Documentation\nstringsdefinedinPythonarenotaffected.\nDon\u2019tdefinetheWITH_DOC_STRINGSmacro.\nSeethePyDoc_STRVAR()macro.\n--enable-profiling\nEnableC-levelcodeprofilingwithgprof(disabledbydefault).\n--with-strict-overflow\nAdd-fstrict-overflowtotheCcompilerflags(bydefaultweadd-fno-strict-overflowinstead).\n3.3.8 Python Debug Build\nAdebugbuildisPythonbuiltwiththe--with-pydebugconfigureoption.\nEffectsofadebugbuild:\n\u2022 Displayallwarningsbydefault: thelistofdefaultwarningfiltersisemptyinthewarningsmodule.\n\u2022 Adddtosys.abiflags.\n\u2022 Addsys.gettotalrefcount()function.\n\u2022 Add-X showrefcountcommandlineoption.\n\u2022 Add-dcommandlineoptionandPYTHONDEBUGenvironmentvariabletodebugtheparser.\n\u2022 Addsupportforthe__lltrace__variable: enablelow-leveltracinginthebytecodeevaluationloopifthe\nvariableisdefined.\n\u2022 Installdebughooksonmemoryallocatorstodetectbufferoverflowandothermemoryerrors.\n\u2022 DefinePy_DEBUGandPy_REF_DEBUGmacros.\n\u2022 Add runtime checks: code surrounded by #ifdef Py_DEBUG and #endif. Enable assert(...) and\n_PyObject_ASSERT(...) assertions: don\u2019t set the NDEBUG macro (see also the --with-assertions\nconfigureoption). Mainruntimechecks:\n\u2013 Addsanitychecksonthefunctionarguments.\n\u2013 Unicodeandintobjectsarecreatedwiththeirmemoryfilledwithapatterntodetectusageofuninitialized\nobjects.\n3.3. ConfigureOptions 31\nPythonSetupandUsage,Release3.13.3\n\u2013 Ensurethatfunctionswhichcanclearorreplacethecurrentexceptionarenotcalledwithanexception\nraised.\n\u2013 Checkthatdeallocatorfunctionsdon\u2019tchangethecurrentexception.\n\u2013 Thegarbagecollector(gc.collect()function)runssomebasicchecksonobjectsconsistency.\n\u2013 ThePy_SAFE_DOWNCAST()macrochecksforintegerunderflowandoverflowwhendowncastingfrom\nwidetypestonarrowtypes.\nSeealsothePythonDevelopmentModeandthe--with-trace-refsconfigureoption.\nChangedinversion3.8: ReleasebuildsanddebugbuildsarenowABIcompatible: definingthePy_DEBUGmacrono\nlongerimpliesthePy_TRACE_REFSmacro(seethe--with-trace-refsoption).\n3.3.9 Debug options\n--with-pydebug\nBuildPythonindebugmode: definethePy_DEBUGmacro(disabledbydefault).\n--with-trace-refs\nEnabletracingreferencesfordebuggingpurpose(disabledbydefault).\nEffects:\n\u2022 DefinethePy_TRACE_REFSmacro.\n\u2022 Addsys.getobjects()function.\n\u2022 AddPYTHONDUMPREFSenvironmentvariable.\nThePYTHONDUMPREFSenvironmentvariablecanbeusedtodumpobjectsandreferencecountsstillaliveat\nPythonexit.\nStaticallyallocatedobjectsarenottraced.\nAddedinversion3.8.\nChangedinversion3.13: ThisbuildisnowABIcompatiblewithreleasebuildanddebugbuild.\n--with-assertions\nBuildwithCassertionsenabled(defaultisno): assert(...);and_PyObject_ASSERT(...);.\nIfset,theNDEBUGmacroisnotdefinedintheOPTcompilervariable.\nSeealsothe--with-pydebugoption(debugbuild)whichalsoenablesassertions.\nAddedinversion3.6.\n--with-valgrind\nEnableValgrindsupport(defaultisno).\n--with-dtrace\nEnableDTracesupport(defaultisno).\nSeeInstrumentingCPythonwithDTraceandSystemTap.\nAddedinversion3.6.\n--with-address-sanitizer\nEnableAddressSanitizermemoryerrordetector,asan(defaultisno).\nAddedinversion3.6.\n--with-memory-sanitizer\nEnableMemorySanitizerallocationerrordetector,msan(defaultisno).\nAddedinversion3.6.\n32 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\n--with-undefined-behavior-sanitizer\nEnableUndefinedBehaviorSanitizerundefinedbehaviourdetector,ubsan(defaultisno).\nAddedinversion3.6.\n--with-thread-sanitizer\nEnableThreadSanitizerdataracedetector,tsan(defaultisno).\nAddedinversion3.13.\n3.3.10 Linker options\n--enable-shared\nEnablebuildingasharedPythonlibrary: libpython(defaultisno).\n--without-static-libpython\nDonotbuildlibpythonMAJOR.MINOR.aanddonotinstallpython.o(builtandenabledbydefault).\nAddedinversion3.10.\n3.3.11 Libraries options\n--with-libs='lib1 ...'\nLinkagainstadditionallibraries(defaultisno).\n--with-system-expat\nBuildthepyexpatmoduleusinganinstalledexpatlibrary(defaultisno).\n--with-system-libmpdec\nBuildthe_decimalextensionmoduleusinganinstalledmpdecimallibrary,seethedecimalmodule(default\nisyes).\nAddedinversion3.3.\nChangedinversion3.13: Defaulttousingtheinstalledmpdecimallibrary.\nDeprecated since version 3.13, will be removed in version 3.15: A copy of the mpdecimal library sources\nwillnolongerbedistributedwithPython3.15.\n(cid:181) Seealso\nLIBMPDEC_CFLAGSandLIBMPDEC_LIBS.\n--with-readline=readline|editline\nDesignateabackendlibraryforthereadlinemodule.\n\u2022 readline: Usereadlineasthebackend.\n\u2022 editline: Useeditlineasthebackend.\nAddedinversion3.10.\n--without-readline\nDon\u2019tbuildthereadlinemodule(builtbydefault).\nDon\u2019tdefinetheHAVE_LIBREADLINEmacro.\nAddedinversion3.10.\n--with-libm=STRING\nOverridelibmmathlibrarytoSTRING(defaultissystem-dependent).\n3.3. ConfigureOptions 33\nPythonSetupandUsage,Release3.13.3\n--with-libc=STRING\nOverridelibcClibrarytoSTRING(defaultissystem-dependent).\n--with-openssl=DIR\nRootoftheOpenSSLdirectory.\nAddedinversion3.7.\n--with-openssl-rpath=[no|auto|DIR]\nSetruntimelibrarydirectory(rpath)forOpenSSLlibraries:\n\u2022 no(default): don\u2019tsetrpath;\n\u2022 auto: auto-detectrpathfrom--with-opensslandpkg-config;\n\u2022 DIR:setanexplicitrpath.\nAddedinversion3.10.\n3.3.12 Security Options\n--with-hash-algorithm=[fnv|siphash13|siphash24]\nSelecthashalgorithmforuseinPython/pyhash.c:\n\u2022 siphash13(default);\n\u2022 siphash24;\n\u2022 fnv.\nAddedinversion3.4.\nAddedinversion3.11: siphash13isaddedanditisthenewdefault.\n--with-builtin-hashlib-hashes=md5,sha1,sha256,sha512,sha3,blake2\nBuilt-inhashmodules:\n\u2022 md5;\n\u2022 sha1;\n\u2022 sha256;\n\u2022 sha512;\n\u2022 sha3(withshake);\n\u2022 blake2.\nAddedinversion3.9.\n--with-ssl-default-suites=[python|openssl|STRING]\nOverridetheOpenSSLdefaultciphersuitesstring:\n\u2022 python(default): usePython\u2019spreferredselection;\n\u2022 openssl: leaveOpenSSL\u2019sdefaultsuntouched;\n\u2022 STRING:useacustomstring\nSeethesslmodule.\nAddedinversion3.7.\nChangedinversion3.10: ThesettingspythonandSTRINGalsosetTLS1.2asminimumprotocolversion.\n34 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\n3.3.13 macOS Options\nSeeMac/README.rst.\n--enable-universalsdk\n--enable-universalsdk=SDKDIR\nCreate a universal binary build. SDKDIR specifies which macOS SDK should be used to perform the build\n(defaultisno).\n--enable-framework\n--enable-framework=INSTALLDIR\nCreateaPython.frameworkratherthanatraditionalUnixinstall. OptionalINSTALLDIRspecifiestheinstal-\nlationpath(defaultisno).\n--with-universal-archs=ARCH\nSpecify the kind of universal binary that should be created. This option is only valid when\n--enable-universalsdkisset.\nOptions:\n\u2022 universal2(x86-64andarm64);\n\u2022 32-bit(PPCandi386);\n\u2022 64-bit(PPC64andx86-64);\n\u2022 3-way(i386,PPCandx86-64);\n\u2022 intel(i386andx86-64);\n\u2022 intel-32(i386);\n\u2022 intel-64(x86-64);\n\u2022 all(PPC,i386,PPC64andx86-64).\nNotethatvaluesforthisconfigurationitemarenotthesameastheidentifiersusedforuniversalbinarywheels\nonmacOS.SeethePythonPackagingUserGuidefordetailsonthepackagingplatformcompatibilitytagsused\nonmacOS\n--with-framework-name=FRAMEWORK\nSpecifythenameforthepythonframeworkonmacOSonlyvalidwhen--enable-frameworkisset(default:\nPython).\n--with-app-store-compliance\n--with-app-store-compliance=PATCH-FILE\nThePythonstandardlibrarycontainsstringsthatareknowntotriggerautomatedinspectiontoolerrorswhen\nsubmitted for distribution by the macOS and iOS App Stores. If enabled, this option will apply the list of\npatchesthatareknowntocorrectappstorecompliance. Acustompatchfilecanalsobespecified. Thisoption\nisdisabledbydefault.\nAddedinversion3.13.\n3.3.14 iOS Options\nSeeiOS/README.rst.\n--enable-framework=INSTALLDIR\nCreate a Python.framework. Unlike macOS, the INSTALLDIR argument specifying the installation path is\nmandatory.\n--with-framework-name=FRAMEWORK\nSpecifythenamefortheframework(default: Python).\n3.3. ConfigureOptions 35\nPythonSetupandUsage,Release3.13.3\n3.3.15 Cross Compiling Options\nCrosscompiling,alsoknownascrossbuilding,canbeusedtobuildPythonforanotherCPUarchitectureorplatform.\nCrosscompilingrequiresaPythoninterpreterforthebuildplatform. TheversionofthebuildPythonmustmatch\ntheversionofthecrosscompiledhostPython.\n--build=BUILD\nconfigureforbuildingonBUILD,usuallyguessedbyconfig.guess.\n--host=HOST\ncross-compiletobuildprogramstorunonHOST(targetplatform)\n--with-build-python=path/to/python\npathtobuildpythonbinaryforcrosscompiling\nAddedinversion3.11.\nCONFIG_SITE=file\nAnenvironmentvariablethatpointstoafilewithconfigureoverrides.\nExampleconfig.sitefile:\n# config.site-aarch64\nac_cv_buggy_getaddrinfo=no\nac_cv_file__dev_ptmx=yes\nac_cv_file__dev_ptc=no\nHOSTRUNNER\nProgramtorunCPythonforthehostplatformforcross-compilation.\nAddedinversion3.11.\nCrosscompilingexample:\nCONFIG_SITE=config.site-aarch64 ../configure \\\n--build=x86_64-pc-linux-gnu \\\n--host=aarch64-unknown-linux-gnu \\\n--with-build-python=../x86_64/python\n3.4 Python Build System\n3.4.1 Main files of the build system\n\u2022 configure.ac=>configure;\n\u2022 Makefile.pre.in=>Makefile(createdbyconfigure);\n\u2022 pyconfig.h(createdbyconfigure);\n\u2022 Modules/Setup: CextensionsbuiltbytheMakefileusingModule/makesetupshellscript;\n3.4.2 Main build steps\n\u2022 Cfiles(.c)arebuiltasobjectfiles(.o).\n\u2022 Astaticlibpythonlibrary(.a)iscreatedfromobjectsfiles.\n\u2022 python.oandthestaticlibpythonlibraryarelinkedintothefinalpythonprogram.\n\u2022 CextensionsarebuiltbytheMakefile(seeModules/Setup).\n36 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\n3.4.3 Main Makefile targets\nmake\nForthemostpart,whenrebuildingaftereditingsomecodeorrefreshingyourcheckoutfromupstream,allyouneed\ntodoisexecutemake,which(perMake\u2019ssemantics)buildsthedefaulttarget,thefirstonedefinedintheMakefile.\nBy tradition (including in the CPython project) this is usually the all target. The configure script expands an\nautoconfvariable,@DEF_MAKE_ALL_RULE@todescribepreciselywhichtargetsmake allwillbuild. Thethree\nchoicesare:\n\u2022 profile-opt(configuredwith--enable-optimizations)\n\u2022 build_wasm(configuredwith--with-emscripten-target)\n\u2022 build_all(configuredwithoutexplicitlyusingeitheroftheothers)\nDependingonthemostrecentsourcefilechanges,Makewillrebuildanytargets(objectfilesandexecutables)deemed\nout-of-date,includingrunningconfigureagainifnecessary. Source/targetdependenciesaremanyandmaintained\nmanuallyhowever,soMakesometimesdoesn\u2019thavealltheinformationnecessarytocorrectlydetectalltargetswhich\nneedtoberebuilt. Dependingonwhichtargetsaren\u2019trebuilt,youmightexperienceanumberofproblems. Ifyou\nhave build or test problems which you can\u2019t otherwise explain, make clean && make should work around most\ndependencyproblems,attheexpenseoflongerbuildtimes.\nmakeplatform\nBuild the python program, but don\u2019t build the standard library extension modules. This generates a file named\nplatformwhichcontainsasinglelinedescribingthedetailsofthebuildplatform,e.g.,macosx-14.3-arm64-3.\n12orlinux-x86_64-3.13.\nmakeprofile-opt\nBuild Python using profile-guided optimization (PGO). You can use the configure --enable-optimizations\noptiontomakethisthedefaulttargetofthemakecommand(make allorjustmake).\nmakeclean\nRemovebuiltfiles.\nmakedistclean\nInadditiontotheworkdonebymake clean,removefilescreatedbytheconfigurescript. configurewillhaveto\nberunbeforebuildingagain.1\nmakeinstall\nBuildthealltargetandinstallPython.\nmaketest\nBuildthealltargetandrunthePythontestsuitewiththe--fast-cioption. Variables:\n\u2022 TESTOPTS:additionalregrtestcommand-lineoptions.\n\u2022 TESTPYTHONOPTS:additionalPythoncommand-lineoptions.\n\u2022 TESTTIMEOUT:timeoutinseconds(default: 10minutes).\n1git clean -fdxisanevenmoreextremewayto\u201cclean\u201dyourcheckout. ItremovesallfilesnotknowntoGit. Whenbughuntingusing\ngit bisect,thisisrecommendedbetweenprobestoguaranteeacompletelycleanbuild. Usewithcare,asitwilldeleteallfilesnotchecked\nintoGit,includingyournew,uncommittedwork.\n3.4. PythonBuildSystem 37\nPythonSetupandUsage,Release3.13.3\nmakebuildbottest\nThis is similar to make test, but uses the --slow-ci option and default timeout of 20 minutes, instead of\n--fast-cioption.\nmakeregen-all\nRegenerate(almost)allgeneratedfiles. Theseinclude(butarenotlimitedto)bytecodecases,andparsergenerator\nfile. make regen-stdlib-module-names and autoconf must be run separately for the remaining generated\nfiles.\n3.4.4 C extensions\nSome C extensions are built as built-in modules, like the sys module. They are built with the\nPy_BUILD_CORE_BUILTINmacrodefined. Built-inmoduleshaveno__file__attribute:\n>>> import sys\n>>> sys\n<module 'sys' (built-in)>\n>>> sys.__file__\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: module 'sys' has no attribute '__file__'\nOther C extensions are built as dynamic libraries, like the _asyncio module. They are built with the\nPy_BUILD_CORE_MODULEmacrodefined. ExampleonLinuxx86-64:\n>>> import _asyncio\n>>> _asyncio\n<module '_asyncio' from '/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_\n,\u219264-linux-gnu.so'>\n>>> _asyncio.__file__\n'/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'\nModules/SetupisusedtogenerateMakefiletargetstobuildCextensions. Atthebeginningofthefiles,Cextensions\narebuiltasbuilt-inmodules. Extensionsdefinedafterthe*shared*markerarebuiltasdynamiclibraries.\nThe PyAPI_FUNC(), PyAPI_DATA() and PyMODINIT_FUNC macros of Include/exports.h are defined dif-\nferentlydependingifthePy_BUILD_CORE_MODULEmacroisdefined:\n\u2022 UsePy_EXPORTED_SYMBOLifthePy_BUILD_CORE_MODULEisdefined\n\u2022 UsePy_IMPORTED_SYMBOLotherwise.\nIf the Py_BUILD_CORE_BUILTIN macro is used by mistake on a C extension built as a shared library, its\nPyInit_xxx()functionisnotexported,causinganImportErroronimport.\n3.5 Compiler and linker flags\nOptionssetbythe./configurescriptandenvironmentvariablesandusedbyMakefile.\n3.5.1 Preprocessor flags\nCONFIGURE_CPPFLAGS\nValueofCPPFLAGSvariablepassedtothe./configurescript.\nAddedinversion3.6.\nCPPFLAGS\n(Objective)C/C++preprocessorflags,e.g. -Iinclude_dirifyouhaveheadersinanonstandarddirectory\ninclude_dir.\n38 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\nBothCPPFLAGS andLDFLAGS needtocontaintheshell\u2019svaluetobeabletobuildextensionmodulesusing\nthedirectoriesspecifiedintheenvironmentvariables.\nBASECPPFLAGS\nAddedinversion3.4.\nPY_CPPFLAGS\nExtrapreprocessorflagsaddedforbuildingtheinterpreterobjectfiles.\nDefault: $(BASECPPFLAGS) -I. -I$(srcdir)/Include $(CONFIGURE_CPPFLAGS)\n$(CPPFLAGS).\nAddedinversion3.2.\n3.5.2 Compiler flags\nCC\nCcompilercommand.\nExample: gcc -pthread.\nCXX\nC++compilercommand.\nExample: g++ -pthread.\nCFLAGS\nCcompilerflags.\nCFLAGS_NODIST\nCFLAGS_NODIST is used for building the interpreter and stdlib C extensions. Use it when a compiler flag\nshouldnotbepartofCFLAGSoncePythonisinstalled(gh-65320).\nInparticular,CFLAGSshouldnotcontain:\n\u2022 thecompilerflag-I(forsettingthesearchpathforincludefiles). The-Iflagsareprocessedfromleft\ntoright,andanyflagsinCFLAGSwouldtakeprecedenceoveruser-andpackage-supplied-Iflags.\n\u2022 hardening flags such as -Werror because distributions cannot control whether packages installed by\nusersconformtosuchheightenedstandards.\nAddedinversion3.5.\nCOMPILEALL_OPTS\nOptionspassedtothecompileallcommandlinewhenbuildingPYCfilesinmake install. Default: -j0.\nAddedinversion3.12.\nEXTRA_CFLAGS\nExtraCcompilerflags.\nCONFIGURE_CFLAGS\nValueofCFLAGSvariablepassedtothe./configurescript.\nAddedinversion3.2.\nCONFIGURE_CFLAGS_NODIST\nValueofCFLAGS_NODISTvariablepassedtothe./configurescript.\nAddedinversion3.5.\nBASECFLAGS\nBasecompilerflags.\nOPT\nOptimizationflags.\n3.5. Compilerandlinkerflags 39\nPythonSetupandUsage,Release3.13.3\nCFLAGS_ALIASING\nStrictornon-strictaliasingflagsusedtocompilePython/dtoa.c.\nAddedinversion3.7.\nCCSHARED\nCompilerflagsusedtobuildasharedlibrary.\nForexample,-fPICisusedonLinuxandonBSD.\nCFLAGSFORSHARED\nExtraCflagsaddedforbuildingtheinterpreterobjectfiles.\nDefault: $(CCSHARED)when--enable-sharedisused,oranemptystringotherwise.\nPY_CFLAGS\nDefault: $(BASECFLAGS) $(OPT) $(CONFIGURE_CFLAGS) $(CFLAGS) $(EXTRA_CFLAGS).\nPY_CFLAGS_NODIST\nDefault: $(CONFIGURE_CFLAGS_NODIST) $(CFLAGS_NODIST) -I$(srcdir)/Include/internal.\nAddedinversion3.5.\nPY_STDMODULE_CFLAGS\nCflagsusedforbuildingtheinterpreterobjectfiles.\nDefault: $(PY_CFLAGS) $(PY_CFLAGS_NODIST) $(PY_CPPFLAGS) $(CFLAGSFORSHARED).\nAddedinversion3.7.\nPY_CORE_CFLAGS\nDefault: $(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE.\nAddedinversion3.2.\nPY_BUILTIN_MODULE_CFLAGS\nCompilerflagstobuildastandardlibraryextensionmoduleasabuilt-inmodule,liketheposixmodule.\nDefault: $(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE_BUILTIN.\nAddedinversion3.8.\nPURIFY\nPurifycommand. Purifyisamemorydebuggerprogram.\nDefault: emptystring(notused).\n3.5.3 Linker flags\nLINKCC\nLinkercommandusedtobuildprogramslikepythonand_testembed.\nDefault: $(PURIFY) $(CC).\nCONFIGURE_LDFLAGS\nValueofLDFLAGSvariablepassedtothe./configurescript.\nAvoidassigningCFLAGS,LDFLAGS,etc. souserscanusethemonthecommandlinetoappendtothesevalues\nwithoutstompingthepre-setvalues.\nAddedinversion3.2.\nLDFLAGS_NODIST\nLDFLAGS_NODIST isusedinthesamemannerasCFLAGS_NODIST.Useitwhenalinkerflagshouldnot be\npartofLDFLAGSoncePythonisinstalled(gh-65320).\nInparticular,LDFLAGSshouldnotcontain:\n40 Chapter3. ConfigurePython\nPythonSetupandUsage,Release3.13.3\n\u2022 thecompilerflag-L(forsettingthesearchpathforlibraries). The-Lflagsareprocessedfromleftto\nright,andanyflagsinLDFLAGSwouldtakeprecedenceoveruser-andpackage-supplied-Lflags.\nCONFIGURE_LDFLAGS_NODIST\nValueofLDFLAGS_NODISTvariablepassedtothe./configurescript.\nAddedinversion3.8.\nLDFLAGS\nLinkerflags,e.g. -Llib_dirifyouhavelibrariesinanonstandarddirectorylib_dir.\nBothCPPFLAGS andLDFLAGS needtocontaintheshell\u2019svaluetobeabletobuildextensionmodulesusing\nthedirectoriesspecifiedintheenvironmentvariables.\nLIBS\nLinkerflagstopasslibrariestothelinkerwhenlinkingthePythonexecutable.\nExample: -lrt.\nLDSHARED\nCommandtobuildasharedlibrary.\nDefault: @LDSHARED@ $(PY_LDFLAGS).\nBLDSHARED\nCommandtobuildlibpythonsharedlibrary.\nDefault: @BLDSHARED@ $(PY_CORE_LDFLAGS).\nPY_LDFLAGS\nDefault: $(CONFIGURE_LDFLAGS) $(LDFLAGS).\nPY_LDFLAGS_NODIST\nDefault: $(CONFIGURE_LDFLAGS_NODIST) $(LDFLAGS_NODIST).\nAddedinversion3.8.\nPY_CORE_LDFLAGS\nLinkerflagsusedforbuildingtheinterpreterobjectfiles.\nAddedinversion3.8.\n3.5. Compilerandlinkerflags 41\nPythonSetupandUsage,Release3.13.3\n42 Chapter3. ConfigurePython\nCHAPTER\nFOUR\nUSING PYTHON ON WINDOWS\nThisdocumentaimstogiveanoverviewofWindows-specificbehaviouryoushouldknowaboutwhenusingPython\nonMicrosoftWindows.\nUnlike most Unix systems and services, Windows does not include a system supported installation of Python. To\nmakePythonavailable,theCPythonteamhascompiledWindowsinstallerswitheveryreleaseformanyyears. These\ninstallersareprimarilyintendedtoaddaper-userinstallationofPython,withthecoreinterpreterandlibrarybeing\nusedbyasingleuser. Theinstallerisalsoabletoinstallforallusersofasinglemachine,andaseparateZIPfileis\navailableforapplication-localdistributions.\nAsspecifiedinPEP11,aPythonreleaseonlysupportsaWindowsplatformwhileMicrosoftconsiderstheplatform\nunderextendedsupport. ThismeansthatPython3.13supportsWindows8.1andnewer. IfyourequireWindows7\nsupport,pleaseinstallPython3.8.\nThereareanumberofdifferentinstallersavailableforWindows,eachwithcertainbenefitsanddownsides.\nThefullinstallercontainsallcomponentsandisthebestoptionfordevelopersusingPythonforanykindofproject.\nTheMicrosoftStorepackageisasimpleinstallationofPythonthatissuitableforrunningscriptsandpackages,and\nusing IDLE or other development environments. It requires Windows 10 and above, but can be safely installed\nwithoutcorruptingotherprograms. ItalsoprovidesmanyconvenientcommandsforlaunchingPythonanditstools.\nThe nuget.org packages are lightweight installations intended for continuous integration systems. It can be used to\nbuildPythonpackagesorrunscripts,butisnotupdateableandhasnouserinterfacetools.\nTheembeddablepackageisaminimalpackageofPythonsuitableforembeddingintoalargerapplication.\n4.1 The full installer\n4.1.1 Installation steps\nFourPython3.13installersareavailablefordownload-twoeachforthe32-bitand64-bitversionsoftheinterpreter.\nThewebinstallerisasmallinitialdownload,anditwillautomaticallydownloadtherequiredcomponentsasneces-\nsary. Theofflineinstaller includesthecomponentsnecessaryforadefaultinstallationandonlyrequiresaninternet\nconnection for optional features. See Installing Without Downloading for other ways to avoid downloading during\ninstallation.\nAfterstartingtheinstaller,oneoftwooptionsmaybeselected:\n43\nPythonSetupandUsage,Release3.13.3\nIfyouselect\u201cInstallNow\u201d:\n\u2022 Youwillnotneedtobeanadministrator(unlessasystemupdatefortheCRuntimeLibraryisrequiredoryou\ninstallthePythonLauncherforWindowsforallusers)\n\u2022 Pythonwillbeinstalledintoyouruserdirectory\n\u2022 ThePythonLauncherforWindowswillbeinstalledaccordingtotheoptionatthebottomofthefirstpage\n\u2022 Thestandardlibrary,testsuite,launcherandpipwillbeinstalled\n\u2022 Ifselected,theinstalldirectorywillbeaddedtoyourPATH\n\u2022 Shortcutswillonlybevisibleforthecurrentuser\nSelecting\u201cCustomizeinstallation\u201dwillallowyoutoselectthefeaturestoinstall, theinstallationlocationandother\noptionsorpost-installactions. Toinstalldebuggingsymbolsorbinaries,youwillneedtousethisoption.\nToperformanall-usersinstallation,youshouldselect\u201cCustomizeinstallation\u201d. Inthiscase:\n\u2022 Youmayberequiredtoprovideadministrativecredentialsorapproval\n\u2022 PythonwillbeinstalledintotheProgramFilesdirectory\n\u2022 ThePythonLauncherforWindowswillbeinstalledintotheWindowsdirectory\n\u2022 Optionalfeaturesmaybeselectedduringinstallation\n\u2022 Thestandardlibrarycanbepre-compiledtobytecode\n\u2022 Ifselected,theinstalldirectorywillbeaddedtothesystemPATH\n\u2022 Shortcutsareavailableforallusers\n4.1.2 Removing the MAX_PATH Limitation\nWindowshistoricallyhaslimitedpathlengthsto260characters. Thismeantthatpathslongerthanthiswouldnot\nresolveanderrorswouldresult.\n44 Chapter4. UsingPythononWindows\nPythonSetupandUsage,Release3.13.3\nInthelatestversionsofWindows,thislimitationcanbeexpandedtoapproximately32,000characters. Youradmin-\nistrator will need to activate the \u201cEnable Win32 long paths\u201d group policy, or set LongPathsEnabled to 1 in the\nregistrykeyHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem.\nThisallowstheopen()function,theosmoduleandmostotherpathfunctionalitytoacceptandreturnpathslonger\nthan260characters.\nAfterchangingtheaboveoption,nofurtherconfigurationisrequired.\nChangedinversion3.6: SupportforlongpathswasenabledinPython.\n4.1.3 Installing Without UI\nAll of the options available in the installer UI can also be specified from the command line, allowing scripted in-\nstallerstoreplicateaninstallationonmanymachineswithoutuserinteraction. Theseoptionsmayalsobesetwithout\nsuppressingtheUIinordertochangesomeofthedefaults.\nThefollowingoptions(foundbyexecutingtheinstallerwith/?)canbepassedintotheinstaller:\nName Description\n/passive todisplayprogresswithoutrequiringuserinteraction\n/quiet toinstall/uninstallwithoutdisplayinganyUI\n/simple topreventusercustomization\n/uninstall toremovePython(withoutconfirmation)\n/layout[directory] topre-downloadallcomponents\n/log[filename] tospecifylogfileslocation\nAllotheroptionsarepassedasname=value,wherethevalueisusually0todisableafeature,1toenableafeature,\norapath. Thefulllistofavailableoptionsisshownbelow.\n4.1. Thefullinstaller 45\nPythonSetupandUsage,Release3.13.3\nName Description Default\nInstallAl- Perform a system-wide installa- 0\nlUsers tion.\nTargetDir Theinstallationdirectory SelectedbasedonInstallAllUsers\nDefault- The default installation directory %ProgramFiles%\\Python X.Y or\nAllUser- forall-userinstalls %ProgramFiles(x86)%\\Python X.Y\nsTarget-\nDir\nDe- The default install directory for %LocalAppData%\\Programs\\Python\\PythonXY or\nfaultJust- just-for-meinstalls %LocalAppData%\\Programs\\Python\\PythonXY-32 or\nForMeTar- %LocalAppData%\\Programs\\Python\\PythonXY-64\ngetDir\nDefault- The default custom install direc- (empty)\nCustom- torydisplayedintheUI\nTarget-\nDir\nAssoci- Create file associations if the 1\nateFiles launcherisalsoinstalled.\nCom- Compileall.pyfilesto.pyc. 0\npileAll\nPrepend- Prepend install and Scripts direc- 0\nPath tories to PATH and add .PY to\nPATHEXT\nAppend- Append install and Scripts direc- 0\nPath tories to PATH and add .PY to\nPATHEXT\nShortcuts Create shortcuts for the inter- 1\npreter,documentationandIDLEif\ninstalled.\nIn- InstallPythonmanual 1\nclude_doc\nIn- Installdebugbinaries 0\nclude_debug\nIn- Install developer headers and li- 1\nclude_dev braries. Omittingthismayleadto\nanunusableinstallation.\nIn- Install python.exe and related 1\nclude_exe files. Omittingthismayleadtoan\nunusableinstallation.\nIn- Install Python Launcher for Win- 1\nclude_launchdeorws.\nInstall- Installs the launcher for 1\nLauncher- all users. Also requires\nAllUsers Include_launcher to be\nsetto1\nIn- Install standard library and exten- 1\nclude_lib sion modules. Omitting this may\nleadtoanunusableinstallation.\nIn- Installbundledpipandsetuptools 1\nclude_pip\nIn- Install debugging symbols (*. 0\nclude_symboplsdb)\nIn- InstallTcl/TksupportandIDLE 1\nclude_tcltk\nIn- Installstandardlibrarytestsuite 1\nclude_test\nIn- Installutilityscripts 1\nclude_tools\nLauncherOnlOynly installs the launcher. This 0\n46 Chapter4. UsingPythononWindows\nwilloverridemostotheroptions.\nSimple- DisablemostinstallUI 0\nInstall\nSim- Acustommessagetodisplaywhen (empty)\npleIn- thesimplifiedinstallUIisused.\nstallDe-\nscription\nPythonSetupandUsage,Release3.13.3\nForexample,tosilentlyinstalladefault,system-widePythoninstallation,youcouldusethefollowingcommand(from\nanelevatedcommandprompt):\npython-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0\nToallowuserstoeasilyinstallapersonalcopyofPythonwithoutthetestsuite,youcouldprovideashortcutwiththe\nfollowingcommand. Thiswilldisplayasimplifiedinitialpageanddisallowcustomization:\npython-3.9.0.exe InstallAllUsers=0 Include_launcher=0 Include_test=0\nSimpleInstall=1 SimpleInstallDescription=\"Just for me, no test suite.\"\n(Notethatomittingthelauncheralsoomitsfileassociations,andisonlyrecommendedforper-userinstallswhenthere\nisalsoasystem-wideinstallationthatincludedthelauncher.)\nThe options listed above can also be provided in a file named unattend.xml alongside the executable. This file\nspecifiesalistofoptionsandvalues. Whenavalueisprovidedasanattribute, itwillbeconvertedtoanumberif\npossible. Valuesprovidedaselementtextarealwaysleftasstrings. Thisexamplefilesetsthesameoptionsasthe\npreviousexample:\n<Options>\n<Option Name=\"InstallAllUsers\" Value=\"no\" />\n<Option Name=\"Include_launcher\" Value=\"0\" />\n<Option Name=\"Include_test\" Value=\"no\" />\n<Option Name=\"SimpleInstall\" Value=\"yes\" />\n<Option Name=\"SimpleInstallDescription\">Just for me, no test suite</Option>\n</Options>\n4.1.4 Installing Without Downloading\nAssomefeaturesofPythonarenotincludedintheinitialinstallerdownload,selectingthosefeaturesmayrequirean\ninternetconnection. Toavoidthisneed,allpossiblecomponentsmaybedownloadedon-demandtocreateacomplete\nlayoutthatwillnolongerrequireaninternetconnectionregardlessoftheselectedfeatures. Notethatthisdownload\nmaybebiggerthanrequired,butwherealargenumberofinstallationsaregoingtobeperformeditisveryusefulto\nhavealocallycachedcopy.\nExecute the following command from Command Prompt to download all possible required files. Remember to\nsubstitutepython-3.9.0.exefortheactualnameofyourinstaller,andtocreatelayoutsintheirowndirectories\ntoavoidcollisionsbetweenfileswiththesamename.\npython-3.9.0.exe /layout [optional target directory]\nYoumayalsospecifythe/quietoptiontohidetheprogressdisplay.\n4.1.5 Modifying an install\nOncePythonhasbeeninstalled,youcanaddorremovefeaturesthroughtheProgramsandFeaturestoolthatispart\nofWindows. SelectthePythonentryandchoose\u201cUninstall/Change\u201dtoopentheinstallerinmaintenancemode.\n\u201cModify\u201dallowsyoutoaddorremovefeaturesbymodifyingthecheckboxes-unchangedcheckboxeswillnotinstall\norremoveanything. Someoptionscannotbechangedinthismode,suchastheinstalldirectory;tomodifythese,you\nwillneedtoremoveandthenreinstallPythoncompletely.\n\u201cRepair\u201d will verify all the files that should be installed using the current settings and replace any that have been\nremovedormodified.\n\u201cUninstall\u201dwillremovePythonentirely,withtheexceptionofthePythonLauncherforWindows,whichhasitsown\nentryinProgramsandFeatures.\n4.1. Thefullinstaller 47\nPythonSetupandUsage,Release3.13.3\n4.1.6 Installing Free-threaded Binaries\nAddedinversion3.13: (Experimental)\n(cid:174) Note\nEverything described in this section is considered experimental, and should be expected to change in future\nreleases.\nToinstallpre-builtbinarieswithfree-threadingenabled(seePEP703),youshouldselect\u201cCustomizeinstallation\u201d.\nThesecondpageofoptionsincludesthe\u201cDownloadfree-threadedbinaries\u201dcheckbox.\nSelecting this option will download and install additional binaries to the same location as the main Python install.\nThemainexecutableiscalledpython3.13t.exe,andotherbinarieseitherreceiveatsuffixorafullABIsuffix.\nPythonsourcefilesandbundledthird-partydependenciesaresharedwiththemaininstall.\nThefree-threadedversionisregisteredasaregularPythoninstallwiththetag3.13t(witha-32or-arm64suffixas\nnormalforthoseplatforms). Thisallowstoolstodiscoverit,andforthePythonLauncherforWindowstosupportpy.\nexe -3.13t. Notethatthelauncherwillinterpretpy.exe -3(orapython3shebang)as\u201cthelatest3.xinstall\u201d,\nwhich will prefer the free-threaded binaries over the regular ones, while py.exe -3.13 will not. If you use the\nshortstyleofoption,youmayprefertonotinstallthefree-threadedbinariesatthistime.\nTospecifytheinstalloptionatthecommandline,useInclude_freethreaded=1. SeeInstallingWithoutDown-\nloadingforinstructionsonpre-emptivelydownloadingtheadditionalbinariesforofflineinstall. Theoptionstoinclude\ndebugsymbolsandbinariesalsoapplytothefree-threadedbuilds.\nFree-threadedbinariesarealsoavailableonnuget.org.\n4.2 The Microsoft Store package\nAddedinversion3.7.2.\nTheMicrosoftStorepackageisaneasilyinstallablePythoninterpreterthatisintendedmainlyforinteractiveuse,for\nexample,bystudents.\n48 Chapter4. UsingPythononWindows\nPythonSetupandUsage,Release3.13.3\nToinstallthepackage,ensureyouhavethelatestWindows10updatesandsearchtheMicrosoftStoreappfor\u201cPython\n3.13\u201d. EnsurethattheappyouselectispublishedbythePythonSoftwareFoundation,andinstallit.\n(cid:193) Warning\nPython will always be available for free on the Microsoft Store. If you are asked to pay for it, you have not\nselectedthecorrectpackage.\nAfterinstallation,PythonmaybelaunchedbyfindingitinStart. Alternatively,itwillbeavailablefromanyCommand\nPromptorPowerShellsessionbytypingpython. Further,pipandIDLEmaybeusedbytypingpiporidle. IDLE\ncanalsobefoundinStart.\nAllthreecommandsarealsoavailablewithversionnumbersuffixes,forexample,aspython3.exeandpython3.\nx.exeaswellaspython.exe(where3.xisthespecificversionyouwanttolaunch,suchas3.13). Open\u201cManage\nApp Execution Aliases\u201d through Start to select which version of Python is associated with each command. It is\nrecommendedtomakesurethatpipandidleareconsistentwithwhicheverversionofpythonisselected.\nVirtualenvironmentscanbecreatedwithpython -m venvandactivatedandusedasnormal.\nIfyouhaveinstalledanotherversionofPythonandaddedittoyourPATHvariable,itwillbeavailableaspython.exe\nratherthantheonefromtheMicrosoftStore. Toaccessthenewinstallation,usepython3.exeorpython3.x.exe.\nThepy.exelauncherwilldetectthisPythoninstallation,butwillpreferinstallationsfromthetraditionalinstaller.\nTo remove Python, open Settings and use Apps and Features, or else find Python in Start and right-click to select\nUninstall. UninstallingwillremoveallpackagesyouinstalleddirectlyintothisPythoninstallation,butwillnotremove\nanyvirtualenvironments\n4.2.1 Known issues\nRedirectionoflocaldata,registry,andtemporarypaths\nBecause of restrictions on Microsoft Store apps, Python scripts may not have full write access to shared locations\nsuchasTEMPandtheregistry. Instead,itwillwritetoaprivatecopy. Ifyourscriptsmustmodifythesharedlocations,\nyouwillneedtoinstallthefullinstaller.\nAt runtime, Python will use a private copy of well-known Windows folders and the registry. For\nexample, if the environment variable %APPDATA% is c:\\Users\\<user>\\AppData\\, then when writ-\ning to C:\\Users\\<user>\\AppData\\Local will write to C:\\Users\\<user>\\AppData\\Local\\Packages\\\nPythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\Local\\.\nWhenreadingfiles,Windowswillreturnthefilefromtheprivatefolder,orifthatdoesnotexist,therealWindows\ndirectory. ForexamplereadingC:\\Windows\\System32returnsthecontentsofC:\\Windows\\System32plusthe\ncontentsofC:\\Program Files\\WindowsApps\\package_name\\VFS\\SystemX86.\nYoucanfindtherealpathofanyexistingfileusingos.path.realpath():\n>>> import os\n>>> test_file = 'C:\\\\Users\\\\example\\\\AppData\\\\Local\\\\test.txt'\n>>> os.path.realpath(test_file)\n'C:\\\\Users\\\\example\\\\AppData\\\\Local\\\\Packages\\\\PythonSoftwareFoundation.Python.3.8_\n,\u2192qbz5n2kfra8p0\\\\LocalCache\\\\Local\\\\test.txt'\nWhenwritingtotheWindowsRegistry,thefollowingbehaviorsexist:\n\u2022 ReadingfromHKLM\\\\Softwareisallowedandresultsaremergedwiththeregistry.datfileinthepack-\nage.\n\u2022 Writing to HKLM\\\\Software is not allowed if the corresponding key/value exists, i.e. modifying existing\nkeys.\n\u2022 WritingtoHKLM\\\\Softwareisallowedaslongasacorrespondingkey/valuedoesnotexistinthepackage\nandtheuserhasthecorrectaccesspermissions.\n4.2. TheMicrosoftStorepackage 49\nPythonSetupandUsage,Release3.13.3\nFormoredetailonthetechnicalbasisfortheselimitations, pleaseconsultMicrosoft\u2019sdocumentationonpackaged\nfull-trustapps, currentlyavailableatdocs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-\nscenes\n4.3 The nuget.org packages\nAddedinversion3.5.2.\nThenuget.orgpackageisareducedsizePythonenvironmentintendedforuseoncontinuousintegrationandbuild\nsystemsthatdonothaveasystem-wideinstallofPython. Whilenugetis\u201cthepackagemanagerfor.NET\u201d,italso\nworksperfectlyfineforpackagescontainingbuild-timetools.\nVisitnuget.orgforthemostup-to-dateinformationonusingnuget. Whatfollowsisasummarythatissufficientfor\nPythondevelopers.\nThe nuget.exe command line tool may be downloaded directly from https://aka.ms/nugetclidl, for ex-\nample,usingcurlorPowerShell. Withthetool,thelatestversionofPythonfor64-bitor32-bitmachinesisinstalled\nusing:\nnuget.exe install python -ExcludeVersion -OutputDirectory .\nnuget.exe install pythonx86 -ExcludeVersion -OutputDirectory .\nTo select a particular version, add a -Version 3.x.y. The output directory may be changed from ., and the\npackage will be installed into a subdirectory. By default, the subdirectory is named the same as the package, and\nwithoutthe-ExcludeVersionoptionthisnamewillincludethespecificversioninstalled. Insidethesubdirectory\nisatoolsdirectorythatcontainsthePythoninstallation:\n# Without -ExcludeVersion\n> .\\python.3.5.2\\tools\\python.exe -V\nPython 3.5.2\n# With -ExcludeVersion\n> .\\python\\tools\\python.exe -V\nPython 3.5.2\nIngeneral,nugetpackagesarenotupgradeable,andnewerversionsshouldbeinstalledside-by-sideandreferenced\nusingthefullpath. Alternatively,deletethepackagedirectorymanuallyandinstallitagain. ManyCIsystemswill\ndothisautomaticallyiftheydonotpreservefilesbetweenbuilds.\nAlongside the tools directory is a build\\native directory. This contains a MSBuild properties file python.\npropsthatcanbeusedinaC++projecttoreferencethePythoninstall. Includingthesettingswillautomaticallyuse\ntheheadersandimportlibrariesinyourbuild.\nThe package information pages on nuget.org are www.nuget.org/packages/python for the 64-bit version,\nwww.nuget.org/packages/pythonx86 for the 32-bit version, and www.nuget.org/packages/pythonarm64 for the\nARM64version\n4.3.1 Free-threaded packages\nAddedinversion3.13: (Experimental)\n(cid:174) Note\nEverything described in this section is considered experimental, and should be expected to change in future\nreleases.\nPackages containing free-threaded binaries are named python-freethreaded for the 64-bit version, pythonx86-\nfreethreadedforthe32-bitversion,andpythonarm64-freethreadedfortheARM64version. Thesepackagescontain\nboththepython3.13t.exeandpython.exeentrypoints,bothofwhichrunfreethreaded.\n50 Chapter4. UsingPythononWindows\nPythonSetupandUsage,Release3.13.3\n4.4 The embeddable package\nAddedinversion3.5.\nTheembeddeddistributionisaZIPfilecontainingaminimalPythonenvironment. Itisintendedforactingaspart\nofanotherapplication,ratherthanbeingdirectlyaccessedbyend-users.\nWhenextracted,theembeddeddistributionis(almost)fullyisolatedfromtheuser\u2019ssystem,includingenvironment\nvariables,systemregistrysettings,andinstalledpackages. Thestandardlibraryisincludedaspre-compiledandopti-\nmized.pycfilesinaZIP,andpython3.dll,python37.dll,python.exeandpythonw.exeareallprovided.\nTcl/tk(includingalldependents,suchasIdle),pipandthePythondocumentationarenotincluded.\n(cid:174) Note\nThe embedded distribution does not include the Microsoft C Runtime and it is the responsibility of the appli-\ncation installer to provide this. The runtime may have already been installed on a user\u2019s system previously or\nautomaticallyviaWindowsUpdate,andcanbedetectedbyfindingucrtbase.dllinthesystemdirectory.\nThird-partypackagesshouldbeinstalledbytheapplicationinstalleralongsidetheembeddeddistribution. Usingpip\ntomanagedependenciesasforaregularPythoninstallationisnotsupportedwiththisdistribution,thoughwithsome\ncare it may be possible to include and use pip for automatic updates. In general, third-party packages should be\ntreatedaspartoftheapplication(\u201cvendoring\u201d)sothatthedevelopercanensurecompatibilitywithnewerversions\nbeforeprovidingupdatestousers.\nThetworecommendedusecasesforthisdistributionaredescribedbelow.\n4.4.1 Python Application\nAn application written in Python does not necessarily require users to be aware of that fact. The embedded dis-\ntributionmaybeusedinthiscasetoincludeaprivateversionofPythoninaninstallpackage. Dependingonhow\ntransparentitshouldbe(orconversely,howprofessionalitshouldappear),therearetwooptions.\nUsingaspecializedexecutableasalauncherrequiressomecoding,butprovidesthemosttransparentexperiencefor\nusers. Withacustomizedlauncher, therearenoobviousindicationsthattheprogramisrunningonPython: icons\ncanbecustomized,companyandversioninformationcanbespecified,andfileassociationsbehaveproperly. Inmost\ncases,acustomlaunchershouldsimplybeabletocallPy_Mainwithahard-codedcommandline.\nThesimplerapproachistoprovideabatchfileorgeneratedshortcutthatdirectlycallsthepython.exeorpythonw.\nexewiththerequiredcommand-linearguments. Inthiscase, theapplicationwillappeartobePythonandnotits\nactualname,andusersmayhavetroubledistinguishingitfromotherrunningPythonprocessesorfileassociations.\nWiththelatterapproach,packagesshouldbeinstalledasdirectoriesalongsidethePythonexecutabletoensurethey\nare available on the path. With the specialized launcher, packages can be located in other locations as there is an\nopportunitytospecifythesearchpathbeforelaunchingtheapplication.\n4.4.2 Embedding Python\nApplicationswritteninnativecodeoftenrequiresomeformofscriptinglanguage,andtheembeddedPythondistri-\nbutioncanbeusedforthispurpose. Ingeneral,themajorityoftheapplicationisinnativecode,andsomepartwill\neitherinvokepython.exeordirectlyusepython3.dll. Foreithercase,extractingtheembeddeddistributionto\nasubdirectoryoftheapplicationinstallationissufficienttoprovidealoadablePythoninterpreter.\nAs with the application use, packages can be installed to any location as there is an opportunity to specify search\npathsbeforeinitializingtheinterpreter. Otherwise,thereisnofundamentaldifferencesbetweenusingtheembedded\ndistributionandaregularinstallation.\n4.4. Theembeddablepackage 51\nPythonSetupandUsage,Release3.13.3\n4.5 Alternative bundles\nBesidesthestandardCPythondistribution,therearemodifiedpackagesincludingadditionalfunctionality. Thefol-\nlowingisalistofpopularversionsandtheirkeyfeatures:\nActivePython\nInstallerwithmulti-platformcompatibility,documentation,PyWin32\nAnaconda\nPopularscientificmodules(suchasnumpy,scipyandpandas)andthecondapackagemanager.\nEnthoughtDeploymentManager\n\u201cTheNextGenerationPythonEnvironmentandPackageManager\u201d.\nPreviouslyEnthoughtprovidedCanopy,butitreachedendoflifein2016.\nWinPython\nWindows-specificdistributionwithprebuiltscientificpackagesandtoolsforbuildingpackages.\nNotethatthesepackagesmaynotincludethelatestversionsofPythonorotherlibraries,andarenotmaintainedor\nsupportedbythecorePythonteam.\n4.6 Configuring Python\nTorunPythonconvenientlyfromacommandprompt,youmightconsiderchangingsomedefaultenvironmentvari-\nablesinWindows. WhiletheinstallerprovidesanoptiontoconfigurethePATHandPATHEXTvariablesforyou,\nthisisonlyreliableforasingle,system-wideinstallation. IfyouregularlyusemultipleversionsofPython,consider\nusingthePythonLauncherforWindows.\n4.6.1 Excursus: Setting environment variables\nWindowsallowsenvironmentvariablestobeconfiguredpermanentlyatboththeUserlevelandtheSystemlevel,or\ntemporarilyinacommandprompt.\nTotemporarilysetenvironmentvariables,openCommandPromptandusethesetcommand:\nC:\\>set PATH=C:\\Program Files\\Python 3.9;%PATH%\nC:\\>set PYTHONPATH=%PYTHONPATH%;C:\\My_python_lib\nC:\\>python\nThesechangeswillapplytoanyfurthercommandsexecutedinthatconsole,andwillbeinheritedbyanyapplications\nstartedfromtheconsole.\nIncluding the variable name within percent signs will expand to the existing value, allowing you to add your new\nvalueateitherthestartortheend. ModifyingPATHbyaddingthedirectorycontainingpython.exetothestartis\nacommonwaytoensurethecorrectversionofPythonislaunched.\nTopermanentlymodifythedefaultenvironmentvariables,clickStartandsearchfor\u2018editenvironmentvariables\u2019,or\nopen System properties, Advanced system settings and click the Environment Variables button. In this dialog, you\ncanaddormodifyUserandSystemvariables. TochangeSystemvariables,youneednon-restrictedaccesstoyour\nmachine(i.e. Administratorrights).\n(cid:174) Note\nWindowswillconcatenateUservariablesafterSystemvariables,whichmaycauseunexpectedresultswhenmod-\nifyingPATH.\nThePYTHONPATH variableisusedbyallversionsofPython,soyoushouldnotpermanentlyconfigureitunless\nthelistedpathsonlyincludecodethatiscompatiblewithallofyourinstalledPythonversions.\n52 Chapter4. UsingPythononWindows\nPythonSetupandUsage,Release3.13.3\n(cid:181) Seealso\nhttps://learn.microsoft.com/windows/win32/procthread/environment-variables\nOverviewofenvironmentvariablesonWindows\nhttps://learn.microsoft.com/windows-server/administration/windows-commands/set_1\nThesetcommand,fortemporarilymodifyingenvironmentvariables\nhttps://learn.microsoft.com/windows-server/administration/windows-commands/setx\nThesetxcommand,forpermanentlymodifyingenvironmentvariables\n4.6.2 Finding the Python executable\nChangedinversion3.5.\nBesidesusingtheautomaticallycreatedstartmenuentryforthePythoninterpreter,youmightwanttostartPython\ninthecommandprompt. Theinstallerhasanoptiontosetthatupforyou.\nOnthefirstpageoftheinstaller,anoptionlabelled\u201cAddPythontoPATH\u201dmaybeselectedtohavetheinstalleradd\ntheinstalllocationintothePATH.ThelocationoftheScripts\\folderisalsoadded. Thisallowsyoutotypepython\ntoruntheinterpreter,andpipforthepackageinstaller. Thus,youcanalsoexecuteyourscriptswithcommandline\noptions,seeCommandlinedocumentation.\nIfyoudon\u2019tenablethisoptionatinstalltime,youcanalwaysre-runtheinstaller,selectModify,andenableit. Alter-\nnatively,youcanmanuallymodifythePATHusingthedirectionsinExcursus: Settingenvironmentvariables. Youneed\ntosetyourPATHenvironmentvariabletoincludethedirectoryofyourPythoninstallation,delimitedbyasemicolon\nfromotherentries. Anexamplevariablecouldlooklikethis(assumingthefirsttwoentriesalreadyexisted):\nC:\\WINDOWS\\system32;C:\\WINDOWS;C:\\Program Files\\Python 3.9\n4.7 UTF-8 mode\nAddedinversion3.7.\nWindowsstilluseslegacyencodingsforthesystemencoding(theANSICodePage). Pythonusesitforthedefault\nencodingoftextfiles(e.g. locale.getencoding()).\nThismaycauseissuesbecauseUTF-8iswidelyusedontheinternetandmostUnixsystems,includingWSL(Windows\nSubsystemforLinux).\nYoucanusethePythonUTF-8ModetochangethedefaulttextencodingtoUTF-8. YoucanenablethePythonUTF-\n8Modeviathe-X utf8commandlineoption,orthePYTHONUTF8=1environmentvariable. SeePYTHONUTF8for\nenablingUTF-8mode,andExcursus: Settingenvironmentvariablesforhowtomodifyenvironmentvariables.\nWhen the Python UTF-8 Mode is enabled, you can still use the system encoding (the ANSI Code Page) via the\n\u201cmbcs\u201dcodec.\nNote that adding PYTHONUTF8=1 to the default environment variables will affect all Python 3.7+ applications on\nyoursystem. IfyouhaveanyPython3.7+applicationswhichrelyonthelegacysystemencoding,itisrecommended\ntosettheenvironmentvariabletemporarilyorusethe-X utf8commandlineoption.\n(cid:174) Note\nEvenwhenUTF-8modeisdisabled,PythonusesUTF-8bydefaultonWindowsfor:\n\u2022 ConsoleI/OincludingstandardI/O(seePEP528fordetails).\n\u2022 Thefilesystemencoding(seePEP529fordetails).\n4.7. UTF-8mode 53\nPythonSetupandUsage,Release3.13.3\n4.8 Python Launcher for Windows\nAddedinversion3.3.\nThePythonlauncherforWindowsisautilitywhichaidsinlocatingandexecutingofdifferentPythonversions. It\nallowsscripts(orthecommand-line)toindicateapreferenceforaspecificPythonversion,andwilllocateandexecute\nthatversion.\nUnlikethePATHvariable,thelauncherwillcorrectlyselectthemostappropriateversionofPython. Itwillpreferper-\nuserinstallationsoversystem-wideones,andordersbylanguageversionratherthanusingthemostrecentlyinstalled\nversion.\nThelauncherwasoriginallyspecifiedinPEP397.\n4.8.1 Getting started\nFromthecommand-line\nChangedinversion3.6.\nSystem-wide installations of Python 3.3 and later will put the launcher on your PATH. The launcher is compatible\nwithallavailableversionsofPython,soitdoesnotmatterwhichversionisinstalled. Tocheckthatthelauncheris\navailable,executethefollowingcommandinCommandPrompt:\npy\nYoushouldfindthatthelatestversionofPythonyouhaveinstalledisstarted-itcanbeexitedasnormal,andany\nadditionalcommand-lineargumentsspecifiedwillbesentdirectlytoPython.\nIf you have multiple versions of Python installed (e.g., 3.7 and 3.13) you will have noticed that Python 3.13 was\nstarted-tolaunchPython3.7,trythecommand:\npy -3.7\nIfyouwantthelatestversionofPython2youhaveinstalled,trythecommand:\npy -2\nIfyouseethefollowingerror,youdonothavethelauncherinstalled:\n'py' is not recognized as an internal or external command,\noperable program or batch file.\nThecommand:\npy --list\ndisplaysthecurrentlyinstalledversion(s)ofPython.\nThe-x.yargumentistheshortformofthe-V:Company/Tagargument,whichallowsselectingaspecificPython\nruntime, including those that may have come from somewhere other than python.org. Any runtime registered by\nfollowingPEP514willbediscoverable. The--listcommandlistsallavailableruntimesusingthe-V:format.\nWhen using the -V: argument, specifying the Company will limit selection to runtimes from that provider, while\nspecifyingonlytheTagwillselectfromallproviders. Notethatomittingtheslashimpliesatag:\n# Select any '3.*' tagged runtime\npy -V:3\n# Select any 'PythonCore' released runtime\npy -V:PythonCore/\n(continuesonnextpage)\n54 Chapter4. UsingPythononWindows\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\n# Select PythonCore's latest Python 3 runtime\npy -V:PythonCore/3\nTheshortformoftheargument(-3)onlyeverselectsfromcorePythonreleases,andnototherdistributions. However,\nthelongerform(-V:3)willselectfromany.\nTheCompanyismatchedonthefullstring,case-insensitive. TheTagismatchedoneitherthefullstring,oraprefix,\nprovided the next character is a dot or a hyphen. This allows -V:3.1 to match 3.1-32, but not 3.10. Tags are\nsortedusingnumericalordering(3.10isnewerthan3.1),butarecomparedusingtext(-V:3.01doesnotmatch\n3.1).\nVirtualenvironments\nAddedinversion3.5.\nIf the launcher is run with no explicit Python version specification, and a virtual environment (created with the\nstandardlibraryvenvmoduleortheexternalvirtualenvtool)active,thelauncherwillrunthevirtualenvironment\u2019s\ninterpreter rather than the global one. To run the global interpreter, either deactivate the virtual environment, or\nexplicitlyspecifytheglobalPythonversion.\nFromascript\nLet\u2019screateatestPythonscript-createafilecalledhello.pywiththefollowingcontents\n#! python\nimport sys\nsys.stdout.write(\"hello from Python %s\\n\" % (sys.version,))\nFromthedirectoryinwhichhello.pylives,executethecommand:\npy hello.py\nYoushouldnoticetheversionnumberofyourlatestPython2.xinstallationisprinted. Nowtrychangingthefirstline\ntobe:\n#! python3\nRe-executing the command should now print the latest Python 3.x information. As with the above command-line\nexamples,youcanspecifyamoreexplicitversionqualifier. AssumingyouhavePython3.7installed,trychanging\nthefirstlineto#! python3.7andyoushouldfindthe3.7versioninformationprinted.\nNote that unlike interactive use, a bare \u201cpython\u201d will use the latest version of Python 2.x that you have installed.\nThisisforbackwardcompatibilityandforcompatibilitywithUnix,wherethecommandpythontypicallyrefersto\nPython2.\nFromfileassociations\nThe launcher should have been associated with Python files (i.e. .py, .pyw, .pyc files) when it was installed.\nThismeansthatwhenyoudouble-clickononeofthesefilesfromWindowsexplorerthelauncherwillbeused,and\nthereforeyoucanusethesamefacilitiesdescribedabovetohavethescriptspecifytheversionwhichshouldbeused.\nThekeybenefitofthisisthatasinglelaunchercansupportmultiplePythonversionsatthesametimedependingon\nthecontentsofthefirstline.\n4.8.2 Shebang Lines\nIfthefirstlineofascriptfilestartswith#!, itisknownasa\u201cshebang\u201dline. LinuxandotherUnixlikeoperating\nsystems have native support for such lines and they are commonly used on such systems to indicate how a script\nshould be executed. This launcher allows the same facilities to be used with Python scripts on Windows and the\nexamplesabovedemonstratetheiruse.\n4.8. PythonLauncherforWindows 55\nPythonSetupandUsage,Release3.13.3\nToallowshebanglinesinPythonscriptstobeportablebetweenUnixandWindows,thislaunchersupportsanumber\nof\u2018virtual\u2019commandstospecifywhichinterpretertouse. Thesupportedvirtualcommandsare:\n\u2022 /usr/bin/env\n\u2022 /usr/bin/python\n\u2022 /usr/local/bin/python\n\u2022 python\nForexample,ifthefirstlineofyourscriptstartswith\n#! /usr/bin/python\nThedefaultPythonoranactivevirtualenvironmentwillbelocatedandused. AsmanyPythonscriptswrittentowork\nonUnixwillalreadyhavethisline,youshouldfindthesescriptscanbeusedbythelauncherwithoutmodification. If\nyouarewritinganewscriptonWindowswhichyouhopewillbeusefulonUnix,youshoulduseoneoftheshebang\nlinesstartingwith/usr.\nAny of the above virtual commands can be suffixed with an explicit version (either just the major version, or the\nmajorandminorversion). Furthermorethe32-bitversioncanberequestedbyadding\u201c-32\u201daftertheminorversion.\nI.e. /usr/bin/python3.7-32willrequestusageofthe32-bitPython3.7. Ifavirtualenvironmentisactive,the\nversionwillbeignoredandtheenvironmentwillbeused.\nAddedinversion3.7: Beginningwithpythonlauncher3.7itispossibletorequest64-bitversionbythe\u201c-64\u201dsuffix.\nFurthermoreitispossibletospecifyamajorandarchitecturewithoutminor(i.e. /usr/bin/python3-64).\nChanged in version 3.11: The \u201c-64\u201d suffix is deprecated, and now implies \u201cany architecture that is not provably\ni386/32-bit\u201d. Torequestaspecificenvironment,usethenew-V:TAGargumentwiththecompletetag.\nChanged in version 3.13: Virtual commands referencing python now prefer an active virtual environment rather\nthansearchingPATH.Thishandlescaseswheretheshebangspecifies/usr/bin/env python3butpython3.exe\nisnotpresentintheactiveenvironment.\nThe/usr/bin/envformofshebanglinehasonefurtherspecialproperty. BeforelookingforinstalledPythoninter-\npreters,thisformwillsearchtheexecutablePATHforaPythonexecutablematchingthenameprovidedasthefirstar-\ngument. ThiscorrespondstothebehaviouroftheUnixenvprogram,whichperformsaPATHsearch. Ifanexecutable\nmatchingthefirstargumentaftertheenvcommandcannotbefound,buttheargumentstartswithpython,itwillbe\nhandledasdescribedfortheothervirtualcommands. TheenvironmentvariablePYLAUNCHER_NO_SEARCH_PATH\nmaybeset(toanyvalue)toskipthissearchofPATH.\nShebanglinesthatdonotmatchanyofthesepatternsarelookedupinthe [commands] sectionofthelauncher\u2019s\n.INIfile. Thismaybeusedtohandlecertaincommandsinawaythatmakessenseforyoursystem. Thenameofthe\ncommandmustbeasingleargument(nospacesintheshebangexecutable),andthevaluesubstitutedisthefullpath\ntotheexecutable(additionalargumentsspecifiedinthe.INIwillbequotedaspartofthefilename).\n[commands]\n/bin/xpython=C:\\Program Files\\XPython\\python.exe\nAnycommandsnotfoundinthe.INIfilearetreatedasWindowsexecutablepathsthatareabsoluteorrelativetothe\ndirectorycontainingthescriptfile. ThisisaconvenienceforWindows-onlyscripts, suchasthosegeneratedbyan\ninstaller,sincethebehaviorisnotcompatiblewithUnix-styleshells. Thesepathsmaybequoted,andmayinclude\nmultiplearguments,afterwhichthepathtothescriptandanyadditionalargumentswillbeappended.\n4.8.3 Arguments in shebang lines\nTheshebanglinescanalsospecifyadditionaloptionstobepassedtothePythoninterpreter. Forexample,ifyouhave\nashebangline:\n#! /usr/bin/python -v\nThenPythonwillbestartedwiththe-voption\n56 Chapter4. UsingPythononWindows\nPythonSetupandUsage,Release3.13.3\n4.8.4 Customization\nCustomizationviaINIfiles\nTwo .ini files will be searched by the launcher - py.ini in the current user\u2019s application data directory\n(%LOCALAPPDATA% or$env:LocalAppData)and py.ini inthesamedirectoryas thelauncher. Thesame.ini\nfilesareusedforboththe\u2018console\u2019versionofthelauncher(i.e. py.exe)andforthe\u2018windows\u2019version(i.e. pyw.exe).\nCustomizationspecifiedinthe\u201capplicationdirectory\u201dwillhaveprecedenceovertheonenexttotheexecutable,soa\nuser,whomaynothavewriteaccesstothe.inifilenexttothelauncher,canoverridecommandsinthatglobal.ini\nfile.\nCustomizingdefaultPythonversions\nInsomecases,aversionqualifiercanbeincludedinacommandtodictatewhichversionofPythonwillbeusedby\nthecommand. Aversionqualifierstartswithamajorversionnumberandcanoptionallybefollowedbyaperiod(\u2018.\u2019)\nandaminorversionspecifier. Furthermoreitispossibletospecifyifa32or64bitimplementationshallberequested\nbyadding\u201c-32\u201dor\u201c-64\u201d.\nForexample,ashebanglineof#!pythonhasnoversionqualifier,while#!python3hasaversionqualifierwhich\nspecifiesonlyamajorversion.\nIf no version qualifiers are found in a command, the environment variable PY_PYTHON can be set to specify the\ndefaultversionqualifier. Ifitisnotset,thedefaultis\u201c3\u201d. Thevariablecanspecifyanyvaluethatmaybepassedon\nthecommandline, suchas\u201c3\u201d, \u201c3.7\u201d, \u201c3.7-32\u201dor\u201c3.7-64\u201d. (Notethatthe\u201c-64\u201doptionisonlyavailablewiththe\nlauncherincludedwithPython3.7ornewer.)\nIf no minor version qualifiers are found, the environment variable PY_PYTHON{major} (where {major} is the\ncurrentmajorversionqualifierasdeterminedabove)canbesettospecifythefullversion. Ifnosuchoptionisfound,\nthelauncherwillenumeratetheinstalledPythonversionsandusethelatestminorreleasefoundforthemajorversion,\nwhichislikely,althoughnotguaranteed,tobethemostrecentlyinstalledversioninthatfamily.\nOn64-bitWindowswithboth32-bitand64-bitimplementationsofthesame(major.minor)Pythonversioninstalled,\nthe 64-bit version will always be preferred. This will be true for both 32-bit and 64-bit implementations of the\nlauncher-a32-bitlauncherwillprefertoexecutea64-bitPythoninstallationofthespecifiedversionifavailable.\nThis is so the behavior of the launcher can be predicted knowing only what versions are installed on the PC and\nwithout regard to the order in which they were installed (i.e., without knowing whether a 32 or 64-bit version of\nPythonandcorrespondinglauncherwasinstalledlast). Asnotedabove,anoptional\u201c-32\u201dor\u201c-64\u201dsuffixcanbeused\nonaversionspecifiertochangethisbehaviour.\nExamples:\n\u2022 If no relevant options are set, the commands python and python2 will use the latest Python 2.x version\ninstalledandthecommandpython3willusethelatestPython3.xinstalled.\n\u2022 Thecommandpython3.7willnotconsultanyoptionsatallastheversionsarefullyspecified.\n\u2022 IfPY_PYTHON=3,thecommandspythonandpython3willbothusethelatestinstalledPython3version.\n\u2022 IfPY_PYTHON=3.7-32,thecommandpythonwillusethe32-bitimplementationof3.7whereasthecom-\nmandpython3willusethelatestinstalledPython(PY_PYTHONwasnotconsideredatallasamajorversion\nwasspecified.)\n\u2022 IfPY_PYTHON=3andPY_PYTHON3=3.7,thecommandspythonandpython3willbothusespecifically3.7\nInadditiontoenvironmentvariables,thesamesettingscanbeconfiguredinthe.INIfileusedbythelauncher. The\nsectionintheINIfileiscalled[defaults]andthekeynamewillbethesameastheenvironmentvariableswithout\ntheleadingPY_prefix(andnotethatthekeynamesintheINIfilearecaseinsensitive.) Thecontentsofanenvironment\nvariablewilloverridethingsspecifiedintheINIfile.\nForexample:\n\u2022 SettingPY_PYTHON=3.7isequivalenttotheINIfilecontaining:\n[defaults]\npython=3.7\n4.8. PythonLauncherforWindows 57\nPythonSetupandUsage,Release3.13.3\n\u2022 SettingPY_PYTHON=3andPY_PYTHON3=3.7isequivalenttotheINIfilecontaining:\n[defaults]\npython=3\npython3=3.7\n4.8.5 Diagnostics\nIfanenvironmentvariablePYLAUNCHER_DEBUGisset(toanyvalue),thelauncherwillprintdiagnosticinformation\ntostderr(i.e. totheconsole). Whilethisinformationmanagestobesimultaneouslyverboseandterse,itshouldallow\nyoutoseewhatversionsofPythonwerelocated,whyaparticularversionwaschosenandtheexactcommand-line\nusedtoexecutethetargetPython. Itisprimarilyintendedfortestinganddebugging.\n4.8.6 Dry Run\nIf an environment variable PYLAUNCHER_DRYRUN is set (to any value), the launcher will output the command it\nwouldhaverun, butwillnotactuallylaunchPython. Thismaybeusefulfortoolsthatwanttousethelauncherto\ndetectandthenlaunchPythondirectly. Notethatthecommandwrittentostandardoutputisalwaysencodedusing\nUTF-8,andmaynotrendercorrectlyintheconsole.\n4.8.7 Install on demand\nIfanenvironmentvariablePYLAUNCHER_ALLOW_INSTALLisset(toanyvalue),andtherequestedPythonversion\nisnotinstalledbutisavailableontheMicrosoftStore,thelauncherwillattempttoinstallit. Thismayrequireuser\ninteractiontocomplete,andyoumayneedtorunthecommandagain.\nAnadditionalPYLAUNCHER_ALWAYS_INSTALLvariablecausesthelaunchertoalwaystrytoinstallPython,evenif\nitisdetected. Thisismainlyintendedfortesting(andshouldbeusedwithPYLAUNCHER_DRYRUN).\n4.8.8 Return codes\nThefollowingexitcodesmaybereturnedbythePythonlauncher. Unfortunately,thereisnowaytodistinguishthese\nfromtheexitcodeofPythonitself.\nThenamesofcodesareasusedinthesources,andareonlyforreference. Thereisnowaytoaccessorresolvethem\napartfromreadingthispage. Entriesarelistedinalphabeticalorderofnames.\nName Value Description\nRC_BAD_VENV_CFG 107 Apyvenv.cfgwasfoundbutiscorrupt.\nRC_CREATE_PROCESS 101 FailedtolaunchPython.\nRC_INSTALLING 111 Aninstallwasstarted,butthecommandwillneedtobere-runafteritcom-\npletes.\nRC_INTERNAL_ERROR 109 Unexpectederror. Pleasereportabug.\nRC_NO_COMMANDLINE108 Unabletoobtaincommandlinefromtheoperatingsystem.\nRC_NO_PYTHON 103 Unabletolocatetherequestedversion.\nRC_NO_VENV_CFG 106 Apyvenv.cfgwasrequiredbutnotfound.\n4.9 Finding modules\nThesenotessupplementthedescriptionatsys-path-initwithdetailedWindowsnotes.\nWhenno._pthfileisfound,thisishowsys.pathispopulatedonWindows:\n\u2022 Anemptyentryisaddedatthestart,whichcorrespondstothecurrentdirectory.\n\u2022 IftheenvironmentvariablePYTHONPATH exists,asdescribedinEnvironmentvariables,itsentriesareadded\nnext. NotethatonWindows,pathsinthisvariablemustbeseparatedbysemicolons,todistinguishthemfrom\nthecolonusedindriveidentifiers(C:\\etc.).\n58 Chapter4. UsingPythononWindows\nPythonSetupandUsage,Release3.13.3\n\u2022 Additional \u201capplication paths\u201d can be added in the registry as subkeys of \\SOFTWARE\\Python\\\nPythonCore{version}\\PythonPathunderboththeHKEY_CURRENT_USERandHKEY_LOCAL_MACHINE\nhives. Subkeyswhichhavesemicolon-delimitedpathstringsastheirdefaultvaluewillcauseeachpathtobe\naddedtosys.path. (NotethatallknowninstallersonlyuseHKLM,soHKCUistypicallyempty.)\n\u2022 If the environment variable PYTHONHOME is set, it is assumed as \u201cPython Home\u201d. Otherwise, the path of\nthe main Python executable is used to locate a \u201clandmark file\u201d (either Lib\\os.py or pythonXY.zip) to\ndeducethe\u201cPythonHome\u201d. IfaPythonhomeisfound,therelevantsub-directoriesaddedtosys.path(Lib,\nplat-win,etc)arebasedonthatfolder. Otherwise,thecorePythonpathisconstructedfromthePythonPath\nstoredintheregistry.\n\u2022 IfthePythonHomecannotbelocated,noPYTHONPATHisspecifiedintheenvironment,andnoregistryentries\ncanbefound,adefaultpathwithrelativeentriesisused(e.g. .\\Lib;.\\plat-win,etc).\nIfapyvenv.cfgfileisfoundalongsidethemainexecutableorinthedirectoryonelevelabovetheexecutable,the\nfollowingvariationsapply:\n\u2022 If home is an absolute path and PYTHONHOME is not set, this path is used instead of the path to the main\nexecutablewhendeducingthehomelocation.\nTheendresultofallthisis:\n\u2022 When running python.exe, or any other .exe in the main Python directory (either an installed version, or\ndirectlyfromthePCbuilddirectory),thecorepathisdeduced,andthecorepathsintheregistryareignored.\nOther\u201capplicationpaths\u201dintheregistryarealwaysread.\n\u2022 WhenPythonishostedinanother.exe(differentdirectory,embeddedviaCOM,etc),the\u201cPythonHome\u201dwill\nnotbededuced,sothecorepathfromtheregistryisused. Other\u201capplicationpaths\u201dintheregistryarealways\nread.\n\u2022 IfPythoncan\u2019tfinditshomeandtherearenoregistryvalue(frozen.exe,someverystrangeinstallationsetup)\nyougetapathwithsomedefault,butrelative,paths.\nForthosewhowanttobundlePythonintotheirapplicationordistribution,thefollowingadvicewillpreventconflicts\nwithotherinstallations:\n\u2022 Include a ._pth file alongside your executable containing the directories to include. This will ignore paths\nlistedintheregistryandenvironmentvariables,andalsoignoresiteunlessimport siteislisted.\n\u2022 If you are loading python3.dll or python37.dll in your own executable, explicitly set PyConfig.\nmodule_search_pathsbeforePy_InitializeFromConfig().\n\u2022 Clearand/oroverwritePYTHONPATH andsetPYTHONHOMEbeforelaunchingpython.exefromyourappli-\ncation.\n\u2022 If you cannot use the previous suggestions (for example, you are a distribution that allows people to run\npython.exe directly), ensure that the landmark file (Lib\\os.py) exists in your install directory. (Note\nthatitwillnotbedetectedinsideaZIPfile,butacorrectlynamedZIPfilewillbedetectedinstead.)\nThesewillensurethatthefilesinasystem-wideinstallationwillnottakeprecedenceoverthecopyofthestandard\nlibrarybundledwithyourapplication. Otherwise,yourusersmayexperienceproblemsusingyourapplication. Note\nthatthefirstsuggestionisthebest,astheothersmaystillbesusceptibletonon-standardpathsintheregistryanduser\nsite-packages.\nChangedinversion3.6: Add._pthfilesupportandremovesapplocaloptionfrompyvenv.cfg.\nChangedinversion3.6: AddpythonXX.zipasapotentiallandmarkwhendirectlyadjacenttotheexecutable.\nDeprecatedsinceversion3.6: ModulesspecifiedintheregistryunderModules(notPythonPath)maybeimported\nbyimportlib.machinery.WindowsRegistryFinder. ThisfinderisenabledonWindowsin3.6.0andearlier,\nbutmayneedtobeexplicitlyaddedtosys.meta_pathinthefuture.\n4.9. Findingmodules 59\nPythonSetupandUsage,Release3.13.3\n4.10 Additional modules\nEventhoughPythonaimstobeportableamongallplatforms,therearefeaturesthatareuniquetoWindows. Acouple\nofmodules,bothinthestandardlibraryandexternal,andsnippetsexisttousethesefeatures.\nTheWindows-specificstandardmodulesaredocumentedinmswin-specific-services.\n4.10.1 PyWin32\nThePyWin32modulebyMarkHammondisacollectionofmodulesforadvancedWindows-specificsupport. This\nincludesutilitiesfor:\n\u2022 ComponentObjectModel(COM)\n\u2022 Win32APIcalls\n\u2022 Registry\n\u2022 Eventlog\n\u2022 MicrosoftFoundationClasses(MFC)userinterfaces\nPythonWinisasampleMFCapplicationshippedwithPyWin32. ItisanembeddableIDEwithabuilt-indebugger.\n(cid:181) Seealso\nWin32HowDoI\u2026?\nbyTimGolden\nPythonandCOM\nbyDavidandPaulBoddie\n4.10.2 cx_Freeze\ncx_Freeze wrapsPython scripts into executable Windows programs (*.exe files). Whenyou have done this, you\ncandistributeyourapplicationwithoutrequiringyouruserstoinstallPython.\n4.11 Compiling Python on Windows\nIfyouwanttocompileCPythonyourself,firstthingyoushoulddoisgetthesource. Youcandownloadeitherthe\nlatestrelease\u2019ssourceorjustgrabafreshcheckout.\nThesourcetreecontainsabuildsolutionandprojectfilesforMicrosoftVisualStudio,whichisthecompilerusedto\nbuildtheofficialPythonreleases. ThesefilesareinthePCbuilddirectory.\nCheckPCbuild/readme.txtforgeneralinformationonthebuildprocess.\nForextensionmodules,consultbuilding-on-windows.\n4.12 Other Platforms\nWithongoingdevelopmentofPython,someplatformsthatusedtobesupportedearlierarenolongersupported(due\ntothelackofusersordevelopers). CheckPEP11fordetailsonallunsupportedplatforms.\n\u2022 WindowsCEisnolongersupportedsincePython3(ifiteverwas).\n\u2022 TheCygwininstallerofferstoinstallthePythoninterpreteraswell\nSeePythonforWindowsfordetailedinformationaboutplatformswithpre-compiledinstallers.\n60 Chapter4. UsingPythononWindows\nCHAPTER\nFIVE\nUSING PYTHON ON MACOS\nThisdocumentaimstogiveanoverviewofmacOS-specificbehavioryoushouldknowabouttogetstartedwithPython\nonMaccomputers. PythononaMacrunningmacOSisverysimilartoPythononotherUnix-derivedplatforms,but\ntherearesomedifferencesininstallationandsomefeatures.\nThere are various ways to obtain and install Python for macOS. Pre-built versions of the most recent versions of\nPythonareavailablefromanumberofdistributors. MuchofthisdocumentdescribesuseofthePythonsprovided\nbytheCPythonreleaseteamfordownloadfromthepython.orgwebsite. SeeAlternativeDistributionsforsomeother\noptions.\n5.1 Using Python for macOS from python.org\n5.1.1 Installation steps\nForcurrentPythonversions(otherthanthoseinsecuritystatus),thereleaseteamproducesaPythonformacOS\ninstallerpackageforeachnewrelease. Alistofavailableinstallersisavailablehere. Werecommendusingthemost\nrecentsupportedPythonversionwherepossible. Currentinstallersprovideauniversal2binarybuildofPythonwhich\nrunsnativelyonallMacs(AppleSiliconandIntel)thataresupportedbyawiderangeofmacOSversions,currently\ntypicallyfromatleastmacOS10.13HighSierraon.\nThedownloadedfileisastandardmacOSinstallerpackagefile(.pkg). Fileintegrityinformation(checksum,size,\nsigstoresignature,etc)foreachfileisincludedonthereleasedownloadpage. Installerpackagesandtheircontents\naresignedandnotarizedwithPython Software FoundationAppleDeveloperIDcertificatestomeetmacOS\nGatekeeperrequirements.\nFor a default installation, double-click on the downloaded installer package file. This should launch the standard\nmacOSInstallerappanddisplaythefirstofseveralinstallerwindowssteps.\n61\nPythonSetupandUsage,Release3.13.3\nClickingontheContinuebuttonbringsuptheReadMeforthisinstaller. Besidesotherimportantinformation,the\nReadMedocumentswhichPythonversionisgoingtobeinstalledandonwhatversionsofmacOSitissupported. You\nmayneedtoscrollthroughtoreadthewholefile. Bydefault,thisReadMewillalsobeinstalledin/Applications/\nPython 3.13/andavailabletoreadanytime.\n62 Chapter5. UsingPythononmacOS\nPythonSetupandUsage,Release3.13.3\nClickingonContinueproceedstodisplaythelicenseforPythonandforotherincludedsoftware. Youwillthenneed\ntoAgreetothelicensetermsbeforeproceedingtothenextstep. Thislicensefilewillalsobeinstalledandavailable\ntobereadlater.\n5.1. UsingPythonformacOSfrompython.org 63\nPythonSetupandUsage,Release3.13.3\nAfterthelicensetermsareaccepted,thenextstepistheInstallationTypedisplay. Formostuses,thestandardset\nofinstallationoperationsisappropriate.\n64 Chapter5. UsingPythononmacOS\nPythonSetupandUsage,Release3.13.3\nBypressingtheCustomizebutton,youcanchoosetoomitorselectcertainpackagecomponentsoftheinstaller. Click\noneachpackagenametoseeadescriptionofwhatitinstalls. Toalsoinstallsupportfortheoptionalexperimental\nfree-threadedfeature,seeInstallingFree-threadedBinaries.\n5.1. UsingPythonformacOSfrompython.org 65\nPythonSetupandUsage,Release3.13.3\nIneithercase,clickingInstallwillbegintheinstallprocessbyaskingpermissiontoinstallnewsoftware. AmacOS\nusernamewithAdministratorprivilegeisneededastheinstalledPythonwillbeavailabletoallusersoftheMac.\nWhentheinstallationiscomplete,theSummarywindowwillappear.\n66 Chapter5. UsingPythononmacOS\nPythonSetupandUsage,Release3.13.3\nDouble-click on the Install Certificates.command icon or file in the /Applications/Python 3.13/\nwindowtocompletetheinstallation.\nThiswillopenatemporaryTerminalshellwindowthatwillusethenewPythontodownloadandinstallSSLroot\ncertificatesforitsuse.\n5.1. UsingPythonformacOSfrompython.org 67\nPythonSetupandUsage,Release3.13.3\nIfSuccessfully installed certifiandupdate completeappearsintheterminalwindow,theinstallation\niscomplete. Closethisterminalwindowandtheinstallerwindow.\nAdefaultinstallwillinclude:\n\u2022 APython 3.13folderinyourApplicationsfolder. InhereyoufindIDLE,thedevelopmentenvironment\nthatisastandardpartofofficialPythondistributions;andPython Launcher,whichhandlesdouble-clicking\nPythonscriptsfromthemacOSFinder.\n\u2022 A framework /Library/Frameworks/Python.framework, which includes the Python executable and\nlibraries. Theinstalleraddsthislocationtoyourshellpath. TouninstallPython,youcanremovethesethree\nthings. SymlinkstothePythonexecutableareplacedin/usr/local/bin/.\n(cid:174) Note\nRecentversionsofmacOSincludeapython3commandin/usr/bin/python3thatlinkstoausuallyolder\nand incomplete version of Python provided by and for use by the Apple development tools, Xcode or the\nCommand Line Tools for Xcode. You should never modify or attempt to delete this installation, as it is\nApple-controlledandisusedbyApple-providedorthird-partysoftware. IfyouchoosetoinstallanewerPython\nversionfrompython.org,youwillhavetwodifferentbutfunctionalPythoninstallationsonyourcomputerthat\ncan co-exist. The default installer options should ensure that its python3 will be used instead of the system\npython3.\n68 Chapter5. UsingPythononmacOS\nPythonSetupandUsage,Release3.13.3\n5.1.2 How to run a Python script\nTherearetwowaystoinvokethePythoninterpreter. IfyouarefamiliarwithusingaUnixshellinaterminalwindow,\nyoucaninvokepython3.13orpython3optionallyfollowedbyoneormorecommandlineoptions(describedin\nCommandlineandenvironment). ThePythontutorialalsohasausefulsectiononusingPythoninteractivelyfroma\nshell.\nYoucanalsoinvoketheinterpreterthroughanintegrateddevelopmentenvironment. idleisabasiceditorandinter-\npreterenvironmentwhichisincludedwiththestandarddistributionofPython. IDLEincludesaHelpmenuthatallows\nyoutoaccessPythondocumentation. IfyouarecompletelynewtoPython,youcanreadthetutorialintroductionin\nthatdocument.\nTherearemanyothereditorsandIDEsavailable,seeEditorsandIDEsformoreinformation.\nTorunaPythonscriptfilefromtheterminalwindow,youcaninvoketheinterpreterwiththenameofthescriptfile:\npython3.13myscript.py\nTorunyourscriptfromtheFinder,youcaneither:\n\u2022 DragittoPython Launcher.\n\u2022 SelectPython Launcherasthedefaultapplicationtoopenyourscript(orany.pyscript)throughtheFinder\nInfo window and double-click it. Python Launcher has various preferences to control how your script is\nlaunched. Option-draggingallowsyoutochangetheseforoneinvocation,oruseitsPreferencesmenuto\nchangethingsglobally.\nBeawarethatrunningthescriptdirectlyfromthemacOSFindermightproducedifferentresultsthanwhenrunning\nfrom a terminal window as the script will not be run in the usual shell environment including any setting of envi-\nronment variables in shell profiles. And, as with any other script or program, be certain of what you are about to\nrun.\n5.2 Alternative Distributions\nBesidesthestandardpython.orgformacOSinstaller,therearethird-partydistributionsformacOSthatmayinclude\nadditionalfunctionality. Somepopulardistributionsandtheirkeyfeatures:\nActivePython\nInstallerwithmulti-platformcompatibility,documentation\nAnaconda\nPopularscientificmodules(suchasnumpy,scipy,andpandas)andthecondapackagemanager.\nHomebrew\nPackagemanagerformacOSincludingmultipleversionsofPythonandmanythird-partyPython-basedpack-\nages(includingnumpy,scipy,andpandas).\nMacPorts\nAnother package manager for macOS including multiple versions of Python and many third-party Python-\nbasedpackages. Mayincludepre-builtversionsofPythonandmanypackagesforolderversionsofmacOS.\nNotethatdistributionsmightnotincludethelatestversionsofPythonorotherlibraries,andarenotmaintainedor\nsupportedbythecorePythonteam.\n5.3 Installing Additional Python Packages\nRefertothePythonPackagingUserGuideformoreinformation.\n5.4 GUI Programming\nThereareseveraloptionsforbuildingGUIapplicationsontheMacwithPython.\n5.2. AlternativeDistributions 69\nPythonSetupandUsage,Release3.13.3\nThestandardPythonGUItoolkitistkinter,basedonthecross-platformTktoolkit(https://www.tcl.tk). AmacOS-\nnativeversionofTkisincludedwiththeinstaller.\nPyObjC is a Python binding to Apple\u2019s Objective-C/Cocoa framework. Information on PyObjC is available from\npyobjc.\nAnumberofalternativemacOSGUItoolkitsareavailableincluding:\n\u2022 PySide: OfficialPythonbindingstotheQtGUItoolkit.\n\u2022 PyQt: AlternativePythonbindingstoQt.\n\u2022 Kivy: Across-platformGUItoolkitthatsupportsdesktopandmobileplatforms.\n\u2022 Toga: PartoftheBeeWareProject;supportsdesktop,mobile,webandconsoleapps.\n\u2022 wxPython: Across-platformtoolkitthatsupportsdesktopoperatingsystems.\n5.5 Advanced Topics\n5.5.1 Installing Free-threaded Binaries\nAddedinversion3.13: (Experimental)\n(cid:174) Note\nEverything described in this section is considered experimental, and should be expected to change in future\nreleases.\nThepython.orgPythonformacOSinstallerpackagecanoptionallyinstallanadditionalbuildofPython3.13that\nsupportsPEP703,theexperimentalfree-threadingfeature(runningwiththeglobalinterpreterlockdisabled). Check\nthereleasepageonpython.orgforpossibleupdatedinformation.\nBecausethisfeatureisstillconsideredexperimental,thesupportforitisnotinstalledbydefault. Itispackagedasa\nseparateinstalloption,availablebyclickingtheCustomizebuttonontheInstallationTypestepoftheinstalleras\ndescribedabove.\n70 Chapter5. UsingPythononmacOS\nPythonSetupandUsage,Release3.13.3\nIftheboxnexttotheFree-threadedPythonpackagenameischecked,aseparatePythonT.frameworkwillalso\nbe installed alongside the normal Python.framework in /Library/Frameworks. This configuration allows a\nfree-threaded Python 3.13 build to co-exist on your system with a traditional (GIL only) Python 3.13 build with\nminimal risk while installing or testing. This installation layout is itself experimental and is subject to change in\nfuturereleases.\nKnowncautionsandlimitations:\n\u2022 TheUNIXcommand-linetoolspackage,whichisselectedbydefault,willinstalllinksin/usr/local/bin\nforpython3.13t,thefree-threadedinterpreter,andpython3.13t-config,aconfigurationutilitywhich\nmaybeusefulforpackagebuilders. Since/usr/local/binistypicallyincludedinyourshellPATH,inmost\ncasesnochangestoyourPATHenvironmentvariablesshouldbeneededtousepython3.13t.\n\u2022 For this release, the Shell profile updater package and the Update Shell Profile.command in /\nApplications/Python 3.13/donotsupportthefree-threadedpackage.\n\u2022 The free-threaded build and the traditional build have separate search paths and separate site-packages\ndirectoriesso,bydefault,ifyouneedapackageavailableinbothbuilds,itmayneedtobeinstalledinboth.\nThefree-threadedpackagewillinstallaseparateinstanceofpipforusewithpython3.13t.\n\u2013 Toinstallapackageusingpipwithoutavenv:\npython3.13t-m pip install <package_name>\n\u2022 When working with multiple Python environments, it is usually safest and easiest to create and use virtual\nenvironments. ThiscanavoidpossiblecommandnameconflictsandconfusionaboutwhichPythonisinuse:\npython3.13t-m venv <venv_name>\nthenactivate.\n\u2022 Torunafree-threadedversionofIDLE:\npython3.13t-m idlelib\n5.5. AdvancedTopics 71\nPythonSetupandUsage,Release3.13.3\n\u2022 TheinterpretersinbothbuildsrespondtothesamePYTHONenvironmentvariableswhichmayhaveunexpected\nresults,forexample,ifyouhavePYTHONPATHsetinashellprofile. Ifnecessary,therearecommandlineoptions\nlike-Etoignoretheseenvironmentvariables.\n\u2022 The free-threaded build links to the third-party shared libraries, such as OpenSSL and Tk, installed in the\ntraditionalframework. Thismeansthatbothbuildsalsoshareonesetoftrustcertificatesasinstalledbythe\nInstall Certificates.commandscript,thusitonlyneedstoberunonce.\n\u2022 Ifyoucannotdependonthelinkin/usr/local/binpointingtothepython.orgfree-threadedpython3.\n13t (for example, if you want to install your own version there or some other distribution does), you can\nexplicitlysetyourshellPATHenvironmentvariabletoincludethePythonTframeworkbindirectory:\nexport PATH=\"/Library/Frameworks/PythonT.framework/Versions/3.13/bin\":\"$PATH\"\nThe traditional framework installation by default does something similar, except for Python.framework.\nBe aware that having both framework bin directories in PATH can lead to confusion if there are duplicate\nnameslikepython3.13inboth;whichoneisactuallyuseddependsontheordertheyappearinPATH.The\nwhich python3.x or which python3.xt commands can show which path is being used. Using virtual\nenvironmentscanhelpavoidsuchambiguities. Anotheroptionmightbetocreateashellaliastothedesired\ninterpreter,like:\nalias py3.13=\"/Library/Frameworks/Python.framework/Versions/3.13/bin/python3.13\n,\u2192\"\nalias py3.13t=\"/Library/Frameworks/PythonT.framework/Versions/3.13/bin/python3.\n,\u219213t\"\n5.5.2 Installing using the command line\nIfyouwanttouseautomationtoinstallthepython.orginstallerpackage(ratherthanbyusingthefamiliarmacOS\nInstaller GUI app), the macOS command line installer utility lets you select non-default options, too. If\nyou are not familiar with installer, it can be somewhat cryptic (see man installer for more information).\nAs an example, the following shell snippet shows one way to do it, using the 3.13.0b2 release and selecting the\nfree-threadedinterpreteroption:\nRELEASE=\"python-3.13.0b2-macos11.pkg\"\n# download installer pkg\ncurl -O https://www.python.org/ftp/python/3.13.0/${RELEASE}\n# create installer choicechanges to customize the install:\n# enable the PythonTFramework-3.13 package\n# while accepting the other defaults (install all other packages)\ncat > ./choicechanges.plist <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/\n,\u2192PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<array>\n<dict>\n<key>attributeSetting</key>\n<integer>1</integer>\n<key>choiceAttribute</key>\n<string>selected</string>\n<key>choiceIdentifier</key>\n<string>org.python.Python.PythonTFramework-3.13</string>\n</dict>\n</array>\n</plist>\nEOF\n(continuesonnextpage)\n72 Chapter5. UsingPythononmacOS\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\nsudo installer -pkg ./${RELEASE} -applyChoiceChangesXML ./choicechanges.plist -\n,\u2192target /\nYoucanthentestthatbothinstallerbuildsarenowavailablewithsomethinglike:\n$ # test that the free-threaded interpreter was installed if the Unix Command\u2423\n,\u2192Tools package was enabled\n$ /usr/local/bin/python3.13t -VV\nPython 3.13.0b2 experimental free-threading build (v3.13.0b2:3a83b172af, Jun 5\u2423\n,\u21922024, 12:57:31) [Clang 15.0.0 (clang-1500.3.9.4)]\n$ # and the traditional interpreter\n$ /usr/local/bin/python3.13 -VV\nPython 3.13.0b2 (v3.13.0b2:3a83b172af, Jun 5 2024, 12:50:24) [Clang 15.0.0 (clang-\n,\u21921500.3.9.4)]\n$ # test that they are also available without the prefix if /usr/local/bin is on\n,\u2192$PATH\n$ python3.13t -VV\nPython 3.13.0b2 experimental free-threading build (v3.13.0b2:3a83b172af, Jun 5\u2423\n,\u21922024, 12:57:31) [Clang 15.0.0 (clang-1500.3.9.4)]\n$ python3.13 -VV\nPython 3.13.0b2 (v3.13.0b2:3a83b172af, Jun 5 2024, 12:50:24) [Clang 15.0.0 (clang-\n,\u21921500.3.9.4)]\n(cid:174) Note\nCurrentpython.orginstallersonlyinstalltofixedlocationslike/Library/Frameworks/,/Applications,\nand/usr/local/bin. Youcannotusetheinstaller-domainoptiontoinstalltootherlocations.\n5.5.3 Distributing Python Applications\nArangeoftoolsexistforconvertingyourPythoncodeintoastandalonedistributableapplication:\n\u2022 py2app: SupportscreatingmacOS.appbundlesfromaPythonproject.\n\u2022 Briefcase:PartoftheBeeWareProject;across-platformpackagingtoolthatsupportscreationof.appbundles\nonmacOS,aswellasmanagingsigningandnotarization.\n\u2022 PyInstaller: Across-platformpackagingtoolthatcreatesasinglefileorfolderasadistributableartifact.\n5.5.4 App Store Compliance\nAppssubmittedfordistributionthroughthemacOSAppStoremustpassApple\u2019sappreviewprocess. Thisprocess\nincludesasetofautomatedvalidationrulesthatinspectthesubmittedapplicationbundleforproblematiccode.\nThePythonstandardlibrarycontainssomecodethatisknowntoviolatetheseautomatedrules. Whiletheseviolations\nappeartobefalsepositives,Apple\u2019sreviewrulescannotbechallenged. Therefore,itisnecessarytomodifythePython\nstandardlibraryforanapptopassAppStorereview.\nThe Python source tree contains a patch file that will remove all code that is known to cause issues with\nthe App Store review process. This patch is applied automatically when CPython is configured with the\n--with-app-store-complianceoption.\nThispatchisnotnormallyrequiredtouseCPythononaMac;norisitrequiredifyouaredistributinganappoutside\nthemacOSAppStore. ItisonlyrequiredifyouareusingthemacOSAppStoreasadistributionchannel.\n5.5. AdvancedTopics 73\nPythonSetupandUsage,Release3.13.3\n5.6 Other Resources\nThepython.orgHelppagehaslinkstomanyusefulresources. ThePythonmac-SIGmailinglistisanothersupport\nresourcespecificallyforPythonusersanddevelopersontheMac.\n74 Chapter5. UsingPythononmacOS\nCHAPTER\nSIX\nUSING PYTHON ON ANDROID\nPythononAndroidisunlikePythonondesktopplatforms. Onadesktopplatform,Pythonisgenerallyinstalledasa\nsystemresourcethatcanbeusedbyanyuserofthatcomputer. UserstheninteractwithPythonbyrunningapython\nexecutableandenteringcommandsataninteractiveprompt,orbyrunningaPythonscript.\nOnAndroid,thereisnoconceptofinstallingasasystemresource. Theonlyunitofsoftwaredistributionisan\u201capp\u201d.\nThereisalsonoconsolewhereyoucouldrunapythonexecutable,orinteractwithaPythonREPL.\nAsaresult,theonlywayyoucanusePythononAndroidisinembeddedmode\u2013thatis,bywritinganativeAndroid\napplication,embeddingaPythoninterpreterusinglibpython,andinvokingPythoncodeusingthePythonembed-\ndingAPI.ThefullPythoninterpreter,thestandardlibrary,andallyourPythoncodeisthenpackagedintoyourapp\nforitsownprivateuse.\nThePythonstandardlibraryhassomenotableomissionsandrestrictionsonAndroid. SeetheAPIavailabilityguide\nfordetails.\n6.1 Adding Python to an Android app\nMostappdevelopersshoulduseoneofthefollowingtools,whichwillprovideamucheasierexperience:\n\u2022 Briefcase,fromtheBeeWareproject\n\u2022 Buildozer,fromtheKivyproject\n\u2022 Chaquopy\n\u2022 pyqtdeploy\n\u2022 Termux\nIfyou\u2019resureyouwanttodoallofthismanually,readon. Youcanusethetestbedappasaguide;eachstepbelow\ncontainsalinktotherelevantfile.\n\u2022 Build Python by following the instructions in Android/README.md. This will create the directory\ncross-build/HOST/prefix.\n\u2022 Addcodetoyourbuild.gradlefiletocopythefollowingitemsintoyourproject. AllexceptyourownPython\ncodecanbecopiedfromprefix/lib:\n\u2013 InyourJNIlibraries:\n\u2217 libpython*.*.so\n\u2217 lib*_python.so(externallibrariessuchasOpenSSL)\n\u2013 Inyourassets:\n\u2217 python*.*(thePythonstandardlibrary)\n\u2217 python*.*/site-packages(yourownPythoncode)\n\u2022 Addcodetoyourapptoextracttheassetstothefilesystem.\n\u2022 AddcodetoyourapptostartPythoninembeddedmode. ThiswillneedtobeCcodecalledviaJNI.\n75\nPythonSetupandUsage,Release3.13.3\n76 Chapter6. UsingPythononAndroid\nCHAPTER\nSEVEN\nUSING PYTHON ON IOS\nAuthors\nRussellKeith-Magee(2024-03)\nPython on iOS is unlike Python on desktop platforms. On a desktop platform, Python is generally installed as a\nsystemresourcethatcanbeusedbyanyuserofthatcomputer. UserstheninteractwithPythonbyrunningapython\nexecutableandenteringcommandsataninteractiveprompt,orbyrunningaPythonscript.\nOn iOS, there is no concept of installing as a system resource. The only unit of software distribution is an \u201capp\u201d.\nThereisalsonoconsolewhereyoucouldrunapythonexecutable,orinteractwithaPythonREPL.\nAsaresult,theonlywayyoucanusePythononiOSisinembeddedmode-thatis,bywritinganativeiOSapplication,\nandembeddingaPythoninterpreterusinglibPython,andinvokingPythoncodeusingthePythonembeddingAPI.\nThefullPythoninterpreter,thestandardlibrary,andallyourPythoncodeisthenpackagedasastandalonebundle\nthatcanbedistributedviatheiOSAppStore.\nIfyou\u2019relookingtoexperimentforthefirsttimewithwritinganiOSappinPython,projectssuchasBeeWareand\nKivywillprovideamuchmoreapproachableuserexperience. Theseprojectsmanagethecomplexitiesassociated\nwithgettinganiOSprojectrunning,soyouonlyneedtodealwiththePythoncodeitself.\n7.1 Python at runtime on iOS\n7.1.1 iOS version compatibility\nThe minimum supported iOS version is specified at compile time, using the --host option to configure. By\ndefault, when compiled for iOS, Python will be compiled with a minimum supported iOS version of 13.0. To\nuse a different minimum iOS version, provide the version number as part of the --host argument - for exam-\nple,--host=arm64-apple-ios15.4-simulatorwouldcompileanARM64simulatorbuildwithadeployment\ntargetof15.4.\n7.1.2 Platform identification\nWhen executing on iOS, sys.platform will report as ios. This value will be returned on an iPhone or iPad,\nregardlessofwhethertheappisrunningonthesimulatororaphysicaldevice.\nInformationaboutthespecificruntimeenvironment,includingtheiOSversion,devicemodel,andwhetherthedevice\nisasimulator,canbeobtainedusingplatform.ios_ver(). platform.system()willreportiOSoriPadOS,\ndependingonthedevice.\nos.uname()reportskernel-leveldetails;itwillreportanameofDarwin.\n7.1.3 Standard library availability\nThePythonstandardlibraryhassomenotableomissionsandrestrictionsoniOS.SeetheAPIavailabilityguidefor\niOSfordetails.\n77\nPythonSetupandUsage,Release3.13.3\n7.1.4 Binary extension modules\nOne notable difference about iOS as a platform is that App Store distribution imposes hard requirements on the\npackagingofanapplication. Oneoftheserequirementsgovernshowbinaryextensionmodulesaredistributed.\nTheiOSAppStorerequiresthatallbinarymodulesinaniOSappmustbedynamiclibraries,containedinaframework\nwithappropriatemetadata,storedintheFrameworksfolderofthepackagedapp. Therecanbeonlyasinglebinary\nperframework,andtherecanbenoexecutablebinarymaterialoutsidetheFrameworksfolder.\nThisconflictswiththeusualPythonapproachfordistributingbinaries,whichallowsabinaryextensionmoduletobe\nloadedfromanylocationonsys.path. ToensurecompliancewithAppStorepolicies,aniOSprojectmustpost-\nprocessanyPythonpackages,converting.sobinarymodulesintoindividualstandaloneframeworkswithappropriate\nmetadataandsigning. Fordetailsonhowtoperformthispost-processing,seetheguideforaddingPythontoyour\nproject.\nTohelpPythondiscoverbinariesintheirnewlocation,theoriginal.sofileonsys.pathisreplacedwitha.fwork\nfile. Thisfileisatextfilecontainingthelocationoftheframeworkbinary,relativetotheappbundle. Toallowthe\nframework to resolve back to the original location, the framework must contain a .origin file that contains the\nlocationofthe.fworkfile,relativetotheappbundle.\nForexample,considerthecaseofanimportfrom foo.bar import _whiz,where_whizisimplementedwith\nthe binary module sources/foo/bar/_whiz.abi3.so, with sources being the location registered on sys.\npath, relative to the application bundle. This module must be distributed as Frameworks/foo.bar._whiz.\nframework/foo.bar._whiz (creating the framework name from the full import path of the module), with an\nInfo.plist file in the .framework directory identifying the binary as a framework. The foo.bar._whiz\nmodule would be represented in the original location with a sources/foo/bar/_whiz.abi3.fwork marker\nfile, containing the path Frameworks/foo.bar._whiz/foo.bar._whiz. The framework would also contain\nFrameworks/foo.bar._whiz.framework/foo.bar._whiz.origin,containingthepathtothe.fworkfile.\nWhenrunningoniOS,thePythoninterpreterwillinstallanAppleFrameworkLoaderthatisabletoreadandimport\n.fworkfiles. Onceimported,the__file__attributeofthebinarymodulewillreportasthelocationofthe.fwork\nfile. However,theModuleSpecfortheloadedmodulewillreporttheoriginasthelocationofthebinaryinthe\nframeworkfolder.\n7.1.5 Compiler stub binaries\nXcodedoesn\u2019texposeexplicitcompilersforiOS;instead,itusesanxcrunscriptthatresolvestoafullcompilerpath\n(e.g.,xcrun --sdk iphoneos clangtogettheclangforaniPhonedevice). However,usingthisscriptposes\ntwoproblems:\n\u2022 Theoutputofxcrunincludespathsthataremachinespecific,resultinginasysconfigmodulethatcannotbe\nsharedbetweenusers;and\n\u2022 ItresultsinCC/CPP/LD/ARdefinitionsthatincludespaces. ThereisalotofCecosystemtoolingthatassumes\nthatyoucansplitacommandlineatthefirstspacetogetthepathtothecompilerexecutable;thisisn\u2019tthecase\nwhenusingxcrun.\nToavoidtheseproblems,Pythonprovidedstubsforthesetools. Thesestubsareshellscriptwrappersaroundtheun-\nderinglyxcruntools,distributedinabinfolderdistributedalongsidethecompilediOSframework. Thesescripts\narerelocatable, andwillalwaysresolvetotheappropriatelocalsystempaths. Byincludingthesescriptsinthebin\nfolderthataccompaniesaframework,thecontentsofthesysconfigmodulebecomesusefulforend-userstocom-\npiletheirownmodules. Whencompilingthird-partyPythonmodulesforiOS,youshouldensurethesestubbinaries\nareonyourpath.\n7.2 Installing Python on iOS\n7.2.1 Tools for building iOS apps\nBuildingforiOSrequirestheuseofApple\u2019sXcodetooling. Itisstronglyrecommendedthatyouusethemostrecent\nstablereleaseofXcode. Thiswillrequiretheuseofthemost(orsecond-most)recentlyreleasedmacOSversion,as\nAppledoesnotmaintainXcodeforoldermacOSversions. TheXcodeCommandLineToolsarenotsufficientfor\niOSdevelopment;youneedafullXcodeinstall.\n78 Chapter7. UsingPythononiOS\nPythonSetupandUsage,Release3.13.3\nIfyouwanttorunyourcodeontheiOSsimulator,you\u2019llalsoneedtoinstallaniOSSimulatorPlatform. Youshouldbe\npromptedtoselectaniOSSimulatorPlatformwhenyoufirstrunXcode. Alternatively,youcanaddaniOSSimulator\nPlatformbyselectingfromthePlatformstaboftheXcodeSettingspanel.\n7.2.2 Adding Python to an iOS project\nPythoncanbeaddedtoanyiOSproject,usingeitherSwiftorObjectiveC.ThefollowingexampleswilluseObjective\nC;ifyouareusingSwift,youmayfindalibrarylikePythonKittobehelpful.\nToaddPythontoaniOSXcodeproject:\n1. Build or obtain a Python XCFramework. See the instructions in iOS/README.rst (in the CPython\nsource distribution) for details on how to build a Python XCFramework. At a minimum, you will\nneed a build that supports arm64-apple-ios, plus one of either arm64-apple-ios-simulator or\nx86_64-apple-ios-simulator.\n2. DragtheXCframeworkintoyouriOSproject. Inthefollowinginstructions,we\u2019llassumeyou\u2019vedroppedthe\nXCframeworkintotherootofyourproject;however,youcanuseanyotherlocationthatyouwantbyadjusting\npathsasneeded.\n3. DragtheiOS/Resources/dylib-Info-template.plistfileintoyourproject,andensureitisassociated\nwiththeapptarget.\n4. AddyourapplicationcodeasafolderinyourXcodeproject. Inthefollowinginstructions,we\u2019llassumethat\nyourusercodeisinafoldernamedappintherootofyourproject;youcanuseanyotherlocationbyadjusting\npathsasneeded. Ensurethatthisfolderisassociatedwithyourapptarget.\n5. SelecttheapptargetbyselectingtherootnodeofyourXcodeproject,thenthetargetnameinthesidebarthat\nappears.\n6. In the \u201cGeneral\u201d settings, under \u201cFrameworks, Libraries and Embedded Content\u201d, add Python.\nxcframework,with\u201cEmbed&Sign\u201dselected.\n7. Inthe\u201cBuildSettings\u201dtab,modifythefollowing:\n\u2022 BuildOptions\n\u2013 UserScriptSandboxing: No\n\u2013 EnableTestability: Yes\n\u2022 SearchPaths\n\u2013 FrameworkSearchPaths: $(PROJECT_DIR)\n\u2013 HeaderSearchPaths: \"$(BUILT_PRODUCTS_DIR)/Python.framework/Headers\"\n\u2022 AppleClang-Warnings-Alllanguages\n\u2013 QuotedIncludeInFrameworkHeader: No\n8. AddabuildstepthatcopiesthePythonstandardlibraryintoyourapp. Inthe\u201cBuildPhases\u201dtab,addanew\n\u201cRun Script\u201d build step before the \u201cEmbed Frameworks\u201d step, but after the \u201cCopy Bundle Resources\u201d step.\nNamethestep\u201cInstallTargetSpecificPythonStandardLibrary\u201d,disablethe\u201cBasedondependencyanalysis\u201d\ncheckbox,andsetthescriptcontentto:\nset -e\nmkdir -p \"$CODESIGNING_FOLDER_PATH/python/lib\"\nif [ \"$EFFECTIVE_PLATFORM_NAME\" = \"-iphonesimulator\" ]; then\necho \"Installing Python modules for iOS Simulator\"\nrsync -au --delete \"$PROJECT_DIR/Python.xcframework/ios-arm64_x86_64-\n,\u2192simulator/lib/\" \"$CODESIGNING_FOLDER_PATH/python/lib/\"\nelse\necho \"Installing Python modules for iOS Device\"\nrsync -au --delete \"$PROJECT_DIR/Python.xcframework/ios-arm64/lib/\" \"\n(continuesonnextpage)\n7.2. InstallingPythononiOS 79\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\n,\u2192$CODESIGNING_FOLDER_PATH/python/lib/\"\nfi\nNotethatthenameofthesimulator\u201cslice\u201dintheXCframeworkmaybedifferent,dependingtheCPUarchi-\ntecturesyourXCFrameworksupports.\n9. Addasecondbuildstepthatprocessesthebinaryextensionmodulesinthestandardlibraryinto\u201cFramework\u201d\nformat. Adda\u201cRunScript\u201dbuildstepdirectlyaftertheoneyouaddedinstep8,named\u201cPreparePythonBinary\nModules\u201d. Itshouldalsohave\u201cBasedondependencyanalysis\u201dunchecked,withthefollowingscriptcontent:\nset -e\ninstall_dylib () {\nINSTALL_BASE=$1\nFULL_EXT=$2\n# The name of the extension file\nEXT=$(basename \"$FULL_EXT\")\n# The location of the extension file, relative to the bundle\nRELATIVE_EXT=${FULL_EXT#$CODESIGNING_FOLDER_PATH/}\n# The path to the extension file, relative to the install base\nPYTHON_EXT=${RELATIVE_EXT/$INSTALL_BASE/}\n# The full dotted name of the extension module, constructed from the file\u2423\n,\u2192path.\nFULL_MODULE_NAME=$(echo $PYTHON_EXT | cut -d \".\" -f 1 | tr \"/\" \".\");\n# A bundle identifier; not actually used, but required by Xcode framework\u2423\n,\u2192packaging\nFRAMEWORK_BUNDLE_ID=$(echo $PRODUCT_BUNDLE_IDENTIFIER.$FULL_MODULE_NAME |\u2423\n,\u2192tr \"_\" \"-\")\n# The name of the framework folder.\nFRAMEWORK_FOLDER=\"Frameworks/$FULL_MODULE_NAME.framework\"\n# If the framework folder doesn't exist, create it.\nif [ ! -d \"$CODESIGNING_FOLDER_PATH/$FRAMEWORK_FOLDER\" ]; then\necho \"Creating framework for $RELATIVE_EXT\"\nmkdir -p \"$CODESIGNING_FOLDER_PATH/$FRAMEWORK_FOLDER\"\ncp \"$CODESIGNING_FOLDER_PATH/dylib-Info-template.plist\" \"$CODESIGNING_\n,\u2192FOLDER_PATH/$FRAMEWORK_FOLDER/Info.plist\"\nplutil -replace CFBundleExecutable -string \"$FULL_MODULE_NAME\" \"\n,\u2192$CODESIGNING_FOLDER_PATH/$FRAMEWORK_FOLDER/Info.plist\"\nplutil -replace CFBundleIdentifier -string \"$FRAMEWORK_BUNDLE_ID\" \"\n,\u2192$CODESIGNING_FOLDER_PATH/$FRAMEWORK_FOLDER/Info.plist\"\nfi\necho \"Installing binary for $FRAMEWORK_FOLDER/$FULL_MODULE_NAME\"\nmv \"$FULL_EXT\" \"$CODESIGNING_FOLDER_PATH/$FRAMEWORK_FOLDER/$FULL_MODULE_\n,\u2192NAME\"\n# Create a placeholder .fwork file where the .so was\necho \"$FRAMEWORK_FOLDER/$FULL_MODULE_NAME\" > ${FULL_EXT%.so}.fwork\n# Create a back reference to the .so file location in the framework\necho \"${RELATIVE_EXT%.so}.fwork\" > \"$CODESIGNING_FOLDER_PATH/$FRAMEWORK_\n,\u2192FOLDER/$FULL_MODULE_NAME.origin\"\n}\nPYTHON_VER=$(ls -1 \"$CODESIGNING_FOLDER_PATH/python/lib\")\necho \"Install Python $PYTHON_VER standard library extension modules...\"\nfind \"$CODESIGNING_FOLDER_PATH/python/lib/$PYTHON_VER/lib-dynload\" -name \"*.so\n(continuesonnextpage)\n80 Chapter7. UsingPythononiOS\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\n,\u2192\" | while read FULL_EXT; do\ninstall_dylib python/lib/$PYTHON_VER/lib-dynload/ \"$FULL_EXT\"\ndone\n# Clean up dylib template\nrm -f \"$CODESIGNING_FOLDER_PATH/dylib-Info-template.plist\"\necho \"Signing frameworks as $EXPANDED_CODE_SIGN_IDENTITY_NAME ($EXPANDED_CODE_\n,\u2192SIGN_IDENTITY)...\"\nfind \"$CODESIGNING_FOLDER_PATH/Frameworks\" -name \"*.framework\" -exec /usr/bin/\n,\u2192codesign --force --sign \"$EXPANDED_CODE_SIGN_IDENTITY\" ${OTHER_CODE_SIGN_\n,\u2192FLAGS:-} -o runtime --timestamp=none --preserve-metadata=identifier,\n,\u2192entitlements,flags --generate-entitlement-der \"{}\" \\;\n10. AddObjectiveCcodetoinitializeanduseaPythoninterpreterinembeddedmode. Youshouldensurethat:\n\u2022 UTF-8mode(PyPreConfig.utf8_mode)isenabled;\n\u2022 Bufferedstdio(PyConfig.buffered_stdio)isdisabled;\n\u2022 Writingbytecode(PyConfig.write_bytecode)isdisabled;\n\u2022 Signalhandlers(PyConfig.install_signal_handlers)areenabled;\n\u2022 PYTHONHOMEfortheinterpreterisconfiguredtopointatthepythonsubfolderofyourapp\u2019sbun-\ndle;and\n\u2022 ThePYTHONPATHfortheinterpreterincludes:\n\u2013 thepython/lib/python3.Xsubfolderofyourapp\u2019sbundle,\n\u2013 thepython/lib/python3.X/lib-dynloadsubfolderofyourapp\u2019sbundle,and\n\u2013 theappsubfolderofyourapp\u2019sbundle\nYourapp\u2019sbundlelocationcanbedeterminedusing[[NSBundle mainBundle] resourcePath].\nSteps8,9and10oftheseinstructionsassumethatyouhaveasinglefolderofpurePythonapplicationcode,named\napp. Ifyouhavethird-partybinarymodulesinyourapp,someadditionalstepswillberequired:\n\u2022 Youneedtoensurethatanyfolderscontainingthird-partybinariesareeitherassociatedwiththeapptarget,\norcopiedinaspartofstep8. Step8shouldalsopurgeanybinariesthatarenotappropriatefortheplatforma\nspecificbuildistargeting(i.e.,deleteanydevicebinariesifyou\u2019rebuildinganapptargetingthesimulator).\n\u2022 Anyfoldersthatcontainthird-partybinariesmustbeprocessedintoframeworkformbystep9. Theinvocation\nofinstall_dylibthatprocessesthelib-dynloadfoldercanbecopiedandadaptedforthispurpose.\n\u2022 If you\u2019re using a separate folder for third-party packages, ensure that folder is included as part of the\nPYTHONPATHconfigurationinstep10.\n7.2.3 Testing a Python package\nTheCPythonsourcetreecontainsatestbedprojectthatisusedtoruntheCPythontestsuiteontheiOSsimulator.\nThistestbedcanalsobeusedasatestbedprojectforrunningyourPythonlibrary\u2019stestsuiteoniOS.\nAfterbuildingorobtaininganiOSXCFramework(SeeiOS/README.rstfordetails),createacloneofthePython\niOStestbedprojectbyrunning:\n$ python iOS/testbed clone --framework <path/to/Python.xcframework> --app <path/to/\n,\u2192module1> --app <path/to/module2> app-testbed\nYouwillneedtomodifytheiOS/testbedreferencetopointtothatdirectoryintheCPythonsourcetree;anyfolders\nspecifiedwiththe--appflagwillbecopiedintotheclonedtestbedproject. Theresultingtestbedwillbecreatedinthe\napp-testbedfolder. Inthisexample,themodule1andmodule2wouldbeimportablemodulesatruntime. Ifyour\n7.2. InstallingPythononiOS 81\nPythonSetupandUsage,Release3.13.3\nprojecthasadditionaldependencies, theycanbeinstalledintotheapp-testbed/iOSTestbed/app_packages\nfolder(usingpip install --target app-testbed/iOSTestbed/app_packagesorsimilar).\nYoucanthenusetheapp-testbedfoldertorunthetestsuiteforyourapp,Forexample,ifmodule1.testswas\ntheentrypointtoyourtestsuite,youcouldrun:\n$ python app-testbed run -- module1.tests\nThisistheequivalentofrunningpython -m module1.testsonadesktopPythonbuild. Anyargumentsafter\nthe--willbepassedtothetestbedasiftheywereargumentstopython -monadesktopmachine.\nYoucanalsoopenthetestbedprojectinXcodebyrunning:\n$ open app-testbed/iOSTestbed.xcodeproj\nThiswillallowyoutousethefullXcodesuiteoftoolsfordebugging.\n7.3 App Store Compliance\nTheonlymechanismfordistributingappstothird-partyiOSdevicesistosubmittheapptotheiOSAppStore;apps\nsubmittedfordistributionmustpassApple\u2019sappreviewprocess. Thisprocessincludesasetofautomatedvalidation\nrulesthatinspectthesubmittedapplicationbundleforproblematiccode.\nThePythonstandardlibrarycontainssomecodethatisknowntoviolatetheseautomatedrules. Whiletheseviolations\nappear to be false positives, Apple\u2019s review rules cannot be challenged; so, it is necessary to modify the Python\nstandardlibraryforanapptopassAppStorereview.\nThe Python source tree contains a patch file that will remove all code that is known to cause issues with the App\nStorereviewprocess. ThispatchisappliedautomaticallywhenbuildingforiOS.\n82 Chapter7. UsingPythononiOS\nCHAPTER\nEIGHT\nEDITORS AND IDES\nThere are a number of IDEs that support Python programming language. Many editors and IDEs provide syntax\nhighlighting,debuggingtools,andPEP8checks.\n8.1 IDLE \u2014 Python editor and shell\nIDLEisPython\u2019sIntegratedDevelopmentandLearningEnvironmentandisgenerallybundledwithPythoninstalls.\nIfyouareonLinuxanddonothaveIDLEinstalledseeInstallingIDLEonLinux. FormoreinformationseetheIDLE\ndocs.\n8.2 Other Editors and IDEs\nPython\u2019scommunitywikihasinformationsubmittedbythecommunityonEditorsandIDEs. PleasegotoPython\nEditorsandIntegratedDevelopmentEnvironmentsforacomprehensivelist.\n83\nPythonSetupandUsage,Release3.13.3\n84 Chapter8. EditorsandIDEs\nAPPENDIX\nA\nGLOSSARY\n>>>\nThe default Python prompt of the interactive shell. Often seen for code examples which can be executed\ninteractivelyintheinterpreter.\n...\nCanreferto:\n\u2022 ThedefaultPythonpromptoftheinteractiveshellwhenenteringthecodeforanindentedcodeblock,\nwhen within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or\ntriplequotes),orafterspecifyingadecorator.\n\u2022 TheEllipsisbuilt-inconstant.\nabstractbaseclass\nAbstractbaseclassescomplementduck-typingbyprovidingawaytodefineinterfaceswhenothertechniques\nlikehasattr()wouldbeclumsyorsubtlywrong(forexamplewithmagicmethods). ABCsintroducevirtual\nsubclasses, which are classes that don\u2019t inherit from a class but are still recognized by isinstance() and\nissubclass();seetheabcmoduledocumentation. Pythoncomeswithmanybuilt-inABCsfordatastruc-\ntures(inthecollections.abcmodule),numbers(inthenumbersmodule),streams(intheiomodule),\nimportfindersandloaders(intheimportlib.abcmodule). YoucancreateyourownABCswiththeabc\nmodule.\nannotation\nAlabelassociatedwithavariable,aclassattributeorafunctionparameterorreturnvalue,usedbyconvention\nasatypehint.\nAnnotations of local variables cannot be accessed at runtime, but annotations of global variables, class at-\ntributes, andfunctionsarestoredinthe__annotations__specialattributeofmodules, classes, andfunc-\ntions,respectively.\nSeevariableannotation,functionannotation,PEP484andPEP526,whichdescribethisfunctionality. Also\nseeannotations-howtoforbestpracticesonworkingwithannotations.\nargument\nAvaluepassedtoafunction(ormethod)whencallingthefunction. Therearetwokindsofargument:\n\u2022 keywordargument: anargumentprecededbyanidentifier(e.g. name=)inafunctioncallorpassedasa\nvalueinadictionaryprecededby**. Forexample,3and5arebothkeywordargumentsinthefollowing\ncallstocomplex():\ncomplex(real=3, imag=5)\ncomplex(**{'real': 3, 'imag': 5})\n\u2022 positionalargument: anargumentthatisnotakeywordargument. Positionalargumentscanappearatthe\nbeginningofanargumentlistand/orbepassedaselementsofaniterableprecededby*. Forexample,3\nand5arebothpositionalargumentsinthefollowingcalls:\ncomplex(3, 5)\ncomplex(*(3, 5))\n85\nPythonSetupandUsage,Release3.13.3\nArguments are assigned to the named local variables in a function body. See the calls section for the rules\ngoverningthisassignment. Syntactically,anyexpressioncanbeusedtorepresentanargument;theevaluated\nvalueisassignedtothelocalvariable.\nSeealsotheparameterglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\nandPEP362.\nasynchronouscontextmanager\nAnobjectwhichcontrolstheenvironmentseeninanasync withstatementbydefining__aenter__()and\n__aexit__()methods. IntroducedbyPEP492.\nasynchronousgenerator\nAfunctionwhichreturnsanasynchronousgeneratoriterator. Itlookslikeacoroutinefunctiondefinedwith\nasync def except that it contains yield expressions for producing a series of values usable in an async\nforloop.\nUsuallyreferstoanasynchronousgeneratorfunction, butmayrefertoanasynchronousgeneratoriterator in\nsomecontexts. Incaseswheretheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\nAnasynchronousgeneratorfunctionmaycontainawaitexpressionsaswellasasync for,andasync with\nstatements.\nasynchronousgeneratoriterator\nAnobjectcreatedbyaasynchronousgeneratorfunction.\nThisisanasynchronousiteratorwhichwhencalledusingthe__anext__()methodreturnsanawaitableobject\nwhichwillexecutethebodyoftheasynchronousgeneratorfunctionuntilthenextyieldexpression.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npendingtry-statements). Whentheasynchronousgeneratoriteratoreffectivelyresumeswithanotherawaitable\nreturnedby__anext__(),itpicksupwhereitleftoff. SeePEP492andPEP525.\nasynchronousiterable\nAn object, that can be used in an async for statement. Must return an asynchronous iterator from its\n__aiter__()method. IntroducedbyPEP492.\nasynchronousiterator\nAn object that implements the __aiter__() and __anext__() methods. __anext__() must return an\nawaitableobject. async forresolvestheawaitablesreturnedbyanasynchronousiterator\u2019s__anext__()\nmethoduntilitraisesaStopAsyncIterationexception. IntroducedbyPEP492.\nattribute\nAvalueassociatedwithanobjectwhichisusuallyreferencedbynameusingdottedexpressions. Forexample,\nifanobjectohasanattributeaitwouldbereferencedaso.a.\nItispossibletogiveanobjectanattributewhosenameisnotanidentifierasdefinedbyidentifiers,forexample\nusingsetattr(),iftheobjectallowsit. Suchanattributewillnotbeaccessibleusingadottedexpression,\nandwouldinsteadneedtoberetrievedwithgetattr().\nawaitable\nAnobjectthatcanbeusedinanawaitexpression. Canbeacoroutineoranobjectwithan__await__()\nmethod. SeealsoPEP492.\nBDFL\nBenevolentDictatorForLife,a.k.a. GuidovanRossum,Python\u2019screator.\nbinaryfile\nAfileobjectabletoreadandwritebytes-likeobjects. Examplesofbinaryfilesarefilesopenedinbinarymode\n('rb','wb'or'rb+'),sys.stdin.buffer,sys.stdout.buffer,andinstancesofio.BytesIOand\ngzip.GzipFile.\nSeealsotextfileforafileobjectabletoreadandwritestrobjects.\nborrowedreference\nInPython\u2019sCAPI,aborrowedreferenceisareferencetoanobject,wherethecodeusingtheobjectdoesnot\nownthereference. Itbecomesadanglingpointeriftheobjectisdestroyed. Forexample,agarbagecollection\ncanremovethelaststrongreferencetotheobjectandsodestroyit.\n86 AppendixA. Glossary\nPythonSetupandUsage,Release3.13.3\nCallingPy_INCREF()ontheborrowedreferenceisrecommendedtoconvertittoastrongreferencein-place,\nexceptwhentheobjectcannotbedestroyedbeforethelastusageoftheborrowedreference. ThePy_NewRef()\nfunctioncanbeusedtocreateanewstrongreference.\nbytes-likeobject\nAn object that supports the bufferobjects and can export a C-contiguous buffer. This includes all bytes,\nbytearray,andarray.arrayobjects,aswellasmanycommonmemoryviewobjects. Bytes-likeobjects\ncanbeusedforvariousoperationsthatworkwithbinarydata;theseincludecompression,savingtoabinary\nfile,andsendingoverasocket.\nSomeoperationsneedthebinarydatatobemutable. Thedocumentationoftenreferstotheseas\u201cread-write\nbytes-likeobjects\u201d. Examplemutablebufferobjectsincludebytearrayandamemoryviewofabytearray.\nOther operations require the binary data to be stored in immutable objects (\u201cread-only bytes-like objects\u201d);\nexamplesoftheseincludebytesandamemoryviewofabytesobject.\nbytecode\nPythonsourcecodeiscompiledintobytecode,theinternalrepresentationofaPythonprogramintheCPython\ninterpreter. Thebytecodeisalsocachedin.pycfilessothatexecutingthesamefileisfasterthesecondtime\n(recompilation from source to bytecode can be avoided). This \u201cintermediate language\u201d is said to run on a\nvirtualmachinethatexecutesthemachinecodecorrespondingtoeachbytecode. Donotethatbytecodesare\nnotexpectedtoworkbetweendifferentPythonvirtualmachines,nortobestablebetweenPythonreleases.\nAlistofbytecodeinstructionscanbefoundinthedocumentationforthedismodule.\ncallable\nAcallableisanobjectthatcanbecalled,possiblywithasetofarguments(seeargument),withthefollowing\nsyntax:\ncallable(argument1, argument2, argumentN)\nAfunction,andbyextensionamethod,isacallable. Aninstanceofaclassthatimplementsthe__call__()\nmethodisalsoacallable.\ncallback\nAsubroutinefunctionwhichispassedasanargumenttobeexecutedatsomepointinthefuture.\nclass\nA template for creating user-defined objects. Class definitions normally contain method definitions which\noperateoninstancesoftheclass.\nclassvariable\nAvariabledefinedinaclassandintendedtobemodifiedonlyatclasslevel(i.e.,notinaninstanceoftheclass).\nclosurevariable\nAfreevariablereferencedfromanestedscopethatisdefinedinanouterscoperatherthanbeingresolvedat\nruntime from the globals or builtin namespaces. May be explicitly defined with the nonlocal keyword to\nallowwriteaccess,orimplicitlydefinedifthevariableisonlybeingread.\nForexample,intheinnerfunctioninthefollowingcode,bothxandprintarefreevariables,butonlyxis\naclosurevariable:\ndef outer():\nx = 0\ndef inner():\nnonlocal x\nx += 1\nprint(x)\nreturn inner\nDuetothecodeobject.co_freevarsattribute(which,despiteitsname,onlyincludesthenamesofclosure\nvariablesratherthanlistingallreferencedfreevariables),themoregeneralfreevariabletermissometimesused\nevenwhentheintendedmeaningistoreferspecificallytoclosurevariables.\n87\nPythonSetupandUsage,Release3.13.3\ncomplexnumber\nAnextensionofthefamiliarrealnumbersysteminwhichallnumbersareexpressedasasumofarealpartand\nanimaginarypart. Imaginarynumbersarerealmultiplesoftheimaginaryunit(thesquarerootof-1),often\nwritten i in mathematics or j in engineering. Python has built-in support for complex numbers, which are\nwrittenwiththislatternotation;theimaginarypartiswrittenwithajsuffix,e.g.,3+1j. Togetaccesstocom-\nplexequivalentsofthemathmodule,usecmath. Useofcomplexnumbersisafairlyadvancedmathematical\nfeature. Ifyou\u2019renotawareofaneedforthem,it\u2019salmostcertainyoucansafelyignorethem.\ncontext\nThistermhasdifferentmeaningsdependingonwhereandhowitisused. Somecommonmeanings:\n\u2022 Thetemporarystateorenvironmentestablishedbyacontextmanagerviaawithstatement.\n\u2022 The collection of keyvalue bindings associated with a particular contextvars.Context object and\naccessedviaContextVarobjects. Alsoseecontextvariable.\n\u2022 Acontextvars.Contextobject. Alsoseecurrentcontext.\ncontextmanagementprotocol\nThe__enter__()and__exit__()methodscalledbythewithstatement. SeePEP343.\ncontextmanager\nAnobjectwhichimplementsthecontextmanagementprotocol andcontrolstheenvironmentseenina with\nstatement. SeePEP343.\ncontextvariable\nA variable whose value depends on which context is the current context. Values are accessed via\ncontextvars.ContextVarobjects. Contextvariablesareprimarilyusedtoisolatestatebetweenconcur-\nrentasynchronoustasks.\ncontiguous\nAbufferisconsideredcontiguousexactlyifitiseitherC-contiguousorFortrancontiguous. Zero-dimensional\nbuffersareCandFortrancontiguous. Inone-dimensionalarrays,theitemsmustbelaidoutinmemorynext\ntoeachother,inorderofincreasingindexesstartingfromzero. InmultidimensionalC-contiguousarrays,the\nlastindexvariesthefastestwhenvisitingitemsinorderofmemoryaddress. However,inFortrancontiguous\narrays,thefirstindexvariesthefastest.\ncoroutine\nCoroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at\nanotherpoint. Coroutinescanbeentered,exited,andresumedatmanydifferentpoints. Theycanbeimple-\nmentedwiththeasync defstatement. SeealsoPEP492.\ncoroutinefunction\nAfunctionwhichreturnsacoroutineobject. Acoroutinefunctionmaybedefinedwiththeasync defstate-\nment, and may contain await, async for, and async with keywords. These were introduced by PEP\n492.\nCPython\nThecanonicalimplementationofthePythonprogramminglanguage,asdistributedonpython.org. Theterm\n\u201cCPython\u201disusedwhennecessarytodistinguishthisimplementationfromotherssuchasJythonorIronPython.\ncurrentcontext\nThecontext (contextvars.Contextobject)thatiscurrentlyusedbyContextVarobjectstoaccess(get\nor set) the values of context variables. Each thread has its own current context. Frameworks for executing\nasynchronous tasks (see asyncio) associate each task with a context which becomes the current context\nwheneverthetaskstartsorresumesexecution.\ndecorator\nAfunctionreturninganotherfunction,usuallyappliedasafunctiontransformationusingthe@wrappersyntax.\nCommonexamplesfordecoratorsareclassmethod()andstaticmethod().\nThedecoratorsyntaxismerelysyntacticsugar,thefollowingtwofunctiondefinitionsaresemanticallyequiv-\nalent:\n88 AppendixA. Glossary\nPythonSetupandUsage,Release3.13.3\ndef f(arg):\n...\nf = staticmethod(f)\n@staticmethod\ndef f(arg):\n...\nThe same concept exists for classes, but is less commonly used there. See the documentation for function\ndefinitionsandclassdefinitionsformoreaboutdecorators.\ndescriptor\nAnyobjectwhichdefinesthemethods__get__(),__set__(),or__delete__(). Whenaclassattribute\nis a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using a.b to get,\nset or delete an attribute looks up the object named b in the class dictionary for a, but if b is a descriptor,\ntherespectivedescriptormethodgetscalled. Understandingdescriptorsisakeytoadeepunderstandingof\nPythonbecausetheyarethebasisformanyfeaturesincludingfunctions,methods,properties,classmethods,\nstaticmethods,andreferencetosuperclasses.\nFormoreinformationaboutdescriptors\u2019methods,seedescriptorsortheDescriptorHowToGuide.\ndictionary\nAnassociativearray,wherearbitrarykeysaremappedtovalues. Thekeyscanbeanyobjectwith__hash__()\nand__eq__()methods. CalledahashinPerl.\ndictionarycomprehension\nA compact way to process all or part of the elements in an iterable and return a dictionary with the re-\nsults. results = {n: n ** 2 for n in range(10)}generatesadictionarycontainingkeynmapped\ntovaluen ** 2. Seecomprehensions.\ndictionaryview\nTheobjectsreturnedfromdict.keys(),dict.values(),anddict.items()arecalleddictionaryviews.\nTheyprovideadynamicviewonthedictionary\u2019sentries,whichmeansthatwhenthedictionarychanges,the\nview reflects these changes. To force the dictionary view to become a full list use list(dictview). See\ndict-views.\ndocstring\nAstringliteralwhichappearsasthefirstexpressioninaclass,functionormodule. Whileignoredwhenthe\nsuiteisexecuted,itisrecognizedbythecompilerandputintothe__doc__attributeoftheenclosingclass,\nfunctionormodule. Sinceitisavailableviaintrospection,itisthecanonicalplacefordocumentationofthe\nobject.\nduck-typing\nAprogrammingstylewhichdoesnotlookatanobject\u2019stypetodetermineifithastherightinterface;instead,\nthe method or attribute is simply called or used (\u201cIf it looks like a duck and quacks like a duck, it must be\na duck.\u201d) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility\nby allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). (Note,\nhowever, that duck-typing can be complemented with abstract base classes.) Instead, it typically employs\nhasattr()testsorEAFPprogramming.\nEAFP\nEasier to ask for forgiveness than permission. This common Python coding style assumes the existence of\nvalid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is\ncharacterizedbythepresenceofmanytryandexceptstatements. ThetechniquecontrastswiththeLBYL\nstylecommontomanyotherlanguagessuchasC.\nexpression\nApieceofsyntaxwhichcanbeevaluatedtosomevalue. Inotherwords,anexpressionisanaccumulationof\nexpressionelementslikeliterals,names,attributeaccess,operatorsorfunctioncallswhichallreturnavalue. In\ncontrasttomanyotherlanguages,notalllanguageconstructsareexpressions. Therearealsostatementswhich\ncannotbeusedasexpressions,suchaswhile. Assignmentsarealsostatements,notexpressions.\n89\nPythonSetupandUsage,Release3.13.3\nextensionmodule\nAmodulewritteninCorC++,usingPython\u2019sCAPItointeractwiththecoreandwithusercode.\nf-string\nString literals prefixed with 'f' or 'F' are commonly called \u201cf-strings\u201d which is short for formatted string\nliterals. SeealsoPEP498.\nfileobject\nAnobjectexposingafile-orientedAPI(withmethodssuchasread()orwrite())toanunderlyingresource.\nDependingonthewayitwascreated,afileobjectcanmediateaccesstoarealon-diskfileortoanothertypeof\nstorageorcommunicationdevice(forexamplestandardinput/output,in-memorybuffers,sockets,pipes,etc.).\nFileobjectsarealsocalledfile-likeobjectsorstreams.\nThereareactuallythreecategoriesoffileobjects: rawbinaryfiles, bufferedbinaryfilesandtextfiles. Their\ninterfaces are defined in the io module. The canonical way to create a file object is by using the open()\nfunction.\nfile-likeobject\nAsynonymforfileobject.\nfilesystemencodinganderrorhandler\nEncodinganderrorhandlerusedbyPythontodecodebytesfromtheoperatingsystemandencodeUnicodeto\ntheoperatingsystem.\nThefilesystemencodingmustguaranteetosuccessfullydecodeallbytesbelow128. Ifthefilesystemencoding\nfailstoprovidethisguarantee,APIfunctionscanraiseUnicodeError.\nThe sys.getfilesystemencoding() and sys.getfilesystemencodeerrors() functions can be\nusedtogetthefilesystemencodinganderrorhandler.\nThefilesystemencodinganderrorhandlerareconfiguredatPythonstartupbythePyConfig_Read()func-\ntion: seefilesystem_encodingandfilesystem_errorsmembersofPyConfig.\nSeealsothelocaleencoding.\nfinder\nAnobjectthattriestofindtheloaderforamodulethatisbeingimported.\nTherearetwotypesoffinder: metapathfindersforusewithsys.meta_path,andpathentryfindersforuse\nwithsys.path_hooks.\nSeefinders-and-loadersandimportlibformuchmoredetail.\nfloordivision\nMathematicaldivisionthatroundsdowntonearestinteger. Thefloordivisionoperatoris//. Forexample,the\nexpression11 // 4evaluatesto2incontrasttothe2.75returnedbyfloattruedivision. Notethat(-11)\n// 4is-3becausethatis-2.75roundeddownward. SeePEP238.\nfreethreading\nAthreadingmodelwheremultiplethreadscanrunPythonbytecodesimultaneouslywithinthesameinterpreter.\nThisisincontrasttotheglobalinterpreterlockwhichallowsonlyonethreadtoexecutePythonbytecodeata\ntime. SeePEP703.\nfreevariable\nFormally, as defined in the language execution model, a free variable is any variable used in a namespace\nwhichisnotalocalvariableinthatnamespace. Seeclosurevariableforanexample. Pragmatically,duetothe\nnameofthecodeobject.co_freevarsattribute,thetermisalsosometimesusedasasynonymforclosure\nvariable.\nfunction\nAseriesofstatementswhichreturnssomevaluetoacaller. Itcanalsobepassedzeroormoreargumentswhich\nmaybeusedintheexecutionofthebody. Seealsoparameter,method,andthefunctionsection.\nfunctionannotation\nAnannotationofafunctionparameterorreturnvalue.\n90 AppendixA. Glossary\nPythonSetupandUsage,Release3.13.3\nFunction annotations are usually used for type hints: for example, this function is expected to take two int\nargumentsandisalsoexpectedtohaveanintreturnvalue:\ndef sum_two_numbers(a: int, b: int) -> int:\nreturn a + b\nFunctionannotationsyntaxisexplainedinsectionfunction.\nSeevariableannotationandPEP484,whichdescribethisfunctionality. Alsoseeannotations-howtoforbest\npracticesonworkingwithannotations.\n__future__\nAfuturestatement,from __future__ import <feature>,directsthecompilertocompilethecurrent\nmoduleusingsyntaxorsemanticsthatwillbecomestandardinafuturereleaseofPython. The__future__\nmoduledocumentsthepossiblevaluesoffeature. Byimportingthismoduleandevaluatingitsvariables,you\ncanseewhenanewfeaturewasfirstaddedtothelanguageandwhenitwill(ordid)becomethedefault:\n>>> import __future__\n>>> __future__.division\n_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)\ngarbagecollection\nTheprocessoffreeingmemorywhenitisnotusedanymore. Pythonperformsgarbagecollectionviareference\ncountingandacyclicgarbagecollectorthatisabletodetectandbreakreferencecycles. Thegarbagecollector\ncanbecontrolledusingthegcmodule.\ngenerator\nA function which returns a generator iterator. It looks like a normal function except that it contains yield\nexpressionsforproducingaseriesofvaluesusableinafor-looporthatcanberetrievedoneatatimewiththe\nnext()function.\nUsuallyreferstoageneratorfunction,butmayrefertoageneratoriterator insomecontexts. Incaseswhere\ntheintendedmeaningisn\u2019tclear,usingthefulltermsavoidsambiguity.\ngeneratoriterator\nAnobjectcreatedbyageneratorfunction.\nEachyieldtemporarilysuspendsprocessing,rememberingtheexecutionstate(includinglocalvariablesand\npending try-statements). When the generator iterator resumes, it picks up where it left off (in contrast to\nfunctionswhichstartfreshoneveryinvocation).\ngeneratorexpression\nAnexpressionthatreturnsaniterator. Itlookslikeanormalexpressionfollowedbyaforclausedefininga\nloop variable, range, andan optional if clause. The combinedexpressiongeneratesvaluesfor an enclosing\nfunction:\n>>> sum(i*i for i in range(10)) # sum of squares 0, 1, 4, ... 81\n285\ngenericfunction\nAfunctioncomposedofmultiplefunctionsimplementingthesameoperationfordifferenttypes. Whichim-\nplementationshouldbeusedduringacallisdeterminedbythedispatchalgorithm.\nSeealsothesingledispatchglossaryentry,thefunctools.singledispatch()decorator,andPEP443.\ngenerictype\nAtypethatcanbeparameterized; typicallyacontainerclasssuchaslistordict. Usedfortypehintsand\nannotations.\nFormoredetails,seegenericaliastypes,PEP483,PEP484,PEP585,andthetypingmodule.\nGIL\nSeeglobalinterpreterlock.\n91\nPythonSetupandUsage,Release3.13.3\nglobalinterpreterlock\nThe mechanism used by the CPython interpreter to assure that only one thread executes Python bytecode at\na time. This simplifies the CPython implementation by making the object model (including critical built-in\ntypessuchasdict)implicitlysafeagainstconcurrentaccess. Lockingtheentireinterpretermakesiteasier\nfortheinterpretertobemulti-threaded,attheexpenseofmuchoftheparallelismaffordedbymulti-processor\nmachines.\nHowever,someextensionmodules,eitherstandardorthird-party,aredesignedsoastoreleasetheGILwhen\ndoingcomputationallyintensivetaskssuchascompressionorhashing. Also,theGILisalwaysreleasedwhen\ndoingI/O.\nAsofPython3.13, theGILcanbedisabledusingthe--disable-gilbuildconfiguration. Afterbuilding\nPythonwiththisoption,codemustberunwith-X gil=0oraftersettingthePYTHON_GIL=0environment\nvariable. This feature enables improved performance for multi-threaded applications and makes it easier to\nusemulti-coreCPUsefficiently. Formoredetails,seePEP703.\nhash-basedpyc\nAbytecodecachefilethatusesthehashratherthanthelast-modifiedtimeofthecorrespondingsourcefileto\ndetermineitsvalidity. Seepyc-invalidation.\nhashable\nAnobjectishashableifithasahashvaluewhichneverchangesduringitslifetime(itneedsa__hash__()\nmethod), and can be compared to other objects (it needs an __eq__() method). Hashable objects which\ncompareequalmusthavethesamehashvalue.\nHashabilitymakesanobjectusableasadictionarykeyandasetmember,becausethesedatastructuresusethe\nhashvalueinternally.\nMost of Python\u2019s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries)\narenot;immutablecontainers(suchastuplesandfrozensets)areonlyhashableiftheirelementsarehashable.\nObjectswhichareinstancesofuser-definedclassesarehashablebydefault. Theyallcompareunequal(except\nwiththemselves),andtheirhashvalueisderivedfromtheirid().\nIDLE\nAnIntegratedDevelopmentandLearningEnvironmentforPython. idleisabasiceditorandinterpreterenvi-\nronmentwhichshipswiththestandarddistributionofPython.\nimmortal\nImmortalobjectsareaCPythonimplementationdetailintroducedinPEP683.\nIfanobjectisimmortal,itsreferencecount isnevermodified,andthereforeitisneverdeallocatedwhilethe\ninterpreterisrunning. Forexample,TrueandNoneareimmortalinCPython.\nimmutable\nAnobjectwithafixedvalue. Immutableobjectsincludenumbers,stringsandtuples. Suchanobjectcannot\nbealtered. Anewobjecthastobecreatedifadifferentvaluehastobestored. Theyplayanimportantrolein\nplaceswhereaconstanthashvalueisneeded,forexampleasakeyinadictionary.\nimportpath\nAlistoflocations(orpathentries)thataresearchedbythepathbasedfinderformodulestoimport. During\nimport,thislistoflocationsusuallycomesfromsys.path,butforsubpackagesitmayalsocomefromthe\nparentpackage\u2019s__path__attribute.\nimporting\nTheprocessbywhichPythoncodeinonemoduleismadeavailabletoPythoncodeinanothermodule.\nimporter\nAnobjectthatbothfindsandloadsamodule;bothafinderandloaderobject.\ninteractive\nPythonhasaninteractiveinterpreterwhichmeansyoucanenterstatementsandexpressionsattheinterpreter\nprompt, immediately execute them and see their results. Just launch python with no arguments (possibly\nby selecting it fromyour computer\u2019s mainmenu). It isa very powerfulway to testout new ideas orinspect\nmodulesandpackages(rememberhelp(x)). Formoreoninteractivemode,seetut-interac.\n92 AppendixA. Glossary\nPythonSetupandUsage,Release3.13.3\ninterpreted\nPythonisaninterpretedlanguage,asopposedtoacompiledone,thoughthedistinctioncanbeblurrybecause\nofthepresenceofthebytecodecompiler. Thismeansthatsourcefilescanberundirectlywithoutexplicitly\ncreating an executable which is then run. Interpreted languages typically have a shorter development/debug\ncyclethancompiledones,thoughtheirprogramsgenerallyalsorunmoreslowly. Seealsointeractive.\ninterpretershutdown\nWhenaskedtoshutdown,thePythoninterpreterentersaspecialphasewhereitgraduallyreleasesallallocated\nresources, suchasmodulesandvariouscriticalinternalstructures. Italsomakesseveralcallstothegarbage\ncollector. Thiscantriggertheexecutionofcodeinuser-defineddestructorsorweakrefcallbacks. Codeexe-\ncutedduringtheshutdownphasecanencountervariousexceptionsastheresourcesitreliesonmaynotfunction\nanymore(commonexamplesarelibrarymodulesorthewarningsmachinery).\nThemainreasonforinterpretershutdownisthatthe__main__moduleorthescriptbeingrunhasfinished\nexecuting.\niterable\nAnobjectcapableofreturningitsmembersoneatatime. Examplesofiterablesincludeallsequencetypes\n(such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any\nclassesyoudefinewithan__iter__()methodorwitha__getitem__()methodthatimplementssequence\nsemantics.\nIterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(),\n\u2026). Whenaniterableobjectispassedasanargumenttothebuilt-infunctioniter(),itreturnsaniterator\nfortheobject. Thisiteratorisgoodforonepassoverthesetofvalues. Whenusingiterables,itisusuallynot\nnecessarytocalliter()ordealwithiteratorobjectsyourself. Theforstatementdoesthatautomaticallyfor\nyou,creatingatemporaryunnamedvariabletoholdtheiteratorforthedurationoftheloop. Seealsoiterator,\nsequence,andgenerator.\niterator\nAn object representing a stream of data. Repeated calls to the iterator\u2019s __next__() method (or passing\nittothebuilt-infunctionnext())returnsuccessiveitemsinthestream. Whennomoredataareavailablea\nStopIterationexceptionisraisedinstead. Atthispoint,theiteratorobjectisexhaustedandanyfurthercalls\ntoits__next__()methodjustraiseStopIterationagain. Iteratorsarerequiredtohavean__iter__()\nmethodthatreturnstheiteratorobjectitselfsoeveryiteratorisalsoiterableandmaybeusedinmostplaces\nwhereotheriterablesareaccepted. Onenotableexceptioniscodewhichattemptsmultipleiterationpasses. A\ncontainerobject(suchasalist)producesafreshnewiteratoreachtimeyoupassittotheiter()function\noruseitinaforloop. Attemptingthiswithaniteratorwilljustreturnthesameexhaustediteratorobjectused\ninthepreviousiterationpass,makingitappearlikeanemptycontainer.\nMoreinformationcanbefoundintypeiter.\nCPythonimplementationdetail: CPythondoesnotconsistentlyapplytherequirementthataniteratordefine\n__iter__(). Andalsopleasenotethatthefree-threadingCPythondoesnotguaranteethethread-safetyof\niteratoroperations.\nkeyfunction\nAkeyfunctionorcollationfunctionisacallablethatreturnsavalueusedforsortingorordering. Forexample,\nlocale.strxfrm()isusedtoproduceasortkeythatisawareoflocalespecificsortconventions.\nA number of tools in Python accept key functions to control how elements are ordered or grouped. They\ninclude min(), max(), sorted(), list.sort(), heapq.merge(), heapq.nsmallest(), heapq.\nnlargest(),anditertools.groupby().\nThere are several ways to create a key function. For example. the str.lower() method can serve as a\nkey function for case insensitive sorts. Alternatively, a key function can be built from a lambda expression\nsuchaslambda r: (r[0], r[2]). Also,operator.attrgetter(),operator.itemgetter(),and\noperator.methodcaller()arethreekeyfunctionconstructors. SeetheSortingHOWTOforexamples\nofhowtocreateandusekeyfunctions.\nkeywordargument\nSeeargument.\n93\nPythonSetupandUsage,Release3.13.3\nlambda\nAnanonymousinlinefunctionconsistingofasingleexpressionwhichisevaluatedwhenthefunctioniscalled.\nThesyntaxtocreatealambdafunctionislambda [parameters]: expression\nLBYL\nLookbeforeyouleap. Thiscodingstyleexplicitlytestsforpre-conditionsbeforemakingcallsorlookups. This\nstylecontrastswiththeEAFPapproachandischaracterizedbythepresenceofmanyifstatements.\nIn a multi-threaded environment, the LBYL approach can risk introducing a race condition between \u201cthe\nlooking\u201dand\u201ctheleaping\u201d. Forexample, thecode, if key in mapping: return mapping[key] can\nfailifanotherthreadremoveskeyfrommappingafterthetest,butbeforethelookup. Thisissuecanbesolved\nwithlocksorbyusingtheEAFPapproach.\nlexicalanalyzer\nFormalnameforthetokenizer;seetoken.\nlist\nAbuilt-inPythonsequence. Despiteitsnameitismoreakintoanarrayinotherlanguagesthantoalinkedlist\nsinceaccesstoelementsisO(1).\nlistcomprehension\nAcompactwaytoprocessallorpartoftheelementsinasequenceandreturnalistwiththeresults. result\n= ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0]generatesalistofstringscon-\ntainingevenhexnumbers(0x..) intherangefrom0to255. Theifclauseisoptional. Ifomitted,allelements\ninrange(256)areprocessed.\nloader\nAn object that loads a module. It must define the exec_module() and create_module() methods to\nimplementtheLoaderinterface. Aloaderistypicallyreturnedbyafinder. Seealso:\n\u2022 finders-and-loaders\n\u2022 importlib.abc.Loader\n\u2022 PEP302\nlocaleencoding\nOn Unix, it is the encoding of the LC_CTYPE locale. It can be set with locale.setlocale(locale.\nLC_CTYPE, new_locale).\nOnWindows,itistheANSIcodepage(ex: \"cp1252\").\nOnAndroidandVxWorks,Pythonuses\"utf-8\"asthelocaleencoding.\nlocale.getencoding()canbeusedtogetthelocaleencoding.\nSeealsothefilesystemencodinganderrorhandler.\nmagicmethod\nAninformalsynonymforspecialmethod.\nmapping\nA container object that supports arbitrary key lookups and implements the methods specified in the\ncollections.abc.Mapping or collections.abc.MutableMapping abstract base classes. Exam-\nples include dict, collections.defaultdict, collections.OrderedDict and collections.\nCounter.\nmetapathfinder\nAfinderreturnedbyasearchofsys.meta_path. Metapathfindersarerelatedto,butdifferentfrompath\nentryfinders.\nSeeimportlib.abc.MetaPathFinderforthemethodsthatmetapathfindersimplement.\nmetaclass\nTheclassofaclass. Classdefinitionscreateaclassname, aclassdictionary, andalistofbaseclasses. The\nmetaclass is responsible for taking those three arguments and creating the class. Most object oriented pro-\ngramming languages provide a default implementation. What makes Python special is that it is possible to\ncreatecustommetaclasses. Mostusersneverneedthistool,butwhentheneedarises,metaclassescanprovide\n94 AppendixA. Glossary\nPythonSetupandUsage,Release3.13.3\npowerful,elegantsolutions. Theyhavebeenusedforloggingattributeaccess,addingthread-safety,tracking\nobjectcreation,implementingsingletons,andmanyothertasks.\nMoreinformationcanbefoundinmetaclasses.\nmethod\nAfunctionwhichisdefinedinsideaclassbody. Ifcalledasanattributeofaninstanceofthatclass,themethod\nwillgettheinstanceobjectasitsfirstargument(whichisusuallycalledself). Seefunctionandnestedscope.\nmethodresolutionorder\nMethod Resolution Order is the order in which base classes are searched for a member during lookup. See\npython_2.3_mrofordetailsofthealgorithmusedbythePythoninterpretersincethe2.3release.\nmodule\nAnobjectthatservesasanorganizationalunitofPythoncode. Moduleshaveanamespacecontainingarbitrary\nPythonobjects. ModulesareloadedintoPythonbytheprocessofimporting.\nSeealsopackage.\nmodulespec\nAnamespacecontainingtheimport-relatedinformationusedtoloadamodule. Aninstanceofimportlib.\nmachinery.ModuleSpec.\nSeealsomodule-specs.\nMRO\nSeemethodresolutionorder.\nmutable\nMutableobjectscanchangetheirvaluebutkeeptheirid(). Seealsoimmutable.\nnamedtuple\nTheterm\u201cnamedtuple\u201dappliestoanytypeorclassthatinheritsfromtupleandwhoseindexableelementsare\nalsoaccessibleusingnamedattributes. Thetypeorclassmayhaveotherfeaturesaswell.\nSeveral built-in types are named tuples, including the values returned by time.localtime() and os.\nstat(). Anotherexampleissys.float_info:\n>>> sys.float_info[1] # indexed access\n1024\n>>> sys.float_info.max_exp # named field access\n1024\n>>> isinstance(sys.float_info, tuple) # kind of tuple\nTrue\nSome named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be\ncreated from a regular class definition that inherits from tuple and that defines named fields. Such a class\ncanbewrittenbyhand,oritcanbecreatedbyinheritingtyping.NamedTuple,orwiththefactoryfunction\ncollections.namedtuple(). Thelattertechniquesalsoaddsomeextramethodsthatmaynotbefound\ninhand-writtenorbuilt-innamedtuples.\nnamespace\nThe place where a variable is stored. Namespaces are implemented as dictionaries. There are the local,\nglobal and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support\nmodularitybypreventingnamingconflicts. Forinstance,thefunctionsbuiltins.openandos.open()are\ndistinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear\nwhich module implements a function. For instance, writing random.seed() or itertools.islice()\nmakesitclearthatthosefunctionsareimplementedbytherandomanditertoolsmodules,respectively.\nnamespacepackage\nA package which serves only as a container for subpackages. Namespace packages may have no physical\nrepresentation,andspecificallyarenotlikearegularpackagebecausetheyhaveno__init__.pyfile.\nNamespacepackagesallowseveralindividuallyinstallablepackagestohaveacommonparentpackage. Oth-\nerwise,itisrecommendedtousearegularpackage.\n95\nPythonSetupandUsage,Release3.13.3\nFormoreinformation,seePEP420andreference-namespace-package.\nSeealsomodule.\nnestedscope\nThe ability to refer to a variable in an enclosing definition. For instance, a function defined inside another\nfunctioncanrefertovariablesintheouterfunction. Notethatnestedscopesbydefaultworkonlyforreference\nandnotforassignment. Localvariablesbothreadandwriteintheinnermostscope. Likewise,globalvariables\nreadandwritetotheglobalnamespace. Thenonlocalallowswritingtoouterscopes.\nnew-styleclass\nOld name for the flavor of classes now used for all class objects. In earlier Python versions, only\nnew-style classes could use Python\u2019s newer, versatile features like __slots__, descriptors, properties,\n__getattribute__(),classmethods,andstaticmethods.\nobject\nAnydatawithstate(attributesorvalue)anddefinedbehavior(methods). Alsotheultimatebaseclassofany\nnew-styleclass.\noptimizedscope\nA scope where target local variable names are reliably known to the compiler when the code is compiled,\nallowingoptimizationofreadandwriteaccesstothesenames. Thelocalnamespacesforfunctions,generators,\ncoroutines,comprehensions,andgeneratorexpressionsareoptimizedinthisfashion. Note: mostinterpreter\noptimizationsareappliedtoallscopes,onlythoserelyingonaknownsetoflocalandnonlocalvariablenames\narerestrictedtooptimizedscopes.\npackage\nA Python module which can contain submodules or recursively, subpackages. Technically, a package is a\nPythonmodulewitha__path__attribute.\nSeealsoregularpackageandnamespacepackage.\nparameter\nAnamedentityinafunction(ormethod)definitionthatspecifiesanargument (orinsomecases,arguments)\nthatthefunctioncanaccept. Therearefivekindsofparameter:\n\u2022 positional-or-keyword: specifiesanargumentthatcanbepassedeitherpositionallyorasakeywordargu-\nment. Thisisthedefaultkindofparameter,forexamplefooandbarinthefollowing:\ndef func(foo, bar=None): ...\n\u2022 positional-only: specifiesanargumentthatcanbesuppliedonlybyposition. Positional-onlyparameters\ncanbedefinedbyincludinga/characterintheparameterlistofthefunctiondefinitionafterthem,for\nexampleposonly1andposonly2inthefollowing:\ndef func(posonly1, posonly2, /, positional_or_keyword): ...\n\u2022 keyword-only: specifiesanargumentthatcanbesuppliedonlybykeyword. Keyword-onlyparameters\ncanbedefinedbyincludingasinglevar-positionalparameterorbare*intheparameterlistofthefunction\ndefinitionbeforethem,forexamplekw_only1andkw_only2inthefollowing:\ndef func(arg, *, kw_only1, kw_only2): ...\n\u2022 var-positional: specifiesthatanarbitrarysequenceofpositionalargumentscanbeprovided(inaddition\ntoanypositionalargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedby\nprependingtheparameternamewith*,forexampleargsinthefollowing:\ndef func(*args, **kwargs): ...\n\u2022 var-keyword: specifiesthatarbitrarilymanykeywordargumentscanbeprovided(inadditiontoanykey-\nwordargumentsalreadyacceptedbyotherparameters). Suchaparametercanbedefinedbyprepending\ntheparameternamewith**,forexamplekwargsintheexampleabove.\n96 AppendixA. Glossary\nPythonSetupandUsage,Release3.13.3\nParameters can specify both optional and required arguments, as well as default values for some optional\narguments.\nSeealsotheargumentglossaryentry,theFAQquestiononthedifferencebetweenargumentsandparameters,\ntheinspect.Parameterclass,thefunctionsection,andPEP362.\npathentry\nAsinglelocationontheimportpathwhichthepathbasedfinderconsultstofindmodulesforimporting.\npathentryfinder\nA finder returned by a callable on sys.path_hooks (i.e. a path entry hook) which knows how to locate\nmodulesgivenapathentry.\nSeeimportlib.abc.PathEntryFinderforthemethodsthatpathentryfindersimplement.\npathentryhook\nAcallableonthesys.path_hookslistwhichreturnsapathentryfinderifitknowshowtofindmoduleson\naspecificpathentry.\npathbasedfinder\nOneofthedefaultmetapathfinderswhichsearchesanimportpathformodules.\npath-likeobject\nAn object representing a file system path. A path-like object is either a str or bytes object representing\na path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike\nprotocol can be converted to a str or bytes file system path by calling the os.fspath() function; os.\nfsdecode() and os.fsencode() can be used to guarantee a str or bytes result instead, respectively.\nIntroducedbyPEP519.\nPEP\nPythonEnhancementProposal. APEPisadesigndocumentprovidinginformationtothePythoncommunity,\nordescribinganewfeatureforPythonoritsprocessesorenvironment. PEPsshouldprovideaconcisetechnical\nspecificationandarationaleforproposedfeatures.\nPEPsareintendedtobetheprimarymechanismsforproposingmajornewfeatures,forcollectingcommunity\ninputonanissue, andfordocumentingthedesigndecisionsthathavegoneintoPython. ThePEPauthoris\nresponsibleforbuildingconsensuswithinthecommunityanddocumentingdissentingopinions.\nSeePEP1.\nportion\nA set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as\ndefinedinPEP420.\npositionalargument\nSeeargument.\nprovisionalAPI\nA provisional API is one which has been deliberately excluded from the standard library\u2019s backwards com-\npatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked\nprovisional, backwards incompatible changes (up to and including removal of the interface) may occur if\ndeemednecessarybycoredevelopers. Suchchangeswillnotbemadegratuitously\u2013theywilloccuronlyif\nseriousfundamentalflawsareuncoveredthatweremissedpriortotheinclusionoftheAPI.\nEven for provisional APIs, backwards incompatible changes are seen as a \u201csolution of last resort\u201d - every\nattemptwillstillbemadetofindabackwardscompatibleresolutiontoanyidentifiedproblems.\nThisprocessallowsthestandardlibrarytocontinuetoevolveovertime,withoutlockinginproblematicdesign\nerrorsforextendedperiodsoftime. SeePEP411formoredetails.\nprovisionalpackage\nSeeprovisionalAPI.\nPython3000\nNicknameforthePython3.xreleaseline(coinedlongagowhenthereleaseofversion3wassomethinginthe\ndistantfuture.) Thisisalsoabbreviated\u201cPy3k\u201d.\n97\nPythonSetupandUsage,Release3.13.3\nPythonic\nAnideaorpieceofcodewhichcloselyfollowsthemostcommonidiomsofthePythonlanguage,ratherthan\nimplementingcodeusingconceptscommontootherlanguages. Forexample,acommonidiominPythonis\ntoloopoverallelementsofaniterableusingaforstatement. Manyotherlanguagesdon\u2019thavethistypeof\nconstruct,sopeopleunfamiliarwithPythonsometimesuseanumericalcounterinstead:\nfor i in range(len(food)):\nprint(food[i])\nAsopposedtothecleaner,Pythonicmethod:\nfor piece in food:\nprint(piece)\nqualifiedname\nAdottednameshowingthe\u201cpath\u201dfromamodule\u2019sglobalscopetoaclass,functionormethoddefinedinthat\nmodule, as defined in PEP 3155. For top-level functions and classes, the qualified name is the same as the\nobject\u2019sname:\n>>> class C:\n... class D:\n... def meth(self):\n... pass\n...\n>>> C.__qualname__\n'C'\n>>> C.D.__qualname__\n'C.D'\n>>> C.D.meth.__qualname__\n'C.D.meth'\nWhenusedtorefertomodules,thefullyqualifiednamemeanstheentiredottedpathtothemodule,including\nanyparentpackages,e.g. email.mime.text:\n>>> import email.mime.text\n>>> email.mime.text.__name__\n'email.mime.text'\nreferencecount\nThenumberofreferencestoanobject. Whenthereferencecountofanobjectdropstozero,itisdeallocated.\nSome objects are immortal and have reference counts that are never modified, and therefore the objects are\nneverdeallocated. ReferencecountingisgenerallynotvisibletoPythoncode, butitisakeyelementofthe\nCPythonimplementation. Programmerscancallthesys.getrefcount()functiontoreturnthereference\ncountforaparticularobject.\nregularpackage\nAtraditionalpackage,suchasadirectorycontainingan__init__.pyfile.\nSeealsonamespacepackage.\nREPL\nAnacronymforthe\u201cread\u2013eval\u2013printloop\u201d,anothernamefortheinteractiveinterpretershell.\n__slots__\nAdeclarationinsideaclassthatsavesmemorybypre-declaringspaceforinstanceattributesandeliminating\ninstancedictionaries. Thoughpopular,thetechniqueissomewhattrickytogetrightandisbestreservedfor\nrarecaseswheretherearelargenumbersofinstancesinamemory-criticalapplication.\nsequence\nAn iterable which supports efficient element access using integer indices via the __getitem__() special\nmethod and defines a __len__() method that returns the length of the sequence. Some built-in sequence\n98 AppendixA. Glossary\nPythonSetupandUsage,Release3.13.3\ntypesarelist,str,tuple,andbytes. Notethatdictalsosupports__getitem__()and__len__(),\nbut is considered a mapping rather than a sequence because the lookups use arbitrary hashable keys rather\nthanintegers.\nThecollections.abc.Sequenceabstractbaseclassdefinesamuchricherinterfacethatgoesbeyondjust\n__getitem__()and__len__(),addingcount(),index(),__contains__(),and__reversed__().\nTypes that implement this expanded interface can be registered explicitly using register(). For more\ndocumentationonsequencemethodsgenerally,seeCommonSequenceOperations.\nsetcomprehension\nAcompactwaytoprocessallorpartoftheelementsinaniterableandreturnasetwiththeresults. results\n= {c for c in 'abracadabra' if c not in 'abc'}generatesthesetofstrings{'r', 'd'}. See\ncomprehensions.\nsingledispatch\nAformofgenericfunctiondispatchwheretheimplementationischosenbasedonthetypeofasingleargument.\nslice\nAnobjectusuallycontainingaportionofasequence. Asliceiscreatedusingthesubscriptnotation,[]with\ncolons between numbers when several are given, such as in variable_name[1:3:5]. The bracket (sub-\nscript)notationusessliceobjectsinternally.\nsoftdeprecated\nAsoftdeprecatedAPIshouldnotbeusedinnewcode,butitissafeforalreadyexistingcodetouseit. The\nAPIremainsdocumentedandtested,butwillnotbeenhancedfurther.\nSoftdeprecation,unlikenormaldeprecation,doesnotplanonremovingtheAPIandwillnotemitwarnings.\nSeePEP387: SoftDeprecation.\nspecialmethod\nAmethodthatiscalledimplicitlybyPythontoexecuteacertainoperationonatype,suchasaddition. Such\nmethodshavenamesstartingandendingwithdoubleunderscores. Specialmethodsaredocumentedinspe-\ncialnames.\nstatement\nAstatementispartofasuite(a\u201cblock\u201dofcode). Astatementiseitheranexpressionoroneofseveralconstructs\nwithakeyword,suchasif,whileorfor.\nstatictypechecker\nAnexternaltoolthatreadsPythoncodeandanalyzesit, lookingforissuessuchasincorrecttypes. Seealso\ntypehintsandthetypingmodule.\nstrongreference\nIn Python\u2019s C API, a strong reference is a reference to an object which is owned by the code holding the\nreference. ThestrongreferenceistakenbycallingPy_INCREF()whenthereferenceiscreatedandreleased\nwithPy_DECREF()whenthereferenceisdeleted.\nThePy_NewRef()functioncanbeusedtocreateastrongreferencetoanobject. Usually,thePy_DECREF()\nfunctionmustbecalledonthestrongreferencebeforeexitingthescopeofthestrongreference,toavoidleaking\nonereference.\nSeealsoborrowedreference.\ntextencoding\nAstringinPythonisasequenceofUnicodecodepoints(inrangeU+0000\u2013U+10FFFF).Tostoreortransfer\nastring,itneedstobeserializedasasequenceofbytes.\nSerializingastringintoasequenceofbytesisknownas\u201cencoding\u201d,andrecreatingthestringfromthesequence\nofbytesisknownas\u201cdecoding\u201d.\nThereareavarietyofdifferenttextserializationcodecs,whicharecollectivelyreferredtoas\u201ctextencodings\u201d.\ntextfile\nAfileobjectabletoreadandwritestrobjects. Often,atextfileactuallyaccessesabyte-orienteddatastream\nandhandlesthetextencodingautomatically. Examplesoftextfilesarefilesopenedintextmode('r'or'w'),\nsys.stdin,sys.stdout,andinstancesofio.StringIO.\n99\nPythonSetupandUsage,Release3.13.3\nSeealsobinaryfileforafileobjectabletoreadandwritebytes-likeobjects.\ntoken\nA small unit of source code, generated by the lexical analyzer (also called the tokenizer). Names, numbers,\nstrings,operators,newlinesandsimilararerepresentedbytokens.\nThe tokenize module exposes Python\u2019s lexical analyzer. The token module contains information on the\nvarioustypesoftokens.\ntriple-quotedstring\nAstringwhichisboundbythreeinstancesofeitheraquotationmark(\u201d)oranapostrophe(\u2018). Whiletheydon\u2019t\nprovide any functionality not available with single-quoted strings, they are useful for a number of reasons.\nTheyallowyoutoincludeunescapedsingleanddoublequoteswithinastringandtheycanspanmultiplelines\nwithouttheuseofthecontinuationcharacter,makingthemespeciallyusefulwhenwritingdocstrings.\ntype\nThetypeofaPythonobjectdetermineswhatkindofobjectitis;everyobjecthasatype. Anobject\u2019stypeis\naccessibleasits__class__attributeorcanberetrievedwithtype(obj).\ntypealias\nAsynonymforatype,createdbyassigningthetypetoanidentifier.\nTypealiasesareusefulforsimplifyingtypehints. Forexample:\ndef remove_gray_shades(\ncolors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\npass\ncouldbemademorereadablelikethis:\nColor = tuple[int, int, int]\ndef remove_gray_shades(colors: list[Color]) -> list[Color]:\npass\nSeetypingandPEP484,whichdescribethisfunctionality.\ntypehint\nAnannotationthatspecifiestheexpectedtypeforavariable,aclassattribute,orafunctionparameterorreturn\nvalue.\nTypehintsareoptionalandarenotenforcedbyPythonbuttheyareusefultostatictypecheckers. Theycan\nalsoaidIDEswithcodecompletionandrefactoring.\nType hints of global variables, class attributes, and functions, but not local variables, can be accessed using\ntyping.get_type_hints().\nSeetypingandPEP484,whichdescribethisfunctionality.\nuniversalnewlines\nAmannerofinterpretingtextstreamsinwhichallofthefollowingarerecognizedasendingaline: theUnix\nend-of-lineconvention'\\n',theWindowsconvention'\\r\\n',andtheoldMacintoshconvention'\\r'. See\nPEP278andPEP3116,aswellasbytes.splitlines()foranadditionaluse.\nvariableannotation\nAnannotationofavariableoraclassattribute.\nWhenannotatingavariableoraclassattribute,assignmentisoptional:\nclass C:\nfield: 'annotation'\nVariableannotationsareusuallyusedfortypehints: forexamplethisvariableisexpectedtotakeintvalues:\n100 AppendixA. Glossary\nPythonSetupandUsage,Release3.13.3\ncount: int = 0\nVariableannotationsyntaxisexplainedinsectionannassign.\nSeefunctionannotation,PEP484andPEP526,whichdescribethisfunctionality. Alsoseeannotations-howto\nforbestpracticesonworkingwithannotations.\nvirtualenvironment\nAcooperativelyisolatedruntimeenvironmentthatallowsPythonusersandapplicationstoinstallandupgrade\nPythondistributionpackageswithoutinterferingwiththebehaviourofotherPythonapplicationsrunningon\nthesamesystem.\nSeealsovenv.\nvirtualmachine\nAcomputerdefinedentirelyinsoftware. Python\u2019svirtualmachineexecutesthebytecodeemittedbythebyte-\ncodecompiler.\nZenofPython\nListingofPythondesignprinciplesandphilosophiesthatarehelpfulinunderstandingandusingthelanguage.\nThelistingcanbefoundbytyping\u201cimport this\u201dattheinteractiveprompt.\n101\nPythonSetupandUsage,Release3.13.3\n102 AppendixA. Glossary\nAPPENDIX\nB\nABOUT THIS DOCUMENTATION\nPython\u2019sdocumentationisgeneratedfromreStructuredTextsourcesusingSphinx,adocumentationgeneratororigi-\nnallycreatedforPythonandnowmaintainedasanindependentproject.\nDevelopment of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you\nwanttocontribute,pleasetakealookatthereporting-bugspageforinformationonhowtodoso. Newvolunteers\narealwayswelcome!\nManythanksgoto:\n\u2022 FredL.Drake,Jr.,thecreatoroftheoriginalPythondocumentationtoolsetandauthorofmuchofthecontent;\n\u2022 theDocutilsprojectforcreatingreStructuredTextandtheDocutilssuite;\n\u2022 FredrikLundhforhisAlternativePythonReferenceprojectfromwhichSphinxgotmanygoodideas.\nB.1 Contributors to the Python documentation\nManypeoplehavecontributedtothePythonlanguage,thePythonstandardlibrary,andthePythondocumentation.\nSeeMisc/ACKSinthePythonsourcedistributionforapartiallistofcontributors.\nItisonlywiththeinputandcontributionsofthePythoncommunitythatPythonhassuchwonderfuldocumentation\n\u2013ThankYou!\n103\nPythonSetupandUsage,Release3.13.3\n104 AppendixB. Aboutthisdocumentation\nAPPENDIX\nC\nHISTORY AND LICENSE\nC.1 History of the software\nPythonwascreatedintheearly1990sbyGuidovanRossumatStichtingMathematischCentrum(CWI,seehttps:\n//www.cwi.nl)intheNetherlandsasasuccessorofalanguagecalledABC.GuidoremainsPython\u2019sprincipalauthor,\nalthoughitincludesmanycontributionsfromothers.\nIn1995,GuidocontinuedhisworkonPythonattheCorporationforNationalResearchInitiatives(CNRI,seehttps:\n//www.cnri.reston.va.us)inReston,Virginiawherehereleasedseveralversionsofthesoftware.\nInMay2000,GuidoandthePythoncoredevelopmentteammovedtoBeOpen.comtoformtheBeOpenPythonLabs\nteam. InOctoberofthesameyear,thePythonLabsteammovedtoDigitalCreations,whichbecameZopeCorpo-\nration. In2001,thePythonSoftwareFoundation(PSF,seehttps://www.python.org/psf/)wasformed,anon-profit\norganization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring\nmemberofthePSF.\nAllPythonreleasesareOpenSource(seehttps://opensource.orgfortheOpenSourceDefinition). Historically,most,\nbutnotall,PythonreleaseshavealsobeenGPL-compatible;thetablebelowsummarizesthevariousreleases.\nRelease Derivedfrom Year Owner GPL-compatible? (1)\n0.9.0thru1.2 n/a 1991-1995 CWI yes\n1.3thru1.5.2 1.2 1995-1999 CNRI yes\n1.6 1.5.2 2000 CNRI no\n2.0 1.6 2000 BeOpen.com no\n1.6.1 1.6 2001 CNRI yes(2)\n2.1 2.0+1.6.1 2001 PSF no\n2.0.1 2.0+1.6.1 2001 PSF yes\n2.1.1 2.1+2.0.1 2001 PSF yes\n2.1.2 2.1.1 2002 PSF yes\n2.1.3 2.1.2 2002 PSF yes\n2.2andabove 2.1.1 2001-now PSF yes\n(cid:174) Note\n(1) GPL-compatibledoesn\u2019tmeanthatwe\u2019redistributingPythonundertheGPL.AllPythonlicenses,unlike\nthe GPL, let you distribute a modified version without making your changes open source. The GPL-\ncompatible licenses make it possible to combine Python with other software that is released under the\nGPL;theothersdon\u2019t.\n(2) AccordingtoRichardStallman,1.6.1isnotGPL-compatible,becauseitslicensehasachoiceoflawclause.\nAccordingtoCNRI,however, Stallman\u2019slawyerhastoldCNRI\u2019slawyerthat1.6.1is\u201cnotincompatible\u201d\nwiththeGPL.\nThankstothemanyoutsidevolunteerswhohaveworkedunderGuido\u2019sdirectiontomakethesereleasespossible.\n105\nPythonSetupandUsage,Release3.13.3\nC.2 Terms and conditions for accessing or otherwise using Python\nPythonsoftwareanddocumentationarelicensedunderthePythonSoftwareFoundationLicenseVersion2.\nStartingwithPython3.8.6,examples,recipes,andothercodeinthedocumentationareduallicensedunderthePSF\nLicenseVersion2andtheZero-ClauseBSDlicense.\nSomesoftwareincorporatedintoPythonisunderdifferentlicenses. Thelicensesarelistedwithcodefallingunder\nthatlicense. SeeLicensesandAcknowledgementsforIncorporatedSoftwareforanincompletelistoftheselicenses.\nC.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\nthe Individual or Organization (\"Licensee\") accessing and otherwise using this\nsoftware (\"Python\") in source or binary form and its associated documentation.\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative\nversion, provided, however, that PSF's License Agreement and PSF's notice of\ncopyright, i.e., \"Copyright \u00a9 2001-2024 Python Software Foundation; All Rights\nReserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python or any part thereof, and wants to make the\nderivative work available to others as provided herein, then Licensee hereby\nagrees to include in any such work a brief summary of the changes made to\u2423\n,\u2192Python.\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\nPSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. Nothing in this License Agreement shall be deemed to create any relationship\nof agency, partnership, or joint venture between PSF and Licensee. This License\nAgreement does not grant permission to use PSF trademarks or trade name in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party.\n8. By copying, installing or otherwise using Python, Licensee agrees\nto be bound by the terms and conditions of this License Agreement.\n106 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\nC.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nBEOPENPYTHONOPENSOURCELICENSEAGREEMENTVERSION1\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n(\"Licensee\") accessing and otherwise using this software in source or binary\nform and its associated documentation (\"the Software\").\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\nBeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\nto reproduce, analyze, test, perform and/or display publicly, prepare derivative\nworks, distribute, and otherwise use the Software alone or in any derivative\nversion, provided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\nBEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF\nEXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\nWARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\nUSE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\nMODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\nADVISED OF THE POSSIBILITY THEREOF.\n5. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n6. This License Agreement shall be governed by and interpreted in all respects\nby the law of the State of California, excluding conflict of law provisions.\nNothing in this License Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between BeOpen and Licensee. This License\nAgreement does not grant permission to use BeOpen trademarks or trade names in a\ntrademark sense to endorse or promote products or services of Licensee, or any\nthird party. As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the permissions\ngranted on that web page.\n7. By copying, installing or otherwise using the software, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\nC.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n1. This LICENSE AGREEMENT is between the Corporation for National Research\nInitiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n(\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using Python 1.6.1 software in source or binary form and its\nassociated documentation.\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python 1.6.1 alone or in any derivative version,\nprovided, however, that CNRI's License Agreement and CNRI's notice of copyright,\ni.e., \"Copyright \u00a9 1995-2001 Corporation for National Research Initiatives; All\n(continuesonnextpage)\nC.2. TermsandconditionsforaccessingorotherwiseusingPython 107\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\nRights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\nprepared by Licensee. Alternately, in lieu of CNRI's License Agreement,\nLicensee may substitute the following text (omitting the quotes): \"Python 1.6.1\nis made available subject to the terms and conditions in CNRI's License\nAgreement. This Agreement together with Python 1.6.1 may be located on the\ninternet using the following unique, persistent identifier (known as a handle):\n1895.22/1013. This Agreement may also be obtained from a proxy server on the\ninternet using the following URL: http://hdl.handle.net/1895.22/1013\".\n3. In the event Licensee prepares a derivative work that is based on or\nincorporates Python 1.6.1 or any part thereof, and wants to make the derivative\nwork available to others as provided herein, then Licensee hereby agrees to\ninclude in any such work a brief summary of the changes made to Python 1.6.1.\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI\nMAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE,\nBUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\nOF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\nPYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\nANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\nMODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\nTHEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n6. This License Agreement will automatically terminate upon a material breach of\nits terms and conditions.\n7. This License Agreement shall be governed by the federal intellectual property\nlaw of the United States, including without limitation the federal copyright\nlaw, and, to the extent such U.S. federal law does not apply, by the law of the\nCommonwealth of Virginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based on Python\n1.6.1 that incorporate non-separable material that was previously distributed\nunder the GNU General Public License (GPL), the law of the Commonwealth of\nVirginia shall govern this License Agreement only as to issues arising under or\nwith respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in\nthis License Agreement shall be deemed to create any relationship of agency,\npartnership, or joint venture between CNRI and Licensee. This License Agreement\ndoes not grant permission to use CNRI trademarks or trade name in a trademark\nsense to endorse or promote products or services of Licensee, or any third\nparty.\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\nor otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\nconditions of this License Agreement.\nC.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nCopyright \u00a9 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands. All rights reserved.\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\n(continuesonnextpage)\n108 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\nC.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTA-\nTION\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3 Licenses and Acknowledgements for Incorporated Software\nThissectionisanincomplete,butgrowinglistoflicensesandacknowledgementsforthird-partysoftwareincorporated\ninthePythondistribution.\nC.3.1 Mersenne Twister\nThe_randomCextensionunderlyingtherandommoduleincludescodebasedonadownloadfromhttp://www.math.\nsci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. Thefollowingaretheverbatimcommentsfromthe\noriginalcode:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 109\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. The names of its contributors may not be used to endorse or promote\nproducts derived from this software without specific prior written\npermission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\nC.3.2 Sockets\nThesocketmoduleusesthefunctions,getaddrinfo(),andgetnameinfo(),whicharecodedinseparatesource\nfilesfromtheWIDEProject,https://www.wide.ad.jp/.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n110 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\nC.3.3 Asynchronous socket services\nThetest.support.asynchatandtest.support.asyncoremodulescontainthefollowingnotice:\nCopyright 1996 by Sam Rushing\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nC.3.4 Cookie management\nThehttp.cookiesmodulecontainsthefollowingnotice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\nC.3.5 Execution tracing\nThetracemodulecontainsthefollowingnotice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr... reserved and offered to the public under the terms of the\nPython 2.2 license.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 111\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\nC.3.6 UUencode and UUdecode functions\nTheuucodeccontainsthefollowingnotice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\nAll Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\nbetween ascii and binary. This results in a 1000-fold speedup. The C\nversion is still 5 times faster, though.\n- Arguments more compliant with Python standard\n112 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\nC.3.7 XML Remote Procedure Calls\nThexmlrpc.clientmodulecontainsthefollowingnotice:\nThe XML-RPC client interface is\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\nC.3.8 test_epoll\nThetest.test_epollmodulecontainsthefollowingnotice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 113\nPythonSetupandUsage,Release3.13.3\nC.3.9 Select kqueue\nTheselectmodulecontainsthefollowingnoticeforthekqueueinterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.10 SipHash24\nThefilePython/pyhash.ccontainsMarekMajkowski\u2019implementationofDanBernstein\u2019sSipHash24algorithm.\nItcontainsthefollowingnote:\n<MIT License>\nCopyright (c) 2013 Marek Majkowski <marek@popcount.org>\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\nOriginal location:\nhttps://github.com/majek/csiphash/\nSolution inspired by code from:\nSamuel Neves (supercop/crypto_auth/siphash24/little)\ndjb (supercop/crypto_auth/siphash24/little2)\nJean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\n114 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\nC.3.11 strtod and dtoa\nThefilePython/dtoa.c,whichsuppliesCfunctionsdtoaandstrtodforconversionofCdoublestoandfromstrings,\nisderivedfromthefileofthesamenamebyDavidM.Gay, currentlyavailablefromhttps://web.archive.org/web/\n20220517033456/http://www.netlib.org/fp/dtoa.c. The original file, as retrieved on March 16, 2009, contains the\nfollowingcopyrightandlicensingnotice:\n/****************************************************************\n*\n* The author of this software is David M. Gay.\n*\n* Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n*\n* Permission to use, copy, modify, and distribute this software for any\n* purpose without fee is hereby granted, provided that this entire notice\n* is included in all copies of any software which is or includes a copy\n* or modification of this software and in all copies of the supporting\n* documentation for such software.\n*\n* THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n* WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n* REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n* OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n*\n***************************************************************/\nC.3.12 OpenSSL\nThemoduleshashlib,posixandsslusetheOpenSSLlibraryforaddedperformanceifmadeavailablebythe\noperatingsystem. Additionally,theWindowsandmacOSinstallersforPythonmayincludeacopyoftheOpenSSL\nlibraries,soweincludeacopyoftheOpenSSLlicensehere. FortheOpenSSL3.0release,andlaterreleasesderived\nfromthat,theApacheLicensev2applies:\nApache License\nVersion 2.0, January 2004\nhttps://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n1. Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 115\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\n(continuesonnextpage)\n116 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 117\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nC.3.13 expat\nThe pyexpat extension is built using an included copy of the expat sources unless the build is configured\n--with-system-expat:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\nand Clark Cooper\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n(continuesonnextpage)\n118 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.14 libffi\nThe_ctypesCextensionunderlyingthectypesmoduleisbuiltusinganincludedcopyofthelibffisourcesunless\nthebuildisconfigured--with-system-libffi:\nCopyright (c) 1996-2008 Red Hat, Inc and others.\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\nC.3.15 zlib\nThezlibextensionisbuiltusinganincludedcopyofthezlibsourcesifthezlibversionfoundonthesystemistoo\noldtobeusedforthebuild:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\n(continuesonnextpage)\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 119\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\nappreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\nmisrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\nJean-loup Gailly Mark Adler\njloup@gzip.org madler@alumni.caltech.edu\nC.3.16 cfuhash\nTheimplementationofthehashtableusedbythetracemallocisbasedonthecfuhashproject:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\nThis code is released under the BSD license:\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.\n* Neither the name of the author nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\nC.3.17 libmpdec\nThe_decimalCextensionunderlyingthedecimalmoduleisbuiltusinganincludedcopyofthelibmpdeclibrary\nunlessthebuildisconfigured--with-system-libmpdec:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\nRedistribution and use in source and binary forms, with or without\n(continuesonnextpage)\n120 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\nC.3.18 W3C C14N test suite\nTheC14N2.0testsuiteinthetestpackage(Lib/test/xmltestdata/c14n-20/)wasretrievedfromtheW3C\nwebsiteathttps://www.w3.org/TR/xml-c14n2-testcases/andisdistributedunderthe3-clauseBSDlicense:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n* Redistributions of works must retain the original copyright notice,\nthis list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\nused to endorse or promote products derived from this work without\nspecific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 121\nPythonSetupandUsage,Release3.13.3\nC.3.19 mimalloc\nMITLicense:\nCopyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nC.3.20 asyncio\nPartsoftheasynciomoduleareincorporatedfromuvloop0.16,whichisdistributedundertheMITlicense:\nCopyright (c) 2015-2021 MagicStack Inc. http://magic.io\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nC.3.21 Global Unbounded Sequences (GUS)\nThe file Python/qsbr.c is adapted from FreeBSD\u2019s \u201cGlobal Unbounded Sequences\u201d safe memory reclamation\nschemeinsubr_smr.c. Thefileisdistributedunderthe2-ClauseBSDLicense:\nCopyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\n(continuesonnextpage)\n122 AppendixC. HistoryandLicense\nPythonSetupandUsage,Release3.13.3\n(continuedfrompreviouspage)\nare met:\n1. Redistributions of source code must retain the above copyright\nnotice unmodified, this list of conditions, and the following\ndisclaimer.\n2. Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nC.3. LicensesandAcknowledgementsforIncorporatedSoftware 123\nPythonSetupandUsage,Release3.13.3\n124 AppendixC. HistoryandLicense\nAPPENDIX\nD\nCOPYRIGHT\nPythonandthisdocumentationis:\nCopyright\u00a92001-2024PythonSoftwareFoundation. Allrightsreserved.\nCopyright\u00a92000BeOpen.com. Allrightsreserved.\nCopyright\u00a91995-2000CorporationforNationalResearchInitiatives. Allrightsreserved.\nCopyright\u00a91991-1995StichtingMathematischCentrum. Allrightsreserved.\nSeeHistoryandLicenseforcompletelicenseandpermissionsinformation.\n125\nPythonSetupandUsage,Release3.13.3\n126 AppendixD. Copyright\nINDEX\nNon-alphabetical\ncallback,87\n...,85 CC\ncommand line option,27\n-?\ncommand line option,5\nC-contiguous,88\n%APPDATA%,49\nCFLAGS,30,39,40\n>>>,85 command line option,27\n__future__,91\nCFLAGS_NODIST,39,40\n__slots__,98 --check-hash-based-pycs\ncommand line option,6\nA class,87\nclass variable,87\nabstract base class,85\nclosure variable,87\nannotation,85\ncommand line option\nargument,85\n-?,5\nasynchronous context manager,86\n-B,6\nasynchronous generator,86\n-b,6\nasynchronous generator iterator,86\nBOLT_APPLY_FLAGS,30\nasynchronous iterable,86\nBOLT_INSTRUMENT_FLAGS,31\nasynchronous iterator,86\n--build,36\nattribute,86\nBZIP2_CFLAGS,27\nawaitable,86\nBZIP2_LIBS,27\nB -c,3\nCC,27\n-B\nCFLAGS,27\ncommand line option,6\n--check-hash-based-pycs,6\n-b\nCONFIG_SITE,36\ncommand line option,6\nCPP,27\nBDFL,86\nCPPFLAGS,27\nbinary file,86\nCURSES_CFLAGS,27\nBOLT_APPLY_FLAGS\nCURSES_LIBS,28\ncommand line option,30\n-d,6\nBOLT_INSTRUMENT_FLAGS\n--disable-gil,26\ncommand line option,31\n--disable-ipv6,24\nborrowed reference,86\n--disable-test-modules,29\n--build\n-E,6\ncommand line option,36\n--enable-big-digits,24\nbytecode,87\n--enable-bolt,30\nbytes-like object,87\n--enable-experimental-jit,27\nBZIP2_CFLAGS\n--enable-framework,35\ncommand line option,27\n--enable-loadable-sqlite-extensions,\nBZIP2_LIBS\n24\ncommand line option,27\n--enable-optimizations,30\nC --enable-profiling,31\n--enable-pystats,25\n-c\n--enable-shared,33\ncommand line option,3\n--enable-universalsdk,35\ncallable,87\n127\nPythonSetupandUsage,Release3.13.3\n--enable-wasm-dynamic-linking,29 --with-build-python,36\n--enable-wasm-pthreads,29 --with-builtin-hashlib-hashes,34\n--exec-prefix,29 --with-computed-gotos,31\nGDBM_CFLAGS,28 --with-dbmliborder,25\nGDBM_LIBS,28 --with-dtrace,32\n-h,5 --with-emscripten-target,29\n--help,5 --with-ensurepip,29\n--help-all,5 --with-framework-name,35\n--help-env,5 --with-hash-algorithm,34\n--help-xoptions,5 --with-libc,33\n--host,36 --with-libm,33\nHOSTRUNNER,36 --with-libs,33\n-I,6 --with-lto,30\n-i,6 --with-memory-sanitizer,32\n-J,10 --with-openssl,34\nLDFLAGS,27 --with-openssl-rpath,34\nLIBB2_CFLAGS,28 --without-c-locale-coercion,25\nLIBB2_LIBS,28 --without-decimal-contextvar,24\nLIBEDIT_CFLAGS,28 --without-doc-strings,31\nLIBEDIT_LIBS,28 --without-freelists,25\nLIBFFI_CFLAGS,28 --without-mimalloc,31\nLIBFFI_LIBS,28 --without-pymalloc,31\nLIBLZMA_CFLAGS,28 --without-readline,33\nLIBLZMA_LIBS,28 --without-static-libpython,33\nLIBMPDEC_CFLAGS,28 --with-pkg-config,25\nLIBMPDEC_LIBS,28 --with-platlibdir,25\nLIBREADLINE_CFLAGS,28 --with-pydebug,32\nLIBREADLINE_LIBS,28 --with-readline,33\nLIBS,27 --with-ssl-default-suites,34\nLIBSQLITE3_CFLAGS,28 --with-strict-overflow,31\nLIBSQLITE3_LIBS,28 --with-suffix,24\nLIBUUID_CFLAGS,28 --with-system-expat,33\nLIBUUID_LIBS,28 --with-system-libmpdec,33\n-m,3 --with-thread-sanitizer,33\nMACHDEP,27 --with-trace-refs,32\n-O,6 --with-tzpath,24\n-OO,6 --with-undefined-behavior-sanitizer,\n-P,7 32\nPANEL_CFLAGS,28 --with-universal-archs,35\nPANEL_LIBS,28 --with-valgrind,32\nPKG_CONFIG,27 --with-wheel-pkg-dir,25\nPKG_CONFIG_LIBDIR,27 -X,8\nPKG_CONFIG_PATH,27 -x,8\n--prefix,29 ZLIB_CFLAGS,29\n-q,7 ZLIB_LIBS,29\n-R,7 complex number,88\n-S,7 CONFIG_SITE\n-s,7 command line option,36\nTCLTK_CFLAGS,28 context,88\nTCLTK_LIBS,29 context management protocol,88\n-u,7 context manager,88\n-V,5 context variable,88\n-v,7 contiguous,88\n--version,5 coroutine,88\n-W,8 coroutine function,88\n--with-address-sanitizer,32 CPP\n--with-app-store-compliance,35 command line option,27\n--with-assertions,32 CPPFLAGS,38,39,41\n128 Index\nPythonSetupandUsage,Release3.13.3\ncommand line option,27 CC,39\nCPython,88 CCSHARED,40\ncurrent context,88 CFLAGS,30,39,40\nCURSES_CFLAGS CFLAGS_ALIASING,39\ncommand line option,27 CFLAGS_NODIST,39,40\nCURSES_LIBS CFLAGSFORSHARED,40\ncommand line option,28 COMPILEALL_OPTS,39\nCONFIGURE_CFLAGS,39\nD\nCONFIGURE_CFLAGS_NODIST,39\n-d CONFIGURE_CPPFLAGS,38\ncommand line option,6 CONFIGURE_LDFLAGS,40\ndecorator,88 CONFIGURE_LDFLAGS_NODIST,41\ndescriptor,89 CPPFLAGS,38,39,41\ndictionary,89 CXX,39\ndictionary comprehension,89 EXTRA_CFLAGS,39\ndictionary view,89 LDFLAGS,3941\n--disable-gil LDFLAGS_NODIST,40,41\ncommand line option,26 LDSHARED,41\n--disable-ipv6 LIBS,41\ncommand line option,24 LINKCC,40\n--disable-test-modules OPT,32,39\ncommand line option,29 PATH,11,21,44,46,5254,56\ndocstring,89 PATHEXT,46\nduck-typing,89 PROFILE_TASK,30\nPURIFY,40\nE PY_BUILTIN_MODULE_CFLAGS,40\nPY_CFLAGS,40\n-E\nPY_CFLAGS_NODIST,40\ncommand line option,6\nPY_CORE_CFLAGS,40\nEAFP,89\nPY_CORE_LDFLAGS,41\n--enable-big-digits\nPY_CPPFLAGS,39\ncommand line option,24\nPY_LDFLAGS,41\n--enable-bolt\nPY_LDFLAGS_NODIST,41\ncommand line option,30\nPY_PYTHON,57\n--enable-experimental-jit\nPY_STDMODULE_CFLAGS,40\ncommand line option,27\nPYLAUNCHER_ALLOW_INSTALL,58\n--enable-framework\nPYLAUNCHER_ALWAYS_INSTALL,58\ncommand line option,35\nPYLAUNCHER_DEBUG,58\n--enable-loadable-sqlite-extensions\nPYLAUNCHER_DRYRUN,58\ncommand line option,24\nPYLAUNCHER_NO_SEARCH_PATH,56\n--enable-optimizations\nPYTHON_BASIC_REPL,16\ncommand line option,30\nPYTHON_COLORS,10,16\n--enable-profiling\nPYTHON_CPU_COUNT,10,16\ncommand line option,31\nPYTHON_FROZEN_MODULES,9,16\n--enable-pystats\nPYTHON_GIL,10,16,92\ncommand line option,25\nPYTHON_HISTORY,16\n--enable-shared\nPYTHON_PERF_JIT_SUPPORT,10,15\ncommand line option,33\nPYTHON_PRESITE,10,17\n--enable-universalsdk\nPYTHONASYNCIODEBUG,13\ncommand line option,35\nPYTHONBREAKPOINT,11\n--enable-wasm-dynamic-linking\nPYTHONCASEOK,12\ncommand line option,29\nPYTHONCOERCECLOCALE,14,25\n--enable-wasm-pthreads\nPYTHONDEBUG,6,11,31\ncommand line option,29\nPYTHONDEVMODE,9,15\nenvironment variable\nPYTHONDONTWRITEBYTECODE,6,12\n%APPDATA%,49\nPYTHONDUMPREFS,16,32\nBASECFLAGS,39\nPYTHONDUMPREFSFILE,16\nBASECPPFLAGS,39\nPYTHONEXECUTABLE,13\nBLDSHARED,41\nIndex 129\nPythonSetupandUsage,Release3.13.3\nPYTHONFAULTHANDLER,8,13 global interpreter lock,92\nPYTHONHASHSEED,7,12\nH\nPYTHONHOME,6,10,11,59\nPYTHONINSPECT,6,11 -h\nPYTHONINTMAXSTRDIGITS,9,12 command line option,5\nPYTHONIOENCODING,12,15 hash-based pyc,92\nPYTHONLEGACYWINDOWSFSENCODING,14 hashable,92\nPYTHONLEGACYWINDOWSSTDIO,12,14 --help\nPYTHONMALLOC,13,14,31 command line option,5\nPYTHONMALLOCSTATS,14 --help-all\nPYTHONNODEBUGRANGES,9,15 command line option,5\nPYTHONNOUSERSITE,7,12 --help-env\nPYTHONOPTIMIZE,6,11 command line option,5\nPYTHONPATH,6,11,52,58,59 --help-xoptions\nPYTHONPERFSUPPORT,9,15 command line option,5\nPYTHONPLATLIBDIR,11 --host\nPYTHONPROFILEIMPORTTIME,9,13 command line option,36\nPYTHONPYCACHEPREFIX,9,12 HOSTRUNNER\nPYTHONSAFEPATH,7,11 command line option,36\nPYTHONSTARTUP,6,11,12\nI\nPYTHONTRACEMALLOC,9,13\nPYTHONUNBUFFERED,7,12\n-I\nPYTHONUSERBASE,12\ncommand line option,6\nPYTHONUTF8,9,15,53\n-i\nPYTHONVERBOSE,8,12\ncommand line option,6\nPYTHONWARNDEFAULTENCODING,9,15\nIDLE,92\nPYTHONWARNINGS,8,13\nimmortal,92\nTEMP,49\nimmutable,92\n--exec-prefix import path,92\ncommand line option,29 importer,92\nexpression,89\nimporting,92\nextension module,90 interactive,92\nF\ninterpreted,93\ninterpreter shutdown,93\nf-string,90 iterable,93\nfile object,90 iterator,93\nfile-like object,90\nJ\nfilesystem encoding and error handler,90\nfinder,90\n-J\nfloor division,90 command line option,10\nFortran contiguous,88\nfree threading,90 K\nfree variable,90\nkey function,93\nfunction,90\nkeyword argument,93\nfunction annotation,90\nL\nG\nlambda,94\ngarbage collection,91 LBYL,94\nGDBM_CFLAGS LDFLAGS,3941\ncommand line option,28 command line option,27\nGDBM_LIBS LDFLAGS_NODIST,40,41\ncommand line option,28 lexical analyzer,94\ngenerator,91\nLIBB2_CFLAGS\ngenerator expression,91 command line option,28\ngenerator iterator,91\nLIBB2_LIBS\ngeneric function,91 command line option,28\ngeneric type,91\nLIBEDIT_CFLAGS\nGIL,91\ncommand line option,28\n130 Index\nPythonSetupandUsage,Release3.13.3\nLIBEDIT_LIBS new-style class,96\ncommand line option,28\nO\nLIBFFI_CFLAGS\ncommand line option,28 -O\nLIBFFI_LIBS command line option,6\ncommand line option,28 object,96\nLIBLZMA_CFLAGS -OO\ncommand line option,28 command line option,6\nLIBLZMA_LIBS OPT,32\ncommand line option,28 optimized scope,96\nLIBMPDEC_CFLAGS\ncommand line option,28 P\nLIBMPDEC_LIBS\n-P\ncommand line option,28\ncommand line option,7\nLIBREADLINE_CFLAGS\npackage,96\ncommand line option,28\nPANEL_CFLAGS\nLIBREADLINE_LIBS\ncommand line option,28\ncommand line option,28\nPANEL_LIBS\nLIBS\ncommand line option,28\ncommand line option,27\nparameter,96\nLIBSQLITE3_CFLAGS\nPATH,11,21,44,46,5254,56\ncommand line option,28\npath based finder,97\nLIBSQLITE3_LIBS\npath entry,97\ncommand line option,28\npath entry finder,97\nLIBUUID_CFLAGS\npath entry hook,97\ncommand line option,28\npath-like object,97\nLIBUUID_LIBS\nPATHEXT,46\ncommand line option,28\nPEP,97\nlist,94\nPKG_CONFIG\nlist comprehension,94\ncommand line option,27\nloader,94\nPKG_CONFIG_LIBDIR\nlocale encoding,94\ncommand line option,27\nM PKG_CONFIG_PATH\ncommand line option,27\n-m portion,97\ncommand line option,3 positional argument,97\nMACHDEP --prefix\ncommand line option,27 command line option,29\nmagic PROFILE_TASK,30\nmethod,94 provisional API,97\nmagic method,94 provisional package,97\nmapping,94 PY_PYTHON,57\nmeta path finder,94 PYLAUNCHER_ALLOW_INSTALL,58\nmetaclass,94 PYLAUNCHER_ALWAYS_INSTALL,58\nmethod,95 PYLAUNCHER_DEBUG,58\nmagic,94 PYLAUNCHER_DRYRUN,58\nspecial,99 PYLAUNCHER_NO_SEARCH_PATH,56\nmethod resolution order,95 Python 3000,97\nmodule,95 Python Enhancement Proposals\nmodule spec,95 PEP 1,97\nMRO,95 PEP 7,23\nmutable,95 PEP 8,83\nPEP 11,23,43,60\nN\nPEP 238,90\nnamed tuple,95 PEP 278,100\nnamespace,95 PEP 302,94\nnamespace package,95 PEP 338,4\nnested scope,96 PEP 343,88\nIndex 131\nPythonSetupandUsage,Release3.13.3\nPEP 362,86,97 Q\nPEP 370,7,12,13\n-q\nPEP 397,54 command line option,7\nPEP 411,97 qualified name,98\nPEP 420,96,97\nPEP 443,91 R\nPEP 483,91\n-R\nPEP 484,85,91,100,101\ncommand line option,7\nPEP 488,6,7\nreference count,98\nPEP 492,86,88\nregular package,98\nPEP 498,90\nREPL,98\nPEP 514,54\nPEP 519,97 S\nPEP 525,86\n-S\nPEP 526,85,101\ncommand line option,7\nPEP 528,53\n-s\nPEP 529,14,53\ncommand line option,7\nPEP 538,15,25\nsequence,98\nPEP 585,91\nset comprehension,99\nPEP 683,92\nsingle dispatch,99\nPEP 703,48,70,90,92\nslice,99\nPEP 3116,100\nsoft deprecated,99\nPEP 3155,98\nspecial\nPYTHON_COLORS,10\nmethod,99\nPYTHON_CPU_COUNT,10\nspecial method,99\nPYTHON_FROZEN_MODULES,9\nstatement,99\nPYTHON_GIL,10,92\nstatic type checker,99\nPYTHON_PERF_JIT_SUPPORT,10\nstrong reference,99\nPYTHON_PRESITE,10\nPYTHONCOERCECLOCALE,25\nT\nPYTHONDEBUG,6,31\nPYTHONDEVMODE,9 TCLTK_CFLAGS\nPYTHONDONTWRITEBYTECODE,6 command line option,28\nPYTHONDUMPREFS,32 TCLTK_LIBS\nPYTHONFAULTHANDLER,8 command line option,29\nPYTHONHASHSEED,7,12 TEMP,49\nPYTHONHOME,6,10,11,59 text encoding,99\nPythonic,98 text file,99\nPYTHONINSPECT,6 token,100\nPYTHONINTMAXSTRDIGITS,9 triple-quoted string,100\nPYTHONIOENCODING,15 type,100\nPYTHONLEGACYWINDOWSSTDIO,12 type alias,100\nPYTHONMALLOC,14,31 type hint,100\nPYTHONNODEBUGRANGES,9\nU\nPYTHONNOUSERSITE,7\nPYTHONOPTIMIZE,6 -u\nPYTHONPATH,6,11,52,58,59 command line option,7\nPYTHONPERFSUPPORT,9 universal newlines,100\nPYTHONPROFILEIMPORTTIME,9\nV\nPYTHONPYCACHEPREFIX,9\nPYTHONSAFEPATH,7 -V\nPYTHONSTARTUP,6,12 command line option,5\nPYTHONTRACEMALLOC,9 -v\nPYTHONUNBUFFERED,7 command line option,7\nPYTHONUTF8,9,15,53 variable annotation,100\nPYTHONVERBOSE,8 --version\nPYTHONWARNDEFAULTENCODING,9 command line option,5\nPYTHONWARNINGS,8 virtual environment,101\n132 Index\nPythonSetupandUsage,Release3.13.3\nvirtual machine,101 command line option,33\n--with-pkg-config\nW\ncommand line option,25\n-W --with-platlibdir\ncommand line option,8 command line option,25\n--with-address-sanitizer --with-pydebug\ncommand line option,32 command line option,32\n--with-app-store-compliance --with-readline\ncommand line option,35 command line option,33\n--with-assertions --with-ssl-default-suites\ncommand line option,32 command line option,34\n--with-build-python --with-strict-overflow\ncommand line option,36 command line option,31\n--with-builtin-hashlib-hashes --with-suffix\ncommand line option,34 command line option,24\n--with-computed-gotos --with-system-expat\ncommand line option,31 command line option,33\n--with-dbmliborder --with-system-libmpdec\ncommand line option,25 command line option,33\n--with-dtrace --with-thread-sanitizer\ncommand line option,32 command line option,33\n--with-emscripten-target --with-trace-refs\ncommand line option,29 command line option,32\n--with-ensurepip --with-tzpath\ncommand line option,29 command line option,24\n--with-framework-name --with-undefined-behavior-sanitizer\ncommand line option,35 command line option,32\n--with-hash-algorithm --with-universal-archs\ncommand line option,34 command line option,35\n--with-libc --with-valgrind\ncommand line option,33 command line option,32\n--with-libm --with-wheel-pkg-dir\ncommand line option,33 command line option,25\n--with-libs\nX\ncommand line option,33\n--with-lto -X\ncommand line option,30 command line option,8\n--with-memory-sanitizer -x\ncommand line option,32 command line option,8\n--with-openssl\nZ\ncommand line option,34\n--with-openssl-rpath Zen of Python,101\ncommand line option,34\nZLIB_CFLAGS\n--without-c-locale-coercion command line option,29\ncommand line option,25\nZLIB_LIBS\n--without-decimal-contextvar command line option,29\ncommand line option,24\n--without-doc-strings\ncommand line option,31\n--without-freelists\ncommand line option,25\n--without-mimalloc\ncommand line option,31\n--without-pymalloc\ncommand line option,31\n--without-readline\ncommand line option,33\n--without-static-libpython\nIndex 133\n",
  "context": "C.3.3 Asynchronoussocketservices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\nC.3.4 Cookiemanagement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\nC.3.5 Executiontracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111",
  "source_file": "resources\\Year 3\\Python\\using.pdf",
  "line_numbers": [
    139,
    5233
  ]
}