{
  "title": "howto-argparse",
  "language": "cpp",
  "topics": [
    "fundamentals",
    "networking",
    "algorithms",
    "data_structures",
    "database"
  ],
  "purpose": "The standard library includes two other libraries directly related to command-line parameter processing: the lowerleveloptparsemodule(whichmayrequiremorecodetoconfigureforagivenapplication, butalsoal- lowsanapplicationtorequestbehaviorsthatargparsedoesn\u2019tsupport),andtheverylowlevelgetopt(which",
  "code": "specifically serves as an equivalent to the getopt() family of functions available to C programmers). While\nneitherofthosemodulesiscovereddirectlyinthisguide,manyofthecoreconceptsinargparsefirstoriginated\ninoptparse,sosomeaspectsofthistutorialwillalsoberelevanttooptparseusers.\n1\n1 Concepts\nLet\u2019sshowthesortoffunctionalitythatwearegoingtoexploreinthisintroductorytutorialbymakinguseofthels\ncommand:\n$ ls\ncpython devguide prog.py pypy rm-unused-function.patch\n$ ls pypy\nctypes_configure demo dotviewer include lib_pypy lib-python ...\n$ ls -l\ntotal 20\ndrwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython\ndrwxr-xr-x 4 wena wena 4096 Feb 8 12:04 devguide\n-rwxr-xr-x 1 wena wena 535 Feb 19 00:05 prog.py\ndrwxr-xr-x 14 wena wena 4096 Feb 7 00:59 pypy\n-rw-r--r-- 1 wena wena 741 Feb 18 01:01 rm-unused-function.patch\n$ ls --help\nUsage: ls [OPTION]... [FILE]...\nList information about the FILEs (the current directory by default).\nSort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n...\nAfewconceptswecanlearnfromthefourcommands:\n\u2022 Thelscommandisusefulwhenrunwithoutanyoptionsatall. Itdefaultstodisplayingthecontentsofthe\ncurrentdirectory.\n\u2022 Ifwewantbeyondwhatitprovidesbydefault,wetellitabitmore. Inthiscase,wewantittodisplayadifferent\ndirectory,pypy. Whatwedidisspecifywhatisknownasapositionalargument. It\u2019snamedsobecausethe\nprogramshouldknowwhattodowiththevalue,solelybasedonwhereitappearsonthecommandline. This\nconceptismorerelevanttoacommandlikecp,whosemostbasicusageiscp SRC DEST.Thefirstposition\niswhatyouwantcopied,andthesecondpositioniswhereyouwantitcopiedto.\n\u2022 Now, say we want to change behaviour of the program. In our example, we display more info for each file\ninsteadofjustshowingthefilenames. The-linthatcaseisknownasanoptionalargument.\n\u2022 That\u2019sasnippetofthehelptext. It\u2019sveryusefulinthatyoucancomeacrossaprogramyouhaveneverused\nbefore,andcanfigureouthowitworkssimplybyreadingitshelptext.\n2 The basics\nLetusstartwithaverysimpleexamplewhichdoes(almost)nothing:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.parse_args()\nFollowingisaresultofrunningthecode:\n$ python prog.py\n$ python prog.py --help\nusage: prog.py [-h]\noptions:\n-h, --help show this help message and exit\n$ python prog.py --verbose\nusage: prog.py [-h]\nprog.py: error: unrecognized arguments: --verbose\n$ python prog.py foo\n(continuesonnextpage)\n2\n(continuedfrompreviouspage)\nusage: prog.py [-h]\nprog.py: error: unrecognized arguments: foo\nHereiswhatishappening:\n\u2022 Runningthescriptwithoutanyoptionsresultsinnothingdisplayedtostdout. Notsouseful.\n\u2022 Thesecondonestartstodisplaytheusefulnessoftheargparsemodule. Wehavedonealmostnothing,but\nalreadywegetanicehelpmessage.\n\u2022 The --help option, which can also be shortened to -h, is the only option we get for free (i.e. no need to\nspecifyit). Specifyinganythingelseresultsinanerror. Buteventhen,wedogetausefulusagemessage,also\nforfree.\n3 Introducing Positional arguments\nAnexample:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"echo\")\nargs = parser.parse_args()\nprint(args.echo)\nAndrunningthecode:\n$ python prog.py\nusage: prog.py [-h] echo\nprog.py: error: the following arguments are required: echo\n$ python prog.py --help\nusage: prog.py [-h] echo\npositional arguments:\necho\noptions:\n-h, --help show this help message and exit\n$ python prog.py foo\nfoo\nHereiswhat\u2019shappening:\n\u2022 We\u2019ve added the add_argument() method, which is what we use to specify which command-line options\ntheprogramiswillingtoaccept. Inthiscase,I\u2019venameditechosothatit\u2019sinlinewithitsfunction.\n\u2022 Callingourprogramnowrequiresustospecifyanoption.\n\u2022 Theparse_args()methodactuallyreturnssomedatafromtheoptionsspecified,inthiscase,echo.\n\u2022 Thevariableissomeformof\u2018magic\u2019thatargparseperformsforfree(i.e. noneedtospecifywhichvariable\nthatvalueisstoredin). Youwillalsonoticethatitsnamematchesthestringargumentgiventothemethod,\necho.\nNotehoweverthat,althoughthehelpdisplaylooksniceandall,itcurrentlyisnotashelpfulasitcanbe. Forexample\nwe see that we got echo as a positional argument, but we don\u2019t know what it does, other than by guessing or by\nreadingthesourcecode. So,let\u2019smakeitabitmoreuseful:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"echo\", help=\"echo the string you use here\")\n(continuesonnextpage)\n3\n(continuedfrompreviouspage)\nargs = parser.parse_args()\nprint(args.echo)\nAndweget:\n$ python prog.py -h\nusage: prog.py [-h] echo\npositional arguments:\necho echo the string you use here\noptions:\n-h, --help show this help message and exit\nNow,howaboutdoingsomethingevenmoreuseful:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", help=\"display a square of a given number\")\nargs = parser.parse_args()\nprint(args.square**2)\nFollowingisaresultofrunningthecode:\n$ python prog.py 4\nTraceback (most recent call last):\nFile \"prog.py\", line 5, in <module>\nprint(args.square**2)\nTypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'\nThatdidn\u2019tgosowell. That\u2019sbecauseargparsetreatstheoptionswegiveitasstrings,unlesswetellitotherwise.\nSo,let\u2019stellargparsetotreatthatinputasaninteger:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", help=\"display a square of a given number\",\ntype=int)\nargs = parser.parse_args()\nprint(args.square**2)\nFollowingisaresultofrunningthecode:\n$ python prog.py 4\n16\n$ python prog.py four\nusage: prog.py [-h] square\nprog.py: error: argument square: invalid int value: 'four'\nThatwentwell. Theprogramnowevenhelpfullyquitsonbadillegalinputbeforeproceeding.\n4 Introducing Optional arguments\nSofarwehavebeenplayingwithpositionalarguments. Letushavealookonhowtoaddoptionalones:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--verbosity\", help=\"increase output verbosity\")\n(continuesonnextpage)\n4\n(continuedfrompreviouspage)\nargs = parser.parse_args()\nif args.verbosity:\nprint(\"verbosity turned on\")\nAndtheoutput:\n$ python prog.py --verbosity 1\nverbosity turned on\n$ python prog.py\n$ python prog.py --help\nusage: prog.py [-h] [--verbosity VERBOSITY]\noptions:\n-h, --help show this help message and exit\n--verbosity VERBOSITY\nincrease output verbosity\n$ python prog.py --verbosity\nusage: prog.py [-h] [--verbosity VERBOSITY]\nprog.py: error: argument --verbosity: expected one argument\nHereiswhatishappening:\n\u2022 Theprogramiswrittensoastodisplaysomethingwhen--verbosityisspecifiedanddisplaynothingwhen\nnot.\n\u2022 Toshowthattheoptionisactuallyoptional,thereisnoerrorwhenrunningtheprogramwithoutit. Notethat\nbydefault, ifanoptionalargumentisn\u2019tused, therelevantvariable, inthiscaseargs.verbosity, isgiven\nNoneasavalue,whichisthereasonitfailsthetruthtestoftheifstatement.\n\u2022 Thehelpmessageisabitdifferent.\n\u2022 Whenusingthe--verbosityoption,onemustalsospecifysomevalue,anyvalue.\nTheaboveexampleacceptsarbitraryintegervaluesfor--verbosity,butforoursimpleprogram,onlytwovalues\nareactuallyuseful,TrueorFalse. Let\u2019smodifythecodeaccordingly:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--verbose\", help=\"increase output verbosity\",\naction=\"store_true\")\nargs = parser.parse_args()\nif args.verbose:\nprint(\"verbosity turned on\")\nAndtheoutput:\n$ python prog.py --verbose\nverbosity turned on\n$ python prog.py --verbose 1\nusage: prog.py [-h] [--verbose]\nprog.py: error: unrecognized arguments: 1\n$ python prog.py --help\nusage: prog.py [-h] [--verbose]\noptions:\n-h, --help show this help message and exit\n--verbose increase output verbosity\nHereiswhatishappening:\n5\n\u2022 Theoptionisnowmoreofaflagthansomethingthatrequiresavalue. Weevenchangedthenameoftheoption\ntomatchthatidea. Notethatwenowspecifyanewkeyword,action,andgiveitthevalue\"store_true\".\nThismeansthat,iftheoptionisspecified,assignthevalueTruetoargs.verbose. Notspecifyingitimplies\nFalse.\n\u2022 Itcomplainswhenyouspecifyavalue,intruespiritofwhatflagsactuallyare.\n\u2022 Noticethedifferenthelptext.\n4.1 Short options\nIfyouarefamiliarwithcommandlineusage,youwillnoticethatIhaven\u2019tyettouchedonthetopicofshortversions\noftheoptions. It\u2019squitesimple:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-v\", \"--verbose\", help=\"increase output verbosity\",\naction=\"store_true\")\nargs = parser.parse_args()\nif args.verbose:\nprint(\"verbosity turned on\")\nAndheregoes:\n$ python prog.py -v\nverbosity turned on\n$ python prog.py --help\nusage: prog.py [-h] [-v]\noptions:\n-h, --help show this help message and exit\n-v, --verbose increase output verbosity\nNotethatthenewabilityisalsoreflectedinthehelptext.\n5 Combining Positional and Optional arguments\nOurprogramkeepsgrowingincomplexity:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", type=int,\nhelp=\"display a square of a given number\")\nparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\nhelp=\"increase output verbosity\")\nargs = parser.parse_args()\nanswer = args.square**2\nif args.verbose:\nprint(f\"the square of {args.square} equals {answer}\")\nelse:\nprint(answer)\nAndnowtheoutput:\n$ python prog.py\nusage: prog.py [-h] [-v] square\nprog.py: error: the following arguments are required: square\n$ python prog.py 4\n(continuesonnextpage)\n6\n(continuedfrompreviouspage)\n16\n$ python prog.py 4 --verbose\nthe square of 4 equals 16\n$ python prog.py --verbose 4\nthe square of 4 equals 16\n\u2022 We\u2019vebroughtbackapositionalargument,hencethecomplaint.\n\u2022 Notethattheorderdoesnotmatter.\nHowaboutwegivethisprogramofoursbacktheabilitytohavemultipleverbosityvalues, andactuallygettouse\nthem:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", type=int,\nhelp=\"display a square of a given number\")\nparser.add_argument(\"-v\", \"--verbosity\", type=int,\nhelp=\"increase output verbosity\")\nargs = parser.parse_args()\nanswer = args.square**2\nif args.verbosity == 2:\nprint(f\"the square of {args.square} equals {answer}\")\nelif args.verbosity == 1:\nprint(f\"{args.square}^2 == {answer}\")\nelse:\nprint(answer)\nAndtheoutput:\n$ python prog.py 4\n16\n$ python prog.py 4 -v\nusage: prog.py [-h] [-v VERBOSITY] square\nprog.py: error: argument -v/--verbosity: expected one argument\n$ python prog.py 4 -v 1\n4^2 == 16\n$ python prog.py 4 -v 2\nthe square of 4 equals 16\n$ python prog.py 4 -v 3\n16\nThesealllookgoodexceptthelastone,whichexposesabuginourprogram. Let\u2019sfixitbyrestrictingthevaluesthe\n--verbosityoptioncanaccept:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", type=int,\nhelp=\"display a square of a given number\")\nparser.add_argument(\"-v\", \"--verbosity\", type=int, choices=[0, 1, 2],\nhelp=\"increase output verbosity\")\nargs = parser.parse_args()\nanswer = args.square**2\nif args.verbosity == 2:\nprint(f\"the square of {args.square} equals {answer}\")\nelif args.verbosity == 1:\nprint(f\"{args.square}^2 == {answer}\")\n(continuesonnextpage)\n7\n(continuedfrompreviouspage)\nelse:\nprint(answer)\nAndtheoutput:\n$ python prog.py 4 -v 3\nusage: prog.py [-h] [-v {0,1,2}] square\nprog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)\n$ python prog.py 4 -h\nusage: prog.py [-h] [-v {0,1,2}] square\npositional arguments:\nsquare display a square of a given number\noptions:\n-h, --help show this help message and exit\n-v, --verbosity {0,1,2}\nincrease output verbosity\nNotethatthechangealsoreflectsbothintheerrormessageaswellasthehelpstring.\nNow,let\u2019suseadifferentapproachofplayingwithverbosity,whichisprettycommon. Italsomatchesthewaythe\nCPythonexecutablehandlesitsownverbosityargument(checktheoutputofpython --help):\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", type=int,\nhelp=\"display the square of a given number\")\nparser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\nhelp=\"increase output verbosity\")\nargs = parser.parse_args()\nanswer = args.square**2\nif args.verbosity == 2:\nprint(f\"the square of {args.square} equals {answer}\")\nelif args.verbosity == 1:\nprint(f\"{args.square}^2 == {answer}\")\nelse:\nprint(answer)\nWehaveintroducedanotheraction,\u201ccount\u201d,tocountthenumberofoccurrencesofspecificoptions.\n$ python prog.py 4\n16\n$ python prog.py 4 -v\n4^2 == 16\n$ python prog.py 4 -vv\nthe square of 4 equals 16\n$ python prog.py 4 --verbosity --verbosity\nthe square of 4 equals 16\n$ python prog.py 4 -v 1\nusage: prog.py [-h] [-v] square\nprog.py: error: unrecognized arguments: 1\n$ python prog.py 4 -h\nusage: prog.py [-h] [-v] square\npositional arguments:\nsquare display a square of a given number\n(continuesonnextpage)\n8\n(continuedfrompreviouspage)\noptions:\n-h, --help show this help message and exit\n-v, --verbosity increase output verbosity\n$ python prog.py 4 -vvv\n16\n\u2022 Yes,it\u2019snowmoreofaflag(similartoaction=\"store_true\")inthepreviousversionofourscript. That\nshouldexplainthecomplaint.\n\u2022 Italsobehavessimilarto\u201cstore_true\u201daction.\n\u2022 Nowhere\u2019sademonstrationofwhatthe\u201ccount\u201dactiongives. You\u2019veprobablyseenthissortofusagebefore.\n\u2022 Andifyoudon\u2019tspecifythe-vflag,thatflagisconsideredtohaveNonevalue.\n\u2022 Asshouldbeexpected,specifyingthelongformoftheflag,weshouldgetthesameoutput.\n\u2022 Sadly,ourhelpoutputisn\u2019tveryinformativeonthenewabilityourscripthasacquired,butthatcanalwaysbe\nfixedbyimprovingthedocumentationforourscript(e.g. viathehelpkeywordargument).\n\u2022 Thatlastoutputexposesabuginourprogram.\nLet\u2019sfix:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", type=int,\nhelp=\"display a square of a given number\")\nparser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\nhelp=\"increase output verbosity\")\nargs = parser.parse_args()\nanswer = args.square**2\n# bugfix: replace == with >=\nif args.verbosity >= 2:\nprint(f\"the square of {args.square} equals {answer}\")\nelif args.verbosity >= 1:\nprint(f\"{args.square}^2 == {answer}\")\nelse:\nprint(answer)\nAndthisiswhatitgives:\n$ python prog.py 4 -vvv\nthe square of 4 equals 16\n$ python prog.py 4 -vvvv\nthe square of 4 equals 16\n$ python prog.py 4\nTraceback (most recent call last):\nFile \"prog.py\", line 11, in <module>\nif args.verbosity >= 2:\nTypeError: '>=' not supported between instances of 'NoneType' and 'int'\n\u2022 Firstoutputwentwell,andfixesthebugwehadbefore. Thatis,wewantanyvalue>=2tobeasverboseas\npossible.\n\u2022 Thirdoutputnotsogood.\nLet\u2019sfixthatbug:\n9\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"square\", type=int,\nhelp=\"display a square of a given number\")\nparser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0,\nhelp=\"increase output verbosity\")\nargs = parser.parse_args()\nanswer = args.square**2\nif args.verbosity >= 2:\nprint(f\"the square of {args.square} equals {answer}\")\nelif args.verbosity >= 1:\nprint(f\"{args.square}^2 == {answer}\")\nelse:\nprint(answer)\nWe\u2019vejustintroducedyetanotherkeyword,default. We\u2019vesetitto0inordertomakeitcomparabletotheother\nintvalues. Rememberthatbydefault,ifanoptionalargumentisn\u2019tspecified,itgetstheNonevalue,andthatcannot\nbecomparedtoanintvalue(hencetheTypeErrorexception).\nAnd:\n$ python prog.py 4\n16\nYoucangoquitefarjustwithwhatwe\u2019velearnedsofar, andwehaveonlyscratchedthesurface. Theargparse\nmoduleisverypowerful,andwe\u2019llexploreabitmoreofitbeforeweendthistutorial.\n6 Getting a little more advanced\nWhatifwewantedtoexpandourtinyprogramtoperformotherpowers,notjustsquares:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"x\", type=int, help=\"the base\")\nparser.add_argument(\"y\", type=int, help=\"the exponent\")\nparser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\nargs = parser.parse_args()\nanswer = args.x**args.y\nif args.verbosity >= 2:\nprint(f\"{args.x} to the power {args.y} equals {answer}\")\nelif args.verbosity >= 1:\nprint(f\"{args.x}^{args.y} == {answer}\")\nelse:\nprint(answer)\nOutput:\n$ python prog.py\nusage: prog.py [-h] [-v] x y\nprog.py: error: the following arguments are required: x, y\n$ python prog.py -h\nusage: prog.py [-h] [-v] x y\npositional arguments:\nx the base\ny the exponent\n(continuesonnextpage)\n10\n(continuedfrompreviouspage)\noptions:\n-h, --help show this help message and exit\n-v, --verbosity\n$ python prog.py 4 2 -v\n4^2 == 16\nNotice that so far we\u2019ve been using verbosity level to change the text that gets displayed. The following example\ninsteadusesverbosityleveltodisplaymoretextinstead:\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"x\", type=int, help=\"the base\")\nparser.add_argument(\"y\", type=int, help=\"the exponent\")\nparser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\nargs = parser.parse_args()\nanswer = args.x**args.y\nif args.verbosity >= 2:\nprint(f\"Running '{__file__}'\")\nif args.verbosity >= 1:\nprint(f\"{args.x}^{args.y} == \", end=\"\")\nprint(answer)\nOutput:\n$ python prog.py 4 2\n16\n$ python prog.py 4 2 -v\n4^2 == 16\n$ python prog.py 4 2 -vv\nRunning 'prog.py'\n4^2 == 16\n6.1 Specifying ambiguous arguments\nWhenthereisambiguityindecidingwhetheranargumentispositionalorforan argument, -- canbe usedto tell\nparse_args()thateverythingafterthatisapositionalargument:\n>>> parser = argparse.ArgumentParser(prog='PROG')\n>>> parser.add_argument('-n', nargs='+')\n>>> parser.add_argument('args', nargs='*')\n>>> # ambiguous, so parse_args assumes it's an option\n>>> parser.parse_args(['-f'])\nusage: PROG [-h] [-n N [N ...]] [args ...]\nPROG: error: unrecognized arguments: -f\n>>> parser.parse_args(['--', '-f'])\nNamespace(args=['-f'], n=None)\n>>> # ambiguous, so the -n option greedily accepts arguments\n>>> parser.parse_args(['-n', '1', '2', '3'])\nNamespace(args=[], n=['1', '2', '3'])\n>>> parser.parse_args(['-n', '1', '--', '2', '3'])\nNamespace(args=['2', '3'], n=['1'])\n11\n6.2 Conflicting options\nSo far, we have been working with two methods of an argparse.ArgumentParser instance. Let\u2019s introduce a\nthirdone,add_mutually_exclusive_group(). Itallowsforustospecifyoptionsthatconflictwitheachother.\nLet\u2019salsochangetherestoftheprogramsothatthenewfunctionalitymakesmoresense:we\u2019llintroducethe--quiet\noption,whichwillbetheoppositeofthe--verboseone:\nimport argparse\nparser = argparse.ArgumentParser()\ngroup = parser.add_mutually_exclusive_group()\ngroup.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\ngroup.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\nparser.add_argument(\"x\", type=int, help=\"the base\")\nparser.add_argument(\"y\", type=int, help=\"the exponent\")\nargs = parser.parse_args()\nanswer = args.x**args.y\nif args.quiet:\nprint(answer)\nelif args.verbose:\nprint(f\"{args.x} to the power {args.y} equals {answer}\")\nelse:\nprint(f\"{args.x}^{args.y} == {answer}\")\nOurprogramisnowsimpler,andwe\u2019velostsomefunctionalityforthesakeofdemonstration. Anyways,here\u2019sthe\noutput:\n$ python prog.py 4 2\n4^2 == 16\n$ python prog.py 4 2 -q\n16\n$ python prog.py 4 2 -v\n4 to the power 2 equals 16\n$ python prog.py 4 2 -vq\nusage: prog.py [-h] [-v | -q] x y\nprog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\n$ python prog.py 4 2 -v --quiet\nusage: prog.py [-h] [-v | -q] x y\nprog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\nThatshouldbeeasytofollow. I\u2019veaddedthatlastoutputsoyoucanseethesortofflexibilityyouget, i.e. mixing\nlongformoptionswithshortformones.\nBeforeweconclude,youprobablywanttotellyourusersthemainpurposeofyourprogram,justincasetheydon\u2019t\nknow:\nimport argparse\nparser = argparse.ArgumentParser(description=\"calculate X to the power of Y\")\ngroup = parser.add_mutually_exclusive_group()\ngroup.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\ngroup.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\nparser.add_argument(\"x\", type=int, help=\"the base\")\nparser.add_argument(\"y\", type=int, help=\"the exponent\")\nargs = parser.parse_args()\nanswer = args.x**args.y\nif args.quiet:\n(continuesonnextpage)\n12\n(continuedfrompreviouspage)\nprint(answer)\nelif args.verbose:\nprint(f\"{args.x} to the power {args.y} equals {answer}\")\nelse:\nprint(f\"{args.x}^{args.y} == {answer}\")\nNotethatslightdifferenceintheusagetext. Notethe[-v | -q],whichtellsusthatwecaneitheruse-vor-q,\nbutnotbothatthesametime:\n$ python prog.py --help\nusage: prog.py [-h] [-v | -q] x y\ncalculate X to the power of Y\npositional arguments:\nx the base\ny the exponent\noptions:\n-h, --help show this help message and exit\n-v, --verbose\n-q, --quiet\n7 How to translate the argparse output\nThe output of the argparse module such as its help text and error messages are all made translatable using the\ngettextmodule. Thisallowsapplicationstoeasilylocalizemessagesproducedbyargparse. Seealsoi18n-howto.\nForinstance,inthisargparseoutput:\n$ python prog.py --help\nusage: prog.py [-h] [-v | -q] x y\ncalculate X to the power of Y\npositional arguments:\nx the base\ny the exponent\noptions:\n-h, --help show this help message and exit\n-v, --verbose\n-q, --quiet\nThe strings usage:, positional arguments:, options: and show this help message and exit are\nalltranslatable.\nIn order to translate these strings, they must first be extracted into a .po file. For example, using Babel, run this\ncommand:\n$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py\nThis command will extract all translatable strings from the argparse module and output them into a file named\nmessages.po. ThiscommandassumesthatyourPythoninstallationisin/usr/lib.\nYoucanfindoutthelocationoftheargparsemoduleonyoursystemusingthisscript:\n13\nimport argparse\nprint(argparse.__file__)\nOncethemessagesinthe.pofilearetranslatedandthetranslationsareinstalledusinggettext,argparsewillbe\nabletodisplaythetranslatedmessages.\nTotranslateyourownstringsintheargparseoutput,usegettext.\n8 Custom type converters\nTheargparsemoduleallowsyoutospecifycustomtypeconvertersforyourcommand-linearguments. Thisallows\nyou to modify user input before it\u2019s stored in the argparse.Namespace. This can be useful when you need to\npre-processtheinputbeforeitisusedinyourprogram.\nWhenusingacustomtypeconverter,youcanuseanycallablethattakesasinglestringargument(theargumentvalue)\nandreturnstheconvertedvalue. However,ifyouneedtohandlemorecomplexscenarios,youcanuseacustomaction\nclasswiththeactionparameterinstead.\nForexample,let\u2019ssayyouwanttohandleargumentswithdifferentprefixesandprocessthemaccordingly:\nimport argparse\nparser = argparse.ArgumentParser(prefix_chars='-+')\nparser.add_argument('-a', metavar='<value>', action='append',\ntype=lambda x: ('-', x))\nparser.add_argument('+a', metavar='<value>', action='append',\ntype=lambda x: ('+', x))\nargs = parser.parse_args()\nprint(args)\nOutput:\n$ python prog.py -a value1 +a value2\nNamespace(a=[('-', 'value1'), ('+', 'value2')])\nInthisexample,we:\n\u2022 Createdaparserwithcustomprefixcharactersusingtheprefix_charsparameter.\n\u2022 Definedtwoarguments,-aand+a,whichusedthetypeparametertocreatecustomtypeconverterstostore\nthevalueinatuplewiththeprefix.\nWithoutthecustomtypeconverters,theargumentswouldhavetreatedthe-aand+aasthesameargument,which\nwouldhavebeenundesirable. Byusingcustomtypeconverters,wewereabletodifferentiatebetweenthetwoargu-\nments.\n9 Conclusion\nThe argparse module offers a lot more than shown here. Its docs are quite detailed and thorough, and full of\nexamples. Havinggonethroughthistutorial,youshouldeasilydigestthemwithoutfeelingoverwhelmed.\n14\n",
  "context": "The standard library includes two other libraries directly related to command-line parameter processing: the\nlowerleveloptparsemodule(whichmayrequiremorecodetoconfigureforagivenapplication, butalsoal-\nlowsanapplicationtorequestbehaviorsthatargparsedoesn\u2019tsupport),andtheverylowlevelgetopt(which",
  "source_file": "resources\\Year 3\\Python\\howto-argparse.pdf",
  "line_numbers": [
    28,
    630
  ]
}