{
  "title": "PythonSocketProgramming",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "networking",
    "data_structures",
    "database"
  ],
  "purpose": "Python Network Programming David M. Beazley",
  "code": "http://www.dabeaz.com\nEdition: Thu Jun 17 19:49:58 2010\nCopyright (C) 2010\nDavid M Beazley\nAll Rights Reserved\n\nPython Network Programming : Table of Contents\n! 1. Network Fundamentals !! ! ! ! ! ! 4\n! 2. Client Programming! ! ! ! ! ! ! 32\n! 3. Internet Data Handling! ! ! ! ! ! ! 49\n! 4. Web Programming Basics! ! ! ! ! ! 65\n! 5. Advanced Networks! ! ! ! ! ! ! 93\nEdition: Thu Jun 17 19:49:58 2010\n\nSlide Title Index Threaded Server 1-50\nForking Server (Unix) 1-51\nAsynchronous Server 1-52\n0. Introduction Utility Functions 1-53\nOmissions 1-54\nDiscussion 1-55\nIntroduction 0-1\nSupport Files 0-2 2. Client Programming\nPython Networking 0-3\nThis Course 0-4\nStandard Library 0-5 Client Programming 2-1\nPrerequisites 0-6 Overview 2-2\nurllib Module 2-3\n1. Network Fundamentals urllib protocols 2-5\nHTML Forms 2-6\nWeb Services 2-8\nNetwork Fundamentals 1-1 Parameter Encoding 2-9\nThe Problem 1-2 Sending Parameters 2-10\nTwo Main Issues 1-3 Response Data 2-12\nNetwork Addressing 1-4 Response Headers 2-13\nStandard Ports 1-5 Response Status 2-14\nUsing netstat 1-6 Exercise 2.1 2-15\nConnections 1-7 urllib Limitations 2-16\nClient/Server Concept 1-8 urllib2 Module 2-17\nRequest/Response Cycle 1-9 urllib2 Example 2-18\nUsing Telnet 1-10 urllib2 Requests 2-19\nData Transport 1-11 Requests with Data 2-20\nSockets 1-12 Request Headers 2-21\nSocket Basics 1-13 urllib2 Error Handling 2-22\nSocket Types 1-14 urllib2 Openers 2-23\nUsing a Socket 1-15 urllib2 build_opener() 2-24\nTCP Client 1-16 Example : Login Cookies 2-25\nExercise 1.1 1-17 Discussion 2-26\nServer Implementation 1-18 Exercise 2.2 2-27\nTCP Server 1-19 Limitations 2-28\nExercise 1.2 1-27 ftplib 2-29\nAdvanced Sockets 1-28 Upload to a FTP Server 2-30\nPartial Reads/Writes 1-29 httplib 2-31\nSending All Data 1-31 smtplib 2-32\nEnd of Data 1-32 Exercise 2.3 2-33\nData Reassembly 1-33\nTimeouts 1-34 3. Internet Data Handling\nNon-blocking Sockets 1-35\nSocket Options 1-36\nSockets as Files 1-37 Internet Data Handling 3-1\nExercise 1.3 1-39 Overview 3-2\nOdds and Ends 1-40 CSV Files 3-3\nUDP : Datagrams 1-41 Parsing HTML 3-4\nUDP Server 1-42 Running a Parser 3-6\nUDP Client 1-43 HTML Example 3-7\nUnix Domain Sockets 1-44 XML Parsing with SAX 3-9\nRaw Sockets 1-45 Brief XML Refresher 3-10\nSockets and Concurrency 1-46 SAX Parsing 3-11\nExercise 3.1 3-13 WSGI Example 4-37\nXML and ElementTree 3-14 WSGI Applications 4-38\netree Parsing Basics 3-15 WSGI Environment 4-39\nObtaining Elements 3-17 Processing WSGI Inputs 4-41\nIterating over Elements 3-18 WSGI Responses 4-42\nElement Attributes 3-19 WSGI Content 4-44\nSearch Wildcards 3-20 WSGI Content Encoding 4-45\ncElementTree 3-22 WSGI Deployment 4-46\nTree Modification 3-23 WSGI and CGI 4-48\nTree Output 3-24 Exercise 4.5 4-49\nIterative Parsing 3-25 Customized HTTP 4-50\nExercise 3.2 3-28 Exercise 4.6 4-53\nJSON 3-29 Web Frameworks 4-54\nSample JSON File 3-30 Commentary 4-56\nProcessing JSON Data 3-31\nExercise 3.3 3-32 5. Advanced Networking\n4. Web Programming\nAdvanced Networking 5-1\nOverview 5-2\nWeb Programming Basics 4-1 Problem with Sockets 5-3\nIntroduction 4-2 SocketServer 5-4\nOverview 4-3 SocketServer Example 5-5\nDisclaimer 4-4 Execution Model 5-11\nHTTP Explained 4-5 Exercise 5.1 5-12\nHTTP Client Requests 4-6 Big Picture 5-13\nHTTP Responses 4-7 Concurrent Servers 5-14\nHTTP Protocol 4-8 Server Mixin Classes 5-15\nContent Encoding 4-9 Server Subclassing 5-16\nPayload Packaging 4-10 Exercise 5.2 5-17\nExercise 4.1 4-11 Distributed Computing 5-18\nRole of Python 4-12 Discussion 5-19\nTypical Python Tasks 4-13 XML-RPC 5-20\nContent Generation 4-14 Simple XML-RPC 5-21\nExample : Page Templates 4-15 XML-RPC Commentary 5-23\nCommentary 4-17 XML-RPC and Binary 5-24\nExercise 4.2 4-18 Exercise 5.3 5-25\nHTTP Servers 4-19 Serializing Python Objects 5-26\nA Simple Web Server 4-20 pickle Module 5-27\nExercise 4.3 4-21 Pickling to Strings 5-28\nA Web Server with CGI 4-22 Example 5-29\nCGI Scripting 4-23 Miscellaneous Comments 5-31\nCGI Example 4-24 Exercise 5.4 5-32\nCGI Mechanics 4-27 multiprocessing 5-33\nClassic CGI Interface 4-28 Connections 5-34\nCGI Query Variables 4-29 Connection Use 5-35\ncgi Module 4-30 Example 5-36\nCGI Responses 4-31 Commentary 5-38\nNote on Status Codes 4-32 What about... 5-40\nCGI Commentary 4-33 Network Wrap-up 5-41\nExercise 4.4 4-34 Exercise 5.5 5-42\nWSGI 4-35\nWSGI Interface 4-36\nSection 0\nIntroduction\nSupport Files\n\u2022\nCourse exercises:\nhttp://www.dabeaz.com/python/pythonnetwork.zip\n\u2022\nThis zip file should be downloaded and extracted\nsomeplace on your machine\n\u2022\nAll of your work will take place in the the\n\"PythonNetwork\" folder\n1- 2\nCopyright (C) 2010, http://www.dabeaz.com\n1\nPython Networking\n\u2022\nNetwork programming is a major use of Python\n\u2022\nPython standard library has wide support for\nnetwork protocols, data encoding/decoding, and\nother things you need to make it work\n\u2022\nWriting network programs in Python tends to be\nsubstantially easier than in C/C++\n1- 3\nCopyright (C) 2010, http://www.dabeaz.com\nThis Course\n\u2022\nThis course focuses on the essential details of\nnetwork programming that all Python\nprogrammers should probably know\n\u2022\nLow-level programming with sockets\n\u2022\nHigh-level client modules\n\u2022\nHow to deal with common data encodings\n\u2022\nSimple web programming (HTTP)\n\u2022\nSimple distributed computing\n1- 4\nCopyright (C) 2010, http://www.dabeaz.com\n2\nStandard Library\n\u2022\nWe will only cover modules supported by the\nPython standard library\n\u2022\nThese come with Python by default\n\u2022\nKeep in mind, much more functionality can be\nfound in third-party modules\n\u2022\nWill give links to notable third-party libraries as\nappropriate\n1- 5\nCopyright (C) 2010, http://www.dabeaz.com\nPrerequisites\n\u2022\nYou should already know Python basics\n\u2022\nHowever, you don't need to be an expert on all\nof its advanced features (in fact, none of the code\nto be written is highly sophisticated)\n\u2022\nYou should have some prior knowledge of\nsystems programming and network concepts\n1- 6\nCopyright (C) 2010, http://www.dabeaz.com\n3\nSection 1\nNetwork Fundamentals\nThe Problem\n\u2022\nCommunication between computers\nNetwork\n\u2022\nIt's just sending/receiving bits\n1- 2\nCopyright (C) 2010, http://www.dabeaz.com\n4\nTwo Main Issues\n\u2022\nAddressing\n\u2022\nSpecifying a remote computer and service\n\u2022\nData transport\n\u2022\nMoving bits back and forth\n1- 3\nCopyright (C) 2010, http://www.dabeaz.com\nNetwork Addressing\n\u2022\nMachines have a hostname and IP address\n\u2022\nPrograms/services have port numbers\nfoo.bar.com\n205.172.13.4\nport 4521\nwww.python.org\nNetwork\n82.94.237.218\nport 80\n1- 4\nCopyright (C) 2010, http://www.dabeaz.com\n5\nStandard Ports\n\u2022\nPorts for common services are preassigned\n21 FTP\n22 SSH\n23 Telnet\n25 SMTP (Mail)\n80 HTTP (Web)\n110 POP3 (Mail)\n119 NNTP (News)\n443 HTTPS (web)\n\u2022\nOther port numbers may just be randomly\nassigned to programs by the operating system\n1- 5\nCopyright (C) 2010, http://www.dabeaz.com\nUsing netstat\n\u2022\nUse 'netstat' to view active network connections\nshell % netstat -a\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address Foreign Address State\ntcp 0 0 *:imaps *:* LISTEN\ntcp 0 0 *:pop3s *:* LISTEN\ntcp 0 0 localhost:mysql *:* LISTEN\ntcp 0 0 *:pop3 *:* LISTEN\ntcp 0 0 *:imap2 *:* LISTEN\ntcp 0 0 *:8880 *:* LISTEN\ntcp 0 0 *:www *:* LISTEN\ntcp 0 0 192.168.119.139:domain *:* LISTEN\ntcp 0 0 localhost:domain *:* LISTEN\ntcp 0 0 *:ssh *:* LISTEN\n...\n\u2022\nNote: Must execute from the command shell on\nboth Unix and Windows\n1- 6\nCopyright (C) 2010, http://www.dabeaz.com\n6\nConnections\n\u2022\nEach endpoint of a network connection is always\nrepresented by a host and port #\n\u2022\nIn Python you write it out as a tuple (host,port)\n(\"www.python.org\",80)\n(\"205.172.13.4\",443)\n\u2022\nIn almost all of the network programs you\u2019ll\nwrite, you use this convention to specify a\nnetwork address\n1- 7\nCopyright (C) 2010, http://www.dabeaz.com\nClient/Server Concept\n\u2022\nEach endpoint is a running program\n\u2022\nServers wait for incoming connections and\nprovide a service (e.g., web, mail, etc.)\n\u2022\nClients make connections to servers\nClient Server\nwww.bar.com\n205.172.13.4\nbrowser web Port 80\n1- 8\nCopyright (C) 2010, http://www.dabeaz.com\n7\nRequest/Response Cycle\n\u2022\nMost network programs use a request/\nresponse model based on messages\n\u2022\nClient sends a request message (e.g., HTTP)\nGET /index.html HTTP/1.0\n\u2022\nServer sends back a response message\nHTTP/1.0 200 OK\nContent-type: text/html\nContent-length: 48823\n<HTML>\n...\n\u2022\nThe exact format depends on the application\n1- 9\nCopyright (C) 2010, http://www.dabeaz.com\nUsing Telnet\n\u2022\nAs a debugging aid, telnet can be used to\ndirectly communicate with many services\ntelnet hostname portnum\n\u2022\nExample:\nshell % telnet www.python.org 80\nTrying 82.94.237.218...\nConnected to www.python.org.\ntype this Escape character is '^]'.\nand press GET /index.html HTTP/1.0\nreturn a few\ntimes\nHTTP/1.1 200 OK\nDate: Mon, 31 Mar 2008 13:34:03 GMT\nServer: Apache/2.2.3 (Debian) DAV/2 SVN/1.4.2\nmod_ssl/2.2.3 OpenSSL/0.9.8c\n...\n1- 10\nCopyright (C) 2010, http://www.dabeaz.com\n8\nData Transport\n\u2022\nThere are two basic types of communication\n\u2022\nStreams (TCP): Computers establish a\nconnection with each other and read/write data\nin a continuous stream of bytes---like a file. This\nis the most common.\n\u2022\nDatagrams (UDP): Computers send discrete\npackets (or messages) to each other. Each\npacket contains a collection of bytes, but each\npacket is separate and self-contained.\n1- 11\nCopyright (C) 2010, http://www.dabeaz.com\nSockets\n\u2022\nProgramming abstraction for network code\n\u2022\nSocket: A communication endpoint\nsocket socket\nnetwork\n\u2022\nSupported by socket library module\n\u2022\nAllows connections to be made and data to be\ntransmitted in either direction\n1- 12\nCopyright (C) 2010, http://www.dabeaz.com\n9\nSocket Basics\n\u2022\nTo create a socket\nimport socket\ns = socket.socket(addr_family, type)\n\u2022\nAddress families\nsocket.AF_INET Internet protocol (IPv4)\nsocket.AF_INET6 Internet protocol (IPv6)\n\u2022\nSocket types\nsocket.SOCK_STREAM Connection based stream (TCP)\nsocket.SOCK_DGRAM Datagrams (UDP)\n\u2022\nExample:\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\n1- 13\nCopyright (C) 2010, http://www.dabeaz.com\nSocket Types\n\u2022\nAlmost all code will use one of following\nfrom socket import *\ns = socket(AF_INET, SOCK_STREAM)\ns = socket(AF_INET, SOCK_DGRAM)\n\u2022\nMost common case: TCP connection\ns = socket(AF_INET, SOCK_STREAM)\n1- 14\nCopyright (C) 2010, http://www.dabeaz.com\n10\nUsing a Socket\n\u2022\nCreating a socket is only the first step\ns = socket(AF_INET, SOCK_STREAM)\n\u2022\nFurther use depends on application\n\u2022\nServer\n\u2022\nListen for incoming connections\n\u2022\nClient\n\u2022\nMake an outgoing connection\n1- 15\nCopyright (C) 2010, http://www.dabeaz.com\nTCP Client\n\u2022\nHow to make an outgoing connection\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.connect((\"www.python.org\",80)) # Connect\ns.send(\"GET /index.html HTTP/1.0\\n\\n\") # Send request\ndata = s.recv(10000) # Get response\ns.close()\n\u2022\ns.connect(addr) makes a connection\ns.connect((\"www.python.org\",80))\n\u2022\nOnce connected, use send(),recv() to\ntransmit and receive data\n\u2022\nclose() shuts down the connection\n1- 16\nCopyright (C) 2010, http://www.dabeaz.com\n11\nExercise 1.1\nTime : 10 Minutes\n1- 17\nCopyright (C) 2010, http://www.dabeaz.com\nServer Implementation\n\u2022\nNetwork servers are a bit more tricky\n\u2022\nMust listen for incoming connections on a\nwell-known port number\n\u2022\nTypically run forever in a server-loop\n\u2022\nMay have to service multiple clients\n1- 18\nCopyright (C) 2010, http://www.dabeaz.com\n12\nTCP Server\n\u2022\nA simple server\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000))\ns.listen(5)\nwhile True:\nc,a = s.accept()\nprint \"Received connection from\", a\nc.send(\"Hello %s\\n\" % a[0])\nc.close()\n\u2022\nSend a message back to a client\n% telnet localhost 9000\nConnected to localhost.\nEscape character is '^]'.\nHello 127.0.0.1 Server message\nConnection closed by foreign host.\n%\n1- 19\nCopyright (C) 2010, http://www.dabeaz.com\nTCP Server\n\u2022\nAddress binding\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\nbinds the socket to\ns.bind((\"\",9000))\na specific address\ns.listen(5)\nwhile True:\nc,a = s.accept()\nprint \"Received connection from\", a\nc.send(\"Hello %s\\n\" % a[0])\nc.close()\n\u2022\nAddressing\nbinds to localhost\ns.bind((\"\",9000))\ns.bind((\"localhost\",9000))\nIf system has multiple\ns.bind((\"192.168.2.1\",9000))\nIP addresses, can bind\ns.bind((\"104.21.4.2\",9000))\nto a specific address\n1- 20\nCopyright (C) 2010, http://www.dabeaz.com\n13\nTCP Server\n\u2022\nStart listening for connections\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000)) Tells operating system to\ns.listen(5)\nstart listening for\nwhile True:\nconnections on the socket\nc,a = s.accept()\nprint \"Received connection from\", a\nc.send(\"Hello %s\\n\" % a[0])\nc.close()\n\u2022\ns.listen(backlog)\n\u2022\nbacklog is # of pending connections to allow\n\u2022\nNote: not related to max number of clients\n1- 21\nCopyright (C) 2010, http://www.dabeaz.com\nTCP Server\n\u2022\nAccepting a new connection\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000))\ns.listen(5)\nwhile True:\nc,a = s.accept() Accept a new client connection\nprint \"Received connection from\", a\nc.send(\"Hello %s\\n\" % a[0])\nc.close()\n\u2022\ns.accept() blocks until connection received\n\u2022\nServer sleeps if nothing is happening\n1- 22\nCopyright (C) 2010, http://www.dabeaz.com\n14\nTCP Server\n\u2022\nClient socket and address\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000))\ns.listen(5)\nAccept returns a pair (client_socket,addr)\nwhile True:\nc,a = s.accept()\nprint \"Received connection from\", a\nc.send(\"Hello %s\\n\" % a[0])\nc.close()\n<socket._socketobject (\"104.23.11.4\",27743)\nobject at 0x3be30>\nThis is the network/port\nThis is a new socket address of the client that\nthat's used for data connected\n1- 23\nCopyright (C) 2010, http://www.dabeaz.com\nTCP Server\n\u2022\nSending data\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000))\ns.listen(5)\nwhile True:\nc,a = s.accept()\nprint \"Received connection from\", a\nc.send(\"Hello %s\\n\" % a[0]) Send data to client\nc.close()\nNote: Use the client socket for\ntransmitting data. The server\nsocket is only used for\naccepting new connections.\n1- 24\nCopyright (C) 2010, http://www.dabeaz.com\n15\nTCP Server\n\u2022\nClosing the connection\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000))\ns.listen(5)\nwhile True:\nc,a = s.accept()\nprint \"Received connection from\", a\nc.send(\"Hello %s\\n\" % a[0])\nc.close() Close client connection\n\u2022\nNote: Server can keep client connection alive\nas long as it wants\n\u2022\nCan repeatedly receive/send data\n1- 25\nCopyright (C) 2010, http://www.dabeaz.com\nTCP Server\n\u2022\nWaiting for the next connection\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000))\ns.listen(5)\nwhile True:\nc,a = s.accept() Wait for next connection\nprint \"Received connection from\", a\nc.send(\"Hello %s\\n\" % a[0])\nc.close()\n\u2022\nOriginal server socket is reused to listen for\nmore connections\n\u2022\nServer runs forever in a loop like this\n1- 26\nCopyright (C) 2010, http://www.dabeaz.com\n16\nExercise 1.2\nTime : 20 Minutes\n1- 27\nCopyright (C) 2010, http://www.dabeaz.com\nAdvanced Sockets\n\u2022\nSocket programming is often a mess\n\u2022\nHuge number of options\n\u2022\nMany corner cases\n\u2022\nMany failure modes/reliability issues\n\u2022\nWill briefly cover a few critical issues\n1- 28\nCopyright (C) 2010, http://www.dabeaz.com\n17\nPartial Reads/Writes\n\u2022\nBe aware that reading/writing to a socket\nmay involve partial data transfer\n\u2022\nsend() returns actual bytes sent\n\u2022\nrecv() length is only a maximum limit\n>>> len(data)\n1000000\n>>> s.send(data)\n37722 Sent partial data\n>>>\n>>> data = s.recv(10000)\n>>> len(data)\n6420 Received less than max\n>>>\n1- 29\nCopyright (C) 2010, http://www.dabeaz.com\nPartial Reads/Writes\n\u2022\nBe aware that for TCP, the data stream is\ncontinuous---no concept of records, etc.\n# Client\n...\ns.send(data)\ns.send(moredata)\n...\n# Server This recv() may return data\n... from both of the sends\ndata = s.recv(maxsize)\ncombined or less data than\n...\neven the first send\n\u2022\nA lot depends on OS buffers, network\nbandwidth, congestion, etc.\n1- 30\nCopyright (C) 2010, http://www.dabeaz.com\n18\nSending All Data\n\u2022\nTo wait until all data is sent, use sendall()\ns.sendall(data)\n\u2022\nBlocks until all data is transmitted\n\u2022\nFor most normal applications, this is what\nyou should use\n\u2022\nException : You don\u2019t use this if networking is\nmixed in with other kinds of processing\n(e.g., screen updates, multitasking, etc.)\n1- 31\nCopyright (C) 2010, http://www.dabeaz.com\nEnd of Data\n\u2022\nHow to tell if there is no more data?\n\u2022\nrecv() will return empty string\n>>> s.recv(1000)\n''\n>>>\n\u2022\nThis means that the other end of the\nconnection has been closed (no more sends)\n1- 32\nCopyright (C) 2010, http://www.dabeaz.com\n19\nData Reassembly\n\u2022\nReceivers often need to reassemble\nmessages from a series of small chunks\n\u2022\nHere is a programming template for that\nfragments = [] # List of chunks\nwhile not done:\nchunk = s.recv(maxsize) # Get a chunk\nif not chunk:\nbreak # EOF. No more data\nfragments.append(chunk)\n# Reassemble the message\nmessage = \"\".join(fragments)\n\u2022\nDon't use string concat (+=). It's slow.\n1- 33\nCopyright (C) 2010, http://www.dabeaz.com\nTimeouts\n\u2022\nMost socket operations block indefinitely\n\u2022\nCan set an optional timeout\ns = socket(AF_INET, SOCK_STREAM)\n...\ns.settimeout(5.0) # Timeout of 5 seconds\n...\n\u2022\nWill get a timeout exception\n>>> s.recv(1000)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nsocket.timeout: timed out\n>>>\n\u2022\nDisabling timeouts\ns.settimeout(None)\n1- 34\nCopyright (C) 2010, http://www.dabeaz.com\n20\nNon-blocking Sockets\n\u2022\nInstead of timeouts, can set non-blocking\n>>> s.setblocking(False)\n\u2022\nFuture send(),recv() operations will raise an\nexception if the operation would have blocked\n>>> s.setblocking(False)\n>>> s.recv(1000) No data available\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nsocket.error: (35, 'Resource temporarily unavailable')\n>>> s.recv(1000) Data arrived\n'Hello World\\n'\n>>>\n\u2022\nSometimes used for polling\n1- 35\nCopyright (C) 2010, http://www.dabeaz.com\nSocket Options\n\u2022\nSockets have a large number of parameters\n\u2022\nCan be set using s.setsockopt()\n\u2022\nExample: Reusing the port number\n>>> s.bind((\"\",9000))\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"<string>\", line 1, in bind\nsocket.error: (48, 'Address already in use')\n>>> s.setsockopt(socket.SOL_SOCKET,\n... socket.SO_REUSEADDR, 1)\n>>> s.bind((\"\",9000))\n>>>\n\u2022\nConsult reference for more options\n1- 36\nCopyright (C) 2010, http://www.dabeaz.com\n21\nSockets as Files\n\u2022\nSometimes it is easier to work with sockets\nrepresented as a \"file\" object\nf = s.makefile()\n\u2022\nThis will wrap a socket with a file-like API\nf.read()\nf.readline()\nf.write()\nf.writelines()\nfor line in f:\n...\nf.close()\n1- 37\nCopyright (C) 2010, http://www.dabeaz.com\nSockets as Files\n\u2022\nCommentary : From personal experience,\nputting a file-like layer over a socket rarely\nworks as well in practice as it sounds in theory.\n\u2022\nTricky resource management (must manage\nboth the socket and file independently)\n\u2022\nIt's easy to write programs that mysteriously\n\"freeze up\" or don't operate quite like you\nwould expect.\n1- 38\nCopyright (C) 2010, http://www.dabeaz.com\n22\nExercise 1.3\nTime : 15 Minutes\n1- 39\nCopyright (C) 2010, http://www.dabeaz.com\nOdds and Ends\n\u2022\nOther supported socket types\n\u2022\nDatagram (UDP) sockets\n\u2022\nUnix domain sockets\n\u2022\nRaw sockets/Packets\n\u2022\nSockets and concurrency\n\u2022\nUseful utility functions\n1- 40\nCopyright (C) 2010, http://www.dabeaz.com\n23\nUDP : Datagrams\nDATA DATA DATA\n\u2022\nData sent in discrete packets (Datagrams)\n\u2022\nNo concept of a \"connection\"\n\u2022\nNo reliability, no ordering of data\n\u2022\nDatagrams may be lost, arrive in any order\n\u2022\nHigher performance (used in games, etc.)\n1- 41\nCopyright (C) 2010, http://www.dabeaz.com\nUDP Server\n\u2022\nA simple datagram server\nfrom socket import *\ns = socket(AF_INET,SOCK_DGRAM) Create datagram socket\ns.bind((\"\",10000)) Bind to a specific port\nwhile True:\ndata, addr = s.recvfrom(maxsize) Wait for a message\nresp = \"Get off my lawn!\"\ns.sendto(resp,addr) Send response\n(optional)\n\u2022\nNo \"connection\" is established\n\u2022\nIt just sends and receives packets\n1- 42\nCopyright (C) 2010, http://www.dabeaz.com\n24\nUDP Client\n\u2022\nSending a datagram to a server\nfrom socket import *\ns = socket(AF_INET,SOCK_DGRAM) Create datagram socket\nmsg = \"Hello World\"\ns.sendto(msg,(\"server.com\",10000)) Send a message\ndata, addr = s.recvfrom(maxsize)\nWait for a response\n(optional)\nreturned data remote address\n\u2022\nKey concept: No \"connection\"\n\u2022\nYou just send a data packet\n1- 43\nCopyright (C) 2010, http://www.dabeaz.com\nUnix Domain Sockets\n\u2022\nAvailable on Unix based systems. Sometimes\nused for fast IPC or pipes between processes\n\u2022\nCreation:\ns = socket(AF_UNIX, SOCK_STREAM)\ns = socket(AF_UNIX, SOCK_DGRAM)\n\u2022\nAddress is just a \"filename\"\ns.bind(\"/tmp/foo\") # Server binding\ns.connect(\"/tmp/foo\") # Client connection\n\u2022\nRest of the programming interface is the same\n1- 44\nCopyright (C) 2010, http://www.dabeaz.com\n25\nRaw Sockets\n\u2022\nIf you have root/admin access, can gain direct\naccess to raw network packets\n\u2022\nDepends on the system\n\u2022\nExample: Linux packet sniffing\ns = socket(AF_PACKET, SOCK_DGRAM)\ns.bind((\"eth0\",0x0800)) # Sniff IP packets\nwhile True:\nmsg,addr = s.recvfrom(4096) # get a packet\n...\n1- 45\nCopyright (C) 2010, http://www.dabeaz.com\nSockets and Concurrency\n\u2022\nServers usually handle multiple clients\nclients server\nbrowser\nweb Port 80\nweb\nweb\nbrowser\n1- 46\nCopyright (C) 2010, http://www.dabeaz.com\n26\nSockets and Concurrency\n\u2022\nEach client gets its own socket on server\n# server code\nclients server\ns = socket(AF_INET, SOCK_STREAM)\n...\nwhile True:\nc,a = s.accept()\n... browser\na connection\nweb\npoint for clients\nweb\nweb client data\ntransmitted\nbrowser\non a different\nsocket\n1- 47\nCopyright (C) 2010, http://www.dabeaz.com\nSockets and Concurrency\n\u2022\nNew connections make a new socket\nclients server\nbrowser\nweb Port 80\nweb\nconnect accept()\nweb\nbrowser web\nsend()/recv()\nbrowser\n1- 48\nCopyright (C) 2010, http://www.dabeaz.com\n27\nSockets and Concurrency\n\u2022\nTo manage multiple clients,\n\u2022\nServer must always be ready to accept\nnew connections\n\u2022\nMust allow each client to operate\nindependently (each may be performing\ndifferent tasks on the server)\n\u2022\nWill briefly outline the common solutions\n1- 49\nCopyright (C) 2010, http://www.dabeaz.com\nThreaded Server\n\u2022\nEach client is handled by a separate thread\nimport threading\nfrom socket import *\ndef handle_client(c):\n... whatever ...\nc.close()\nreturn\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000))\ns.listen(5)\nwhile True:\nc,a = s.accept()\nt = threading.Thread(target=handle_client,\nargs=(c,))\n1- 50\nCopyright (C) 2010, http://www.dabeaz.com\n28\nForking Server (Unix)\n\u2022\nEach client is handled by a subprocess\nimport os\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\ns.bind((\"\",9000))\ns.listen(5)\nwhile True:\nc,a = s.accept()\nif os.fork() == 0:\n# Child process. Manage client\n...\nc.close()\nos._exit(0)\nelse:\n# Parent process. Clean up and go\n# back to wait for more connections\nc.close()\n\u2022\nNote: Omitting some critical details\n1- 51\nCopyright (C) 2010, http://www.dabeaz.com\nAsynchronous Server\n\u2022\nServer handles all clients in an event loop\nimport select\nfrom socket import *\ns = socket(AF_INET,SOCK_STREAM)\n...\nclients = [] # List of all active client sockets\nwhile True:\n# Look for activity on any of my sockets\ninput,output,err = select.select(s+clients,\nclients, clients)\n# Process all sockets with input\nfor i in input:\n...\n# Process all sockets ready for output\nfor o in output:\n...\n\u2022\nFrameworks such as Twisted build upon this\n1- 52\nCopyright (C) 2010, http://www.dabeaz.com\n29\nUtility Functions\n\u2022\nGet the hostname of the local machine\n>>> socket.gethostname()\n'foo.bar.com'\n>>>\n\u2022\nGet the IP address of a remote machine\n>>> socket.gethostbyname(\"www.python.org\")\n'82.94.237.218'\n>>>\n\u2022\nGet name information on a remote IP\n>>> socket.gethostbyaddr(\"82.94.237.218\")\n('dinsdale.python.org', [], ['82.94.237.218'])\n>>>\n1- 53\nCopyright (C) 2010, http://www.dabeaz.com\nOmissions\n\u2022\nsocket module has hundreds of obscure\nsocket control options, flags, etc.\n\u2022\nMany more utility functions\n\u2022\nIPv6 (Supported, but new and hairy)\n\u2022\nOther socket types (SOCK_RAW, etc.)\n\u2022\nMore on concurrent programming (covered in\nadvanced course)\n1- 54\nCopyright (C) 2010, http://www.dabeaz.com\n30\nDiscussion\n\u2022\nIt is often unnecessary to directly use sockets\n\u2022\nOther library modules simplify use\n\u2022\nHowever, those modules assume some\nknowledge of the basic concepts (addresses,\nports, TCP, UDP, etc.)\n\u2022\nWill see more in the next few sections...\n1- 55\nCopyright (C) 2010, http://www.dabeaz.com\n31\nSection 2\nClient Programming\nOverview\n\u2022\nPython has library modules for interacting with\na variety of standard internet services\n\u2022\nHTTP, FTP, SMTP, NNTP, XML-RPC, etc.\n\u2022\nIn this section we're going to look at how some\nof these library modules work\n\u2022\nMain focus is on the web (HTTP)\n2- 2\nCopyright (C) 2010, http://www.dabeaz.com\n32\nurllib Module\n\u2022\nA high level module that allows clients to\nconnect a variety of internet services\n\u2022\nHTTP\n\u2022\nHTTPS\n\u2022\nFTP\n\u2022\nLocal files\n\u2022\nWorks with typical URLs on the web...\n2- 3\nCopyright (C) 2010, http://www.dabeaz.com\nurllib Module\n\u2022\nOpen a web page: urlopen()\n>>> import urllib\n>>> u = urllib.urlopen(\"http://www.python/org/index.html\")\n>>> data = u.read()\n>>> print data\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML ...\n...\n>>>\n\u2022\nurlopen() returns a file-like object\n\u2022\nRead from it to get downloaded data\n2- 4\nCopyright (C) 2010, http://www.dabeaz.com\n33\nurllib protocols\n\u2022\nSupported protocols\nu = urllib.urlopen(\"http://www.foo.com\")\nu = urllib.urlopen(\"https://www.foo.com/private\")\nu = urllib.urlopen(\"ftp://ftp.foo.com/README\")\nu = urllib.urlopen(\"file:///Users/beazley/blah.txt\")\n\u2022\nNote: HTTPS only supported if Python\nconfigured with support for OpenSSL\n2- 5\nCopyright (C) 2010, http://www.dabeaz.com\nHTML Forms\n\u2022\nOne use of urllib is to automate forms\n\u2022\nExample HTML source for the form\n<FORM ACTION=\"/subscribe\" METHOD=\"POST\">\nYour name: <INPUT type=\"text\" name=\"name\" size=\"30\"><br>\nYour email: <INPUT type=\"text\" name=\"email\" size=\"30\"><br>\n<INPUT type=\"submit\" name=\"submit-button\" value=\"Subscribe\">\n2- 6\nCopyright (C) 2010, http://www.dabeaz.com\n34\nHTML Forms\n\u2022\nWithin the form, you will find an action and\nnamed parameters for the form fields\n<FORM ACTION=\"/subscribe\" METHOD=\"POST\">\nYour name: <INPUT type=\"text\" name=\"name\" size=\"30\"><br>\nYour email: <INPUT type=\"text\" name=\"email\" size=\"30\"><br>\n<INPUT type=\"submit\" name=\"submit-button\" value=\"Subscribe\">\n\u2022\nAction (a URL)\nhttp://somedomain.com/subscribe\n\u2022\nParameters:\nname\nemail\n2- 7\nCopyright (C) 2010, http://www.dabeaz.com\nWeb Services\n\u2022\nAnother use of urllib is to access web services\n\u2022\nDownloading maps\n\u2022\nStock quotes\n\u2022\nEmail messages\n\u2022\nMost of these are controlled and accessed in\nthe same manner as a form\n\u2022\nThere is a particular request and expected set\nof parameters for different operations\n2- 8\nCopyright (C) 2010, http://www.dabeaz.com\n35\nParameter Encoding\n\u2022\nurlencode()\n\u2022\nTakes a dictionary of fields and creates a\nURL-encoded string of parameters\nfields = {\n'name' : 'Dave',\n'email' : 'dave@dabeaz.com'\n}\nparms = urllib.urlencode(fields)\n\u2022\nSample result\n>>> parms\n'name=Dave&email=dave%40dabeaz.com'\n>>>\n2- 9\nCopyright (C) 2010, http://www.dabeaz.com\nSending Parameters\n\u2022\nCase 1 : GET Requests\n<FORM ACTION=\"/subscribe\" METHOD=\"GET\">\nYour name: <INPUT type=\"text\" name=\"name\" size=\"30\"><br>\nYour email: <INPUT type=\"text\" name=\"email\" size=\"30\"><br>\n<INPUT type=\"submit\" name=\"submit-button\" value=\"Subscribe\">\n\u2022\nExample code:\nfields = { ... }\nparms = urllib.urlencode(fields)\nu = urllib.urlopen(\"http://somedomain.com/subscribe?\"+parms)\nYou create a long URL by concatenating\nthe request with the parameters\nhttp://somedomain.com/subscribe?name=Dave&email=dave%40dabeaz.com\n2- 10\nCopyright (C) 2010, http://www.dabeaz.com\n36\nSending Parameters\n\u2022\nCase 2 : POST Requests\n<FORM ACTION=\"/subscribe\" METHOD=\"POST\">\nYour name: <INPUT type=\"text\" name=\"name\" size=\"30\"><br>\nYour email: <INPUT type=\"text\" name=\"email\" size=\"30\"><br>\n<INPUT type=\"submit\" name=\"submit-button\" value=\"Subscribe\">\n\u2022\nExample code:\nfields = { ... }\nparms = urllib.urlencode(fields)\nu = urllib.urlopen(\"http://somedomain.com/subscribe\", parms)\nParameters get uploaded separately\nas part of the request body\nPOST /subscribe HTTP/1.0\n...\nname=Dave&email=dave%40dabeaz.com\n2- 11\nCopyright (C) 2010, http://www.dabeaz.com\nResponse Data\n\u2022\nTo read response data, treat the result of\nurlopen() as a file object\n>>> u = urllib.urlopen(\"http://www.python.org\")\n>>> data = u.read()\n>>>\n\u2022\nBe aware that the response data consists of\nthe raw bytes transmitted\n\u2022\nIf there is any kind of extra encoding (e.g.,\nUnicode), you will need to decode the data\nwith extra processing steps.\n2- 12\nCopyright (C) 2010, http://www.dabeaz.com\n37\nResponse Headers\n\u2022\nHTTP headers are retrieved using .info()\n>>> u = urllib.urlopen(\"http://www.python.org\")\n>>> headers = u.info()\n>>> headers\n<httplib.HTTPMessage instance at 0x1118828>\n>>> headers.keys()\n['content-length', 'accept-ranges', 'server',\n'last-modified', 'connection', 'etag', 'date',\n'content-type']\n>>> headers['content-length']\n'13597'\n>>> headers['content-type']\n'text/html'\n>>>\n\u2022\nA dictionary-like object\n2- 13\nCopyright (C) 2010, http://www.dabeaz.com\nResponse Status\n\u2022\nurlopen() ignores HTTP status codes (i.e.,\nerrors are silently ignored)\n\u2022\nCan manually check the response code\nu = urllib.urlopen(\"http://www.python.org/java\")\nif u.code == 200:\n# success\n...\nelif u.code == 404:\n# Not found!\n...\nelif u.code == 403:\n# Forbidden\n...\n\u2022\nUnfortunately a little clumsy (fixed shortly)\n2- 14\nCopyright (C) 2010, http://www.dabeaz.com\n38\nExercise 2.1\nTime : 15 Minutes\n2- 15\nCopyright (C) 2010, http://www.dabeaz.com\nurllib Limitations\n\u2022\nurllib only works with simple cases\n\u2022\nDoes not support cookies\n\u2022\nDoes not support authentication\n\u2022\nDoes not report HTTP errors gracefully\n\u2022\nOnly supports GET/POST requests\n2- 16\nCopyright (C) 2010, http://www.dabeaz.com\n39\nurllib2 Module\n\u2022\nurllib2 - The sequel to urllib\n\u2022\nBuilds upon and expands urllib\n\u2022\nCan interact with servers that require\ncookies, passwords, and other details\n\u2022\nBetter error handling (uses exceptions)\n\u2022\nIs the preferred library for modern code\n2- 17\nCopyright (C) 2010, http://www.dabeaz.com\nurllib2 Example\n\u2022\nurllib2 provides urlopen() as before\n>>> import urllib2\n>>> u = urllib2.urlopen(\"http://www.python.org/index.html\")\n>>> data = u.read()\n>>>\n\u2022\nHowever, the module expands functionality\nin two primary areas\n\u2022\nRequests\n\u2022\nOpeners\n2- 18\nCopyright (C) 2010, http://www.dabeaz.com\n40\nurllib2 Requests\n\u2022\nRequests are now objects\n>>> r = urllib2.Request(\"http://www.python.org\")\n>>> u = urllib2.urlopen(r)\n>>> data = u.read()\n\u2022\nRequests can have additional attributes added\n\u2022\nUser data (for POST requests)\n\u2022\nCustomized HTTP headers\n2- 19\nCopyright (C) 2010, http://www.dabeaz.com\nRequests with Data\n\u2022\nCreate a POST request with user data\ndata = {\n'name' : 'dave',\n'email' : 'dave@dabeaz.com'\n}\nr = urllib2.Request(\"http://somedomain.com/subscribe\",\nurllib.urlencode(data))\nu = urllib2.urlopen(r)\nresponse = u.read()\n\u2022\nNote : You still use urllib.urlencode() from the\nolder urllib library\n2- 20\nCopyright (C) 2010, http://www.dabeaz.com\n41\nRequest Headers\n\u2022\nAdding/Modifying client HTTP headers\nheaders = {\n'User-Agent' : 'Mozilla/4.0 (compatible; MSIE 7.0;\nWindows NT 5.1; .NET CLR 2.0.50727)'\n}\nr = urllib2.Request(\"http://somedomain.com/\",\nheaders=headers)\nu = urllib2.urlopen(r)\nresponse = u.read()\n\u2022\nThis can be used if you need to emulate a\nspecific client (e.g., Internet Explorer, etc.)\n2- 21\nCopyright (C) 2010, http://www.dabeaz.com\nurllib2 Error Handling\n\u2022\nHTTP Errors are reported as exceptions\n>>> u = urllib2.urlopen(\"http://www.python.org/perl\")\nTraceback...\nurllib2.HTTPError: HTTP Error 404: Not Found\n>>>\n\u2022\nCatching an error\ntry:\nu = urllib2.urlopen(url)\nexcept urllib2.HTTPError,e:\ncode = e.code # HTTP error code\n\u2022\nNote: urllib2 automatically tries to handle\nredirection and certain HTTP responses\n2- 22\nCopyright (C) 2010, http://www.dabeaz.com\n42\nurllib2 Openers\n\u2022\nThe function urlopen() is an \"opener\"\n\u2022\nIt knows how to open a connection, interact\nwith the server, and return a response.\n\u2022\nIt only has a few basic features---it does not\nknow how to deal with cookies and passwords\n\u2022\nHowever, you can make your own opener\nobjects with these features enabled\n2- 23\nCopyright (C) 2010, http://www.dabeaz.com\nurllib2 build_opener()\n\u2022\nbuild_opener() makes an custom opener\n# Make a URL opener with cookie support\nopener = urllib2.build_opener(\nurllib2.HTTPCookieProcessor()\n)\nu = opener.open(\"http://www.python.org/index.html\")\n\u2022\nCan add a set of new features from this list\nCacheFTPHandler\nHTTPBasicAuthHandler\nHTTPCookieProcessor\nHTTPDigestAuthHandler\nProxyHandler\nProxyBasicAuthHandler\nProxyDigestAuthHandler\n2- 24\nCopyright (C) 2010, http://www.dabeaz.com\n43\nExample : Login Cookies\nfields = {\n'txtUsername' : 'dave',\n'txtPassword' : '12345',\n'submit_login' : 'Log In'\n}\nopener = urllib2.build_opener(\nurllib2.HTTPCookieProcessor()\n)\nrequest = urllib2.Request(\n\"http://somedomain.com/login.asp\",\nurllib.urlencode(fields))\n# Login\nu = opener.open(request)\nresp = u.read()\n# Get a page, but use cookies returned by initial login\nu = opener.open(\"http://somedomain.com/private.asp\")\nresp = u.read()\n2- 25\nCopyright (C) 2010, http://www.dabeaz.com\nDiscussion\n\u2022\nurllib2 module has a huge number of options\n\u2022\nDifferent configurations\n\u2022\nFile formats, policies, authentication, etc.\n\u2022\nWill have to consult reference for everything\n2- 26\nCopyright (C) 2010, http://www.dabeaz.com\n44\nExercise 2.2\nTime : 15 Minutes\nPassword: guido456\n2- 27\nCopyright (C) 2010, http://www.dabeaz.com\nLimitations\n\u2022\nurllib and urllib2 are useful for fetching files\n\u2022\nHowever, neither module provides support for\nmore advanced operations\n\u2022\nExamples:\n\u2022\nUploading to an FTP server\n\u2022\nFile-upload via HTTP Post\n\u2022\nOther HTTP methods (e.g., HEAD, PUT)\n2- 28\nCopyright (C) 2010, http://www.dabeaz.com\n45\nftplib\n\u2022\nA module for interacting with FTP servers\n\u2022\nExample : Capture a directory listing\n>>> import ftplib\n>>> f = ftplib.FTP(\"ftp.gnu.org\",\"anonymous\",\n... \"dave@dabeaz.com\")\n>>> files = []\n>>> f.retrlines(\"LIST\",files.append)\n'226 Directory send OK.'\n>>> len(files)\n15\n>>> files[0]\n'-rw-r--r-- 1 0 0 1765 Feb 20 16:47 README'\n>>>\n2- 29\nCopyright (C) 2010, http://www.dabeaz.com\nUpload to a FTP Server\nhost = \"ftp.foo.com\"\nusername = \"dave\"\npassword = \"1235\"\nfilename = \"somefile.dat\"\nimport ftplib\nftp_serv = ftplib.FTP(host,username,password)\n# Open the file you want to send\nf = open(filename,\"rb\")\n# Send it to the FTP server\nresp = ftp_serv.storbinary(\"STOR \"+filename, f)\n# Close the connection\nftp_serv.close()\n2- 30\nCopyright (C) 2010, http://www.dabeaz.com\n46\nhttplib\n\u2022\nA module for implementing the client side of an\nHTTP connection\nimport httplib\nc = httplib.HTTPConnection(\"www.python.org\",80)\nc.putrequest(\"HEAD\",\"/tut/tut.html\")\nc.putheader(\"Someheader\",\"Somevalue\")\nc.endheaders()\nr = c.getresponse()\ndata = r.read()\nc.close()\n\u2022\nLow-level control over HTTP headers, methods,\ndata transmission, etc.\n2- 31\nCopyright (C) 2010, http://www.dabeaz.com\nsmtplib\n\u2022\nA module for sending email messages\nimport smtplib\nserv = smtplib.SMTP()\nserv.connect()\nmsg = \"\"\"\\\nFrom: dave@dabeaz.com\nTo: bob@yahoo.com\nSubject: Get off my lawn!\nBlah blah blah\"\"\"\nserv.sendmail(\"dave@dabeaz.com\",['bob@yahoo.com'],msg)\n\u2022\nUseful if you want to have a program send you a\nnotification, send email to customers, etc.\n2- 32\nCopyright (C) 2010, http://www.dabeaz.com\n47\nExercise 2.3\nTime : 15 Minutes\n2- 33\nCopyright (C) 2010, http://www.dabeaz.com\n48\nSection 3\nInternet Data Handling\nOverview\n\u2022\nIf you write network clients, you will have to\nworry about a variety of common file formats\n\u2022\nCSV, HTML, XML, JSON, etc.\n\u2022\nIn this section, we briefly look at library\nsupport for working with such data\n3- 2\nCopyright (C) 2010, http://www.dabeaz.com\n49\nCSV Files\n\u2022\nComma Separated Values\nElwood,Blues,\"1060 W Addison,Chicago 60637\",110\nMcGurn,Jack,\"4902 N Broadway,Chicago 60640\",200\n\u2022\nParsing with the CSV module\nimport csv\nf = open(\"schmods.csv\",\"r\")\nfor row in csv.reader(f):\n# Do something with items in row\n...\n\u2022\nUnderstands quoting, various subtle details\n3- 3\nCopyright (C) 2010, http://www.dabeaz.com\nParsing HTML\n\u2022\nSuppose you want to parse HTML (maybe\nobtained via urlopen)\n\u2022\nUse the HTMLParser module\n\u2022\nA library that processes HTML using an\n\"event-driven\" programming style\n3- 4\nCopyright (C) 2010, http://www.dabeaz.com\n50\nParsing HTML\n\u2022\nDefine a class that inherits from HTMLParser\nand define a set of methods that respond to\ndifferent document features\nfrom HTMLParser import HTMLParser\nclass MyParser(HTMLParser):\ndef handle_starttag(self,tag,attrs):\n...\ndef handle_data(self,data):\n...\ndef handle_endtag(self,tag):\n...\nstarttag data endttag\n<tag attr=\"value\" attr=\"value\">data</tag>\n3- 5\nCopyright (C) 2010, http://www.dabeaz.com\nRunning a Parser\n\u2022\nTo run the parser, you create a parser object\nand feed it some data\n# Fetch a web page\nimport urllib\nu = urllib.urlopen(\"http://www.example.com\")\ndata = u.read()\n# Run it through the parser\np = MyParser()\np.feed(data)\n\u2022\nThe parser will scan through the data and\ntrigger the various handler methods\n3- 6\nCopyright (C) 2010, http://www.dabeaz.com\n51\nHTML Example\n\u2022\nAn example: Gather all links\nfrom HTMLParser import HTMLParser\nclass GatherLinks(HTMLParser):\ndef __init__(self):\nHTMLParser.__init__(self)\nself.links = []\ndef handle_starttag(self,tag,attrs):\nif tag == 'a':\nfor name,value in attrs:\nif name == 'href':\nself.links.append(value)\n3- 7\nCopyright (C) 2010, http://www.dabeaz.com\nHTML Example\n\u2022\nRunning the parser\n>>> parser = GatherLinks()\n>>> import urllib\n>>> data = urllib.urlopen(\"http://www.python.org\").read()\n>>> parser.feed(data)\n>>> for x in parser.links:\n... print x\n/search/\n/about\n/news/\n/doc/\n/download/\n...\n>>>\n3- 8\nCopyright (C) 2010, http://www.dabeaz.com\n52\nXML Parsing with SAX\n\u2022\nThe event-driven style used by HTMLParser is\nsometimes used to parse XML\n\u2022\nBasis of the SAX parsing interface\n\u2022\nAn approach sometimes seen when dealing\nwith large XML documents since it allows for\nincremental processing\n3- 9\nCopyright (C) 2010, http://www.dabeaz.com\nBrief XML Refresher\n\u2022\nXML documents use structured markup\n<contact>\n<name>Elwood Blues</name>\n<address>1060 W Addison</address>\n<city>Chicago</city>\n<zip>60616</zip>\n</contact>\n\u2022\nDocuments made up of elements\n<name>Elwood Blues</name>\n\u2022\nElements have starting/ending tags\n\u2022\nMay contain text and other elements\n3- 10\nCopyright (C) 2010, http://www.dabeaz.com\n53\nSAX Parsing\n\u2022\nDefine a special handler class\nimport xml.sax\nclass MyHandler(xml.sax.ContentHandler):\ndef startDocument(self):\nprint \"Document start\"\ndef startElement(self,name,attrs):\nprint \"Start:\", name\ndef characters(self,text):\nprint \"Characters:\", text\ndef endElement(self,name):\nprint \"End:\", name\n\u2022\nIn the class, you define methods that capture\nelements and other parts of the document\n3- 11\nCopyright (C) 2010, http://www.dabeaz.com\nSAX Parsing\n\u2022\nTo parse a document, you create an instance\nof the handler and give it to the parser\n# Create the handler object\nhand = MyHandler()\n# Parse a document using the handler\nxml.sax.parse(\"data.xml\",hand)\n\u2022\nThis reads the file and calls handler methods\nas different document elements are\nencountered (start tags, text, end tags, etc.)\n3- 12\nCopyright (C) 2010, http://www.dabeaz.com\n54\nExercise 3.1\nTime : 15 Minutes\n3- 13\nCopyright (C) 2010, http://www.dabeaz.com\nXML and ElementTree\n\u2022\nxml.etree.ElementTree module is one of\nthe easiest ways to parse XML\n\u2022\nLets look at the highlights\n3- 14\nCopyright (C) 2010, http://www.dabeaz.com\n55\netree Parsing Basics\n\u2022\nParsing a document\nfrom xml.etree.ElementTree import parse\ndoc = parse(\"recipe.xml\")\n\u2022\nThis builds a complete parse tree of the\nentire document\n\u2022\nTo extract data, you will perform various\nkinds of queries on the document object\n3- 15\nCopyright (C) 2010, http://www.dabeaz.com\netree Parsing Basics\n\u2022\nA mini-reference for extracting data\n\u2022\nFinding one or more elements\nelem = doc.find(\"title\")\nfor elem in doc.findall(\"ingredients/item\"):\nstatements\n\u2022\nElement attributes and properties\nelem.tag # Element name\nelem.text # Element text\nelem.get(aname [,default]) # Element attributes\n3- 16\nCopyright (C) 2010, http://www.dabeaz.com\n56\nObtaining Elements\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<recipe>\n<title>Famous Guacamole</title>\n<description>\nA southwest favorite!\n</description>\n<ingredients>\n<item num=\"2\">Large avocados, chopped</item>\n<item num=\"1\">Tomadtooc, =c hpopapresde<(/\"irteemc>ipe.xml\")\n<item num=\"1/2\" undietssc=_\"eCl\">eWmh i=t ed oonci.ofni,n dc(ho\"pdpeesdc<r/iitpetmi>on\")\n<item num=\"1\" unitdse=s\"ct_btle\">xFtr e=s hd esqsuce_eezleedm l.etmeoxnt juice</item>\n<item num=\"1\">Jalapeno pepper, diced</item>\nor\n<item num=\"1\" units=\"tbl\">Fresh cilantro, minced</item>\n<item num=\"3\" units=\"tsp\">Sea Salt</item>\n<item num=\"6\" unitdso=c\" b=o tptlaerss\"e>(I\"cre-eccoilpde .bxeemrl<\"/)item>\n</ingredients> desc_text = doc.findtext(\"description\")\n<directions>\nCombine all ingredients and hand whisk to desired consistency.\nServe and enjoy with ice-cold beers.\n</directions>\n</recipe>\n3- 17\nCopyright (C) 2010, http://www.dabeaz.com\nIterating over Elements\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\ndoc = parse(\"recipe.xml\")\n<recipe>\n<title>Famous Guacfaomrol ei<t/etmi tilen> doc.findall(\"ingredients/item\"):\n<description> statements\nA southwest favorite!\n</description>\n<ingredients>\n<item num=\"2\">Large avocados, chopped</item>\n<item num=\"1\">Tomato, chopped</item>\n<item num=\"1/2\" units=\"C\">White onion, chopped</item>\n<item num=\"1\" units=\"tbl\">Fresh squeezed lemon juice</item>\n<item num=\"1\">Jalapeno pepper, diced</item>\n<item num=\"1\" units=\"tbl\">Fresh cilantro, minced</item>\n<item num=\"3\" units=\"tsp\">Sea Salt</item>\n<item num=\"6\" units=\"bottles\">Ice-cold beer</item>\n</ingredients>\n<directions>\nCombine all ingredients and hand whisk to desired consistency.\nServe and enjoy with ice-cold beers.\n</directions>\n</recipe>\n3- 18\nCopyright (C) 2010, http://www.dabeaz.com\n57\nElement Attributes\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<recipe>\n<title>Famous Guacamole</title>\n<description>\nA southwest favorite!\n</description>\n<ingredients>\n<item num=\"2\">Large avocados, chopped</item>\nf<oirt eimt enumm =i\"n1 \"d>oTocm.aftion,d achlolp(p\"eidn<g/irteedmi>ents/item\"):\n< i t enmu mnu m = \"=1 /i2t\" eumn.igtest=(\"C\"\"n>uWmh\"i)te onion, chopped</item>\n< i t eumn inutms= \"=1 \"i tuneimt.sg=e\"tt(bl\"\"u>nFirtess\"h )squeezed lemon juice</item>\n<item num=\"1\">Jalapeno pepper, diced</item>\n<item num=\"1\" units=\"tbl\">Fresh cilantro, minced</item>\n<item num=\"3\" units=\"tsp\">Sea Salt</item>\n<item num=\"6\" units=\"bottles\">Ice-cold beer</item>\n</ingredients>\n<directions>\nCombine all ingredients and hand whisk to desired consistency.\nServe and enjoy with ice-cold beers.\n</directions>\n</recipe>\n3- 19\nCopyright (C) 2010, http://www.dabeaz.com\nSearch Wildcards\n\u2022\nSpecifying a wildcard for an element name\nitems = doc.findall(\"*/item\")\nitems = doc.findall(\"ingredients/*\")\n\u2022\nThe * wildcard only matches a single element\n\u2022\nUse multiple wildcards for nesting\n<?xml version=\"1.0\"?>\n<top>\n<a>\n<b> c = doc.findall(\"*/*/c\")\n<c>text</c> c = doc.findall(\"a/*/c\")\n</b> c = doc.findall(\"*/b/c\")\n</a>\n</top>\n3- 20\nCopyright (C) 2010, http://www.dabeaz.com\n58\nSearch Wildcards\n\u2022\nWildcard for multiple nesting levels (//)\nitems = doc.findall(\"//item\")\n\u2022\nMore examples\n<?xml version=\"1.0\"?>\n<top>\n<a>\n<b>\nc = doc.findall(\"//c\")\n<c>text</c>\nc = doc.findall(\"a//c\")\n</b>\n</a>\n</top>\n3- 21\nCopyright (C) 2010, http://www.dabeaz.com\ncElementTree\n\u2022\nThere is a C implementation of the library\nthat is significantly faster\nimport xml.etree.cElementTree\ndoc = xml.etree.cElementTree.parse(\"data.xml\")\n\u2022\nFor all practical purposes, you should use\nthis version of the library given a choice\n\u2022\nNote : The C version lacks a few advanced\ncustomization features, but you probably\nwon't need them\n3- 22\nCopyright (C) 2010, http://www.dabeaz.com\n59\nTree Modification\n\u2022\nElementTree allows modifications to be\nmade to the document structure\n\u2022\nTo add a new child to a parent node\nnode.append(child)\n\u2022\nTo insert a new child at a selected position\nnode.insert(index,child)\n\u2022\nTo remove a child from a parent node\nnode.remove(child)\n3- 23\nCopyright (C) 2010, http://www.dabeaz.com\nTree Output\n\u2022\nIf you modify a document, it can be rewritten\n\u2022\nThere is a method to write XML\ndoc = xml.etree.ElementTree.parse(\"input.xml\")\n# Make modifications to doc\n...\n# Write modified document back to a file\nf = open(\"output.xml\",\"w\")\ndoc.write(f)\n\u2022\nIndividual elements can be turned into strings\ns = xml.etree.ElementTree.tostring(node)\n3- 24\nCopyright (C) 2010, http://www.dabeaz.com\n60\nIterative Parsing\n\u2022\nAn alternative parsing interface\nfrom xml.etree.ElementTree import iterparse\nparse = iterparse(\"file.xml\", ('start','end'))\nfor event, elem in parse:\nif event == 'start':\n# Encountered an start <tag ...>\n...\nelif event == 'end':\n# Encountered an end </tag>\n...\n\u2022\nThis sweeps over an entire XML document\n\u2022\nResult is a sequence of start/end events and\nelement objects being processed\n3- 25\nCopyright (C) 2010, http://www.dabeaz.com\nIterative Parsing\n\u2022\nIf you combine iterative parsing and tree\nmodification together, you can process\nlarge XML documents with almost no\nmemory overhead\n\u2022\nProgramming interface is significantly easier\nto use than a similar approach using SAX\n\u2022\nGeneral idea : Simply throw away the\nelements no longer needed during parsing\n3- 26\nCopyright (C) 2010, http://www.dabeaz.com\n61\nIterative Parsing\n\u2022\nProgramming pattern\nfrom xml.etree.ElementTree import iterparse\nparser = iterparse(\"file.xml\",('start','end'))\nfor event,elem in parser:\nif event == 'start':\nif elem.tag == 'parenttag':\nparent = elem\nif event == 'end':\nif elem.tag == 'tagname':\n# process element with tag 'tagname'\n...\n# Discard the element when done\nparent.remove(elem)\n\u2022\nThe last step is the critical part\n3- 27\nCopyright (C) 2010, http://www.dabeaz.com\nExercise 3.2\nTime : 15 Minutes\n3- 28\nCopyright (C) 2010, http://www.dabeaz.com\n62\nJSON\n\u2022\nJavascript Object Notation\n\u2022\nA data encoding commonly used on the\nweb when interacting with Javascript\n\u2022\nSometime preferred over XML because it's\nless verbose and faster to parse\n\u2022\nSyntax is almost identical to a Python dict\n3- 29\nCopyright (C) 2010, http://www.dabeaz.com\nSample JSON File\n{\n\"recipe\" : {\n\"title\" : \"Famous Guacomole\",\n\"description\" : \"A southwest favorite!\",\n\"ingredients\" : [\n{\"num\": \"2\", \"item\":\"Large avocados, chopped\"},\n{\"num\": \"1/2\", \"units\":\"C\", \"item\":\"White onion, chopped\"},\n! {\"num\": \"1\", \"units\":\"tbl\", \"item\":\"Fresh squeezed lemon juice\"},\n! {\"num\": \"1\", \"item\":\"Jalapeno pepper, diced\"},\n! {\"num\": \"1\", \"units\":\"tbl\", \"item\":\"Fresh cilantro, minced\"},\n! {\"num\": \"3\", \"units\":\"tsp\", \"item\":\"Sea Salt\"},\n! {\"num\": \"6\", \"units\":\"bottles\",\"item\":\"Ice-cold beer\"}\n! ],\n\"directions\" : \"Combine all ingredients and hand whisk to desired\nconsistency. Serve and enjoy with ice-cold beers.\"\n}\n}\n3- 30\nCopyright (C) 2010, http://www.dabeaz.com\n63\nProcessing JSON Data\n\u2022\nParsing a JSON document\nimport json\ndoc = json.load(open(\"recipe.json\"))\n\u2022\nResult is a collection of nested dict/lists\ningredients = doc['recipe']['ingredients']\nfor item in ingredients:\n# Process item\n...\n\u2022\nDumping a dictionary as JSON\nf = open(\"file.json\",\"w\")\njson.dump(doc,f)\n3- 31\nCopyright (C) 2010, http://www.dabeaz.com\nExercise 3.3\nTime : 15 Minutes\n3- 32\nCopyright (C) 2010, http://www.dabeaz.com\n64\nSection 4\nWeb Programming Basics\nIntroduction\n\u2022\nThe web is (obviously) so pervasive,\nknowing how to write simple web-based\napplications is basic knowledge that all\nprogrammers should know about\n\u2022\nIn this section, we cover the absolute\nbasics of how to make a Python program\naccessible through the web\n4- 2\nCopyright (C) 2010, http://www.dabeaz.com\n65\nOverview\n\u2022\nSome basics of Python web programming\n\u2022\nHTTP Protocol\n\u2022\nCGI scripting\n\u2022\nWSGI (Web Services Gateway Interface)\n\u2022\nCustom HTTP servers\n4- 3\nCopyright (C) 2010, http://www.dabeaz.com\nDisclaimer\n\u2022\nWeb programming is a huge topic that\ncould span an entire multi-day class\n\u2022\nIt might mean different things\n\u2022\nBuilding an entire website\n\u2022\nImplementing a web service\n\u2022\nOur focus is on some basic mechanisms\nfound in the Python standard library that all\nPython programmers should know about\n4- 4\nCopyright (C) 2010, http://www.dabeaz.com\n66\nHTTP Explained\n\u2022\nHTTP is the underlying protocol of the web\n\u2022\nConsists of requests and responses\nGET /index.html\nBrowser 200 OK Web Server\n...\n<content>\n4- 5\nCopyright (C) 2010, http://www.dabeaz.com\nHTTP Client Requests\n\u2022\nClient (Browser) sends a request\nGET /index.html HTTP/1.1\nHost: www.python.org\nUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3\nAccept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive: 300\nConnection: keep-alive\n<blank line>\n\u2022\nRequest line followed by headers that provide\nadditional information about the client\n4- 6\nCopyright (C) 2010, http://www.dabeaz.com\n67\nHTTP Responses\n\u2022\nServer sends back a response\nHTTP/1.1 200 OK\nDate: Thu, 26 Apr 2007 19:54:01 GMT\nServer: Apache/2.0.54 (Debian GNU/Linux) DAV/2 SVN/1.1.4 mod_python/3.1.3 Python/2.3.5 mod_ssl/2.0.54 OpenSSL/\nLast-Modified: Thu, 26 Apr 2007 18:40:24 GMT\nAccept-Ranges: bytes\nContent-Length: 14315\nConnection: close\nContent-Type: text/html\n<HTML>\n...\n\u2022\nResponse line followed by headers that\nfurther describe the response contents\n4- 7\nCopyright (C) 2010, http://www.dabeaz.com\nHTTP Protocol\n\u2022\nThere are a small number of request types\nGET\nPOST\nHEAD\nPUT\n\u2022\nThere are standardized response codes\n200 OK\n403 Forbidden\n404 Not Found\n501 Not implemented\n...\n\u2022\nBut, this isn't an exhaustive tutorial\n4- 8\nCopyright (C) 2010, http://www.dabeaz.com\n68\nContent Encoding\n\u2022\nContent is described by these header fields:\nContent-type:\nContent-length:\n\u2022\nExample:\nContent-type: image/jpeg\nContent-length: 12422\n\u2022\nOf these, Content-type is the most critical\n\u2022\nLength is optional, but it's polite to include it if\nit can be determined in advance\n4- 9\nCopyright (C) 2010, http://www.dabeaz.com\nPayload Packaging\n\u2022\nResponses must follow this formatting\nHeaders\n...\nContent-type: image/jpeg\nContent-length: 12422\n...\n\\r\\n (Blank Line)\nContent\n(12422 bytes)\n4- 10\nCopyright (C) 2010, http://www.dabeaz.com\n69\nExercise 4.1\nTime : 10 Minutes\n4- 11\nCopyright (C) 2010, http://www.dabeaz.com\nRole of Python\n\u2022\nMost web-related Python programming\npertains to the operation of the server\nGET /index.html\nFirefox Web Server\nSafari\nApache\nInternet Explorer Python\netc. MySQL\netc.\n\u2022\nPython scripts used on the server to create,\nmanage, or deliver content back to clients\n4- 12\nCopyright (C) 2010, http://www.dabeaz.com\n70\nTypical Python Tasks\n\u2022\nStatic content generation. One-time\ngeneration of static web pages to be served\nby a standard web server such as Apache.\n\u2022\nDynamic content generation. Python scripts\nthat produce output in response to requests\n(e.g., form processing, CGI scripting).\n4- 13\nCopyright (C) 2010, http://www.dabeaz.com\nContent Generation\n\u2022\nIt is often overlooked, but Python is a useful\ntool for simply creating static web pages\n\u2022\nExample : Taking various pages of content,\nadding elements, and applying a common\nformat across all of them.\n\u2022\nWeb server simply delivers all of the generated\ncontent as normal files\n4- 14\nCopyright (C) 2010, http://www.dabeaz.com\n71\nExample : Page Templates\n\u2022\nCreate a page \"template\" file\n<html>\n<body>\n<table width=700>\n<tr><td>\n! Your Logo : Navigation Links\n! <hr>\n! </td></tr>\nNote the\n<tr><td>\nspecia!l $content\n$variab!le <hr>\n! <em>Copyright (C) 2008</em>\n! </td></tr>\n</table>\n</body>\n</html>\n4- 15\nCopyright (C) 2010, http://www.dabeaz.com\nExample : Page Templates\n\u2022\nUse template strings to render pages\nfrom string import Template\n# Read the template string\npagetemplate = Template(open(\"template.html\").read())\n# Go make content\npage = make_content()\n# Render the template to a file\nf = open(outfile,\"w\")\nf.write(pagetemplate.substitute(content=page))\n\u2022\nKey idea : If you want to change the\nappearance, you just change the template\n4- 16\nCopyright (C) 2010, http://www.dabeaz.com\n72\nCommentary\n\u2022\nUsing page templates to generate static\ncontent is extremely common\n\u2022\nFor simple things, just use the standard library\nmodules (e.g., string.Template)\n\u2022\nFor more advanced applications, there are\nnumerous third-party template packages\n4- 17\nCopyright (C) 2010, http://www.dabeaz.com\nExercise 4.2\nTime : 10 Minutes\n4- 18\nCopyright (C) 2010, http://www.dabeaz.com\n73\nHTTP Servers\n\u2022\nPython comes with libraries that implement\nsimple self-contained web servers\n\u2022\nVery useful for testing or special situations\nwhere you want web service, but don't want\nto install something larger (e.g., Apache)\n\u2022\nNot high performance, sometimes \"good\nenough\" is just that\n4- 19\nCopyright (C) 2010, http://www.dabeaz.com\nA Simple Web Server\n\u2022\nServe files from a directory\nfrom BaseHTTPServer import HTTPServer\nfrom SimpleHTTPServer import SimpleHTTPRequestHandler\nimport os\nos.chdir(\"/home/docs/html\")\nserv = HTTPServer((\"\",8080),SimpleHTTPRequestHandler)\nserv.serve_forever()\n\u2022\nThis creates a minimal web server\n\u2022\nConnect with a browser and try it out\n4- 20\nCopyright (C) 2010, http://www.dabeaz.com\n74\nExercise 4.3\nTime : 10 Minutes\n4- 21\nCopyright (C) 2010, http://www.dabeaz.com\nA Web Server with CGI\n\u2022\nServe files and allow CGI scripts\nfrom BaseHTTPServer import HTTPServer\nfrom CGIHTTPServer import CGIHTTPRequestHandler\nimport os\nos.chdir(\"/home/docs/html\")\nserv = HTTPServer((\"\",8080),CGIHTTPRequestHandler)\nserv.serve_forever()\n\u2022\nExecutes scripts in \"/cgi-bin\" and \"/htbin\"\ndirectories in order to create dynamic content\n4- 22\nCopyright (C) 2010, http://www.dabeaz.com\n75\nCGI Scripting\n\u2022\nCommon Gateway Interface\n\u2022\nA common protocol used by existing web\nservers to run server-side scripts, plugins\n\u2022\nExample: Running Python, Perl, Ruby scripts\nunder Apache, etc.\n\u2022\nClassically associated with form processing,\nbut that's far from the only application\n4- 23\nCopyright (C) 2010, http://www.dabeaz.com\nCGI Example\n\u2022\nA web-page might have a form on it\n\u2022\nHere is the underlying HTML code\n<FORM ACTION=\"/cgi-bin/subscribe.py\" METHOD=\"POST\">\nYour name: <INPUT type=\"text\" name=\"name\" size=\"30\"><br>\nYour email: <INPUT type=\"text\" name=\"email\" size=\"30\"><br>\n<INPUT type=\"submit\" name=\"submit-button\" value=\"Subscribe\">\nSpecifies a CGI program on the server\n4- 24\nCopyright (C) 2010, http://www.dabeaz.com\n76\nCGI Example\n\u2022\nForms have submitted fields or parameters\n<FORM ACTION=\"/cgi-bin/subscribe.py\" METHOD=\"POST\">\nYour name: <INPUT type=\"text\" name=\"name\" size=\"30\"><br>\nYour email: <INPUT type=\"text\" name=\"email\" size=\"30\"><br>\n<INPUT type=\"submit\" name=\"submit-button\" value=\"Subscribe\">\n\u2022\nA request will include both the URL (cgi-bin/\nsubscribe.py) along with the field values\n4- 25\nCopyright (C) 2010, http://www.dabeaz.com\nCGI Example\n\u2022\nRequest encoding looks like this:\nRequest POST /cgi-bin/subscribe.py HTTP/1.1\nUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS\nAccept: text/xml,application/xml,application/xhtml\nAccept-Language: en-us,en;q=0.5\n...\nQuery name=David+Beazley&email=dave%40dabeaz.com&submit-\nString button=Subscribe HTTP/1.1\n\u2022\nRequest tells the server what to run\n\u2022\nQuery string contains encoded form fields\n4- 26\nCopyright (C) 2010, http://www.dabeaz.com\n77\nCGI Mechanics\n\u2022\nCGI was originally implemented as a scheme\nfor launching processing scripts as a subprocess\nto a web server\n/cgi-bin/subscribe.py\nHTTP Server\n\u2022 stdin stdout\nScript will decode the\nPython\nrequest and carry out\nsome kind of action subscribe.py\n4- 27\nCopyright (C) 2010, http://www.dabeaz.com\nClassic CGI Interface\n\u2022\nServer populates environment variables with\ninformation about the request\nimport os\nos.environ['SCRIPT_NAME']\nos.environ['REMOTE_ADDR']\nos.environ['QUERY_STRING']\nos.environ['REQUEST_METHOD']\nos.environ['CONTENT_TYPE']\nos.environ['CONTENT_LENGTH']\nos.environ['HTTP_COOKIE']\n...\n\u2022\nstdin/stdout provide I/O link to server\nsys.stdin # Read to get data sent by client\nsys.stdout # Write to create the response\n4- 28\nCopyright (C) 2010, http://www.dabeaz.com\n78\nCGI Query Variables\n\u2022\nFor GET requests, an env. variable is used\nquery = os.environ['QUERY_STRING']\n\u2022\nFor POST requests, you read from stdin\nif os.environ['REQUEST_METHOD'] == 'POST':\nsize = int(os.environ['CONTENT_LENGTH'])\nquery = sys.stdin.read(size)\n\u2022\nThis yields the raw query string\nname=David+Beazley&email=dave\n%40dabeaz.com&submit-button=Subscribe\n4- 29\nCopyright (C) 2010, http://www.dabeaz.com\ncgi Module\n\u2022\nA utility library for decoding requests\n\u2022\nMajor feature: Getting the passed parameters\n#!/usr/bin/env python\n# subscribe.py\nimport cgi\nform = cgi.FieldStorage() Parse parameters\n# Get various field values\nname = form.getvalue('name')\nemail = form.getvalue('email')\n\u2022\nAll CGI scripts start like this\n\u2022\nFieldStorage parses the incoming request into\na dictionary-like object for extracting inputs\n4- 30\nCopyright (C) 2010, http://www.dabeaz.com\n79\nCGI Responses\n\u2022\nCGI scripts respond by simply printing\nresponse headers and the raw content\nname = form.getvalue('name')\nemail = form.getvalue('email')\n... do some kind of processing ...\n# Output a response\nprint \"Status: 200 OK\"\nprint \"Content-type: text/html\"\nprint\nprint \"<html><head><title>Success!</title></head><body>\"\nprint \"Hello %s, your email is %s\" % (name,email)\nprint \"</body>\"\n\u2022\nNormally you print HTML, but any kind of\ndata can be returned (for web services, you\nmight return XML, JSON, etc.)\n4- 31\nCopyright (C) 2010, http://www.dabeaz.com\nNote on Status Codes\n\u2022\nIn CGI, the server status code is set by\nincluding a special \"Status:\" header field\nimport cgi\nform = cgi.FieldStorage()\nname = form.getvalue('name')\nemail = form.getvalue('email')\n...\nprint \"Status: 200 OK\"\nprint \"Content-type: text/html\"\nprint\nprint \"<html><head><title>Success!</title></head><body>\"\nprint \"Hello %s, your email is %s\" % (name,email)\nprint \"</body>\"\n\u2022\nThis is a special server directive that sets the\nresponse status\n4- 32\nCopyright (C) 2010, http://www.dabeaz.com\n80\nCGI Commentary\n\u2022\nThere are many more minor details (consult\na reference on CGI programming)\n\u2022\nThe basic idea is simple\n\u2022\nServer runs a script\n\u2022\nScript receives inputs from\nenvironment variables and stdin\n\u2022\nScript produces output on stdout\n\u2022\nIt's old-school, but sometimes it's all you get\n4- 33\nCopyright (C) 2010, http://www.dabeaz.com\nExercise 4.4\nTime : 25 Minutes\n4- 34\nCopyright (C) 2010, http://www.dabeaz.com\n81\nWSGI\n\u2022\nWeb Services Gateway Interface (WSGI)\n\u2022\nThis is a standardized interface for creating\nPython web services\n\u2022\nAllows one to create code that can run under a\nwide variety of web servers and frameworks as\nlong as they also support WSGI (and most do)\n\u2022\nSo, what is WSGI?\n4- 35\nCopyright (C) 2010, http://www.dabeaz.com\nWSGI Interface\n\u2022\nWSGI is an application programming interface\nloosely based on CGI programming\n\u2022\nIn CGI, there are just two basic features\n\u2022\nGetting values of inputs (env variables)\n\u2022\nProducing output by printing\n\u2022\nWSGI takes this concept and repackages it into\na more modular form\n4- 36\nCopyright (C) 2010, http://www.dabeaz.com\n82\nWSGI Example\n\u2022\nWith WSGI, you write an \"application\"\n\u2022\nAn application is just a function (or callable)\ndef hello_app(environ, start_response):\nstatus = \"200 OK\"\nresponse_headers = [ ('Content-type','text/plain')]\nresponse = []\nstart_response(status,response_headers)\nresponse.append(\"Hello World\\n\")\nresponse.append(\"You requested :\"+environ['PATH_INFO]')\nreturn response\n\u2022\nThis function encapsulates the handling of some\nrequest that will be received\n4- 37\nCopyright (C) 2010, http://www.dabeaz.com\nWSGI Applications\n\u2022\nApplications always receive just two inputs\ndef hello_app(environ, start_response):\nstatus = \"200 OK\"\nresponse_headers = [ ('Content-type','text/plain')]\nresponse = []\nstart_response(status,response_headers)\nresponse.append(\"Hello World\\n\")\nresponse.append(\"You requested :\"+environ['PATH_INFO]')\nreturn response\n\u2022\nenviron - A dictionary of input parameters\n\u2022\nstart_response - A callable (e.g., function)\n4- 38\nCopyright (C) 2010, http://www.dabeaz.com\n83\nWSGI Environment\n\u2022\nThe environment contains CGI variables\ndef hello_app(environ, start_response):\nstatus = \"200 OK\"\nresponse_headers = [ ('Content-type','text/plain')]\nresponse = []\nenviron['REQUEST_METHOD']\nenviron['SCRIPT_NAME']\nstart_response(status,response_headers)\nenviron['PATH_INFO']\nresponse.append(\"Hello World\\n\")\nenviron['QUERY_STRING']\nresponse.append(\"You requested :\"+environ['PATH_INFO]')\nenviron['CONTENT_TYPE']\nreturn response\nenviron['CONTENT_LENGTH']\nenviron['SERVER_NAME']\n...\n\u2022\nThe meaning and values are exactly the same as\nin traditional CGI programs\n4- 39\nCopyright (C) 2010, http://www.dabeaz.com\nWSGI Environment\n\u2022\nEnvironment also contains some WSGI variables\ndef hello_app(environ, start_response):\nstatus = \"200 OK\"\nresponse_headers = [ ('Content-type','text/plain')]\nresponse = []\nenviron['wsgi.input']\ne n vsitraornt[_'rwessgpio.nesrer(osrtsa't]us,response_headers)\ne n vriersopno[n'swes.gaip.puernld_(s\"cHheelmleo' ]World\\n\")\ne n vriersopno[n'swes.gaip.pmeunldt(i\"tYhorue arde'q]uested :\"+environ['PATH_INFO]')\ne n vriertounr[n' wrsegsip.omnusletiprocess']\n...\n\u2022\nwsgi.input - A file-like object for reading data\n\u2022\nwsgi.errors - File-like object for error output\n4- 40\nCopyright (C) 2010, http://www.dabeaz.com\n84\nProcessing WSGI Inputs\n\u2022\nParsing of query strings is similar to CGI\nimport cgi\ndef sample_app(environ,start_response):\nfields = cgi.FieldStorage(environ['wsgi.input'],\nenviron=environ)\n# fields now has the CGI query variables\n...\n\u2022\nYou use FieldStorage() as before, but give it\nextra parameters telling it where to get data\n4- 41\nCopyright (C) 2010, http://www.dabeaz.com\nWSGI Responses\n\u2022\nThe second argument is a function that is called\nto initiate a response\ndef hello_app(environ, start_response):\nstatus = \"200 OK\"\nresponse_headers = [ ('Content-type','text/plain')]\nresponse = []\nstart_response(status,response_headers)\nresponse.append(\"Hello World\\n\")\nresponse.append(\"You requested :\"+environ['PATH_INFO]')\nreturn response\n\u2022\nYou pass it two parameters\n\u2022\nA status string (e.g., \"200 OK\")\n\u2022\nA list of (header, value) HTTP header pairs\n4- 42\nCopyright (C) 2010, http://www.dabeaz.com\n85\nWSGI Responses\n\u2022\nstart_response() is a hook back to the server\n\u2022\nGives the server information for formulating\nthe response (status, headers, etc.)\n\u2022\nPrepares the server for receiving content data\n4- 43\nCopyright (C) 2010, http://www.dabeaz.com\nWSGI Content\n\u2022\nContent is returned as a sequence of byte strings\ndef hello_app(environ, start_response):\nstatus = \"200 OK\"\nresponse_headers = [ ('Content-type','text/plain')]\nresponse = []\nstart_response(status,response_headers)\nresponse.append(\"Hello World\\n\")\nresponse.append(\"You requested :\"+environ['PATH_INFO]')\nreturn response\n\u2022\nNote: This differs from CGI programming\nwhere you produce output using print.\n4- 44\nCopyright (C) 2010, http://www.dabeaz.com\n86\nWSGI Content Encoding\n\u2022\nWSGI applications must always produce bytes\n\u2022\nIf working with Unicode, it must be encoded\ndef hello_app(environ, start_response):\nstatus = \"200 OK\"\nresponse_headers = [ ('Content-type','text/html')]\nstart_response(status,response_headers)\nreturn [u\"That's a spicy Jalape\\u00f1o\".encode('utf-8')]\n\u2022\nThis is a little tricky--if you're not anticipating\nUnicode, everything can break if a Unicode\nstring is returned (be aware that certain\nmodules such as database modules may do this)\n4- 45\nCopyright (C) 2010, http://www.dabeaz.com\nWSGI Deployment\n\u2022\nThe main point of WSGI is to simplify\ndeployment of web applications\n\u2022\nYou will notice that the interface depends on\nno third party libraries, no objects, or even any\nstandard library modules\n\u2022\nThat is intentional. WSGI apps are supposed to\nbe small self-contained units that plug into\nother environments\n4- 46\nCopyright (C) 2010, http://www.dabeaz.com\n87\nWSGI Deployment\n\u2022\nRunning a simple stand-alone WSGI server\nfrom wsgiref import simple_server\nhttpd = simple_server.make_server(\"\",8080,hello_app)\nhttpd.serve_forever()\n\u2022\nThis runs an HTTP server for testing\n\u2022\nYou probably wouldn't deploy anything using\nthis, but if you're developing code on your own\nmachine, it can be useful\n4- 47\nCopyright (C) 2010, http://www.dabeaz.com\nWSGI and CGI\n\u2022\nWSGI applications can run on top of standard\nCGI scripting (which is useful if you're\ninterfacing with traditional web servers).\n#!/usr/bin/env python\n# hello.py\ndef hello_app(environ,start_response):\n...\nimport wsgiref.handlers\nwsgiref.handlers.CGIHandler().run(hello_app)\n4- 48\nCopyright (C) 2010, http://www.dabeaz.com\n88\nExercise 4.5\nTime : 20 Minutes\n4- 49\nCopyright (C) 2010, http://www.dabeaz.com\nCustomized HTTP\n\u2022\nCan implement customized HTTP servers\n\u2022\nUse BaseHTTPServer module\n\u2022\nDefine a customized HTTP handler object\n\u2022\nRequires some knowledge of the underlying\nHTTP protocol\n4- 50\nCopyright (C) 2010, http://www.dabeaz.com\n89\nCustomized HTTP\n\u2022\nExample: A Hello World Server\nfrom BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer\nclass HelloHandler(BaseHTTPRequestHandler):\ndef do_GET(self):\nif self.path == '/hello':\nself.send_response(200,\"OK\")\nself.send_header('Content-type','text/plain')\nself.end_headers()\nself.wfile.write(\"\"\"<HTML>\n<HEAD><TITLE>Hello</TITLE></HEAD>\n<BODY>Hello World!</BODY></HTML>\"\"\")\nserv = HTTPServer((\"\",8080),HelloHandler)\nserv.serve_forever()\n\u2022\nDefined a method for \"GET\" requests\n4- 51\nCopyright (C) 2010, http://www.dabeaz.com\nCustomized HTTP\n\u2022\nA more complex server\nfrom BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer\nclass MyHandler(BaseHTTPRequestHandler):\ndef do_GET(self):\n...\nRedefine the behavior of the\ndef do_POST(self):\nserver by defining code for\n...\ndef do_HEAD(self): all of the standard HTTP\n... request types\ndef do_PUT(self):\n...\nserv = HTTPServer((\"\",8080),MyHandler)\nserv.serve_forever()\n\u2022\nCan customize everything (requires work)\n4- 52\nCopyright (C) 2010, http://www.dabeaz.com\n90\nExercise 4.6\nTime : 15 Minutes\n4- 53\nCopyright (C) 2010, http://www.dabeaz.com\nWeb Frameworks\n\u2022\nPython has a huge number of web frameworks\n\u2022\nZope\n\u2022\nDjango\n\u2022\nTurbogears\n\u2022\nPylons\n\u2022\nCherryPy\n\u2022\nGoogle App Engine\n\u2022\nFrankly, there are too many to list here..\n4- 54\nCopyright (C) 2010, http://www.dabeaz.com\n91\nWeb Frameworks\n\u2022\nWeb frameworks build upon previous concepts\n\u2022\nProvide additional support for\n\u2022\nForm processing\n\u2022\nCookies/sessions\n\u2022\nDatabase integration\n\u2022\nContent management\n\u2022\nUsually require their own training course\n4- 55\nCopyright (C) 2010, http://www.dabeaz.com\nCommentary\n\u2022\nIf you're building small self-contained\ncomponents or middleware for use on the\nweb, you're probably better off with WSGI\n\u2022\nThe programming interface is minimal\n\u2022\nThe components you create will be self-\ncontained if you're careful with your design\n\u2022\nSince WSGI is an official part of Python,\nvirtually all web frameworks will support it\n4- 56\nCopyright (C) 2010, http://www.dabeaz.com\n92\nSection 5\nAdvanced Networking\nOverview\n\u2022\nAn assortment of advanced networking topics\n\u2022\nThe Python network programming stack\n\u2022\nConcurrent servers\n\u2022\nDistributed computing\n\u2022\nMultiprocessing\nCopyright (C) 2010, http://www.dabeaz.com 5- 2\n93\nProblem with Sockets\n\u2022\nIn part 1, we looked at low-level programming\nwith sockets\n\u2022\nAlthough it is possible to write applications\nbased on that interface, most of Python's\nnetwork libraries use a higher level interface\n\u2022\nFor servers, there's the SocketServer module\nCopyright (C) 2010, http://www.dabeaz.com 5- 3\nSocketServer\n\u2022\nA module for writing custom servers\n\u2022\nSupports TCP and UDP networking\n\u2022\nThe module aims to simplify some of the\nlow-level details of working with sockets and\nput to all of that functionality in one place\nCopyright (C) 2010, http://www.dabeaz.com 5- 4\n94\nSocketServer Example\n\u2022\nTo use SocketServer, you define handler\nobjects using classes\n\u2022\nExample: A time server\nimport SocketServer\nimport time\nclass TimeHandler(SocketServer.BaseRequestHandler):\ndef handle(self):\nself.request.sendall(time.ctime()+\"\\n\")\nserv = SocketServer.TCPServer((\"\",8000),TimeHandler)\nserv.serve_forever()\nCopyright (C) 2010, http://www.dabeaz.com 5- 5\nSocketServer Example\n\u2022\nHandler Class\nServer is implemented\nimport SocketServer\nby a handler class\nimport time\nclass TimeHandler(SocketServer.BaseRequestHandler):\ndef handle(self):\nself.request.sendall(time.ctime()+\"\\n\")\nserv = SocketServer.TCPServer((\"\",8000),TimeHandler)\nserv.serve_forever()\nCopyright (C) 2010, http://www.dabeaz.com 5- 6\n95\nSocketServer Example\n\u2022\nHandler Class\nMust inherit from\nimport SocketServer BaseRequestHandler\nimport time\nclass TimeHandler(SocketServer.BaseRequestHandler):\ndef handle(self):\nself.request.sendall(time.ctime())\nserv = SocketServer.TCPServer((\"\",8000),TimeHandler)\nserv.serve_forever()\nCopyright (C) 2010, http://www.dabeaz.com 5- 7\nSocketServer Example\n\u2022\nhandle() method\nimport SocketServer\nDefine handle()\nimport time\nto implement the\nserver action\nclass TimeHandler(SocketServer.BaseRequestHandler):\ndef handle(self):\nself.request.sendall(time.ctime())\nserv = SocketServer.TCPServer((\"\",8000),TimeHandler)\nserv.serve_forever()\nCopyright (C) 2010, http://www.dabeaz.com 5- 8\n96\nSocketServer Example\n\u2022\nClient socket connection\nimport SocketServer\nimport time\nclass TimeHandler(SocketServer.BaseRequestHandler):\ndef handle(self):\nself.request.sendall(time.ctime())\nserv = SocketServer.TCPServer((\"\",8000),TimeHandler)\nSocket object\nserv.serve_forever()\nfor client connection\n\u2022\nThis is a bare socket object\nCopyright (C) 2010, http://www.dabeaz.com 5- 9\nSocketServer Example\n\u2022\nCreating and running the server\nimport SocketServer\nimport time\nCreates a server and\nclass TimeHandler(SocketServer.BaseRequestHandler):\ndef handle(self): connects a handler\nself.request.sendall(time.ctime())\nserv = SocketServer.TCPServer((\"\",8000),TimeHandler)\nserv.serve_forever()\nRuns the server\nforever\nCopyright (C) 2010, http://www.dabeaz.com 5- 10\n97\nExecution Model\n\u2022\nServer runs in a loop waiting for requests\n\u2022\nOn each connection, the server creates a\nnew instantiation of the handler class\n\u2022\nThe handle() method is invoked to handle\nthe logic of communicating with the client\n\u2022\nWhen handle() returns, the connection is\nclosed and the handler instance is destroyed\nCopyright (C) 2010, http://www.dabeaz.com 5- 11\nExercise 5.1\nTime : 15 Minutes\nCopyright (C) 2010, http://www.dabeaz.com 5- 12\n98\nBig Picture\n\u2022\nA major goal of SocketServer is to simplify\nthe task of plugging different server handler\nobjects into different kinds of server\nimplementations\n\u2022\nFor example, servers with different\nimplementations of concurrency, extra\nsecurity features, etc.\nCopyright (C) 2010, http://www.dabeaz.com 5- 13\nConcurrent Servers\n\u2022\nSocketServer supports different kinds of\nconcurrency implementations\nTCPServer - Synchronous TCP server (one client)\nForkingTCPServer - Forking server (multiple clients)\nThreadingTCPServer - Threaded server (multiple clients)\n\u2022\nJust pick the server that you want and plug\nthe handler object into it\nserv = SocketServer.ForkingTCPServer((\"\",8000),TimeHandler)\nserv.serve_forever()\nserv = SocketServer.ThreadingTCPServer((\"\",8000),TimeHandler)\nserv.serve_forever()\nCopyright (C) 2010, http://www.dabeaz.com 5- 14\n99\nServer Mixin Classes\n\u2022\nSocketServer defines these mixin classes\nForkingMixIn\nThreadingMixIn\n\u2022\nThese can be used to add concurrency to\nother server objects (via multiple inheritance)\nfrom BaseHTTPServer import HTTPServer\nfrom SimpleHTTPServer import SimpleHTTPRequestHandler\nfrom SocketServer import ThreadingMixIn\nclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\npass\nserv = ThreadedHTTPServer((\"\",8080),\nSimpleHTTPRequestHandler)\nCopyright (C) 2010, http://www.dabeaz.com 5- 15\nServer Subclassing\n\u2022\nSocketServer objects are also subclassed to\nprovide additional customization\n\u2022\nExample: Security/Firewalls\nclass RestrictedTCPServer(TCPServer):\n# Restrict connections to loopback interface\ndef verify_request(self,request,addr):\nhost, port = addr\nif host != '127.0.0.1':\nreturn False\nelse:\nreturn True\nserv = RestrictedTCPServer((\"\",8080),TimeHandler)\nserv.serve_forever()\nCopyright (C) 2010, http://www.dabeaz.com 5- 16\n100\nExercise 5.2\nTime : 15 Minutes\nCopyright (C) 2010, http://www.dabeaz.com 5- 17\nDistributed Computing\n\u2022\nIt is relatively simple to build Python\napplications that span multiple machines or\noperate on clusters\nCopyright (C) 2010, http://www.dabeaz.com 5- 18\n101\nDiscussion\n\u2022\nKeep in mind: Python is a \"slow\" interpreted\nprogramming language\n\u2022\nSo, we're not necessarily talking about high\nperformance computing in Python (e.g.,\nnumber crunching, etc.)\n\u2022\nHowever, Python can serve as a very useful\ndistributed scripting environment for\ncontrolling things on different systems\nCopyright (C) 2010, http://www.dabeaz.com 5- 19\nXML-RPC\n\u2022\nRemote Procedure Call\n\u2022\nUses HTTP as a transport protocol\n\u2022\nParameters/Results encoded in XML\n\u2022\nSupported by languages other than Python\nCopyright (C) 2010, http://www.dabeaz.com 5- 20\n102\nSimple XML-RPC\n\u2022\nHow to create a stand-alone server\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\ndef add(x,y):\nreturn x+y\ns = SimpleXMLRPCServer((\"\",8080))\ns.register_function(add)\ns.serve_forever()\n\u2022\nHow to test it (xmlrpclib)\n>>> import xmlrpclib\n>>> s = xmlrpclib.ServerProxy(\"http://localhost:8080\")\n>>> s.add(3,5)\n8\n>>> s.add(\"Hello\",\"World\")\n\"HelloWorld\"\n>>>\nCopyright (C) 2010, http://www.dabeaz.com 5- 21\nSimple XML-RPC\n\u2022\nAdding multiple functions\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\ns = SimpleXMLRPCServer((\"\",8080))\ns.register_function(add)\ns.register_function(foo)\ns.register_function(bar)\ns.serve_forever()\n\u2022\nRegistering an instance (exposes all methods)\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\ns = SimpleXMLRPCServer((\"\",8080))\nobj = SomeObject()\ns.register_instance(obj)\ns.serve_forever()\nCopyright (C) 2010, http://www.dabeaz.com 5- 22\n103\nXML-RPC Commentary\n\u2022\nXML-RPC is extremely easy to use\n\u2022\nAlmost too easy--you might get the perception\nthat it's extremely limited or fragile\n\u2022\nI have encountered a lot of major projects that\nare using XML-RPC for distributed control\n\u2022\nUsers seem to love it (I concur)\nCopyright (C) 2010, http://www.dabeaz.com 5- 23\nXML-RPC and Binary\n\u2022\nOne wart of caution...\n\u2022\nXML-RPC assumes all strings are UTF-8\nencoded Unicode\n\u2022\nConsequence: You can't shove a string of raw\nbinary data through an XML-RPC call\n\u2022\nFor binary: must base64 encode/decode\n\u2022\nbase64 module can be used for this\nCopyright (C) 2010, http://www.dabeaz.com 5- 24\n104\nExercise 5.3\nTime : 15 Minutes\nCopyright (C) 2010, http://www.dabeaz.com 5- 25\nSerializing Python Objects\n\u2022\nIn distributed applications, you may want to\npass various kinds of Python objects around\n(e.g., lists, dicts, sets, instances, etc.)\n\u2022\nLibraries such as XML-RPC support simple\ndata types, but not anything more complex\n\u2022\nHowever, serializing arbitrary Python objects\ninto byte-strings is quite simple\nCopyright (C) 2010, http://www.dabeaz.com 5- 26\n105\npickle Module\n\u2022\nA module for serializing objects\n\u2022\nSerializing an object onto a \"file\"\nimport pickle\n...\npickle.dump(someobj,f)\n\u2022\nUnserializing an object from a file\nsomeobj = pickle.load(f)\n\u2022\nHere, a file might be a file, a pipe, a wrapper\naround a socket, etc.\nCopyright (C) 2010, http://www.dabeaz.com 5- 27\nPickling to Strings\n\u2022\nPickle can also turn objects into byte strings\nimport pickle\n# Convert to a string\ns = pickle.dumps(someobj, protocol)\n...\n# Load from a string\nsomeobj = pickle.loads(s)\n\u2022\nThis can be used if you need to embed a\nPython object into some other messaging\nprotocol or data encoding\nCopyright (C) 2010, http://www.dabeaz.com 5- 28\n106\nExample\n\u2022\nUsing pickle with XML-RPC\n# addserv.py\nimport pickle\ndef add(px,py):\nx = pickle.loads(px)\ny = pickle.loads(py)\nreturn pickle.dumps(x+y)\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\nserv = SimpleXMLRPCServer((\"\",15000))\nserv.register_function(add)\nserv.serve_forever()\n\u2022\nNotice: All input arguments and return values\nare encoded/decoded with pickle\nCopyright (C) 2010, http://www.dabeaz.com 5- 29\nExample\n\u2022\nPassing Python objects from the client\n>>> import pickle\n>>> import xmlrpclib\n>>> serv = xmlrpclib.ServerProxy(\"http://localhost:15000\")\n>>> a = [1,2,3]\n>>> b = [4,5]\n>>> r = serv.add(pickle.dumps(a),pickle.dumps(b))\n>>> c = pickle.loads(r)\n>>> c\n[1, 2, 3, 4, 5]\n>>>\n\u2022\nAgain, all input and return values are processed\nthrough pickle\nCopyright (C) 2010, http://www.dabeaz.com 5- 30\n107\nMiscellaneous Comments\n\u2022\nPickle is really only useful if used in a Python-\nonly environment\n\u2022\nWould not use if you need to communicate\nto other programming languages\n\u2022\nThere are also security concerns\n\u2022\nNever use pickle with untrusted clients\n(malformed pickles can be used to execute\narbitrary system commands)\nCopyright (C) 2010, http://www.dabeaz.com 5- 31\nExercise 5.4\nTime : 15 Minutes\nCopyright (C) 2010, http://www.dabeaz.com 5- 32\n108\nmultiprocessing\n\u2022\nPython 2.6/3.0 include a new library module\n(multiprocessing) that can be used for\ndifferent forms of distributed computation\n\u2022\nIt is a substantial module that also addresses\ninterprocess communication, parallel\ncomputing, worker pools, etc.\n\u2022\nWill only show a few network features here\nCopyright (C) 2010, http://www.dabeaz.com 5- 33\nConnections\n\u2022\nCreating a dedicated connection between\ntwo Python interpreter processes\n\u2022\nListener (server) process\nfrom multiprocessing.connection import Listener\nserv = Listener((\"\",16000),authkey=\"12345\")\nc = serv.accept()\n\u2022\nClient process\nfrom multiprocessing.connection import Client\nc = Client((\"servername\",16000),authkey=\"12345\")\n\u2022\nOn surface, looks similar to a TCP connection\nCopyright (C) 2010, http://www.dabeaz.com 5- 34\n109\nConnection Use\n\u2022\nConnections allow bidirectional message\npassing of arbitrary Python objects\nc\nc.send(obj) obj = c.recv()\n\u2022\nUnderneath the covers, everything routes\nthrough the pickle module\n\u2022\nSimilar to a network connection except that\nyou just pass objects through it\nCopyright (C) 2010, http://www.dabeaz.com 5- 35\nExample\n\u2022\nExample server using multiprocessing\n# addserv.py\ndef add(x,y):\nreturn x+y\nfrom multiprocessing.connection import Listener\nserv = Listener((\"\",16000),authkey=\"12345\")\nc = serv.accept()\nwhile True:\nx,y = c.recv() # Receive a pair\nc.send(add(x,y)) # Send result of add(x,y)\n\u2022\nNote: Omitting a variety of error checking/\nexception handling\nCopyright (C) 2010, http://www.dabeaz.com 5- 36\n110\nExample\n\u2022\nClient connection with multiprocessing\n>>> from multiprocessing.connection import Client\n>>> client = Client((\"\",16000),authkey=\"12345\")\n>>> a = [1,2,3]\n>>> b = [4,5]\n>>> client.send((a,b))\n>>> c = client.recv()\n>>> c\n[1, 2, 3, 4, 5]\n>>>\n\u2022\nEven though pickle is being used underneath\nthe covers, you don't see it here\nCopyright (C) 2010, http://www.dabeaz.com 5- 37\nCommentary\n\u2022\nMultiprocessing module already does the\nwork related to pickling, error handling, etc.\n\u2022\nCan use it as the foundation for something\nmore advanced\n\u2022\nThere are many more features of\nmultiprocessing not shown here (e.g.,\nfeatures related to distributed objects,\nparallel processing, etc.)\nCopyright (C) 2010, http://www.dabeaz.com 5- 38\n111\nCommentary\n\u2022\nMultiprocessing is a good choice if you're\nworking strictly in a Python environment\n\u2022\nIt will be faster than XML-RPC\n\u2022\nIt has some security features (authkey)\n\u2022\nMore flexible support for passing Python\nobjects around\nCopyright (C) 2010, http://www.dabeaz.com 5- 39\nWhat about...\n\u2022\nCORBA? SOAP? Others?\n\u2022\nThere are third party libraries for this\n\u2022\nHonestly, most Python programmers aren't\ninto big heavyweight distributed object\nsystems like this (too much trauma)\n\u2022\nHowever, if you're into distributed objects,\nyou should probably look at the Pyro project\n(http://pyro.sourceforge.net)\nCopyright (C) 2010, http://www.dabeaz.com 5- 40\n112\nNetwork Wrap-up\n\u2022\nHave covered the basics of network support\nthat's bundled with Python (standard lib)\n\u2022\nPossible directions from here...\n\u2022\nConcurrent programming techniques\n(often needed for server implementation)\n\u2022\nParallel computing (scientific computing)\n\u2022\nWeb frameworks\nCopyright (C) 2010, http://www.dabeaz.com 5- 41\nExercise 5.5\nTime : 15 Minutes\nCopyright (C) 2010, http://www.dabeaz.com 5- 42\n113\n\nPython Network Programming Index Django, 4-54\ndump() function, pickle module, 5-27\ndumps() function, pickle module, 5-28\nA\nE\naccept() method, of sockets, 1-19, 1-22\nAddress binding, TCP server, 1-20\nElementTree module, modifying document\nAddressing, network, 1-4\nstructure, 3-23\nAsynchronous network server, 1-52\nElementTree module, performance, 3-22\nElementTree module, xml.etree package, 3-14\nB ElementTree, attributes, 3-19\nElementTree, incremental XML parsing, 3-25\nElementTree, wildcards, 3-20\nBaseRequestHandler, SocketServer module, 5-5\nElementTree, writing XML, 3-24\nbind() method, of sockets, 1-19, 1-20, 1-42\nEnd of file, of sockets, 1-32\nBrowser, emulating in HTTP requests, 2-21\nenviron variable, os module, 4-28\nbuild_opener() function, urllib2 module, 2-24\nError handling, HTTP requests, 2-22\nC\nF\ncElementTree module, 3-22\nFieldStorage object, cgi module, 4-30\ncgi module, 4-30\nFile upload, via urllib, 2-28\nCGI scripting, 4-23, 4-24, 4-25, 4-26, 4-27\nFiles, creating from a socket, 1-37\nCGI scripting, and WSGI, 4-48\nForking server, 1-51\nCGI scripting, creating a response, 4-31, 4-32\nForkingMixIn class, SocketServer module, 5-15\nCGI scripting, environment variables, 4-28\nForkingTCPServer, SocketServer module, 5-14\nCGI scripting, I/O model, 4-28\nForkingUDPServer, SocketServer module, 5-14\nCGI scripting, parsing query variables, 4-30\nForm data, posting in an HTTP request, 2-10,\nCGI scripting, query string, 4-26\n2-11, 2-20\nCGI scripting, query variables, 4-29\nFTP server, interacting with, 2-29\nCherryPy, 4-54\nFTP, uploading files to a server, 2-30\nClient objects, multiprocessing module, 5-34\nftplib module, 2-29\nClient/Server programming, 1-8\nclose() method, of sockets, 1-16, 1-25\nConcurrency, and socket programming, 1-46 G\nconnect() method, of sockets, 1-16\nConnections, network, 1-7\ngethostbyaddr() function, socket module, 1-53\nContent encoding, HTTP responses, 4-9\ngethostbyname() function, socket module, 1-53\nCookie handling and HTTP requests, 2-25\ngethostname() function, socket module, 1-53\nCookies, and urllib2 module, 2-17\nGoogle AppEngine, 4-54\nCORBA, 5-40\nCreating custom openers for HTTP requests, 2-24\nH\ncsv module, 3-3\nD Hostname, 1-4\nHostname, obtaining, 1-53\nHTML, parsing of, 3-4, 3-7\nDatagram, 1-43\nHTMLParser module, 3-5, 3-7\nDistributed computing, 5-18, 5-19\nHTTP cookies, 2-25 O\nHTTP protocol, 4-5\nHTTP request, with cookie handling, 2-25\nHTTP status code, obtaining with urllib, 2-14 Objects, serialization of, 5-26\nHTTP, client-side protocol, 2-31 Opener objects, urllib2 module, 2-23\nHTTP, methods, 4-8 OpenSSL, 2-5\nHTTP, request structure, 4-6\nHTTP, response codes, 4-8 P\nHTTP, response content encoding, 4-9\nHTTP, response structure, 4-7, 4-10, 4-12\nParsing HTML, 3-7\nhttplib module, 2-31\nParsing, JSON, 3-29\nParsing, of HTML, 3-5\nI\npickle module, 5-27\nPOST method, of HTTP requests, 2-6, 2-7\nInterprocess communication, 1-44 Posting form data, HTTP requests, 2-10, 2-11,\nIP address, 1-4 2-20\nIPC, 1-44 Pylons, 4-54\nIPv4 socket, 1-13\nIPv6 socket, 1-13 Q\nJ\nQuery string, and CGI scripting, 4-26\nJSON, 3-29 R\njson module, 3-31\nRaw Sockets, 1-45\nL\nrecv() method, of sockets, 1-16\nrecvfrom() method, of sockets, 1-42, 1-43\nLimitations, of urllib module, 2-28 Request objects, urllib2 module, 2-19\nlisten() method, of sockets, 1-19, 1-21 Request-response cycle, network programming,\nListener objects, multiprocessing module, 5-34 1-9\nload() function, pickle module, 5-27 RFC-2822 headers, 4-6\nloads() function, pickle module, 5-28\nS\nM\nsax module, xml package, 3-11\nmakefile() method, of sockets, 1-37 select module, 1-52\nmultiprocessing module, 5-33 select() function, select module, 1-52\nsend() method, of sockets, 1-16, 1-24\nsendall() method, of sockets, 1-31\nN\nSending email, 2-32\nsendto() method, of sockets, 1-42, 1-43\nnetstat, 1-6 Serialization, of Python objects, 5-26\nNetwork addresses, 1-4, 1-7 serve_forever() method, SocketServer, 5-5\nNetwork programming, client-server concept, 1-8 setsockopt() method, of sockets, 1-36\nNetwork programming, standard port settimeout() method, of sockets, 1-34\nassignments, 1-5 SimpleXMLRPCServer module, 5-21\nsimple_server module, wsgiref package, 4-46, UDPServer, SocketServer module, 5-14\n4-47 Unix domain sockets, 1-44\nsmtplib module, 2-32 Uploading files, to an FTP server, 2-30\nSOAP, 5-40 URL, parameter encoding, 2-6, 2-7\nsocket module, 1-13 urlencode() function, urllib module, 2-9\nsocket() function, socket module, 1-13 urllib module, 2-3\nSocket, using for server or client, 1-15 urllib module, limitations, 2-28\nSocket, wrapping with a file object, 1-37 urllib2 module, 2-17\nSockets, 1-12, 1-13 urllib2 module, error handling, 2-22\nSockets, and concurrency, 1-46 urllib2 module, Request objects, 2-19\nSockets, asynchronous server, 1-52 urlopen() function, obtaining response headers,\nSockets, end of file indication, 1-32 2-13\nSockets, forking server example, 1-51 urlopen() function, obtaining status code, 2-14\nSockets, partial reads and writes, 1-29 urlopen() function, reading responses, 2-12\nSockets, setting a timeout, 1-34 urlopen() function, urllib module, 2-4\nSockets, setting options, 1-36 urlopen() function, urllib2 module, 2-18\nSockets, threaded server, 1-50 urlopen(), posting form data, 2-10, 2-11, 2-20\nSocketServer module, 5-4 urlopen(), supported protocols, 2-5\nSocketServer, subclassing, 5-16 User-agent, setting in HTTP requests, 2-21\nStandard port assignments, 1-5\nV\nT\nviewing open network connections, 1-6\nTCP, 1-13, 1-14\nTCP, accepting new connections, 1-22 W\nTCP, address binding, 1-20\nTCP, client example, 1-16\nTCP, communication with client, 1-23 Web frameworks, 4-54, 4-55\nTCP, example with SocketServer module, 5-5 Web programming, and WSGI, 4-35, 4-36\nTCP, listening for connections, 1-21 Web programming, CGI scripting, 4-23, 4-24,\nTCP, server example, 1-19 4-25, 4-26, 4-27\nTCPServer, SocketServer module, 5-10 Web services, 2-8\nTelnet, using with network applications, 1-10 Webdav, 2-28\nThreaded network server, 1-50 WSGI, 4-36\nThreadingMixIn class, SocketServer module, WSGI (Web Services Gateway Interface), 4-35\n5-15 WSGI, and CGI environment variables, 4-39\nThreadingTCPServer, SocketServer module, 5-14 WSGI, and wsgi.* variables, 4-40\nThreadingUDPServer, SocketServer module, 5-14 WSGI, application inputs, 4-38\nThreads, and network servers, 1-50 WSGI, applications, 4-37\nTimeout, on sockets, 1-34 WSGI, parsing query string, 4-41\nTurbogears, 4-54 WSGI, producing content, 4-44\nTwisted framework, 1-52 WSGI, response encoding, 4-45\nWSGI, responses, 4-42\nWSGI, running a stand-alone server, 4-46, 4-47\nU\nWSGI, running applications within a CGI script,\n4-48\nUDP, 1-13, 1-41 WWW, see HTTP, 4-5\nUDP, client example, 1-43\nUDP, server example, 1-42\nX\nXML, element attributes, 3-19\nXML, element wildcards, 3-20\nXML, ElementTree interface, 3-15, 3-16\nXML, ElementTree module, 3-14\nXML, finding all matching elements, 3-18\nXML, finding matching elements, 3-17\nXML, incremental parsing of, 3-25\nXML, modifying documentation structu with\nElementTree, 3-23\nXML, parsing with SAX, 3-9\nXML, writing to files, 3-24\nXML-RPC, 5-20\nZ\nZope, 4-54\n",
  "context": "Python Network Programming\nDavid M. Beazley",
  "source_file": "resources\\Year 3\\Socket Programming\\PythonSocketProgramming.pdf",
  "line_numbers": [
    3,
    3629
  ]
}