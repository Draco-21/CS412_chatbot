{
  "title": "Python Flask Manual",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "data_structures",
    "networking",
    "database"
  ],
  "purpose": "application.",
  "code": "(create_app function) and register blueprints.\n\u25aa config.py: Handles loading application configurations (e.g., from\nthe .env file or environment variables).\n\u25aa routes.py: Defines the URL routes (e.g., /, /login, /profile)\nand the view functions that handle requests to these routes for the\nmain application.\n\u25aa auth.py: Contains logic for user authentication (login, logout,\nregistration, session management).\n\u25aa services.py: Includes functions that interact with other services,\nparticularly your profile_service. This might involve making\nHTTP requests.\n\u25aa models.py: (Optional) Defines database models if your main\napplication directly interacts with a database (e.g., using Flask-\nSQLAlchemy).\n\u25aa static/: Stores static assets like CSS, JavaScript, and images.\nFlask can serve these directly.\n\u25aa css/, js/, images/: Subdirectories for organizing static\nfiles.\n\u25aa templates/: Contains HTML templates (e.g., Jinja2 templates)\nthat are rendered by your view functions.\n\u25aa base.html: A base template that other templates can\ninherit from, providing a common layout.\n\u25aa header.html, footer.html: Partial templates for common\npage elements, often included in base.html or other\ntemplates.\no profile_service/: A separate Flask application acting as a microservice,\nspecifically for handling user profiles and profile pictures.\n\u25aa run_profile_service.py: Script to run the profile microservice.\n\u25aa requirements.txt: Python package dependencies for the\nprofile_service.\n\u25aa profile_pics/: A directory where the profile_service might store\nuploaded profile images.\n1. Prerequisites\n\u2022 Python: Ensure Python (preferably version 3.7+) is installed.\n\u2022 pip: The Python package installer (usually comes with Python).\n\u2022 Git: For version control (essential for using .gitignore).\n2. Setting up the Project Environment\nIt's highly recommended to use separate virtual environments for your main_app and\nprofile_service to manage their dependencies independently.\nStep 2.1: Create Project Root and Basic Files\n1. Create the main project directory:\nBash\nmkdir your_project_root\ncd your_project_root\n2. Create the .gitignore file: your_project_root/.gitignore:\n3. # Python\n4. __pycache__/\n5. *.pyc\n6. *.pyo\n7. *.pyd\n8. *.egg-info/\n9. dist/\n10. build/\n11. *.egg\n12. *.whl\n13.\n14. # Virtual environments\n15. venv/\n16. env/\n17. myflaskapp_env/ # Add your specific venv names if different\n18. profile_service_env/\n19.\n20. # Environment variables\n21. .env\n22.\n23. # IDE and OS specific\n24. .vscode/\n25. .idea/\n26. *.DS_Store\n27. Create the (optional) .env file (example): your_project_root/.env:\n28. # Main App Configuration\n29. FLASK_APP_SECRET_KEY='your_strong_secret_key_here'\n30. FLASK_DEBUG=True\n31. PROFILE_SERVICE_URL='http://127.0.0.1:5001' # URL where\nprofile_service will run\n32.\n33. # Profile Service Configuration\n34. PROFILE_SERVICE_SECRET_KEY='another_strong_secret_key'\n35. PROFILE_SERVICE_DEBUG=True\nNote: The actual loading of these variables will happen in config.py.\nStep 2.2: Setting up the main_app\n1. Navigate to where main_app will reside (it's directly under your_project_root in your\nstructure):\nBash\n# (If not already in your_project_root)\n# cd your_project_root\nmkdir main_app\ncd main_app\n2. Create a virtual environment for main_app:\nBash\npython -m venv main_app_env\n3. Activate the main_app virtual environment:\no Windows: main_app_env\\Scripts\\activate\no macOS/Linux: source main_app_env/bin/activate Your prompt should\nchange to indicate (main_app_env).\n4. Create requirements.txt for main_app: main_app/requirements.txt:\n5. Flask>=2.0\n6. python-dotenv # For loading .env files\n7. requests # For calling the profile_service\n8. # Add other dependencies like Flask-SQLAlchemy, Flask-WTF as needed\n9. Install dependencies for main_app:\nBash\npip install -r requirements.txt\n10. Create the directory structure for main_app_package:\nBash\nmkdir main_app_package\ncd main_app_package\nmkdir static\nmkdir static/css static/js static/images\nmkdir templates\ncd .. # Back to main_app directory\nStep 2.3: Setting up the profile_service\n1. Navigate out of main_app and create the profile_service directory:\nBash\ncd .. # Back to your_project_root\nmkdir profile_service\ncd profile_service\n2. Create a virtual environment for profile_service:\nBash\npython -m venv profile_service_env\n3. Activate the profile_service virtual environment:\no Windows: profile_service_env\\Scripts\\activate\no macOS/Linux: source profile_service_env/bin/activate Your prompt\nshould change to indicate (profile_service_env).\n4. Create requirements.txt for profile_service:\nprofile_service/requirements.txt:\n5. Flask>=2.0\n6. python-dotenv\n7. # Add other dependencies if needed (e.g., Pillow for image processing)\n8. Install dependencies for profile_service:\nBash\npip install -r requirements.txt\n9. Create the profile_pics directory:\nBash\nmkdir profile_pics\n10. Deactivate the profile_service environment for now if you're going back to work on\nmain_app, or keep it active if you're writing its code next.\nBash\ndeactivate # Optional\n3. Implementing the main_app\n(Ensure main_app_env is activated for these steps)\nStep 3.1: main_app/main_app_package/config.py\nThis file will load configurations. main_app/main_app_package/config.py:\nPython\nimport os\nfrom dotenv import load_dotenv\n# Construct the path to the .env file located in the project root\n# __file__ is 'your_project_root/main_app/main_app_package/config.py'\n# os.path.dirname(__file__) is 'your_project_root/main_app/main_app_package/'\n# os.path.dirname(os.path.dirname(os.path.dirname(__file__))) is\n'your_project_root/'\ndotenv_path =\nos.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))),\n'.env')\nload_dotenv(dotenv_path)\nclass Config:\nSECRET_KEY = os.environ.get('FLASK_APP_SECRET_KEY') or\n'a_default_fallback_secret_key'\nDEBUG = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'\nPROFILE_SERVICE_URL = os.environ.get('PROFILE_SERVICE_URL')\n# Add other configurations like SQLALCHEMY_DATABASE_URI etc.\n# SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or\n'sqlite:///site.db'\n# SQLALCHEMY_TRACK_MODIFICATIONS = False\nStep 3.2: main_app/main_app_package/__init__.py (App Factory)\nThis is where your Flask app instance is created and configured.\nmain_app/main_app_package/__init__.py:\nPython\nfrom flask import Flask\nfrom .config import Config\n# from flask_sqlalchemy import SQLAlchemy # Example if using SQLAlchemy\n# from flask_login import LoginManager # Example if using Flask-Login\n# db = SQLAlchemy() # Example\n# login_manager = LoginManager() # Example\n# login_manager.login_view = 'main_routes.login' # Example: redirect to login\nif @login_required\ndef create_app(config_class=Config):\napp = Flask(__name__)\napp.config.from_object(config_class)\n# Initialize extensions (example)\n# db.init_app(app)\n# login_manager.init_app(app)\n# Import and register blueprints\nfrom .routes import main_bp # Corrected to relative import for blueprint\napp.register_blueprint(main_bp)\n# If you have an auth blueprint:\n# from .auth import auth_bp\n# app.register_blueprint(auth_bp, url_prefix='/auth')\n# You can also register other blueprints here\n# Example context processor to make PROFILE_SERVICE_URL available in all\ntemplates\n@app.context_processor\ndef inject_profile_service_url():\nreturn\ndict(PROFILE_SERVICE_URL=app.config.get('PROFILE_SERVICE_URL'))\nreturn app\nStep 3.3: main_app/main_app_package/routes.py\nDefine your application's routes. main_app/main_app_package/routes.py:\nPython\nfrom flask import Blueprint, render_template, redirect, url_for, flash,\ncurrent_app, request\nimport requests # For calling the profile service\n# from flask_login import login_required, current_user # Example\nmain_bp = Blueprint('main_routes', __name__) # 'main_routes' is the name of\nthe blueprint\n@main_bp.route('/')\ndef home():\nreturn render_template('student_home.html', title='Home')\n@main_bp.route('/login', methods=['GET', 'POST'])\ndef login():\nif request.method == 'POST':\n# Your login logic here (perhaps using main_app_package/auth.py)\nflash('Login functionality not yet implemented.', 'info')\n# return redirect(url_for('main_routes.home'))\nreturn render_template('login.html', title='Login')\n@main_bp.route('/profile')\n# @login_required # Example: protect this route\ndef profile_details():\n# Example: Fetch profile data from the profile_service\n# user_id = current_user.id # Assuming you have current_user from Flask-\nLogin\nuser_id = \"s12345678\" # Hardcoded for example\nprofile_service_url = current_app.config.get('PROFILE_SERVICE_URL')\nif not profile_service_url:\nflash('Profile service URL not configured.', 'danger')\nreturn render_template('profile_details.html', title='Profile',\nprofile_data=None, error=True)\ntry:\n# The profile service should have an endpoint like /profile/<user_id>\nresponse = requests.get(f\"{profile_service_url}/profile/{user_id}\")\nresponse.raise_for_status() # Raise an exception for HTTP errors (4xx\nor 5xx)\nprofile_data = response.json()\nexcept requests.exceptions.RequestException as e:\ncurrent_app.logger.error(f\"Could not connect to profile service:\n{e}\")\nflash('Could not retrieve profile information at this time.',\n'danger')\nprofile_data = None\nerror = True\nelse:\nerror = False\nreturn render_template('profile_details.html', title='Profile',\nprofile_data=profile_data, error=error)\n# Add other routes as needed...\nStep 3.4: main_app/main_app_package/auth.py (Placeholder)\nmain_app/main_app_package/auth.py:\nPython\nfrom flask import Blueprint, render_template, redirect, url_for, flash,\nrequest\n# from flask_login import login_user, logout_user, current_user\n# from .models import User # Assuming you have a User model\n# from . import db # Assuming you have db from __init__.py\nauth_bp = Blueprint('auth', __name__, url_prefix='/auth')\n@auth_bp.route('/register', methods=['GET', 'POST'])\ndef register():\n# Your registration logic\nreturn \"Register Page (Not Implemented)\"\n@auth_bp.route('/logout')\ndef logout():\n# logout_user()\nflash('You have been logged out.', 'info')\nreturn redirect(url_for('main_routes.home'))\n# Remember to register this blueprint in __init__.py if you use it.\nIf you use this, uncomment the registration in __init__.py.\nStep 3.5: main_app/main_app_package/services.py (Illustrative) This file would contain\nmore complex logic for interacting with microservices if simple requests.get in routes\nbecomes too cumbersome. main_app/main_app_package/services.py:\nPython\nimport requests\nfrom flask import current_app, flash\ndef get_user_profile(user_id):\nprofile_service_url = current_app.config.get('PROFILE_SERVICE_URL')\nif not profile_service_url:\ncurrent_app.logger.error('Profile service URL not configured.')\nreturn None\ntry:\nresponse = requests.get(f\"{profile_service_url}/profile/{user_id}\")\nresponse.raise_for_status()\nreturn response.json()\nexcept requests.exceptions.RequestException as e:\ncurrent_app.logger.error(f\"Error fetching profile for {user_id}:\n{e}\")\nflash(f\"Could not retrieve profile data for {user_id}.\", 'warning')\nreturn None\n# You would then call this function from your routes.py:\n# from .services import get_user_profile\n# profile_data = get_user_profile(user_id)\nStep 3.6: main_app/main_app_package/models.py (Optional Placeholder)\nmain_app/main_app_package/models.py:\nPython\n# from . import db # Assuming db = SQLAlchemy() from __init__.py\n# from flask_login import UserMixin # For Flask-Login\n# class User(UserMixin, db.Model):\n# id = db.Column(db.Integer, primary_key=True)\n# username = db.Column(db.String(20), unique=True, nullable=False)\n# email = db.Column(db.String(120), unique=True, nullable=False)\n# # Add other fields and relationships\n# def __repr__(self):\n# return f\"User('{self.username}', '{self.email}')\"\nStep 3.7: Templates (main_app/main_app_package/templates/)\n\u2022 base.html: main_app/main_app_package/templates/base.html:\nHTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-\nscale=1.0\">\n<title>{% block title %}My Flask App{% endblock %}</title>\n<link rel=\"stylesheet\" href=\"{{ url_for('static',\nfilename='css/style.css') }}\">\n{% block head_css %}{% endblock %}\n</head>\n<body>\n{% include 'header.html' %}\n<main>\n{% with messages = get_flashed_messages(with_categories=true)\n%}\n{% if messages %}\n{% for category, message in messages %}\n<div class=\"alert alert-{{ category }}\">{{ message\n}}</div>\n{% endfor %}\n{% endif %}\n{% endwith %}\n{% block content %}{% endblock %}\n</main>\n{% include 'footer.html' %}\n<script src=\"{{ url_for('static', filename='js/main.js')\n}}\"></script>\n{% block scripts %}{% endblock %}\n</body>\n</html>\n\u2022 header.html: main_app/main_app_package/templates/header.html:\nHTML\n<header>\n<nav>\n<a href=\"{{ url_for('main_routes.home') }}\">Home</a>\n<a href=\"{{ url_for('main_routes.login') }}\">Login</a>\n<a href=\"{{ url_for('main_routes.profile_details')\n}}\">Profile</a>\n</nav>\n<hr>\n</header>\n\u2022 footer.html: main_app/main_app_package/templates/footer.html:\nHTML\n<footer>\n<hr>\n<p>&copy; {{ \"now\"|date(\"%Y\") }} My Application. All rights\nreserved.</p>\n</footer>\n(Note: {{ \"now\"|date(\"%Y\") }} requires datetime to be in Jinja environment or\npassed via context processor. For simplicity, you might hardcode the year or pass it from\nPython.) For dynamic year, in __init__.py:\nPython\n# In create_app in __init__.py\nimport datetime\n@app.context_processor\ndef inject_now():\nreturn {'now': datetime.datetime.utcnow()}\n\u2022 login.html: main_app/main_app_package/templates/login.html:\nHTML\n{% extends \"base.html\" %}\n{% block title %}Login - {{ super() }}{% endblock %}\n{% block content %}\n<h2>Login Page</h2>\n<form method=\"POST\" action=\"{{ url_for('main_routes.login') }}\">\n<div>\n<label for=\"username\">Username:</label>\n<input type=\"text\" id=\"username\" name=\"username\" required>\n</div>\n<div>\n<label for=\"password\">Password:</label>\n<input type=\"password\" id=\"password\" name=\"password\" required>\n</div>\n<button type=\"submit\">Login</button>\n</form>\n{% endblock %}\n\u2022 student_home.html: main_app/main_app_package/templates/student_home.html:\nHTML\n{% extends \"base.html\" %}\n{% block title %}Student Home - {{ super() }}{% endblock %}\n{% block content %}\n<h1>Welcome, Student!</h1>\n<p>This is your main dashboard.</p>\n<p>Check out your <a href=\"{{ url_for('main_routes.profile_details')\n}}\">Profile</a>.</p>\n{% endblock %}\n\u2022 profile_details.html:\nmain_app/main_app_package/templates/profile_details.html:\nHTML\n{% extends \"base.html\" %}\n{% block title %}\n{% if profile_data and not error %}\n{{ profile_data.get('name', 'User') }}'s Profile\n{% else %}\nProfile Details\n{% endif %}\n- {{ super() }}\n{% endblock %}\n{% block head_css %}\n<link rel=\"stylesheet\" href=\"{{ url_for('static',\nfilename='css/profile_style.css') }}\">\n{% endblock %}\n{% block content %}\n<h2>Profile Details</h2>\n{% if error %}\n<p class=\"error-message\">Could not load profile information.</p>\n{% elif profile_data %}\n<p><strong>Name:</strong> {{ profile_data.get('name', 'N/A') }}</p>\n<p><strong>Email:</strong> {{ profile_data.get('email', 'N/A')\n}}</p>\n<p><strong>Student ID:</strong> {{ profile_data.get('student_id',\n'N/A') }}</p>\n{% if profile_data.get('profile_pic_url') %}\n<img src=\"{{ PROFILE_SERVICE_URL }}{{\nprofile_data.profile_pic_url }}\" alt=\"Profile Picture\" width=\"150\">\n{% else %}\n<img src=\"{{ url_for('static',\nfilename='images/default_avatar.png') }}\" alt=\"Default Avatar\"\nwidth=\"150\">\n{% endif %}\n{% else %}\n<p>No profile data available.</p>\n{% endif %}\n{% endblock %}\nStep 3.8: Static Files (main_app/main_app_package/static/)\n\u2022 css/style.css: main_app/main_app_package/static/css/style.css:\nCSS\nbody { font-family: sans-serif; margin: 20px; }\nheader, footer { text-align: center; margin-bottom: 20px; }\nnav a { margin: 0 10px; text-decoration: none; }\n.alert { padding: 10px; margin-bottom: 10px; border: 1px solid\ntransparent; border-radius: 4px; }\n.alert-danger { color: #a94442; background-color: #f2dede; border-\ncolor: #ebccd1; }\n.alert-info { color: #31708f; background-color: #d9edf7; border-color:\n#bce8f1; }\n.error-message { color: red; font-weight: bold; }\n\u2022 css/profile_style.css:\nmain_app/main_app_package/static/css/profile_style.css:\nCSS\n/* Styles specific to the profile page */\n.profile-details img { border: 1px solid #ddd; border-radius: 4px;\npadding: 5px; }\n\u2022 js/main.js: main_app/main_app_package/static/js/main.js:\nJavaScript\nconsole.log(\"Main App JavaScript Loaded!\");\n// Add any global JavaScript here\n\u2022 Place usp_logo.png and default_avatar.png in\nmain_app/main_app_package/static/images/.\nStep 3.9: main_app/run_main_app.py\nThis script runs your main application. main_app/run_main_app.py:\nPython\nfrom main_app_package import create_app # Ensure main_app_package is in\nPYTHONPATH or adjust import\nimport os\napp = create_app()\nif __name__ == '__main__':\n# Debug will be set from Config, but port can be overridden here if\nneeded\nport = int(os.environ.get(\"MAIN_APP_PORT\", 5000)) # Default to 5000 if\nnot set\napp.run(host='0.0.0.0', port=port)\n4. Implementing the profile_service\n(Ensure profile_service_env is activated for these steps if working in a new terminal\nsession)\nStep 4.1: profile_service/config_profile.py (Optional, but good practice) You might\nwant a simple config for the microservice too. profile_service/config_profile.py:\nPython\nimport os\nfrom dotenv import load_dotenv\n# Construct the path to the .env file located in the project root\ndotenv_path = os.path.join(os.path.dirname(os.path.dirname(__file__)),\n'.env')\nload_dotenv(dotenv_path)\nclass ProfileServiceConfig:\nSECRET_KEY = os.environ.get('PROFILE_SERVICE_SECRET_KEY') or\n'profile_service_secret'\nDEBUG = os.environ.get('PROFILE_SERVICE_DEBUG', 'False').lower() ==\n'true'\nUPLOAD_FOLDER = os.path.join(os.path.dirname(__file__), 'profile_pics')\n# Ensure UPLOAD_FOLDER exists\nif not os.path.exists(UPLOAD_FOLDER):\nos.makedirs(UPLOAD_FOLDER)\nStep 4.2: profile_service/run_profile_service.py\nThis is the Flask application for the profile microservice.\nprofile_service/run_profile_service.py:\nPython\nfrom flask import Flask, jsonify, request, send_from_directory\nimport os\n# from config_profile import ProfileServiceConfig # If you created\nconfig_profile.py\napp = Flask(__name__)\n# If using config_profile.py:\n# app.config.from_object(ProfileServiceConfig)\n# Otherwise, configure directly or load from .env here:\napp.config['SECRET_KEY'] = os.environ.get('PROFILE_SERVICE_SECRET_KEY') or\n'profile_service_secret'\napp.config['DEBUG'] = os.environ.get('PROFILE_SERVICE_DEBUG',\n'False').lower() == 'true'\napp.config['UPLOAD_FOLDER'] = os.path.join(os.path.dirname(__file__),\n'profile_pics')\n# Ensure UPLOAD_FOLDER exists\nif not os.path.exists(app.config['UPLOAD_FOLDER']):\nos.makedirs(app.config['UPLOAD_FOLDER'])\n# Dummy data - in a real app, this would come from a database\nPROFILES = {\n\"s12345678\": {\n\"name\": \"Alice Wonderland\",\n\"email\": \"alice.w@example.com\",\n\"student_id\": \"s12345678\",\n\"bio\": \"Curiouser and curiouser.\",\n\"profile_pic_filename\": \"s12345678.jpg\" # Example filename\n},\n\"s87654321\": {\n\"name\": \"Bob The Builder\",\n\"email\": \"bob.b@example.com\",\n\"student_id\": \"s87654321\",\n\"bio\": \"Can we fix it? Yes, we can!\",\n\"profile_pic_filename\": None\n}\n}\n@app.route('/profile/<string:user_id>', methods=['GET'])\ndef get_profile(user_id):\nprofile = PROFILES.get(user_id)\nif profile:\n# Construct the URL for the profile picture if it exists\npic_url = None\nif profile.get(\"profile_pic_filename\"):\n# This endpoint will serve the image, see below\npic_url = f\"/profile_pics/{profile['profile_pic_filename']}\"\nreturn jsonify({**profile, \"profile_pic_url\": pic_url})\nreturn jsonify({\"error\": \"Profile not found\"}), 404\n@app.route('/profile_pics/<path:filename>')\ndef serve_profile_pic(filename):\nreturn send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n# Example: Endpoint to upload/update profile picture (very basic)\n@app.route('/profile/<string:user_id>/upload_pic', methods=['POST'])\ndef upload_profile_picture(user_id):\nif user_id not in PROFILES:\nreturn jsonify({\"error\": \"User profile not found\"}), 404\nif 'profile_image' not in request.files:\nreturn jsonify({\"error\": \"No profile image part in the request\"}),\n400\nfile = request.files['profile_image']\nif file.filename == '':\nreturn jsonify({\"error\": \"No image selected for uploading\"}), 400\nif file: # Add checks for allowed file types\n# Use a secure filename and save it (e.g., based on user_id)\nfilename = f\"{user_id}.{file.filename.rsplit('.', 1)[1].lower()}\" #\ne.g., s12345678.jpg\nfile_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\nfile.save(file_path)\nPROFILES[user_id]['profile_pic_filename'] = filename\nreturn jsonify({\"message\": \"Profile picture uploaded successfully\",\n\"filename\": filename}), 200\nreturn jsonify({\"error\": \"Upload failed\"}), 500\nif __name__ == '__main__':\nport = int(os.environ.get(\"PROFILE_SERVICE_PORT\", 5001)) # Default to\n5001\n# Use a different port than the main app\napp.run(host='0.0.0.0', port=port, debug=app.config['DEBUG'])\nYou'll need to place an image like s12345678.jpg into profile_service/profile_pics/\nmanually for the initial GET request to work with an image.\n5. Running the Applications\nYou will need two separate terminal windows.\nTerminal 1: Run the profile_service\n1. Navigate to your_project_root/profile_service/.\n2. Activate its virtual environment:\no Windows: profile_service_env\\Scripts\\activate\no macOS/Linux: source profile_service_env/bin/activate\n3. Run the service (it's configured to run on port 5001 by default from the .env example or\nthe script):\nBash\npython run_profile_service.py\nYou should see output indicating it's running on http://127.0.0.1:5001/.\nTerminal 2: Run the main_app\n1. Navigate to your_project_root/main_app/.\n2. Activate its virtual environment:\no Windows: main_app_env\\Scripts\\activate\no macOS/Linux: source main_app_env/bin/activate\n3. Set the PYTHONPATH if run_main_app.py has trouble finding main_app_package.\nAlternatively, you can install your package in editable mode (pip install -e . from\nwithin main_app/ which would require a setup.py). For simplicity in development,\nPYTHONPATH can be easier:\no macOS/Linux: export PYTHONPATH=$PYTHONPATH:$(pwd)/.. (run from\nmain_app dir, points to your_project_root)\no Windows (cmd): set PYTHONPATH=%PYTHONPATH%;%CD%\\..\no Windows (PowerShell): $env:PYTHONPATH += \";${pwd}\\..\"\no A more robust way for run_main_app.py is to adjust sys.path or ensure your\nproject structure and how you run it makes main_app_package discoverable. One\ncommon way is to structure run_main_app.py to be outside main_app_package\nand add the parent directory of main_app_package to the path if needed, or run\nmain_app as a module: python -m main_app.run_main_app (this might require\nadjustments to run_main_app.py or __main__.py in the package). For this\nspecific structure, placing run_main_app.py inside main_app directory, and\nmain_app_package being a sibling, the import from main_app_package\nimport create_app in run_main_app.py should work if main_app is in\nPython's search path. Running python run_main_app.py from within the\nmain_app directory usually makes the current directory part of sys.path.\n4. Run the application (it's configured to run on port 5000 by default from the .env example\nor the script):\nBash\npython run_main_app.py\nYou should see output indicating it's running on http://127.0.0.1:5000/.\nAccessing the Application:\n\u2022 Open your web browser and go to http://127.0.0.1:5000/ to see the main_app.\n\u2022 Navigate to http://127.0.0.1:5000/profile. This page in main_app should attempt\nto fetch data from profile_service running on port 5001.\n\u2022 You can test the profile_service directly by going to\nhttp://127.0.0.1:5001/profile/s12345678 in your browser.\n6. Further Development\n\u2022 Database Integration: Add Flask-SQLAlchemy or another ORM to main_app and/or\nprofile_service for persistent data storage.\n\u2022 Authentication: Fully implement the auth.py logic using Flask-Login or JWTs.\n\u2022 Error Handling: Improve error handling in both applications.\n\u2022 Testing: Write unit and integration tests.\n\u2022 Deployment: Consider tools like Docker, Gunicorn, Nginx for deploying your\napplications.\n\u2022 Microservice Communication: For more robust communication than simple requests,\nexplore message queues (e.g., RabbitMQ, Kafka) or gRPC.\n\u2022 Forms: Use Flask-WTF for creating and validating forms in main_app.\n",
  "context": "application.\n\u25aa __init__.py: Marks the directory as a Python package. This is\nwhere you'll typically define your application factory",
  "source_file": "resources\\Year 3\\Flask Framework\\Python Flask Manual.pdf",
  "line_numbers": [
    25,
    649
  ]
}