{
  "title": "Socket Programming",
  "language": "cpp",
  "topics": [
    "machine_learning",
    "web_dev",
    "fundamentals",
    "algorithms",
    "networking",
    "data_structures",
    "database"
  ],
  "purpose": "2.4 Listeningandacceptingconnections........................ 2.5 UDPsockets..................................... 2.6 Closingthesocket..................................",
  "code": "2.7 Usingfunctionsprovidedinsocketmodule.....................\n2.7.1Functionsbasedonresolverlibrary.....................\n2.7.2 Service-relatedfunctions...........................\n2.7.3 Miscellaneousfunctions...........................\n3Basicnetworkstructuresdesign 9\n3.1 DesigningaTCPserver...................\n3.2 TheTCPclient....................................\n3.3 Modelingdatagramapplications..........................\n1\n3\n4Advancedtopicsonservers\n4.1 Buildingapristineenvironment...........................\n4.2 Handlingmultipleconnections............................\n4.2.1 Threadedservers...............................\n4.2.2 Usingselect..................................\n4.2.3 Forkservers..................................\n4.3 Dealingwithclasses.................................\n4.3.1 Simpleconnectionobject..........................\n4.3.2 Applyingadesignpattern..........................\n4.4 Advancedaspectsconcerningclients........................\n5 HTTPprotocol 2\n1\n5.1 CGImodule......................................\n5.1.1 BuildasimpleCGIscript..........................\n5.1.2 UsingCGImodule..............................\n5.1.3 ConguringApacheonLinuxforusingwithCGIscripts.........\n6 Commonprotocols 2\n6\n6.1 DesigningTelnetapplications............................\n6.2 FileTransferProtocol................................\n6.3 SMTPprotocol....................................\n7 GettingStartedWithPythonInWindows 3\n0\n3\nChapter1:Introduction\nNetworkprogrammingisabuzzwordnowinthesoftworld.Weseethemarketlledwithan\navalancheofnetworkorientedapplicationslikedatabaseservers,games,Javaservlets\nandapplets,CGIscripts,dierentclientsforanyimaginableprotocolandtheexamplesmay\ncon-tinue.Today,morethenhalfoftheapplicationsthathitthemarketarenetwork\noriented.Datacommunicationbetweentwomachines(onlocalnetorInternet)isnotany\nmoreacuriositybutisadaytodayreality.\"Thenetworkisthecomputer\"saystheSun\nMicrosystem'smottoandtheyareright.Thecomputerisnomoreseenasaseparate\nentity,dialoggingonlywithit'shumanoperatorbutaspartofalargersystem-thenetwork,\nboundviadatalinkswithotherthousandsofothermachines.\nThisbookispresentingapossiblewayofdesigningnetwork-orientedapplicationsusing\nPython.Withalittleeffort,theexamplesareportabletomostoftheoperatingsystem.\nPresentingaquickstructureofthisbook,firstfoursectionsaredealingwithprimitive\ndesign{atsocketlevel}ofnetworkapplications.Theremainingsectionsaretreating\nspecificprotocolslikehttp,ftp,telnetorsmtp.Thesectiondealingwithhttpwillcontaina\nsubsectionaboutwritingCGIscriptsandusingthecgimodule.\nGoingfurtheronmoreconcretesubjects,iamgoingtoanalyzethepossibilitiesofnetwork\nprogrammingprovidedinPython.RawnetworksupportisimplementedinPythonthroughthe\nsocketmodule,thismodulecomprisingmostlyofthesystem-calls,functionsandconstants\ndefinedbythe4.3BSDInterprocessCommunicationfacilities(see[1]),implementedinobject-\norientedstyle.Pythonoffersasimpleinterface(muchsimplerthanthecorrespondingC\nimplementation,thoughbasedonthisone)toproperlycreateanduseasocket.Primarily,is\ndefinedthesocket()functionreturningasocketobject.Thesockethasseveralmethods,\ncorrespondingtotheirpairsfrom Csys/socket.h,likebind(),connect(),listen()oraccept().\nProgrammersaccustomedwithsocketusageunderClanguagewillfindveryeasytotranslate\ntheirknowledgeinthemore-easy-to-usesocketimplementationunderPython.Python\neliminatesthedauntingtaskoffillingstructureslikesockaddrinorhostentandeasetheuseof\npreviouslymentionedmethodsorfunctions{parameterpassingandfunctionscallareeasierto\nhandle.Somenetwork-orientedfunctionsareprovidedtoo:gethostbyname(),getprotobyname()\norconversionfunctionsntohl(),htons(),usefulwhenconvertingintegerstoandfromnetwork\nformat.ThemoduleprovidesconstantslikeSOMAXCONN,INADDR*,usedingesockopt()or\nsetsockopt()functions.ForacompletelistofabovementionedconstantscheckyourUNIX\ndocumentationonsocketimplementation.\nPythonprovidebesidesocket,additionalmodules(infactthereisawholebundleofthem)\nsupportingthemostcommonnetworkprotocolsatuserlevel.Forexamplewemayfind\nusefulmoduleslikehttplib,ftplib,telnetlib,smtplib.ThereisimplementedsupportforCGI\nscriptingthroughcgimodule,amoduleforURLparsing,classesdescribingwebservers\nandtheexamplesmaycontinue.Thismodulesarespecificimplementationsofwellknown\nprotocols,theuserbeingencouragedtousethemandnottryingtoreinventthewheel.I\nhopethatyouwillenjoytherichnessofPython'snetworkprogrammingfacilitiesanduse\ntheminnewandmoreexcitingwaysonLINUXaswellWINDOWSEnvironment.\nBecausealltheexamplesbelowarewritteninPython,thereaderisexpectedtobefluent\nwiththisprogramminglanguage.\n4\nChapter2:BasicSocketOverview\nThesocketisthebasicstructureforcommunicationbetweenprocesses.Asocketis\ndefinedas\"anendpointofcommunicationtowhichanamemaybebound\"[1].The\n4.3BSDimplementationdefinethreecommunicationdomainsforasocket:theUNIX\ndomainforon-system communicationbetweenprocesses;theInternetdomainfor\nprocessescommunicatingoverTCP(UDP)/IPprotocol;theNSdomainusedbyprocesses\ncommunicatingovertheoldXe-roxcommunicationprotocol.\nPythonisusingonlythefursttwocommunicationdomains:UNIXandInternetdomains,theAF\nUNIXandAFINETaddressfamiliesrespectively.UNIXdomainaddressesarerepresentedas\nstrings,namingalocalpath:forexample/tmp/sock.Thiscanbeasocketcreatedbyalocal\nprocessor,possibly,createdbyaforeignprocess.TheInternetdomainaddressesare\nrepresentedasa(host,port)tuple,wherehostisastringrepresentingavalidInternet\nhostname,saymatrix.ee.utt.rooranIPaddressindotteddecimalnotationandportisavalid\nportbetween1and65535.Isusefultomakearemarkhere:insteadofaqualifiedhostnameor\navalidIPaddress,twospecialformsareprovided:anemptystringisusedinsteadINADDR\nANYandthe'<broadcast>'stringinsteadofINADDRBROADCAST.\nPythonofferallfivetypeofsocketsdenedin4.3BSDIPCimplementation.Twoseemto\nbegenerallyusedinthevastnessmajorityofthenewapplications.Astreamsocketisa\nconnection-orientedsocket,andhastheunderlayingcommunicationsupporttheTCP\nprotocol,providingbidirectional,reliable,sequencedandunduplicatedowofdata.A\ndatagramsocketisaconnectionlesscommunicationsocket,supportedthroughtheUDP\nprotocol.Itoersabidirectionaldataflow,withoutbeingreliable,sequencedor\nunduplicated.A processreceivingasequenceofdatagramsmayfindduplicated\nmessagesor,possibly,inanotherorderinwhichthepacketsweresent.Theraw,\nsequencedandreliablydeliveredmessagesocketstypesarerarelyused.Rawsockettype\nisneededwhenoneapplicationmayrequireaccesstothemostintimateresources\nprovidedbythesocketimplementation.Ourdocumentisfocusingonstream and\ndatagramsockets.\nCreatingasocket\nAsocketiscreatedthroughthesocket(family,type[,proto])call;familyisoneofthe\nabovementionedaddressfamilies:AFUNIXandAFINET,typeisrepresentedthroughthe\nfol-lowingconstants:SOCKSTREAM,SOCKDGRAM,SOCKRAW,SOCKSEQPACKETand\nSOCKRDM.protoargumentisoptionalanddefaultsto0.Weseethatsocket()function\nreturnsasocketinthespecifieddomainwiththespecifiedtype.Becausetheconstants\nmentionedabovearecontainedinthesocketmodule,allofthemmustbeusedwiththe\nsocket.CONSTANTnotation.Withoutdoingso,theinterpreterwillgenerateanerror.To\ncreateastreamsocketintheInternetdomainweareusingthefollowingline:\nsock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\nSubstitutingsocket.SOCK_STREAMwithsocket.SOCK_DGRAMwecreateadatagramsocket\nintheInternetdomain.ThefollowingcallwillcreateastreamsocketintheUNIXdomain:\nsock=socket.socket(socket.AF_UNIX,socket.SOCK_STREAM)\nIdiscussedsofaraboutobtainingasocketofdifferenttypesindifferentcommunication\ndomains.\n5\nConnectingasocketanddatatransfer\nAserverfromourpointofviewisaprocesswhichlistenonaspecifiedport.Wemaycall\ntheassociationport,processasaservice.Whenanotherprocesswantstomeetthe\nserveroruseaspecificserviceitmustconnectitselftotheaddressandportnumber\nspecifiedbytheserver.Thisisdonecallingthesocketmethodconnect(address),where\naddressisapair(host,port)intheInternetdomainandapathnameintheUNIXdomain.\nWhenusingtheInternetdomainaconnectionisrealizedwiththefollowingcode:\nsock.connect(('localhost',8000))\nwhileinUNIXdomain,\nsock.connect('/tmp/sock')\nIftheserviceisunavailableortheserverdon'twanttotalkwiththeclientprocessa\nsocket.error-(111,'Connectionrefused')isissued.Elsewhere,aftertheconnectionis\nestablishedwiththedesiredserver,dataissentandreceivedwithsend(buffer[,flags])\nandrecv(buffer[,flags])methods.Thesemethodsacceptsasmandatoryparameterthe\nsizeofthebufferinbytesandsomeoptionalflags;foradescriptionaboutthemeaningof\ntheagsconsulttheUNIXmanpageforthecorrespondingfunction.\nBindinganametosocket\nThesocket,aftercreation,isnameless,thoughithaveanassociateddescriptor.Beforeit\ncanbeuseditmustbebindtoaproperaddresssincethisistheonlywayaforeign\nprocessmayreferenceit.Thebind(address)methodisusedto\"name\"asocket.The\nmeaningoftheaddressisexplainedabove.NextcallwillbindasocketintheInternet\ndomainwithaddresscomposedfromhostnamelocalhostandportnumber8000:\nsock.bind(('localhost',8000))\nPleasetakecarewhentyping:indeedtherearetwopairsofparenthesis.Doingelsewhere\ntheinterpreterwillissueaTypeError.Thepurposeofthetwopairsofparenthesisis\nsimple:addressisatuplecontainingastringandaninteger.Thehostnamemustbe\nproperlypicked,thebestmethodistousegethostname()routineinordertoassurehost\nindependenceandportability.CreatingasocketintheUNIXdomainuseaddressasa\nsinglestring,namingalocalpath:\nsock.bind('/tmp/sock')\nThiswillcreatethe'/tmp/sock'le(pipe)whichwillbeusedforcommunicationbetween\ntheserverandclientprocesses.Theusermusthaveread/writepermissionsinthat\nspecificdirectorywherethesocketiscreatedandtheleitselfmustbedeletedonceit'sno\nlongerofinterest.\nListeningandacceptingconnections\nOncewehaveasocketwithapropernameboundtoit,nextstepiscallingthelisten(queue)\nmethod.Itinstructsthesockettopassivelylistenonportport.listen()takeasparameteran\nintegerrepresentingthemaximumqueuedconnection.Thisargumentshouldbeatleast1\nandmaximum,system-dependent,5.Untilnowwehaveasocketwithaproperbounded\naddress.Whenaconnectionrequestarrives,theserverdecidewhetheritwillbeaccepted\nornot.Acceptingaconnectionismadethroughtheaccept()method.Ittakesno\nparameterbutitreturnsatuple(clientsocket,address)whereclientsocketisanewsocket\nserverusestocommunicatewiththeclientandaddressistheclient'saddress.accept()\nnormallyblocksuntilaconnectionisrealized.Thisbehaviorcanbeoverriddenrunningthe\n6\nmethodinaseparatethread,collectingthenewcreatedsocketdescriptorsinalistand\nprocessthem inorder.Meantime,theservercandosomethingelse.Theabove\nmentionedmethodsareusedasfollows:\nsock.listen(5)\nclisock,address=sock.accept()\nThecodeinstructsthesocketonlisteningwithaqueueofveconnectionsandacceptall\nincoming\"calls\".Asyoucansee,accept()returnsanewsocketthatwillbeusedinfurther\ndataexchanging.Usingthechainbind-listen-acceptwecreateTCPservers.Remember,a\nTCPsocketisconnection-oriented;whenaclientwantstospeaktoaparticularserverit\nmustconnectitself,waituntiltheserveracceptstheconnection,exchangedatathenclose.\nThisismodelingaphonecall:theclientdialthenumber,waittilltheothersideestablish\ntheconnection,speakthenquit.\nUDPsockets\nWechosetodealwithconnectionlesssocketsseparatelybecausethesearelesscommonin\ndaytodayclient/serverdesign.Adatagramsocketischaracterizedbyaconnectionlessand\nsymmetricmessageexchange.Serverandclientexchangedatapacketsnotdatastreams,\npacketsflowingbetweenclientandserverseparately.TheUDPconnectionresemblethepostal\nsystem:eachmessageisencapsulatedinanenvelopeandreceivedasaseparateentity.A\nlargemessagemaybesplitintomultipleparts,eachonedeliveredseparately(notinthesame\norder,duplicatedandsoon).Isthereceiver'sdutytoassemblethemessage.\nTheserverhaveabind()methodusedtoappendapropernameandport.Thereareno\nlisten()andaccept()method,becausetheserverisnotlisteningandisnotacceptsconnection.\nBasically,wecreateaP.O.Boxwhereispossibletoreceivemessagesfromclientprocesses.\nClientsonlysendpackets,dataandaddressbeingincludedoneachpacket.\nData packets are send and received with the sendto(data,address )and\nrecvfrom(buffer[,flags])methods.Firstmethodtakesasparametersastringandthe\nserveraddressasexplainedaboveinconnect()andbind().Becauseisspeciedtheremote\nendofthesocketthereisnoneedtoconnectit.Thesecondmethodissimilartorecv().\nClosingthesocket\nAfterthesocketisnolongerused,itmustbeclosedwithclose()method.Whenauseris\nnomoreinterestedonanypendingdataashutdownmaybeperformedbeforeclosingthe\nsocket.Themethodisshutdown(how),wherehowis:0ifnomoreincomingdatawillbe\naccepted,1willdisallowdatasendingandavalueof2preventbothsendandreceiveof\ndata.Remember:alwayscloseasocketafterusingit.\nUsingfunctionsprovidedinsocketmodule\nItispresentedbeforethatsocketmodulecontainssomeusefulfunctionsinnetwork\ndesign.This functions are related with the resolverlibraries,/etc/services or\n/etc/protocolsmappinglesorconversionsofquantities.\nFunctionsbasedonresolverlibrary\nTherearethreefunctionsusingBIND8orwhateverresolveryoumayhave.This\nfunctionsusu-allyconvertsahostnametoIPaddressorIPaddresstohostname.One\nfunctionisnotrelatedwiththeresolver,gethostname(),thisfunctionreturningastring\ncontainingthenameofthemachinewherethescriptisrunning.Itsimplyread(through\nthecorrespondingCfunction)the/etc/HOSTNAME.Wecanuse(priortoversion2.0)\nthegetfqdn(hostname)function,whichreturnthe\"FullyQualifiedDomainName\"forthe\nhostname.Iftheparameterismissingitwillreturnthelocalhost'sFQDN.Twofunctions\nareusedtotranslatehostnamesintovalidIPaddresses:gethostbyname(hostname)\nandgethostbynameex(hostname).Bothfunctionstakeasmandatoryparameteravalid\n7\nhostname.FirstfunctionreturnsadottednotationIPaddressandthelastfunction(ex\nfrom\"extended\")atuple(hostname,aliaslist,ipaddrlist).Lastfunctiondiscussedhereis\ngethostbyaddr(ipaddr)returninghost-namewhentheIPaddressisgiven.\nService-relatedfunctions\n/etc/servicesisalewhichmapsservicestoportnumbers.Forexample,httpserviceismapped\nonport80,ftpserviceonport21andsshserviceonport22.getservbyname(servname)isa\nfunctionsthattranslatesaservicenameintoavalidportnumber,basedonthelepresented\nabove.Themethodwillassureplatformindependence(orevencomputerindependence)while\nthesameservicemaynotbemappedexactlyonthesameport.\nWhenwewanttotranslateaprotocolintoanumbersuitableforpassingasthird\nargumentforthesocket()functionusegetprotobyname(protoname).Ittranslate,based\non/etc/protocolsle,theprotocolname,sayGGPorICMP,tothecorrespondingnumber.\nMiscellaneousfunctions\nToconvertshortandlongintegersfrom hosttonetworkorderandreversed,four\nfunctionswereprovided.Onsomesystems(i.e.IntelorVAX),hostbyteorderingisdi\nerentfrom networkorder.Thereforeprogramsarerequiredtoperform translations\nbetweenthistwoformats.Thetablebelowsynthesizetheiruse:\nFunctionName Synopsis\nhtons(sint) Convertshortintegerfrom hosttonetwork\nformat\nntohs(sint) Convertshortintegerfrom networktohost\nformat\nhtonl(lint) Convertlong integerfrom hostto network\nformat\nntohl(lint) Convertlong integerfrom networkto host\nformat\n8\nChapter3:Basicnetworkstructuresdesign\nThischaptrr.isfocusedinpresentingfoursimpleexamplestoillustratetheprevious\nexplainednetworkfunctionsandmethods.Examplesareprovidingasimplecodedesigned\nforclaritynotforeciency.Therearepresentedtwopairsofserver-clientstructures:one\npairfortheTCPprotocolandtheotheronefortheUDPprotocol.Thereaderisencouraged\ntounderstandthisexamplesbeforegoingfurther.\nFigure1:TCPconnection\nAstreamconnectionispresentedabove,figure1.Observehowtheprocessesinteract:the\nserverisstartedandmustbeinacceptstatebeforetheclientissueitsrequest.Theclient's\nconnect()methodistryingtorendezvouswiththeserverwhilethisoneisaccepting\nconnec-tions.Aftertheconnectionhavebeennegotiatedfollowsadataexchangeandboth\nsidescallclose()terminatingtheconnection.Remember,thisisaoneconnectiondiagram.\nIntherealworld,aftercreatinganewconnection(inanewprocessorinanewthread)the\nserverreturntoacceptstate.*()functionsareuser-denedfunctionstohandleaspecic\nprotocol.Datatransferisrealizedthroughsend()andrecv().\nAdatagramexchangeispresentedingure2.Asyoucansee,serveristheprocesswhichbind\nitselfanameandaport,beingthefirstthatreceivearequest.Theclientistheprocesswhich\nfirstsendarequest.Youmayinsertabind()methodintoclientcode,obtainingidenticalentities.\nWhichistheserverandwhichistheclientitishardtopredictinthiscase.\nHopingthatthepresenteddiagramswereuseful,wearegoingfurtherpresentingthecode\nonfoursimplestructures,modelingtheTCPandUDPclient-serverpairs.\nDesigningaTCPserver\nDesigningaTCPservermustfollowthebind-listen-acceptsteps.Producingcodeforasimple\nechoserver,runningonlocalhostandlisteningonport8000isfairlysimple.Itwillaccept\n9\nFigure2:UDPconnection\nasingleconnectionfromtheclient,willechobackallthedataandwhenitreceivesnothing\nclosetheconnection.\nimportsocket\nserversocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\nserversocket.bind(('localhost',8000))\nserversocket.listen(1)\nclientsocket,clientaddress=serversocket.accept()print\n'Connectionfrom',clientaddress\nwhile1:\ndata=clientsocket.recv(1024)if\nnot data: break\nclientsocket.send(data)\nclientsocket.close()\nOnfirstlineisdeclaredtheimportstatementofthesocketmodule.Lines3through6isthe\nstandardTCPserverchain.Online6theserveraccepttheconnectioninitiatedbytheclient;\ntheaccept()methodreturnsclientsocketsocket,furtherusedtoexchangedata.Thewhile\n1loopisathe\"echocode\";itsendsbackthedatatransmittedbytheclient.Aftertheloop\nisbroken(whentheclientsendanemptystringandtheifnotdata:breakconditionismet)\nthesocketisclosedandprogramexits.\nBeforegettingintoclientcode,aquickwaytotesttheserverisatelnetclient.Because\ntelnetrunoverTCPprotocolthereshouldbenoproblem indataexchange.Telnetwill\nsimplyreaddatafromthestandardinputandsendittoserverand,whenitreceivesdata,\ndisplayitontheterminal.\n$ telnetlocalhost8000\nTrying127.0.0.1...\nConnected to localhost\nEscapecharacteris^].\n$\nAfterthetelnetsendsomedataitenterinterminalmode:typesomethingandtheserver\nwillechoitback.\n10\nTheTCPclient\nItistimetofocusonwritingclient'scodeforourechoserver.Theclientwillenteraloop\nwheredataisreadfromthestandardinputandsent(in1024bytespackets-thisisthe\nmaximumamountofdatatheserverisreadingspecifiedintheservercodeabove)tothe\nserver.Theserverissendingbackthesamedataandtheclientispostingitagain.Hereis\nthecode:\nimportsocket\nclientsocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\nclientsocket.connect(('localhost',8000))\nwhile1:\ndata = raw_input('>')\nclientsocket.send(data)if\nnotdata:break\nnewdata = clientsocket.recv(1024)\nprintnewdata\nclientsocket.close()\nTheclientfirstsenddataandonlyafterthedatawassent,incasedataiszero,exits.This\npreventserverfromhanging(remember,theserverexitwhenitreceiveanemptystring).\nWedecidetostorethereceiveddatainnewdatatopreventanyproblemsthatmayoccur,if\nnodataorsomethingwrongwastransmittedbackfromtheserver.Comparedwiththe\nservertheclientcodeismuchsimpler-onlythesocketcreationandasimpleconnect,\nthentheprotocolfollows.\nModelingdatagramapplications\nWasspecifiedbeforethatisaslightlydifferencebetweenadatagram clientanda\ndatagramserver.Let'sconsideragaintheexampleofaserverrunningonlocalhostand\nreceivingpacketsonport8000.\nimportsocket\nsock=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\nsock.bind(('localhost',8000))\nwhile1:\ndata,address=recvfrom(1024)if\nnotdata:break;sock.sendto(data,\naddress)\nsock.close()\nAsyoucanseeintheexampletherearenolistenoracceptsteps.Onlybindingisnecessary,\nelsewheretheclientisnotawarewhereitmustsendpacketstoserver.Insimpleterms,the\nkernelsimply'push'datapacketstotheserveronthespecifiedport,beingnoneedforcon\nrmationofconnectionandsoon.Theserverdecideifthepacketwillbeacceptedornot.\nrecvfrom()returnsbesidedatatheclient'saddress,usedfurtherinthesendto()method.\nTheclientisnotmuchdifferentfromtheserver:\nimportsocket\nsock= socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\nwhile1:\ndata = raw_input('>') sock.sendto(data,\n('localhost',8000))ifnotdata:break;\nnewdata = sock.recvfrom(1024)\nprintnewdata\nsock.close()\n11\nWedonothaveabindmethod,whiletheserverisusingaddressreturnedbyrecvfrom()\nmethod.IspossibletodesignanalmostsymmetricUDPserver/client,usingthesame\nstructure.Theclientwillbethesidethatwillinitiatefirsttheconnection.\n12\nChapter4:Advancedtopicsonservers\nThissectioncoversomeadvancedtechniquesextensivelyusedinmodernserverdesigns.\nThefourstructurespreviouslypresentedarejustsomeillustrationsonhowtousesocket-\nrelatedfunctions.Thereaderisnotencouragedtousethisfourstructures,becausethe\ncodeisverylimitedandwasproducedforexemplicationpurposeonly.Goingfurther,is\nnecessarytolearnsomewell-knownpatterns,enhancingserverdesign.\nBuildingapristineenvironment\nWhenaserverisstarteditmustdefinesomeparametersneededatruntime.Thisisdone\nthroughget*()functions.Nextcodeiswrittenforawebserverandistryingtodetermine\nthesystem'shostname,portnumberonwhichhttpprotocolisrunning.\nhostname=gethostname()\ntry:\nhttp_port=getservbyname('http','tcp')except\nsocket.error:\nprint'Servererror:http/tcp:unknownservice'\nWecheckgetservbyname()againsterrorsbecauseispossibleforaservicetobeabsent\nonthatsystem.Definitely,onnewimplementedservices/protocolsisuselesstocallthis\nfunction.hostnameandhttp_portwillbefurtherusedasparameterstobind().\nAfterthepreviousstepisover,theservermustbedisassociatedfrom thecontrolling\nterminalofit'sinvoked,thereforeitwillrunasdemon.InCthisisdonewiththeioctl()\nsystem-call,closingthestandardinput,outputanderrorandperformingsomeadditional\noperations[1].InPythontheservermustbeinvokedwitha\"&\"afteritsname.Anotherway\ntocompletethis,therecommendedone,istocallafork()whichcreatetwoprocesses:the\nparent,thatexitsimmediatelyandthechild(thechildisourapplication).Thechildis\nadoptedbyinit,thusrunningasdemon.Thisisanaffordablemethodandisnotimplying\ncomplicatecode:\nimportos\n...\npid=os.fork()\nifpid:os._exit(0)else:\n... #servercodebeginhere\nTheserverwillbeablenomoretosendmessagesthroughthestandardoutputorstandard\nerrorbutthroughsyslogfacility.Afterthistwostepsarecompleted,wecanselecta\nmethodforhandlingmultipleconnectionsinthesametime.\nHandlingmultipleconnections\nAnalysingtheserverspresentedabove,sections3.1and3.3,it'sclearthatthedesignhasa\nhugeshortcoming:theserverisnotabletohandlemorethanoneclient.Arealserveris\ndesignedtoservemorethenoneclientandmoreover,multipleclientsinthesametime.\nTherearethreemethodstohandlethisissue:throughtheselect()functions,creatinga\nnewprocessforeachincomingrequestviafork()ortohandlethatrequestonaseparate\nthread.Threadingisthemostelegantmethodandwerecommendit.Usingselect()save\nsomeCPUincaseofheavilyaccessedserversandmaybeagoodoptionsometime.\nCreatinganewprocessforeachincomingconnectionisthemostusedpatternincurrent\n13\nserverdesign(forexampleApacheuseit)butithavethedisadvantageofwastingCPU\ntimeandsystemresources.Again,werecommendusingthreadedservers.\nThreadedservers\nThreadedserversuseaseparatethreadforhandlingeachconnection.Threadsaredefined\nasalightprocessesandarerunninginandalongwiththemainprocesswhichstarted\nthem.Thediagramispresentedbelow:\nFigure3:Threadedserverdiagram\nAssumingwehaveauser-definedfunctioncalledhandlertohandleasimpleconnection,\neachtimeaclientwantstoexchangedatawiththeserverhandlerisstartedonaseparate\nthreaddoingitsjob.Thesquaredanddashedarrowdenoteanewthreadcreation.Thenew\nthreadwillinteractfurtherwiththeclient.BellowisprovidedanexampleforaTCPserver\nwhichmainsocketiscalledsock.\nimportsocket,thread\ndefhandler(socket):\n...\n...\nwhile1:\nclisock, addr = sock.accept()\nsyslog.syslog('Incoming connection')\nthread.start_new_thread(handler,(clisock,))\nThehandlingfunctionmustbedenedbeforebeingpassedasargumentforthenewthread.In\nexamplethisfunctiontakeasparameterthesocketcorrespondingtotheclientwhichinitiate\ntheconnection.Thefunctionmayperformanykindofoperationonthatsocket.Theloggingjob\nisnomoredonethroughtheprintfunctionbutthroughsyslog.Alternatively,ispossibletowrite\nafunctiontohandlethisjobseparately(producingourownlogsinuser-denedles).\nAnotherchoiceistousetheThreadingmodulewhichoffersamoreexibleimplementationof\nthreads.Infact,youcreateathreadobject,withseveralmethods,moreeasytohandle.The\nfunction'sargumentsmustbepassedinatuple(orifitisasingleelementuseasingleton[4])\ninordertohaveanerror-freecode,elsewheretheinterpreterwillissueaTypeError.Thedesign\nmaybeenhancedputtingtheaccept()methodinaseparatethread;consequentlytheserverwill\n14\nbefree(ifaccept()blocks,thenormalbehavior,itwilldothisseparatefromthemainthreadof\ntheserver)andmaybeusedtoperformsomeadditionaloperationorevenlistentoanotherport.\nIsuggestyouthedesignofawebserverrunningonstandardHTTPportandbeingremotely\necontrolledinthesametimeonanarbitraryport.Othervaluablefeature:usingthreadsadda\nprofessional\"touch\"toyourcodeandeliminatetheneedofwritecodetohandleforksystem-\ncallandadditionalfunctions.Inthesametime,ifyouwanttodesignthewebservermentioned\nabove,therewillbeatleastthreeprocessesrunninginthesametime,causingprocessorto\nslowdown.\nUsingselect\nPythonprovidesastraightforwardimplementationoftheUNIXstandardselect()function.This\nfunction,definedinselectmodule,isusedonmultiplexingI/Orequestsamongmultiplesockets\norledescriptors.Therearecreatedthreelistsofsocketdescriptors:onelistwithdescriptors\nforwhichwewanttoreadfrom,alistofdescriptorstowhichwewanttobeabletowriteanda\nlistwhichcontainssocketswith'specialconditions'pending.Theonly\"specialcondition\"\nimplementedistheout-of-banddata,specifiedinthesocketimplementationasMSGOOB\nconstantandusedasspecialagforthesend()andrecv()methods.Thisthreelistsarepassed\nasparameterstofunctionbesideatimeoutparameter,specifyinghowlongshouldwaitselect()\nuntilreturns,incasenodescriptorisavailable.Inreturn,select()provideuswiththreelists:one\nlistswithsocketwhichmightbereadfrom,anotherwithwritablesocketsandthelastone\ncorrespondingto'specialcondition'category.\nAspecialsocketfeaturewillhelpinamoreexibleapproachtohandleselect()calls.Thisis\nthesetblocking()method,which,ifcalledwitha0parameter,willsetthenonblocking\noptionforasocket[7].Thatis,requeststhatcannotcompleteimmediately,causingthe\nprocesstosuspendaren'texecuted,butanerrorcodeisreturned.Thereisprovidedacode\nforabetterunderstandingofthesubject:\nimportsocket,select\npreaders = []\npwriters=[]\n...\nsock.setblocking(0)\npreaders.append(sock)\nrtoread,rtowrite,pendingerr=select.select(preaders,pwriters,[]\\,30.0)\n...\nAsyoucanseeweconstructedtwolists,oneforthepotentialreadersandtheotheronesfor\nthepotentialwriters.Becausethereisnointerestinspecialcondition,anemptylistispassed\nasparametertoselect()insteadofalistwithsockets.Thetimeoutvalueis30seconds.After\nthefunctionreturns,wehavetwousablelists,withtheavailablesocketsforreadingandwriting.\nIsagoodideaatlasttoaddthemainserversocket(heresock)tothepotentialreaderslist,\nthereforetheserverbeingunabletoacceptincomingrequests.Acceptingrequestsmechanism\nisfairlysimple:whenarequestispendingontheserversocket,itisreturnedinthereadyto\nreadlistandonemayexecuteanaccept()onit.Theresultingclientsocketmaybeappendedto\nanyofthelists(maybeonboth,dependingonprotocol).Whentimeoutparameteris0the\nselect()takestheformofapoll,returningimmediately.\nForkservers\nForkserversarethefirstchoiceinnetworkdesigntoday.Oneexamplewillgiveyouabirds-\neyeview:Apache,themostpopularwebservertodayisconceivedasaforkserver.Fork\nserversusetheexibleprocessmanagementimplementedonmostmodernUNIXflavors.\n15\nThebasicideaistogetanewprocessforeveryincomingrequest,theparentprocessonly\nlisten,acceptconnectionsand\"breed\"children.Usingtheforkalternativeyoumustaccept\nitsshortcomings:youmustdealwithprocessesatprofessionallevel,theserverismuch\nslowercomparedtoaserverdesignedwiththreadsandisabitmorecomplicated.This\nimpliesthatyoumustdesignaremanfunctiontocollectthezombies,addingseparate\ncodeforparentandforchildrenandsoon.Infigure4ispresentedadiagramshowingthe\nalgorithmforaforkserver.Inthegureisnotpresentedtheremanfunction;usuallyitis\ncalledbeforecallingfork().Thecodeforparentandforchildrenisexplicitlymarked.The\ncreationofanewprocessissignaledthroughacircledanddashedarrow.Afterthedata\nexchangeisoverandbothpartscallclose()onsocket,thechildiswaitedbytheparent\nthroughawait()orwaitpid()system-call.Thissystem-callspreventsthebirthofso-called\nzombies.Iscustomarytocreatealistwheretoaddallthechildrenpidsresultedafterthe\ncallingfork().Thislistispassedasparametertotheremanfunctionwhichtakecareof\nthem.Arepresentedtwoforkmethods:\nsimplefork:thismethodsimplycallfork()thenwithanif-then-else,basedonthe\nresultingpidexecuteseparatecodeforparentandforchild.Ifthechildisnotwaited\nitwillbecameazombie.\nseparatefork:theparentforksandcreatethechildone.Thisforksagainandcreate\nchildtwothenexit.Childoneiswaitedintheparent.Becausechildtwowasleft\nwithoutaparentitisadoptedbyinit,thus,whenitcallexit(),initwilltakecareofthis\nprocessnottobecameazombie.\nFigure4:Forkserverdiagram\nIpresentnowcodeforaforkserverwithbothmethods.Firstmethodisusuallyexpected.\nAgain,sockistheserver'ssocket.\nimportos,socket,syslog\nchildren_list=[]\ndeffireman(pids):\nwhilechildren_list:\npid,status=os.waitpid(0,os.WNOHANG)if\n16\nnotpid:break\npids.remove(pid)\ndefhandler(socket):\n...\n...\nwhile1:\nclisock, addr = sock.accept()\nsyslog.syslog('Incoming connection')\nfireman(children_list)\npid=os.fork()\nif pid: #parent\nclisock.close()\nchildren_list.append(pid)\nifnotpid:#childsock.close()\nhandler(clisock)\nos._exit(0)\nhandlerfunctionisdescribedin4.2.1.Pleaseseehowseparatecodeisexecutedforparent\nandforchild.Itisagoodhabittoclosetheserversocketsockinthechildandtheclient\nsocketclisockintheparent.Thefiremanwaitallthechildrenfromthespeciedlist,passed\nasparameter.Thesecondmethodmaybeimplementedasfollows:\n...\nwhile1:\nclisock, addr = sock.accept()\nsyslog.syslog('Incoming connection')\nfireman(children_list)\npid=os.fork()\nif pid: #parent\nclisock.close()\nchildren_list.append(pid)\nifnotpid:#child1pid=\nos.fork()\nifpid:os._exit(0)ifnot\npid:#child2sock.close()\nhandler(clisock)\nos._exit(0)\nFirstchildonlyforksthenexit.Itiswaitedonparent,sotheremustbenoproblemonit.The\nsecondchildisadoptedandthenitenterin\"normal\"mode,executingthehandlerfunction.\nDealingwithclasses\nThissectiondescribeshowtodorealobject-orientedprogramming.Becauseitisacommon\ntopic,bothreferringserverandclients,wedecidedtocoverbothaspectsinthissection.You\nmustlearnhotoconstructclassesthatdealswithnetworkingfunctions,constructing\nconnectionobjectsandmuchmore.Thepurposeistodesignallthisobjectsafteragiven\n17\npattern[3].Thiswillsimplifythedesignandwilladdmorereusabilityandpowertoyourcode.\nFormoreinformationaboutclassesorusingclassesinPython,see[5]and[6].\nSimpleconnectionobject\nThissection'sgoalistodesignasimpleconnectionobject.Thepurposeofdesigningsuch\nanobjectistoeasethedesignofagivenapplication.Whileyouhavealreadydesignedthe\npropercomponents(objects)youmayfocusondesigningtheprogramatahigherlevel,at\ncomponentlevel.Thisgiveyouapreciouslevelofabstraction,veryusefulinalmostallthe\ncases.\nLet'ssupposewewanttocreateaTCPsocketserverinoneobject.Thiswillallow\nconnectionfrom TCPclientsonthespeciedport.First,theremustbedenedseveral\nmethodstohandlethepossiblesituationthatappearduringruntime.Referringatfigure1,\nweseethattheservermust\"launch\"asocketandlistenonit,then,whenaconnectionis\ncoming,acceptingtheconnectionthendealwithit.Thefollowingmethodsarevisibleto\ntheuser:OpenServer,EstablishConnection,CloseConnection.OpenServerisamethodthat\nsetsthehostnameandtheportonwhichtheserverisrunning.Whenaconnectionis\nincoming,EstablishConnectiondecideifitwillbeacceptedbasedonafunctionpassedas\nparameter.CloseConnectionisselfexplanatory.\nimportsocket\n...\nclassTCPServer:\ndef__init__(self):pass;\ndefOpenServer(self,HOST='',PORT=7000):try:\nsock = socket.socket(socket.AF_INET,\\\nsocket.SOCK_STREAM);\nexceptsocket.error:\nprint 'Server error:Unable to open socket'\nsock.bind((HOST,PORT));\nsock.listen(5);\nreturnsock;\ndefEstablishConnection(self,sock,connection_handler):while1:\nclient_socket, address = sock.accept(); print\n'Connection from', `address`;\nthread.start_new_thread(connection_handler,\\\n(client_socket,));\ndef CloseConnection(self, sock):\nsock.close();\nThe__init__()functiondoesnothing.Whentheserverisstarted,theTCPServerobject,through\nOpenServer,takesasparametersthehostnameonwhereitrunandtheserviceportnumber.\nAlternatively,thismaybedonepassingthisparameterstothe__init__()function.Themethod\nperformalsoamerrorcheckingonsocket.WearegoingtoinsistovertheEstablishConnection\nmethod.Itimplementathreadedserverandtakes,amongotherparameters,afunctionname\n(herecalledconnection_handler)usedtohandletheconnection.Apossibleenhancementisto\ndesign this method to take as parametera tuple (ora dictionary)containing the\nconnection_handlerparameters,whichissuppliedinourexamplewithoneparameter,\ngeneratedinsidethemethodwhichcalledit,theclient_socket.Thereisnosensetoinsistover\nCloseConnectionmethod.ItwasprovidedtoassureauniforminterfacetotheTCPServerobject.\nFutureimplementation(throughinheritanceorthroughobjectcomposition,see[3])mayfind\n18\nusefultospecifyadditionalfeaturestothismethod,butnowtheballisinyourfield.\nApplyingadesignpattern\nThestatedesignpatterntsourpurpose.Thedesignwillincludeveclasses:oneclass,the\nTCPServer,willbetheclient(theuseroftheotherfourclasses);TCPConnectionisaclassthat\nrealize a TCP connection: through OpenConnection(), HandleConnection() and\nCloseConnection()itmanagesthesocket;also,arecreatedthreestateclasses,representing\nthestatesinwhichTCPConnectionmaybe.Thisclassesareinheritedfromanabstractclass,\ncalledTCPState.Below ispresentedadiagram illustratingtherelationshipbetweenthe\nconnectionobjectanditsstates(representedasclasses):Hereisthecodeforthe\nTCPConnection\nFigure5:DesigningaTCPconnectionwithstatepattern\nclass.TheTCPServerclass(pleasebecareful:whentheTCPServerexamplewasgivenin\nsection4.3.1,itwasaserver;herewedesignonlyaconnectionclass,whichwillfurtherbe\nusedindesigningaserveroraserverclass)simplyinstantiateaconnectionobjectand\nperformsomeadditionaloperations.\nclassTCPConnection:\nself.state=TCPClosed(self.sock)\ndef__init__(self,host,port):self.host\n=hostself.port=port\nself.sock = socket.socket(socket.AF_INET,\\\nsocket.SOCK_STREAM) self.sock.bind((host,\nport))self.sock.listen(5)\nself.state=TCPListen(self.sock)\ndefOpenConnection(self):\nifstateisTCPClosed:self.state=TCPListenifstate\nisTCPListen:\nself.clisock=self.state.OpenConnection()\nself.state=TCPEstablished(self.clisock)\ndefHandleConnection(self):\nifstateisTCPClosed:raiseCloseStateErrorifstateis\nTCPListen: raise ListenStateError if state is\nTCPEstablished:\nself.state.HandleConnection(some_handler)\nself.state=TCPListen(self.sock)\n19\ndefCloseConnection():\nself.state = TCPClosed(self.sock)\nself.state.CloseConnection()\nAsyoucanseeintheexamplepresentedabove,thebehavioroftheconnectionobjectdepend\nonitsstate.Themethodscannotbeusedinanyorder.Whentheobjectisinstantiated,the\n__init__()performstheclassicthreestepsinitializationonserversocketandbringstheobjectto\nlisten state.When in listen state,the clientmay calljustOpenConnection()and\nCloseConnection()methods.Aftertheconnectionisaccepted(viaOpenConnection-alsosee\nthecodebelow,describingthestatesclasses)theobjectisintheestablishedstate,whenit\ndealswiththeotherendoftheconnection.Now,theclientmayusehandleConnection()torun\ntheprotocol.Bydefault,theobjectreturnsitselftolistenstateandthenOpenConectionmustbe\ncalledagaintorealizeanewconnection.WhenCloseConnection()iscalled,theserversocketis\nclosedandfurtheroperationonitwillbediscarded,thustheobjectisnolongerofinterest.This\nisaverybasicapproach,providingjustaskeletonforarealTCPConnectionobject.raise\nstatementsareusedinsignalingtheclientoveranimproperuseoftheobject'smethods.This\nerrorsareconstructedthroughinheritancefromtheExceptionclass.Bellowaredescribedthe\nfourstateclasses:\nclassTCPState:\ndef __init__(self, sock):\nself.sock=sock\ndefOpenConnection(self):pass\ndefHandleConnection(self):pass\ndefCloseConnection(self):pass\nclassTCPClosed(TCPState):\ndef CloseConnection(self, sock):\nsock.close()\nclassTCPListen(TCPState):\ndefOpenConnection(self,sock):\nclisock ,addr= sock.accept()\nreturnclisock\nclassTCPEstablished(TCPState):\ndef HandleConnection(self, handler):\nthread.start_new_thread(handler,\\\n(self.sock,))\nAlltheconcreteclassesareinheritedfrom theTCPStateabstractclass.Thisclass\nprovidesauniform interfacefortheotherthree.Pleaseseethatonlythenecessary\nmethodswereoverridden.Whenanotherstateiswanted,thestateclassisinheritedfrom\nTCPState,methodsareredenedandpropercodeisaddedtotheTCPConnectionclassto\nincludethisstateaswell.\n20\nAdvancedaspectsconcerningclients\nInmajorityofthissection4wefocusedonserverdesign.Thisistrue,becauseaserver\ndesignisfarmuchcomplicatedrelatedtoclientdesign.Aserverisrunningasdemonin\nmostofthecases,dealingwithmanyclients,soitmustbefast,reliableandmustnotbe\npronetoerrors.Aclientismaintainingasingleconnectionwiththeserver(thisforthe\nhugemajorityofclients),thereforethepurenetworkingcodeissimplerandisnotinvolving\nthreading,selectingorforking.However,isrecommendedtoapplyobject-oriented\nprogramminginthiscaseorevenadesignpattern(thepresentedstatedesignpatternis\neasyapplicabletoaclient),butnofork,threadorselect.Lifeisnotsohardwhenonehave\ntodesignthenetworkingpartofaclient.\n21\nChapter5:HTTPprotocol\nHTTPis,besideelectronicmail,themostpopularprotocolonInternettoday.Pleaserefer[8]and[9]fordetailed\ninformationsaboutthisprotocol.HTTPisimplementedinwebserverslikeApacheorinbrowserslikeNetscape\norMosaic.Pythonprovidesafewmodulestoaccessthisprotocol.Wearementioningafewofthem:\nwebbrowser,httplib,cgi,urllib,urllib2,urlparseand threemodulesforalreadybuild HTTP servers:\nBaseHTTPServer,SimpleHTTPServerandCGIHTTPServer.IsprovidedtheCookiemoduleforcookiessupport.\nThewebbrowsermoduleoffersawayindisplayingandcontrollingHTMLdocumentsviaaweb\nbrowser(thiswebbrowserissystemdependent).Usingthecgimoduletheusermaybeabletowrite\ncomplexCGIscripts,replacing\"standard\"CGIscriptinglanguagesasPerl.httplibisamodule\nimplementingtheclientsideoftheHTTPprotocol.Theurllibismodulethatprovidesahigh-levelinterface\nforretrievingweb-basedcontentacrossWorldWideWeb.Thismodule(andurllib2too)usestheprevious\nmentionedmodule,httplib.Asit'snamesays,theurlparsemoduleisusedforparsingURLsinto\ncomponents.\nCGImodule\nCGI(CommonGatewayInterface)isameanthroughonemaysendinformationfromaHTMLpage(i.e.\nusingthe<form>...</form>structures)toaprogramorscriptviaawebserver.Theprogramreceivethis\ninformationinasuitableform{dependingonwebserver{andperformatask:addusertoadatabase,\ncheckapassword,generateaHTMLpageinresponseoranyotheraction.Traditionally,thisscriptslivein\ntheserver'sspecialdirectory'cgi-bin',whompathmustbesetintheserverconfigurationfile.\nBuildasimpleCGIscript\nWhentheuseriscallingaCGIscript,aspecialstringispassedtotheserverspecifyingthescript,\nparameters(fedfromaformoranURLwithquerystring)andotherthings.Theserverispassingallthis\nstutothementionedscriptwhichissupposedtounderstandwhat'shappening,processthequeryand\nexecuteanaction.Ifthescriptisreplyingsomethingtoclient(alltheprintstatements,thescriptoutput\nrespectively),itwillsendthedatachunkthroughthewebserver.Nowisclearwhythisinterfaceiscalled\nCommonGateway{everytransactionbetweenaclientandaCGIscriptismadeusingthewebserver,\nmorespecic,usingtheinterfacebetweentheserverandthescript.\nAsimplescriptwhichsimplydisplaysamessageonthescreenispresentedbellow:\nprint'Content-Type:text/html'print\nprint'HelloWorld!'\nFirsttwolinesaremandatory:theselinestellsthebrowserthatthefollowingcontentmustbeinterpretedas\nHTMLlanguage.Theprintstatementisusedtocreateablankline.Now,whentheheaderisprepared,wemay\nsendtotheclientanyoutput.IftheoutputwillcontainHTMLtags,theywillbeinterpretedasanormalwebpage.\nSavethisscriptinthe'cgi-bin'directoryandsetthepermissionsforitasworldreadableandexecutable.Make\ntheappro-priatemodicationstotheserver'sconfigurationfile.Calling'http://your.server.com/cgi-bin/your-\nscript.py'youshouldseeasmall'HelloWorld!'placedinthetopleftcornerofyourbrowser.\nLet'smodifythescripttodisplaythesamemessagecenteredandwithareasonablesize.Wearegoing\ntousethe<title>,<h1>and<center>HTMLtags:\nprint'Content-Type:text/html'print\n22\nprint'<title>CGITestPage</title>'\nprint'<center><h1>HelloWorld!</h1></center>'\nNowtheroadisopen.TrytogenerateyourownHTMLpageswithCGIscripts.Youcaninsertpictures,\nJavaScriptorVBScriptinyoupages.Ifthebrowsersupportsthem,noproblem.\nUsingCGImodule\nThismoduleisusefulwhenonemightwanttoreadinformationsubmittedbyauserthroughaform.Themodule\nnameis(well!)cgiandmustbeusedwithanimportcgistatement(see[4]).Themoduledenesafewclasses\n(someforbackwardcompatibility)thatcanhandlethewebserver'soutputinordertomakeitaccessibleto\nprogrammer.TherecommendedclassisFieldStorageclassthoughinsomecasesMiniFieldStorageclassis\nused.Theclassinstanceisadictionary-likeobjectandwecanapplythedictionarymethods.BellowistheHTML\npageandthePythoncodetoextracttheinformationsfromtheformelds:\n<html>\n<form name='myform'method='POST'action='/cgi-bin/mycgi.py'><inputtype='text'\nname='yourname'size='30'>\n<inputtype='textarea'name='comment'width='30'heigth='20'><inputtype='submit'>\n</form>\n</html>\nimportcgi\nFormOK=0;\nMyForm=cgi.FieldStorage();\nifMyForm.has_key('yourname')andMyForm.has_key('comment'):FormOK=1\nprint'Content-Type:text/html'print\nifFormOK:\nprint'<p>Yourname:',Myform['yourname'].value,'<br>'print'<p>Youcomment:',\nMyForm['comment'].value\nelse:\nprint'Error:fieldshavenotbeenfilled.'\nAsyoucanseeintheexample,MyFormisaninstanceoftheFieldStorageclassandwillcontainthe\nname-valuepairsdescribedinthe<form>structureintheHTMLpage:thetextfieldwith\nname=yournameandtextareawithname=comment.ApplyinghaskeymethodtoMyFormobjectone\nmaybeabletocheckifaparticulareldhavebeenlledandthen,withMyForm[``name''].valuecan\ncheckthevalueofthatfield.Oncethevalueshavebeenassignedtosomeinternalvariables,the\nprogrammermayusethemasanytrivialvariable.Wepresentnowasmallexamplethatreadaform\nsubmittedbyauser(containingtheusername,addressandphonenumber)andwriteallthevaluesin\nafile.\n<html>\n<form name='personal_data'action='/cgi-bin/my-cgi.py'method='POST'><p>Insertyourname\n:&nbsp;<inputtype='text'name='name'size='30'><p>Insertyouraddress:&nbsp;<inputtype='text'\nname='address'size='30'><p>Phone:&nbsp;<inputtype='text'name='tel'size='15'>\n<p><inputtype='submit'></form>\n23\n</html>\nimportcgi\nMyForm=cgi.FieldStorage()\nwesupposethatallthefieldshavebeenfilled\nandthereisnoneedtocheckthem\nextractingthevaluesfromtheform\nName=MyForm['name'].value\nAddress=MyForm['address'].value\nPhone=myForm['tel'].value\n#openingthefileforwriting\nFile=open('/my/path/to/file','r+')\nFile.write('Name:'+Name)\nFile.write('Address:'+Address)\nFile.write('Phone:'+Phone)\nFile.close\nprint'Content-Type:text/html'print\nprint'Formsubmited...ok.'\nConguringApacheonLinuxforusingwithCGIscripts\nThissectionisabrieftroubleshooterforthosewhichhavesomedicultiesonsettingupascript.If\nyouareusingApacheonLinuxorwhatever*NIXsystemyoushouldseeanerrorwiththecode500\n{InternalServerError.AnothererrorisFileNotFoundbutIthinkthatit'stootrivialtodiscussthishere.\nIfyoureceivea500errorcodehereisalistof'todo'inordertomakeyouscriptworking:\nCheckiftheinterpreterisspecifiedonthefirstlineofyouscript:\n#!/usr/bin/envpython\nPleasecheckiftheinterpreterisworldreadableandexecutable.\nCheckifthefilesaccessedbythescriptarereadableandexecutableby'others'because,dueto\nsecurityreasons,Apacheisrunningyouscriptasuser'nobody'.\nMakesurethatinhttpd.confexistthefollowinglines:\nScriptAlias/cgi-bin/\"/var/www/cgi-bin/\"\nand\n<Directory \"/var/www/cgi-bin\"> AllowOverride\nNone\nOptionsExecCGIOrderallow,deny\nAllowfromall\n24\n</Directory>\nThepathtoyour'cgi-bin'directorymayvary,dependingonhowyouhavesettheDocumentRoot\noptioninthesamefile.\nAlsoit'sagoodpracticetorunthescriptintoaconsole,theinterpreterprintingatracebackincaseany\nerroroccurs,thisbeingthesimplestwaytocorrectsyntaxerrors.Foranyothersolutionsandtipsplease\nrefer[4].\n25\nChapter6:Commonprotocols\nDesigningTelnetapplications\nTelnetisasimpleprotocolthatemulateaterminaloveranetworkedlink.Withtelnetyoucanaccessa\nforeignmachineonaspeciedportandthensendandreceivedataovertheestablishedlinkwithoutany\nrestrictions.Ispossibletoaccessviatelnetclientsawebserver,aPOP3server,amailserverandsoon.\nThepurposeofthetelnetlibistoofferasimplewaytodesignatelnetclient.Thisclientmaybeusedin\nfurtherapplicationsasthesupportforcommunicationbetweentwomachines,usingsomeprotocol.To\nunderstandbetterthepreviousarmations,pleaseconsiderthenexttwoexamples:\n$telnetlocalhost\nTrying127.0.0.1...\nConnectedtolocalhost.\nEscapecharacteris'^]'.\nlogin:\nThisisatrivialtelnetsession.Theremotemachinewillrequestyouausernameandpassword(incasethatthe\ntelnetserviceisupandrunningonthathostandyouareallowedtoaccessit)andthenwilldropyouinashell.\nThemaindisadvantage:thecommunicationisnotcondential:telnetistransmittingeverythingincleartext.\nLet'sconsiderthesecondexample:\n$telnetlocalhost80\nTrying127.0.0.1...\nConnectedtolocalhost.\nEscapecharacteris'^]'.\nGET/\n...\nInthiscasewetrytoaccessawebserver(port80)onsomelocation.ToreceiveawebpageGETmethod\nisusedfollowedbythenameofthepage(inthiscase/istherootpage,commonlynamedindex.html).\nWedidnotspecifiedthecompleteGETrequest,mentioningtheprotocolandotherthings(ifsomeoneis\ninterestedonthistopiccheck[9]).\nConclusion:thesameclientbutdifferentprotocols.WhenweusedtheGETmethodinthesecond\nexample,thetelnetclientwasournetworksupportandtheprotocolwasemulatedtypingit.Thecoreidea\nistouseatelnetclientassupportforthenetworkingpartwhiletheuseriswriting(orusing)it'sown\nprotocoloverthislink.\nPythonisimplementingtheTelnetprotocolwiththetelnetlibmodulewhichoffersaclasscalled\nTelnet(host,port).Theinstanceofthisclassisatelnetobjectwithmethodsforopeningandclosinga\nconnection,readingandwritingdata,checkingthestatusofthelinkanddebuggingthescript.The\npreviousexamplesaretranslatednowinPythoncodeusingthetelnetlib:\nimporttelnetlib\ntelnet=telnetlib.Telnet('localhost')telnet.read_until('login:')\nuser=raw_input('Login:')telnet.write(user+'\\n')\ntelnet.read_until('Password: ') passwd =\nraw_input('Password:')telnet.write(passwd+'\\n')\n26\nnowtheusermaysendcommands\nandreadtheproperoutputs\nAtelnetobjectiscreated(inthiscasetelnet)andtheoutputoftheserverisreaduntilthestring'login:'is\nreached.Nowtheserveriswaitingfortheloginname,whichissuppliedreadingitfromthekeyboardand\nthenpassingitthroughavariabletothewrite()method.Thesamealgorithmisusedforsubmittingthe\npassword.Onetheuserisauthenticatedispossibletosendcommandsandreadtheoutputsendbythe\nserver.Thesecondexampleisasimpleretrievalofawebpagefromacertainaddress,saveittoaleand\ndisplayitusingthewebbrowsermodule.\nimporttelnetlibimportwebbrowser\ntelnet=telnetlib.Telnet('localhost',80)telnet.read_until('^].\\n')\ntelnet.write('GET/')html_page=telnet.read_all()\nhtml_file = open('/some/where/file', 'w')\nhtml_file.write(html_page)html_file.close()\nwebbrowser.open('/some/where/file')\nThecodeabovewillreadtheindexpagefromthespecifiedlocation,willsaveittoafileandthen,through\nthewebbrowsermodulewilldisplayitintoabrowser.Foracompletelistofcommandsdescribedinthe\ntelnetlibmodulepleasereferto[4].\nFileTransferProtocol\nPythoncurrentlyimplementthisprotocolusingtheftplibmodule.Thismoduleisveryusefulwhenone\nmaywanttowriteascriptforautomaticretrievaloflesormirroringftpsitesonadaily(hourly,weekly)\nbasis.ThemoduleisasimpletranslationinPythoncode,asmethodsoftheFTPclass,oftheusual\ncommandsduringaftpsession:get,put,cd,lsetc.\nAswasstatedbefore,thismoduleimplementtheFTPclass.Totestaftpsession,openaterminal,\nenterthePythoninteractiveshellandtypecommandsasbellow:\nimportftplib\nftp_session=ftplib.FTP('ftp.some.host.com')\nftp_session.login()\n'230Guestloginok,accessrestrictionapply.'\n>>>ftp_session.dir()\n....\n>>>ftp_session.close()\nTheftp_sessionistheinstanceoftheFTPclass.Therearecurrentlytwomethodsimplementedtoopena\nconnectiontoagivenserver:specifyingthehostnameandportwheninstantiatingtheftpobjector\napplyingtheopen(host,port)methodforanunconnectedftpobject.\nimportftplib\nftp_session=ftplib.FTP()\nftp_session.open('ftp.some.host.com')\n....\nAftertheconnectionisrealizedtheusermustsubmitit'sloginnameandpassword(inthiscasewasused\nthe'anonymous'usernameanduser@hostpassword).Theserverwillsendbackastringstatingifit\n27\nacceptsorrejecttheuser'sloginandpassword.Aftertheuserhassuccessfullyenteredthesite,the\nfollowingmethodsmaybeuseful:\npwd()forlistingthepathnameofthecurrentdirectory,cwd(pathname)forchangingthedirectory\nanddir(argument[,...])tolistthecontentofthecurrent(orargument)directory,methodsfor\nnavigationandbrowsingthroughthedirectories.\nrename(fromname,toname),delete(filename),mkd(pathname),rmd(pathname)andsize(filename)\nmethods(allofthemareself-explanatory)tomanagelesanddirec-toriesinsideanftpsite.\nretrbinary(command,callback[,maxblocksize[,rest]])methodusedtoretrieveabinaryfile(orto\nretrieveatextfileinbinarymode).commandisa'RETRlename'(see[4]),callbackisafunction\ncalledforeachdatablockreceived.Toreceiveafileortheoutputofacommandintextmode\nretrlines(command[,callback])methodisprovided.\nManyotherscommandsareprovidedandyoumayndacompletedescriptioninPythonLibrary\nReference[4].\nSMTPprotocol\nTheSimpleMailTransferProtocoldescribedin[11],isaprotocolthatmaybeusedtosendemailtoany\nmachineontheInternetwithaSMTPdaemonlisteningonport25(defaultportforSMTPservice).\nPythonimplementstheclientsideofthisprotocol(onemayonlysendbutnotreceivemail)inthe\nsmtplibmodule.Asfortelnetlibandftplibmodules,isdenedaSMTP([host[,port]])classwhichinstance,\nanSMTPobject,hasseveralmethodsthatemulateSMTP.Themodulealsooersarichsetofexception,\nusefulindifferentsituations.Anexhaustivelistofalltheexceptionsdefinedinthismoduleispresented\nbellowforthesakeofcompleteness:\nSMTPException\nSMTPServerDisconnected\nSMTPResponseException\nSMTPSenderRefused\nSMTPRecipientsRefused\nSMTPDataError\nSMTPConnectionError\nSMTPHeloError\nLet'sseeinashortexample,howdoweusethemethodsavailableinthismoduletosendasimpletest\nmailtoaremotemachinenamed'foreign.host.com'foruser'xxx':\nimportsmtplib,sys\ns = smtplib.SMTP()\ns.set_debuglevel(1)\ns.connect('foreign.host.com') #default port 25\ns.helo('foreign.host.com')\nret_code=s.verify('xxx@foreign.host.com')ifret_code[0]==550:\nprint'Error,nosuchuser.'sys.exit(1)\n28\ns.sendmail('user@localhost','xxx@forein.host.com','Testmessage!')s.quit()\nThescriptbeginbyinstantiationtheSMTP()class,herewithoutanyparameters.s.connect('foreign.host.com')\nisusedtoconnecttheclienttotheremoteSMTPserver.Aftertheconnectionisrealizedourclientwillsendan\nHELOmessage.Hereisusefultocheckiftheserveracceptsthismessage(withatry...clauseusingthe\nSMTPHeloErrorexception).ThereisnoreasonfortheservertorejecttheHELOgreetingbutisusefultomake\nsuchaerrorchecking.Withs.verify('xxx@foreig.host.com')thescriptchecksifthereceiveraddressexistson\nthatserver.ret_codeisavariable(list)whichwillcontaintheserverreplyaftertheinstructionisexecuted,\ncontainingtwoelements:aninteger,meaningthereplycodeandastringforhumanconsumption.Incasethe\nuserexistonthatmachine,thecodeis250andincaseoferrorwereceivea550.Themostimportantmethodis\nsendmail(fromaddr,toaddr,message[,mailoptions,recipientoptions]),whichistherealsenderofthemessage.\nBecausewearesuchpolitepeople,wearedoingaquit()beforeeectivelyexitingthescript.Thiswillassurethat\neverythingit'salrightwhenleavingtheSMTPsession.\n29\nChapter7:GettingStartedWithPythoninWindows\nPythonisageneralpurpose,highlevelprogramminglanguagethatisusedinavarietyofapplication\ndomains.ThePythonlanguagehasaveryclearandexpressivesyntaxaswellasalargeand\ncomprehensivelibrary.AlthoughPythonisoftenusedasascriptinglanguage,itcanalsobeusedinawide\nrangeofnon-scriptingcontexts.It\u2019savailableforallmajorOperatingSystems:Windows,Linux/Unix,OS/2,\nMac,Amiga,amongothers.Pythonisfreetouse,evenforcommercialproducts,becauseofitsOSI-\napprovedopensourcelicense.\nPython2orPython3?\nPythonhastwostandardversions,Python2andPython3.Thecurrentproductionversions(July2012)\narePython2.7.3andPython3.2.3.Python2.7isthestatusquo.WerecommendyouusePython2.7for\ncompletingtheassignments.\nInstallingPython\nPythoncanbedownloadeddirectlyfromtheofficialwebsitehttp://www.python.org/.Thisistheprogram\nthatisusedtowriteallyourpythoncode.Ontheleftsideofthewebsitethereisadownloadsection\nClickingthedownloadlinkwillpresentyouwithtwoversionsofPython,namelypython2andpython3;\nyoucanalsochosetheversionspecifictoyouroperatingsystem.MostpopularLinuxdistributionscome\n30\nwithPythoninthedefaultinstallation.MacOSX10.2andlaterincludesacommand-lineversionofPython,\nalthoughyou'llprobablywanttoinstallaversionthatincludesamoreMac-likegraphicalinterface.\nInstallingPythononWindowa\nDouble-clicktheinstaller,Python-2.xxx.yyy.exe.ThenamewilldependontheversionofPythonavailablewhen\nyoureadthis.\nSelectrun.\nStepthroughtheinstallerprogram.\nIfdiskspaceistight,youcandeselecttheHTMLHelpfile,theutilityscripts(Tools/),and/orthetestsuite\n(Lib/test/).\nIfyoudonothaveadministrativerightsonyourmachine,youcanselectAdvancedOptions,thenchooseNon-\nAdminInstall.ThisjustaffectswhereRegistryentriesandStartmenushortcutsarecreated.\nIfyouseethefollowingthatmeanstheinstallationiscomplete.\n31\nAftertheinstallationiscomplete,closetheinstallerandselectStart->Programs->Python2.3>IDLE(Python\nGUI).You'llseesomethinglikethefollowing:\nOtherWindowInstallationOptions\nActiveStatemakesaWindowsinstallerforPythoncalledActivePython,whichincludesacomplete\nversionofPython,anIDEwithaPython-awarecodeeditor,plussomeWindowsextensionsforPython\nthatallow completeaccesstoWindows-specificservices,APIs,andtheWindowsRegistry.\nActivePythonisfreelydownloadable,althoughitisnotopensource.Yourecommendyouusethisfor\nwritingmorecomplicatedprograms.\nDownload ActivePython from http://www.activestate.com/Products/ActivePython/.Ifyou are using\nWindows95,Windows98,orWindowsME,youwillalsoneedtodownloadandinstallWindowsInstaller\n2.0beforeinstallingActivePython.\n32\nInstallingPythonOnMac\nThelatestversionofMacOSX,Lion,comeswithacommandlineversionpreinstalled.Thisversionis\ngreatforlearningbutisnotgoodfordevelopment.Thepreinstalledversionmaybeslightlyoutofdate,it\ndoesnotcomewithanXMLparser,alsoApplehasmadesignificantchangesthatcancausehiddenbugs.\nRatherthanusingthepreinstalledversion,you\u2019llprobablywanttoinstallthelatestversion,whichalso\ncomeswithagraphicalinteractiveshell.\nRunningthePreinstalledMacVersion\nFollowthesestepsinordertousethepreinstalledversion.\nGotoFinder->Applications->Utilities.\nDoubleclickTerminaltogetacommandline.\nTypepythonatthecommandprompt\n33\nNowyoucantryoutsomebasiccodeshere\nInstallingtheLatestVersionontheMac\nAssaidearlierPythoncomespreinstalledonMacOSX,butduetoApple\u2019sreleasecycle,itsoftenayear\nortwoold.The\u201cMacPython\u201dcommunityhighlyrecommendsyoutoupgradeyourPythonbydownloading\nandinstallinganewerversion.\nGotohttp://www.python.org/download/anddownloadtheversionsuitableforyoursystemfromamong\nalistofoptions.\nThedownloadedfileshouldlooklikethis\nDoubleclickthe\u201cPython.mpkg\u201dfile.Theinstallermaypromptyouforyouradministrativeusernameand\npassword.\nStepthroughtheinstallerprogram.\nYoucanchoosethelocationatwhichitistobeinstalled.\n34\n35\nAftertheinstallationiscomplete,closetheinstallerandopentheApplicationsfolder,searchfor\nPythonandyou\u2019llseethePythonIDLEi.e.thestandardGUIthatcomeswiththepackage.\nAlternativePackagesforMacOSX\nActiveStateActivePython(commercialandcommunityversions,includingscientificcomputingmodules).\nActivePythonalsoincludesavarietyofmodulesthatbuildonthesolidcore.\nEnthoughtPython Distribution The EnthoughtPython Distribution provides scientists with a\ncomprehensivesetoftoolstoperformrigorousdataanalysisandvisualization.\nExampleofaBasicPythonProgram\nTheinterface\u201cIdle\u201dthatweopenedsofarisonlyusefulfortestingoutbasicpythoncommandsorcan\notherwisebeusedasacalculator,itbasicallymeanstheprogramcannotbesavedthisway.\nTosaveaprogramandexecuteitweneedtofollowthefollowinginstruction:On\nthetopleftcornerof\u201cIdle\u201dselectFile->NewWindow.\n36\nThenewwindowthatpopsoutwillallowyoutosaveandexecuteyourpythonprograms.Youcanwrite\nyourpythoncodeinthiswindow.Trythefollowing:\nWecannotrunthisprogramwithoutsavingit.Asavedpythonfilehasaniconthatlookslikethis\nYouruntheprogrambypressingF5orRun->RunModule.Youcanalsoruntheprogrambysimplydouble\nclickingthefileicon.Whenyouopenasavedfiletoruntheprogram,youshouldsee:\n37\nLearningPythonProgramming\nPythoniseasytolearn,easytouseandverypowerful.Therearealotofwebresourcesforlearningthe\nlanguage,mostofwhichareentirelyfree.WerecommendSthurlow.com'sABeginner'sPythonTutorial:\nhttp://www.sthurlow.com/python/\nSocketProgrammingAssignment1:WebServer\nInthislab,youwilllearnthebasicsofsocketprogrammingforTCPconnectionsinPython:howtocreatea\nsocket,bindittoaspecificaddressandport,aswellassendandreceiveaHTTPpacket.Youwillalso\nlearnsomebasicsofHTTPheaderformat.\nYouwilldevelopawebserverthathandlesoneHTTPrequestatatime.Yourwebservershouldaccept\nandparsetheHTTPrequest,gettherequestedfilefrom theserver\u2019sfilesystem,createanHTTP\nresponsemessageconsistingoftherequestedfileprecededbyheaderlines,andthensendtheresponse\ndirectlytotheclient.Iftherequestedfileisnotpresentintheserver,theservershouldsendanHTTP\u201c404\nNotFound\u201dmessagebacktotheclient.\nCode\nBelowyouwillfindtheskeletoncodefortheWebserver.Youaretocompletetheskeletoncode.The\nplaceswhereyouneedtofillincodearemarkedwith#Fillinstartand#Fillinend.Eachplacemayrequire\noneormorelinesofcode.\n38\nRunningtheServer\nPutanHTMLfile(e.g.,HelloWorld.html)inthesamedirectorythattheserverisin.Runtheserverprogram.\nDeterminetheIPaddressofthehostthatisrunningtheserver(e.g.,128.238.251.26).Fromanotherhost,\nopenabrowserandprovidethecorrespondingURL.Forexample:\nhttp://128.238.251.26:6789/HelloWorld.html\n\u2018HelloWorld.html\u2019isthenameofthefileyouplacedintheserverdirectory.Notealsotheuseoftheport\nnumberafterthecolon.Youneedtoreplacethisportnumberwithwhateverportyouhaveusedinthe\nservercode.Intheaboveexample,wehaveusedtheportnumber6789.Thebrowsershouldthendisplay\nthecontentsofHelloWorld.html.Ifyouomit\":6789\",thebrowserwillassumeport80andyouwillgetthe\nwebpagefromtheserveronlyifyourserverislisteningatport80.\nThentrytogetafilethatisnotpresentattheserver.Youshouldgeta\u201c404NotFound\u201dmessage.\nWhattoHandin\nYouwillhandinthecompleteservercodealongwiththescreenshotsofyourclientbrowser,verifyingthat\nyouactuallyreceivethecontentsoftheHTMLfilefromtheserver.\nSkeletonPythonCodefortheWebServer\n#import socket module from socket import *\nserverSocket=socket(AF_INET,SOCK_STREAM)\n#Prepareaseversocket\n#Fillinstart\n#FillinendwhileTrue:\n#Establishtheconnection print'Readytoserve...' connectionSocket,addr= #Fillinstart\n#Fillinend try:\nmessage= #Fillinstart #Fillinend filename=\nmessage.split()[1] f=open(filename[1:])\noutputdata=#Fillinstart #Fillinend\n#SendoneHTTPheaderlineintosocket\n#Fillinstart #Fillinend\n#Sendthecontentoftherequestedfiletotheclient foriinrange(0,\nlen(outputdata)):\nconnectionSocket.send(outputdata[i])\nconnectionSocket.close() exceptIOError:\n#Sendresponsemessageforfilenotfound\n#Fillinstart #Fillinend\n39\n#Closeclientsocket\n#Fillinstart #Fillinend\nserverSocket.close()\nOptionalExercises\nCurrently,thewebserverhandlesonlyoneHTTPrequestatatime.Implementamultithreadedserverthatis\ncapableofservingmultiplerequestssimultaneously.Usingthreading,firstcreateamainthreadinwhich\nyourmodifiedserverlistensforclientsatafixedport.WhenitreceivesaTCPconnectionrequestfroma\nclient,itwillsetuptheTCPconnectionthroughanotherportandservicestheclientrequestinaseparate\nthread.TherewillbeaseparateTCPconnectioninaseparatethreadforeachrequest/responsepair.\nInsteadofusingabrowser,writeyourownHTTPclienttotestyourserver.Yourclientwillconnecttothe\nserverusingaTCPconnection,sendanHTTPrequesttotheserver,anddisplaytheserverresponseasan\noutput.YoucanassumethattheHTTPrequestsentisaGETmethod.\nTheclientshouldtakecommandlineargumentsspecifyingtheserverIPaddressorhostname,the\nportatwhichtheserverislistening,andthepathatwhichtherequestedobjectisstoredattheserver.\nThefollowingisaninputcommandformattoruntheclient.\nclient.pyserver_hostserver_portfilename\n40\nSocketProgrammingAssignment2:UDP\nInthislab,youwilllearnthebasicsofsocketprogrammingforUDPinPython.Youwill\nlearnhowtosendandreceivedatagrampacketsusingUDPsocketsandalso,howtoseta\npropersockettimeout.Throughoutthelab,youwillgainfamiliaritywithaPingapplication\nanditsusefulnessincomputingstatisticssuchaspacketlossrate.\nYouwillfirststudyasimpleInternetpingserverwritteninthePython,andimplementa\ncorrespondingclient.Thefunctionalityprovidedbytheseprogramsissimilartothe\nfunctionalityprovidedbystandardpingprogramsavailableinmodernoperatingsystems.\nHowever,theseprogramsuseasimplerprotocol,UDP,ratherthanthestandardInternet\nControlMessageProtocol(ICMP)tocommunicatewitheachother.Thepingprotocol\nallowsaclientmachinetosendapacketofdatatoaremotemachine,andhavetheremote\nmachinereturnthedatabacktotheclientunchanged(anactionreferredtoasechoing).\nAmongotheruses,thepingprotocolallowshoststodetermineround-triptimestoother\nmachines.\nYouaregiventhecompletecodeforthePingserverbelow.YourtaskistowritethePing\nclient.\nServerCode\nThefollowingcodefullyimplementsapingserver.Youneedtocompileandrunthiscode\nbeforerunningyourclientprogram.Youdonotneedtomodifythiscode.\nInthisservercode,30%oftheclient\u2019spacketsaresimulatedtobelost.Youshouldstudy\nthiscodecarefully,asitwillhelpyouwriteyourpingclient.\n#UDPPingerServer.py\n#Wewillneedthefollowingmoduletogeneraterandomizedlostpacketsimport\nrandomfromsocketimport*\n#CreateaUDPsocket\n#NoticetheuseofSOCK_DGRAMforUDPpackets\nserverSocket=socket(AF_INET,SOCK_DGRAM)#\nAssignIPaddressandportnumbertosocket\nserverSocket.bind(('',12000))\nwhi\nle\nTru\ne:\n#Generaterandomnumberintherangeof0to10rand\n=random.randint(0,10)\n#Receivetheclientpacketalongwiththeaddressitiscomingfrom message,\naddress=serverSocket.recvfrom(1024)\n#Capitalizethemessagefromtheclient message\n=message.upper()\n#Ifrandislessisthan4,weconsiderthepacketlostanddonotrespond ifrand<4:\ncontinue\n41\n# Otherwise, the server responds\nserverSocket.sendto(message,address)\nTheserversitsinaninfinitelooplisteningforincomingUDPpackets.Whenapacket\ncomesinandifarandomizedintegerisgreaterthanorequalto4,theserversimply\ncapitalizestheencapsulateddataandsendsitbacktotheclient.\nPacketLoss\nUDPprovidesapplicationswithanunreliabletransportservice.Messagesmaygetlostin\nthenetworkduetorouterqueueoverflows,faultyhardwareorsomeotherreasons.\nBecausepacketlossisrareorevennon-existentintypicalcampusnetworks,theserverin\nthislabinjectsartificiallosstosimulatetheeffectsofnetworkpacketloss.Theserver\ncreatesavariablerandomizedintegerwhichdetermineswhetheraparticularincoming\npacketislostornot.\nClientCode\nYouneedtoimplementthefollowingclientprogram.\nTheclientshouldsend10pingstotheserver.BecauseUDPisanunreliableprotocol,a\npacketsentfromtheclienttotheservermaybelostinthenetwork,orviceversa.Forthis\nreason,theclientcannotwaitindefinitelyforareplytoapingmessage.Youshouldgetthe\nclientwaituptoonesecondforareply;ifnoreplyisreceivedwithinonesecond,yourclient\nprogramshouldassumethatthepacketwaslostduringtransmissionacrossthenetwork.\nYouwillneedtolookupthePythondocumentationtofindouthowtosetthetimeoutvalue\nonadatagramsocket.\nSpecifically,yourclientprogramshould\n(1)sendthepingmessageusingUDP(Note:UnlikeTCP,youdonotneedtoestablisha\nconnectionfirst,sinceUDPisaconnectionlessprotocol.)(2)printtheresponsemessage\nfromserver,ifany\ncalculateandprinttheroundtriptime(RTT),inseconds,ofeachpacket,ifserverresponses\notherwise,print\u201cRequesttimedout\u201d\nDuringdevelopment,youshouldruntheUDPPingerServer.pyonyourmachine,andtest\nyourclientbysendingpacketstolocalhost(or,127.0.0.1).Afteryouhavefullydebugged\nyourcode,youshouldseehowyourapplicationcommunicatesacrossthenetworkwiththe\npingserverandpingclientrunningondifferentmachines.\nMessageFormat\nThepingmessagesinthislabareformattedinasimpleway.Theclientmessageisone\nline,consistingofASCIIcharactersinthefollowingformat:\nPingsequence_numbertime\nwheresequence_numberstartsat1andprogressesto10foreachsuccessiveping\nmessagesentbytheclient,andtimeisthetimewhentheclientsendsthemessage.\nWhattoHandin\nYouwillhandinthecompleteclientcodeandscreenshotsattheclientverifyingthatyour\npingprogramworksasrequired.\nOptionalExercises\nCurrently,theprogram calculatestheround-triptimeforeachpacketandprintsitout\nindividually.Modifythistocorrespondtothewaythestandardpingprogramworks.You\nwillneedtoreporttheminimum,maximum,andaverageRTTsattheendofallpingsfrom\ntheclient.Inaddition,calculatethepacketlossrate(inpercentage).\n42\nAnothersimilarapplicationtotheUDPPingwouldbetheUDPHeartbeat.TheHeartbeatcanbe\nusedtocheckifanapplicationisupandrunningandtoreportone-waypacketloss.The\nclientsendsasequencenumberandcurrenttimestampintheUDPpackettotheserver,\nwhichislisteningfortheHeartbeat(i.e.,theUDPpackets)oftheclient.Uponreceivingthe\npackets,theservercalculatesthetimedifferenceandreportsanylostpackets.Ifthe\nHeartbeatpacketsaremissingforsomespecifiedperiodoftime,wecanassumethatthe\nclientapplicationhasstopped.ImplementtheUDPHeartbeat(bothclientandserver).You\nwillneedtomodifythegivenUDPPingerServer.py,andyourUDPpingclient.\nSocketProgrmmingAssignment3:SMTP\nBytheendofthislab,youwillhaveacquiredabetterunderstandingofSMTPprotocol.You\nwillalsogainexperienceinimplementingastandardprotocolusingPython.\nYourtaskistodevelopasimplemailclientthatsendsemailtoanyrecipient.Yourclient\nwillneedtoconnecttoamailserver,dialoguewiththemailserverusingtheSMTPprotocol,\nandsendanemailmessagetothemailserver.Pythonprovidesamodule,calledsmtplib,\nwhichhasbuiltinmethodstosendmailusingSMTPprotocol.However,wewillnotbe\nusingthismoduleinthislab,becauseithidethedetailsofSMTPandsocketprogramming.\nInordertolimitspam,somemailserversdonotacceptTCPconnectionfromarbitrary\nsources.Fortheexperimentdescribedbelow,youmaywanttotryconnectingbothtoyour\nuniversitymailserverandtoapopularWebmailserver,suchasaAOLmailserver.Youmay\nalsotrymakingyourconnectionbothfromyourhomeandfromyouruniversitycampus.\nCode\nBelowyouwillfindtheskeletoncodefortheclient.Youaretocompletetheskeletoncode.\nTheplaceswhereyouneedtofillincodearemarkedwith#Fillinstartand#Fillinend.Each\nplacemayrequireoneormorelinesofcode.\nAdditionalNotes\nInsomecases,thereceivingmailservermightclassifyyoure-mailasjunk.Makesureyou\ncheckthejunk/spamfolderwhenyoulookforthee-mailsentfromyourclient.\nWhattoHandin\nInyoursubmission,youaretoprovidethecompletecodeforyourSMTPmailclientaswell\nasascreenshotshowingthatyouindeedreceivethee-mailmessage.\nSkeletonPythonCodefortheMailClientfromsocketimport*\nmsg=\u201d\\r\\nIlovecomputernetworks!\u201d\nendmsg=\u201d\\r\\n.\\r\\n\u201d\n#Chooseamailserver(e.g.Googlemailserver)andcallitmailservermailserver=#Fillinstart\n#Fillinend\n#CreatesocketcalledclientSocketandestablishaTCPconnectionwithmailserver\n#Fillinstart\n#Fillinend\nrecv =\nclientSocket.recv(1024)\nprintrecvifrecv[:3]!=\n'220':\n43\nprint'220replynotreceivedfromserver.'\n#SendHELO commandandprintserver\nresponse.heloCommand='HELOAlice\\r\\n'\nclientSocket.send(heloCommand) recv1 =\nclientSocket.recv(1024)\nprintrecv1ifrecv1[:3]!='250': print'250reply\nnotreceivedfromserver.'\n#SendMAILFROMcommandandprintserverresponse.\n#Fillinstart\n#Fillinend\n#SendRCPTTOcommandandprintserverresponse.\n#Fillinstart\n#Fillinend\n#SendDATAcommandandprintserverresponse.\n#Fillinstart\n#Fillinend\n# Send\nmessage\ndata.#Fillin\nstart\n#Fillinend\n#Messageendswithasingleperiod.\n#Fillinstart\n#Fillinend\n#SendQUITcommandandgetserverresponse.\n#Fillinstart\n#Fillinend\nOptionalExercises\nMailserverslikeGooglemail(address:smtp.gmail.com,port:587)requiresyourclienttoadda\nTransportLayerSecurity(TLS)orSecureSocketsLayer(SSL)forauthenticationand\nsecurityreasons,beforeyousendMAILFROMcommand.AddTLS/SSLcommandstoyour\n44\nexistingonesandimplementyourclientusingGooglemailserverataboveaddressand\nport.\nYourcurrentSMTPmailclientonlyhandlessendingtextmessagesintheemailbody.Modify\nyourclientsuchthatitcansendemailswithbothtextandimages.\nSocketProgrammingAssignment4:ICMPPinger\nInthislab,youwillgainabetterunderstandingofInternetControlMessageProtocol\n(ICMP).YouwilllearntoimplementaPingapplicationusingICMPrequestandreply\nmessages.\nPingisacomputernetworkapplicationusedtotestwhetheraparticularhostisreachable\nacrossanIPnetwork.Itisalsousedtoself-testthenetworkinterfacecardofthecomputer\norasalatencytest.ItworksbysendingICMP\u201cechoreply\u201dpacketstothetargethostand\nlisteningforICMP\u201cechoreply\u201dreplies.The\"echoreply\"issometimescalledapong.Ping\nmeasurestheround-triptime,recordspacketloss,andprintsastatisticalsummaryofthe\nechoreplypacketsreceived(theminimum,maximum,andthemeanoftheround-trip\ntimesandinsomeversionsthestandarddeviationofthemean).\nYourtaskistodevelopyourownPingapplicationinPython.YourapplicationwilluseICMP\nbut,inordertokeepitsimple,willnotexactlyfollowtheofficialspecificationinRFC1739.\nNotethatyouwillonlyneedtowritetheclientsideoftheprogram,asthefunctionality\nneededontheserversideisbuiltintoalmostalloperatingsystems.\nYoushouldcompletethePingapplicationsothatitsendspingrequeststoaspecifiedhost\nseparatedbyapproximatelyonesecond.Eachmessagecontainsapayloadofdatathat\nincludesatimestamp.Aftersendingeachpacket,theapplicationwaitsuptoonesecond\ntoreceiveareply.Ifonesecondgoesbywithoutareplyfromtheserver,thentheclient\nassumesthateitherthepingpacketorthepongpacketwaslostinthenetwork(orthatthe\nserverisdown).\nCode\nBelowyouwillfindtheskeletoncodefortheclient.Youaretocompletetheskeleton\ncode.Theplaceswhereyouneedtofillincodearemarkedwith#Fillinstartand#Fillin\nend.Eachplacemayrequireoneormorelinesofcode.\nAdditionalNotes\nIn\u201creceiveOnePing\u201dmethod,youneedtoreceivethestructureICMP_ECHO_REPLYandfetch\ntheinformationyouneed,suchaschecksum,sequencenumber,timetolive(TTL),etc.\nStudythe\u201csendOnePing\u201dmethodbeforetryingtocompletethe\u201creceiveOnePing\u201dmethod.\nYoudonotneedtobeconcernedaboutthechecksum,asitisalreadygiveninthecode.\nThislabrequirestheuseofraw sockets.Insomeoperatingsystems,youmayneed\nadministrator/rootprivilegestobeabletorunyourPingerprogram.\nSeetheendofthisprogrammingexerciseformoreinformationonICMP.\nTestingthePinger\nFirst,testyourclientbysendingpacketstolocalhost,thatis,127.0.0.1.\nThen,youshouldseehowyourPingerapplicationcommunicatesacrossthenetworkby\npingingserversindifferentcontinents.\nWhattoHandin\nYouwillhandinthecompleteclientcodeandscreenshotsofyourPingeroutputforfour\n45\ntargethosts,eachonadifferentcontinent.\nSkeletonPythonCodefortheICMPPinger\nfromsocketimport*\nimportos\nimport\nsys\nimport\nstruct\nimport\ntime\nimport\nselect\nimport\nbinascii\nICMP_ECHO_REQUEST=8\ndef\nchecksum(\nstr):\ncsum=0\ncountTo=(len(str)/2)*2\ncount=0 whilecount<countTo: thisVal=\nord(str[count+1])*256+ord(str[count])\ncsum=csum+thisVal csum=\ncsum&0xffffffffL\ncount=count+2\nifcountTo<len(str): csum=csum+\nord(str[len(str)-1]) csum =csum &\n0xffffffffL\ncsum=(csum>>16)+(csum&0xffff)\ncsum=csum+(csum>>16)\nanswer = ~csum\nanswer=answer&0xffff\nanswer=answer>>8|(answer<<8&0xff00)\nreturnanswer\ndefreceiveOnePing(mySocket,ID,timeout,destAddr):\ntimeLeft=timeout\nwhil\ne1:\nstartedSelect=time.time()\nwhatReady=select.select([mySocket],[],[],timeLeft) howLongInSelect=(time.time()-\n46\nstartedSelect)\nifwhatReady[0]==[]:#Timeout return\n\"Requesttimedout.\"\ntimeReceived=time.time() recPacket,addr=\nmySocket.recvfrom(1024)\n#Fillinstart\n#FetchtheICMPheaderfromtheIPpacket\n#Fillinend\ntimeLeft= timeLeft-howLongInSelect\niftimeLeft<=0: return\"Requesttimed\nout.\"\ndefsendOnePing(mySocket,destAddr,\nID):\n#Headeristype(8),code(8),checksum(16),id(16),sequence(16)\nmyChecksu\nm=0\n#Makeadummyheaderwitha0checksum.\n#struct--Interpretstringsaspackedbinarydata\nheader=struct.pack(\"bbHHh\",ICMP_ECHO_REQUEST,0,myChecksum,ID,1)\ndata=struct.pack(\"d\",time.time())\n#Calculatethechecksumonthedataandthedummyheader. myChecksum=\nchecksum(header+data)\n#Gettherightchecksum,andputintheheader if\nsys.platform=='darwin':\nmyChecksum=socket.htons(myChecksum)&0xffff #Convert16-\nbitintegersfromhosttonetworkbyteorder.\nelse:\nmyChecksum=socket.htons(myChecksum)\nheader=struct.pack(\"bbHHh\",ICMP_ECHO_REQUEST,0,myChecksum,ID,1) packet=header+\ndata\nmySocket.sendto(packet,(destAddr,1))#AF_INETaddressmustbetuple,notstr\n#BothLISTSandTUPLESconsistofanumberofobjects\n#whichcanbereferencedbytheirpositionnumberwithintheobject\ndefdoOnePing(destAddr,timeout):\n47\nicmp = socket.getprotobyname(\"icmp\")\n#SOCK_RAW isapowerfulsockettype.\nFor more details see: http://sock-\nraw.org/books/sock_raw\n#Fillinstart\n#CreateSockethere\n#Fillinend\nmyID=os.getpid()&0xFFFF#Returnthecurrentprocessi\nsendOnePing(mySocket, destAddr, myID) delay =\nreceiveOnePing(mySocket,myID,timeout,destAddr)\nmySocket.close()\nreturndelay\ndef ping(host,\ntimeout=1):\n#timeout=1means:Ifonesecondgoesbywithoutareplyfromtheserver,\n#theclientassumesthateithertheclient\u2019spingortheserver\u2019spongislost\ndest=socket.gethostbyname(host) print\n\"Pinging\"+dest+\"usingPython:\"\nprint\"\"\n#Sendpingrequeststoaserverseparatedbyapproximatelyonesecond while1:\ndelay=doOnePing(dest,timeout)\nprint delay\ntime.sleep(1)#onesecond\nreturndelay\nping(\"www.poly.edu\")\nOptionalExercises\nCurrently,theprogram calculatestheround-triptimeforeachpacketandprintsitout\nindividually.Modifythistocorrespondtothewaythestandardpingprogramworks.You\nwillneedtoreporttheminimum,maximum,andaverageRTTsattheendofallpingsfrom\ntheclient.Inaddition,calculatethepacketlossrate(inpercentage).\nYourprogramcanonlydetecttimeoutsinreceivingICMPechoresponses.ModifythePinger\nprogram toparsetheICMPresponseerrorcodesanddisplaythecorrespondingerror\nresultstotheuser.ExamplesofICMPresponseerrorcodesare0:DestinationNetwork\nUnreachable,1:DestinationHostUnreachable.\nInternetControlMessageProtocol(ICMP)\nICMPHeader\n48\nTheICMPheaderstartsafterbit160oftheIPheader(unlessIPoptionsareused).\nBits 160-167 168-175 176-183 184-191\n160 Type Code Checksum\n192 I D Sequence\nType-ICMPtype.\nCode-SubtypetothegivenICMPtype.\nChecksum-ErrorcheckingdatacalculatedfromtheICMPheader+data,withvalue0forthis\nfield.\nID-AnIDvalue,shouldbereturnedinthecaseofechoreply.\nSequence-Asequencevalue,shouldbereturnedinthecaseofechoreply.\nEchoRequest\nTheechorequestisanICMPmessagewhosedataisexpectedtobereceivedbackinan\nechoreply(\"pong\").Thehostmustrespondtoallechorequestswithanechoreply\ncontainingtheexactdatareceivedintherequestmessage.\nTypemustbesetto8.\nCodemustbesetto0.\nTheIdentifierandSequenceNumbercanbeusedbytheclienttomatchthereplywiththe\nrequestthatcausedthereply.Inpractice,mostLinuxsystemsuseauniqueidentifierfor\neverypingprocess,andsequencenumberisanincreasingnumberwithinthatprocess.\nWindowsusesafixedidentifier,whichvariesbetweenWindowsversions,andasequence\nnumberthatisonlyresetatboottime.\nThedatareceivedbytheechorequestmustbeentirelyincludedintheechoreply.\nEchoReply\nTheechoreplyisanICMPmessagegeneratedinresponsetoanechorequest,andis\nmandatoryforallhostsandrouters.\nTypeandcodemustbesetto0.\nTheidentifierandsequencenumbercanbeusedbytheclienttodeterminewhichecho\nrequestsareassociatedwiththeechoreplies.\nThedatareceivedintheechorequestmustbeentirelyincludedintheechoreply.\n49\nReferences\nS.Leeretal:AnAdvanced4.3BSDInterprocessCommunicationTutorial\nA.Tanenbaum:ComputerNetworks3rd-ed.,Prentice-Hall,1996\nE.Grammaetal:Designpatterns-ElementsofReusableObject-OrientedSoftware,\nAddison-Wesley,1994\nG.vanRossum:PythonLibraryReference\nG.vanRossum:PyhtonTutorial\nG.vanRossum:PyhtonLanguageReference\nG.McMillan:SocketProgrammingHOWTO\n***:HTTP1.0-RFC1945\n***:HTTP1.1-RFC2068\n***:TelnetProtocolSpecications-RFC854\n***:SimpleMailTreanferProtocol-RFC821\n***:SMTPServiceExtensions-RFC1869\n50\n",
  "context": "2.4 Listeningandacceptingconnections........................\n2.5 UDPsockets.....................................\n2.6 Closingthesocket..................................",
  "source_file": "resources\\Year 3\\Socket Programming\\Socket Programming.pdf",
  "line_numbers": [
    45,
    1506
  ]
}