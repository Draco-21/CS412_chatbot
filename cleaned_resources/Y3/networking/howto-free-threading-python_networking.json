{
  "title": "howto-free-threading-python",
  "language": "javascript",
  "topics": [
    "networking",
    "data_structures",
    "web_dev",
    "fundamentals"
  ],
  "purpose": "1 1 Installation Starting with Python 3.13, the official macOS and Windows installers optionally support installing free-threaded",
  "code": "Pythonbinaries. Theinstallersareavailableathttps://www.python.org/downloads/.\nForinformationonotherplatforms,seetheInstallingaFree-ThreadedPython,acommunity-maintainedinstallation\nguideforinstallingfree-threadedPython.\nWhenbuildingCPythonfromsource,the--disable-gilconfigureoptionshouldbeusedtobuildafree-threaded\nPythoninterpreter.\n2 Identifying free-threaded Python\nTocheckifthecurrentinterpretersupportsfree-threading,python -VVandsys.versioncontain\u201cexperimental\nfree-threading build\u201d. The new sys._is_gil_enabled() function can be used to check whether the GIL is\nactuallydisabledintherunningprocess.\nThe sysconfig.get_config_var(\"Py_GIL_DISABLED\") configuration variable can be used to determine\nwhetherthebuildsupportsfreethreading. Ifthevariableissetto1,thenthebuildsupportsfreethreading. Thisis\ntherecommendedmechanismfordecisionsrelatedtothebuildconfiguration.\n3 The global interpreter lock in free-threaded Python\nFree-threadedbuildsofCPythonsupportoptionallyrunningwiththeGILenabledatruntimeusingtheenvironment\nvariablePYTHON_GILorthecommand-lineoption-X gil.\nTheGILmayalsoautomaticallybeenabledwhenimportingaC-APIextensionmodulethatisnotexplicitlymarked\nassupportingfreethreading. Awarningwillbeprintedinthiscase.\nInadditiontoindividualpackagedocumentation,thefollowingwebsitestrackthestatusofpopularpackagessupport\nforfreethreading:\n\u2022 https://py-free-threading.github.io/tracking/\n\u2022 https://hugovk.github.io/free-threaded-wheels/\n4 Thread safety\nThe free-threaded build of CPython aims to provide similar thread-safety behavior at the Python level to the de-\nfault GIL-enabled build. Built-in types like dict, list, and set use internal locks to protect against concurrent\nmodifications in ways that behave similarly to the GIL. However, Python has not historically guaranteed specific\nbehaviorforconcurrentmodificationstothesebuilt-intypes,sothisshouldbetreatedasadescriptionofthecurrent\nimplementation,notaguaranteeofcurrentorfuturebehavior.\n(cid:174) Note\nIt\u2019s recommended to use the threading.Lock or other synchronization primitives instead of relying on the\ninternallocksofbuilt-intypes,whenpossible.\n5 Known limitations\nThissectiondescribesknownlimitationsofthefree-threadedCPythonbuild.\n2\n5.1 Immortalization\nThefree-threadedbuildofthe3.13releasemakessomeobjectsimmortal. Immortalobjectsarenotdeallocatedand\nhavereferencecountsthatarenevermodified. Thisisdonetoavoidreferencecountcontentionthatwouldprevent\nefficientmulti-threadedscaling.\nAnobjectwillbemadeimmortalwhenanewthreadisstartedforthefirsttimeafterthemainthreadisrunning. The\nfollowingobjectsareimmortalized:\n\u2022 functionobjectsdeclaredatthemodulelevel\n\u2022 methoddescriptors\n\u2022 codeobjects\n\u2022 moduleobjectsandtheirdictionaries\n\u2022 classes(typeobjects)\nBecause immortal objects are never deallocated, applications that create many objects of these types may see in-\ncreasedmemoryusage. Thisisexpectedtobeaddressedinthe3.14release.\nAdditionally,numericandstringliteralsinthecodeaswellasstringsreturnedbysys.intern()arealsoimmor-\ntalized. Thisbehaviorisexpectedtoremaininthe3.14free-threadedbuild.\n5.2 Frame objects\nItisnotsafetoaccessframeobjectsfromotherthreadsanddoingsomaycauseyourprogramtocrash. Thismeans\nthat sys._current_frames() is generally not safe to use in a free-threaded build. Functions like inspect.\ncurrentframe()andsys._getframe()aregenerallysafeaslongastheresultingframeobjectisnotpassedto\nanotherthread.\n5.3 Iterators\nSharing the same iterator object between multiple threads is generally not safe and threads may see duplicate or\nmissingelementswheniteratingorcrashtheinterpreter.\n5.4 Single-threaded performance\nThefree-threadedbuildhasadditionaloverheadwhenexecutingPythoncodecomparedtothedefaultGIL-enabled\nbuild. In3.13,thisoverheadisabout40%onthepyperformancesuite. ProgramsthatspendmostoftheirtimeinC\nextensionsorI/Owillseelessofanimpact. Thelargestimpactisbecausethespecializingadaptiveinterpreter(PEP\n659)isdisabledinthefree-threadedbuild. Weexpecttore-enableitinathread-safewayinthe3.14release. This\noverheadisexpectedtobereducedinupcomingPythonrelease. Weareaimingforanoverheadof10%orlesson\nthepyperformancesuitecomparedtothedefaultGIL-enabledbuild.\n3\nIndex\nE\nenvironment variable\nPYTHON_GIL,2\nP\nPython Enhancement Proposals\nPEP 659,3\nPEP 703,1\nPYTHON_GIL,2\n4\n",
  "context": "1\n1 Installation\nStarting with Python 3.13, the official macOS and Windows installers optionally support installing free-threaded",
  "source_file": "resources\\Year 3\\Python\\howto-free-threading-python.pdf",
  "line_numbers": [
    33,
    107
  ]
}